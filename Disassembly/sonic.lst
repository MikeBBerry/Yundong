00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            	include	"build_options.asm"
00000000                            ;---------------------------------------------------------
00000000                            ; Build Options
00000000                            ;---------------------------------------------------------
00000000                            
00000000 =00000000                  skipSplashes: = 0
00000000                            
00000000 =00000000                  flamewing_debug: = 0
00000000 =00000000                  flamewing_debug: = 0
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; =============================================================
00000000                            stopZ80		macro
00000000                            		move.w    #$100,($A11100).l
00000000                            		nop
00000000                            		nop
00000000                            		nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            startZ80    macro
00000000                            		move.w    #0,($A11100).l    ; start the Z80
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            waitYM		macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                            		btst    #7,d2
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000 =FFFFFFC4                  VBlankJump	equ $FFFFFFC4
00000000 =FFFFFFCA                  HBlankJump	equ VBlankJump+6
00000000                            ; ===========================================================================
00000000                            
00000000                            loadJumps	macro fromloc
00000000                            
00000000                            		lea	VBlankJump,a0
00000000                            		lea	fromloc,a1
00000000                            	rept 3
00000000                            		move.l	(a1)+,(a0)+
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000        Vectors:	dc.l $FFFE00, EntryPoint
00000008 6000 FFFE                  ErrorTrap:	bra.w	*
0000000C                            
0000000C 0000 0000 0000 0000 0000+  		dc.l AddressError, IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0008 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 FFFF FFCA 0000 0008 FFFF+  		dc.l HBlankJump, ErrorTrap, VBlankJump, ErrorTrap
00000080 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F4                            
000000F4                            ; ===========================================================================
000000F4 4EF9 0000 0000             IntMain:	jmp	V_Int
000000FA 4EF9 0000 0000             			jmp	H_Int
00000100                            ; ===========================================================================
00000100 5345 4741 204D 4547 4120+  Console:		dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 4F57 4152 4920 2020 3230+  Date:			dc.b 'OWARI   2016.NOV' ; Release date
00000120 5975 6E64 6F6E 6720 5A69+  Title_Local:	dc.b 'Yundong Zixingche                               ' ; Domestic name
00000150 5975 6E67 646F 6E67 205A+  Title_Int:		dc.b 'Yungdong Zixingche                              ' ; International name
00000180 474D 2031 3331 3331 3331+  Serial:			dc.b 'GM 13131313-13'   ; Serial/version number
0000018E 0000                       Checksum:		dc.w 0
00000190 4A20 2020 2020 2020 2020+  				dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom			; ROM start
000001A4 0000 0000                  RomEndLoc:		dc.l EndOfRom-1			; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000			; RAM start
000001AC 00FF FFFF                  RamEndLoc:		dc.l $FFFFFF			; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020			; change to $5241E020 to create	SRAM
000001B4 2020 2020                  				dc.l $20202020			; SRAM start
000001B8 2020 2020                  				dc.l $20202020			; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:			dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:			dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            EntryPoint:
00000200 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
00000206 6600                       		bne.s	PortA_Ok
00000208 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
0000020E                            
0000020E                            PortA_Ok:
0000020E 6600                       		bne.s	PortC_Ok
00000210 4BFA 0000                  		lea	SetupValues(pc),a5
00000214 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000218 4CDD 1F00                  		movem.l	(a5)+,a0-a4
0000021C 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000220 0200 000F                  		andi.b	#$F,d0
00000224 6700                       		beq.s	SkipSecurity
00000226 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
0000022E                            
0000022E                            SkipSecurity:
0000022E 3014                       		move.w	(a4),d0		; check	if VDP works
00000230 7000                       		moveq	#0,d0
00000232 2C40                       		movea.l	d0,a6
00000234 4E66                       		move.l	a6,usp		; set usp to $0
00000236 7217                       		moveq	#$17,d1
00000238                            
00000238                            VDPInitLoop:
00000238 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000023A 3885                       		move.w	d5,(a4)		; move value to	VDP register
0000023C DA47                       		add.w	d7,d5		; next register
0000023E 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000242 289D                       		move.l	(a5)+,(a4)
00000244 3680                       		move.w	d0,(a3)		; clear	the screen
00000246 3287                       		move.w	d7,(a1)		; stop the Z80
00000248 3487                       		move.w	d7,(a2)		; reset	the Z80
0000024A                            
0000024A                            WaitForZ80:
0000024A 0111                       		btst	d0,(a1)		; has the Z80 stopped?
0000024C 66FC                       		bne.s	WaitForZ80	; if not, branch
0000024E 7425                       		moveq	#$25,d2
00000250                            
00000250                            Z80InitLoop:
00000250 10DD                       		move.b	(a5)+,(a0)+
00000252 51CA FFFC                  		dbf	d2,Z80InitLoop
00000256 3480                       		move.w	d0,(a2)
00000258 3280                       		move.w	d0,(a1)		; start	the Z80
0000025A 3487                       		move.w	d7,(a2)		; reset	the Z80
0000025C                            
0000025C                            ClrRAMLoop:
0000025C 2D00                       		move.l	d0,-(a6)
0000025E 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000262 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000264 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
00000266 761F                       		moveq	#$1F,d3
00000268                            
00000268                            ClrCRAMLoop:
00000268 2680                       		move.l	d0,(a3)
0000026A 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
0000026E 289D                       		move.l	(a5)+,(a4)
00000270 7813                       		moveq	#$13,d4
00000272                            
00000272                            ClrVDPStuff:
00000272 2680                       		move.l	d0,(a3)
00000274 51CC FFFC                  		dbf	d4,ClrVDPStuff
00000278 7A03                       		moveq	#3,d5
0000027A                            
0000027A                            PSGInitLoop:
0000027A 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
0000027E 51CD FFFA                  		dbf	d5,PSGInitLoop
00000282 3480                       		move.w	d0,(a2)
00000284 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
00000288 46FC 2700                  		move	#$2700,sr	; set the sr
0000028C                            
0000028C                            PortC_Ok:
0000028C 6000                       		bra.s	GameProgram
0000028E                            ; ===========================================================================
0000028E 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000290 3FFF                       		dc.w $3FFF
00000292 0100                       		dc.w $100
00000294                            
00000294 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
00000298 00A1 1100                  		dc.l $A11100		; Z80 bus request
0000029C 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A0 00C0 0000                  		dc.l $C00000
000002A4 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002A8                            
000002A8 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002AC 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B0 0000 FF00                  		dc.b 0,	0, $FF,	0
000002B4 8137 0001                  		dc.b $81, $37, 0, 1
000002B8 0100 00FF                  		dc.b 1,	0, 0, $FF
000002BC FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C0                            
000002C0 4000 0080                  		dc.l $40000080
000002C4                            
000002C4 AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D0 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002DA D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002E5 ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002EA                            
000002EA 8104                       		dc.w $8104		; value	for VDP	display	mode
000002EC 8F02                       		dc.w $8F02		; value	for VDP	increment
000002EE C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F2 4000 0010                  		dc.l $40000010
000002F6                            
000002F6 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000002FA                            ; ===========================================================================
000002FA                            
000002FA                            GameProgram:
000002FA 4A79 00C0 0004             		tst.w	($C00004).l
00000300 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000306 7E00                       		moveq	#0,d7
00000308 3C3C 3FFF                  		move.w	#$3FFF,d6
0000030C                            
0000030C                            GameClrRAM:
0000030C 2CC7                       		move.l	d7,(a6)+
0000030E 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000312                            
00000312 1039 00A1 0001             		move.b	($A10001).l,d0
00000318 0200 00C0                  		andi.b	#$C0,d0
0000031C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000320                            
00000320 41F8 FFC4 43F8 00F4 20D9+  		loadJumps IntMain
0000032E                            		
0000032E 6100 0000                  		bsr.w	VDPSetupGame
00000332 6100 0000                  		bsr.w	InitMegaPCM
00000336 6100 0000                  		bsr.w	JoypadInit
0000033A                            
0000033A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Notice Screen
00000340                            		
00000340                            
00000340                            MainGameLoop:
00000340 1038 F600                  		move.b	($FFFFF600).w,d0
00000344 0240 007C                  		andi.w	#$7C,d0
00000348 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0
0000034C 4E90                       		jsr	(a0)
0000034E 60F0                       		bra.s	MainGameLoop
00000350                            ; ===========================================================================
00000350                            ; ---------------------------------------------------------------------------
00000350                            ; Main game mode array
00000350                            ; ---------------------------------------------------------------------------
00000350                            
00000350                            GameModeArray:
00000350 0000 0000                  		dc.l	NoticeScreen	; Notice Screen ($00)
00000354 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
00000358 0000 0000                  		dc.l	Level		; Demo Mode ($08)
0000035C 0000 0000                  		dc.l	Level		; Normal Level ($0C)
00000360 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
00000364 0000 0000                  		dc.l	ContinueScreen	; Continue Screen ($14)
00000368 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
0000036C 0000 0000                  		dc.l	Credits		; Credits ($1C)
00000370 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($20)
00000374                            ; ===========================================================================
00000374                            BusError:
00000374 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
0000037A 6000                       		bra.s	loc_43A
0000037C                            ; ===========================================================================
0000037C                            
0000037C                            AddressError:
0000037C 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000382 6000                       		bra.s	loc_43A
00000384                            ; ===========================================================================
00000384                            
00000384                            IllegalInstr:
00000384 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000038A 54AF 0002                  		addq.l	#2,2(sp)
0000038E 6000                       		bra.s	loc_462
00000390                            ; ===========================================================================
00000390                            
00000390                            ZeroDivide:
00000390 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000396 6000                       		bra.s	loc_462
00000398                            ; ===========================================================================
00000398                            
00000398                            ChkInstr:
00000398 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000039E 6000                       		bra.s	loc_462
000003A0                            ; ===========================================================================
000003A0                            
000003A0                            TrapvInstr:
000003A0 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003A6 6000                       		bra.s	loc_462
000003A8                            ; ===========================================================================
000003A8                            
000003A8                            PrivilegeViol:
000003A8 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000003AE 6000                       		bra.s	loc_462
000003B0                            ; ===========================================================================
000003B0                            
000003B0                            Trace:
000003B0 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000003B6 6000                       		bra.s	loc_462
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            Line1010Emu:
000003B8 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
000003BE 54AF 0002                  		addq.l	#2,2(sp)
000003C2 6000                       		bra.s	loc_462
000003C4                            ; ===========================================================================
000003C4                            
000003C4                            Line1111Emu:
000003C4 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
000003CA 54AF 0002                  		addq.l	#2,2(sp)
000003CE 6000                       		bra.s	loc_462
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            ErrorExcept:
000003D0 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_462
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            loc_43A:
000003D8 46FC 2700                  		move	#$2700,sr
000003DC 544F                       		addq.w	#2,sp
000003DE 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E2 544F                       		addq.w	#2,sp
000003E4 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003EA 6100 0000                  		bsr.w	ShowErrorMsg
000003EE 202F 0002                  		move.l	2(sp),d0
000003F2 6100 0000                  		bsr.w	sub_5BA
000003F6 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003FA 6100 0000                  		bsr.w	sub_5BA
000003FE 6000                       		bra.s	loc_478
00000400                            ; ===========================================================================
00000400                            
00000400                            loc_462:
00000400 46FC 2700                  		move	#$2700,sr
00000404 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000040A 6100 0000                  		bsr.w	ShowErrorMsg
0000040E 202F 0002                  		move.l	2(sp),d0
00000412 6100 0000                  		bsr.w	sub_5BA
00000416                            
00000416                            loc_478:
00000416 6100 0000                  		bsr.w	ErrorWaitForC
0000041A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000420 46FC 2300                  		move	#$2300,sr
00000424 4E73                       		rte	
00000426                            
00000426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000426                            
00000426                            
00000426                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000426 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042C 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000436 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043C 323C 027F                  		move.w	#$27F,d1
00000440                            
00000440                            Error_LoadGfx:
00000440 3C98                       		move.w	(a0)+,(a6)
00000442 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000446 7000                       		moveq	#0,d0		; clear	d0
00000448 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000450 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000454 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045E 7212                       		moveq	#$12,d1		; number of characters
00000460                            
00000460                            Error_LoopChars:
00000460 7000                       		moveq	#0,d0
00000462 1018                       		move.b	(a0)+,d0
00000464 0640 0790                  		addi.w	#$790,d0
00000468 3C80                       		move.w	d0,(a6)
0000046A 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046E 4E75                       		rts	
00000470                            ; End of function ShowErrorMsg
00000470                            
00000470                            ; ===========================================================================
00000470 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000474 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000478 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047C 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000480 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000484 0000                       		dc.w asc_5A6-ErrorText
00000486 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000499 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AC 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BF 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D2 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E5 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F8 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000050B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000531 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000544 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000558 00                         		even
00000558                            
00000558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000558                            
00000558                            
00000558                            sub_5BA:				; XREF: loc_43A; loc_462
00000558 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055C 7407                       		moveq	#7,d2
0000055E                            
0000055E                            loc_5C0:
0000055E E998                       		rol.l	#4,d0
00000560 6100                       		bsr.s	sub_5CA
00000562 51CA FFFA                  		dbf	d2,loc_5C0
00000566 4E75                       		rts	
00000568                            ; End of function sub_5BA
00000568                            
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            sub_5CA:				; XREF: sub_5BA
00000568 3200                       		move.w	d0,d1
0000056A 0241 000F                  		andi.w	#$F,d1
0000056E 0C41 000A                  		cmpi.w	#$A,d1
00000572 6500                       		bcs.s	loc_5D8
00000574 5E41                       		addq.w	#7,d1
00000576                            
00000576                            loc_5D8:
00000576 0641 07C0                  		addi.w	#$7C0,d1
0000057A 3C81                       		move.w	d1,(a6)
0000057C 4E75                       		rts	
0000057E                            ; End of function sub_5CA
0000057E                            
0000057E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057E                            
0000057E                            
0000057E                            ErrorWaitForC:				; XREF: loc_478
0000057E 6100 0000                  		bsr.w	ReadJoypads
00000582 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000588 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058C 4E75                       		rts	
0000058E                            ; End of function ErrorWaitForC
0000058E                            
0000058E                            ; ===========================================================================
0000058E                            
0000058E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAE                            		even
00000AAE                            
00000AAE                            ; ===========================================================================
00000AAE                            
00000AAE                            V_Int:				; XREF: Vectors
00000AAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB2 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB6 6700                       		beq.s	loc_B88
00000AB8 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000AD0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD6 6700                       		beq.s	loc_B42
00000AD8 303C 0700                  		move.w	#$700,d0
00000ADC                            
00000ADC                            loc_B3E:
00000ADC 51C8 FFFE                  		dbf	d0,loc_B3E
00000AE0                            
00000AE0                            loc_B42:
00000AE0 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE4 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AEA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AF0 0240 003E                  		andi.w	#$3E,d0
00000AF4 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF8 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFC                            
00000AFC                            loc_B5E:				; XREF: loc_B88
00000AFC 4EB9 0000 0000             		jsr	sub_71B4C
00000B02                            
00000B02                            loc_B64:				; XREF: loc_D50
00000B02 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B06 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0A 4E73                       		rte	
00000B0C                            ; ===========================================================================
00000B0C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B10 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B14 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B18 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B20 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B24 0000                       		dc.w loc_E72-off_B6E
00000B26                            ; ===========================================================================
00000B26                            
00000B26                            loc_B88:				; XREF: V_Int; off_B6E
00000B26 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2C 6700                       		beq.s	loc_B9A
00000B2E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B34 6600 FFC6                  		bne.w	loc_B5E
00000B38                            
00000B38                            loc_B9A:
00000B38 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3E 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B42 3039 00C0 0004             		move.w	($C00004).l,d0
00000B48 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4E 6700                       		beq.s	loc_BBA
00000B50 303C 0700                  		move.w	#$700,d0
00000B54                            
00000B54                            loc_BB6:
00000B54 51C8 FFFE                  		dbf	d0,loc_BB6
00000B58                            
00000B58                            loc_BBA:
00000B58 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B66                            
00000B66                            loc_BC8:
00000B66 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000B6E 66F6                       		bne.s	loc_BC8
00000B70 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B74 6600                       		bne.s	loc_BFE
00000B76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B7C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B82 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B88 3ABC 977F                  		move.w	#$977F,(a5)
00000B8C 3ABC C000                  		move.w	#$C000,(a5)
00000B90 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B9A 6000                       		bra.s	loc_C22
00000B9C                            ; ===========================================================================
00000B9C                            
00000B9C                            loc_BFE:				; XREF: loc_BC8
00000B9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BA2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BA8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BAE 3ABC 977F                  		move.w	#$977F,(a5)
00000BB2 3ABC C000                  		move.w	#$C000,(a5)
00000BB6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BC0                            
00000BC0                            loc_C22:				; XREF: loc_BC8
00000BC0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000BCC 6000 FF2E                  		bra.w	loc_B5E
00000BD0                            ; ===========================================================================
00000BD0                            
00000BD0                            loc_C32:				; XREF: off_B6E
00000BD0 6100 0000                  		bsr.w	sub_106E
00000BD4                            
00000BD4                            loc_C36:				; XREF: off_B6E
00000BD4 4A78 F614                  		tst.w	($FFFFF614).w
00000BD8 6700 0000                  		beq.w	locret_C42
00000BDC 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BE0                            
00000BE0                            locret_C42:
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C44:				; XREF: off_B6E
00000BE2 6100 0000                  		bsr.w	sub_106E
00000BE6 6100 0000                  		bsr.w	sub_6886
00000BEA 6100 0000                  		bsr.w	sub_1642
00000BEE 4A78 F614                  		tst.w	($FFFFF614).w
00000BF2 6700 0000                  		beq.w	locret_C5C
00000BF6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BFA                            
00000BFA                            locret_C5C:
00000BFA 4E75                       		rts	
00000BFC                            ; ===========================================================================
00000BFC                            
00000BFC                            loc_C5E:				; XREF: off_B6E
00000BFC 6100 0000                  		bsr.w	sub_106E
00000C00 4E75                       		rts	
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            loc_C64:				; XREF: off_B6E
00000C02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C08 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C0C                            
00000C0C                            loc_C6E:				; XREF: off_B6E
00000C0C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C14                            
00000C14                            loc_C76:
00000C14 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C1C 66F6                       		bne.s	loc_C76		; if not, branch
00000C1E 6100 0000                  		bsr.w	ReadJoypads
00000C22 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C26 6600                       		bne.s	loc_CB0
00000C28 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C2E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C34 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C3A 3ABC 977F                  		move.w	#$977F,(a5)
00000C3E 3ABC C000                  		move.w	#$C000,(a5)
00000C42 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C48 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C4C 6000                       		bra.s	loc_CD4
00000C4E                            ; ===========================================================================
00000C4E                            
00000C4E                            loc_CB0:				; XREF: loc_C76
00000C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C54 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C5A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C60 3ABC 977F                  		move.w	#$977F,(a5)
00000C64 3ABC C000                  		move.w	#$C000,(a5)
00000C68 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C72                            
00000C72                            loc_CD4:				; XREF: loc_C76
00000C72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C7C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C82 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C88 3ABC 977F                  		move.w	#$977F,(a5)
00000C8C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C90 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CA0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CA6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CAC 3ABC 977F                  		move.w	#$977F,(a5)
00000CB0 3ABC 7800                  		move.w	#$7800,(a5)
00000CB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC4                            
00000CC4                            loc_D50:
00000CC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000CCC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CD2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CD8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CDE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CE4 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CEA 6400                       		bcc.s	Demo_Time
00000CEC 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF2 588F                       		addq.l	#4,sp
00000CF4 6000 FE0C                  		bra.w	loc_B64
00000CF8                            
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            ; Subroutine to	run a demo for an amount of time
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            
00000CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CF8                            
00000CF8                            
00000CF8                            Demo_Time:				; XREF: loc_D50; H_Int
00000CF8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CFC 4EB9 0000 0000             		jsr	AniArt_Load
00000D02 4EB9 0000 0000             		jsr	HudUpdate
00000D08 6100 0000                  		bsr.w	sub_165E
00000D0C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D10 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D14 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D18                            
00000D18                            Demo_TimeEnd:
00000D18 4E75                       		rts	
00000D1A                            ; End of function Demo_Time
00000D1A                            
00000D1A                            ; ===========================================================================
00000D1A                            
00000D1A                            loc_DA6:				; XREF: off_B6E
00000D1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D22                            
00000D22                            loc_DAE:
00000D22 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D2A 66F6                       		bne.s	loc_DAE		; if not, branch
00000D2C 6100 0000                  		bsr.w	ReadJoypads
00000D30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D36 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D3C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D42 3ABC 977F                  		move.w	#$977F,(a5)
00000D46 3ABC C000                  		move.w	#$C000,(a5)
00000D4A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D5A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D60 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D66 3ABC 977F                  		move.w	#$977F,(a5)
00000D6A 3ABC 7800                  		move.w	#$7800,(a5)
00000D6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D7E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D84 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D8A 3ABC 977F                  		move.w	#$977F,(a5)
00000D8E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D9C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DA4 6100 0000                  		bsr.w	PalCycle_SS
00000DA8 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DAE                            
00000DAE                            loc_E64:
00000DAE 4A78 F614                  		tst.w	($FFFFF614).w
00000DB2 6700 0000                  		beq.w	locret_E70
00000DB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DBA                            
00000DBA                            locret_E70:
00000DBA 4E75                       		rts	
00000DBC                            ; ===========================================================================
00000DBC                            
00000DBC                            loc_E72:				; XREF: off_B6E
00000DBC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DC4                            
00000DC4                            loc_E7A:
00000DC4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DCC 66F6                       		bne.s	loc_E7A		; if not, branch
00000DCE 6100 0000                  		bsr.w	ReadJoypads
00000DD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DD6 6600                       		bne.s	loc_EB4
00000DD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DEA 3ABC 977F                  		move.w	#$977F,(a5)
00000DEE 3ABC C000                  		move.w	#$C000,(a5)
00000DF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DFC 6000                       		bra.s	loc_ED8
00000DFE                            ; ===========================================================================
00000DFE                            
00000DFE                            loc_EB4:				; XREF: loc_E7A
00000DFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E10 3ABC 977F                  		move.w	#$977F,(a5)
00000E14 3ABC C000                  		move.w	#$C000,(a5)
00000E18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E22                            
00000E22                            loc_ED8:				; XREF: loc_E7A
00000E22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E2C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E32 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E38                            
00000E38                            loc_EEE:
00000E38 3ABC 977F                  		move.w	#$977F,(a5)
00000E3C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E50 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E56 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E5C 3ABC 977F                  		move.w	#$977F,(a5)
00000E60 3ABC 7800                  		move.w	#$7800,(a5)
00000E64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E6E 4A38 F767                  		tst.b	($FFFFF767).w
00000E72 6700                       		beq.s	loc_F54
00000E74 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E7A                            
00000E7A                            loc_F54:
00000E7A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E82 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E88 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E8E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E94 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E9A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9E 4EB9 0000 0000             		jsr	AniArt_Load
00000EA4 4EB9 0000 0000             		jsr	HudUpdate
00000EAA 6100 0000                  		bsr.w	sub_1642
00000EAE 4E75                       		rts	
00000EB0                            ; ===========================================================================
00000EB0                            
00000EB0                            loc_F8A:				; XREF: off_B6E
00000EB0 6100 0000                  		bsr.w	sub_106E
00000EB4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            loc_F9A:				; XREF: off_B6E
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EC8 6000 0000                  		bra.w	sub_1642
00000ECC                            ; ===========================================================================
00000ECC                            
00000ECC                            loc_FA6:				; XREF: off_B6E
00000ECC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000ED4                            
00000ED4                            loc_FAE:
00000ED4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EDC 66F6                       		bne.s	loc_FAE		; if not, branch
00000EDE 6100 0000                  		bsr.w	ReadJoypads
00000EE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F18 3ABC 977F                  		move.w	#$977F,(a5)
00000F1C 3ABC 7800                  		move.w	#$7800,(a5)
00000F20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F36 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F56 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F5C                            
00000F5C                            loc_1060:
00000F5C 4A78 F614                  		tst.w	($FFFFF614).w
00000F60 6700 0000                  		beq.w	locret_106C
00000F64 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F68                            
00000F68                            locret_106C:
00000F68 4E75                       		rts	
00000F6A                            
00000F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F6A                            
00000F6A                            
00000F6A                            sub_106E:				; XREF: loc_C32; et al
00000F6A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F72                            
00000F72                            loc_1076:
00000F72 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F7A 66F6                       		bne.s	loc_1076	; if not, branch
00000F7C 6100 0000                  		bsr.w	ReadJoypads
00000F80 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F84 6600                       		bne.s	loc_10B0
00000F86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F92 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F98 3ABC 977F                  		move.w	#$977F,(a5)
00000F9C 3ABC C000                  		move.w	#$C000,(a5)
00000FA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FAA 6000                       		bra.s	loc_10D4
00000FAC                            ; ===========================================================================
00000FAC                            
00000FAC                            loc_10B0:				; XREF: sub_106E
00000FAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FB8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FBE 3ABC 977F                  		move.w	#$977F,(a5)
00000FC2 3ABC C000                  		move.w	#$C000,(a5)
00000FC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD0                            
00000FD0                            loc_10D4:				; XREF: sub_106E
00000FD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE2 3ABC 977F                  		move.w	#$977F,(a5)
00000FE6 3ABC 7800                  		move.w	#$7800,(a5)
00000FEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001000 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001006 3ABC 977F                  		move.w	#$977F,(a5)
0000100A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000100E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001014 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001018 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001020 4E75                       		rts	
00001022                            ; End of function sub_106E
00001022                            
00001022                            ; ---------------------------------------------------------------------------
00001022                            ; Subroutine to	move Palettes from the RAM to CRAM
00001022                            ; ---------------------------------------------------------------------------
00001022                            
00001022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001022                            
00001022                            
00001022                            H_Int:
00001022 46FC 2700                  		move	#$2700,sr
00001026 4A78 F644                  		tst.w	($FFFFF644).w
0000102A 6700                       		beq.s	locret_119C
0000102C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001032 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001036 43F9 00C0 0000             		lea	($C00000).l,a1
0000103C 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	Palette from RAM
00001040 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001048 2298                       		move.l	(a0)+,(a1)	; move Palette to CRAM
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 2298                       		move.l	(a0)+,(a1)
0000104E 2298                       		move.l	(a0)+,(a1)
00001050 2298                       		move.l	(a0)+,(a1)
00001052 2298                       		move.l	(a0)+,(a1)
00001054 2298                       		move.l	(a0)+,(a1)
00001056 2298                       		move.l	(a0)+,(a1)
00001058 2298                       		move.l	(a0)+,(a1)
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000108E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001092 4A38 F64F                  		tst.b	($FFFFF64F).w
00001096 6600                       		bne.s	loc_119E
00001098                            
00001098                            locret_119C:
00001098 4E73                       		rte	
0000109A                            ; ===========================================================================
0000109A                            
0000109A                            loc_119E:				; XREF: H_Int
0000109A 4238 F64F                  		clr.b	($FFFFF64F).w
0000109E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010A2 6100 FC54                  		bsr.w	Demo_Time
000010A6 4EB9 0000 0000             		jsr	sub_71B4C
000010AC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010B0 4E73                       		rte	
000010B2                            ; End of function H_Int
000010B2                            
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            ; Subroutine to	initialise joypads
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            
000010B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010B2                            
000010B2                            
000010B2                            JoypadInit:				; XREF: GameClrRAM
000010B2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010BA                            
000010BA                            Joypad_WaitZ80:
000010BA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010C2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010C4 7040                       		moveq	#$40,d0
000010C6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010CC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010D2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000010D8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000010E0 4E75                       		rts	
000010E2                            ; End of function JoypadInit
000010E2                            
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            ; Subroutine to	read joypad input, and send it to the RAM
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            ReadJoypads:
000010E2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000010E6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010EC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000010EE 5449                       		addq.w	#2,a1		; do the second	joypad
000010F0                            
000010F0                            Joypad_Read:
000010F0 12BC 0000                  		move.b	#0,(a1)
000010F4 4E71                       		nop	
000010F6 4E71                       		nop	
000010F8 1011                       		move.b	(a1),d0
000010FA E508                       		lsl.b	#2,d0
000010FC 0200 00C0                  		andi.b	#$C0,d0
00001100 12BC 0040                  		move.b	#$40,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1211                       		move.b	(a1),d1
0000110A 0201 003F                  		andi.b	#$3F,d1
0000110E 8001                       		or.b	d1,d0
00001110 4600                       		not.b	d0
00001112 1210                       		move.b	(a0),d1
00001114 B101                       		eor.b	d0,d1
00001116 10C0                       		move.b	d0,(a0)+
00001118 C200                       		and.b	d0,d1
0000111A 10C1                       		move.b	d1,(a0)+
0000111C 4E75                       		rts	
0000111E                            ; End of function ReadJoypads
0000111E                            
0000111E                            
0000111E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000111E                            
0000111E                            
0000111E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000111E 41F9 00C0 0004             		lea	($C00004).l,a0
00001124 43F9 00C0 0000             		lea	($C00000).l,a1
0000112A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001130 7E12                       		moveq	#$12,d7
00001132                            
00001132                            VDP_Loop:
00001132 309A                       		move.w	(a2)+,(a0)
00001134 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001138                            
00001138 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000113E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001142 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001148 7000                       		moveq	#0,d0
0000114A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001154 3E3C 003F                  		move.w	#$3F,d7
00001158                            
00001158                            VDP_ClrCRAM:
00001158 3280                       		move.w	d0,(a1)
0000115A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000115E                            
0000115E 42B8 F616                  		clr.l	($FFFFF616).w
00001162 42B8 F61A                  		clr.l	($FFFFF61A).w
00001166 2F01                       		move.l	d1,-(sp)
00001168 4BF9 00C0 0004             		lea	($C00004).l,a5
0000116E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001172 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001178 3ABC 9780                  		move.w	#$9780,(a5)
0000117C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001182 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000118A                            
0000118A                            loc_128E:
0000118A 3215                       		move.w	(a5),d1
0000118C 0801 0001                  		btst	#1,d1
00001190 66F8                       		bne.s	loc_128E
00001192                            
00001192 3ABC 8F02                  		move.w	#$8F02,(a5)
00001196 221F                       		move.l	(sp)+,d1
00001198 4E75                       		rts	
0000119A                            ; End of function VDPSetupGame
0000119A                            
0000119A                            ; ===========================================================================
0000119A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011A2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011AA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011B2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011BA 9001 9100 9200             		dc.w $9001, $9100, $9200
000011C0                            
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            ; Subroutine to	clear the screen
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            
000011C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C0                            
000011C0                            
000011C0                            ClearScreen:
000011C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011C6 3ABC 8F01                  		move.w	#$8F01,(a5)
000011CA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011D0 3ABC 9780                  		move.w	#$9780,(a5)
000011D4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000011DA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011E2                            
000011E2                            loc_12E6:
000011E2 3215                       		move.w	(a5),d1
000011E4 0801 0001                  		btst	#1,d1
000011E8 66F8                       		bne.s	loc_12E6
000011EA                            
000011EA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F4 3ABC 8F01                  		move.w	#$8F01,(a5)
000011F8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011FE 3ABC 9780                  		move.w	#$9780,(a5)
00001202 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001208 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001210                            
00001210                            loc_1314:
00001210 3215                       		move.w	(a5),d1
00001212 0801 0001                  		btst	#1,d1
00001216 66F8                       		bne.s	loc_1314
00001218                            
00001218 3ABC 8F02                  		move.w	#$8F02,(a5)
0000121C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001224 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000122C 43F8 F800                  		lea	($FFFFF800).w,a1
00001230 7000                       		moveq	#0,d0
00001232 323C 00A0                  		move.w	#$A0,d1
00001236                            
00001236                            loc_133A:
00001236 22C0                       		move.l	d0,(a1)+
00001238 51C9 FFFC                  		dbf	d1,loc_133A
0000123C                            
0000123C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001240 7000                       		moveq	#0,d0
00001242 323C 0100                  		move.w	#$100,d1
00001246                            
00001246                            loc_134A:
00001246 22C0                       		move.l	d0,(a1)+
00001248 51C9 FFFC                  		dbf	d1,loc_134A
0000124C 4E75                       		rts	
0000124E                            ; End of function ClearScreen
0000124E                            
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	load the sound driver
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            InitMegaPCM:			; XREF: GameClrRAM; TitleScreen
0000124E 4E71                       		nop
00001250 303C 0100                  		move.w	#$100,d0
00001254 33C0 00A1 1100             		move.w	d0,($A11100).l
0000125A 33C0 00A1 1200             		move.w	d0,($A11200).l
00001260 41F9 0000 0000             		lea	(MegaPCM).l,a0
00001266 43F9 00A0 0000             		lea	($A00000).l,a1
0000126C 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
00001270                            
00001270 12D8                       	@Load:	move.b	(a0)+,(a1)+
00001272 51C9 FFFC                  		dbf	d1,@Load
00001276 7200                       		moveq	#0,d1
00001278 33C1 00A1 1200             		move.w	d1,($A11200).l
0000127E 4E71                       		nop
00001280 4E71                       		nop
00001282 4E71                       		nop
00001284 4E71                       		nop
00001286 33C0 00A1 1200             		move.w	d0,($A11200).l
0000128C 33C1 00A1 1100             		move.w	d1,($A11100).l
00001292 4E75                       		rts
00001294                            ; End of function InitMegaPCM
00001294                            
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; Subroutine to	play a DAC sample
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; To use this: 
00001294                            ;		moveq	#$FFFFFFXX,d0
00001294                            ;		jsr	PlaySample
00001294                            ; XX = Sample Number
00001294                            ; ---------------------------------------------------------------------------
00001294                            
00001294                            PlaySample:
00001294 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
0000129C 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000012A4 66F6                       	bne.s	@0
000012A6 13C0 00A0 1FFF             	move.b	d0,$A01FFF
000012AC 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000012B4 4E75                       	rts
000012B6                            ; ===========================================================================
000012B6                            
000012B6                            PlayMusic:
000012B6 0C00 0088                  		cmpi.b	#$88,d0
000012BA 6700                       		beq.s	PlaySound
000012BC 0C00 00A0                  		cmpi.b	#$A0,d0
000012C0 6C00                       		bge.s	PlaySound
000012C2 11C0 FFFC                  		move.b	d0,($FFFFFFFC).w
000012C6                            ; ===========================================================================
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            ; Subroutine to	play a sound or	music track
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            
000012C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C6                            
000012C6                            
000012C6                            PlaySound:
000012C6 6100                       		bsr.s	Snd_ChkStop
000012C8 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012CC 4E75                       		rts	
000012CE                            ; End of function PlaySound
000012CE                            
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            ; Subroutine to	play a special sound/music (E0-E4)
000012CE                            ;
000012CE                            ; E0 - Fade out
000012CE                            ; E1 - Sega
000012CE                            ; E2 - Speed up
000012CE                            ; E3 - Normal speed
000012CE                            ; E4 - Stop
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            
000012CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CE                            
000012CE                            
000012CE                            PlaySound_Special:
000012CE 6100                       		bsr.s	Snd_ChkStop
000012D0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012D4 4E75                       		rts	
000012D6                            ; End of function PlaySound_Special
000012D6                            ; ===========================================================================
000012D6                            
000012D6                            Snd_ChkStop:
000012D6 0C00 00E0                  		cmpi.b	#$E0,d0
000012DA 6700                       		beq.s	@clr
000012DC 0C00 00E4                  		cmpi.b	#$E4,d0
000012E0 6700                       		beq.s	@clr
000012E2 4E75                       		rts
000012E4                            		
000012E4                            @clr:
000012E4 11FC 0000 FFFC             		move.b	#0,($FFFFFFFC).w
000012EA 4E75                       		rts
000012EC                            ; ===========================================================================
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            ; Unused sound/music subroutine
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            
000012EC                            PlaySound_Unk:
000012EC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000012F0 4E75                       		rts	
000012F2                            
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            ; Subroutine to	pause the game
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            
000012F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012F2                            
000012F2                            
000012F2                            PauseGame:				; XREF: Level_MainLoop; et al
000012F2 4E71                       		nop	
000012F4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012F8 6700                       		beq.s	Unpause		; if not, branch
000012FA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012FE 6600                       		bne.s	loc_13BE	; if yes, branch
00001300 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001306 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001308                            
00001308                            loc_13BE:
00001308 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000130E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001314                            
00001314                            loc_13CA:
00001314 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000131A 6100 0000                  		bsr.w	DelayProgram
0000131E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001322 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001324 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000132A 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000132C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001332 4E71                       		nop	
00001334 6000                       		bra.s	loc_1404
00001336                            ; ===========================================================================
00001336                            
00001336                            Pause_ChkBC:				; XREF: PauseGame
00001336 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000133C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000133E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001344 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001346                            
00001346                            Pause_ChkStart:				; XREF: PauseGame
00001346 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000134C 67C6                       		beq.s	loc_13CA	; if not, branch
0000134E                            
0000134E                            loc_1404:				; XREF: PauseGame
0000134E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001354                            
00001354                            Unpause:				; XREF: PauseGame
00001354 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000135A                            
0000135A                            Pause_DoNothing:			; XREF: PauseGame
0000135A 4E75                       		rts	
0000135C                            ; ===========================================================================
0000135C                            
0000135C                            Pause_SlowMo:				; XREF: PauseGame
0000135C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001362 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001368 4E75                       		rts	
0000136A                            ; End of function PauseGame
0000136A                            
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            ; Subroutine to	display	patterns via the VDP
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            
0000136A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136A                            
0000136A                            
0000136A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000136A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001370 283C 0080 0000             		move.l	#$800000,d4
00001376                            
00001376                            loc_142C:
00001376 2D40 0004                  		move.l	d0,4(a6)
0000137A 3601                       		move.w	d1,d3
0000137C                            
0000137C                            loc_1432:
0000137C 3C99                       		move.w	(a1)+,(a6)
0000137E 51CB FFFC                  		dbf	d3,loc_1432
00001382 D084                       		add.l	d4,d0
00001384 51CA FFF0                  		dbf	d2,loc_142C
00001388 4E75                       		rts	
0000138A                            ; End of function ShowVDPGraphics
0000138A                            
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000138A                            ; to be issued the next time ProcessDMAQueue is called.
0000138A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000138A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000138A                            ; registers in which it expects data in:
0000138A                            ; d1.l: Address to data (In 68k address space)
0000138A                            ; d2.w: Destination in VRAM
0000138A                            ; d3.w: Length of data
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000138A                             
0000138A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000138A                            
0000138A                            ; VDP addressses
0000138A =00C00000                  vdp_data_port:		equ $C00000
0000138A =00C00004                  vdp_control_port:	equ $C00004
0000138A =00C00008                  vdp_counter:		equ $C00008
0000138A                            ; Buffer Size Natsumi Credits
0000138A                            ;DMA_Buffer_Start	equ $FFFFA512-2	; the start address of DMA buffer for uncompressed art
0000138A                            ;DMA_Buffer_End		equ $FFFFA912-4	; the end address of DMA buffer for uncompressed art
0000138A                            ; Buffer Size S1 Default
0000138A =FFFFC800                  DMA_Buffer_Start	equ $FFFFC800	; the start address of DMA buffer for uncompressed art
0000138A =FFFFC8FC                  DMA_Buffer_End		equ $FFFFC8FC	; the end address of DMA buffer for uncompressed art
0000138A                            
0000138A                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000138A                            ProcessDMAQueue:
0000138A 4BF9 00C0 0004             		lea	VDP_Control_Port,a5
00001390 43F8 C800                  		lea	DMA_Buffer_Start.w,a1
00001394                            ; loc_14B6:
00001394                            ProcessDMAQueue_Loop:
00001394 3019                       		move.w	(a1)+,d0
00001396 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001398                            		; issue a set of VDP commands...
00001398 3A80                       		move.w	d0,(a5)		; transfer length
0000139A 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000139C 3A99                       		move.w	(a1)+,(a5)	; source address
0000139E 3A99                       		move.w	(a1)+,(a5)	; source address
000013A0 3A99                       		move.w	(a1)+,(a5)	; source address
000013A2 3A99                       		move.w	(a1)+,(a5)	; destination
000013A4 3A99                       		move.w	(a1)+,(a5)	; destination
000013A6 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013AA 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013AC                            ; loc_14CE:
000013AC                            ProcessDMAQueue_Done:
000013AC 31FC 0000 C800             		move.w	#0,DMA_Buffer_Start.w
000013B2 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End.w
000013BA 4E75                       		rts
000013BC                            		
000013BC                            QueueDMATransfer:
000013BC 2278 C8FC                  		movea.l	DMA_Buffer_End.w,a1
000013C0 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013C4 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013C6                             
000013C6                            		; piece together some VDP commands and store them for later...
000013C6 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000013CA 1003                       		move.b	d3,d0
000013CC 32C0                       		move.w	d0,(a1)+ ; store command
000013CE                             
000013CE 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000013D2 E04B                       		lsr.w	#8,d3
000013D4 1003                       		move.b	d3,d0
000013D6 32C0                       		move.w	d0,(a1)+ ; store command
000013D8                             
000013D8 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
000013DC E289                       		lsr.l	#1,d1
000013DE 1001                       		move.b	d1,d0
000013E0 32C0                       		move.w	d0,(a1)+ ; store command
000013E2                             
000013E2 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
000013E6 E089                       		lsr.l	#8,d1
000013E8 1001                       		move.b	d1,d0
000013EA 32C0                       		move.w	d0,(a1)+ ; store command
000013EC                             
000013EC 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $01FE0000
000013F0 E089                       		lsr.l	#8,d1
000013F2 1001                       		move.b	d1,d0
000013F4 32C0                       		move.w	d0,(a1)+ ; store command
000013F6                             
000013F6 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013FC E58A                       		lsl.l	#2,d2
000013FE E44A                       		lsr.w	#2,d2
00001400 4842                       		swap	d2
00001402 0082 4000 0080             		or.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001408 22C2                       		move.l	d2,(a1)+ ; store command
0000140A                             
0000140A 21C9 C8FC                  		move.l	a1,DMA_Buffer_End.w ; set the next free slot address
0000140E B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
00001412 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001414 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001418                            ; return_14AA:
00001418                            QueueDMATransfer_Done:
00001418 4E75                       		rts
0000141A                            		
0000141A                            
0000141A 4278 C800                  		clr.w	DMA_Buffer_Start			; clear start of the DMA queue
0000141E 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End	; reset address pointer of DMA queue
00001426                            ; End of function ProcessDMAQueue
00001426                            
00001426                            ; ===============================================================
00001426                            ; ---------------------------------------------------------------
00001426                            ; COMPER Decompressor
00001426                            ; ---------------------------------------------------------------
00001426                            ; INPUT:
00001426                            ;       a0      - Source Offset
00001426                            ;       a1      - Destination Offset
00001426                            ; ---------------------------------------------------------------
00001426                             
00001426                            CompDec
00001426                             
00001426                            @newblock
00001426 3018                               move.w  (a0)+,d0                ; fetch description field
00001428 760F                               moveq   #15,d3                  ; set bits counter to 16
0000142A                             
0000142A                            @mainloop
0000142A D040                               add.w   d0,d0                   ; roll description field
0000142C 6500                               bcs.s   @flag                   ; if a flag issued, branch
0000142E 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
00001430 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001434 60F0                               bra.s   @newblock               ; start a new block
00001436                             
00001436                            ; ---------------------------------------------------------------
00001436 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001438 1218                               move.b  (a0)+,d1                ; load displacement
0000143A D241                               add.w   d1,d1
0000143C 7400                               moveq   #0,d2                   ; init copy count
0000143E 1418                               move.b  (a0)+,d2                ; load copy length
00001440 6700                               beq.s   @end                    ; if zero, branch
00001442 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001446                             
00001446 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001448 51CA FFFC                          dbf     d2,@loop                ; repeat
0000144C 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001450 60D4                               bra.s   @newblock               ; start a new block
00001452                             
00001452 4E75                       @end    rts
00001454                            
00001454                            ; ==============================================================================
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Nemesis decompression routine
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Optimized by vladikcomper
00001454                            ; ------------------------------------------------------------------------------
00001454                             
00001454                            NemDec_RAM:
00001454 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001458 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
0000145C 6000                               bra.s   NemDec_Main
0000145E                             
0000145E                            ; ------------------------------------------------------------------------------
0000145E                            NemDec:
0000145E 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001462 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
00001468 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
0000146C                             
0000146C                            NemDec_Main:
0000146C 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
00001470 3418                               move.w  (a0)+,d2                ; get number of patterns
00001472 6A00                               bpl.s   @0                      ; are we in Mode 0?
00001474 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
00001478 E74A                       @0      lsl.w   #3,d2
0000147A 3A42                               movea.w d2,a5
0000147C 7607                               moveq   #7,d3
0000147E 7400                               moveq   #0,d2
00001480 7800                               moveq   #0,d4
00001482 6100 0000                          bsr.w   NemDec4
00001486 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
00001488 E145                               asl.w   #8,d5                   ; shift up by a byte
0000148A 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
0000148C 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
00001490 6100                               bsr.s   NemDec2
00001492 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
00001496 4E75                               rts
00001498                             
00001498                            ; ---------------------------------------------------------------------------
00001498                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001498                            ; ---------------------------------------------------------------------------
00001498                             
00001498                            NemDec2:
00001498 3E06                               move.w  d6,d7
0000149A 5147                               subq.w  #8,d7                   ; get shift value
0000149C 3205                               move.w  d5,d1
0000149E EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000014A0 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000014A4 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000014A6 0241 00FF                          andi.w  #$FF,d1
000014AA D241                               add.w   d1,d1
000014AC 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000014B0 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000014B4 6400                               bcc.s   @0                      ; if not, branch
000014B6 5046                               addq.w  #8,d6
000014B8 E145                               asl.w   #8,d5
000014BA 1A18                               move.b  (a0)+,d5                ; read next byte
000014BC 1231 1001                  @0      move.b  1(a1,d1.w),d1
000014C0 3001                               move.w  d1,d0
000014C2 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014C6 0240 00F0                          andi.w  #$F0,d0
000014CA                             
000014CA                            NemDec_GetRepeatCount:
000014CA E848                               lsr.w   #4,d0                   ; get repeat count
000014CC                             
000014CC                            NemDec_WritePixel:
000014CC E98C                               lsl.l   #4,d4                   ; shift up by a nybble
000014CE 8801                               or.b    d1,d4                   ; write pixel
000014D0 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
000014D4 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
000014D6                            ; ---------------------------------------------------------------------------
000014D6                             
000014D6                            NemDec3:
000014D6 7800                               moveq   #0,d4                   ; reset row
000014D8 7607                               moveq   #7,d3                   ; reset nybble counter
000014DA                             
000014DA                            NemDec_WritePixelLoop:
000014DA 51C8 FFF0                          dbf     d0,NemDec_WritePixel
000014DE 60B8                               bra.s   NemDec2
000014E0                            ; ---------------------------------------------------------------------------
000014E0                             
000014E0                            NemDec_InlineData:
000014E0 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
000014E2 0C46 0009                          cmpi.w  #9,d6
000014E6 6400                               bcc.s   @0
000014E8 5046                               addq.w  #8,d6
000014EA E145                               asl.w   #8,d5
000014EC 1A18                               move.b  (a0)+,d5
000014EE 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
000014F0 3205                               move.w  d5,d1
000014F2 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
000014F4 3001                               move.w  d1,d0
000014F6 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014FA 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
000014FE 0C46 0009                          cmpi.w  #9,d6
00001502 64C6                               bcc.s   NemDec_GetRepeatCount
00001504 5046                               addq.w  #8,d6
00001506 E145                               asl.w   #8,d5
00001508 1A18                               move.b  (a0)+,d5
0000150A 60BE                               bra.s   NemDec_GetRepeatCount
0000150C                             
0000150C                            ; ---------------------------------------------------------------------------
0000150C                            ; Subroutines to output decompressed entry
0000150C                            ; Selected depending on current decompression mode
0000150C                            ; ---------------------------------------------------------------------------
0000150C                             
0000150C                            NemDec_WriteRowToVDP:
0000150C                            loc_1502:
0000150C 2884                               move.l  d4,(a4)                 ; write 8-pixel row
0000150E 534D                               subq.w  #1,a5
00001510 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001512 66C2                               bne.s   NemDec3                 ; if not, branch
00001514 4E75                               rts
00001516                            ; ---------------------------------------------------------------------------
00001516                             
00001516                            NemDec_WriteRowToVDP_XOR:
00001516 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001518 2882                               move.l  d2,(a4)                 ; and write the result
0000151A 534D                               subq.w  #1,a5
0000151C 380D                               move.w  a5,d4
0000151E 66B6                               bne.s   NemDec3
00001520 4E75                               rts
00001522                            ; ---------------------------------------------------------------------------
00001522                             
00001522                            NemDec_WriteRowToRAM:
00001522 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
00001524 534D                               subq.w  #1,a5
00001526 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001528 66AC                               bne.s   NemDec3                 ; if not, branch
0000152A 4E75                               rts
0000152C                            ; ---------------------------------------------------------------------------
0000152C                             
0000152C                            NemDec_WriteRowToRAM_XOR:
0000152C B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
0000152E 28C2                               move.l  d2,(a4)+                ; and write the result
00001530 534D                               subq.w  #1,a5
00001532 380D                               move.w  a5,d4
00001534 66A0                               bne.s   NemDec3
00001536 4E75                               rts
00001538                             
00001538                            ; ---------------------------------------------------------------------------
00001538                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001538                            ; ---------------------------------------------------------------------------
00001538                             
00001538                            NemDec4:
00001538 1018                               move.b  (a0)+,d0                ; read first byte
0000153A                             
0000153A                            @ChkEnd:
0000153A 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
0000153E 6600                               bne.s   @NewPalIndex            ; if not, branch
00001540 4E75                               rts
00001542                            ; ---------------------------------------------------------------------------
00001542                             
00001542                            @NewPalIndex:
00001542 3E00                               move.w  d0,d7
00001544                             
00001544                            @ItemLoop:
00001544 1018                               move.b  (a0)+,d0                ; read next byte
00001546 6BF2                               bmi.s   @ChkEnd                 ; ~~
00001548 1200                               move.b  d0,d1
0000154A 0247 000F                          andi.w  #$F,d7                  ; get palette index
0000154E 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
00001552 8E41                               or.w    d1,d7                   ; combine the two
00001554 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00001558 1200                               move.b  d0,d1
0000155A E149                               lsl.w   #8,d1
0000155C 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
0000155E 7208                               moveq   #8,d1
00001560 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
00001562 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
00001564 1018                               move.b  (a0)+,d0                ; get code
00001566 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
00001568 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
0000156C 60D6                               bra.s   @ItemLoop               ; repeat
0000156E                            ; ---------------------------------------------------------------------------
0000156E                             
0000156E                            @ItemShortCode:
0000156E 1018                               move.b  (a0)+,d0                ; get code
00001570 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
00001572 D040                               add.w   d0,d0                   ; get index into code table
00001574 7A01                               moveq   #1,d5
00001576 E36D                               lsl.w   d1,d5
00001578 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
0000157A 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
0000157E                             
0000157E                            @ItemShortCodeLoop:
0000157E 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
00001580 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001584 60BE                               bra.s   @ItemLoop
00001586                            
00001586                            ; ---------------------------------------------------------------------------
00001586                            ; Subroutine to	load pattern load cues
00001586                            ; ---------------------------------------------------------------------------
00001586                            
00001586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001586                            
00001586                            
00001586                            LoadPLC:
00001586 48E7 0060                  		movem.l	a1-a2,-(sp)
0000158A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001590 D040                       		add.w	d0,d0
00001592 3031 0000                  		move.w	(a1,d0.w),d0
00001596 43F1 0000                  		lea	(a1,d0.w),a1
0000159A 45F8 F680                  		lea	($FFFFF680).w,a2
0000159E                            
0000159E                            loc_1598:
0000159E 4A92                       		tst.l	(a2)
000015A0 6700                       		beq.s	loc_15A0
000015A2 5C4A                       		addq.w	#6,a2
000015A4 60F8                       		bra.s	loc_1598
000015A6                            ; ===========================================================================
000015A6                            
000015A6                            loc_15A0:				; XREF: LoadPLC
000015A6 3019                       		move.w	(a1)+,d0
000015A8 6B00                       		bmi.s	loc_15AC
000015AA                            
000015AA                            loc_15A4:
000015AA 24D9                       		move.l	(a1)+,(a2)+
000015AC 34D9                       		move.w	(a1)+,(a2)+
000015AE 51C8 FFFA                  		dbf	d0,loc_15A4
000015B2                            
000015B2                            loc_15AC:
000015B2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B6 4E75                       		rts	
000015B8                            ; End of function LoadPLC
000015B8                            
000015B8                            
000015B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B8                            
000015B8                            
000015B8                            LoadPLC2:
000015B8 48E7 0060                  		movem.l	a1-a2,-(sp)
000015BC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015C2 D040                       		add.w	d0,d0
000015C4 3031 0000                  		move.w	(a1,d0.w),d0
000015C8 43F1 0000                  		lea	(a1,d0.w),a1
000015CC 6100                       		bsr.s	ClearPLC
000015CE 45F8 F680                  		lea	($FFFFF680).w,a2
000015D2 3019                       		move.w	(a1)+,d0
000015D4 6B00                       		bmi.s	loc_15D8
000015D6                            
000015D6                            loc_15D0:
000015D6 24D9                       		move.l	(a1)+,(a2)+
000015D8 34D9                       		move.w	(a1)+,(a2)+
000015DA 51C8 FFFA                  		dbf	d0,loc_15D0
000015DE                            
000015DE                            loc_15D8:
000015DE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015E2 4E75                       		rts	
000015E4                            ; End of function LoadPLC2
000015E4                            
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            ; Subroutine to	clear the pattern load cues
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            
000015E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E4                            
000015E4                            
000015E4                            ClearPLC:				; XREF: LoadPLC2
000015E4 45F8 F680                  		lea	($FFFFF680).w,a2
000015E8 701F                       		moveq	#$1F,d0
000015EA                            
000015EA                            ClearPLC_Loop:
000015EA 429A                       		clr.l	(a2)+
000015EC 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015F0 4E75                       		rts	
000015F2                            ; End of function ClearPLC
000015F2                            
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Subroutine to	use graphics listed in a pattern load cue
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            
000015F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F2                            
000015F2                            
000015F2                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015F2 4AB8 F680                  		tst.l	($FFFFF680).w
000015F6 6700                       		beq.s	locret_1640
000015F8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015FC 6600                       		bne.s	locret_1640
000015FE 2078 F680                  		movea.l	($FFFFF680).w,a0
00001602 47F9 0000 150C             		lea	(loc_1502).l,a3
00001608 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000160C 3418                       		move.w	(a0)+,d2
0000160E 6A00                       		bpl.s	loc_160E
00001610 D6FC 000A                  		adda.w	#$A,a3
00001614                            
00001614                            loc_160E:
00001614 0242 7FFF                  		andi.w	#$7FFF,d2
00001618 6100 FF1E                  		bsr.w	NemDec4
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622 7C10                       		moveq	#$10,d6
00001624 7000                       		moveq	#0,d0
00001626 21C8 F680                  		move.l	a0,($FFFFF680).w
0000162A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001632 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001636 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000163A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001642 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001646                            
00001646                            locret_1640:
00001646 4E75                       		rts	
00001648                            ; End of function RunPLC_RAM
00001648                            
00001648                            
00001648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            
00001648                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001648 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000164C 6700 0000                  		beq.w	locret_16DA
00001650 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001656 7000                       		moveq	#0,d0
00001658 3038 F684                  		move.w	($FFFFF684).w,d0
0000165C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001662 6000                       		bra.s	loc_1676
00001664                            ; End of function sub_1642
00001664                            
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            sub_165E:				; XREF: Demo_Time
00001664 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001668 6700                       		beq.s	locret_16DA
0000166A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001670 7000                       		moveq	#0,d0
00001672 3038 F684                  		move.w	($FFFFF684).w,d0
00001676 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000167C                            
0000167C                            loc_1676:				; XREF: sub_1642
0000167C 49F9 00C0 0004             		lea	($C00004).l,a4
00001682 E588                       		lsl.l	#2,d0
00001684 E448                       		lsr.w	#2,d0
00001686 0040 4000                  		ori.w	#$4000,d0
0000168A 4840                       		swap	d0
0000168C 2880                       		move.l	d0,(a4)
0000168E 594C                       		subq.w	#4,a4
00001690 2078 F680                  		movea.l	($FFFFF680).w,a0
00001694 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001698 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000169C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000016A0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016A4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016AC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016B0                            
000016B0                            loc_16AA:				; XREF: sub_165E
000016B0 3A7C 0008                  		movea.w	#8,a5
000016B4 6100 FE20                  		bsr.w	NemDec3
000016B8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016BC 6700                       		beq.s	loc_16DC
000016BE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016C2 66EC                       		bne.s	loc_16AA
000016C4 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016CC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016D0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016D4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016DC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016E0                            
000016E0                            locret_16DA:				; XREF: sub_1642
000016E0 4E75                       		rts	
000016E2                            ; ===========================================================================
000016E2                            
000016E2                            loc_16DC:				; XREF: sub_165E
000016E2 41F8 F680                  		lea	($FFFFF680).w,a0
000016E6 7015                       		moveq	#$15,d0
000016E8                            
000016E8                            loc_16E2:				; XREF: sub_165E
000016E8 20E8 0006                  		move.l	6(a0),(a0)+
000016EC 51C8 FFFA                  		dbf	d0,loc_16E2
000016F0 4E75                       		rts	
000016F2                            ; End of function sub_165E
000016F2                            
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            ; Subroutine to	execute	the pattern load cue
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            
000016F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F2                            
000016F2                            
000016F2                            RunPLC_ROM:
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1
00001702 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001704                            
00001704                            RunPLC_Loop:
00001704 2059                       		movea.l	(a1)+,a0	; get art pointer
00001706 7000                       		moveq	#0,d0
00001708 3019                       		move.w	(a1)+,d0	; get VRAM address
0000170A E588                       		lsl.l	#2,d0		; divide address by $20
0000170C E448                       		lsr.w	#2,d0
0000170E 0040 4000                  		ori.w	#$4000,d0
00001712 4840                       		swap	d0
00001714 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000171A 6100 FD42                  		bsr.w	NemDec		; decompress
0000171E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001722 4E75                       		rts	
00001724                            ; End of function RunPLC_ROM
00001724                            
00001724                            ; ---------------------------------------------------------------------------
00001724                            ; Enigma decompression algorithm
00001724                            ; ---------------------------------------------------------------------------
00001724                            
00001724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001724                            
00001724                            
00001724                            EniDec:
00001724 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001728 3640                       		movea.w	d0,a3
0000172A 1018                       		move.b	(a0)+,d0
0000172C 4880                       		ext.w	d0
0000172E 3A40                       		movea.w	d0,a5
00001730 1818                       		move.b	(a0)+,d4
00001732 E70C                       		lsl.b	#3,d4
00001734 3458                       		movea.w	(a0)+,a2
00001736 D4CB                       		adda.w	a3,a2
00001738 3858                       		movea.w	(a0)+,a4
0000173A D8CB                       		adda.w	a3,a4
0000173C 1A18                       		move.b	(a0)+,d5
0000173E E145                       		asl.w	#8,d5
00001740 1A18                       		move.b	(a0)+,d5
00001742 7C10                       		moveq	#$10,d6
00001744                            
00001744                            loc_173E:				; XREF: loc_1768
00001744 7007                       		moveq	#7,d0
00001746 3E06                       		move.w	d6,d7
00001748 9E40                       		sub.w	d0,d7
0000174A 3205                       		move.w	d5,d1
0000174C EE69                       		lsr.w	d7,d1
0000174E 0241 007F                  		andi.w	#$7F,d1
00001752 3401                       		move.w	d1,d2
00001754 0C41 0040                  		cmpi.w	#$40,d1
00001758 6400                       		bcc.s	loc_1758
0000175A 7006                       		moveq	#6,d0
0000175C E24A                       		lsr.w	#1,d2
0000175E                            
0000175E                            loc_1758:
0000175E 6100 0000                  		bsr.w	sub_188C
00001762 0242 000F                  		andi.w	#$F,d2
00001766 E849                       		lsr.w	#4,d1
00001768 D241                       		add.w	d1,d1
0000176A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000176E                            ; End of function EniDec
0000176E                            
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1768:				; XREF: loc_17B4
0000176E 32CA                       		move.w	a2,(a1)+
00001770 524A                       		addq.w	#1,a2
00001772 51CA FFFA                  		dbf	d2,loc_1768
00001776 60CC                       		bra.s	loc_173E
00001778                            ; ===========================================================================
00001778                            
00001778                            loc_1772:				; XREF: loc_17B4
00001778 32CC                       		move.w	a4,(a1)+
0000177A 51CA FFFC                  		dbf	d2,loc_1772
0000177E 60C4                       		bra.s	loc_173E
00001780                            ; ===========================================================================
00001780                            
00001780                            loc_177A:				; XREF: loc_17B4
00001780 6100 0000                  		bsr.w	loc_17DC
00001784                            
00001784                            loc_177E:
00001784 32C1                       		move.w	d1,(a1)+
00001786 51CA FFFC                  		dbf	d2,loc_177E
0000178A 60B8                       		bra.s	loc_173E
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1786:				; XREF: loc_17B4
0000178C 6100 0000                  		bsr.w	loc_17DC
00001790                            
00001790                            loc_178A:
00001790 32C1                       		move.w	d1,(a1)+
00001792 5241                       		addq.w	#1,d1
00001794 51CA FFFA                  		dbf	d2,loc_178A
00001798 60AA                       		bra.s	loc_173E
0000179A                            ; ===========================================================================
0000179A                            
0000179A                            loc_1794:				; XREF: loc_17B4
0000179A 6100 0000                  		bsr.w	loc_17DC
0000179E                            
0000179E                            loc_1798:
0000179E 32C1                       		move.w	d1,(a1)+
000017A0 5341                       		subq.w	#1,d1
000017A2 51CA FFFA                  		dbf	d2,loc_1798
000017A6 609C                       		bra.s	loc_173E
000017A8                            ; ===========================================================================
000017A8                            
000017A8                            loc_17A2:				; XREF: loc_17B4
000017A8 0C42 000F                  		cmpi.w	#$F,d2
000017AC 6700                       		beq.s	loc_17C4
000017AE                            
000017AE                            loc_17A8:
000017AE 6100 0000                  		bsr.w	loc_17DC
000017B2 32C1                       		move.w	d1,(a1)+
000017B4 51CA FFF8                  		dbf	d2,loc_17A8
000017B8 608A                       		bra.s	loc_173E
000017BA                            ; ===========================================================================
000017BA                            
000017BA                            loc_17B4:				; XREF: EniDec
000017BA 60B2                       		bra.s	loc_1768
000017BC                            ; ===========================================================================
000017BC 60B0                       		bra.s	loc_1768
000017BE                            ; ===========================================================================
000017BE 60B8                       		bra.s	loc_1772
000017C0                            ; ===========================================================================
000017C0 60B6                       		bra.s	loc_1772
000017C2                            ; ===========================================================================
000017C2 60BC                       		bra.s	loc_177A
000017C4                            ; ===========================================================================
000017C4 60C6                       		bra.s	loc_1786
000017C6                            ; ===========================================================================
000017C6 60D2                       		bra.s	loc_1794
000017C8                            ; ===========================================================================
000017C8 60DE                       		bra.s	loc_17A2
000017CA                            ; ===========================================================================
000017CA                            
000017CA                            loc_17C4:				; XREF: loc_17A2
000017CA 5348                       		subq.w	#1,a0
000017CC 0C46 0010                  		cmpi.w	#$10,d6
000017D0 6600                       		bne.s	loc_17CE
000017D2 5348                       		subq.w	#1,a0
000017D4                            
000017D4                            loc_17CE:
000017D4 3008                       		move.w	a0,d0
000017D6 E248                       		lsr.w	#1,d0
000017D8 6400                       		bcc.s	loc_17D6
000017DA 5248                       		addq.w	#1,a0
000017DC                            
000017DC                            loc_17D6:
000017DC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017E0 4E75                       		rts	
000017E2                            ; ===========================================================================
000017E2                            
000017E2                            loc_17DC:				; XREF: loc_17A2
000017E2 360B                       		move.w	a3,d3
000017E4 1204                       		move.b	d4,d1
000017E6 D201                       		add.b	d1,d1
000017E8 6400                       		bcc.s	loc_17EE
000017EA 5346                       		subq.w	#1,d6
000017EC 0D05                       		btst	d6,d5
000017EE 6700                       		beq.s	loc_17EE
000017F0 0043 8000                  		ori.w	#-$8000,d3
000017F4                            
000017F4                            loc_17EE:
000017F4 D201                       		add.b	d1,d1
000017F6 6400                       		bcc.s	loc_17FC
000017F8 5346                       		subq.w	#1,d6
000017FA 0D05                       		btst	d6,d5
000017FC 6700                       		beq.s	loc_17FC
000017FE 0643 4000                  		addi.w	#$4000,d3
00001802                            
00001802                            loc_17FC:
00001802 D201                       		add.b	d1,d1
00001804 6400                       		bcc.s	loc_180A
00001806 5346                       		subq.w	#1,d6
00001808 0D05                       		btst	d6,d5
0000180A 6700                       		beq.s	loc_180A
0000180C 0643 2000                  		addi.w	#$2000,d3
00001810                            
00001810                            loc_180A:
00001810 D201                       		add.b	d1,d1
00001812 6400                       		bcc.s	loc_1818
00001814 5346                       		subq.w	#1,d6
00001816 0D05                       		btst	d6,d5
00001818 6700                       		beq.s	loc_1818
0000181A 0043 1000                  		ori.w	#$1000,d3
0000181E                            
0000181E                            loc_1818:
0000181E D201                       		add.b	d1,d1
00001820 6400                       		bcc.s	loc_1826
00001822 5346                       		subq.w	#1,d6
00001824 0D05                       		btst	d6,d5
00001826 6700                       		beq.s	loc_1826
00001828 0043 0800                  		ori.w	#$800,d3
0000182C                            
0000182C                            loc_1826:
0000182C 3205                       		move.w	d5,d1
0000182E 3E06                       		move.w	d6,d7
00001830 9E4D                       		sub.w	a5,d7
00001832 6400                       		bcc.s	loc_1856
00001834 3C07                       		move.w	d7,d6
00001836 0646 0010                  		addi.w	#$10,d6
0000183A 4447                       		neg.w	d7
0000183C EF69                       		lsl.w	d7,d1
0000183E 1A10                       		move.b	(a0),d5
00001840 EF3D                       		rol.b	d7,d5
00001842 DE47                       		add.w	d7,d7
00001844 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001848 D245                       		add.w	d5,d1
0000184A                            
0000184A                            loc_1844:				; XREF: loc_1868
0000184A 300D                       		move.w	a5,d0
0000184C D040                       		add.w	d0,d0
0000184E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001852 D243                       		add.w	d3,d1
00001854 1A18                       		move.b	(a0)+,d5
00001856 E14D                       		lsl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5
0000185A 4E75                       		rts	
0000185C                            ; ===========================================================================
0000185C                            
0000185C                            loc_1856:				; XREF: loc_1826
0000185C 6700                       		beq.s	loc_1868
0000185E EE69                       		lsr.w	d7,d1
00001860 300D                       		move.w	a5,d0
00001862 D040                       		add.w	d0,d0
00001864 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001868 D243                       		add.w	d3,d1
0000186A 300D                       		move.w	a5,d0
0000186C 6000                       		bra.s	sub_188C
0000186E                            ; ===========================================================================
0000186E                            
0000186E                            loc_1868:				; XREF: loc_1856
0000186E 7C10                       		moveq	#$10,d6
00001870                            
00001870                            loc_186A:
00001870 60D8                       		bra.s	loc_1844
00001872                            ; ===========================================================================
00001872 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001888 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001892                            
00001892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001892                            
00001892                            
00001892                            sub_188C:				; XREF: EniDec
00001892 9C40                       		sub.w	d0,d6
00001894 0C46 0009                  		cmpi.w	#9,d6
00001898 6400                       		bcc.s	locret_189A
0000189A 5046                       		addq.w	#8,d6
0000189C E145                       		asl.w	#8,d5
0000189E 1A18                       		move.b	(a0)+,d5
000018A0                            
000018A0                            locret_189A:
000018A0 4E75                       		rts	
000018A2                            ; End of function sub_188C
000018A2                            
000018A2                            ; ===========================================================================
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            ; Kosinski decompression routine
000018A2                            ;
000018A2                            ; Created by vladikcomper
000018A2                            ; Special thanks to flamewing and MarkeyJester
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            _Kos_RunBitStream macro
000018A2                                    dbf     d2,@skip\@
000018A2                                    moveq   #7,d2
000018A2                                    move.b  d1,d0
000018A2                                    swap    d3
000018A2                                    bpl.s   @skip\@
000018A2                                    move.b  (a0)+,d0                        ; get desc. bitfield
000018A2                                    move.b  (a0)+,d1                        ;
000018A2                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018A2                                    move.b  (a4,d1.w),d1                    ;
000018A2                            @skip\@
000018A2                                    endm
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            KosDec:
000018A2 7E07                               moveq   #7,d7
000018A4 7000                               moveq   #0,d0
000018A6 7200                               moveq   #0,d1
000018A8 49FA 0000                          lea     KosDec_ByteMap(pc),a4
000018AC 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
000018AE 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
000018B0 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018B4 1234 1000                          move.b  (a4,d1.w),d1                    ;
000018B8 7407                               moveq   #7,d2                           ; set repeat count to 8
000018BA 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
000018BC 4243                               clr.w   d3                              ;
000018BE 6000                               bra.s   KosDec_FetchNewCode
000018C0                             
000018C0                            KosDec_FetchCodeLoop:
000018C0                                    ; code 1 (Uncompressed byte)
000018C0 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018D8 12D8                               move.b  (a0)+,(a1)+
000018DA                             
000018DA                            KosDec_FetchNewCode:
000018DA D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018DC 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
000018DE                             
000018DE                                    ; codes 00 and 01
000018DE 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018F6 7800                               moveq   #0,d4                           ; d4 will contain copy count
000018F8 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018FA 6500                               bcs.s   KosDec_Code_01
000018FC                             
000018FC                                    ; code 00 (Dictionary ref. short)
000018FC 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001914 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001916 D944                               addx.w  d4,d4
00001918 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001930 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001932 D944                               addx.w  d4,d4
00001934 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000194C 7AFF                               moveq   #-1,d5
0000194E 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00001950                             
00001950                            KosDec_StreamCopy:
00001950 47F1 5000                          lea     (a1,d5),a3
00001954 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001956                             
00001956                            KosDec_copy:
00001956 12DB                               move.b  (a3)+,(a1)+
00001958 51CC FFFC                          dbf     d4,KosDec_copy
0000195C 6000 FF7C                          bra.w   KosDec_FetchNewCode
00001960                            ; ---------------------------------------------------------------------------
00001960                            KosDec_Code_01:
00001960                                    ; code 01 (Dictionary ref. long / special)
00001960 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001978 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
0000197A 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
0000197C 7AFF                               moveq   #-1,d5
0000197E 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00001980 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00001982 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00001984 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00001986 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00001988                             
00001988                                    ; special mode (extended counter)
00001988 1818                               move.b  (a0)+,d4                        ; read cnt
0000198A 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
0000198C 5304                               subq.b  #1,d4
0000198E 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00001992                             
00001992 47F1 5000                          lea     (a1,d5),a3
00001996 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001998 3C04                               move.w  d4,d6
0000199A 4646                               not.w   d6
0000199C CC47                               and.w   d7,d6
0000199E DC46                               add.w   d6,d6
000019A0 E64C                               lsr.w   #3,d4
000019A2 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
000019A6                             
000019A6                            KosDec_largecopy:
000019A6                                    rept 8
000019A6                                    move.b  (a3)+,(a1)+
000019A6 12DB 12DB 12DB 12DB 12DB+          endr
000019B6 51CC FFEE                          dbf     d4,KosDec_largecopy
000019BA 6000 FF1E                          bra.w   KosDec_FetchNewCode
000019BE                             
000019BE                            KosDec_Quit:
000019BE 4E75                               rts
000019C0                             
000019C0                            ; ---------------------------------------------------------------------------
000019C0                            ; A look-up table to invert bits order in desc. field bytes
000019C0                            ; ---------------------------------------------------------------------------
000019C0                             
000019C0                            KosDec_ByteMap:
000019C0 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000019D0 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000019E0 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000019F0 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001A00 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001A10 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001A20 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001A30 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001A40 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001A50 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001A60 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001A70 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A80 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A90 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001AA0 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001AB0 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001AC0                             
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Palette cycling routine loading subroutine
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AC0 7400                       		moveq	#0,d2
00001AC2 7000                       		moveq	#0,d0
00001AC4 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AC8 D040                       		add.w	d0,d0		; multiply by 2
00001ACA 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated Palettes offset index into d0
00001ACE 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001AD2                            ; End of function PalCycle_Load
00001AD2                            
00001AD2                            ; ===========================================================================
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Palette cycling routines
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AD4 0000                       		dc.w PalCycle_LZ-PalCycle
00001AD6 0000                       		dc.w PalCycle_MZ-PalCycle
00001AD8 0000                       		dc.w PalCycle_SLZ-PalCycle
00001ADA 0000                       		dc.w PalCycle_SYZ-PalCycle
00001ADC 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ADE 0000                       		dc.w PalCycle_GHZ-PalCycle
00001AE0 0000                       		dc.w PalCycle_Title-PalCycle
00001AE2                            
00001AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AE2                            
00001AE2                            
00001AE2                            PalCycle_Title:				; XREF: TitleScreen
00001AE2 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AE8 6000                       		bra.s	loc_196A
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            PalCycle_GHZ:				; XREF: PalCycle
00001AEA 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001AF0                            
00001AF0                            loc_196A:				; XREF: PalCycle_Title
00001AF0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AF4 6A00                       		bpl.s	locret_1990
00001AF6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AFC 3038 F632                  		move.w	($FFFFF632).w,d0
00001B00 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B04 0240 0003                  		andi.w	#3,d0
00001B08 E748                       		lsl.w	#3,d0
00001B0A 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B0E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B12 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B16                            
00001B16                            locret_1990:
00001B16 4E75                       		rts	
00001B18                            ; End of function PalCycle_Title
00001B18                            
00001B18                            
00001B18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B18                            
00001B18                            
00001B18                            PalCycle_LZ:				; XREF: PalCycle
00001B18 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B1C 6A00                       		bpl.s	loc_19D8
00001B1E 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B24 3038 F632                  		move.w	($FFFFF632).w,d0
00001B28 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B2C 0240 0003                  		andi.w	#3,d0
00001B30 E748                       		lsl.w	#3,d0
00001B32 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B38 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B3E 6600                       		bne.s	loc_19C0
00001B40 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	Palette instead
00001B46                            
00001B46                            loc_19C0:
00001B46 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B4A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B52 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5E                            
00001B5E                            loc_19D8:
00001B5E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B62 0240 0007                  		andi.w	#7,d0
00001B66 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B6A 6700                       		beq.s	locret_1A3A
00001B6C 7201                       		moveq	#1,d1
00001B6E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B72 6700                       		beq.s	loc_19F0
00001B74 4441                       		neg.w	d1
00001B76                            
00001B76                            loc_19F0:
00001B76 3038 F650                  		move.w	($FFFFF650).w,d0
00001B7A 0240 0003                  		andi.w	#3,d0
00001B7E D041                       		add.w	d1,d0
00001B80 0C40 0003                  		cmpi.w	#3,d0
00001B84 6500                       		bcs.s	loc_1A0A
00001B86 3200                       		move.w	d0,d1
00001B88 7000                       		moveq	#0,d0
00001B8A 4A41                       		tst.w	d1
00001B8C 6A00                       		bpl.s	loc_1A0A
00001B8E 7002                       		moveq	#2,d0
00001B90                            
00001B90                            loc_1A0A:
00001B90 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B94 D040                       		add.w	d0,d0
00001B96 3200                       		move.w	d0,d1
00001B98 D040                       		add.w	d0,d0
00001B9A D041                       		add.w	d1,d0
00001B9C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001BA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001BA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAA 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAE 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001BB4 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BB8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BC0                            
00001BC0                            locret_1A3A:
00001BC0 4E75                       		rts	
00001BC2                            ; End of function PalCycle_LZ
00001BC2                            
00001BC2                            ; ===========================================================================
00001BC2 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BCA                            ; ===========================================================================
00001BCA                            
00001BCA                            PalCycle_MZ:				; XREF: PalCycle
00001BCA 4E75                       		rts	
00001BCC                            
00001BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCC                            
00001BCC                            
00001BCC                            PalCycle_SLZ:				; XREF: PalCycle
00001BCC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BD0 6A00                       		bpl.s	locret_1A80
00001BD2 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BD8 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDC 5240                       		addq.w	#1,d0
00001BDE 0C40 0006                  		cmpi.w	#6,d0
00001BE2 6500                       		bcs.s	loc_1A60
00001BE4 7000                       		moveq	#0,d0
00001BE6                            
00001BE6                            loc_1A60:
00001BE6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BEA 3200                       		move.w	d0,d1
00001BEC D241                       		add.w	d1,d1
00001BEE D041                       		add.w	d1,d0
00001BF0 D040                       		add.w	d0,d0
00001BF2 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BF8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFC 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C00 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001C06                            
00001C06                            locret_1A80:
00001C06 4E75                       		rts	
00001C08                            ; End of function PalCycle_SLZ
00001C08                            
00001C08                            
00001C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C08                            
00001C08                            
00001C08                            PalCycle_SYZ:				; XREF: PalCycle
00001C08 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C0C 6A00                       		bpl.s	locret_1AC6
00001C0E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C14 3038 F632                  		move.w	($FFFFF632).w,d0
00001C18 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C1C 0240 0003                  		andi.w	#3,d0
00001C20 E548                       		lsl.w	#2,d0
00001C22 3200                       		move.w	d0,d1
00001C24 D040                       		add.w	d0,d0
00001C26 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C2C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C30 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C34 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C38 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C3E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C42 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C46 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C4C                            
00001C4C                            locret_1AC6:
00001C4C 4E75                       		rts	
00001C4E                            ; End of function PalCycle_SYZ
00001C4E                            
00001C4E                            
00001C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C4E                            
00001C4E                            
00001C4E                            PalCycle_SBZ:				; XREF: PalCycle
00001C4E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C54 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C58 6700                       		beq.s	loc_1ADA
00001C5A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C60                            
00001C60                            loc_1ADA:
00001C60 43F8 F650                  		lea	($FFFFF650).w,a1
00001C64 321A                       		move.w	(a2)+,d1
00001C66                            
00001C66                            loc_1AE0:
00001C66 5311                       		subq.b	#1,(a1)
00001C68 6B00                       		bmi.s	loc_1AEA
00001C6A 5489                       		addq.l	#2,a1
00001C6C 5C8A                       		addq.l	#6,a2
00001C6E 6000                       		bra.s	loc_1B06
00001C70                            ; ===========================================================================
00001C70                            
00001C70                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C70 12DA                       		move.b	(a2)+,(a1)+
00001C72 1011                       		move.b	(a1),d0
00001C74 5200                       		addq.b	#1,d0
00001C76 B01A                       		cmp.b	(a2)+,d0
00001C78 6500                       		bcs.s	loc_1AF6
00001C7A 7000                       		moveq	#0,d0
00001C7C                            
00001C7C                            loc_1AF6:
00001C7C 12C0                       		move.b	d0,(a1)+
00001C7E 0240 000F                  		andi.w	#$F,d0
00001C82 D040                       		add.w	d0,d0
00001C84 305A                       		movea.w	(a2)+,a0
00001C86 365A                       		movea.w	(a2)+,a3
00001C88 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C8C                            
00001C8C                            loc_1B06:				; XREF: PalCycle_SBZ
00001C8C 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C90 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C94 6A00                       		bpl.s	locret_1B64
00001C96 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C9C 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CA2 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CA6 6700                       		beq.s	loc_1B2E
00001CA8 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CAE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CB4                            
00001CB4                            loc_1B2E:
00001CB4 72FF                       		moveq	#-1,d1
00001CB6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CBA 6700                       		beq.s	loc_1B38
00001CBC 4441                       		neg.w	d1
00001CBE                            
00001CBE                            loc_1B38:
00001CBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CC2 0240 0003                  		andi.w	#3,d0
00001CC6 D041                       		add.w	d1,d0
00001CC8 0C40 0003                  		cmpi.w	#3,d0
00001CCC 6500                       		bcs.s	loc_1B52
00001CCE 3200                       		move.w	d0,d1
00001CD0 7000                       		moveq	#0,d0
00001CD2 4A41                       		tst.w	d1
00001CD4 6A00                       		bpl.s	loc_1B52
00001CD6 7002                       		moveq	#2,d0
00001CD8                            
00001CD8                            loc_1B52:
00001CD8 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CDC D040                       		add.w	d0,d0
00001CDE 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CE2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CE6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CEA                            
00001CEA                            locret_1B64:
00001CEA 4E75                       		rts	
00001CEC                            ; End of function PalCycle_SBZ
00001CEC                            
00001CEC                            ; ===========================================================================
00001CEC                            Pal_TitleCyc:	incbin	Palette\c_title.bin
00001D0C                            Pal_GHZCyc:	incbin	Palette\c_ghz.bin
00001D2C                            Pal_LZCyc1:	incbin	Palette\c_lz_wat.bin	; waterfalls Palette
00001D4C                            Pal_LZCyc2:	incbin	Palette\c_lz_bel.bin	; conveyor belt Palette
00001D5E                            Pal_LZCyc3:	incbin	Palette\c_lz_buw.bin	; conveyor belt (underwater) Palette
00001D70                            Pal_SBZ3Cyc1:	incbin	Palette\c_sbz3_w.bin	; waterfalls Palette
00001DD8                            Pal_SLZCyc:	incbin	Palette\c_slz.bin
00001DFC                            Pal_SYZCyc1:	incbin	Palette\c_syz_1.bin
00001E1C                            Pal_SYZCyc2:	incbin	Palette\c_syz_2.bin
00001E2C                            
00001E2C                            Pal_SBZCycList:
00001E2C                            	include "_inc\SBZ Palette script 1.asm"
00001E2C                            ; ---------------------------------------------------------------------------
00001E2C                            ; Scrap Brain Zone 1 pallet cycling script
00001E2C                            ; ---------------------------------------------------------------------------
00001E2C 0008                       	dc.w 8			; number of entries - 1
00001E2E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E30 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E32 FB50                       	dc.w $FB50		; RAM address
00001E34 0D08                       	dc.b $D, 8
00001E36 0000                       	dc.w Pal_SBZCyc2
00001E38 FB52                       	dc.w $FB52
00001E3A 0E08                       	dc.b $E, 8
00001E3C 0000                       	dc.w Pal_SBZCyc3
00001E3E FB6E                       	dc.w $FB6E
00001E40 0B08                       	dc.b $B, 8
00001E42 0000                       	dc.w Pal_SBZCyc5
00001E44 FB70                       	dc.w $FB70
00001E46 0708                       	dc.b 7,	8
00001E48 0000                       	dc.w Pal_SBZCyc6
00001E4A FB72                       	dc.w $FB72
00001E4C 1C10                       	dc.b $1C, $10
00001E4E 0000                       	dc.w Pal_SBZCyc7
00001E50 FB7E                       	dc.w $FB7E
00001E52 0303                       	dc.b 3,	3
00001E54 0000                       	dc.w Pal_SBZCyc8
00001E56 FB78                       	dc.w $FB78
00001E58 0303                       	dc.b 3,	3
00001E5A 0000                       	dc.w Pal_SBZCyc8+2
00001E5C FB7A                       	dc.w $FB7A
00001E5E 0303                       	dc.b 3,	3
00001E60 0000                       	dc.w Pal_SBZCyc8+4
00001E62 FB7C                       	dc.w $FB7C
00001E64                            	even
00001E64                            	even
00001E64                            
00001E64                            Pal_SBZCycList2:
00001E64                            	include "_inc\SBZ Palette script 2.asm"
00001E64                            ; ---------------------------------------------------------------------------
00001E64                            ; Scrap Brain Zone 2 pallet cycling script
00001E64                            ; ---------------------------------------------------------------------------
00001E64 0006                       	dc.w 6
00001E66 0708                       	dc.b 7,	8
00001E68 0000                       	dc.w Pal_SBZCyc1
00001E6A FB50                       	dc.w $FB50
00001E6C 0D08                       	dc.b $D, 8
00001E6E 0000                       	dc.w Pal_SBZCyc2
00001E70 FB52                       	dc.w $FB52
00001E72 0908                       	dc.b 9,	8
00001E74 0000                       	dc.w Pal_SBZCyc9
00001E76 FB70                       	dc.w $FB70
00001E78 0708                       	dc.b 7,	8
00001E7A 0000                       	dc.w Pal_SBZCyc6
00001E7C FB72                       	dc.w $FB72
00001E7E 0303                       	dc.b 3,	3
00001E80 0000                       	dc.w Pal_SBZCyc8
00001E82 FB78                       	dc.w $FB78
00001E84 0303                       	dc.b 3,	3
00001E86 0000                       	dc.w Pal_SBZCyc8+2
00001E88 FB7A                       	dc.w $FB7A
00001E8A 0303                       	dc.b 3,	3
00001E8C 0000                       	dc.w Pal_SBZCyc8+4
00001E8E FB7C                       	dc.w $FB7C
00001E90                            	even
00001E90                            	even
00001E90                            
00001E90                            Pal_SBZCyc1:	incbin	Palette\c_sbz_1.bin
00001EA0                            Pal_SBZCyc2:	incbin	Palette\c_sbz_2.bin
00001EB0                            Pal_SBZCyc3:	incbin	Palette\c_sbz_3.bin
00001EC0                            Pal_SBZCyc4:	incbin	Palette\c_sbz_4.bin
00001ECC                            Pal_SBZCyc5:	incbin	Palette\c_sbz_5.bin
00001EDC                            Pal_SBZCyc6:	incbin	Palette\c_sbz_6.bin
00001EEC                            Pal_SBZCyc7:	incbin	Palette\c_sbz_7.bin
00001F0C                            Pal_SBZCyc8:	incbin	Palette\c_sbz_8.bin
00001F16                            Pal_SBZCyc9:	incbin	Palette\c_sbz_9.bin
00001F26                            Pal_SBZCyc10:	incbin	Palette\c_sbz_10.bin
00001F32                            ; ---------------------------------------------------------------------------
00001F32                            ; Subroutine to	fade out and fade in
00001F32                            ; ---------------------------------------------------------------------------
00001F32                            
00001F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F32                            
00001F32                            
00001F32                            Pal_FadeTo:
00001F32 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F38                            
00001F38                            Pal_FadeTo2:
00001F38 7000                       		moveq	#0,d0
00001F3A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F3E 1038 F626                  		move.b	($FFFFF626).w,d0
00001F42 D0C0                       		adda.w	d0,a0
00001F44 7200                       		moveq	#0,d1
00001F46 1038 F627                  		move.b	($FFFFF627).w,d0
00001F4A                            
00001F4A                            Pal_ToBlack:
00001F4A 30C1                       		move.w	d1,(a0)+
00001F4C 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill Palette with $000	(black)
00001F50 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001F52 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001F54                            
00001F54                            loc_1DCE:
00001F54 6100 F69C                  		bsr.w	RunPLC_RAM
00001F58 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F5E 6100 0000                  		bsr.w	DelayProgram
00001F62 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001F66 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00001F68 6100                       		bsr.s	Pal_FadeIn
00001F6A 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001F6C 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001F6E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001F74 6000 0000                  		bra	DelayProgram				; MJ: ''
00001F78                            
00001F78                            ; End of function Pal_FadeTo
00001F78                            
00001F78                            ; ---------------------------------------------------------------------------
00001F78                            ; Palette fade-in subroutine
00001F78                            ; ---------------------------------------------------------------------------
00001F78                            
00001F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F78                            
00001F78                            
00001F78                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001F78 7000                       		moveq	#0,d0
00001F7A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F82 1038 F626                  		move.b	($FFFFF626).w,d0
00001F86 D0C0                       		adda.w	d0,a0
00001F88 D2C0                       		adda.w	d0,a1
00001F8A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8E                            
00001F8E                            loc_1DFA:
00001F8E 6100                       		bsr.s	Pal_AddColor
00001F90 51C8 FFFC                  		dbf	d0,loc_1DFA
00001F94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F9A 6600                       		bne.s	locret_1E24
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA2 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FA6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FAA D0C0                       		adda.w	d0,a0
00001FAC D2C0                       		adda.w	d0,a1
00001FAE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB2                            
00001FB2                            loc_1E1E:
00001FB2 6100                       		bsr.s	Pal_AddColor
00001FB4 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FB8                            
00001FB8                            locret_1E24:
00001FB8 4E75                       		rts	
00001FBA                            ; End of function Pal_FadeIn
00001FBA                            
00001FBA                            
00001FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FBA                            
00001FBA                            
00001FBA                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FBA 1A11                       		move.b	(a1),d5					; MJ: load blue
00001FBC 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001FBE 1401                       		move.b	d1,d2					; MJ: load red
00001FC0 E809                       		lsr.b	#$04,d1					; MJ: get only green
00001FC2 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001FC6 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001FC8 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001FCA 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001FCE 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001FD2                            
00001FD2                            FCI_NoBlue:
00001FD2 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001FD4 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001FD8 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001FDC                            
00001FDC                            FCI_NoGreen:
00001FDC B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001FDE 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001FE2 5403                       		addq.b	#$02,d3					; MJ: increase red
00001FE4                            
00001FE4                            FCI_NoRed:
00001FE4 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001FE6 4E75                       		rts						; MJ: return
00001FE8                            
00001FE8                            ; End of function Pal_AddColor
00001FE8                            
00001FE8                            
00001FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE8                            
00001FE8                            
00001FE8                            Pal_FadeFrom:
00001FE8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FEE 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001FF0 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001FF2                            
00001FF2                            loc_1E5C:
00001FF2 6100 F5FE                  		bsr.w	RunPLC_RAM
00001FF6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FFC 6100 0000                  		bsr.w	DelayProgram
00002000 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002004 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
00002006 6100                       		bsr.s	Pal_FadeOut
00002008 51CC FFE8                  		dbf	d4,loc_1E5C
0000200C 4E75                       		rts	
0000200E                            ; End of function Pal_FadeFrom
0000200E                            
0000200E                            ; ---------------------------------------------------------------------------
0000200E                            ; Palette fade-out subroutine
0000200E                            ; ---------------------------------------------------------------------------
0000200E                            
0000200E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200E                            
0000200E                            
0000200E                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000200E 7000                       		moveq	#0,d0
00002010 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002014 1038 F626                  		move.b	($FFFFF626).w,d0
00002018 D0C0                       		adda.w	d0,a0
0000201A 1038 F627                  		move.b	($FFFFF627).w,d0
0000201E                            
0000201E                            loc_1E82:
0000201E 6100                       		bsr.s	Pal_DecColor
00002020 51C8 FFFC                  		dbf	d0,loc_1E82
00002024                            
00002024 7000                       		moveq	#0,d0
00002026 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202A 1038 F626                  		move.b	($FFFFF626).w,d0
0000202E D0C0                       		adda.w	d0,a0
00002030 1038 F627                  		move.b	($FFFFF627).w,d0
00002034                            
00002034                            loc_1E98:
00002034 6100                       		bsr.s	Pal_DecColor
00002036 51C8 FFFC                  		dbf	d0,loc_1E98
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_FadeOut
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_DecColor:				; XREF: Pal_FadeOut
0000203C 3A10                       		move.w	(a0),d5					; MJ: load colour
0000203E 3205                       		move.w	d5,d1					; MJ: copy to d1
00002040 1401                       		move.b	d1,d2					; MJ: load green and red
00002042 1601                       		move.b	d1,d3					; MJ: load red
00002044 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00002048 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000204C 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
00002050                            
00002050                            FCO_NoBlue:
00002050 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00002054 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00002058 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000205C                            
0000205C                            FCO_NoGreen:
0000205C 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
00002060 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002064 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002066                            
00002066                            FCO_NoRed:
00002066 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002068 4E75                       		rts						; MJ: return
0000206A                            
0000206A                            ; End of function Pal_DecColor
0000206A                            
0000206A                            ; ---------------------------------------------------------------------------
0000206A                            ; Subroutine to	fill the Palette	with white (special stage)
0000206A                            ; ---------------------------------------------------------------------------
0000206A                            
0000206A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000206A                            
0000206A                            
0000206A                            Pal_MakeWhite:				; XREF: SpecialStage
0000206A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002070 7000                       		moveq	#0,d0
00002072 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002076 1038 F626                  		move.b	($FFFFF626).w,d0
0000207A D0C0                       		adda.w	d0,a0
0000207C 323C 0EEE                  		move.w	#$EEE,d1
00002080 1038 F627                  		move.b	($FFFFF627).w,d0
00002084                            
00002084                            PalWhite_Loop:
00002084 30C1                       		move.w	d1,(a0)+
00002086 51C8 FFFC                  		dbf	d0,PalWhite_Loop
0000208A 383C 0015                  		move.w	#$15,d4
0000208E                            
0000208E                            loc_1EF4:
0000208E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002094 6100 0000                  		bsr.w	DelayProgram
00002098 6100                       		bsr.s	Pal_WhiteToBlack
0000209A 6100 F556                  		bsr.w	RunPLC_RAM
0000209E 51CC FFEE                  		dbf	d4,loc_1EF4
000020A2 4E75                       		rts	
000020A4                            ; End of function Pal_MakeWhite
000020A4                            
000020A4                            
000020A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A4                            
000020A4                            
000020A4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020A4 7000                       		moveq	#0,d0
000020A6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020AA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 D2C0                       		adda.w	d0,a1
000020B6 1038 F627                  		move.b	($FFFFF627).w,d0
000020BA                            
000020BA                            loc_1F20:
000020BA 6100                       		bsr.s	Pal_DecColor2
000020BC 51C8 FFFC                  		dbf	d0,loc_1F20
000020C0                            
000020C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020C6 6600                       		bne.s	locret_1F4A
000020C8 7000                       		moveq	#0,d0
000020CA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020CE 43F8 FA00                  		lea	($FFFFFA00).w,a1
000020D2 1038 F626                  		move.b	($FFFFF626).w,d0
000020D6 D0C0                       		adda.w	d0,a0
000020D8 D2C0                       		adda.w	d0,a1
000020DA 1038 F627                  		move.b	($FFFFF627).w,d0
000020DE                            
000020DE                            loc_1F44:
000020DE 6100                       		bsr.s	Pal_DecColor2
000020E0 51C8 FFFC                  		dbf	d0,loc_1F44
000020E4                            
000020E4                            locret_1F4A:
000020E4 4E75                       		rts	
000020E6                            ; End of function Pal_WhiteToBlack
000020E6                            
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000020E6 3419                       		move.w	(a1)+,d2
000020E8 3610                       		move.w	(a0),d3
000020EA B642                       		cmp.w	d2,d3
000020EC 6700                       		beq.s	loc_1F78
000020EE 3203                       		move.w	d3,d1
000020F0 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000020F4 6500                       		bcs.s	loc_1F64
000020F6 B242                       		cmp.w	d2,d1
000020F8 6500                       		bcs.s	loc_1F64
000020FA 30C1                       		move.w	d1,(a0)+
000020FC 4E75                       		rts	
000020FE                            ; ===========================================================================
000020FE                            
000020FE                            loc_1F64:				; XREF: Pal_DecColor2
000020FE 3203                       		move.w	d3,d1
00002100 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002104 6500                       		bcs.s	loc_1F74
00002106 B242                       		cmp.w	d2,d1
00002108 6500                       		bcs.s	loc_1F74
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 4E75                       		rts	
0000210E                            ; ===========================================================================
0000210E                            
0000210E                            loc_1F74:				; XREF: loc_1F64
0000210E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002110 4E75                       		rts	
00002112                            ; ===========================================================================
00002112                            
00002112                            loc_1F78:				; XREF: Pal_DecColor2
00002112 5448                       		addq.w	#2,a0
00002114 4E75                       		rts	
00002116                            ; End of function Pal_DecColor2
00002116                            
00002116                            ; ---------------------------------------------------------------------------
00002116                            ; Subroutine to	make a white flash when	you enter a special stage
00002116                            ; ---------------------------------------------------------------------------
00002116                            
00002116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002116                            
00002116                            
00002116                            Pal_MakeFlash:				; XREF: SpecialStage
00002116 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000211C 383C 0015                  		move.w	#$15,d4
00002120                            
00002120                            loc_1F86:
00002120 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002126 6100 0000                  		bsr.w	DelayProgram
0000212A 6100                       		bsr.s	Pal_ToWhite
0000212C 6100 F4C4                  		bsr.w	RunPLC_RAM
00002130 51CC FFEE                  		dbf	d4,loc_1F86
00002134 4E75                       		rts	
00002136                            ; End of function Pal_MakeFlash
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002136 7000                       		moveq	#0,d0
00002138 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000213C 1038 F626                  		move.b	($FFFFF626).w,d0
00002140 D0C0                       		adda.w	d0,a0
00002142 1038 F627                  		move.b	($FFFFF627).w,d0
00002146                            
00002146                            loc_1FAC:
00002146 6100                       		bsr.s	Pal_AddColor2
00002148 51C8 FFFC                  		dbf	d0,loc_1FAC
0000214C 7000                       		moveq	#0,d0
0000214E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002152 1038 F626                  		move.b	($FFFFF626).w,d0
00002156 D0C0                       		adda.w	d0,a0
00002158 1038 F627                  		move.b	($FFFFF627).w,d0
0000215C                            
0000215C                            loc_1FC2:
0000215C 6100                       		bsr.s	Pal_AddColor2
0000215E 51C8 FFFC                  		dbf	d0,loc_1FC2
00002162 4E75                       		rts	
00002164                            ; End of function Pal_ToWhite
00002164                            
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002164 3410                       		move.w	(a0),d2
00002166 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000216A 6700                       		beq.s	loc_2006
0000216C 3202                       		move.w	d2,d1
0000216E 0241 000E                  		andi.w	#$E,d1
00002172 0C41 000E                  		cmpi.w	#$E,d1
00002176 6700                       		beq.s	loc_1FE2
00002178 5458                       		addq.w	#2,(a0)+	; increase red value
0000217A 4E75                       		rts	
0000217C                            ; ===========================================================================
0000217C                            
0000217C                            loc_1FE2:				; XREF: Pal_AddColor2
0000217C 3202                       		move.w	d2,d1
0000217E 0241 00E0                  		andi.w	#$E0,d1
00002182 0C41 00E0                  		cmpi.w	#$E0,d1
00002186 6700                       		beq.s	loc_1FF4
00002188 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000218C 4E75                       		rts	
0000218E                            ; ===========================================================================
0000218E                            
0000218E                            loc_1FF4:				; XREF: loc_1FE2
0000218E 3202                       		move.w	d2,d1
00002190 0241 0E00                  		andi.w	#$E00,d1
00002194 0C41 0E00                  		cmpi.w	#$E00,d1
00002198 6700                       		beq.s	loc_2006
0000219A 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000219E 4E75                       		rts	
000021A0                            ; ===========================================================================
000021A0                            
000021A0                            loc_2006:				; XREF: Pal_AddColor2
000021A0 5448                       		addq.w	#2,a0
000021A2 4E75                       		rts	
000021A4                            ; End of function Pal_AddColor2
000021A4                            
000021A4                            ; ---------------------------------------------------------------------------
000021A4                            ; Palette cycling routine - Sega	logo
000021A4                            ; ---------------------------------------------------------------------------
000021A4                            
000021A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A4                            
000021A4                            
000021A4                            PalCycle_Sega:				; XREF: SegaScreen
000021A4 4A38 F635                  		tst.b	($FFFFF635).w
000021A8 6600                       		bne.s	loc_206A
000021AA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021AE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021B4 7205                       		moveq	#5,d1
000021B6 3038 F632                  		move.w	($FFFFF632).w,d0
000021BA                            
000021BA                            loc_2020:
000021BA 6A00                       		bpl.s	loc_202A
000021BC 5448                       		addq.w	#2,a0
000021BE 5341                       		subq.w	#1,d1
000021C0 5440                       		addq.w	#2,d0
000021C2 60F6                       		bra.s	loc_2020
000021C4                            ; ===========================================================================
000021C4                            
000021C4                            loc_202A:				; XREF: PalCycle_Sega
000021C4 3400                       		move.w	d0,d2
000021C6 0242 001E                  		andi.w	#$1E,d2
000021CA 6600                       		bne.s	loc_2034
000021CC 5440                       		addq.w	#2,d0
000021CE                            
000021CE                            loc_2034:
000021CE 0C40 0060                  		cmpi.w	#$60,d0
000021D2 6400                       		bcc.s	loc_203E
000021D4 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000021D8                            
000021D8                            loc_203E:
000021D8 5440                       		addq.w	#2,d0
000021DA 51C9 FFE8                  		dbf	d1,loc_202A
000021DE 3038 F632                  		move.w	($FFFFF632).w,d0
000021E2 5440                       		addq.w	#2,d0
000021E4 3400                       		move.w	d0,d2
000021E6 0242 001E                  		andi.w	#$1E,d2
000021EA 6600                       		bne.s	loc_2054
000021EC 5440                       		addq.w	#2,d0
000021EE                            
000021EE                            loc_2054:
000021EE 0C40 0064                  		cmpi.w	#$64,d0
000021F2 6D00                       		blt.s	loc_2062
000021F4 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000021FA 70F4                       		moveq	#-$C,d0
000021FC                            
000021FC                            loc_2062:
000021FC 31C0 F632                  		move.w	d0,($FFFFF632).w
00002200 7001                       		moveq	#1,d0
00002202 4E75                       		rts	
00002204                            ; ===========================================================================
00002204                            
00002204                            loc_206A:				; XREF: loc_202A
00002204 5338 F634                  		subq.b	#1,($FFFFF634).w
00002208 6A00                       		bpl.s	loc_20BC
0000220A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002210 3038 F632                  		move.w	($FFFFF632).w,d0
00002214 0640 000C                  		addi.w	#$C,d0
00002218 0C40 0030                  		cmpi.w	#$30,d0
0000221C 6500                       		bcs.s	loc_2088
0000221E 7000                       		moveq	#0,d0
00002220 4E75                       		rts	
00002222                            ; ===========================================================================
00002222                            
00002222                            loc_2088:				; XREF: loc_206A
00002222 31C0 F632                  		move.w	d0,($FFFFF632).w
00002226 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000222C 41F0 0000                  		lea	(a0,d0.w),a0
00002230 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002234 22D8                       		move.l	(a0)+,(a1)+
00002236 22D8                       		move.l	(a0)+,(a1)+
00002238 3298                       		move.w	(a0)+,(a1)
0000223A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000223E 7000                       		moveq	#0,d0
00002240 722C                       		moveq	#$2C,d1
00002242                            
00002242                            loc_20A8:
00002242 3400                       		move.w	d0,d2
00002244 0242 001E                  		andi.w	#$1E,d2
00002248 6600                       		bne.s	loc_20B2
0000224A 5440                       		addq.w	#2,d0
0000224C                            
0000224C                            loc_20B2:
0000224C 3390 0000                  		move.w	(a0),(a1,d0.w)
00002250 5440                       		addq.w	#2,d0
00002252 51C9 FFEE                  		dbf	d1,loc_20A8
00002256                            
00002256                            loc_20BC:
00002256 7001                       		moveq	#1,d0
00002258 4E75                       		rts	
0000225A                            ; End of function PalCycle_Sega
0000225A                            
0000225A                            ; ===========================================================================
0000225A                            
0000225A                            Pal_Sega1:	incbin	Palette\sega1.bin
00002266                            Pal_Sega2:	incbin	Palette\sega2.bin
00002296                            
00002296                            ; ---------------------------------------------------------------------------
00002296                            ; Subroutines to load Palettes
00002296                            ; ---------------------------------------------------------------------------
00002296                            
00002296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002296                            
00002296                            
00002296                            PalLoad1:
00002296 43F9 0000 0000             		lea	(PalPointers).l,a1
0000229C E748                       		lsl.w	#3,d0
0000229E D2C0                       		adda.w	d0,a1
000022A0 2459                       		movea.l	(a1)+,a2
000022A2 3659                       		movea.w	(a1)+,a3
000022A4 D6FC 0080                  		adda.w	#$80,a3
000022A8 3E19                       		move.w	(a1)+,d7
000022AA                            
000022AA                            loc_2110:
000022AA 26DA                       		move.l	(a2)+,(a3)+
000022AC 51CF FFFC                  		dbf	d7,loc_2110
000022B0 4E75                       		rts	
000022B2                            ; End of function PalLoad1
000022B2                            
000022B2                            
000022B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B2                            
000022B2                            
000022B2                            PalLoad2:
000022B2 43F9 0000 0000             		lea	(PalPointers).l,a1
000022B8 E748                       		lsl.w	#3,d0
000022BA D2C0                       		adda.w	d0,a1
000022BC 2459                       		movea.l	(a1)+,a2
000022BE 3659                       		movea.w	(a1)+,a3
000022C0 3E19                       		move.w	(a1)+,d7
000022C2                            
000022C2                            loc_2128:
000022C2 26DA                       		move.l	(a2)+,(a3)+
000022C4 51CF FFFC                  		dbf	d7,loc_2128
000022C8 4E75                       		rts	
000022CA                            ; End of function PalLoad2
000022CA                            
000022CA                            ; ---------------------------------------------------------------------------
000022CA                            ; Underwater Palette loading subroutine
000022CA                            ; ---------------------------------------------------------------------------
000022CA                            
000022CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CA                            
000022CA                            
000022CA                            PalLoad3_Water:
000022CA 43F9 0000 0000             		lea	(PalPointers).l,a1
000022D0 E748                       		lsl.w	#3,d0
000022D2 D2C0                       		adda.w	d0,a1
000022D4 2459                       		movea.l	(a1)+,a2
000022D6 3659                       		movea.w	(a1)+,a3
000022D8 96FC 0080                  		suba.w	#$80,a3
000022DC 3E19                       		move.w	(a1)+,d7
000022DE                            
000022DE                            loc_2144:
000022DE 26DA                       		move.l	(a2)+,(a3)+
000022E0 51CF FFFC                  		dbf	d7,loc_2144
000022E4 4E75                       		rts	
000022E6                            ; End of function PalLoad3_Water
000022E6                            
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad4_Water:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 96FC 0100                  		suba.w	#$100,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2160:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2160
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad4_Water
00002302                            
00002302                            ; ===========================================================================
00002302                            ; ---------------------------------------------------------------------------
00002302                            ; Palette pointers
00002302                            ; ---------------------------------------------------------------------------
00002302                            PalPointers:
00002302                            	include "_inc\Palette pointers.asm"
00002302                            ; ---------------------------------------------------------------------------
00002302                            ; Pallet pointers
00002302                            ; ---------------------------------------------------------------------------
00002302 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002306 FB00                       	dc.w $FB00		; RAM address
00002308 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000230A 0000 0000                  	dc.l Pal_Title
0000230E FB00                       	dc.w $FB00
00002310 001F                       	dc.w $1F
00002312 0000 0000                  	dc.l Pal_LevelSel
00002316 FB00                       	dc.w $FB00
00002318 001F                       	dc.w $1F
0000231A 0000 0000                  	dc.l Pal_Sonic
0000231E FB00                       	dc.w $FB00
00002320 0007                       	dc.w 7
00002322 0000 0000                  	dc.l Pal_GHZ
00002326 FB20                       	dc.w $FB20
00002328 0017                       	dc.w $17
0000232A 0000 0000                  	dc.l Pal_LZ
0000232E FB20                       	dc.w $FB20
00002330 0017                       	dc.w $17
00002332 0000 0000                  	dc.l Pal_MZ
00002336 FB20                       	dc.w $FB20
00002338 0017                       	dc.w $17
0000233A 0000 0000                  	dc.l Pal_SLZ
0000233E FB20                       	dc.w $FB20
00002340 0017                       	dc.w $17
00002342 0000 0000                  	dc.l Pal_SYZ
00002346 FB20                       	dc.w $FB20
00002348 0017                       	dc.w $17
0000234A 0000 0000                  	dc.l Pal_SBZ1
0000234E FB20                       	dc.w $FB20
00002350 0017                       	dc.w $17
00002352 0000 0000                  	dc.l Pal_Special
00002356 FB00                       	dc.w $FB00
00002358 001F                       	dc.w $1F
0000235A 0000 0000                  	dc.l Pal_LZWater
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_SBZ3
00002366 FB20                       	dc.w $FB20
00002368 0017                       	dc.w $17
0000236A 0000 0000                  	dc.l Pal_SBZ3Water
0000236E FB00                       	dc.w $FB00
00002370 001F                       	dc.w $1F
00002372 0000 0000                  	dc.l Pal_SBZ2
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZSonWater
0000237E FB00                       	dc.w $FB00
00002380 0007                       	dc.w 7
00002382 0000 0000                  	dc.l Pal_SBZ3SonWat
00002386 FB00                       	dc.w $FB00
00002388 0007                       	dc.w 7
0000238A 0000 0000                  	dc.l Pal_SpeResult
0000238E FB00                       	dc.w $FB00
00002390 001F                       	dc.w $1F
00002392 0000 0000                  	dc.l Pal_SpeContinue
00002396 FB00                       	dc.w $FB00
00002398 000F                       	dc.w $F
0000239A 0000 0000                  	dc.l Pal_Ending
0000239E FB00                       	dc.w $FB00
000023A0 001F                       	dc.w $1F
000023A2 0000 0000                  	dc.l Pal_Notice
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023A8 0017                       	dc.w $17
000023AA                            
000023AA                            ; ---------------------------------------------------------------------------
000023AA                            ; Palette data
000023AA                            ; ---------------------------------------------------------------------------
000023AA                            Pal_SegaBG:	incbin	Palette\sega_bg.bin
0000242A                            Pal_Title:	incbin	Palette\title.bin
000024AA                            Pal_LevelSel:	incbin	Palette\levelsel.bin
0000252A                            Pal_Sonic:	incbin	Palette\sonic.bin
0000254A                            Pal_GHZ:	incbin	Palette\ghz.bin
000025AA                            Pal_LZ:		incbin	Palette\lz.bin
0000260A                            Pal_LZWater:	incbin	Palette\lz_uw.bin	; LZ underwater Palettes
0000268A                            Pal_MZ:		incbin	Palette\mz.bin
000026EA                            Pal_SLZ:	incbin	Palette\slz.bin
0000274A                            Pal_SYZ:	incbin	Palette\syz.bin
000027AA                            Pal_SBZ1:	incbin	Palette\sbz_act1.bin	; SBZ act 1 Palettes
0000280A                            Pal_SBZ2:	incbin	Palette\sbz_act2.bin	; SBZ act 2 & Final Zone Palettes
0000286A                            Pal_Special:	incbin	Palette\special.bin	; special stage Palettes
000028EA                            Pal_SBZ3:	incbin	Palette\sbz_act3.bin	; SBZ act 3 Palettes
0000294A                            Pal_SBZ3Water:	incbin	Palette\sbz_a3uw.bin	; SBZ act 3 (underwater) Palettes
000029CA                            Pal_LZSonWater:	incbin	Palette\son_lzuw.bin	; Sonic (underwater in LZ) Palette
000029EA                            Pal_SBZ3SonWat:	incbin	Palette\son_sbzu.bin	; Sonic (underwater in SBZ act 3) Palette
00002A0A                            Pal_SpeResult:	incbin	Palette\ssresult.bin	; special stage results screen Palettes
00002A8A                            Pal_SpeContinue:incbin	Palette\sscontin.bin	; special stage results screen continue Palette
00002ACA                            Pal_Ending:	incbin	Palette\ending.bin	; ending sequence Palettes
00002B4A                            
00002B4A                            ; ---------------------------------------------------------------------------
00002B4A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002B4A                            ; ---------------------------------------------------------------------------
00002B4A                            
00002B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B4A                            
00002B4A                            
00002B4A                            DelayProgram:				; XREF: PauseGame
00002B4A 46FC 2300                  		move	#$2300,sr
00002B4E                            
00002B4E                            loc_29AC:
00002B4E 4A38 F62A                  		tst.b	($FFFFF62A).w
00002B52 66FA                       		bne.s	loc_29AC
00002B54 4E75                       		rts	
00002B56                            ; End of function DelayProgram
00002B56                            
00002B56                            ; ---------------------------------------------------------------------------
00002B56                            ; Subroutine to	generate a pseudo-random number	in d0
00002B56                            ; ---------------------------------------------------------------------------
00002B56                            
00002B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B56                            
00002B56                            
00002B56                            RandomNumber:
00002B56 2238 F636                  		move.l	($FFFFF636).w,d1
00002B5A 6600                       		bne.s	loc_29C0
00002B5C 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002B62                            
00002B62                            loc_29C0:
00002B62 2001                       		move.l	d1,d0
00002B64 E581                       		asl.l	#2,d1
00002B66 D280                       		add.l	d0,d1
00002B68 E781                       		asl.l	#3,d1
00002B6A D280                       		add.l	d0,d1
00002B6C 3001                       		move.w	d1,d0
00002B6E 4841                       		swap	d1
00002B70 D041                       		add.w	d1,d0
00002B72 3200                       		move.w	d0,d1
00002B74 4841                       		swap	d1
00002B76 21C1 F636                  		move.l	d1,($FFFFF636).w
00002B7A 4E75                       		rts	
00002B7C                            ; End of function RandomNumber
00002B7C                            
00002B7C                            
00002B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B7C                            
00002B7C                            
00002B7C                            CalcSine:				; XREF: SS_BGAnimate; et al
00002B7C 0240 00FF                  		andi.w	#$FF,d0
00002B80 D040                       		add.w	d0,d0
00002B82 0640 0080                  		addi.w	#$80,d0
00002B86 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002B8A 0440 0080                  		subi.w	#$80,d0
00002B8E 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002B92 4E75                       		rts	
00002B94                            ; End of function CalcSine
00002B94                            
00002B94                            ; ===========================================================================
00002B94                            
00002B94                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002E14                            
00002E14                            ; ===========================================================================
00002E14 48E7 6000                  		movem.l	d1-d2,-(sp)
00002E18 3200                       		move.w	d0,d1
00002E1A 4841                       		swap	d1
00002E1C 7000                       		moveq	#0,d0
00002E1E 3200                       		move.w	d0,d1
00002E20 7407                       		moveq	#7,d2
00002E22                            
00002E22                            loc_2C80:
00002E22 E599                       		rol.l	#2,d1
00002E24 D040                       		add.w	d0,d0
00002E26 5240                       		addq.w	#1,d0
00002E28 9240                       		sub.w	d0,d1
00002E2A 6400                       		bcc.s	loc_2C9A
00002E2C D240                       		add.w	d0,d1
00002E2E 5340                       		subq.w	#1,d0
00002E30 51CA FFF0                  		dbf	d2,loc_2C80
00002E34 E248                       		lsr.w	#1,d0
00002E36 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E3A 4E75                       		rts	
00002E3C                            ; ===========================================================================
00002E3C                            
00002E3C                            loc_2C9A:
00002E3C 5240                       		addq.w	#1,d0
00002E3E 51CA FFE2                  		dbf	d2,loc_2C80
00002E42 E248                       		lsr.w	#1,d0
00002E44 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E48 4E75                       		rts	
00002E4A                            
00002E4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E4A                            
00002E4A                            
00002E4A                            CalcAngle:
00002E4A 48E7 1800                  		movem.l	d3-d4,-(sp)
00002E4E 7600                       		moveq	#0,d3
00002E50 7800                       		moveq	#0,d4
00002E52 3601                       		move.w	d1,d3
00002E54 3802                       		move.w	d2,d4
00002E56 8843                       		or.w	d3,d4
00002E58 6700                       		beq.s	loc_2D04
00002E5A 3802                       		move.w	d2,d4
00002E5C 4A43                       		tst.w	d3
00002E5E 6A00 0000                  		bpl.w	loc_2CC2
00002E62 4443                       		neg.w	d3
00002E64                            
00002E64                            loc_2CC2:
00002E64 4A44                       		tst.w	d4
00002E66 6A00 0000                  		bpl.w	loc_2CCA
00002E6A 4444                       		neg.w	d4
00002E6C                            
00002E6C                            loc_2CCA:
00002E6C B843                       		cmp.w	d3,d4
00002E6E 6400 0000                  		bcc.w	loc_2CDC
00002E72 E18C                       		lsl.l	#8,d4
00002E74 88C3                       		divu.w	d3,d4
00002E76 7000                       		moveq	#0,d0
00002E78 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002E7C 6000                       		bra.s	loc_2CE6
00002E7E                            ; ===========================================================================
00002E7E                            
00002E7E                            loc_2CDC:				; XREF: CalcAngle
00002E7E E18B                       		lsl.l	#8,d3
00002E80 86C4                       		divu.w	d4,d3
00002E82 7040                       		moveq	#$40,d0
00002E84 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002E88                            
00002E88                            loc_2CE6:
00002E88 4A41                       		tst.w	d1
00002E8A 6A00 0000                  		bpl.w	loc_2CF2
00002E8E 4440                       		neg.w	d0
00002E90 0640 0080                  		addi.w	#$80,d0
00002E94                            
00002E94                            loc_2CF2:
00002E94 4A42                       		tst.w	d2
00002E96 6A00 0000                  		bpl.w	loc_2CFE
00002E9A 4440                       		neg.w	d0
00002E9C 0640 0100                  		addi.w	#$100,d0
00002EA0                            
00002EA0                            loc_2CFE:
00002EA0 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EA4 4E75                       		rts	
00002EA6                            ; ===========================================================================
00002EA6                            
00002EA6                            loc_2D04:				; XREF: CalcAngle
00002EA6 303C 0040                  		move.w	#$40,d0
00002EAA 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EAE 4E75                       		rts	
00002EB0                            ; End of function CalcAngle
00002EB0                            
00002EB0                            ; ===========================================================================
00002EB0                            
00002EB0                            Angle_Data:	incbin	misc\angles.bin
00002FB2                            
00002FB2                            NoticeScreen: include	"_notice\code.asm"
00002FB2                            
00002FB2                            ;NoticeScreen:				; XREF: GameModeArray
00002FB2 103C 00E4                      move.b  #$E4,d0                 ; set music ID to stop
00002FB6 4EB8 12CE                      jsr    PlaySound_Special.w      ; play music ID
00002FBA 4EB8 1FE8                      jsr    Pal_FadeFrom.w           ; fade palette out
00002FBE 46FC 2700                      move   #$2700,sr                ; disable interrupts
00002FC2 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00002FC6 0200 00BF                      andi.b #%10111111,d0            ; set display to "disable"
00002FCA 33C0 FFC0 0004                 move.w d0,($FFC00004).l         ; save to VDP
00002FD0 4EB8 15E4                      jsr    ClearPLC.w               ; clear pattern load cues
00002FD4 4EB8 11C0                      jsr    ClearScreen.w            ; clear VRAM planes, sprite buffer and scroll buffer
00002FD8 43F9 00FF 0000                 lea    ($FF0000).l,a1           ; load dump location
00002FDE 41F9 0000 0000                 lea    Map_Notice.l,a0           ; load compressed mappings address
00002FE4 303C 0140                      move.w #320,d0                  ; prepare pattern index value to patch to mappings
00002FE8 4EB8 1724                      jsr    EniDec.w                 ; decompress and dump
00002FEC 203C 6000 0003                 move.l #$60000003,d0            ; prepare VRAM write mode address (Plane B E000)
00002FF2 7227                           moveq  #$28-$01,d1              ; set map box draw width
00002FF4 741D                           moveq  #$1E-$01,d2              ; set map box draw height
00002FF6 6100 E372                      bsr.w  ShowVDPGraphics          ; flush mappings to VRAM
00002FFA 4DF9 FFC0 0004                 lea    ($FFC00004).l,a6         ; load VDP control port
00003000 2CBC 6800 0000                 move.l #$68000000,(a6)          ; set VDP to VRAM write mode (Address 2800)
00003006 41F9 0000 0000                 lea    Art_Notice.l,a0            ; load compressed art address
0000300C 4EB8 145E                      jsr    NemDec.w                 ; decompress and dump to VDP memory
00003010 41F9 0000 0000                 lea    Pal_Notice.l,a0         ; load palette address
00003016 43F8 FB80                      lea    ($FFFFFB80).w,a1         ; load palette buffer address
0000301A 700F                           moveq  #$F,d0                   ; set repeat times
0000301C                            
0000301C                            
0000301C                            NoticeScreen_PalLoop:
0000301C 22D8                           move.l (a0)+,(a1)+              ; copy colours to buffer
0000301E 22D8                           move.l (a0)+,(a1)+              ; ''
00003020 51C8 FFFA                      dbf    d0,NoticeScreen_PalLoop    ; repeat until done
00003024 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00003028 0000 0040                      ori.b  #%01000000,d0            ; set display to "enable"
0000302C 3C80                           move.w d0,(a6)                  ; save to VDP
0000302E 4EB8 1F32                      jsr    Pal_FadeTo               ; fade palette in
00003032                            ;	move.b	#$E1,d0
00003032                            ;	bsr.w	PlaySound_Special ; play "Notice"	sound
00003032                            
00003032                            Notice_MainLoop:
00003032 11FC 0002 F62A                 move.b #2,($FFFFF62A).w         ; set V-blank routine to run
00003038 4EB8 2B4A                      jsr    DelayProgram.w           ; wait for V-blank (decreases "Demo_Time_left")
0000303C 4A38 F605                      tst.b  ($FFFFF605).w            ; has player 1 pressed start button?
00003040 6B00                           bmi.s  Notice_GotoTitle           ; if so, branch
00003042 31FC 003C F614                 move.w #1*60,($FFFFF614).w      ; set delay time (3 seconds on a 60hz system)
00003048 4A78 F614                      tst.w  ($FFFFF614).w            ; has the delay time finished?
0000304C 66E4                           bne.s  Notice_MainLoop            ; if not, branch
0000304E                            
0000304E                            Notice_GotoTitle:
0000304E 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to title screen
00003054 4E75                       		rts	
00003056                            ; ---------------------------------------------------------------------------
00003056                            Art_Notice:		incbin	"_notice\Art.bin"		; rename to your needs
0000460E                            			even
0000460E                            Map_Notice:		incbin	"_notice\Map.bin"		; rename to your needs
000046B0 00                         			even
000046B0                            Pal_Notice:		incbin	"_notice\Palette.bin"		; rename to your needs
00004730                            			even
00004730                            			even
00004730                            
00004730                            ; ===========================================================================
00004730                            ; ---------------------------------------------------------------------------
00004730                            ; Sega screen
00004730                            ; ---------------------------------------------------------------------------
00004730                            
00004730                            SegaScreen:				; XREF: GameModeArray
00004730 103C 00E4                  		move.b	#$E4,d0
00004734 6100 CB98                  		bsr.w	PlaySound_Special ; stop music
00004738 6100 CEAA                  		bsr.w	ClearPLC
0000473C 6100 D8AA                  		bsr.w	Pal_FadeFrom
00004740 4DF9 00C0 0004             		lea	($C00004).l,a6
00004746 3CBC 8004                  		move.w	#$8004,(a6)
0000474A 3CBC 8230                  		move.w	#$8230,(a6)
0000474E 3CBC 8407                  		move.w	#$8407,(a6)
00004752 3CBC 8700                  		move.w	#$8700,(a6)
00004756 3CBC 8B00                  		move.w	#$8B00,(a6)
0000475A 4238 F64E                  		clr.b	($FFFFF64E).w
0000475E 46FC 2700                  		move	#$2700,sr
00004762 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004766 0200 00BF                  		andi.b	#$BF,d0
0000476A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004770 6100 CA4E                  		bsr.w	ClearScreen
00004774 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000477E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004784 6100 CCD8                  		bsr.w	NemDec
00004788 43F9 00FF 0000             		lea	($FF0000).l,a1
0000478E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004794 303C 0000                  		move.w	#0,d0
00004798 6100 CF8A                  		bsr.w	EniDec
0000479C 43F9 00FF 0000             		lea	($FF0000).l,a1
000047A2 203C 6510 0003             		move.l	#$65100003,d0
000047A8 7217                       		moveq	#$17,d1
000047AA 7407                       		moveq	#7,d2
000047AC 6100 CBBC                  		bsr.w	ShowVDPGraphics
000047B0 43F9 00FF 0180             		lea	($FF0180).l,a1
000047B6 203C 4000 0003             		move.l	#$40000003,d0
000047BC 7227                       		moveq	#$27,d1
000047BE 741B                       		moveq	#$1B,d2
000047C0 6100 CBA8                  		bsr.w	ShowVDPGraphics
000047C4 7000                       		moveq	#0,d0
000047C6 6100 DAEA                  		bsr.w	PalLoad2	; load Sega logo Palette
000047CA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000047D0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000047D6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000047DC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000047E2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000047E6 0000 0040                  		ori.b	#$40,d0
000047EA 33C0 00C0 0004             		move.w	d0,($C00004).l
000047F0                            
000047F0                            Sega_WaitPalette:
000047F0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000047F6 6100 E352                  		bsr.w	DelayProgram
000047FA 6100 D9A8                  		bsr.w	PalCycle_Sega
000047FE 66F0                       		bne.s	Sega_WaitPalette
00004800                            
00004800 103C 00E1                  		move.b	#$E1,d0
00004804 6100 CAC8                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00004808 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000480E 6100 E33A                  		bsr.w	DelayProgram
00004812 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004818                            
00004818                            Sega_WaitEnd:
00004818 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000481E 6100 E32A                  		bsr.w	DelayProgram
00004822 4A78 F614                  		tst.w	($FFFFF614).w
00004826 6700                       		beq.s	Sega_GotoTitle
00004828 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000482E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00004830                            
00004830                            Sega_GotoTitle:
00004830 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00004836                            	;	rts	
00004836 4EF9 0000 0000             		jmp	Owarisoft
0000483C                            ; ===========================================================================
0000483C                            
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            ; Title	screen
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            
0000483C                            TitleScreen:				; XREF: GameModeArray
0000483C 103C 00E4                  		move.b	#$E4,d0
00004840 6100 CA8C                  		bsr.w	PlaySound_Special ; stop music
00004844 6100 CD9E                  		bsr.w	ClearPLC
00004848 6100 D79E                  		bsr.w	Pal_FadeFrom
0000484C 46FC 2700                  		move	#$2700,sr
00004850 6100 C9FC                  		bsr.w	InitMegaPCM
00004854 4DF9 00C0 0004             		lea	($C00004).l,a6
0000485A 3CBC 8004                  		move.w	#$8004,(a6)
0000485E 3CBC 8230                  		move.w	#$8230,(a6)
00004862 3CBC 8407                  		move.w	#$8407,(a6)
00004866 3CBC 9001                  		move.w	#$9001,(a6)
0000486A 3CBC 9200                  		move.w	#$9200,(a6)
0000486E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004872 3CBC 8720                  		move.w	#$8720,(a6)
00004876 4238 F64E                  		clr.b	($FFFFF64E).w
0000487A 6100 C944                  		bsr.w	ClearScreen
0000487E 43F8 D000                  		lea	($FFFFD000).w,a1
00004882 7000                       		moveq	#0,d0
00004884 323C 07FF                  		move.w	#$7FF,d1
00004888                            
00004888                            Title_ClrObjRam:
00004888 22C0                       		move.l	d0,(a1)+
0000488A 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000488E                            
0000488E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004898 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000489E 6100 CBBE                  		bsr.w	NemDec
000048A2 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000048AC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000048B2 6100 CBAA                  		bsr.w	NemDec
000048B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000048BC 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000048C2 303C 0000                  		move.w	#0,d0
000048C6 6100 CE5C                  		bsr.w	EniDec
000048CA 43F9 00FF 0000             		lea	($FF0000).l,a1
000048D0 203C 4000 0003             		move.l	#$40000003,d0
000048D6 7227                       		moveq	#$27,d1
000048D8 741B                       		moveq	#$1B,d2
000048DA 6100 CA8E                  		bsr.w	ShowVDPGraphics
000048DE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000048E2 7000                       		moveq	#0,d0
000048E4 323C 001F                  		move.w	#$1F,d1
000048E8                            
000048E8                            Title_ClrPalette:
000048E8 22C0                       		move.l	d0,(a1)+
000048EA 51C9 FFFC                  		dbf	d1,Title_ClrPalette ; fill Palette with 0	(black)
000048EE                            
000048EE 7003                       		moveq	#3,d0		; load Sonic's Palette
000048F0 6100 D9A4                  		bsr.w	PalLoad1
000048F4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000048FA 4EB9 0000 0000             		jsr	ObjectsLoad
00004900 4EB9 0000 0000             		jsr	BuildSprites
00004906 6100 D62A                  		bsr.w	Pal_FadeTo
0000490A 46FC 2700                  		move	#$2700,sr
0000490E 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00004918 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000491E 6100 CB3E                  		bsr.w	NemDec
00004922 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000492C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004932 6100 CB2A                  		bsr.w	NemDec
00004936 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00004940 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00004946 6100 CB16                  		bsr.w	NemDec
0000494A 4DF9 00C0 0000             		lea	($C00000).l,a6
00004950 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00004958 4BF9 0000 058E             		lea	(Art_Text).l,a5
0000495E 323C 028F                  		move.w	#$28F,d1
00004962                            
00004962                            Title_LoadText:
00004962 3C9D                       		move.w	(a5)+,(a6)
00004964 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00004968                            
00004968 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000496E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00004974 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000497A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00004980 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00004986 31FC 0002 FE11             		move.w	#2,($FFFFFE11).w ; set act to 3
0000498C 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable Palette cycling
00004992 6100 0000                  		bsr.w	LevelSizeLoad
00004996 6100 0000                  		bsr.w	DeformBgLayer
0000499A 43F8 B000                  		lea	($FFFFB000).w,a1
0000499E 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	TS 16x16 mappings
000049A4 303C 0000                  		move.w	#0,d0
000049A8 6100 CD7A                  		bsr.w	EniDec
000049AC 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
000049B2 43F9 00FF 0000             		lea	($FF0000).l,a1
000049B8 6100 CEE8                  		bsr.w	KosDec
000049BC 6100 0000                  		bsr.w	LevelLayoutLoad
000049C0 6100 D626                  		bsr.w	Pal_FadeFrom
000049C4 46FC 2700                  		move	#$2700,sr
000049C8 6100 C7F6                  		bsr.w	ClearScreen
000049CC 4BF9 00C0 0004             		lea	($C00004).l,a5
000049D2 4DF9 00C0 0000             		lea	($C00000).l,a6
000049D8 47F8 F708                  		lea	($FFFFF708).w,a3
000049DC 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000049E0 343C 6000                  		move.w	#$6000,d2
000049E4 6100 0000                  		bsr.w	LoadTilesFromStart2
000049E8 43F9 00FF 0000             		lea	($FF0000).l,a1
000049EE 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000049F4 303C 0000                  		move.w	#0,d0
000049F8 6100 CD2A                  		bsr.w	EniDec
000049FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A02 203C 4206 0003             		move.l	#$42060003,d0
00004A08 7221                       		moveq	#$21,d1
00004A0A 7415                       		moveq	#$15,d2
00004A0C 6100 C95C                  		bsr.w	ShowVDPGraphics
00004A10 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004A1A 41F9 0000 0000             		lea	(Nem_TIT_1st).l,a0 ; load TZ patterns
00004A20 6100 CA3C                  		bsr.w	NemDec
00004A24 7001                       		moveq	#1,d0		; load title screen Palette
00004A26 6100 D86E                  		bsr.w	PalLoad1
00004A2A 103C 008A                  		move.b	#$8A,d0		; play title screen music
00004A2E 6100 C89E                  		bsr.w	PlaySound_Special
00004A32 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00004A38 31FC 0654 F614             		move.w	#$654,($FFFFF614).w ; run title	screen for $178	frames
00004A3E 43F8 D080                  		lea	($FFFFD080).w,a1
00004A42 7000                       		moveq	#0,d0
00004A44 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00004A48                            
00004A48                            Title_ClrObjRam2:
00004A48 22C0                       		move.l	d0,(a1)+
00004A4A 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00004A4E                            
00004A4E 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A54                            
00004A54 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A5A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00004A60 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00004A66 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00004A6C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00004A72 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00004A78 4EB9 0000 0000             		jsr	ObjectsLoad
00004A7E 6100 0000                  		bsr.w	DeformBgLayer
00004A82 4EB9 0000 0000             		jsr	BuildSprites
00004A88 7000                       		moveq	#0,d0
00004A8A 6100 CB2C                  		bsr.w	LoadPLC2
00004A8E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004A94 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00004A9A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A9E 0000 0040                  		ori.b	#$40,d0
00004AA2 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AA8 6100 D488                  		bsr.w	Pal_FadeTo
00004AAC                            
00004AAC                            loc_317C:
00004AAC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004AB2 6100 E096                  		bsr.w	DelayProgram
00004AB6 4EB9 0000 0000             		jsr	ObjectsLoad
00004ABC 6100 0000                  		bsr.w	DeformBgLayer
00004AC0 4EB9 0000 0000             		jsr	BuildSprites
00004AC6 6100 D01A                  		bsr.w	PalCycle_Title
00004ACA 6100 CB26                  		bsr.w	RunPLC_RAM
00004ACE 3038 D008                  		move.w	($FFFFD008).w,d0
00004AD2 5440                       		addq.w	#2,d0
00004AD4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00004AD8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00004ADC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00004ADE 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00004AE4 4E75                       		rts	
00004AE6                            ; ===========================================================================
00004AE6                            
00004AE6                            Title_ChkRegion:
00004AE6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00004AEA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00004AEC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00004AF2 6000                       		bra.s	Title_EnterCheat
00004AF4                            ; ===========================================================================
00004AF4                            
00004AF4                            Title_RegionJ:				; XREF: Title_ChkRegion
00004AF4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00004AFA                            
00004AFA                            Title_EnterCheat:			; XREF: Title_ChkRegion
00004AFA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00004AFE D0C0                       		adda.w	d0,a0
00004B00 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00004B04 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00004B08 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004B0A 6600                       		bne.s	loc_3210	; if not, branch
00004B0C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00004B10 4A00                       		tst.b	d0
00004B12 6600                       		bne.s	Title_CountC
00004B14 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00004B18 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00004B1C E249                       		lsr.w	#1,d1
00004B1E 0241 0003                  		andi.w	#3,d1
00004B22 6700                       		beq.s	Title_PlayRing
00004B24 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00004B28 6A00                       		bpl.s	Title_PlayRing
00004B2A 7201                       		moveq	#1,d1
00004B2C 1181 1001                  		move.b	d1,1(a0,d1.w)
00004B30                            
00004B30                            Title_PlayRing:
00004B30 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004B36 21FC 0101 0101 FFE0        		move.l	#$01010101,($FFFFFFE0).w	; activate all cheats
00004B3E 103C 00BF                  		move.b	#$BF,d0		; play continue sound when code is entered
00004B42 6100 C78A                  		bsr.w	PlaySound_Special
00004B46 6000                       		bra.s	Title_CountC
00004B48                            ; ===========================================================================
00004B48                            
00004B48                            loc_3210:				; XREF: Title_EnterCheat
00004B48 4A00                       		tst.b	d0
00004B4A 6700                       		beq.s	Title_CountC
00004B4C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00004B52 6700                       		beq.s	Title_CountC
00004B54 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004B5A                            
00004B5A                            Title_CountC:
00004B5A 1038 F605                  		move.b	($FFFFF605).w,d0
00004B5E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00004B62 6700                       		beq.s	loc_3230	; if not, branch
00004B64 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00004B68                            
00004B68                            loc_3230:
00004B68 4A78 F614                  		tst.w	($FFFFF614).w
00004B6C 6700 0000                  		beq.w	Demo
00004B70 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00004B76 6700 FF34                  		beq.w	loc_317C	; if not, branch
00004B7A                            
00004B7A                            Title_ChkLevSel:
00004B7A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00004B7E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B82 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00004B88 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B8C 7000                       		moveq	#$00,d0				; clear d0
00004B8E 11C0 FF32                  		move.b	d0,($FFFFFF32).w		; clear background strip 1 draw flags
00004B92 11C0 FF34                  		move.b	d0,($FFFFFF34).w		; clear background strip 2 draw flags
00004B96 11C0 FF30                  		move.b	d0,($FFFFFF30).w		; clear foreground strip draw flag
00004B9A 7002                       		moveq	#2,d0
00004B9C 6100 D714                  		bsr.w	PalLoad2	; load level select Palette
00004BA0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004BA4 7000                       		moveq	#0,d0
00004BA6 323C 00DF                  		move.w	#$DF,d1
00004BAA                            
00004BAA                            Title_ClrScroll:
00004BAA 22C0                       		move.l	d0,(a1)+
00004BAC 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00004BB0                            
00004BB0 21C0 F616                  		move.l	d0,($FFFFF616).w
00004BB4 46FC 2700                  		move	#$2700,sr
00004BB8 4DF9 00C0 0000             		lea	($C00000).l,a6
00004BBE 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00004BC8 323C 03FF                  		move.w	#$3FF,d1
00004BCC                            
00004BCC                            Title_ClrVram:
00004BCC 2C80                       		move.l	d0,(a6)
00004BCE 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00004BD2                            
00004BD2 6100 0000                  		bsr.w	LevSelTextLoad
00004BD6                            
00004BD6                            ; ---------------------------------------------------------------------------
00004BD6                            ; Level	Select
00004BD6                            ; ---------------------------------------------------------------------------
00004BD6                            
00004BD6                            LevelSelect:
00004BD6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004BDC 6100 DF6C                  		bsr.w	DelayProgram
00004BE0 6100 0000                  		bsr.w	LevSelControls
00004BE4 6100 CA0C                  		bsr.w	RunPLC_RAM
00004BE8 4AB8 F680                  		tst.l	($FFFFF680).w
00004BEC 66E8                       		bne.s	LevelSelect
00004BEE 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004BF4 67E0                       		beq.s	LevelSelect	; if not, branch
00004BF6 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004BFA 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004BFE 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004C00 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004C04 0640 0080                  		addi.w	#$80,d0
00004C08 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00004C0C 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00004C0E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004C12 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004C14 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004C18 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004C1A                            
00004C1A                            LevSel_NoCheat:
00004C1A 0C40 0097                  		cmpi.w	#$97,d0		; is sound $80-$94 being played?
00004C1E 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00004C20 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00004C24 65B0                       		bcs.s	LevelSelect	; if yes, branch
00004C26                            
00004C26                            LevSel_PlaySnd:
00004C26 6100 C6A6                  		bsr.w	PlaySound_Special
00004C2A 60AA                       		bra.s	LevelSelect
00004C2C                            ; ===========================================================================
00004C2C                            
00004C2C                            LevSel_Ending:				; XREF: LevelSelect
00004C2C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00004C32 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00004C38 4E75                       		rts	
00004C3A                            ; ===========================================================================
00004C3A                            
00004C3A                            LevSel_Credits:				; XREF: LevelSelect
00004C3A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00004C40 103C 0091                  		move.b	#$91,d0
00004C44 6100 C688                  		bsr.w	PlaySound_Special ; play credits music
00004C48 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00004C4E 4E75                       		rts	
00004C50                            ; ===========================================================================
00004C50                            
00004C50                            LevSel_Level_SS:			; XREF: LevelSelect
00004C50 D040                       		add.w	d0,d0
00004C52 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00004C56 6B00 FF7E                  		bmi.w	LevelSelect
00004C5A 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00004C5E 6600                       		bne.s	LevSel_Level	; if not, branch
00004C60 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004C66 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00004C6A 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C70 7000                       		moveq	#0,d0
00004C72 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C76 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C7A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C7E 4E75                       		rts	
00004C80                            ; ===========================================================================
00004C80                            
00004C80                            LevSel_Level:				; XREF: LevSel_Level_SS
00004C80 0240 3FFF                  		andi.w	#$3FFF,d0
00004C84 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00004C88                            
00004C88                            PlayLevel:				; XREF: ROM:00003246j ...
00004C88 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C8E 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C94 7000                       		moveq	#0,d0
00004C96 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004C9A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C9E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004CA2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004CA6 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00004CAA 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00004CAE 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00004CB2 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00004CB6 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00004CBA 103C 00E0                  		move.b	#$E0,d0
00004CBE 6100 C60E                  		bsr.w	PlaySound_Special ; fade out music
00004CC2 4E75                       		rts	
00004CC4                            ; ===========================================================================
00004CC4                            ; ---------------------------------------------------------------------------
00004CC4                            ; Level	select - level pointers
00004CC4                            ; ---------------------------------------------------------------------------
00004CC4                            LSelectPointers:
00004CC4                            		incbin	misc\ls_point.bin
00004CEE                            		even
00004CEE                            ; ---------------------------------------------------------------------------
00004CEE                            ; Level	select codes
00004CEE                            ; ---------------------------------------------------------------------------
00004CEE                            LevelSelectCode_J:
00004CEE                            		incbin	misc\ls_jcode.bin
00004CF4                            		even
00004CF4                            
00004CF4                            LevelSelectCode_US:
00004CF4                            		incbin	misc\ls_ucode.bin
00004CFA                            		even
00004CFA                            ; ===========================================================================
00004CFA                            
00004CFA                            ; ---------------------------------------------------------------------------
00004CFA                            ; Demo mode
00004CFA                            ; ---------------------------------------------------------------------------
00004CFA                            
00004CFA                            Demo:					; XREF: TitleScreen
00004CFA 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004D00                            
00004D00                            loc_33B6:				; XREF: loc_33E4
00004D00 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004D06 6100 DE42                  		bsr.w	DelayProgram
00004D0A 6100 0000                  		bsr.w	DeformBgLayer
00004D0E 6100 CDB0                  		bsr.w	PalCycle_Load
00004D12 6100 C8DE                  		bsr.w	RunPLC_RAM
00004D16 3038 D008                  		move.w	($FFFFD008).w,d0
00004D1A 5440                       		addq.w	#2,d0
00004D1C 31C0 D008                  		move.w	d0,($FFFFD008).w
00004D20 0C40 1C00                  		cmpi.w	#$1C00,d0
00004D24 6500                       		bcs.s	loc_33E4
00004D26 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00004D2C 4E75                       		rts	
00004D2E                            ; ===========================================================================
00004D2E                            
00004D2E                            loc_33E4:				; XREF: Demo
00004D2E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00004D34 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
00004D38 4A78 F614                  		tst.w	($FFFFF614).w
00004D3C 6600 FFC2                  		bne.w	loc_33B6
00004D40 103C 00E0                  		move.b	#$E0,d0
00004D44 6100 C588                  		bsr.w	PlaySound_Special ; fade out music
00004D48 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00004D4C 0240 0007                  		andi.w	#7,d0
00004D50 D040                       		add.w	d0,d0
00004D52 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004D56 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004D5A 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004D5E 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00004D64 6500                       		bcs.s	loc_3422	; if yes, branch
00004D66 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004D6C                            
00004D6C                            loc_3422:
00004D6C 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00004D72 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00004D78 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004D7C 6600                       		bne.s	Demo_Level	; if not, branch
00004D7E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004D84 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004D88 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004D8C                            
00004D8C                            Demo_Level:
00004D8C 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004D92 7000                       		moveq	#0,d0
00004D94 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004D98 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004D9C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004DA0 4E75                       		rts	
00004DA2                            ; ===========================================================================
00004DA2                            ; ---------------------------------------------------------------------------
00004DA2                            ; Levels used in demos
00004DA2                            ; ---------------------------------------------------------------------------
00004DA2                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004DAA                            		even
00004DAA                            
00004DAA                            ; ---------------------------------------------------------------------------
00004DAA                            ; Subroutine to	change what you're selecting in the level select
00004DAA                            ; ---------------------------------------------------------------------------
00004DAA                            
00004DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DAA                            
00004DAA                            
00004DAA                            LevSelControls:				; XREF: LevelSelect
00004DAA 1238 F605                  		move.b	($FFFFF605).w,d1
00004DAE 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004DB2 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004DB4 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004DB8 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004DBA                            
00004DBA                            LevSel_UpDown:
00004DBA 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004DC0 1238 F604                  		move.b	($FFFFF604).w,d1
00004DC4 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00004DC8 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004DCA 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004DCE 0801 0000                  		btst	#0,d1		; is up	pressed?
00004DD2 6700                       		beq.s	LevSel_Down	; if not, branch
00004DD4 5340                       		subq.w	#1,d0		; move up 1 selection
00004DD6 6400                       		bcc.s	LevSel_Down
00004DD8 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004DDA                            
00004DDA                            LevSel_Down:
00004DDA 0801 0001                  		btst	#1,d1		; is down pressed?
00004DDE 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004DE0 5240                       		addq.w	#1,d0		; move down 1 selection
00004DE2 0C40 0015                  		cmpi.w	#$15,d0
00004DE6 6500                       		bcs.s	LevSel_Refresh
00004DE8 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004DEA                            
00004DEA                            LevSel_Refresh:
00004DEA 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00004DEE 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004DF2 4E75                       		rts	
00004DF4                            ; ===========================================================================
00004DF4                            
00004DF4                            LevSel_SndTest:				; XREF: LevSelControls
00004DF4 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00004DFA 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004DFC 1238 F605                  		move.b	($FFFFF605).w,d1
00004E00 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00004E04 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004E06 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004E0A 0801 0002                  		btst	#2,d1		; is left pressed?
00004E0E 6700                       		beq.s	LevSel_Right	; if not, branch
00004E10 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004E12 6400                       		bcc.s	LevSel_Right
00004E14 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004E16                            
00004E16                            LevSel_Right:
00004E16 0801 0003                  		btst	#3,d1		; is right pressed?
00004E1A 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004E1C 5240                       		addq.w	#1,d0		; add 1	to sound test
00004E1E 0C40 0050                  		cmpi.w	#$50,d0
00004E22 6500                       		bcs.s	LevSel_Refresh2
00004E24 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004E26                            
00004E26                            LevSel_Refresh2:
00004E26 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00004E2A 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004E2E                            
00004E2E                            LevSel_NoMove:
00004E2E 4E75                       		rts	
00004E30                            ; End of function LevSelControls
00004E30                            
00004E30                            ; ---------------------------------------------------------------------------
00004E30                            ; Subroutine to load level select text
00004E30                            ; ---------------------------------------------------------------------------
00004E30                            
00004E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E30                            
00004E30                            
00004E30                            LevSelTextLoad:				; XREF: TitleScreen
00004E30 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E36 4DF9 00C0 0000             		lea	($C00000).l,a6
00004E3C 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00004E42 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004E46 7214                       		moveq	#$14,d1		; number of lines of text
00004E48                            
00004E48                            loc_34FE:				; XREF: LevSelTextLoad+26j
00004E48 2D44 0004                  		move.l	d4,4(a6)
00004E4C 6100 0000                  		bsr.w	LevSel_ChgLine
00004E50 0684 0080 0000             		addi.l	#$800000,d4
00004E56 51C9 FFF0                  		dbf	d1,loc_34FE
00004E5A 7000                       		moveq	#0,d0
00004E5C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004E60 3200                       		move.w	d0,d1
00004E62 283C 6210 0003             		move.l	#$62100003,d4
00004E68 EF48                       		lsl.w	#7,d0
00004E6A 4840                       		swap	d0
00004E6C D880                       		add.l	d0,d4
00004E6E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E74 E749                       		lsl.w	#3,d1
00004E76 3001                       		move.w	d1,d0
00004E78 D241                       		add.w	d1,d1
00004E7A D240                       		add.w	d0,d1
00004E7C D2C1                       		adda.w	d1,a1
00004E7E 363C C680                  		move.w	#$C680,d3
00004E82 2D44 0004                  		move.l	d4,4(a6)
00004E86 6100 0000                  		bsr.w	LevSel_ChgLine
00004E8A 363C E680                  		move.w	#$E680,d3
00004E8E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004E94 6600                       		bne.s	loc_3550
00004E96 363C C680                  		move.w	#$C680,d3
00004E9A                            
00004E9A                            loc_3550:
00004E9A 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00004EA4 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004EA8 0640 0080                  		addi.w	#$80,d0
00004EAC 1400                       		move.b	d0,d2
00004EAE E808                       		lsr.b	#4,d0
00004EB0 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EB4 1002                       		move.b	d2,d0
00004EB6 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EBA 4E75                       		rts	
00004EBC                            ; End of function LevSelTextLoad
00004EBC                            
00004EBC                            
00004EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EBC                            
00004EBC                            
00004EBC                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004EBC 0240 000F                  		andi.w	#$F,d0
00004EC0 0C00 000A                  		cmpi.b	#$A,d0
00004EC4 6500                       		bcs.s	loc_3580
00004EC6 5E00                       		addi.b	#7,d0
00004EC8                            
00004EC8                            loc_3580:
00004EC8 D043                       		add.w	d3,d0
00004ECA 3C80                       		move.w	d0,(a6)
00004ECC 4E75                       		rts	
00004ECE                            ; End of function LevSel_ChgSnd
00004ECE                            
00004ECE                            
00004ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004ECE                            
00004ECE                            
00004ECE                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004ECE 7417                       		moveq	#$17,d2		; number of characters per line
00004ED0                            
00004ED0                            loc_3588:
00004ED0 7000                       		moveq	#0,d0
00004ED2 1019                       		move.b	(a1)+,d0
00004ED4 6A00                       		bpl.s	loc_3598
00004ED6 3CBC 0000                  		move.w	#0,(a6)
00004EDA 51CA FFF4                  		dbf	d2,loc_3588
00004EDE 4E75                       		rts	
00004EE0                            ; ===========================================================================
00004EE0                            
00004EE0                            loc_3598:				; XREF: LevSel_ChgLine
00004EE0 D043                       		add.w	d3,d0
00004EE2 3C80                       		move.w	d0,(a6)
00004EE4 51CA FFEA                  		dbf	d2,loc_3588
00004EE8 4E75                       		rts	
00004EEA                            ; End of function LevSel_ChgLine
00004EEA                            
00004EEA                            ; ===========================================================================
00004EEA                            ; ---------------------------------------------------------------------------
00004EEA                            ; Level	select menu text
00004EEA                            ; ---------------------------------------------------------------------------
00004EEA                            LevelMenuText:	incbin	misc\menutext.bin
000050E2                            		even
000050E2                            ; ---------------------------------------------------------------------------
000050E2                            ; Music	playlist
000050E2                            ; ---------------------------------------------------------------------------
000050E2                            MusicList_Levels:
000050E2 8383 8383                  		dc.b $83, $83, $83, $83
000050E6 8282 8286                  		dc.b $82, $82, $82, $86
000050EA 8197 8197                  		dc.b $81, $97, $81, $97
000050EE 8484 8484                  		dc.b $84, $84, $84, $84
000050F2 8585 8585                  		dc.b $85, $85, $85, $85
000050F6 8686 8D86                  		dc.b $86, $86, $8D, $86
000050FA                            		even
000050FA                            MusicList_SpecialStages:
000050FA 8989 8989 8989             		dc.b $89, $89, $89, $89, $89, $89
00005100                            		even
00005100                            MusicList_Credits:
00005100 9191                       		dc.b $91, $91
00005102                            		even
00005102                            MusicList_Endings:
00005102 8B8B                       		dc.b $8B, $8B
00005104                            		even
00005104                            MusicList_Bosses:
00005104 8C8C 8C8C 8C8C             		dc.b $8C, $8C, $8C, $8C, $8C, $8C
0000510A                            		even
0000510A                            ; ===========================================================================
0000510A                            
0000510A                            ; ---------------------------------------------------------------------------
0000510A                            ; Level
0000510A                            ; ---------------------------------------------------------------------------
0000510A                            
0000510A                            Level:					; XREF: GameModeArray
0000510A 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005110 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005114 6B00                       		bmi.s	loc_37B6
00005116 103C 00E0                  		move.b	#$E0,d0
0000511A 6100 C1B2                  		bsr.w	PlaySound_Special ; fade out music
0000511E                            
0000511E                            loc_37B6:
0000511E 6100 C4C4                  		bsr.w	ClearPLC
00005122 6100 CEC4                  		bsr.w	Pal_FadeFrom
00005126 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000512A 6B00                       		bmi.s	Level_ClrRam
0000512C 46FC 2700                  		move	#$2700,sr
00005130 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000513A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005140 6100 C31C                  		bsr.w	NemDec
00005144 46FC 2300                  		move	#$2300,sr
00005148 7000                       		moveq	#0,d0
0000514A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000514E E948                       		lsl.w	#4,d0
00005150 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00005156 45F2 0000                  		lea	(a2,d0.w),a2
0000515A 7000                       		moveq	#0,d0
0000515C 1012                       		move.b	(a2),d0
0000515E 6700                       		beq.s	loc_37FC
00005160 6100 C424                  		bsr.w	LoadPLC		; load level patterns
00005164                            
00005164                            loc_37FC:
00005164 7001                       		moveq	#1,d0
00005166 6100 C41E                  		bsr.w	LoadPLC		; load standard	patterns
0000516A                            
0000516A                            Level_ClrRam:
0000516A 43F8 D000                  		lea	($FFFFD000).w,a1
0000516E 7000                       		moveq	#0,d0
00005170 323C 07FF                  		move.w	#$7FF,d1
00005174                            
00005174                            Level_ClrObjRam:
00005174 22C0                       		move.l	d0,(a1)+
00005176 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000517A                            
0000517A 43F8 F628                  		lea	($FFFFF628).w,a1
0000517E 7000                       		moveq	#0,d0
00005180 323C 0015                  		move.w	#$15,d1
00005184                            
00005184                            Level_ClrVars:
00005184 22C0                       		move.l	d0,(a1)+
00005186 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000518A                            
0000518A 43F8 F700                  		lea	($FFFFF700).w,a1
0000518E 7000                       		moveq	#0,d0
00005190 323C 003F                  		move.w	#$3F,d1
00005194                            
00005194                            Level_ClrVars2:
00005194 22C0                       		move.l	d0,(a1)+
00005196 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000519A                            
0000519A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000519E 7000                       		moveq	#0,d0
000051A0 323C 0047                  		move.w	#$47,d1
000051A4                            
000051A4                            Level_ClrVars3:
000051A4 22C0                       		move.l	d0,(a1)+
000051A6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000051AA                            
000051AA 46FC 2700                  		move	#$2700,sr
000051AE 6100 C010                  		bsr.w	ClearScreen
000051B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000051B8 3CBC 8B03                  		move.w	#$8B03,(a6)
000051BC 3CBC 8230                  		move.w	#$8230,(a6)
000051C0 3CBC 8407                  		move.w	#$8407,(a6)
000051C4 3CBC 857C                  		move.w	#$857C,(a6)
000051C8 3CBC 9001                  		move.w	#$9001,(a6)
000051CC 3CBC 8004                  		move.w	#$8004,(a6)
000051D0 3CBC 8720                  		move.w	#$8720,(a6)
000051D4 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000051DA 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051DE                            		
000051DE 4278 C800                  		clr.w	($FFFFC800).w
000051E2 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000051EA                            		
000051EA 11FC 0000 FFBC             		move.b	#0,($FFFFFFBC).w				; Clear sonic drowned flag
000051F0                            		
000051F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000051F6 6600                       		bne.s	Level_LoadPal	; if not, branch
000051F8 3CBC 8014                  		move.w	#$8014,(a6)
000051FC 7000                       		moveq	#0,d0
000051FE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00005202 D040                       		add.w	d0,d0
00005204 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000520A 3031 0000                  		move.w	(a1,d0.w),d0
0000520E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00005212 31C0 F648                  		move.w	d0,($FFFFF648).w
00005216 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000521A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000521E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00005222 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00005228                            
00005228                            Level_LoadPal:
00005228 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000522E 46FC 2300                  		move	#$2300,sr
00005232 7003                       		moveq	#3,d0
00005234 6100 D07C                  		bsr.w	PalLoad2	; load Sonic's Palette line
00005238 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000523E 6600                       		bne.s	Level_GetBgm	; if not, branch
00005240 700F                       		moveq	#$F,d0		; Palette number	$0F (LZ)
00005242 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00005248 6600                       		bne.s	Level_WaterPal	; if not, branch
0000524A 7010                       		moveq	#$10,d0		; Palette number	$10 (SBZ3)
0000524C                            
0000524C                            Level_WaterPal:
0000524C 6100 D07C                  		bsr.w	PalLoad3_Water	; load underwater Palette (see d0)
00005250 4A38 FE30                  		tst.b	($FFFFFE30).w
00005254 6700                       		beq.s	Level_GetBgm
00005256 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000525C                            
0000525C                            Level_GetBgm:
0000525C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005260 6B00 0000                  		bmi.w	loc_3946
00005264                            		
00005264 7000                       		moveq	#0,d0
00005266 3238 FE10                  		move.w	($FFFFFE10).w,d1
0000526A E419                       		ror.b	#2,d1
0000526C EC49                       		lsr.w	#6,d1
0000526E 43F9 0000 50E2             		lea	(MusicList_Levels).l,a1
00005274 1031 1000                  		move.b	(a1,d1.w),d0		; get d0-th entry from the playlist
00005278 11C0 FFFE                  		move.b	d0,($FFFFFFFE).w	; put music number in RAM for later use
0000527C 4EB9 0000 0000             		jsr	CtrlLevelMusic
00005282                            		
00005282 11FC 0034 D080             		move.b	#$34,($FFFFD080).w 	; load title	card object
00005288                            
00005288                            Level_TtlCard:
00005288 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000528E 6100 D8BA                  		bsr.w	DelayProgram
00005292 4EB9 0000 0000             		jsr	ObjectsLoad
00005298 4EB9 0000 0000             		jsr	BuildSprites
0000529E 6100 C352                  		bsr.w	RunPLC_RAM
000052A2 3038 D108                  		move.w	($FFFFD108).w,d0
000052A6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000052AA 66DC                       		bne.s	Level_TtlCard	; if not, branch
000052AC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000052B0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000052B2 4EB9 0000 0000             		jsr	Hud_Base
000052B8                            
000052B8                            loc_3946:
000052B8 7003                       		moveq	#3,d0
000052BA 6100 CFDA                  		bsr.w	PalLoad1	; load Sonic's Palette line
000052BE 6100 0000                  		bsr.w	LevelSizeLoad
000052C2 6100 0000                  		bsr.w	DeformBgLayer
000052C6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000052CC 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and Palettes
000052D0 6100 0000                  		bsr.w	LoadTilesFromStart
000052D4 4EB9 0000 0000             		jsr	FloorLog_Unk
000052DA 6100 0000                  		bsr.w	ColIndexLoad
000052DE 6100 0000                  		bsr.w	LZWaterEffects
000052E2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000052E8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000052EC 6B00                       		bmi.s	Level_ChkDebug
000052EE 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000052F4                            
000052F4                            Level_ChkDebug:
000052F4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000052F8 6700                       		beq.s	Level_ChkWater	; if not, branch
000052FA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00005300 6700                       		beq.s	Level_ChkWater	; if not, branch
00005302 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005308                            
00005308                            Level_ChkWater:
00005308 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000530E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00005314 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000531A 6600                       		bne.s	Level_LoadObj	; if not, branch
0000531C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00005322 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00005328 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000532E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00005334                            
00005334                            Level_LoadObj:
00005334 4EB9 0000 0000             		jsr	ObjPosLoad
0000533A 4EB9 0000 0000             		jsr	ObjectsLoad
00005340 4EB9 0000 0000             		jsr	BuildSprites
00005346 7000                       		moveq	#0,d0
00005348 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000534C 6600                       		bne.s	loc_39E8	; if yes, branch
0000534E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005352 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005356 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000535A                            
0000535A                            loc_39E8:
0000535A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000535E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00005362 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00005366 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000536A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000536E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005372 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005376 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000537A 6100 0000                  		bsr.w	OscillateNumInit
0000537E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005384 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000538A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00005390 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005396 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000539C 7000                       		moveq	#0,d0
0000539E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000053A2 E548                       		lsl.w	#2,d0
000053A4 2271 0000                  		movea.l	(a1,d0.w),a1
000053A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000053AC 6A00                       		bpl.s	Level_Demo	; if yes, branch
000053AE 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000053B4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000053B8 5340                       		subq.w	#1,d0
000053BA E548                       		lsl.w	#2,d0
000053BC 2271 0000                  		movea.l	(a1,d0.w),a1
000053C0                            
000053C0                            Level_Demo:
000053C0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000053C6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000053CA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000053D0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000053D4 6A00                       		bpl.s	Level_ChkWaterPal
000053D6 31FC 021C F614             		move.w	#540,($FFFFF614).w
000053DC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000053E2 6600                       		bne.s	Level_ChkWaterPal
000053E4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000053EA                            
000053EA                            Level_ChkWaterPal:
000053EA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000053F0 6600                       		bne.s	Level_Delay	; if not, branch
000053F2 700B                       		moveq	#$B,d0		; Palette $0B (LZ underwater)
000053F4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000053FA 6600                       		bne.s	Level_WaterPal2	; if not, branch
000053FC 700D                       		moveq	#$D,d0		; Palette $0D (SBZ3 underwater)
000053FE                            
000053FE                            Level_WaterPal2:
000053FE 6100 CEE6                  		bsr.w	PalLoad4_Water
00005402                            
00005402                            Level_Delay:
00005402 323C 0003                  		move.w	#3,d1
00005406                            
00005406                            Level_DelayLoop:
00005406 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000540C 6100 D73C                  		bsr.w	DelayProgram
00005410 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00005414                            
00005414 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000541A 6100 CB1C                  		bsr.w	Pal_FadeTo2
0000541E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005422 6B00                       		bmi.s	Level_ClrCardArt
00005424 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00005428 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000542C 5838 D124                  		addq.b	#4,($FFFFD124).w
00005430 5838 D164                  		addq.b	#4,($FFFFD164).w
00005434 6000                       		bra.s	Level_StartGame
00005436                            ; ===========================================================================
00005436                            
00005436                            Level_ClrCardArt:
00005436 7002                       		moveq	#2,d0
00005438 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
0000543E 7000                       		moveq	#0,d0
00005440 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005444 0640 0015                  		addi.w	#$15,d0
00005448 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000544E                            
0000544E                            Level_StartGame:
0000544E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00005454                            
00005454                            ; ---------------------------------------------------------------------------
00005454                            ; Main level loop (when	all title card and loading sequences are finished)
00005454                            ; ---------------------------------------------------------------------------
00005454                            
00005454                            Level_MainLoop:
00005454 6100 BE9C                  		bsr.w	PauseGame
00005458 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000545E 6100 D6EA                  		bsr.w	DelayProgram
00005462 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00005466 6100 0000                  		bsr.w	MoveSonicInDemo
0000546A 6100 0000                  		bsr.w	LZWaterEffects
0000546E 4EB9 0000 0000             		jsr	ObjectsLoad
00005474 4A78 FE08                  		tst.w	($FFFFFE08).w
00005478 6600                       		bne.s	loc_3B10
0000547A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005480 6400                       		bcc.s	loc_3B14
00005482                            
00005482                            loc_3B10:
00005482 6100 0000                  		bsr.w	DeformBgLayer
00005486                            
00005486                            loc_3B14:
00005486 4EB9 0000 0000             		jsr	BuildSprites
0000548C 4EB9 0000 0000             		jsr	ObjPosLoad
00005492 6100 C62C                  		bsr.w	PalCycle_Load
00005496 6100 C15A                  		bsr.w	RunPLC_RAM
0000549A 6100 0000                  		bsr.w	OscillateNumDo
0000549E 6100 0000                  		bsr.w	ChangeRingFrame
000054A2 6100 0000                  		bsr.w	SignpostArtLoad
000054A6 4EB9 0000 0000             		jsr	CtrlLevelMusic
000054AC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054B2 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000054B4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000054B8 6600 FC50                  		bne.w	Level		; if yes, branch
000054BC 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000054C2 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000054C6 4E75                       		rts	
000054C8                            ; ===========================================================================
000054C8                            
000054C8                            Level_ChkDemo:				; XREF: Level_MainLoop
000054C8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054CC 6600                       		bne.s	Level_EndDemo	; if yes, branch
000054CE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000054D2 6700                       		beq.s	Level_EndDemo	; if not, branch
000054D4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054DA 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000054DE 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054E4 4E75                       		rts	
000054E6                            ; ===========================================================================
000054E6                            
000054E6                            Level_EndDemo:				; XREF: Level_ChkDemo
000054E6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000054EC 6600                       		bne.s	loc_3B88	; if not, branch
000054EE 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054F8 6A00                       		bpl.s	loc_3B88	; if yes, branch
000054FA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00005500                            
00005500                            loc_3B88:
00005500 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00005506 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000550C 4278 F794                  		clr.w	($FFFFF794).w
00005510                            
00005510                            loc_3B98:
00005510 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005516 6100 D632                  		bsr.w	DelayProgram
0000551A 6100 0000                  		bsr.w	MoveSonicInDemo
0000551E 4EB9 0000 0000             		jsr	ObjectsLoad
00005524 4EB9 0000 0000             		jsr	BuildSprites
0000552A 4EB9 0000 0000             		jsr	ObjPosLoad
00005530 5378 F794                  		subq.w	#1,($FFFFF794).w
00005534 6A00                       		bpl.s	loc_3BC8
00005536 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000553C 6100 CAD0                  		bsr.w	Pal_FadeOut
00005540                            
00005540                            loc_3BC8:
00005540 4A78 F614                  		tst.w	($FFFFF614).w
00005544 66CA                       		bne.s	loc_3B98
00005546 4E75                       		rts	
00005548                            ; ===========================================================================
00005548                            ; ---------------------------------------------------------------------------
00005548                            ; Subroutine to	do special water effects in Labyrinth Zone
00005548                            ; ---------------------------------------------------------------------------
00005548                            
00005548                            LZWaterEffects:				; XREF: Level
00005548 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000554E 6600                       		bne.s	locret_3C28	; if not, branch
00005550 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005556 6400                       		bcc.s	LZMoveWater
00005558 6100 0000                  		bsr.w	LZWindTunnels
0000555C 6100 0000                  		bsr.w	LZWaterSlides
00005560 6100 0000                  		bsr.w	LZDynamicWater
00005564                            
00005564                            LZMoveWater:
00005564 4238 F64E                  		clr.b	($FFFFF64E).w
00005568 7000                       		moveq	#0,d0
0000556A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000556E E248                       		lsr.w	#1,d0
00005570 D078 F648                  		add.w	($FFFFF648).w,d0
00005574 31C0 F646                  		move.w	d0,($FFFFF646).w
00005578 3038 F646                  		move.w	($FFFFF646).w,d0
0000557C 9078 F704                  		sub.w	($FFFFF704).w,d0
00005580 6400                       		bcc.s	loc_3C1A
00005582 4A40                       		tst.w	d0
00005584 6A00                       		bpl.s	loc_3C1A
00005586 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000558C 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00005592                            
00005592                            loc_3C1A:
00005592 0C40 00DF                  		cmpi.w	#$DF,d0
00005596 6500                       		bcs.s	loc_3C24
00005598 303C 00DF                  		move.w	#$DF,d0
0000559C                            
0000559C                            loc_3C24:
0000559C 11C0 F625                  		move.b	d0,($FFFFF625).w
000055A0                            
000055A0                            locret_3C28:
000055A0 4E75                       		rts	
000055A2                            ; ===========================================================================
000055A2                            ; ---------------------------------------------------------------------------
000055A2                            ; Labyrinth default water heights
000055A2                            ; ---------------------------------------------------------------------------
000055A2                            WaterHeight:	incbin	misc\lz_heigh.bin
000055AA                            		even
000055AA                            ; ===========================================================================
000055AA                            
000055AA                            ; ---------------------------------------------------------------------------
000055AA                            ; Labyrinth dynamic water routines
000055AA                            ; ---------------------------------------------------------------------------
000055AA                            
000055AA                            LZDynamicWater:				; XREF: LZWaterEffects
000055AA 7000                       		moveq	#0,d0
000055AC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000055B0 D040                       		add.w	d0,d0
000055B2 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000055B6 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000055BA 7200                       		moveq	#0,d1
000055BC 1238 F64C                  		move.b	($FFFFF64C).w,d1
000055C0 3038 F64A                  		move.w	($FFFFF64A).w,d0
000055C4 9078 F648                  		sub.w	($FFFFF648).w,d0
000055C8 6700                       		beq.s	locret_3C5A
000055CA 6400                       		bcc.s	loc_3C56
000055CC 4441                       		neg.w	d1
000055CE                            
000055CE                            loc_3C56:
000055CE D378 F648                  		add.w	d1,($FFFFF648).w
000055D2                            
000055D2                            locret_3C5A:
000055D2 4E75                       		rts	
000055D4                            ; ===========================================================================
000055D4 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000055D6 0000                       		dc.w DynWater_LZ2-DynWater_Index
000055D8 0000                       		dc.w DynWater_LZ3-DynWater_Index
000055DA 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000055DC                            ; ===========================================================================
000055DC                            
000055DC                            DynWater_LZ1:				; XREF: DynWater_Index
000055DC 3038 F700                  		move.w	($FFFFF700).w,d0
000055E0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000055E4 6600                       		bne.s	loc_3CD0
000055E6 323C 00B8                  		move.w	#$B8,d1
000055EA 0C40 0600                  		cmpi.w	#$600,d0
000055EE 6500                       		bcs.s	loc_3CB4
000055F0 323C 0108                  		move.w	#$108,d1
000055F4 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000055FA 6500                       		bcs.s	loc_3CBA
000055FC 0C40 0C00                  		cmpi.w	#$C00,d0
00005600 6500                       		bcs.s	loc_3CB4
00005602 323C 0318                  		move.w	#$318,d1
00005606 0C40 1080                  		cmpi.w	#$1080,d0
0000560A 6500                       		bcs.s	loc_3CB4
0000560C 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00005612 323C 05C8                  		move.w	#$5C8,d1
00005616 0C40 1380                  		cmpi.w	#$1380,d0
0000561A 6500                       		bcs.s	loc_3CB4
0000561C 323C 03A8                  		move.w	#$3A8,d1
00005620 B278 F648                  		cmp.w	($FFFFF648).w,d1
00005624 6600                       		bne.s	loc_3CB4
00005626 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000562C                            
0000562C                            loc_3CB4:
0000562C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005630 4E75                       		rts	
00005632                            ; ===========================================================================
00005632                            
00005632                            loc_3CBA:				; XREF: DynWater_LZ1
00005632 0C40 0C80                  		cmpi.w	#$C80,d0
00005636 65F4                       		bcs.s	loc_3CB4
00005638 323C 00E8                  		move.w	#$E8,d1
0000563C 0C40 1500                  		cmpi.w	#$1500,d0
00005640 65EA                       		bcs.s	loc_3CB4
00005642 323C 0108                  		move.w	#$108,d1
00005646 60E4                       		bra.s	loc_3CB4
00005648                            ; ===========================================================================
00005648                            
00005648                            loc_3CD0:				; XREF: DynWater_LZ1
00005648 5302                       		subq.b	#1,d2
0000564A 6600                       		bne.s	locret_3CF4
0000564C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00005652 6400                       		bcc.s	locret_3CF4
00005654 323C 03A8                  		move.w	#$3A8,d1
00005658 0C40 1300                  		cmpi.w	#$1300,d0
0000565C 6500                       		bcs.s	loc_3CF0
0000565E 323C 0108                  		move.w	#$108,d1
00005662 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00005668                            
00005668                            loc_3CF0:
00005668 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000566C                            
0000566C                            locret_3CF4:
0000566C 4E75                       		rts	
0000566E                            ; ===========================================================================
0000566E                            
0000566E                            DynWater_LZ2:				; XREF: DynWater_Index
0000566E 3038 F700                  		move.w	($FFFFF700).w,d0
00005672 323C 0328                  		move.w	#$328,d1
00005676 0C40 0500                  		cmpi.w	#$500,d0
0000567A 6500                       		bcs.s	loc_3D12
0000567C 323C 03C8                  		move.w	#$3C8,d1
00005680 0C40 0B00                  		cmpi.w	#$B00,d0
00005684 6500                       		bcs.s	loc_3D12
00005686 323C 0428                  		move.w	#$428,d1
0000568A                            
0000568A                            loc_3D12:
0000568A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000568E 4E75                       		rts	
00005690                            ; ===========================================================================
00005690                            
00005690                            DynWater_LZ3:				; XREF: DynWater_Index
00005690 3038 F700                  		move.w	($FFFFF700).w,d0
00005694 1438 F64D                  		move.b	($FFFFF64D).w,d2
00005698 6600                       		bne.s	loc_3D5E
0000569A 323C 0900                  		move.w	#$900,d1
0000569E 0C40 0600                  		cmpi.w	#$600,d0
000056A2 6500                       		bcs.s	loc_3D54
000056A4 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000056AA 6500                       		bcs.s	loc_3D54
000056AC 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056B2 6400                       		bcc.s	loc_3D54
000056B4 323C 04C8                  		move.w	#$4C8,d1
000056B8 21FC 0000 0000 A400        		move.l	#Level_LZ3,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
000056C0 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000056C6 303C 00B7                  		move.w	#$B7,d0
000056CA 6100 BC02                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000056CE                            
000056CE                            loc_3D54:
000056CE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000056D2 31C1 F648                  		move.w	d1,($FFFFF648).w
000056D6 4E75                       		rts	
000056D8                            ; ===========================================================================
000056D8                            
000056D8                            loc_3D5E:				; XREF: DynWater_LZ3
000056D8 5302                       		subq.b	#1,d2
000056DA 6600                       		bne.s	loc_3DA8
000056DC 323C 04C8                  		move.w	#$4C8,d1
000056E0 0C40 0770                  		cmpi.w	#$770,d0
000056E4 6500                       		bcs.s	loc_3DA2
000056E6 323C 0308                  		move.w	#$308,d1
000056EA 0C40 1400                  		cmpi.w	#$1400,d0
000056EE 6500                       		bcs.s	loc_3DA2
000056F0 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000056F6 6700                       		beq.s	loc_3D8E
000056F8 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056FE 6400                       		bcc.s	loc_3D8E
00005700 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00005706 6400                       		bcc.s	loc_3DA2
00005708                            
00005708                            loc_3D8E:
00005708 323C 0508                  		move.w	#$508,d1
0000570C 31C1 F648                  		move.w	d1,($FFFFF648).w
00005710 0C40 1770                  		cmpi.w	#$1770,d0
00005714 6500                       		bcs.s	loc_3DA2
00005716 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000571C                            
0000571C                            loc_3DA2:
0000571C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005720 4E75                       		rts	
00005722                            ; ===========================================================================
00005722                            
00005722                            loc_3DA8:
00005722 5302                       		subq.b	#1,d2
00005724 6600                       		bne.s	loc_3DD2
00005726 323C 0508                  		move.w	#$508,d1
0000572A 0C40 1860                  		cmpi.w	#$1860,d0
0000572E 6500                       		bcs.s	loc_3DCC
00005730 323C 0188                  		move.w	#$188,d1
00005734 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005738 6400                       		bcc.s	loc_3DC6
0000573A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000573E 6600                       		bne.s	loc_3DCC
00005740                            
00005740                            loc_3DC6:
00005740 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00005746                            
00005746                            loc_3DCC:
00005746 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000574A 4E75                       		rts	
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            loc_3DD2:
0000574C 5302                       		subq.b	#1,d2
0000574E 6600                       		bne.s	loc_3E0E
00005750 323C 0188                  		move.w	#$188,d1
00005754 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005758 6500                       		bcs.s	loc_3E04
0000575A 323C 0900                  		move.w	#$900,d1
0000575E 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005762 6500                       		bcs.s	loc_3E04
00005764 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000576A 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00005770 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00005776 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000577C 4E75                       		rts	
0000577E                            ; ===========================================================================
0000577E                            
0000577E                            loc_3E04:
0000577E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005782 31C1 F648                  		move.w	d1,($FFFFF648).w
00005786 4E75                       		rts	
00005788                            ; ===========================================================================
00005788                            
00005788                            loc_3E0E:
00005788 0C40 1E00                  		cmpi.w	#$1E00,d0
0000578C 6500                       		bcs.s	locret_3E1A
0000578E 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00005794                            
00005794                            locret_3E1A:
00005794 4E75                       		rts	
00005796                            ; ===========================================================================
00005796                            
00005796                            DynWater_SBZ3:				; XREF: DynWater_Index
00005796 323C 0228                  		move.w	#$228,d1
0000579A 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000057A0 6500                       		bcs.s	loc_3E2C
000057A2 323C 04C8                  		move.w	#$4C8,d1
000057A6                            
000057A6                            loc_3E2C:
000057A6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000057AA 4E75                       		rts
000057AC                            
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Labyrinth Zone "wind tunnels"	subroutine
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            
000057AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057AC                            
000057AC                            
000057AC                            LZWindTunnels:				; XREF: LZWaterEffects
000057AC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000057B0 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000057B4 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000057BA 7000                       		moveq	#0,d0
000057BC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000057C0 E748                       		lsl.w	#3,d0
000057C2 D4C0                       		adda.w	d0,a2
000057C4 7200                       		moveq	#0,d1
000057C6 4A38 FE11                  		tst.b	($FFFFFE11).w
000057CA 6600                       		bne.s	loc_3E56
000057CC 7201                       		moveq	#1,d1
000057CE 514A                       		subq.w	#8,a2
000057D0                            
000057D0                            loc_3E56:
000057D0 43F8 D000                  		lea	($FFFFD000).w,a1
000057D4                            
000057D4                            LZWind_Loop:
000057D4 3029 0008                  		move.w	8(a1),d0
000057D8 B052                       		cmp.w	(a2),d0
000057DA 6500 0000                  		bcs.w	loc_3EF4
000057DE B06A 0004                  		cmp.w	4(a2),d0
000057E2 6400 0000                  		bcc.w	loc_3EF4
000057E6 3429 000C                  		move.w	$C(a1),d2
000057EA B46A 0002                  		cmp.w	2(a2),d2
000057EE 6500                       		bcs.s	loc_3EF4
000057F0 B46A 0006                  		cmp.w	6(a2),d2
000057F4 6400                       		bcc.s	loc_3EF4
000057F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000057FA 0200 003F                  		andi.b	#$3F,d0
000057FE 6600                       		bne.s	loc_3E90
00005800 303C 00D0                  		move.w	#$D0,d0
00005804 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000580A                            
0000580A                            loc_3E90:
0000580A 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000580E 6600 0000                  		bne.w	locret_3F0A
00005812 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00005818 6400                       		bcc.s	loc_3F06
0000581A 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00005820 0440 0080                  		subi.w	#$80,d0
00005824 B052                       		cmp.w	(a2),d0
00005826 6400                       		bcc.s	LZWind_Move
00005828 7002                       		moveq	#2,d0
0000582A 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00005830 6600                       		bne.s	loc_3EBA
00005832 4440                       		neg.w	d0
00005834                            
00005834                            loc_3EBA:
00005834 D169 000C                  		add.w	d0,$C(a1)
00005838                            
00005838                            LZWind_Move:
00005838 5869 0008                  		addq.w	#4,8(a1)
0000583C 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00005842 337C 0000 0012             		move.w	#0,$12(a1)
00005848 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000584E 08E9 0001 0022             		bset	#1,$22(a1)
00005854 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000585A 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000585C 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00005860                            
00005860                            LZWind_MoveDown:
00005860 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00005866 6700                       		beq.s	locret_3EF2	; if not, branch
00005868 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000586C                            
0000586C                            locret_3EF2:
0000586C 4E75                       		rts	
0000586E                            ; ===========================================================================
0000586E                            
0000586E                            loc_3EF4:				; XREF: LZWindTunnels
0000586E 504A                       		addq.w	#8,a2
00005870 51C9 FF62                  		dbf	d1,LZWind_Loop
00005874 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00005878 6700                       		beq.s	locret_3F0A
0000587A 137C 0000 001C             		move.b	#0,$1C(a1)
00005880                            
00005880                            loc_3F06:
00005880 4238 F7C7                  		clr.b	($FFFFF7C7).w
00005884                            
00005884                            locret_3F0A:
00005884 4E75                       		rts	
00005886                            ; End of function LZWindTunnels
00005886                            
00005886                            ; ===========================================================================
00005886 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000588E 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000058A0 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000058AE                            					; XREF: LZWindTunnels
000058AE                            		even
000058AE                            
000058AE                            ; ---------------------------------------------------------------------------
000058AE                            ; Labyrinth Zone water slide subroutine
000058AE                            ; ---------------------------------------------------------------------------
000058AE                            
000058AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058AE                            
000058AE                            
000058AE                            LZWaterSlides:				; XREF: LZWaterEffects
000058AE 43F8 D000                  		lea	($FFFFD000).w,a1
000058B2 0829 0001 0022             		btst	#1,$22(a1)
000058B8 6600                       		bne.s	loc_3F6A
000058BA 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
000058BE 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
000058C2 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
000058C6 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
000058C8 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
000058CA 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
000058CE D041                       		add.w	d1,d0					; MJ: add together
000058D0 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
000058D4 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
000058D8 45FA 0000                  		lea	Slide_Chunks(pc),a2
000058DC 7200                       		moveq	#$00,d1					; MJ: clear d2
000058DE 6000 0000                  		bra	LZLoadChunk				; MJ: continue
000058E2                            
000058E2                            LZFindChunk:
000058E2 B002                       		cmp.b	d2,d0					; MJ: does the chunk match?
000058E4 6700 0000                  		beq	LZSlide_Move				; MJ: if so, branch
000058E8 5241                       		addq.w	#$01,d1					; MJ: increase counter
000058EA                            
000058EA                            LZLoadChunk:
000058EA 141A                       		move.b	(a2)+,d2				; MJ: load chunk ID
000058EC 66F4                       		bne	LZFindChunk				; MJ: if it's not null, branch
000058EE                            
000058EE                            loc_3F6A:
000058EE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000058F2 6700                       		beq.s	locret_3F7A
000058F4 337C 0005 003E             		move.w	#5,$3E(a1)
000058FA 4238 F7CA                  		clr.b	($FFFFF7CA).w
000058FE                            
000058FE                            locret_3F7A:
000058FE 4E75                       		rts	
00005900                            ; ===========================================================================
00005900                            
00005900                            LZSlide_Move:				; XREF: LZWaterSlides
00005900 0C41 0003                  		cmpi.w	#3,d1
00005904 6400                       		bcc.s	loc_3F84
00005906 4E71                       		nop	
00005908                            
00005908                            loc_3F84:
00005908 08A9 0000 0022             		bclr	#0,$22(a1)
0000590E 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00005912 1340 0014                  		move.b	d0,$14(a1)
00005916 6A00                       		bpl.s	loc_3F9A
00005918 08E9 0000 0022             		bset	#0,$22(a1)
0000591E                            
0000591E                            loc_3F9A:
0000591E 4229 0015                  		clr.b	$15(a1)
00005922 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00005928 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000592E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005932 0200 001F                  		andi.b	#$1F,d0
00005936 6600                       		bne.s	locret_3FBE
00005938 303C 00D0                  		move.w	#$D0,d0
0000593C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play water sound
00005942                            
00005942                            locret_3FBE:
00005942 4E75                       		rts	
00005944                            ; End of function LZWaterSlides
00005944                            
00005944                            ; ===========================================================================
00005944                            ; ---------------------------------------------------------------------------
00005944 0506 090A                  Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
00005948 FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
0000594C 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
00005950 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
00005954 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
00005958 17                         		dc.b	$17
00005959 00                         		dc.b	$00					; MJ: End marker
0000595A                            		even
0000595A                            ; ---------------------------------------------------------------------------
0000595A 0A0A 0A0A                  Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
0000595E F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
00005962 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
00005966 F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
0000596A F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
0000596E F5                         		dc.b	$F5
00005970 00                         		even
00005970                            ; ---------------------------------------------------------------------------
00005970                            ; ===========================================================================
00005970                            ; ---------------------------------------------------------------------------
00005970                            ; Subroutine to	move Sonic in demo mode
00005970                            ; ---------------------------------------------------------------------------
00005970                            
00005970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005970                            
00005970                            
00005970                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00005970 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005974 6600                       		bne.s	MoveDemo_On	; if yes, branch
00005976 4E75                       		rts	
00005978                            ; ===========================================================================
00005978                            
00005978                            ; This is an unused subroutine for recording a demo
00005978                            
00005978                            MoveDemo_Record:
00005978 43F9 0008 0000             		lea	($80000).l,a1
0000597E 3038 F790                  		move.w	($FFFFF790).w,d0
00005982 D2C0                       		adda.w	d0,a1
00005984 1038 F604                  		move.b	($FFFFF604).w,d0
00005988 B011                       		cmp.b	(a1),d0
0000598A 6600                       		bne.s	loc_3FFA
0000598C 5229 0001                  		addq.b	#1,1(a1)
00005990 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005996 6700                       		beq.s	loc_3FFA
00005998 4E75                       		rts	
0000599A                            ; ===========================================================================
0000599A                            
0000599A                            loc_3FFA:				; XREF: MoveDemo_Record
0000599A 1340 0002                  		move.b	d0,2(a1)
0000599E 137C 0000 0003             		move.b	#0,3(a1)
000059A4 5478 F790                  		addq.w	#2,($FFFFF790).w
000059A8 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000059AE 4E75                       		rts	
000059B0                            ; ===========================================================================
000059B0                            
000059B0                            MoveDemo_On:				; XREF: MoveSonicInDemo
000059B0 4A38 F604                  		tst.b	($FFFFF604).w
000059B4 6A00                       		bpl.s	loc_4022
000059B6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059BA 6B00                       		bmi.s	loc_4022
000059BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000059C2                            
000059C2                            loc_4022:
000059C2 43F9 0000 0000             		lea	(Demo_Index).l,a1
000059C8 7000                       		moveq	#0,d0
000059CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000059CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000059D4 6600                       		bne.s	loc_4038
000059D6 7006                       		moveq	#6,d0
000059D8                            
000059D8                            loc_4038:
000059D8 E548                       		lsl.w	#2,d0
000059DA 2271 0000                  		movea.l	(a1,d0.w),a1
000059DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059E2 6A00                       		bpl.s	loc_4056
000059E4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000059EA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000059EE 5340                       		subq.w	#1,d0
000059F0 E548                       		lsl.w	#2,d0
000059F2 2271 0000                  		movea.l	(a1,d0.w),a1
000059F6                            
000059F6                            loc_4056:
000059F6 3038 F790                  		move.w	($FFFFF790).w,d0
000059FA D2C0                       		adda.w	d0,a1
000059FC 1011                       		move.b	(a1),d0
000059FE 41F8 F604                  		lea	($FFFFF604).w,a0
00005A02 1200                       		move.b	d0,d1
00005A04 1428 FFFE                  		move.b	-2(a0),d2
00005A08 B500                       		eor.b	d2,d0
00005A0A 10C1                       		move.b	d1,(a0)+
00005A0C C001                       		and.b	d1,d0
00005A0E 10C0                       		move.b	d0,(a0)+
00005A10 5338 F792                  		subq.b	#1,($FFFFF792).w
00005A14 6400                       		bcc.s	locret_407E
00005A16 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00005A1C 5478 F790                  		addq.w	#2,($FFFFF790).w
00005A20                            
00005A20                            locret_407E:
00005A20 4E75                       		rts	
00005A22                            ; End of function MoveSonicInDemo
00005A22                            
00005A22                            ; ===========================================================================
00005A22                            ; ---------------------------------------------------------------------------
00005A22                            ; Demo sequence	pointers
00005A22                            ; ---------------------------------------------------------------------------
00005A22                            Demo_Index:
00005A22                            	include "_inc\Demo pointers for intro.asm"
00005A22                            ; ---------------------------------------------------------------------------
00005A22                            ; Demo sequence	pointers
00005A22                            ; ---------------------------------------------------------------------------
00005A22 0000 0000                  	dc.l Demo_GHZ
00005A26 0000 0000                  	dc.l Demo_GHZ
00005A2A 0000 0000                  	dc.l Demo_MZ
00005A2E 0000 0000                  	dc.l Demo_MZ
00005A32 0000 0000                  	dc.l Demo_SYZ
00005A36 0000 0000                  	dc.l Demo_SYZ
00005A3A 0000 0000                  	dc.l Demo_SS
00005A3E 0000 0000                  	dc.l Demo_SS
00005A3E 0000 0000                  	dc.l Demo_SS
00005A42                            
00005A42                            Demo_EndIndex:
00005A42                            	include "_inc\Demo pointers for ending.asm"
00005A42                            ; ---------------------------------------------------------------------------
00005A42                            ; Demo (ending) sequence pointers
00005A42                            ; ---------------------------------------------------------------------------
00005A42 0000 0000                  	dc.l Demo_EndGHZ1
00005A46 0000 0000                  	dc.l Demo_EndMZ
00005A4A 0000 0000                  	dc.l Demo_EndSYZ
00005A4E 0000 0000                  	dc.l Demo_EndLZ
00005A52 0000 0000                  	dc.l Demo_EndSLZ
00005A56 0000 0000                  	dc.l Demo_EndSBZ1
00005A5A 0000 0000                  	dc.l Demo_EndSBZ2
00005A5E 0000 0000                  	dc.l Demo_EndGHZ2
00005A5E 0000 0000                  	dc.l Demo_EndGHZ2
00005A62                            
00005A62 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005A72 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005A82 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005A92                            		even
00005A92                            
00005A92                            ; ---------------------------------------------------------------------------
00005A92                            ; Collision index loading subroutine
00005A92                            ; ---------------------------------------------------------------------------
00005A92                            
00005A92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A92                            
00005A92                            
00005A92                            ColIndexLoad:				; XREF: Level
00005A92 7000                       		moveq	#0,d0
00005A94 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A98 E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
00005A9A 21FB 0000 FFD0             		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
00005AA0 5840                       		add.w	#$04,d0					; MJ: increase to next location
00005AA2 21FB 0000 FFD4             		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
00005AA8 4E75                       		rts	
00005AAA                            ; End of function ColIndexLoad
00005AAA                            
00005AAA                            ; ===========================================================================
00005AAA                            ; ---------------------------------------------------------------------------
00005AAA                            ; Collision index pointers
00005AAA                            ; ---------------------------------------------------------------------------
00005AAA                            ColPointers:
00005AAA                            	include "_inc\Collision index pointers.asm"
00005AAA                            ; ---------------------------------------------------------------------------
00005AAA                            ; Collision index pointers
00005AAA                            ; ---------------------------------------------------------------------------
00005AAA 0000 0000                  	dc.l Col_GHZ_1
00005AAE 0000 0000                  	dc.l Col_GHZ_2
00005AB2 0000 0000                  	dc.l Col_LZ_1
00005AB6 0000 0000                  	dc.l Col_LZ_2
00005ABA 0000 0000                  	dc.l Col_MZ_1
00005ABE 0000 0000                  	dc.l Col_MZ_2
00005AC2 0000 0000                  	dc.l Col_SLZ_1
00005AC6 0000 0000                  	dc.l Col_SLZ_2
00005ACA 0000 0000                  	dc.l Col_SYZ_1
00005ACE 0000 0000                  	dc.l Col_SYZ_2
00005AD2 0000 0000                  	dc.l Col_SBZ_1
00005AD6 0000 0000                  	dc.l Col_SBZ_2
00005ADA 0000 0000                  	dc.l Col_GHZ_1
00005ADE 0000 0000                  	dc.l Col_GHZ_2
00005AE2 0000 0000                  	dc.l Col_GHZ_1
00005AE6 0000 0000                  	dc.l Col_GHZ_2
00005AE6 0000 0000                  	dc.l Col_GHZ_2
00005AEA                            
00005AEA                            ; ---------------------------------------------------------------------------
00005AEA                            ; Oscillating number subroutine
00005AEA                            ; ---------------------------------------------------------------------------
00005AEA                            
00005AEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AEA                            
00005AEA                            
00005AEA                            OscillateNumInit:			; XREF: Level
00005AEA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005AEE 45F9 0000 0000             		lea	(Osc_Data).l,a2
00005AF4 7220                       		moveq	#$20,d1
00005AF6                            
00005AF6                            Osc_Loop:
00005AF6 32DA                       		move.w	(a2)+,(a1)+
00005AF8 51C9 FFFC                  		dbf	d1,Osc_Loop
00005AFC 4E75                       		rts	
00005AFE                            ; End of function OscillateNumInit
00005AFE                            
00005AFE                            ; ===========================================================================
00005AFE 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00005B02 0000 0080                  		dc.w 0,	$80
00005B06 0000 0080                  		dc.w 0,	$80
00005B0A 0000 0080                  		dc.w 0,	$80
00005B0E 0000 0080                  		dc.w 0,	$80
00005B12 0000 0080                  		dc.w 0,	$80
00005B16 0000 0080                  		dc.w 0,	$80
00005B1A 0000 0080                  		dc.w 0,	$80
00005B1E 0000 0080                  		dc.w 0,	$80
00005B22 0000 50F0                  		dc.w 0,	$50F0
00005B26 011E 2080                  		dc.w $11E, $2080
00005B2A 00B4 3080                  		dc.w $B4, $3080
00005B2E 010E 5080                  		dc.w $10E, $5080
00005B32 01C2 7080                  		dc.w $1C2, $7080
00005B36 0276 0080                  		dc.w $276, $80
00005B3A 0000 0080                  		dc.w 0,	$80
00005B3E 0000                       		dc.w 0
00005B40                            		even
00005B40                            
00005B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B40                            
00005B40                            
00005B40                            OscillateNumDo:				; XREF: Level
00005B40 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B46 6400                       		bcc.s	locret_41C4
00005B48 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005B4C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00005B52 3619                       		move.w	(a1)+,d3
00005B54 720F                       		moveq	#$F,d1
00005B56                            
00005B56                            loc_4184:
00005B56 341A                       		move.w	(a2)+,d2
00005B58 381A                       		move.w	(a2)+,d4
00005B5A 0303                       		btst	d1,d3
00005B5C 6600                       		bne.s	loc_41A4
00005B5E 3029 0002                  		move.w	2(a1),d0
00005B62 D042                       		add.w	d2,d0
00005B64 3340 0002                  		move.w	d0,2(a1)
00005B68 D151                       		add.w	d0,0(a1)
00005B6A B811                       		cmp.b	0(a1),d4
00005B6C 6200                       		bhi.s	loc_41BA
00005B6E 03C3                       		bset	d1,d3
00005B70 6000                       		bra.s	loc_41BA
00005B72                            ; ===========================================================================
00005B72                            
00005B72                            loc_41A4:				; XREF: OscillateNumDo
00005B72 3029 0002                  		move.w	2(a1),d0
00005B76 9042                       		sub.w	d2,d0
00005B78 3340 0002                  		move.w	d0,2(a1)
00005B7C D151                       		add.w	d0,0(a1)
00005B7E B811                       		cmp.b	0(a1),d4
00005B80 6300                       		bls.s	loc_41BA
00005B82 0383                       		bclr	d1,d3
00005B84                            
00005B84                            loc_41BA:
00005B84 5849                       		addq.w	#4,a1
00005B86 51C9 FFCE                  		dbf	d1,loc_4184
00005B8A 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00005B8E                            
00005B8E                            locret_41C4:
00005B8E 4E75                       		rts	
00005B90                            ; End of function OscillateNumDo
00005B90                            
00005B90                            ; ===========================================================================
00005B90 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00005B94 0002 0018                  		dc.w 2,	$18
00005B98 0002 0020                  		dc.w 2,	$20
00005B9C 0002 0030                  		dc.w 2,	$30
00005BA0 0004 0020                  		dc.w 4,	$20
00005BA4 0008 0008                  		dc.w 8,	8
00005BA8 0008 0040                  		dc.w 8,	$40
00005BAC 0004 0040                  		dc.w 4,	$40
00005BB0 0002 0050                  		dc.w 2,	$50
00005BB4 0002 0050                  		dc.w 2,	$50
00005BB8 0002 0020                  		dc.w 2,	$20
00005BBC 0003 0030                  		dc.w 3,	$30
00005BC0 0005 0050                  		dc.w 5,	$50
00005BC4 0007 0070                  		dc.w 7,	$70
00005BC8 0002 0010                  		dc.w 2,	$10
00005BCC 0002 0010                  		dc.w 2,	$10
00005BD0                            		even
00005BD0                            
00005BD0                            ; ---------------------------------------------------------------------------
00005BD0                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00005BD0                            ; ---------------------------------------------------------------------------
00005BD0                            
00005BD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BD0                            
00005BD0                            
00005BD0                            ChangeRingFrame:			; XREF: Level
00005BD0 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00005BD4 6A00                       		bpl.s	loc_421C
00005BD6 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00005BDC 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00005BE0 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00005BE6                            
00005BE6                            loc_421C:
00005BE6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00005BEA 6A00                       		bpl.s	loc_4232
00005BEC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005BF2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00005BF6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00005BFC                            
00005BFC                            loc_4232:
00005BFC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00005C00 6A00                       		bpl.s	loc_4250
00005C02 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00005C08 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00005C0C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005C12 6500                       		bcs.s	loc_4250
00005C14 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00005C1A                            
00005C1A                            loc_4250:
00005C1A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00005C1E 6700                       		beq.s	locret_4272
00005C20 7000                       		moveq	#0,d0
00005C22 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00005C26 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00005C2A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00005C2E EF58                       		rol.w	#7,d0
00005C30 0240 0003                  		andi.w	#3,d0
00005C34 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00005C38 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00005C3C                            
00005C3C                            locret_4272:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function ChangeRingFrame
00005C3E                            
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; End-of-act signpost pattern loading subroutine
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            
00005C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C3E                            
00005C3E                            
00005C3E                            SignpostArtLoad:			; XREF: Level
00005C3E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005C42 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00005C46 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00005C4C 6700                       		beq.s	Signpost_Exit	; if yes, branch
00005C4E 3038 F700                  		move.w	($FFFFF700).w,d0
00005C52 3238 F72A                  		move.w	($FFFFF72A).w,d1
00005C56 0441 0100                  		subi.w	#$100,d1
00005C5A B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005C5C 6D00                       		blt.s	Signpost_Exit	; if not, branch
00005C5E 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005C62 6700                       		beq.s	Signpost_Exit
00005C64 B278 F728                  		cmp.w	($FFFFF728).w,d1
00005C68 6700                       		beq.s	Signpost_Exit
00005C6A 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00005C6E 7012                       		moveq	#$12,d0
00005C70 6000 B946                  		bra.w	LoadPLC2	; load signpost	patterns
00005C74                            ; ===========================================================================
00005C74                            
00005C74                            Signpost_Exit:
00005C74 4E75                       		rts	
00005C76                            ; End of function SignpostArtLoad
00005C76                            
00005C76                            ; ===========================================================================
00005C76                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005CF6                            Demo_MZ:	incbin	demodata\i_mz.bin
00005E26                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005EA6                            Demo_SS:	incbin	demodata\i_ss.bin
00005FA6                            ; ===========================================================================
00005FA6                            
00005FA6                            ; ---------------------------------------------------------------------------
00005FA6                            ; Special Stage
00005FA6                            ; ---------------------------------------------------------------------------
00005FA6                            
00005FA6                            SpecialStage:				; XREF: GameModeArray
00005FA6 303C 00CA                  		move.w	#$CA,d0
00005FAA 6100 B322                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005FAE 6100 C166                  		bsr.w	Pal_MakeFlash
00005FB2 46FC 2700                  		move	#$2700,sr
00005FB6 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FBC 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FC0 3CBC 8004                  		move.w	#$8004,(a6)
00005FC4 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005FCA 3CBC 9011                  		move.w	#$9011,(a6)
00005FCE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005FD2 0200 00BF                  		andi.b	#$BF,d0
00005FD6 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FDC 6100 B1E2                  		bsr.w	ClearScreen
00005FE0 46FC 2300                  		move	#$2300,sr
00005FE4 4BF9 00C0 0004             		lea	($C00004).l,a5
00005FEA 3ABC 8F01                  		move.w	#$8F01,(a5)
00005FEE 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005FF4 3ABC 9780                  		move.w	#$9780,(a5)
00005FF8 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005FFE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00006006                            
00006006                            loc_463C:
00006006 3215                       		move.w	(a5),d1
00006008 0801 0001                  		btst	#1,d1
0000600C 66F8                       		bne.s	loc_463C
0000600E 3ABC 8F02                  		move.w	#$8F02,(a5)
00006012 6100 0000                  		bsr.w	SS_BGLoad
00006016 7014                       		moveq	#$14,d0
00006018 6100 B6D8                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000601C 43F8 D000                  		lea	($FFFFD000).w,a1
00006020 7000                       		moveq	#0,d0
00006022 323C 07FF                  		move.w	#$7FF,d1
00006026                            
00006026                            SS_ClrObjRam:
00006026 22C0                       		move.l	d0,(a1)+
00006028 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000602C                            
0000602C 43F8 F700                  		lea	($FFFFF700).w,a1
00006030 7000                       		moveq	#0,d0
00006032 323C 003F                  		move.w	#$3F,d1
00006036                            
00006036                            SS_ClrRam:
00006036 22C0                       		move.l	d0,(a1)+
00006038 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000603C                            
0000603C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006040 7000                       		moveq	#0,d0
00006042 323C 0027                  		move.w	#$27,d1
00006046                            
00006046                            SS_ClrRam2:
00006046 22C0                       		move.l	d0,(a1)+
00006048 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000604C                            
0000604C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00006050 7000                       		moveq	#0,d0
00006052 323C 007F                  		move.w	#$7F,d1
00006056                            
00006056                            SS_ClrNemRam:
00006056 22C0                       		move.l	d0,(a1)+
00006058 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000605C                            
0000605C 4238 F64E                  		clr.b	($FFFFF64E).w
00006060 4278 FE02                  		clr.w	($FFFFFE02).w
00006064 700A                       		moveq	#$A,d0
00006066 6100 C22E                  		bsr.w	PalLoad1	; load special stage Palette
0000606A 4EB9 0000 0000             		jsr	SS_Load
00006070 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00006078 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00006080 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00006086 6100 0000                  		bsr.w	PalCycle_SS
0000608A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
0000608E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00006094                            		
00006094 7000                       		moveq	#0,d0
00006096 1038 FE16                  		move.b	($FFFFFE16).w,d0
0000609A 4A00                       		tst.b	d0
0000609C 6700                       		beq.s	SS_Num_Not_Zero
0000609E 103C 0006                  		move.b	#6,d0
000060A2                            
000060A2                            SS_Num_Not_Zero:
000060A2 5340                       		subq.w	#1,d0
000060A4                            
000060A4 43F9 0000 50FA             		lea	(MusicList_SpecialStages).l,a1 ; load Music Playlist for Special Stages
000060AA 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
000060AE 6100 B216                  		bsr.w	PlaySound	; play special stage BG	music
000060B2                            		
000060B2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000060B8 43F9 0000 5A22             		lea	(Demo_Index).l,a1
000060BE 7006                       		moveq	#6,d0
000060C0 E548                       		lsl.w	#2,d0
000060C2 2271 0000                  		movea.l	(a1,d0.w),a1
000060C6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000060CC 5338 F792                  		subq.b	#1,($FFFFF792).w
000060D0 4278 FE20                  		clr.w	($FFFFFE20).w
000060D4 4238 FE1B                  		clr.b	($FFFFFE1B).w
000060D8 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000060DE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000060E4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000060E8 6700                       		beq.s	SS_NoDebug	; if not, branch
000060EA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000060F0 6700                       		beq.s	SS_NoDebug	; if not, branch
000060F2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000060F8                            
000060F8                            SS_NoDebug:
000060F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000060FC 0000 0040                  		ori.b	#$40,d0
00006100 33C0 00C0 0004             		move.w	d0,($C00004).l
00006106 6100 BF62                  		bsr.w	Pal_MakeWhite
0000610A                            
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Main Special Stage loop
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            
0000610A                            SS_MainLoop:
0000610A 6100 B1E6                  		bsr.w	PauseGame
0000610E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00006114 6100 CA34                  		bsr.w	DelayProgram
00006118 6100 F856                  		bsr.w	MoveSonicInDemo
0000611C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006122 4EB9 0000 0000             		jsr	ObjectsLoad
00006128 4EB9 0000 0000             		jsr	BuildSprites
0000612E 4EB9 0000 0000             		jsr	SS_ShowLayout
00006134 6100 0000                  		bsr.w	SS_BGAnimate
00006138 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000613C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000613E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00006142 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00006146                            
00006146                            SS_ChkEnd:
00006146 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000614C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00006150                            
00006150 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006154 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00006158 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000615E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00006164 6500                       		bcs.s	SS_End		; if not, branch
00006166 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000616A                            
0000616A                            SS_End:
0000616A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00006170 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006176 4278 F794                  		clr.w	($FFFFF794).w
0000617A                            
0000617A                            SS_EndLoop:
0000617A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00006180 6100 C9C8                  		bsr.w	DelayProgram
00006184 6100 F7EA                  		bsr.w	MoveSonicInDemo
00006188 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000618E 4EB9 0000 0000             		jsr	ObjectsLoad
00006194 4EB9 0000 0000             		jsr	BuildSprites
0000619A 4EB9 0000 0000             		jsr	SS_ShowLayout
000061A0 6100 0000                  		bsr.w	SS_BGAnimate
000061A4 5378 F794                  		subq.w	#1,($FFFFF794).w
000061A8 6A00                       		bpl.s	loc_47D4
000061AA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000061B0 6100 BF84                  		bsr.w	Pal_ToWhite
000061B4                            
000061B4                            loc_47D4:
000061B4 4A78 F614                  		tst.w	($FFFFF614).w
000061B8 66C0                       		bne.s	SS_EndLoop
000061BA                            
000061BA 46FC 2700                  		move	#$2700,sr
000061BE 4DF9 00C0 0004             		lea	($C00004).l,a6
000061C4 3CBC 8230                  		move.w	#$8230,(a6)
000061C8 3CBC 8407                  		move.w	#$8407,(a6)
000061CC 3CBC 9001                  		move.w	#$9001,(a6)
000061D0 6100 AFEE                  		bsr.w	ClearScreen
000061D4 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000061DE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000061E4 6100 B278                  		bsr.w	NemDec
000061E8 4EB9 0000 0000             		jsr	Hud_Base
000061EE 4278 C800                  		clr.w	($FFFFC800).w
000061F2 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000061FA 46FC 2300                  		move	#$2300,sr
000061FE 7011                       		moveq	#$11,d0
00006200 6100 C0B0                  		bsr.w	PalLoad2	; load results screen Palette
00006204 7000                       		moveq	#0,d0
00006206 6100 B3B0                  		bsr.w	LoadPLC2
0000620A 701B                       		moveq	#$1B,d0
0000620C 6100 B378                  		bsr.w	LoadPLC		; load results screen patterns
00006210 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00006216 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000621C 3038 FE20                  		move.w	($FFFFFE20).w,d0
00006220 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00006224 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00006228 303C 008E                  		move.w	#$8E,d0
0000622C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play end-of-level music
00006232 43F8 D000                  		lea	($FFFFD000).w,a1
00006236 7000                       		moveq	#0,d0
00006238 323C 07FF                  		move.w	#$7FF,d1
0000623C                            
0000623C                            SS_EndClrObjRam:
0000623C 22C0                       		move.l	d0,(a1)+
0000623E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00006242                            
00006242 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00006248                            
00006248                            SS_NormalExit:
00006248 6100 B0A8                  		bsr.w	PauseGame
0000624C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00006252 6100 C8F6                  		bsr.w	DelayProgram
00006256 4EB9 0000 0000             		jsr	ObjectsLoad
0000625C 4EB9 0000 0000             		jsr	BuildSprites
00006262 6100 B38E                  		bsr.w	RunPLC_RAM
00006266 4A78 FE02                  		tst.w	($FFFFFE02).w
0000626A 67DC                       		beq.s	SS_NormalExit
0000626C 4AB8 F680                  		tst.l	($FFFFF680).w
00006270 66D6                       		bne.s	SS_NormalExit
00006272 303C 00CA                  		move.w	#$CA,d0
00006276 6100 B056                  		bsr.w	PlaySound_Special ; play special stage exit sound
0000627A 6100 BE9A                  		bsr.w	Pal_MakeFlash
0000627E 4E75                       		rts	
00006280                            ; ===========================================================================
00006280                            
00006280                            SS_ToSegaScreen:
00006280 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00006286 4E75                       		rts
00006288                            
00006288                            ; ---------------------------------------------------------------------------
00006288                            ; Special stage	background loading subroutine
00006288                            ; ---------------------------------------------------------------------------
00006288                            
00006288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006288                            
00006288                            
00006288                            SS_BGLoad:				; XREF: SpecialStage
00006288 43F9 00FF 0000             		lea	($FF0000).l,a1
0000628E 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00006294 303C 4051                  		move.w	#$4051,d0
00006298 6100 B48A                  		bsr.w	EniDec
0000629C 263C 5000 0001             		move.l	#$50000001,d3
000062A2 45F9 00FF 0080             		lea	($FF0080).l,a2
000062A8 7E06                       		moveq	#6,d7
000062AA                            
000062AA                            loc_48BE:
000062AA 2003                       		move.l	d3,d0
000062AC 7C03                       		moveq	#3,d6
000062AE 7800                       		moveq	#0,d4
000062B0 0C47 0003                  		cmpi.w	#3,d7
000062B4 6400                       		bcc.s	loc_48CC
000062B6 7801                       		moveq	#1,d4
000062B8                            
000062B8                            loc_48CC:
000062B8 7A07                       		moveq	#7,d5
000062BA                            
000062BA                            loc_48CE:
000062BA 224A                       		movea.l	a2,a1
000062BC 0A04 0001                  		eori.b	#1,d4
000062C0 6600                       		bne.s	loc_48E2
000062C2 0C47 0006                  		cmpi.w	#6,d7
000062C6 6600                       		bne.s	loc_48F2
000062C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000062CE                            
000062CE                            loc_48E2:
000062CE 48E7 F800                  		movem.l	d0-d4,-(sp)
000062D2 7207                       		moveq	#7,d1
000062D4 7407                       		moveq	#7,d2
000062D6 6100 B092                  		bsr.w	ShowVDPGraphics
000062DA 4CDF 001F                  		movem.l	(sp)+,d0-d4
000062DE                            
000062DE                            loc_48F2:
000062DE 0680 0010 0000             		addi.l	#$100000,d0
000062E4 51CD FFD4                  		dbf	d5,loc_48CE
000062E8 0680 0380 0000             		addi.l	#$3800000,d0
000062EE 0A04 0001                  		eori.b	#1,d4
000062F2 51CE FFC4                  		dbf	d6,loc_48CC
000062F6 0683 1000 0000             		addi.l	#$10000000,d3
000062FC 6A00                       		bpl.s	loc_491C
000062FE 4843                       		swap	d3
00006300 0683 0000 C000             		addi.l	#$C000,d3
00006306 4843                       		swap	d3
00006308                            
00006308                            loc_491C:
00006308 D4FC 0080                  		adda.w	#$80,a2
0000630C 51CF FF9C                  		dbf	d7,loc_48BE
00006310 43F9 00FF 0000             		lea	($FF0000).l,a1
00006316 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000631C 303C 4000                  		move.w	#$4000,d0
00006320 6100 B402                  		bsr.w	EniDec
00006324 43F9 00FF 0000             		lea	($FF0000).l,a1
0000632A 203C 4000 0003             		move.l	#$40000003,d0
00006330 723F                       		moveq	#$3F,d1
00006332 741F                       		moveq	#$1F,d2
00006334 6100 B034                  		bsr.w	ShowVDPGraphics
00006338 43F9 00FF 0000             		lea	($FF0000).l,a1
0000633E 203C 5000 0003             		move.l	#$50000003,d0
00006344 723F                       		moveq	#$3F,d1
00006346 743F                       		moveq	#$3F,d2
00006348 6100 B020                  		bsr.w	ShowVDPGraphics
0000634C 4E75                       		rts	
0000634E                            ; End of function SS_BGLoad
0000634E                            
0000634E                            ; ---------------------------------------------------------------------------
0000634E                            ; Palette cycling routine - special stage
0000634E                            ; ---------------------------------------------------------------------------
0000634E                            
0000634E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000634E                            
0000634E                            
0000634E                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000634E 4A78 F63A                  		tst.w	($FFFFF63A).w
00006352 6600                       		bne.s	locret_49E6
00006354 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00006358 6A00                       		bpl.s	locret_49E6
0000635A 4DF9 00C0 0004             		lea	($C00004).l,a6
00006360 3038 F79A                  		move.w	($FFFFF79A).w,d0
00006364 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00006368 0240 001F                  		andi.w	#$1F,d0
0000636C E548                       		lsl.w	#2,d0
0000636E 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00006374 D0C0                       		adda.w	d0,a0
00006376 1018                       		move.b	(a0)+,d0
00006378 6A00                       		bpl.s	loc_4992
0000637A 303C 01FF                  		move.w	#$1FF,d0
0000637E                            
0000637E                            loc_4992:
0000637E 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00006382 7000                       		moveq	#0,d0
00006384 1018                       		move.b	(a0)+,d0
00006386 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000638A 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00006390 43F1 0000                  		lea	(a1,d0.w),a1
00006394 303C 8200                  		move.w	#-$7E00,d0
00006398 1019                       		move.b	(a1)+,d0
0000639A 3C80                       		move.w	d0,(a6)
0000639C 11D1 F616                  		move.b	(a1),($FFFFF616).w
000063A0 303C 8400                  		move.w	#-$7C00,d0
000063A4 1018                       		move.b	(a0)+,d0
000063A6 3C80                       		move.w	d0,(a6)
000063A8 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000063B2 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000063BA 7000                       		moveq	#0,d0
000063BC 1018                       		move.b	(a0)+,d0
000063BE 6B00                       		bmi.s	loc_49E8
000063C0 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000063C6 D2C0                       		adda.w	d0,a1
000063C8 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000063CC 24D9                       		move.l	(a1)+,(a2)+
000063CE 24D9                       		move.l	(a1)+,(a2)+
000063D0 24D9                       		move.l	(a1)+,(a2)+
000063D2                            
000063D2                            locret_49E6:
000063D2 4E75                       		rts	
000063D4                            ; ===========================================================================
000063D4                            
000063D4                            loc_49E8:				; XREF: PalCycle_SS
000063D4 3238 F79E                  		move.w	($FFFFF79E).w,d1
000063D8 0C40 008A                  		cmpi.w	#$8A,d0
000063DC 6500                       		bcs.s	loc_49F4
000063DE 5241                       		addq.w	#1,d1
000063E0                            
000063E0                            loc_49F4:
000063E0 C2FC 002A                  		mulu.w	#$2A,d1
000063E4 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000063EA D2C1                       		adda.w	d1,a1
000063EC 0240 007F                  		andi.w	#$7F,d0
000063F0 0880 0000                  		bclr	#0,d0
000063F4 6700                       		beq.s	loc_4A18
000063F6 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000063FA 24D1                       		move.l	(a1),(a2)+
000063FC 24E9 0004                  		move.l	4(a1),(a2)+
00006400 24E9 0008                  		move.l	8(a1),(a2)+
00006404                            
00006404                            loc_4A18:
00006404 D2FC 000C                  		adda.w	#$C,a1
00006408 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000640C 0C40 000A                  		cmpi.w	#$A,d0
00006410 6500                       		bcs.s	loc_4A2E
00006412 0440 000A                  		subi.w	#$A,d0
00006416 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000641A                            
0000641A                            loc_4A2E:
0000641A 3200                       		move.w	d0,d1
0000641C D040                       		add.w	d0,d0
0000641E D041                       		add.w	d1,d0
00006420 D2C0                       		adda.w	d0,a1
00006422 24D9                       		move.l	(a1)+,(a2)+
00006424 34D9                       		move.w	(a1)+,(a2)+
00006426 4E75                       		rts	
00006428                            ; End of function PalCycle_SS
00006428                            
00006428                            ; ===========================================================================
00006428 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00006438                            					; XREF: PalCycle_SS
00006438 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00006448 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00006458 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00006468 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00006478 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00006488 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00006498 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000064A8                            		even
000064A8 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
000064B6                            					; XREF: PalCycle_SS
000064B6                            		even
000064B6                            
000064B6                            Pal_SSCyc1:	incbin	Palette\c_ss_1.bin
000064FE                            		even
000064FE                            Pal_SSCyc2:	incbin	Palette\c_ss_2.bin
000065D0                            		even
000065D0                            
000065D0                            ; ---------------------------------------------------------------------------
000065D0                            ; Subroutine to	make the special stage background animated
000065D0                            ; ---------------------------------------------------------------------------
000065D0                            
000065D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065D0                            
000065D0                            
000065D0                            SS_BGAnimate:				; XREF: SpecialStage
000065D0 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000065D4 6600                       		bne.s	loc_4BF6
000065D6 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000065DC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065E2                            
000065E2                            loc_4BF6:
000065E2 0C40 0008                  		cmpi.w	#8,d0
000065E6 6400                       		bcc.s	loc_4C4E
000065E8 0C40 0006                  		cmpi.w	#6,d0
000065EC 6600                       		bne.s	loc_4C10
000065EE 5278 F718                  		addq.w	#1,($FFFFF718).w
000065F2 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000065F6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065FC                            
000065FC                            loc_4C10:
000065FC 7000                       		moveq	#0,d0
000065FE 3038 F708                  		move.w	($FFFFF708).w,d0
00006602 4440                       		neg.w	d0
00006604 4840                       		swap	d0
00006606 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000660C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006610 7609                       		moveq	#9,d3
00006612                            
00006612                            loc_4C26:
00006612 302B 0002                  		move.w	2(a3),d0
00006616 6100 C564                  		bsr.w	CalcSine
0000661A 7400                       		moveq	#0,d2
0000661C 1419                       		move.b	(a1)+,d2
0000661E C1C2                       		muls.w	d2,d0
00006620 E080                       		asr.l	#8,d0
00006622 36C0                       		move.w	d0,(a3)+
00006624 1419                       		move.b	(a1)+,d2
00006626 4882                       		ext.w	d2
00006628 D55B                       		add.w	d2,(a3)+
0000662A 51CB FFE6                  		dbf	d3,loc_4C26
0000662E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006632 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00006638 6000                       		bra.s	loc_4C7E
0000663A                            ; ===========================================================================
0000663A                            
0000663A                            loc_4C4E:				; XREF: SS_BGAnimate
0000663A 0C40 000C                  		cmpi.w	#$C,d0
0000663E 6600                       		bne.s	loc_4C74
00006640 5378 F718                  		subq.w	#1,($FFFFF718).w
00006644 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006648 243C 0001 8000             		move.l	#$18000,d2
0000664E 7206                       		moveq	#6,d1
00006650                            
00006650                            loc_4C64:
00006650 2013                       		move.l	(a3),d0
00006652 9082                       		sub.l	d2,d0
00006654 26C0                       		move.l	d0,(a3)+
00006656 0482 0000 2000             		subi.l	#$2000,d2
0000665C 51C9 FFF2                  		dbf	d1,loc_4C64
00006660                            
00006660                            loc_4C74:
00006660 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006664 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000666A                            
0000666A                            loc_4C7E:
0000666A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000666E 3038 F718                  		move.w	($FFFFF718).w,d0
00006672 4440                       		neg.w	d0
00006674 4840                       		swap	d0
00006676 7600                       		moveq	#0,d3
00006678 161A                       		move.b	(a2)+,d3
0000667A 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000667E 4442                       		neg.w	d2
00006680 0242 00FF                  		andi.w	#$FF,d2
00006684 E54A                       		lsl.w	#2,d2
00006686                            
00006686                            loc_4C9A:
00006686 301B                       		move.w	(a3)+,d0
00006688 544B                       		addq.w	#2,a3
0000668A 7200                       		moveq	#0,d1
0000668C 121A                       		move.b	(a2)+,d1
0000668E 5341                       		subq.w	#1,d1
00006690                            
00006690                            loc_4CA4:
00006690 2380 2000                  		move.l	d0,(a1,d2.w)
00006694 5842                       		addq.w	#4,d2
00006696 0242 03FC                  		andi.w	#$3FC,d2
0000669A 51C9 FFF4                  		dbf	d1,loc_4CA4
0000669E 51CB FFE6                  		dbf	d3,loc_4C9A
000066A2 4E75                       		rts	
000066A4                            ; End of function SS_BGAnimate
000066A4                            
000066A4                            ; ===========================================================================
000066A4 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000066B0                            		even
000066B0 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000066B8                            		even
000066B8 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000066CC                            		even
000066CC                            					; XREF: SS_BGAnimate
000066CC                            ; ===========================================================================
000066CC                            
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            ; Continue screen
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            
000066CC                            ContinueScreen:				; XREF: GameModeArray
000066CC 6100 B91A                  		bsr.w	Pal_FadeFrom
000066D0 46FC 2700                  		move	#$2700,sr
000066D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000066D8 0200 00BF                  		andi.b	#$BF,d0
000066DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000066E2 4DF9 00C0 0004             		lea	($C00004).l,a6
000066E8 3CBC 8004                  		move.w	#$8004,(a6)
000066EC 3CBC 8700                  		move.w	#$8700,(a6)
000066F0 6100 AACE                  		bsr.w	ClearScreen
000066F4 43F8 D000                  		lea	($FFFFD000).w,a1
000066F8 7000                       		moveq	#0,d0
000066FA 323C 07FF                  		move.w	#$7FF,d1
000066FE                            
000066FE                            Cont_ClrObjRam:
000066FE 22C0                       		move.l	d0,(a1)+
00006700 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00006704                            
00006704 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000670E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00006714 6100 AD48                  		bsr.w	NemDec
00006718 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00006722 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00006728 6100 AD34                  		bsr.w	NemDec
0000672C 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00006736 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000673C 6100 AD20                  		bsr.w	NemDec
00006740 720A                       		moveq	#10,d1
00006742 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00006748 7012                       		moveq	#$12,d0
0000674A 6100 BB4A                  		bsr.w	PalLoad1	; load continue	screen Palette
0000674E 103C 0090                  		move.b	#$90,d0
00006752 6100 AB72                  		bsr.w	PlaySound	; play continue	music
00006756 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000675C 42B8 F700                  		clr.l	($FFFFF700).w
00006760 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00006768 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000676E 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00006774 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000677A 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00006780 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00006786 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000678C 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00006792 4EB9 0000 0000             		jsr	ObjectsLoad
00006798 4EB9 0000 0000             		jsr	BuildSprites
0000679E 3038 F60C                  		move.w	($FFFFF60C).w,d0
000067A2 0000 0040                  		ori.b	#$40,d0
000067A6 33C0 00C0 0004             		move.w	d0,($C00004).l
000067AC 6100 B784                  		bsr.w	Pal_FadeTo
000067B0                            
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            ; Continue screen main loop
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            
000067B0                            Cont_MainLoop:
000067B0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000067B6 6100 C392                  		bsr.w	DelayProgram
000067BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067C0 6400                       		bcc.s	loc_4DF2
000067C2 46FC 2700                  		move	#$2700,sr
000067C6 3238 F614                  		move.w	($FFFFF614).w,d1
000067CA 82FC 003C                  		divu.w	#$3C,d1
000067CE 0281 0000 000F             		andi.l	#$F,d1
000067D4 4EB9 0000 0000             		jsr	ContScrCounter
000067DA 46FC 2300                  		move	#$2300,sr
000067DE                            
000067DE                            loc_4DF2:
000067DE 4EB9 0000 0000             		jsr	ObjectsLoad
000067E4 4EB9 0000 0000             		jsr	BuildSprites
000067EA 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000067F0 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000067F2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067F8 64B6                       		bcc.s	Cont_MainLoop
000067FA 4A78 F614                  		tst.w	($FFFFF614).w
000067FE 6600 FFB0                  		bne.w	Cont_MainLoop
00006802 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00006808 4E75                       		rts	
0000680A                            ; ===========================================================================
0000680A                            
0000680A                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000680A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006810 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00006816 7000                       		moveq	#0,d0
00006818 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000681C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006820 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006824 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00006828 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000682C 4E75                       		rts	
0000682E                            ; ===========================================================================
0000682E                            
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            ; Object 80 - Continue screen elements
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            
0000682E                            Obj80:					; XREF: Obj_Index
0000682E 7000                       		moveq	#0,d0
00006830 1028 0024                  		move.b	$24(a0),d0
00006834 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00006838 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000683C                            ; ===========================================================================
0000683C 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000683E 0000                       		dc.w Obj80_Display-Obj80_Index
00006840 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00006842 0000                       		dc.w Obj80_ChkType-Obj80_Index
00006844                            ; ===========================================================================
00006844                            
00006844                            Obj80_Main:				; XREF: Obj80_Index
00006844 5428 0024                  		addq.b	#2,$24(a0)
00006848 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006850 317C 8500 0002             		move.w	#$8500,2(a0)
00006856 117C 0000 0001             		move.b	#0,1(a0)
0000685C 117C 003C 0019             		move.b	#$3C,$19(a0)
00006862 317C 0120 0008             		move.w	#$120,8(a0)
00006868 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000686E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00006874                            
00006874                            Obj80_Display:				; XREF: Obj80_Index
00006874 4EF9 0000 0000             		jmp	DisplaySprite
0000687A                            ; ===========================================================================
0000687A                            Obj80_MiniSonicPos:
0000687A 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000688C 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00006898                            ; ===========================================================================
00006898                            
00006898                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00006898 2248                       		movea.l	a0,a1
0000689A 45F9 0000 687A             		lea	(Obj80_MiniSonicPos).l,a2
000068A0 7200                       		moveq	#0,d1
000068A2 1238 FE18                  		move.b	($FFFFFE18).w,d1
000068A6 5501                       		subq.b	#2,d1
000068A8 6400                       		bcc.s	loc_4EC4
000068AA 4EF9 0000 0000             		jmp	DeleteObject
000068B0                            ; ===========================================================================
000068B0                            
000068B0                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000068B0 7601                       		moveq	#1,d3
000068B2 0C01 000E                  		cmpi.b	#$E,d1
000068B6 6500                       		bcs.s	loc_4ED0
000068B8 7600                       		moveq	#0,d3
000068BA 720E                       		moveq	#$E,d1
000068BC                            
000068BC                            loc_4ED0:
000068BC 1401                       		move.b	d1,d2
000068BE 0202 0001                  		andi.b	#1,d2
000068C2                            
000068C2                            Obj80_MiniSonLoop:
000068C2 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000068C6 335A 0008                  		move.w	(a2)+,8(a1)
000068CA 4A02                       		tst.b	d2
000068CC 6700                       		beq.s	loc_4EEA
000068CE 0469 000A 0008             		subi.w	#$A,8(a1)
000068D4                            
000068D4                            loc_4EEA:
000068D4 337C 00D0 000A             		move.w	#$D0,$A(a1)
000068DA 137C 0006 001A             		move.b	#6,$1A(a1)
000068E0 137C 0006 0024             		move.b	#6,$24(a1)
000068E6 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000068EE 337C 8551 0002             		move.w	#$8551,2(a1)
000068F4 137C 0000 0001             		move.b	#0,1(a1)
000068FA 43E9 0040                  		lea	$40(a1),a1
000068FE 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00006902 43E9 FFC0                  		lea	-$40(a1),a1
00006906 1343 0028                  		move.b	d3,$28(a1)
0000690A                            
0000690A                            Obj80_ChkType:				; XREF: Obj80_Index
0000690A 4A28 0028                  		tst.b	$28(a0)
0000690E 6700                       		beq.s	loc_4F40
00006910 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006916 6500                       		bcs.s	loc_4F40
00006918 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000691C 0200 0001                  		andi.b	#1,d0
00006920 6600                       		bne.s	loc_4F40
00006922 4A78 D010                  		tst.w	($FFFFD010).w
00006926 6600                       		bne.s	Obj80_Delete
00006928 4E75                       		rts	
0000692A                            ; ===========================================================================
0000692A                            
0000692A                            loc_4F40:				; XREF: Obj80_ChkType
0000692A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000692E 0200 000F                  		andi.b	#$F,d0
00006932 6600                       		bne.s	Obj80_Display2
00006934 0868 0000 001A             		bchg	#0,$1A(a0)
0000693A                            
0000693A                            Obj80_Display2:
0000693A 4EF9 0000 0000             		jmp	DisplaySprite
00006940                            ; ===========================================================================
00006940                            
00006940                            Obj80_Delete:				; XREF: Obj80_ChkType
00006940 4EF9 0000 0000             		jmp	DeleteObject
00006946                            ; ===========================================================================
00006946                            
00006946                            ; ---------------------------------------------------------------------------
00006946                            ; Object 81 - Sonic on the continue screen
00006946                            ; ---------------------------------------------------------------------------
00006946                            
00006946                            Obj81:					; XREF: Obj_Index
00006946 7000                       		moveq	#0,d0
00006948 1028 0024                  		move.b	$24(a0),d0
0000694C 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00006950 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00006954 4EF9 0000 0000             		jmp	DisplaySprite
0000695A                            ; ===========================================================================
0000695A 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000695C 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000695E 0000                       		dc.w Obj81_Animate-Obj81_Index
00006960 0000                       		dc.w Obj81_Run-Obj81_Index
00006962                            ; ===========================================================================
00006962                            
00006962                            Obj81_Main:				; XREF: Obj81_Index
00006962 5428 0024                  		addq.b	#2,$24(a0)
00006966 317C 00A0 0008             		move.w	#$A0,8(a0)
0000696C 317C 00C0 000C             		move.w	#$C0,$C(a0)
00006972 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000697A 317C 0780 0002             		move.w	#$780,2(a0)
00006980 117C 0004 0001             		move.b	#4,1(a0)
00006986 117C 0002 0018             		move.b	#2,$18(a0)
0000698C 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00006992 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00006998                            
00006998                            Obj81_ChkLand:				; XREF: Obj81_Index
00006998 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000699E 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000069A0 5428 0024                  		addq.b	#2,$24(a0)
000069A4 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000069A8 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000069B0 317C 8500 0002             		move.w	#$8500,2(a0)
000069B6 117C 0000 001C             		move.b	#0,$1C(a0)
000069BC 6000                       		bra.s	Obj81_Animate
000069BE                            ; ===========================================================================
000069BE                            
000069BE                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000069BE 4EB9 0000 0000             		jsr	SpeedToPos
000069C4 4EB9 0000 0000             		jsr	Sonic_Animate
000069CA 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000069D0                            ; ===========================================================================
000069D0                            
000069D0                            Obj81_Animate:				; XREF: Obj81_Index
000069D0 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000069D4 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000069D6 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000069DC 4EF9 0000 0000             		jmp	AnimateSprite
000069E2                            ; ===========================================================================
000069E2                            
000069E2                            Obj81_GetUp:				; XREF: Obj81_Animate
000069E2 5428 0024                  		addq.b	#2,$24(a0)
000069E6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000069EE 317C 0780 0002             		move.w	#$780,2(a0)
000069F4 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000069FA 4268 0014                  		clr.w	$14(a0)
000069FE 5168 000C                  		subq.w	#8,$C(a0)
00006A02 103C 00E0                  		move.b	#$E0,d0
00006A06 6100 A8C6                  		bsr.w	PlaySound_Special ; fade out music
00006A0A                            
00006A0A                            Obj81_Run:				; XREF: Obj81_Index
00006A0A 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00006A10 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00006A12 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00006A18 6000                       		bra.s	Obj81_ShowRun
00006A1A                            ; ===========================================================================
00006A1A                            
00006A1A                            Obj81_AddSpeed:				; XREF: Obj81_Run
00006A1A 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00006A20                            
00006A20                            Obj81_ShowRun:				; XREF: Obj81_Run
00006A20 4EB9 0000 0000             		jsr	SpeedToPos
00006A26 4EB9 0000 0000             		jsr	Sonic_Animate
00006A2C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00006A32                            ; ===========================================================================
00006A32                            Ani_obj81:
00006A32                            	include "_anim\obj81.asm"
00006A32                            ; ---------------------------------------------------------------------------
00006A32                            ; Animation script - Sonic on the continue screen
00006A32                            ; ---------------------------------------------------------------------------
00006A32 0000                       		dc.w byte_504A-Ani_obj81
00006A34 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00006A40 00                         		even
00006A40 00                         		even
00006A40                            
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            ; Sprite mappings - Continue screen
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            Map_obj80:
00006A40                            	include "_maps\obj80.asm"
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            ; Sprite mappings - Continue screen
00006A40                            ; ---------------------------------------------------------------------------
00006A40 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00006A44 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00006A48 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00006A4C 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00006A50 0B                         byte_5066:	dc.b $B
00006A51 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006A56 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006A5B F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006A60 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006A65 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006A6A F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006A6F F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006A74 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006A79 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00006A7E 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00006A83 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006A88 03                         byte_509E:	dc.b 3
00006A89 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006A8E F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A93 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A98 03                         byte_50AE:	dc.b 3
00006A99 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006A9E F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006AA3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006AA8 03                         byte_50BE:	dc.b 3
00006AA9 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00006AAE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006AB3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006AB8 02                         byte_50CE:	dc.b 2
00006AB9 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00006ABE 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00006AC3 01                         byte_50D9:	dc.b 1
00006AC4 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00006AC9 01                         byte_50DF:	dc.b 1
00006ACA 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006AD0 00                         		even
00006AD0 00                         		even
00006AD0                            
00006AD0                            ; ===========================================================================
00006AD0                            ; ---------------------------------------------------------------------------
00006AD0                            ; Ending sequence in Green Hill	Zone
00006AD0                            ; ---------------------------------------------------------------------------
00006AD0                            
00006AD0                            EndingSequence:				; XREF: GameModeArray
00006AD0 103C 00E4                  		move.b	#$E4,d0
00006AD4 6100 A7F8                  		bsr.w	PlaySound_Special ; stop music
00006AD8 6100 B50E                  		bsr.w	Pal_FadeFrom
00006ADC 43F8 D000                  		lea	($FFFFD000).w,a1
00006AE0 7000                       		moveq	#0,d0
00006AE2 323C 07FF                  		move.w	#$7FF,d1
00006AE6                            
00006AE6                            End_ClrObjRam:
00006AE6 22C0                       		move.l	d0,(a1)+
00006AE8 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006AEC                            
00006AEC 43F8 F628                  		lea	($FFFFF628).w,a1
00006AF0 7000                       		moveq	#0,d0
00006AF2 323C 0015                  		move.w	#$15,d1
00006AF6                            
00006AF6                            End_ClrRam:
00006AF6 22C0                       		move.l	d0,(a1)+
00006AF8 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00006AFC                            
00006AFC 43F8 F700                  		lea	($FFFFF700).w,a1
00006B00 7000                       		moveq	#0,d0
00006B02 323C 003F                  		move.w	#$3F,d1
00006B06                            
00006B06                            End_ClrRam2:
00006B06 22C0                       		move.l	d0,(a1)+
00006B08 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006B0C                            
00006B0C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006B10 7000                       		moveq	#0,d0
00006B12 323C 0047                  		move.w	#$47,d1
00006B16                            
00006B16                            End_ClrRam3:
00006B16 22C0                       		move.l	d0,(a1)+
00006B18 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006B1C                            
00006B1C 46FC 2700                  		move	#$2700,sr
00006B20 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006B24 0200 00BF                  		andi.b	#$BF,d0
00006B28 33C0 00C0 0004             		move.w	d0,($C00004).l
00006B2E 6100 A690                  		bsr.w	ClearScreen
00006B32 4DF9 00C0 0004             		lea	($C00004).l,a6
00006B38 3CBC 8B03                  		move.w	#$8B03,(a6)
00006B3C 3CBC 8230                  		move.w	#$8230,(a6)
00006B40 3CBC 8407                  		move.w	#$8407,(a6)
00006B44 3CBC 857C                  		move.w	#$857C,(a6)
00006B48 3CBC 9001                  		move.w	#$9001,(a6)
00006B4C 3CBC 8004                  		move.w	#$8004,(a6)
00006B50 3CBC 8720                  		move.w	#$8720,(a6)
00006B54 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006B5A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00006B5E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00006B64 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00006B6A 11FC 0000 FFFD             		move.b	#0,($FFFFFFFD).w	; puts a 0 in this flag
00006B70 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006B76 6700                       		beq.s	End_LoadData	; if yes, branch
00006B78 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00006B7E 11FC 0001 FFFD             		move.b	#1,($FFFFFFFD).w	; puts a 1 in this flag
00006B84                            
00006B84                            End_LoadData:
00006B84 701C                       		moveq	#$1C,d0
00006B86 6100 AB6A                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00006B8A 4EB9 0000 0000             		jsr	Hud_Base
00006B90 6100 0000                  		bsr.w	LevelSizeLoad
00006B94 6100 0000                  		bsr.w	DeformBgLayer
00006B98 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B9E 6100 0000                  		bsr.w	MainLoadBlockLoad
00006BA2 6100 0000                  		bsr.w	LoadTilesFromStart
00006BA6                            	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00006BA6 21FC 0000 0000 FFD0        		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
00006BAE 21FC 0000 0000 FFD4        		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
00006BB6 46FC 2300                  		move	#$2300,sr
00006BBA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006BC0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006BC4 6100 ACDC                  		bsr.w	KosDec
00006BC8 7003                       		moveq	#3,d0
00006BCA 6100 B6CA                  		bsr.w	PalLoad1	; load Sonic's Palette
00006BCE 1038 FFFD                  		move.b	($FFFFFFFD).w,d0
00006BD2 43F9 0000 5102             		lea	(MusicList_Endings).l,a1 ; load Music Playlist for Endings
00006BD8 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006BDC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00006BE2 6700                       		beq.s	End_LoadSonic	; if not, branch
00006BE4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006BEA                            
00006BEA                            End_LoadSonic:
00006BEA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00006BF0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00006BF6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00006BFC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00006C02 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00006C08 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00006C0E 4EB9 0000 0000             		jsr	ObjPosLoad
00006C14 4EB9 0000 0000             		jsr	ObjectsLoad
00006C1A 4EB9 0000 0000             		jsr	BuildSprites
00006C20 7000                       		moveq	#0,d0
00006C22 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00006C26 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00006C2A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006C2E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00006C32 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00006C36 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006C3A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006C3E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00006C42 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00006C46 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00006C4A 6100 EE9E                  		bsr.w	OscillateNumInit
00006C4E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006C54 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00006C5A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00006C60 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006C66 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C6C 6100 BEDC                  		bsr.w	DelayProgram
00006C70 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006C74 0000 0040                  		ori.b	#$40,d0
00006C78 33C0 00C0 0004             		move.w	d0,($C00004).l
00006C7E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006C84 6100 B2AC                  		bsr.w	Pal_FadeTo
00006C88                            
00006C88                            ; ---------------------------------------------------------------------------
00006C88                            ; Main ending sequence loop
00006C88                            ; ---------------------------------------------------------------------------
00006C88                            
00006C88                            End_MainLoop:
00006C88 6100 A668                  		bsr.w	PauseGame
00006C8C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C92 6100 BEB6                  		bsr.w	DelayProgram
00006C96 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006C9A 6100 0000                  		bsr.w	End_MoveSonic
00006C9E 4EB9 0000 0000             		jsr	ObjectsLoad
00006CA4 6100 0000                  		bsr.w	DeformBgLayer
00006CA8 4EB9 0000 0000             		jsr	BuildSprites
00006CAE 4EB9 0000 0000             		jsr	ObjPosLoad
00006CB4 6100 AE0A                  		bsr.w	PalCycle_Load
00006CB8 6100 EE86                  		bsr.w	OscillateNumDo
00006CBC 6100 EF12                  		bsr.w	ChangeRingFrame
00006CC0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00006CC6 6700                       		beq.s	loc_52DA	; if yes, branch
00006CC8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00006CCE 4240                       		clr.w	d0
00006CD0 1038 FFFD                  		move.b	($FFFFFFFD).w,d0	; get kind of ending (0 = good, 1 = bad)
00006CD4 43F9 0000 5100             		lea	(MusicList_Credits).l,a1	; load Music Playlist for credits
00006CDA 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00006CDE                            
00006CDE 6100 A5EE                  		bsr.w	PlaySound_Special ; play credits music
00006CE2 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006CE8 4E75                       		rts
00006CEA                            ; ===========================================================================
00006CEA                            
00006CEA                            loc_52DA:
00006CEA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006CEE 6700 FF98                  		beq.w	End_MainLoop	; if not, branch
00006CF2                            
00006CF2 4278 FE02                  		clr.w	($FFFFFE02).w
00006CF6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006CFC 4278 F794                  		clr.w	($FFFFF794).w
00006D00                            
00006D00                            End_AllEmlds:				; XREF: loc_5334
00006D00 6100 A5F0                  		bsr.w	PauseGame
00006D04 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006D0A 6100 BE3E                  		bsr.w	DelayProgram
00006D0E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006D12 6100 0000                  		bsr.w	End_MoveSonic
00006D16 4EB9 0000 0000             		jsr	ObjectsLoad
00006D1C 6100 0000                  		bsr.w	DeformBgLayer
00006D20 4EB9 0000 0000             		jsr	BuildSprites
00006D26 4EB9 0000 0000             		jsr	ObjPosLoad
00006D2C 6100 EE12                  		bsr.w	OscillateNumDo
00006D30 6100 EE9E                  		bsr.w	ChangeRingFrame
00006D34 5378 F794                  		subq.w	#1,($FFFFF794).w
00006D38 6A00                       		bpl.s	loc_5334
00006D3A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006D40 6100 B3F4                  		bsr.w	Pal_ToWhite
00006D44                            
00006D44                            loc_5334:
00006D44 4A78 FE02                  		tst.w	($FFFFFE02).w
00006D48 6700 FFB6                  		beq.w	End_AllEmlds
00006D4C 4278 FE02                  		clr.w	($FFFFFE02).w
00006D50 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006D56 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D5C 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D62 47F8 F700                  		lea	($FFFFF700).w,a3
00006D66 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00006D6A 343C 4000                  		move.w	#$4000,d2
00006D6E 6100 0000                  		bsr.w	LoadTilesFromStart2
00006D72 7013                       		moveq	#$13,d0
00006D74 6100 B520                  		bsr.w	PalLoad1	; load ending Palette
00006D78 6100 B2F0                  		bsr.w	Pal_MakeWhite
00006D7C 6000 FF0A                  		bra.w	End_MainLoop
00006D80                            
00006D80                            ; ---------------------------------------------------------------------------
00006D80                            ; Subroutine controlling Sonic on the ending sequence
00006D80                            ; ---------------------------------------------------------------------------
00006D80                            
00006D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D80                            
00006D80                            
00006D80                            End_MoveSonic:				; XREF: End_MainLoop
00006D80 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006D84 6600                       		bne.s	End_MoveSonic2
00006D86 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00006D8C 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00006D8E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D92 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00006D98 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00006D9E 4E75                       		rts	
00006DA0                            ; ===========================================================================
00006DA0                            
00006DA0                            End_MoveSonic2:				; XREF: End_MoveSonic
00006DA0 5500                       		subq.b	#2,d0
00006DA2 6600                       		bne.s	End_MoveSonic3
00006DA4 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00006DAA 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00006DAC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DB0 7000                       		moveq	#0,d0
00006DB2 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006DB6 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00006DBA 31C0 D014                  		move.w	d0,($FFFFD014).w
00006DBE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006DC4 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006DCA 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00006DD0 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006DD6 4E75                       		rts	
00006DD8                            ; ===========================================================================
00006DD8                            
00006DD8                            End_MoveSonic3:				; XREF: End_MoveSonic
00006DD8 5500                       		subq.b	#2,d0
00006DDA 6600                       		bne.s	End_MoveSonExit
00006DDC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DE0 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006DE6 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006DEC 4278 D024                  		clr.w	($FFFFD024).w
00006DF0                            
00006DF0                            End_MoveSonExit:
00006DF0 4E75                       		rts	
00006DF2                            ; End of function End_MoveSonic
00006DF2                            
00006DF2                            ; ===========================================================================
00006DF2                            ; ---------------------------------------------------------------------------
00006DF2                            ; Object 87 - Sonic on ending sequence
00006DF2                            ; ---------------------------------------------------------------------------
00006DF2                            
00006DF2                            Obj87:					; XREF: Obj_Index
00006DF2 7000                       		moveq	#0,d0
00006DF4 1028 0025                  		move.b	$25(a0),d0
00006DF8 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006DFC 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00006E00 4EF9 0000 0000             		jmp	DisplaySprite
00006E06                            ; ===========================================================================
00006E06 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006E0A 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00006E0E 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006E12 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006E16 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006E1A                            ; ===========================================================================
00006E1A                            
00006E1A                            Obj87_Main:				; XREF: Obj87_Index
00006E1A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006E20 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006E22 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006E28 317C 00D8 0030             		move.w	#$D8,$30(a0)
00006E2E 4E75                       		rts	
00006E30                            ; ===========================================================================
00006E30                            
00006E30                            Obj87_Main2:				; XREF: Obj87_Main
00006E30 5428 0025                  		addq.b	#2,$25(a0)
00006E34 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006E3C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006E42 117C 0004 0001             		move.b	#4,1(a0)
00006E48 4228 0022                  		clr.b	$22(a0)
00006E4C 117C 0002 0018             		move.b	#2,$18(a0)
00006E52 117C 0000 001A             		move.b	#0,$1A(a0)
00006E58 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00006E5E                            
00006E5E                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00006E5E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006E62 6600                       		bne.s	Obj87_Wait
00006E64 5428 0025                  		addq.b	#2,$25(a0)
00006E68 317C 0001 001C             		move.w	#1,$1C(a0)
00006E6E 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006E74                            
00006E74                            Obj87_Wait:
00006E74 4E75                       		rts	
00006E76                            ; ===========================================================================
00006E76                            
00006E76                            Obj87_LookUp:				; XREF: Obj87_Index
00006E76 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00006E7E 6600                       		bne.s	locret_5480
00006E80 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006E86 317C 005A 0030             		move.w	#$5A,$30(a0)
00006E8C 5428 0025                  		addq.b	#2,$25(a0)
00006E90                            
00006E90                            locret_5480:
00006E90 4E75                       		rts	
00006E92                            ; ===========================================================================
00006E92                            
00006E92                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006E92 5368 0030                  		subq.w	#1,$30(a0)
00006E96 6600                       		bne.s	Obj87_Wait2
00006E98 43F8 D400                  		lea	($FFFFD400).w,a1
00006E9C 323C 00FF                  		move.w	#$FF,d1
00006EA0                            
00006EA0                            Obj87_ClrLoop:
00006EA0 4299                       		clr.l	(a1)+
00006EA2 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006EA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00006EAC 5428 0025                  		addq.b	#2,$25(a0)
00006EB0 117C 0001 001C             		move.b	#1,$1C(a0)
00006EB6 317C 003C 0030             		move.w	#$3C,$30(a0)
00006EBC                            
00006EBC                            Obj87_Wait2:
00006EBC 4E75                       		rts	
00006EBE                            ; ===========================================================================
00006EBE                            
00006EBE                            Obj87_MakeLogo:				; XREF: Obj87_Index
00006EBE 5368 0030                  		subq.w	#1,$30(a0)
00006EC2 6600                       		bne.s	Obj87_Wait3
00006EC4 5428 0025                  		addq.b	#2,$25(a0)
00006EC8 317C 00B4 0030             		move.w	#$B4,$30(a0)
00006ECE 117C 0002 001C             		move.b	#2,$1C(a0)
00006ED4 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006EDA                            
00006EDA                            Obj87_Wait3:
00006EDA 4E75                       		rts	
00006EDC                            ; ===========================================================================
00006EDC                            
00006EDC                            Obj87_Animate:				; XREF: Obj87_Index
00006EDC 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006EE2 4EF9 0000 0000             		jmp	AnimateSprite
00006EE8                            ; ===========================================================================
00006EE8                            
00006EE8                            Obj87_Leap:				; XREF: Obj87_Index
00006EE8 5368 0030                  		subq.w	#1,$30(a0)
00006EEC 6600                       		bne.s	Obj87_Wait4
00006EEE 5428 0025                  		addq.b	#2,$25(a0)
00006EF2 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006EFA 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006F00 117C 0004 0001             		move.b	#4,1(a0)
00006F06 4228 0022                  		clr.b	$22(a0)
00006F0A 117C 0002 0018             		move.b	#2,$18(a0)
00006F10 117C 0005 001A             		move.b	#5,$1A(a0)
00006F16 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006F1C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006F22 60B8                       		bra.s	Obj87_Animate
00006F24                            ; ===========================================================================
00006F24                            
00006F24                            Obj87_Wait4:				; XREF: Obj87_Leap
00006F24 4E75                       		rts	
00006F26                            ; ===========================================================================
00006F26                            Ani_obj87:
00006F26                            	include "_anim\obj87.asm"
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            ; Animation script - Sonic on the ending sequence
00006F26                            ; ---------------------------------------------------------------------------
00006F26 0000                       		dc.w byte_551C-Ani_obj87
00006F28 0000                       		dc.w byte_552A-Ani_obj87
00006F2A 0000                       		dc.w byte_5534-Ani_obj87
00006F2C 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006F3A 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006F44 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006F4C                            		even
00006F4C                            		even
00006F4C                            
00006F4C                            ; ===========================================================================
00006F4C                            ; ---------------------------------------------------------------------------
00006F4C                            ; Object 88 - chaos emeralds on	the ending sequence
00006F4C                            ; ---------------------------------------------------------------------------
00006F4C                            
00006F4C                            Obj88:					; XREF: Obj_Index
00006F4C 7000                       		moveq	#0,d0
00006F4E 1028 0024                  		move.b	$24(a0),d0
00006F52 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006F56 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006F5A 4EF9 0000 0000             		jmp	DisplaySprite
00006F60                            ; ===========================================================================
00006F60 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006F62 0000                       		dc.w Obj88_Move-Obj88_Index
00006F64                            ; ===========================================================================
00006F64                            
00006F64                            Obj88_Main:				; XREF: Obj88_Index
00006F64 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006F6A 6700                       		beq.s	Obj88_Main2
00006F6C 588F                       		addq.l	#4,sp
00006F6E 4E75                       		rts	
00006F70                            ; ===========================================================================
00006F70                            
00006F70                            Obj88_Main2:				; XREF: Obj88_Main
00006F70 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006F76 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00006F7C 2248                       		movea.l	a0,a1
00006F7E 7600                       		moveq	#0,d3
00006F80 7401                       		moveq	#1,d2
00006F82 7205                       		moveq	#5,d1
00006F84                            
00006F84                            Obj88_MainLoop:
00006F84 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006F88 5429 0024                  		addq.b	#2,$24(a1)
00006F8C 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006F94 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006F9A 137C 0004 0001             		move.b	#4,1(a1)
00006FA0 137C 0001 0018             		move.b	#1,$18(a1)
00006FA6 3368 0008 0038             		move.w	8(a0),$38(a1)
00006FAC 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006FB2 1342 001C                  		move.b	d2,$1C(a1)
00006FB6 1342 001A                  		move.b	d2,$1A(a1)
00006FBA 5202                       		addq.b	#1,d2
00006FBC 1343 0026                  		move.b	d3,$26(a1)
00006FC0 0603 002A                  		addi.b	#$2A,d3
00006FC4 43E9 0040                  		lea	$40(a1),a1
00006FC8 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006FCC                            
00006FCC                            Obj88_Move:				; XREF: Obj88_Index
00006FCC 3028 003E                  		move.w	$3E(a0),d0
00006FD0 D168 0026                  		add.w	d0,$26(a0)
00006FD4 1028 0026                  		move.b	$26(a0),d0
00006FD8 4EB9 0000 2B7C             		jsr	(CalcSine).l
00006FDE 7800                       		moveq	#0,d4
00006FE0 1828 003C                  		move.b	$3C(a0),d4
00006FE4 C3C4                       		muls.w	d4,d1
00006FE6 E081                       		asr.l	#8,d1
00006FE8 C1C4                       		muls.w	d4,d0
00006FEA E080                       		asr.l	#8,d0
00006FEC D268 0038                  		add.w	$38(a0),d1
00006FF0 D068 003A                  		add.w	$3A(a0),d0
00006FF4 3141 0008                  		move.w	d1,8(a0)
00006FF8 3140 000C                  		move.w	d0,$C(a0)
00006FFC 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00007002 6700                       		beq.s	loc_55FA
00007004 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000700A                            
0000700A                            loc_55FA:
0000700A 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00007010 6700                       		beq.s	loc_5608
00007012 0668 0020 003E             		addi.w	#$20,$3E(a0)
00007018                            
00007018                            loc_5608:
00007018 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000701E 6700                       		beq.s	locret_5614
00007020 5368 003A                  		subq.w	#1,$3A(a0)
00007024                            
00007024                            locret_5614:
00007024 4E75                       		rts	
00007026                            ; ===========================================================================
00007026                            ; ---------------------------------------------------------------------------
00007026                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00007026                            ; ---------------------------------------------------------------------------
00007026                            
00007026                            Obj89:					; XREF: Obj_Index
00007026 7000                       		moveq	#0,d0
00007028 1028 0024                  		move.b	$24(a0),d0
0000702C 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00007030 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00007034                            ; ===========================================================================
00007034 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00007036 0000                       		dc.w Obj89_Move-Obj89_Index
00007038 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000703A                            ; ===========================================================================
0000703A                            
0000703A                            Obj89_Main:				; XREF: Obj89_Index
0000703A 5428 0024                  		addq.b	#2,$24(a0)
0000703E 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00007044 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000704A 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00007052 317C 05C5 0002             		move.w	#$5C5,2(a0)
00007058 117C 0000 0001             		move.b	#0,1(a0)
0000705E 117C 0000 0018             		move.b	#0,$18(a0)
00007064                            
00007064                            Obj89_Move:				; XREF: Obj89_Index
00007064 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000706A 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000706C 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00007072 4EB9 0000 0000             		jsr	DisplaySprite
00007078                            ; ===========================================================================
00007078                            
00007078                            Obj89_Delay:				; XREF: Obj89_Move
00007078 5428 0024                  		addq.b	#2,$24(a0)
0000707C 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00007082                            
00007082                            Obj89_GotoCredits:			; XREF: Obj89_Index
00007082 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00007086 6A00                       		bpl.s	Obj89_Display
00007088 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000708E                            
0000708E                            Obj89_Display:
0000708E 4EB9 0000 0000             		jsr	DisplaySprite
00007094                            ; ===========================================================================
00007094                            ; ---------------------------------------------------------------------------
00007094                            ; Sprite mappings - Sonic on the ending	sequence
00007094                            ; ---------------------------------------------------------------------------
00007094                            Map_obj87:
00007094                            	include "_maps\obj87.asm"
00007094                            ; ---------------------------------------------------------------------------
00007094                            ; Sprite mappings - Sonic on the ending	sequence
00007094                            ; ---------------------------------------------------------------------------
00007094 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00007098 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000709C 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000070A0 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000070A4 02                         byte_5690:	dc.b 2
000070A5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000070AA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070AF 03                         byte_569B:	dc.b 3
000070B0 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000070B5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000070BA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070BF 02                         byte_56AB:	dc.b 2
000070C0 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000070C5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000070CA 02                         byte_56B6:	dc.b 2
000070CB EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000070D0 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000070D5 02                         byte_56C1:	dc.b 2
000070D6 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000070DB FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000070E0 03                         byte_56CC:	dc.b 3
000070E1 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000070E6 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000070EB 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000070F0 07                         byte_56DC:	dc.b 7
000070F1 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000070F6 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000070FB BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00007100 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00007105 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000710A E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000710F EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00007114 18                         byte_5700:	dc.b $18
00007115 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000711A 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000711F 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00007124 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00007129 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000712E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00007133 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00007138 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000713D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00007142 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00007147 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000714C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00007151 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00007156 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000715B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00007160 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00007165 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000716A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000716F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00007174 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00007179 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000717E E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00007183 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00007188 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000718E 00                         		even
0000718E 00                         		even
0000718E                            
0000718E                            ; ---------------------------------------------------------------------------
0000718E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000718E                            ; ---------------------------------------------------------------------------
0000718E                            Map_obj88:
0000718E                            	include "_maps\obj88.asm"
0000718E                            ; ---------------------------------------------------------------------------
0000718E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000718E                            ; ---------------------------------------------------------------------------
0000718E 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00007192 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00007196 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000719A 0000                       		dc.w byte_57AC-Map_obj88
0000719C 01                         byte_5788:	dc.b 1
0000719D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000071A2 01                         byte_578E:	dc.b 1
000071A3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000071A8 01                         byte_5794:	dc.b 1
000071A9 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000071AE 01                         byte_579A:	dc.b 1
000071AF F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000071B4 01                         byte_57A0:	dc.b 1
000071B5 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000071BA 01                         byte_57A6:	dc.b 1
000071BB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000071C0 01                         byte_57AC:	dc.b 1
000071C1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000071C6                            		even
000071C6                            		even
000071C6                            
000071C6                            ; ---------------------------------------------------------------------------
000071C6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071C6                            ; ---------------------------------------------------------------------------
000071C6                            Map_obj89:
000071C6                            	include "_maps\obj89.asm"
000071C6                            ; ---------------------------------------------------------------------------
000071C6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071C6                            ; ---------------------------------------------------------------------------
000071C6 0000                       		dc.w byte_57B4-Map_obj89
000071C8 03                         byte_57B4:	dc.b 3
000071C9 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000071CE F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000071D3 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000071D8                            		even
000071D8                            		even
000071D8                            
000071D8                            ; ===========================================================================
000071D8                            ; ---------------------------------------------------------------------------
000071D8                            ; Credits ending sequence
000071D8                            ; ---------------------------------------------------------------------------
000071D8                            
000071D8                            Credits:				; XREF: GameModeArray
000071D8 6100 A40A                  		bsr.w	ClearPLC
000071DC 6100 AE0A                  		bsr.w	Pal_FadeFrom
000071E0 4DF9 00C0 0004             		lea	($C00004).l,a6
000071E6 3CBC 8004                  		move.w	#$8004,(a6)
000071EA 3CBC 8230                  		move.w	#$8230,(a6)
000071EE 3CBC 8407                  		move.w	#$8407,(a6)
000071F2 3CBC 9001                  		move.w	#$9001,(a6)
000071F6 3CBC 9200                  		move.w	#$9200,(a6)
000071FA 3CBC 8B03                  		move.w	#$8B03,(a6)
000071FE 3CBC 8720                  		move.w	#$8720,(a6)
00007202 4238 F64E                  		clr.b	($FFFFF64E).w
00007206 6100 9FB8                  		bsr.w	ClearScreen
0000720A 43F8 D000                  		lea	($FFFFD000).w,a1
0000720E 7000                       		moveq	#0,d0
00007210 323C 07FF                  		move.w	#$7FF,d1
00007214                            
00007214                            Cred_ClrObjRam:
00007214 22C0                       		move.l	d0,(a1)+
00007216 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000721A                            
0000721A 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00007224 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000722A 6100 A232                  		bsr.w	NemDec
0000722E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00007232 7000                       		moveq	#0,d0
00007234 323C 001F                  		move.w	#$1F,d1
00007238                            
00007238                            Cred_ClrPalette:
00007238 22C0                       		move.l	d0,(a1)+
0000723A 51C9 FFFC                  		dbf	d1,Cred_ClrPalette ; fill Palette	with black ($0000)
0000723E                            
0000723E 7003                       		moveq	#3,d0
00007240 6100 B054                  		bsr.w	PalLoad1	; load Sonic's Palette
00007244 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000724A 4EB9 0000 0000             		jsr	ObjectsLoad
00007250 4EB9 0000 0000             		jsr	BuildSprites
00007256 6100 0000                  		bsr.w	EndingDemoLoad
0000725A 7000                       		moveq	#0,d0
0000725C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007260 E948                       		lsl.w	#4,d0
00007262 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00007268 45F2 0000                  		lea	(a2,d0.w),a2
0000726C 7000                       		moveq	#0,d0
0000726E 1012                       		move.b	(a2),d0
00007270 6700                       		beq.s	loc_5862
00007272 6100 A312                  		bsr.w	LoadPLC		; load level patterns
00007276                            
00007276                            loc_5862:
00007276 7001                       		moveq	#1,d0
00007278 6100 A30C                  		bsr.w	LoadPLC		; load standard	level patterns
0000727C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00007282 6100 ACAE                  		bsr.w	Pal_FadeTo
00007286                            
00007286                            Cred_WaitLoop:
00007286 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000728C 6100 B8BC                  		bsr.w	DelayProgram
00007290 6100 A360                  		bsr.w	RunPLC_RAM
00007294 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00007298 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000729A 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000729E 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000072A0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000072A6 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000072AA 4E75                       		rts	
000072AC                            
000072AC                            ; ---------------------------------------------------------------------------
000072AC                            ; Ending sequence demo loading subroutine
000072AC                            ; ---------------------------------------------------------------------------
000072AC                            
000072AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072AC                            
000072AC                            
000072AC                            EndingDemoLoad:				; XREF: Credits
000072AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000072B0 0240 000F                  		andi.w	#$F,d0
000072B4 D040                       		add.w	d0,d0
000072B6 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000072BA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000072BE 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000072C2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000072C8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000072CA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000072D0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000072D6 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000072DC 7000                       		moveq	#0,d0
000072DE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000072E2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000072E6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000072EA 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000072EE 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000072F4 6600                       		bne.s	EndDemo_Exit	; if not, branch
000072F6 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000072FC 45F8 FE30                  		lea	($FFFFFE30).w,a2
00007300 303C 0008                  		move.w	#8,d0
00007304                            
00007304                            EndDemo_LampLoad:
00007304 24D9                       		move.l	(a1)+,(a2)+
00007306 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000730A                            
0000730A                            EndDemo_Exit:
0000730A 4E75                       		rts	
0000730C                            ; End of function EndingDemoLoad
0000730C                            
0000730C                            ; ===========================================================================
0000730C                            ; ---------------------------------------------------------------------------
0000730C                            ; Levels used in the end sequence demos
0000730C                            ; ---------------------------------------------------------------------------
0000730C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000731C                            
0000731C                            ; ---------------------------------------------------------------------------
0000731C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000731C                            ; ---------------------------------------------------------------------------
0000731C                            EndDemo_LampVar:
0000731C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000731E 0A00 062C 000D             		dc.w $A00, $62C, $D
00007324 0000 0000                  		dc.l 0
00007328 0000                       		dc.b 0,	0
0000732A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000733E 0101                       		dc.b 1,	1
00007340                            ; ===========================================================================
00007340                            ; ---------------------------------------------------------------------------
00007340                            ; "TRY AGAIN" and "END"	screens
00007340                            ; ---------------------------------------------------------------------------
00007340                            
00007340                            TryAgainEnd:				; XREF: Credits
00007340 6100 A2A2                  		bsr.w	ClearPLC
00007344 6100 ACA2                  		bsr.w	Pal_FadeFrom
00007348 4DF9 00C0 0004             		lea	($C00004).l,a6
0000734E 3CBC 8004                  		move.w	#$8004,(a6)
00007352 3CBC 8230                  		move.w	#$8230,(a6)
00007356 3CBC 8407                  		move.w	#$8407,(a6)
0000735A 3CBC 9001                  		move.w	#$9001,(a6)
0000735E 3CBC 9200                  		move.w	#$9200,(a6)
00007362 3CBC 8B03                  		move.w	#$8B03,(a6)
00007366 3CBC 8720                  		move.w	#$8720,(a6)
0000736A 4238 F64E                  		clr.b	($FFFFF64E).w
0000736E 6100 9E50                  		bsr.w	ClearScreen
00007372 43F8 D000                  		lea	($FFFFD000).w,a1
00007376 7000                       		moveq	#0,d0
00007378 323C 07FF                  		move.w	#$7FF,d1
0000737C                            
0000737C                            TryAg_ClrObjRam:
0000737C 22C0                       		move.l	d0,(a1)+
0000737E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00007382                            
00007382 701D                       		moveq	#$1D,d0
00007384 6100 A36C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00007388 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000738C 7000                       		moveq	#0,d0
0000738E 323C 001F                  		move.w	#$1F,d1
00007392                            
00007392                            TryAg_ClrPalette:
00007392 22C0                       		move.l	d0,(a1)+
00007394 51C9 FFFC                  		dbf	d1,TryAg_ClrPalette ; fill Palette with black ($0000)
00007398                            
00007398 7013                       		moveq	#$13,d0
0000739A 6100 AEFA                  		bsr.w	PalLoad1	; load ending Palette
0000739E 4278 FBC0                  		clr.w	($FFFFFBC0).w
000073A2 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000073A8 4EB9 0000 0000             		jsr	ObjectsLoad
000073AE 4EB9 0000 0000             		jsr	BuildSprites
000073B4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000073BA 6100 AB76                  		bsr.w	Pal_FadeTo
000073BE                            
000073BE                            ; ---------------------------------------------------------------------------
000073BE                            ; "TRY AGAIN" and "END"	screen main loop
000073BE                            ; ---------------------------------------------------------------------------
000073BE                            TryAg_MainLoop:
000073BE 6100 9F32                  		bsr.w	PauseGame
000073C2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000073C8 6100 B780                  		bsr.w	DelayProgram
000073CC 4EB9 0000 0000             		jsr	ObjectsLoad
000073D2 4EB9 0000 0000             		jsr	BuildSprites
000073D8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000073DE 6600                       		bne.s	TryAg_Exit	; if yes, branch
000073E0 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000073E4 6700                       		beq.s	TryAg_Exit	; if yes, branch
000073E6 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000073EC 67D0                       		beq.s	TryAg_MainLoop
000073EE                            
000073EE                            TryAg_Exit:
000073EE 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000073F4 4E75                       		rts	
000073F6                            
000073F6                            ; ===========================================================================
000073F6                            ; ---------------------------------------------------------------------------
000073F6                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000073F6                            ; ---------------------------------------------------------------------------
000073F6                            
000073F6                            Obj8B:					; XREF: Obj_Index
000073F6 7000                       		moveq	#0,d0
000073F8 1028 0024                  		move.b	$24(a0),d0
000073FC 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00007400 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00007404 4EF9 0000 0000             		jmp	DisplaySprite
0000740A                            ; ===========================================================================
0000740A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000740C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000740E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00007410 0000                       		dc.w loc_5A8E-Obj8B_Index
00007412                            ; ===========================================================================
00007412                            
00007412                            Obj8B_Main:				; XREF: Obj8B_Index
00007412 5428 0024                  		addq.b	#2,$24(a0)
00007416 317C 0120 0008             		move.w	#$120,8(a0)
0000741C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00007422 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000742A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007430 117C 0000 0001             		move.b	#0,1(a0)
00007436 117C 0002 0018             		move.b	#2,$18(a0)
0000743C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00007442 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007448 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000744A 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00007450 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00007456 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000745C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00007462                            
00007462                            Obj8B_Animate:				; XREF: Obj8B_Index
00007462 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00007468 4EF9 0000 0000             		jmp	AnimateSprite
0000746E                            ; ===========================================================================
0000746E                            
0000746E                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000746E 5428 0024                  		addq.b	#2,$24(a0)
00007472 7002                       		moveq	#2,d0
00007474 0828 0000 001C             		btst	#0,$1C(a0)
0000747A 6700                       		beq.s	loc_5A6A
0000747C 4440                       		neg.w	d0
0000747E                            
0000747E                            loc_5A6A:
0000747E 43F8 D800                  		lea	($FFFFD800).w,a1
00007482 7205                       		moveq	#5,d1
00007484                            
00007484                            loc_5A70:
00007484 1340 003E                  		move.b	d0,$3E(a1)
00007488 3400                       		move.w	d0,d2
0000748A E742                       		asl.w	#3,d2
0000748C D529 0026                  		add.b	d2,$26(a1)
00007490 43E9 0040                  		lea	$40(a1),a1
00007494 51C9 FFEE                  		dbf	d1,loc_5A70
00007498 5228 001A                  		addq.b	#1,$1A(a0)
0000749C 317C 0070 0030             		move.w	#112,$30(a0)
000074A2                            
000074A2                            loc_5A8E:				; XREF: Obj8B_Index
000074A2 5368 0030                  		subq.w	#1,$30(a0)
000074A6 6A00                       		bpl.s	locret_5AA0
000074A8 0868 0000 001C             		bchg	#0,$1C(a0)
000074AE 117C 0002 0024             		move.b	#2,$24(a0)
000074B4                            
000074B4                            locret_5AA0:
000074B4 4E75                       		rts	
000074B6                            ; ===========================================================================
000074B6                            Ani_obj8B:
000074B6                            	include "_anim\obj8B.asm"
000074B6                            ; ---------------------------------------------------------------------------
000074B6                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000074B6                            ; ---------------------------------------------------------------------------
000074B6 0000                       		dc.w byte_5AA8-Ani_obj8B
000074B8 0000                       		dc.w byte_5AAC-Ani_obj8B
000074BA 0000                       		dc.w byte_5AB0-Ani_obj8B
000074BC 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000074C0 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000074C4 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000074D6                            		even
000074D6                            		even
000074D6                            
000074D6                            ; ===========================================================================
000074D6                            ; ---------------------------------------------------------------------------
000074D6                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000074D6                            ; ---------------------------------------------------------------------------
000074D6                            
000074D6                            Obj8C:					; XREF: Obj_Index
000074D6 7000                       		moveq	#0,d0
000074D8 1028 0024                  		move.b	$24(a0),d0
000074DC 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000074E0 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000074E4 4EF9 0000 0000             		jmp	DisplaySprite
000074EA                            ; ===========================================================================
000074EA 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000074EC 0000                       		dc.w Obj8C_Move-Obj8C_Index
000074EE                            ; ===========================================================================
000074EE                            
000074EE                            Obj8C_Main:				; XREF: Obj8C_Index
000074EE 2248                       		movea.l	a0,a1
000074F0 7400                       		moveq	#0,d2
000074F2 7600                       		moveq	#0,d3
000074F4 7205                       		moveq	#5,d1
000074F6 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000074FA                            
000074FA                            Obj8C_MakeEms:				; XREF: loc_5B42
000074FA 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000074FE 5429 0024                  		addq.b	#2,$24(a1)
00007502 237C 0000 718E 0004        		move.l	#Map_obj88,4(a1)
0000750A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00007510 137C 0000 0001             		move.b	#0,1(a1)
00007516 137C 0001 0018             		move.b	#1,$18(a1)
0000751C 337C 0104 0008             		move.w	#$104,8(a1)
00007522 337C 0120 0038             		move.w	#$120,$38(a1)
00007528 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000752E 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00007534 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000753A 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000753E                            
0000753E                            Obj8C_ChkEms:
0000753E 7000                       		moveq	#0,d0
00007540 1038 FE57                  		move.b	($FFFFFE57).w,d0
00007544 5340                       		subq.w	#1,d0
00007546 6500                       		bcs.s	loc_5B42
00007548                            
00007548                            Obj8C_ChkEmLoop:
00007548 B433 0000                  		cmp.b	(a3,d0.w),d2
0000754C 6600                       		bne.s	loc_5B3E
0000754E 5202                       		addq.b	#1,d2
00007550 60EC                       		bra.s	Obj8C_ChkEms
00007552                            ; ===========================================================================
00007552                            
00007552                            loc_5B3E:
00007552 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00007556                            
00007556                            loc_5B42:
00007556 1342 001A                  		move.b	d2,$1A(a1)
0000755A 5229 001A                  		addq.b	#1,$1A(a1)
0000755E 5202                       		addq.b	#1,d2
00007560 137C 0080 0026             		move.b	#$80,$26(a1)
00007566 1343 001E                  		move.b	d3,$1E(a1)
0000756A 1343 001F                  		move.b	d3,$1F(a1)
0000756E 0643 000A                  		addi.w	#$A,d3
00007572 43E9 0040                  		lea	$40(a1),a1
00007576 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000757A                            
0000757A                            Obj8C_Move:				; XREF: Obj8C_Index
0000757A 4A68 003E                  		tst.w	$3E(a0)
0000757E 6700                       		beq.s	locret_5BBA
00007580 4A28 001E                  		tst.b	$1E(a0)
00007584 6700                       		beq.s	loc_5B78
00007586 5328 001E                  		subq.b	#1,$1E(a0)
0000758A 6600                       		bne.s	loc_5B80
0000758C                            
0000758C                            loc_5B78:
0000758C 3028 003E                  		move.w	$3E(a0),d0
00007590 D168 0026                  		add.w	d0,$26(a0)
00007594                            
00007594                            loc_5B80:
00007594 1028 0026                  		move.b	$26(a0),d0
00007598 6700                       		beq.s	loc_5B8C
0000759A 0C00 0080                  		cmpi.b	#$80,d0
0000759E 6600                       		bne.s	loc_5B96
000075A0                            
000075A0                            loc_5B8C:
000075A0 4268 003E                  		clr.w	$3E(a0)
000075A4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000075AA                            
000075AA                            loc_5B96:
000075AA 4EB9 0000 2B7C             		jsr	(CalcSine).l
000075B0 7800                       		moveq	#0,d4
000075B2 1828 003C                  		move.b	$3C(a0),d4
000075B6 C3C4                       		muls.w	d4,d1
000075B8 E081                       		asr.l	#8,d1
000075BA C1C4                       		muls.w	d4,d0
000075BC E080                       		asr.l	#8,d0
000075BE D268 0038                  		add.w	$38(a0),d1
000075C2 D068 003A                  		add.w	$3A(a0),d0
000075C6 3141 0008                  		move.w	d1,8(a0)
000075CA 3140 000A                  		move.w	d0,$A(a0)
000075CE                            
000075CE                            locret_5BBA:
000075CE 4E75                       		rts	
000075D0                            ; ===========================================================================
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            Map_obj8B:
000075D0                            	include "_maps\obj8B.asm"
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000075D0                            ; ---------------------------------------------------------------------------
000075D0 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000075D4 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000075D8 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000075DC 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000075E0 08                         byte_5BCC:	dc.b 8
000075E1 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000075E6 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000075EB E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000075F0 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000075F5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000075FA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000075FF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007604 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007609 08                         byte_5BF5:	dc.b 8
0000760A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000760F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00007614 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00007619 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000761E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00007623 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007628 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000762D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007632 08                         byte_5C1E:	dc.b 8
00007633 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00007638 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000763D E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00007642 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00007647 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000764C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00007651 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007656 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000765B 08                         byte_5C47:	dc.b 8
0000765C E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00007661 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00007666 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000766B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00007670 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00007675 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000767A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000767F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007684 0C                         byte_5C70:	dc.b $C
00007685 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000768A F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000768F 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00007694 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00007699 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000769E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000076A3 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000076A8 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000076AD 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000076B2 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000076B7 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000076BC 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000076C1 0A                         byte_5CAD:	dc.b $A
000076C2 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000076C7 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000076CC F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000076D1 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000076D6 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000076DB F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000076E0 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000076E5 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000076EA 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000076EF 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000076F4 0A                         byte_5CE0:	dc.b $A
000076F5 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000076FA E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000076FF EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00007704 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00007709 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000770E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00007713 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00007718 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000771D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00007722 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00007727 0C                         byte_5D13:	dc.b $C
00007728 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000772D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00007732 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00007737 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000773C F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00007741 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00007746 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000774B 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00007750 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00007755 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000775A 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000775F 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00007764                            		even
00007764                            		even
00007764                            
00007764                            ; ---------------------------------------------------------------------------
00007764                            ; Ending sequence demos
00007764                            ; ---------------------------------------------------------------------------
00007764                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00007792                            		even
00007792                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000077D2                            		even
000077D2                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00007802                            		even
00007802                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00007832                            		even
00007832                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00007852                            		even
00007852                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00007872                            		even
00007872                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000078A2                            		even
000078A2                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000078D2                            		even
000078D2                            
000078D2                            ; ---------------------------------------------------------------------------
000078D2                            ; Subroutine to	load level boundaries and start	locations
000078D2                            ; ---------------------------------------------------------------------------
000078D2                            
000078D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078D2                            
000078D2                            
000078D2                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000078D2 7000                       		moveq	#0,d0
000078D4 11C0 F740                  		move.b	d0,($FFFFF740).w
000078D8 11C0 F741                  		move.b	d0,($FFFFF741).w
000078DC 11C0 F746                  		move.b	d0,($FFFFF746).w
000078E0 11C0 F748                  		move.b	d0,($FFFFF748).w
000078E4 11C0 F742                  		move.b	d0,($FFFFF742).w
000078E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000078EC ED08                       		lsl.b	#6,d0
000078EE E848                       		lsr.w	#4,d0
000078F0 3200                       		move.w	d0,d1
000078F2 D040                       		add.w	d0,d0
000078F4 D041                       		add.w	d1,d0
000078F6 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000078FA 3018                       		move.w	(a0)+,d0
000078FC 31C0 F730                  		move.w	d0,($FFFFF730).w
00007900 2018                       		move.l	(a0)+,d0
00007902 21C0 F728                  		move.l	d0,($FFFFF728).w
00007906 21C0 F720                  		move.l	d0,($FFFFF720).w
0000790A 2018                       		move.l	(a0)+,d0
0000790C 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00007910 21C0 F724                  		move.l	d0,($FFFFF724).w
00007914 3038 F728                  		move.w	($FFFFF728).w,d0
00007918 0640 0240                  		addi.w	#$240,d0
0000791C 31C0 F732                  		move.w	d0,($FFFFF732).w
00007920 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00007926 3018                       		move.w	(a0)+,d0
00007928 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000792C 6000 0000                  		bra.w	LevSz_ChkLamp
00007930                            ; ===========================================================================
00007930                            ; ---------------------------------------------------------------------------
00007930                            ; Level size array and ending start location array
00007930                            ; ---------------------------------------------------------------------------
00007930                            LevelSizeArray:	incbin	misc\lvl_size.bin
00007A80                            		even
00007A80                            
00007A80                            EndingStLocArray:
00007A80                            		incbin	misc\sloc_end.bin
00007AA0                            		even
00007AA0                            
00007AA0                            ; ===========================================================================
00007AA0                            
00007AA0                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00007AA0 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00007AA4 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007AA6 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00007AAC 3238 D008                  		move.w	($FFFFD008).w,d1
00007AB0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007AB4 6000                       		bra.s	loc_60D0
00007AB6                            ; ===========================================================================
00007AB6                            
00007AB6                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00007AB6 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007ABA ED08                       		lsl.b	#6,d0
00007ABC E848                       		lsr.w	#4,d0
00007ABE 43F9 0000 0000             		lea	(StartLocArray).l,a1			; MJ: load location array
00007AC4 43F1 0000                  		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
00007AC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00007ACC 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007ACE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007AD2 5340                       		subq.w	#1,d0
00007AD4 E548                       		lsl.w	#2,d0
00007AD6 43FB 00A8                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007ADA                            
00007ADA                            LevSz_SonicPos:
00007ADA 7200                       		moveq	#0,d1
00007ADC 3219                       		move.w	(a1)+,d1
00007ADE 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00007AE2 7000                       		moveq	#0,d0
00007AE4 3011                       		move.w	(a1),d0
00007AE6 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00007AEA 1438 F600                  		move.b	($FFFFF600).w,d2			; MJ: load game mode
00007AEE 0242 00FC                  		andi.w	#$00FC,d2				; MJ: keep in range
00007AF2 0C02 0004                  		cmpi.b	#$04,d2					; MJ: is screen mode at title?
00007AF6 6600 0000                  		bne	loc_60D0				; MJ: if not, branch
00007AFA 323C 0050                  		move.w	#$0050,d1				; MJ: set positions for title screen
00007AFE 303C 03B0                  		move.w	#$03B0,d0				; MJ: ''
00007B02 31C1 D008                  		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
00007B06 31C0 D00C                  		move.w	d0,($FFFFD00C).w			; MJ: ''
00007B0A                            
00007B0A                            loc_60D0:				; XREF: LevSz_ChkLamp
00007B0A 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00007B0E 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00007B12 743F                       		moveq	#63,d2				; begin a 64-step loop
00007B14                            @looppoint:
00007B14 34C1                       		move.w	d1,(a2)+			; fill in X
00007B16 34C0                       		move.w	d0,(a2)+			; fill in Y
00007B18 51CA FFFA                  		dbf	d2,@looppoint		; loop
00007B1C 0441 00A0                  		subi.w	#$A0,d1
00007B20 6400                       		bcc.s	loc_60D8
00007B22 7200                       		moveq	#0,d1
00007B24                            
00007B24                            loc_60D8:
00007B24 3438 F72A                  		move.w	($FFFFF72A).w,d2
00007B28 B242                       		cmp.w	d2,d1
00007B2A 6500                       		bcs.s	loc_60E2
00007B2C 3202                       		move.w	d2,d1
00007B2E                            
00007B2E                            loc_60E2:
00007B2E 31C1 F700                  		move.w	d1,($FFFFF700).w
00007B32 0440 0060                  		subi.w	#$60,d0
00007B36 6400                       		bcc.s	loc_60EE
00007B38 7000                       		moveq	#0,d0
00007B3A                            
00007B3A                            loc_60EE:
00007B3A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007B3E 6D00                       		blt.s	loc_60F8
00007B40 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007B44                            
00007B44                            loc_60F8:
00007B44 31C0 F704                  		move.w	d0,($FFFFF704).w
00007B48 6100 0000                  		bsr.w	BgScrollSpeed
00007B4C 7000                       		moveq	#0,d0
00007B4E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007B52 E508                       		lsl.b	#2,d0
00007B54 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00007B5A 6000 0000                  		bra.w	LevSz_Unk
00007B5E                            
00007B5E                            ; ===========================================================================
00007B5E                            ; ---------------------------------------------------------------------------
00007B5E                            ; MJ: Sonic start location array
00007B5E                            ; ---------------------------------------------------------------------------
00007B5E                            
00007B5E                            StartLocArray:	incbin	startpos\ghz1.bin
00007B62                            		incbin	startpos\ghz2.bin
00007B66                            		incbin	startpos\ghz3.bin
00007B6A                            		incbin	startpos\ghz4.bin
00007B6E                            		incbin	startpos\lz1.bin
00007B72                            		incbin	startpos\lz2.bin
00007B76                            		incbin	startpos\lz3.bin
00007B7A                            		incbin	startpos\lz4.bin
00007B7E                            		incbin	startpos\mz1.bin
00007B82                            		incbin	startpos\mz2.bin
00007B86                            		incbin	startpos\mz3.bin
00007B8A                            		incbin	startpos\mz4.bin
00007B8E                            		incbin	startpos\slz1.bin
00007B92                            		incbin	startpos\slz2.bin
00007B96                            		incbin	startpos\slz3.bin
00007B9A                            		incbin	startpos\slz4.bin
00007B9E                            		incbin	startpos\syz1.bin
00007BA2                            		incbin	startpos\syz2.bin
00007BA6                            		incbin	startpos\syz3.bin
00007BAA                            		incbin	startpos\syz4.bin
00007BAE                            		incbin	startpos\sbz1.bin
00007BB2                            		incbin	startpos\sbz2.bin
00007BB6                            		incbin	startpos\sbz3.bin
00007BBA                            		incbin	startpos\sbz4.bin
00007BBE                            		incbin	startpos\end1.bin
00007BC2                            		incbin	startpos\end2.bin
00007BC6                            		incbin	startpos\end3.bin
00007BCA                            		incbin	startpos\end4.bin
00007BCE                            		even
00007BCE                            
00007BCE                            ; ===========================================================================
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            ; Which	256x256	tiles contain loops or roll-tunnels
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00007BCE                            ; loop,	loop, tunnel, tunnel
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            LoopTileNums:	incbin	misc\loopnums.bin
00007BEA                            		even
00007BEA                            
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            LevSz_Unk:				; XREF: LevelSizeLoad
00007BEA 7000                       		moveq	#0,d0
00007BEC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BF0 E748                       		lsl.w	#3,d0
00007BF2 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00007BF6 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00007BFA 24D9                       		move.l	(a1)+,(a2)+
00007BFC 24D9                       		move.l	(a1)+,(a2)+
00007BFE 4E75                       		rts	
00007C00                            ; End of function LevelSizeLoad
00007C00                            
00007C00                            ; ===========================================================================
00007C00                            dword_61B4:	
00007C00 0070 0100 0100 0100        		dc.l $700100, $1000100
00007C08 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C10 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C18 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C20 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C28 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C30 0070 0100 0100 0100        		dc.l $700100, $1000100
00007C38 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C40                            
00007C40                            ; ---------------------------------------------------------------------------
00007C40                            ; Subroutine to	set scroll speed of some backgrounds
00007C40                            ; ---------------------------------------------------------------------------
00007C40                            
00007C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C40                            
00007C40                            
00007C40                            BgScrollSpeed:				; XREF: LevelSizeLoad
00007C40 4A38 FE30                  		tst.b	($FFFFFE30).w
00007C44 6600                       		bne.s	loc_6206
00007C46 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C4A 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C4E 31C1 F708                  		move.w	d1,($FFFFF708).w
00007C52 31C1 F710                  		move.w	d1,($FFFFF710).w
00007C56 31C1 F718                  		move.w	d1,($FFFFF718).w
00007C5A                            
00007C5A                            loc_6206:
00007C5A 7400                       		moveq	#0,d2
00007C5C 1438 FE10                  		move.b	($FFFFFE10).w,d2
00007C60 D442                       		add.w	d2,d2
00007C62 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007C66 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007C6A                            ; End of function BgScrollSpeed
00007C6A                            
00007C6A                            ; ===========================================================================
00007C6A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007C6E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007C72 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007C76 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_TS-BgScroll_Index
00007C7A                            ; ===========================================================================
00007C7A                            
00007C7A                            BgScroll_TS:				; XREF: BgScroll_Index
00007C7A 4E75                       		rts	
00007C7C                            ; ===========================================================================
00007C7C                            
00007C7C                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007C7C 6000 0000                  		bra.w	Deform_GHZ
00007C80                            ; ===========================================================================
00007C80                            
00007C80                            BgScroll_LZ:				; XREF: BgScroll_Index
00007C80 E280                       		asr.l	#1,d0
00007C82 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C86 4E75                       		rts	
00007C88                            ; ===========================================================================
00007C88                            
00007C88                            BgScroll_MZ:				; XREF: BgScroll_Index
00007C88 4E75                       		rts	
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007C8A E280                       		asr.l	#1,d0
00007C8C 0640 00C0                  		addi.w	#$C0,d0
00007C90 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C94 4E75                       		rts	
00007C96                            ; ===========================================================================
00007C96                            
00007C96                            BgScroll_SYZ:				; XREF: BgScroll_Index
00007C96 E980                       		asl.l	#4,d0
00007C98 2400                       		move.l	d0,d2
00007C9A E380                       		asl.l	#1,d0
00007C9C D082                       		add.l	d2,d0
00007C9E E080                       		asr.l	#8,d0
00007CA0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007CA4 31C0 F714                  		move.w	d0,($FFFFF714).w
00007CA8 4E75                       		rts	
00007CAA                            ; ===========================================================================
00007CAA                            
00007CAA                            BgScroll_SBZ:				; XREF: BgScroll_Index
00007CAA E980                       		asl.l	#4,d0
00007CAC E380                       		asl.l	#1,d0
00007CAE E080                       		asr.l	#8,d0
00007CB0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007CB4 4E75                       		rts	
00007CB6                            ; ===========================================================================
00007CB6                            
00007CB6                            BgScroll_End:				; XREF: BgScroll_Index
00007CB6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007CBC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007CC2 4E75                       		rts	
00007CC4                            ; ===========================================================================
00007CC4 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007CCA 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007CD0 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00007CD6 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007CDC 4E75                       		rts
00007CDE                            
00007CDE                            ; ---------------------------------------------------------------------------
00007CDE                            ; Background layer deformation subroutines
00007CDE                            ; ---------------------------------------------------------------------------
00007CDE                            
00007CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CDE                            
00007CDE                            
00007CDE                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007CDE 4A38 F744                  		tst.b	($FFFFF744).w
00007CE2 6700                       		beq.s	loc_628E
00007CE4 4E75                       		rts	
00007CE6                            ; ===========================================================================
00007CE6                            
00007CE6                            loc_628E:
00007CE6 4278 F754                  		clr.w	($FFFFF754).w
00007CEA 4278 F756                  		clr.w	($FFFFF756).w
00007CEE 4278 F758                  		clr.w	($FFFFF758).w
00007CF2 4278 F75A                  		clr.w	($FFFFF75A).w
00007CF6 6100 0000                  		bsr.w	ScrollHoriz
00007CFA 6100 0000                  		bsr.w	ScrollVertical
00007CFE 6100 0000                  		bsr.w	DynScrResizeLoad
00007D02 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007D08 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007D0E 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007D14 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D1A 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007D20 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007D26 7000                       		moveq	#0,d0
00007D28 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D2C D040                       		add.w	d0,d0
00007D2E 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007D32 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007D36                            ; End of function DeformBgLayer
00007D36                            
00007D36                            ; ===========================================================================
00007D36                            ; ---------------------------------------------------------------------------
00007D36                            ; Offset index for background layer deformation	code
00007D36                            ; ---------------------------------------------------------------------------
00007D36 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007D3A 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007D3E 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007D42 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_TS-Deform_Index
00007D46                            ; ---------------------------------------------------------------------------
00007D46                            ; Green	Hill Zone background layer deformation code
00007D46                            ; ---------------------------------------------------------------------------
00007D46                            
00007D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D46                            
00007D46                            Deform_TS:				; XREF: Deform_Index
00007D46 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007D4A 48C4                       		ext.l	d4
00007D4C EB84                       		asl.l	#5,d4
00007D4E 2204                       		move.l	d4,d1
00007D50 E384                       		asl.l	#1,d4
00007D52 D881                       		add.l	d1,d4
00007D54 7A00                       		moveq	#0,d5
00007D56 6100 0000                  		bsr.w	ScrollBlock1
00007D5A 6100 0000                  		bsr.w	ScrollBlock4
00007D5E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007D62 3038 F704                  		move.w	($FFFFF704).w,d0
00007D66 0240 07FF                  		andi.w	#$7FF,d0
00007D6A EA48                       		lsr.w	#5,d0
00007D6C 4440                       		neg.w	d0
00007D6E 0640 0026                  		addi.w	#$26,d0
00007D72 31C0 F714                  		move.w	d0,($FFFFF714).w
00007D76 3800                       		move.w	d0,d4
00007D78 6100 0000                  		bsr.w	ScrollBlock3
00007D7C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D82 323C 006F                  		move.w	#$6F,d1
00007D86 9244                       		sub.w	d4,d1
00007D88 3038 F700                  		move.w	($FFFFF700).w,d0
00007D8C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007D92 6600                       		bne.s	Deform_TS2
00007D94 7000                       		moveq	#0,d0
00007D96                            
00007D96                            Deform_TS2:
00007D96 4440                       		neg.w	d0
00007D98 4840                       		swap	d0
00007D9A 3038 F708                  		move.w	($FFFFF708).w,d0
00007D9E 4440                       		neg.w	d0
00007DA0                            
00007DA0                            Deform_TS3:
00007DA0 22C0                       		move.l	d0,(a1)+
00007DA2 51C9 FFFC                  		dbf	d1,Deform_TS3
00007DA6 323C 0027                  		move.w	#$27,d1
00007DAA 3038 F710                  		move.w	($FFFFF710).w,d0
00007DAE 4440                       		neg.w	d0
00007DB0                            
00007DB0                            Deform_TS4:
00007DB0 22C0                       		move.l	d0,(a1)+
00007DB2 51C9 FFFC                  		dbf	d1,Deform_TS4
00007DB6 3038 F710                  		move.w	($FFFFF710).w,d0
00007DBA 0640 0000                  		addi.w	#0,d0
00007DBE 3438 F700                  		move.w	($FFFFF700).w,d2
00007DC2 0642 FE00                  		addi.w	#-$200,d2
00007DC6 9440                       		sub.w	d0,d2
00007DC8 48C2                       		ext.l	d2
00007DCA E182                       		asl.l	#8,d2
00007DCC 85FC 0068                  		divs.w	#$68,d2
00007DD0 48C2                       		ext.l	d2
00007DD2 E182                       		asl.l	#8,d2
00007DD4 7600                       		moveq	#0,d3
00007DD6 3600                       		move.w	d0,d3
00007DD8 323C 0047                  		move.w	#$47,d1
00007DDC D244                       		add.w	d4,d1
00007DDE                            
00007DDE                            Deform_TS5:
00007DDE 3003                       		move.w	d3,d0
00007DE0 4440                       		neg.w	d0
00007DE2 22C0                       		move.l	d0,(a1)+
00007DE4 4843                       		swap	d3
00007DE6 D682                       		add.l	d2,d3
00007DE8 4843                       		swap	d3
00007DEA 51C9 FFF2                  		dbf	d1,Deform_TS5
00007DEE 4E75                       		rts	
00007DF0                            ; End of function Deform_TS
00007DF0                            
00007DF0                            Deform_GHZ:				; XREF: Deform_Index
00007DF0 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007DF4 48C4                       		ext.l	d4
00007DF6 EB84                       		asl.l	#5,d4
00007DF8 2204                       		move.l	d4,d1
00007DFA E384                       		asl.l	#1,d4
00007DFC D881                       		add.l	d1,d4
00007DFE 7A00                       		moveq	#0,d5
00007E00 6100 0000                  		bsr.w	ScrollBlock1
00007E04 6100 0000                  		bsr.w	ScrollBlock4
00007E08 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E0C 3038 F704                  		move.w	($FFFFF704).w,d0
00007E10 0240 07FF                  		andi.w	#$7FF,d0
00007E14 EA48                       		lsr.w	#5,d0
00007E16 4440                       		neg.w	d0
00007E18 0640 0026                  		addi.w	#$26,d0
00007E1C 31C0 F714                  		move.w	d0,($FFFFF714).w
00007E20 3800                       		move.w	d0,d4
00007E22 6100 0000                  		bsr.w	ScrollBlock3
00007E26 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E2C 323C 006F                  		move.w	#$6F,d1
00007E30 9244                       		sub.w	d4,d1
00007E32 3038 F700                  		move.w	($FFFFF700).w,d0
00007E36 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007E3C 6600                       		bne.s	loc_633C
00007E3E 7000                       		moveq	#0,d0
00007E40                            
00007E40                            loc_633C:
00007E40 4440                       		neg.w	d0
00007E42 4840                       		swap	d0
00007E44 3038 F708                  		move.w	($FFFFF708).w,d0
00007E48 4440                       		neg.w	d0
00007E4A                            
00007E4A                            loc_6346:
00007E4A 22C0                       		move.l	d0,(a1)+
00007E4C 51C9 FFFC                  		dbf	d1,loc_6346
00007E50 323C 0027                  		move.w	#$27,d1
00007E54 3038 F710                  		move.w	($FFFFF710).w,d0
00007E58 4440                       		neg.w	d0
00007E5A                            
00007E5A                            loc_6356:
00007E5A 22C0                       		move.l	d0,(a1)+
00007E5C 51C9 FFFC                  		dbf	d1,loc_6356
00007E60 3038 F710                  		move.w	($FFFFF710).w,d0
00007E64 0640 0000                  		addi.w	#0,d0
00007E68 3438 F700                  		move.w	($FFFFF700).w,d2
00007E6C 0642 FE00                  		addi.w	#-$200,d2
00007E70 9440                       		sub.w	d0,d2
00007E72 48C2                       		ext.l	d2
00007E74 E182                       		asl.l	#8,d2
00007E76 85FC 0068                  		divs.w	#$68,d2
00007E7A 48C2                       		ext.l	d2
00007E7C E182                       		asl.l	#8,d2
00007E7E 7600                       		moveq	#0,d3
00007E80 3600                       		move.w	d0,d3
00007E82 323C 0047                  		move.w	#$47,d1
00007E86 D244                       		add.w	d4,d1
00007E88                            
00007E88                            loc_6384:
00007E88 3003                       		move.w	d3,d0
00007E8A 4440                       		neg.w	d0
00007E8C 22C0                       		move.l	d0,(a1)+
00007E8E 4843                       		swap	d3
00007E90 D682                       		add.l	d2,d3
00007E92 4843                       		swap	d3
00007E94 51C9 FFF2                  		dbf	d1,loc_6384
00007E98 4E75                       		rts	
00007E9A                            ; End of function Deform_GHZ
00007E9A                            
00007E9A                            ; ---------------------------------------------------------------------------
00007E9A                            ; Labyrinth Zone background layer deformation code
00007E9A                            ; ---------------------------------------------------------------------------
00007E9A                            
00007E9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E9A                            
00007E9A                            
00007E9A                            Deform_LZ:				; XREF: Deform_Index
00007E9A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E9E 48C4                       		ext.l	d4
00007EA0 EF84                       		asl.l	#7,d4
00007EA2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007EA6 48C5                       		ext.l	d5
00007EA8 EF85                       		asl.l	#7,d5
00007EAA 6100 0000                  		bsr.w	ScrollBlock1
00007EAE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007EB4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007EB8 323C 00DF                  		move.w	#$DF,d1
00007EBC 3038 F700                  		move.w	($FFFFF700).w,d0
00007EC0 4440                       		neg.w	d0
00007EC2 4840                       		swap	d0
00007EC4 3038 F708                  		move.w	($FFFFF708).w,d0
00007EC8 4440                       		neg.w	d0
00007ECA                            
00007ECA                            loc_63C6:
00007ECA 22C0                       		move.l	d0,(a1)+
00007ECC 51C9 FFFC                  		dbf	d1,loc_63C6
00007ED0 3038 F646                  		move.w	($FFFFF646).w,d0
00007ED4 9078 F704                  		sub.w	($FFFFF704).w,d0
00007ED8 4E75                       		rts	
00007EDA                            ; End of function Deform_LZ
00007EDA                            
00007EDA                            ; ---------------------------------------------------------------------------
00007EDA                            ; Marble Zone background layer deformation code
00007EDA                            ; ---------------------------------------------------------------------------
00007EDA                            
00007EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EDA                            
00007EDA                            
00007EDA                            Deform_MZ:				; XREF: Deform_Index
00007EDA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007EDE 48C4                       		ext.l	d4
00007EE0 ED84                       		asl.l	#6,d4
00007EE2 2204                       		move.l	d4,d1
00007EE4 E384                       		asl.l	#1,d4
00007EE6 D881                       		add.l	d1,d4
00007EE8 7A00                       		moveq	#0,d5
00007EEA 6100 0000                  		bsr.w	ScrollBlock1
00007EEE 303C 0200                  		move.w	#$200,d0
00007EF2 3238 F704                  		move.w	($FFFFF704).w,d1
00007EF6 0441 01C8                  		subi.w	#$1C8,d1
00007EFA 6500                       		bcs.s	loc_6402
00007EFC 3401                       		move.w	d1,d2
00007EFE D241                       		add.w	d1,d1
00007F00 D242                       		add.w	d2,d1
00007F02 E441                       		asr.w	#2,d1
00007F04 D041                       		add.w	d1,d0
00007F06                            
00007F06                            loc_6402:
00007F06 31C0 F714                  		move.w	d0,($FFFFF714).w
00007F0A 6100 0000                  		bsr.w	ScrollBlock3
00007F0E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F14 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F18 323C 00DF                  		move.w	#$DF,d1
00007F1C 3038 F700                  		move.w	($FFFFF700).w,d0
00007F20 4440                       		neg.w	d0
00007F22 4840                       		swap	d0
00007F24 3038 F708                  		move.w	($FFFFF708).w,d0
00007F28 4440                       		neg.w	d0
00007F2A                            
00007F2A                            loc_6426:
00007F2A 22C0                       		move.l	d0,(a1)+
00007F2C 51C9 FFFC                  		dbf	d1,loc_6426
00007F30 4E75                       		rts	
00007F32                            ; End of function Deform_MZ
00007F32                            
00007F32                            ; ---------------------------------------------------------------------------
00007F32                            ; Star Light Zone background layer deformation code
00007F32                            ; ---------------------------------------------------------------------------
00007F32                            
00007F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F32                            
00007F32                            
00007F32                            Deform_SLZ:				; XREF: Deform_Index
00007F32 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F36 48C4                       		ext.l	d4
00007F38 EF84                       		asl.l	#7,d4
00007F3A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F3E 48C5                       		ext.l	d5
00007F40 EF85                       		asl.l	#7,d5
00007F42 6100 0000                  		bsr.w	ScrollBlock2
00007F46 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F4C 6100 0000                  		bsr.w	Deform_SLZ_2
00007F50 45F8 A800                  		lea	($FFFFA800).w,a2
00007F54 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007F58 3400                       		move.w	d0,d2
00007F5A 0440 00C0                  		subi.w	#$C0,d0
00007F5E 0240 03F0                  		andi.w	#$3F0,d0
00007F62 E648                       		lsr.w	#3,d0
00007F64 45F2 0000                  		lea	(a2,d0.w),a2
00007F68 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F6C 323C 000E                  		move.w	#$E,d1
00007F70 3038 F700                  		move.w	($FFFFF700).w,d0
00007F74 4440                       		neg.w	d0
00007F76 4840                       		swap	d0
00007F78 0242 000F                  		andi.w	#$F,d2
00007F7C D442                       		add.w	d2,d2
00007F7E 301A                       		move.w	(a2)+,d0
00007F80 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007F84                            ; ===========================================================================
00007F84                            
00007F84                            loc_6480:				; XREF: Deform_SLZ
00007F84 301A                       		move.w	(a2)+,d0
00007F86                            
00007F86                            loc_6482:
00007F86 22C0                       		move.l	d0,(a1)+
00007F88 22C0                       		move.l	d0,(a1)+
00007F8A 22C0                       		move.l	d0,(a1)+
00007F8C 22C0                       		move.l	d0,(a1)+
00007F8E 22C0                       		move.l	d0,(a1)+
00007F90 22C0                       		move.l	d0,(a1)+
00007F92 22C0                       		move.l	d0,(a1)+
00007F94 22C0                       		move.l	d0,(a1)+
00007F96 22C0                       		move.l	d0,(a1)+
00007F98 22C0                       		move.l	d0,(a1)+
00007F9A 22C0                       		move.l	d0,(a1)+
00007F9C 22C0                       		move.l	d0,(a1)+
00007F9E 22C0                       		move.l	d0,(a1)+
00007FA0 22C0                       		move.l	d0,(a1)+
00007FA2 22C0                       		move.l	d0,(a1)+
00007FA4 22C0                       		move.l	d0,(a1)+
00007FA6 51C9 FFDC                  		dbf	d1,loc_6480
00007FAA 4E75                       		rts	
00007FAC                            ; End of function Deform_SLZ
00007FAC                            
00007FAC                            
00007FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FAC                            
00007FAC                            
00007FAC                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007FAC 43F8 A800                  		lea	($FFFFA800).w,a1
00007FB0 3438 F700                  		move.w	($FFFFF700).w,d2
00007FB4 4442                       		neg.w	d2
00007FB6 3002                       		move.w	d2,d0
00007FB8 E640                       		asr.w	#3,d0
00007FBA 9042                       		sub.w	d2,d0
00007FBC 48C0                       		ext.l	d0
00007FBE E980                       		asl.l	#4,d0
00007FC0 81FC 001C                  		divs.w	#$1C,d0
00007FC4 48C0                       		ext.l	d0
00007FC6 E980                       		asl.l	#4,d0
00007FC8 E180                       		asl.l	#8,d0
00007FCA 7600                       		moveq	#0,d3
00007FCC 3602                       		move.w	d2,d3
00007FCE 323C 001B                  		move.w	#$1B,d1
00007FD2                            
00007FD2                            loc_64CE:
00007FD2 32C3                       		move.w	d3,(a1)+
00007FD4 4843                       		swap	d3
00007FD6 D680                       		add.l	d0,d3
00007FD8 4843                       		swap	d3
00007FDA 51C9 FFF6                  		dbf	d1,loc_64CE
00007FDE 3002                       		move.w	d2,d0
00007FE0 E640                       		asr.w	#3,d0
00007FE2 323C 0004                  		move.w	#4,d1
00007FE6                            
00007FE6                            loc_64E2:
00007FE6 32C0                       		move.w	d0,(a1)+
00007FE8 51C9 FFFC                  		dbf	d1,loc_64E2
00007FEC 3002                       		move.w	d2,d0
00007FEE E440                       		asr.w	#2,d0
00007FF0 323C 0004                  		move.w	#4,d1
00007FF4                            
00007FF4                            loc_64F0:
00007FF4 32C0                       		move.w	d0,(a1)+
00007FF6 51C9 FFFC                  		dbf	d1,loc_64F0
00007FFA 3002                       		move.w	d2,d0
00007FFC E240                       		asr.w	#1,d0
00007FFE 323C 001D                  		move.w	#$1D,d1
00008002                            
00008002                            loc_64FE:
00008002 32C0                       		move.w	d0,(a1)+
00008004 51C9 FFFC                  		dbf	d1,loc_64FE
00008008 4E75                       		rts	
0000800A                            ; End of function Deform_SLZ_2
0000800A                            
0000800A                            ; ---------------------------------------------------------------------------
0000800A                            ; Spring Yard Zone background layer deformation	code
0000800A                            ; ---------------------------------------------------------------------------
0000800A                            
0000800A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000800A                            
0000800A                            
0000800A                            Deform_SYZ:				; XREF: Deform_Index
0000800A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000800E 48C4                       		ext.l	d4
00008010 ED84                       		asl.l	#6,d4
00008012 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008016 48C5                       		ext.l	d5
00008018 E985                       		asl.l	#4,d5
0000801A 2205                       		move.l	d5,d1
0000801C E385                       		asl.l	#1,d5
0000801E DA81                       		add.l	d1,d5
00008020 6100 0000                  		bsr.w	ScrollBlock1
00008024 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000802A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000802E 323C 00DF                  		move.w	#$DF,d1
00008032 3038 F700                  		move.w	($FFFFF700).w,d0
00008036 4440                       		neg.w	d0
00008038 4840                       		swap	d0
0000803A 3038 F708                  		move.w	($FFFFF708).w,d0
0000803E 4440                       		neg.w	d0
00008040                            
00008040                            loc_653C:
00008040 22C0                       		move.l	d0,(a1)+
00008042 51C9 FFFC                  		dbf	d1,loc_653C
00008046 4E75                       		rts	
00008048                            ; End of function Deform_SYZ
00008048                            
00008048                            ; ---------------------------------------------------------------------------
00008048                            ; Scrap	Brain Zone background layer deformation	code
00008048                            ; ---------------------------------------------------------------------------
00008048                            
00008048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008048                            
00008048                            
00008048                            Deform_SBZ:				; XREF: Deform_Index
00008048 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000804C 48C4                       		ext.l	d4
0000804E ED84                       		asl.l	#6,d4
00008050 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008054 48C5                       		ext.l	d5
00008056 E985                       		asl.l	#4,d5
00008058 E385                       		asl.l	#1,d5
0000805A 6100 0000                  		bsr.w	ScrollBlock1
0000805E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008064 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008068 323C 00DF                  		move.w	#$DF,d1
0000806C 3038 F700                  		move.w	($FFFFF700).w,d0
00008070 4440                       		neg.w	d0
00008072 4840                       		swap	d0
00008074 3038 F708                  		move.w	($FFFFF708).w,d0
00008078 4440                       		neg.w	d0
0000807A                            
0000807A                            loc_6576:
0000807A 22C0                       		move.l	d0,(a1)+
0000807C 51C9 FFFC                  		dbf	d1,loc_6576
00008080 4E75                       		rts	
00008082                            ; End of function Deform_SBZ
00008082                            
00008082                            ; ---------------------------------------------------------------------------
00008082                            ; Subroutine to	scroll the level horizontally as Sonic moves
00008082                            ; ---------------------------------------------------------------------------
00008082                            
00008082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008082                            
00008082                            
00008082                            ScrollHoriz:				; XREF: DeformBgLayer
00008082 3838 F700                  		move.w	($FFFFF700).w,d4
00008086 6100                       		bsr.s	ScrollHoriz2
00008088 3038 F700                  		move.w	($FFFFF700).w,d0
0000808C 0240 0010                  		andi.w	#$10,d0
00008090 1238 F74A                  		move.b	($FFFFF74A).w,d1
00008094 B300                       		eor.b	d1,d0
00008096 6600                       		bne.s	locret_65B0
00008098 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000809E 3038 F700                  		move.w	($FFFFF700).w,d0
000080A2 9044                       		sub.w	d4,d0
000080A4 6A00                       		bpl.s	loc_65AA
000080A6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000080AC 4E75                       		rts	
000080AE                            ; ===========================================================================
000080AE                            
000080AE                            loc_65AA:
000080AE 08F8 0003 F754             		bset	#3,($FFFFF754).w
000080B4                            
000080B4                            locret_65B0:
000080B4 4E75                       		rts	
000080B6                            ; End of function ScrollHoriz
000080B6                            
000080B6                            
000080B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080B6                            
000080B6                            
000080B6                            ScrollHoriz2:				; XREF: ScrollHoriz
000080B6 3038 D008                  		move.w	($FFFFD008).w,d0
000080BA 9078 F700                  		sub.w	($FFFFF700).w,d0
000080BE 0440 0090                  		subi.w	#$90,d0
000080C2 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
000080C4 0440 0010                  		subi.w	#$10,d0
000080C8 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
000080CA 4278 F73A                  		clr.w	($FFFFF73A).w
000080CE 4E75                       		rts
000080D0                            ; ===========================================================================
000080D0                            
000080D0                            loc_65CC:
000080D0 0C40 0010                  		cmpi.w	#$10,d0
000080D4 6500                       		bcs.s	loc_65D6
000080D6 303C 0010                  		move.w	#$10,d0
000080DA                            
000080DA                            loc_65D6:
000080DA D078 F700                  		add.w	($FFFFF700).w,d0
000080DE B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000080E2 6D00                       		blt.s	loc_65E4
000080E4 3038 F72A                  		move.w	($FFFFF72A).w,d0
000080E8                            
000080E8                            loc_65E4:
000080E8 3200                       		move.w	d0,d1
000080EA 9278 F700                  		sub.w	($FFFFF700).w,d1
000080EE E141                       		asl.w	#8,d1
000080F0 31C0 F700                  		move.w	d0,($FFFFF700).w
000080F4 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000080F8 4E75                       		rts	
000080FA                            ; ===========================================================================
000080FA                            
000080FA                            loc_65F6:
000080FA 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
000080FE 6400                       		bcc.s	Left_NoMax				; if not, branch
00008100 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
00008104                            
00008104                            Left_NoMax:
00008104 D078 F700                  		add.w	($FFFFF700).w,d0
00008108 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000810C 6EDA                       		bgt.s	loc_65E4
0000810E 3038 F728                  		move.w	($FFFFF728).w,d0
00008112 60D4                       		bra.s	loc_65E4
00008114                            ; End of function ScrollHoriz2
00008114                            
00008114                            ; ===========================================================================
00008114 4A40                       		tst.w	d0
00008116 6A00                       		bpl.s	loc_6610
00008118 303C FFFE                  		move.w	#-2,d0
0000811C 60DC                       		bra.s	loc_65F6
0000811E                            ; ===========================================================================
0000811E                            
0000811E                            loc_6610:
0000811E 303C 0002                  		move.w	#2,d0
00008122 60AC                       		bra.s	loc_65CC
00008124                            
00008124                            ; ---------------------------------------------------------------------------
00008124                            ; Subroutine to	scroll the level vertically as Sonic moves
00008124                            ; ---------------------------------------------------------------------------
00008124                            
00008124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008124                            
00008124                            
00008124                            ScrollVertical:				; XREF: DeformBgLayer
00008124 7200                       		moveq	#0,d1
00008126 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000812A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000812E 0838 0002 D022             		btst	#2,($FFFFD022).w
00008134 6700                       		beq.s	loc_662A
00008136 5B40                       		subq.w	#5,d0
00008138                            
00008138                            loc_662A:
00008138 0838 0001 D022             		btst	#1,($FFFFD022).w
0000813E 6700                       		beq.s	loc_664A
00008140 0640 0020                  		addi.w	#$20,d0
00008144 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00008148 6500                       		bcs.s	loc_6696
0000814A 0440 0040                  		subi.w	#$40,d0
0000814E 6400                       		bcc.s	loc_6696
00008150 4A38 F75C                  		tst.b	($FFFFF75C).w
00008154 6600                       		bne.s	loc_66A8
00008156 6000                       		bra.s	loc_6656
00008158                            ; ===========================================================================
00008158                            
00008158                            loc_664A:
00008158 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000815C 6600                       		bne.s	loc_665C
0000815E 4A38 F75C                  		tst.b	($FFFFF75C).w
00008162 6600                       		bne.s	loc_66A8
00008164                            
00008164                            loc_6656:
00008164 4278 F73C                  		clr.w	($FFFFF73C).w
00008168 4E75                       		rts	
0000816A                            ; ===========================================================================
0000816A                            
0000816A                            loc_665C:
0000816A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00008170 6600                       		bne.s	loc_6684
00008172 3238 D014                  		move.w	($FFFFD014).w,d1
00008176 6A00                       		bpl.s	loc_666C
00008178 4441                       		neg.w	d1
0000817A                            
0000817A                            loc_666C:
0000817A 0C41 0800                  		cmpi.w	#$800,d1
0000817E 6400                       		bcc.s	loc_6696
00008180 323C 0600                  		move.w	#$600,d1
00008184 0C40 0006                  		cmpi.w	#6,d0
00008188 6E00                       		bgt.s	loc_66F6
0000818A 0C40 FFFA                  		cmpi.w	#-6,d0
0000818E 6D00                       		blt.s	loc_66C0
00008190 6000                       		bra.s	loc_66AE
00008192                            ; ===========================================================================
00008192                            
00008192                            loc_6684:
00008192 323C 0200                  		move.w	#$200,d1
00008196 0C40 0002                  		cmpi.w	#2,d0
0000819A 6E00                       		bgt.s	loc_66F6
0000819C 0C40 FFFE                  		cmpi.w	#-2,d0
000081A0 6D00                       		blt.s	loc_66C0
000081A2 6000                       		bra.s	loc_66AE
000081A4                            ; ===========================================================================
000081A4                            
000081A4                            loc_6696:
000081A4 323C 1000                  		move.w	#$1000,d1
000081A8 0C40 0010                  		cmpi.w	#$10,d0
000081AC 6E00                       		bgt.s	loc_66F6
000081AE 0C40 FFF0                  		cmpi.w	#-$10,d0
000081B2 6D00                       		blt.s	loc_66C0
000081B4 6000                       		bra.s	loc_66AE
000081B6                            ; ===========================================================================
000081B6                            
000081B6                            loc_66A8:
000081B6 7000                       		moveq	#0,d0
000081B8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000081BC                            
000081BC                            loc_66AE:
000081BC 7200                       		moveq	#0,d1
000081BE 3200                       		move.w	d0,d1
000081C0 D278 F704                  		add.w	($FFFFF704).w,d1
000081C4 4A40                       		tst.w	d0
000081C6 6A00 0000                  		bpl.w	loc_6700
000081CA 6000 0000                  		bra.w	loc_66CC
000081CE                            ; ===========================================================================
000081CE                            
000081CE                            loc_66C0:
000081CE 4441                       		neg.w	d1
000081D0 48C1                       		ext.l	d1
000081D2 E181                       		asl.l	#8,d1
000081D4 D2B8 F704                  		add.l	($FFFFF704).w,d1
000081D8 4841                       		swap	d1
000081DA                            
000081DA                            loc_66CC:
000081DA B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000081DE 6E00                       		bgt.s	loc_6724
000081E0 0C41 FF00                  		cmpi.w	#-$100,d1
000081E4 6E00                       		bgt.s	loc_66F0
000081E6 0241 07FF                  		andi.w	#$7FF,d1
000081EA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000081F0 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000081F6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000081FC 6000                       		bra.s	loc_6724
000081FE                            ; ===========================================================================
000081FE                            
000081FE                            loc_66F0:
000081FE 3238 F72C                  		move.w	($FFFFF72C).w,d1
00008202 6000                       		bra.s	loc_6724
00008204                            ; ===========================================================================
00008204                            
00008204                            loc_66F6:
00008204 48C1                       		ext.l	d1
00008206 E181                       		asl.l	#8,d1
00008208 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000820C 4841                       		swap	d1
0000820E                            
0000820E                            loc_6700:
0000820E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00008212 6D00                       		blt.s	loc_6724
00008214 0441 0800                  		subi.w	#$800,d1
00008218 6500                       		bcs.s	loc_6720
0000821A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00008220 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00008226 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000822C 6000                       		bra.s	loc_6724
0000822E                            ; ===========================================================================
0000822E                            
0000822E                            loc_6720:
0000822E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00008232                            
00008232                            loc_6724:
00008232 3838 F704                  		move.w	($FFFFF704).w,d4
00008236 4841                       		swap	d1
00008238 2601                       		move.l	d1,d3
0000823A 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000823E E09B                       		ror.l	#8,d3
00008240 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00008244 21C1 F704                  		move.l	d1,($FFFFF704).w
00008248 3038 F704                  		move.w	($FFFFF704).w,d0
0000824C 0240 0010                  		andi.w	#$10,d0
00008250 1238 F74B                  		move.b	($FFFFF74B).w,d1
00008254 B300                       		eor.b	d1,d0
00008256 6600                       		bne.s	locret_6766
00008258 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000825E 3038 F704                  		move.w	($FFFFF704).w,d0
00008262 9044                       		sub.w	d4,d0
00008264 6A00                       		bpl.s	loc_6760
00008266 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000826C 4E75                       		rts	
0000826E                            ; ===========================================================================
0000826E                            
0000826E                            loc_6760:
0000826E 08F8 0001 F754             		bset	#1,($FFFFF754).w
00008274                            
00008274                            locret_6766:
00008274 4E75                       		rts	
00008276                            ; End of function ScrollVertical
00008276                            
00008276                            
00008276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008276                            
00008276                            
00008276                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00008276 2438 F708                  		move.l	($FFFFF708).w,d2
0000827A 2002                       		move.l	d2,d0
0000827C D084                       		add.l	d4,d0
0000827E 21C0 F708                  		move.l	d0,($FFFFF708).w
00008282 2200                       		move.l	d0,d1
00008284 4841                       		swap	d1
00008286 0241 0010                  		andi.w	#$10,d1
0000828A 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000828E B701                       		eor.b	d3,d1
00008290 6600                       		bne.s	loc_679C
00008292 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00008298 9082                       		sub.l	d2,d0
0000829A 6A00                       		bpl.s	loc_6796
0000829C 08F8 0002 F756             		bset	#2,($FFFFF756).w
000082A2 6000                       		bra.s	loc_679C
000082A4                            ; ===========================================================================
000082A4                            
000082A4                            loc_6796:
000082A4 08F8 0003 F756             		bset	#3,($FFFFF756).w
000082AA                            
000082AA                            loc_679C:
000082AA 2638 F70C                  		move.l	($FFFFF70C).w,d3
000082AE 2003                       		move.l	d3,d0
000082B0 D085                       		add.l	d5,d0
000082B2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000082B6 2200                       		move.l	d0,d1
000082B8 4841                       		swap	d1
000082BA 0241 0010                  		andi.w	#$10,d1
000082BE 1438 F74D                  		move.b	($FFFFF74D).w,d2
000082C2 B501                       		eor.b	d2,d1
000082C4 6600                       		bne.s	locret_67D0
000082C6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000082CC 9083                       		sub.l	d3,d0
000082CE 6A00                       		bpl.s	loc_67CA
000082D0 08F8 0000 F756             		bset	#0,($FFFFF756).w
000082D6 4E75                       		rts	
000082D8                            ; ===========================================================================
000082D8                            
000082D8                            loc_67CA:
000082D8 08F8 0001 F756             		bset	#1,($FFFFF756).w
000082DE                            
000082DE                            locret_67D0:
000082DE 4E75                       		rts	
000082E0                            ; End of function ScrollBlock1
000082E0                            
000082E0                            
000082E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E0                            
000082E0                            
000082E0                            ScrollBlock2:				; XREF: Deform_SLZ
000082E0 2438 F708                  		move.l	($FFFFF708).w,d2
000082E4 2002                       		move.l	d2,d0
000082E6 D084                       		add.l	d4,d0
000082E8 21C0 F708                  		move.l	d0,($FFFFF708).w
000082EC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000082F0 2003                       		move.l	d3,d0
000082F2 D085                       		add.l	d5,d0
000082F4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000082F8 2200                       		move.l	d0,d1
000082FA 4841                       		swap	d1
000082FC 0241 0010                  		andi.w	#$10,d1
00008300 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008304 B501                       		eor.b	d2,d1
00008306 6600                       		bne.s	locret_6812
00008308 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000830E 9083                       		sub.l	d3,d0
00008310 6A00                       		bpl.s	loc_680C
00008312 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008318 4E75                       		rts	
0000831A                            ; ===========================================================================
0000831A                            
0000831A                            loc_680C:
0000831A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008320                            
00008320                            locret_6812:
00008320 4E75                       		rts	
00008322                            ; End of function ScrollBlock2
00008322                            
00008322                            
00008322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008322                            
00008322                            
00008322                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00008322 3638 F70C                  		move.w	($FFFFF70C).w,d3
00008326 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000832A 3200                       		move.w	d0,d1
0000832C 0241 0010                  		andi.w	#$10,d1
00008330 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008334 B501                       		eor.b	d2,d1
00008336 6600                       		bne.s	locret_6842
00008338 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000833E 9043                       		sub.w	d3,d0
00008340 6A00                       		bpl.s	loc_683C
00008342 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008348 4E75                       		rts	
0000834A                            ; ===========================================================================
0000834A                            
0000834A                            loc_683C:
0000834A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008350                            
00008350                            locret_6842:
00008350 4E75                       		rts	
00008352                            ; End of function ScrollBlock3
00008352                            
00008352                            
00008352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008352                            
00008352                            
00008352                            ScrollBlock4:				; XREF: Deform_GHZ
00008352 3438 F710                  		move.w	($FFFFF710).w,d2
00008356 3638 F714                  		move.w	($FFFFF714).w,d3
0000835A 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000835E 48C0                       		ext.l	d0
00008360 EF80                       		asl.l	#7,d0
00008362 D1B8 F710                  		add.l	d0,($FFFFF710).w
00008366 3038 F710                  		move.w	($FFFFF710).w,d0
0000836A 0240 0010                  		andi.w	#$10,d0
0000836E 1238 F74E                  		move.b	($FFFFF74E).w,d1
00008372 B300                       		eor.b	d1,d0
00008374 6600                       		bne.s	locret_6884
00008376 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000837C 3038 F710                  		move.w	($FFFFF710).w,d0
00008380 9042                       		sub.w	d2,d0
00008382 6A00                       		bpl.s	loc_687E
00008384 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000838A 6000                       		bra.s	locret_6884
0000838C                            ; ===========================================================================
0000838C                            
0000838C                            loc_687E:
0000838C 08F8 0003 F758             		bset	#3,($FFFFF758).w
00008392                            
00008392                            locret_6884:
00008392 4E75                       		rts	
00008394                            ; End of function ScrollBlock4
00008394                            
00008394                            
00008394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008394                            
00008394                            
00008394                            sub_6886:				; XREF: loc_C44
00008394 4BF9 00C0 0004             		lea	($C00004).l,a5
0000839A 4DF9 00C0 0000             		lea	($C00000).l,a6
000083A0 45F8 F756                  		lea	($FFFFF756).w,a2
000083A4 47F8 F708                  		lea	($FFFFF708).w,a3
000083A8 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000083AC 343C 6000                  		move.w	#$6000,d2
000083B0 6100 0000                  		bsr.w	sub_6954
000083B4 45F8 F758                  		lea	($FFFFF758).w,a2
000083B8 47F8 F710                  		lea	($FFFFF710).w,a3
000083BC 6000 0000                  		bra.w	sub_69F4
000083C0                            ; End of function sub_6886
000083C0                            
000083C0                            ; ---------------------------------------------------------------------------
000083C0                            ; Subroutine to	display	correct	tiles as you move
000083C0                            ; ---------------------------------------------------------------------------
000083C0                            
000083C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C0                            
000083C0                            
000083C0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000083C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000083C6 4DF9 00C0 0000             		lea	($C00000).l,a6
000083CC 45F8 FF32                  		lea	($FFFFFF32).w,a2
000083D0 47F8 FF18                  		lea	($FFFFFF18).w,a3
000083D4 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000083D8 343C 6000                  		move.w	#$6000,d2
000083DC 6100 0000                  		bsr.w	sub_6954
000083E0 45F8 FF34                  		lea	($FFFFFF34).w,a2
000083E4 47F8 FF20                  		lea	($FFFFFF20).w,a3
000083E8 6100 0000                  		bsr.w	sub_69F4
000083EC 45F8 FF30                  		lea	($FFFFFF30).w,a2
000083F0 47F8 FF10                  		lea	($FFFFFF10).w,a3
000083F4 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
000083F8 343C 4000                  		move.w	#$4000,d2
000083FC 4A12                       		tst.b	(a2)
000083FE 6700                       		beq.s	locret_6952
00008400 0892 0000                  		bclr	#0,(a2)
00008404 6700                       		beq.s	loc_6908
00008406 78F0                       		moveq	#-$10,d4
00008408 7AF0                       		moveq	#-$10,d5
0000840A 6100 0000                  		bsr.w	sub_6C20
0000840E 78F0                       		moveq	#-$10,d4
00008410 7AF0                       		moveq	#-$10,d5
00008412 6100 0000                  		bsr.w	sub_6AD8
00008416                            
00008416                            loc_6908:
00008416 0892 0001                  		bclr	#1,(a2)
0000841A 6700                       		beq.s	loc_6922
0000841C 383C 00E0                  		move.w	#$E0,d4
00008420 7AF0                       		moveq	#-$10,d5
00008422 6100 0000                  		bsr.w	sub_6C20
00008426 383C 00E0                  		move.w	#$E0,d4
0000842A 7AF0                       		moveq	#-$10,d5
0000842C 6100 0000                  		bsr.w	sub_6AD8
00008430                            
00008430                            loc_6922:
00008430 0892 0002                  		bclr	#2,(a2)
00008434 6700                       		beq.s	loc_6938
00008436 78F0                       		moveq	#-$10,d4
00008438 7AF0                       		moveq	#-$10,d5
0000843A 6100 0000                  		bsr.w	sub_6C20
0000843E 78F0                       		moveq	#-$10,d4
00008440 7AF0                       		moveq	#-$10,d5
00008442 6100 0000                  		bsr.w	sub_6B04
00008446                            
00008446                            loc_6938:
00008446 0892 0003                  		bclr	#3,(a2)
0000844A 6700                       		beq.s	locret_6952
0000844C 78F0                       		moveq	#-$10,d4
0000844E 3A3C 0140                  		move.w	#$140,d5
00008452 6100 0000                  		bsr.w	sub_6C20
00008456 78F0                       		moveq	#-$10,d4
00008458 3A3C 0140                  		move.w	#$140,d5
0000845C 6100 0000                  		bsr.w	sub_6B04
00008460                            
00008460                            locret_6952:
00008460 4E75                       		rts	
00008462                            ; End of function LoadTilesAsYouMove
00008462                            
00008462                            
00008462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008462                            
00008462                            
00008462                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00008462 4A12                       		tst.b	(a2)
00008464 6700 0000                  		beq.w	locret_69F2
00008468 0892 0000                  		bclr	#0,(a2)
0000846C 6700                       		beq.s	loc_6972
0000846E 78F0                       		moveq	#-$10,d4
00008470 7AF0                       		moveq	#-$10,d5
00008472 6100 0000                  		bsr.w	sub_6C20
00008476 78F0                       		moveq	#-$10,d4
00008478 7AF0                       		moveq	#-$10,d5
0000847A 7C1F                       		moveq	#$1F,d6
0000847C 6100 0000                  		bsr.w	sub_6ADA
00008480                            
00008480                            loc_6972:
00008480 0892 0001                  		bclr	#1,(a2)
00008484 6700                       		beq.s	loc_698E
00008486 383C 00E0                  		move.w	#$E0,d4
0000848A 7AF0                       		moveq	#-$10,d5
0000848C 6100 0000                  		bsr.w	sub_6C20
00008490 383C 00E0                  		move.w	#$E0,d4
00008494 7AF0                       		moveq	#-$10,d5
00008496 7C1F                       		moveq	#$1F,d6
00008498 6100 0000                  		bsr.w	sub_6ADA
0000849C                            
0000849C                            loc_698E:
0000849C 0892 0002                  		bclr	#2,(a2)
000084A0 6700                       		beq.s	loc_69BE
000084A2 78F0                       		moveq	#-$10,d4
000084A4 7AF0                       		moveq	#-$10,d5
000084A6 6100 0000                  		bsr.w	sub_6C20
000084AA 78F0                       		moveq	#-$10,d4
000084AC 7AF0                       		moveq	#-$10,d5
000084AE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000084B2 322B 0004                  		move.w	4(a3),d1
000084B6 0241 FFF0                  		andi.w	#-$10,d1
000084BA 9C41                       		sub.w	d1,d6
000084BC 6D00                       		blt.s	loc_69BE
000084BE E84E                       		lsr.w	#4,d6
000084C0 0C46 000F                  		cmpi.w	#$F,d6
000084C4 6500                       		bcs.s	loc_69BA
000084C6 7C0F                       		moveq	#$F,d6
000084C8                            
000084C8                            loc_69BA:
000084C8 6100 0000                  		bsr.w	sub_6B06
000084CC                            
000084CC                            loc_69BE:
000084CC 0892 0003                  		bclr	#3,(a2)
000084D0 6700                       		beq.s	locret_69F2
000084D2 78F0                       		moveq	#-$10,d4
000084D4 3A3C 0140                  		move.w	#$140,d5
000084D8 6100 0000                  		bsr.w	sub_6C20
000084DC 78F0                       		moveq	#-$10,d4
000084DE 3A3C 0140                  		move.w	#$140,d5
000084E2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000084E6 322B 0004                  		move.w	4(a3),d1
000084EA 0241 FFF0                  		andi.w	#-$10,d1
000084EE 9C41                       		sub.w	d1,d6
000084F0 6D00                       		blt.s	locret_69F2
000084F2 E84E                       		lsr.w	#4,d6
000084F4 0C46 000F                  		cmpi.w	#$F,d6
000084F8 6500                       		bcs.s	loc_69EE
000084FA 7C0F                       		moveq	#$F,d6
000084FC                            
000084FC                            loc_69EE:
000084FC 6100 0000                  		bsr.w	sub_6B06
00008500                            
00008500                            locret_69F2:
00008500 4E75                       		rts	
00008502                            ; End of function sub_6954
00008502                            
00008502                            
00008502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008502                            
00008502                            
00008502                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00008502 4A12                       		tst.b	(a2)
00008504 6700 0000                  		beq.w	locret_6A80
00008508 0892 0002                  		bclr	#2,(a2)
0000850C 6700                       		beq.s	loc_6A3E
0000850E 0C53 0010                  		cmpi.w	#$10,(a3)
00008512 6500                       		bcs.s	loc_6A3E
00008514 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008518 322B 0004                  		move.w	4(a3),d1
0000851C 0241 FFF0                  		andi.w	#-$10,d1
00008520 9841                       		sub.w	d1,d4
00008522 3F04                       		move.w	d4,-(sp)
00008524 7AF0                       		moveq	#-$10,d5
00008526 6100 0000                  		bsr.w	sub_6C20
0000852A 381F                       		move.w	(sp)+,d4
0000852C 7AF0                       		moveq	#-$10,d5
0000852E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008532 322B 0004                  		move.w	4(a3),d1
00008536 0241 FFF0                  		andi.w	#-$10,d1
0000853A 9C41                       		sub.w	d1,d6
0000853C 6D00                       		blt.s	loc_6A3E
0000853E E84E                       		lsr.w	#4,d6
00008540 0446 000E                  		subi.w	#$E,d6
00008544 6400                       		bcc.s	loc_6A3E
00008546 4446                       		neg.w	d6
00008548 6100 0000                  		bsr.w	sub_6B06
0000854C                            
0000854C                            loc_6A3E:
0000854C 0892 0003                  		bclr	#3,(a2)
00008550 6700                       		beq.s	locret_6A80
00008552 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008556 322B 0004                  		move.w	4(a3),d1
0000855A 0241 FFF0                  		andi.w	#-$10,d1
0000855E 9841                       		sub.w	d1,d4
00008560 3F04                       		move.w	d4,-(sp)
00008562 3A3C 0140                  		move.w	#$140,d5
00008566 6100 0000                  		bsr.w	sub_6C20
0000856A 381F                       		move.w	(sp)+,d4
0000856C 3A3C 0140                  		move.w	#$140,d5
00008570 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008574 322B 0004                  		move.w	4(a3),d1
00008578 0241 FFF0                  		andi.w	#-$10,d1
0000857C 9C41                       		sub.w	d1,d6
0000857E 6D00                       		blt.s	locret_6A80
00008580 E84E                       		lsr.w	#4,d6
00008582 0446 000E                  		subi.w	#$E,d6
00008586 6400                       		bcc.s	locret_6A80
00008588 4446                       		neg.w	d6
0000858A 6100 0000                  		bsr.w	sub_6B06
0000858E                            
0000858E                            locret_6A80:
0000858E 4E75                       		rts	
00008590                            ; End of function sub_69F4
00008590                            
00008590                            ; ===========================================================================
00008590 4A12                       		tst.b	(a2)
00008592 6700                       		beq.s	locret_6AD6
00008594 0892 0002                  		bclr	#2,(a2)
00008598 6700                       		beq.s	loc_6AAC
0000859A 383C 00D0                  		move.w	#$D0,d4
0000859E 322B 0004                  		move.w	4(a3),d1
000085A2 0241 FFF0                  		andi.w	#-$10,d1
000085A6 9841                       		sub.w	d1,d4
000085A8 3F04                       		move.w	d4,-(sp)
000085AA 7AF0                       		moveq	#-$10,d5
000085AC 6100 0000                  		bsr.w	sub_6C3C
000085B0 381F                       		move.w	(sp)+,d4
000085B2 7AF0                       		moveq	#-$10,d5
000085B4 7C02                       		moveq	#2,d6
000085B6 6100 0000                  		bsr.w	sub_6B06
000085BA                            
000085BA                            loc_6AAC:
000085BA 0892 0003                  		bclr	#3,(a2)
000085BE 6700                       		beq.s	locret_6AD6
000085C0 383C 00D0                  		move.w	#$D0,d4
000085C4 322B 0004                  		move.w	4(a3),d1
000085C8 0241 FFF0                  		andi.w	#-$10,d1
000085CC 9841                       		sub.w	d1,d4
000085CE 3F04                       		move.w	d4,-(sp)
000085D0 3A3C 0140                  		move.w	#$140,d5
000085D4 6100 0000                  		bsr.w	sub_6C3C
000085D8 381F                       		move.w	(sp)+,d4
000085DA 3A3C 0140                  		move.w	#$140,d5
000085DE 7C02                       		moveq	#2,d6
000085E0 6100 0000                  		bsr.w	sub_6B06
000085E4                            
000085E4                            locret_6AD6:
000085E4 4E75                       		rts	
000085E6                            
000085E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E6                            
000085E6                            
000085E6                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000085E6 7C15                       		moveq	#$15,d6
000085E8                            ; End of function sub_6AD8
000085E8                            
000085E8                            
000085E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E8                            
000085E8                            
000085E8                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000085E8 2E3C 0080 0000             		move.l	#$800000,d7
000085EE 2200                       		move.l	d0,d1
000085F0                            
000085F0                            loc_6AE2:
000085F0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000085F4 6100 0000                  		bsr.w	sub_6BD6
000085F8 2001                       		move.l	d1,d0
000085FA 6100 0000                  		bsr.w	sub_6B32
000085FE 5801                       		addq.b	#4,d1
00008600 0201 007F                  		andi.b	#$7F,d1
00008604 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008608 0645 0010                  		addi.w	#$10,d5
0000860C 51CE FFE2                  		dbf	d6,loc_6AE2
00008610 4E75                       		rts	
00008612                            ; End of function sub_6ADA
00008612                            
00008612                            
00008612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008612                            
00008612                            
00008612                            sub_6B04:				; XREF: LoadTilesAsYouMove
00008612 7C0F                       		moveq	#$F,d6
00008614                            ; End of function sub_6B04
00008614                            
00008614                            
00008614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008614                            ; main draw section
00008614                            
00008614                            sub_6B06:
00008614 2E3C 0080 0000             		move.l	#$800000,d7
0000861A 2200                       		move.l	d0,d1
0000861C                            
0000861C                            loc_6B0E:
0000861C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008620 6100 0000                  		bsr.w	sub_6BD6
00008624 2001                       		move.l	d1,d0
00008626 6100 0000                  		bsr.w	sub_6B32
0000862A 0641 0100                  		addi.w	#$100,d1
0000862E 0241 0FFF                  		andi.w	#$FFF,d1
00008632 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008636 0644 0010                  		addi.w	#$10,d4
0000863A 51CE FFE0                  		dbf	d6,loc_6B0E
0000863E 4E75                       		rts	
00008640                            ; End of function sub_6B06
00008640                            
00008640                            
00008640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008640                            
00008640                            
00008640                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00008640 8042                       		or.w	d2,d0
00008642 4840                       		swap	d0
00008644 0810 0003                  		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
00008648 6600                       		bne.s	loc_6B6E
0000864A 0810 0002                  		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
0000864E 6600                       		bne.s	loc_6B4E
00008650 2A80                       		move.l	d0,(a5)
00008652 2C99                       		move.l	(a1)+,(a6)
00008654 D087                       		add.l	d7,d0
00008656 2A80                       		move.l	d0,(a5)
00008658 2C99                       		move.l	(a1)+,(a6)
0000865A 4E75                       		rts	
0000865C                            ; ===========================================================================
0000865C                            
0000865C                            loc_6B4E:
0000865C 2A80                       		move.l	d0,(a5)
0000865E 2819                       		move.l	(a1)+,d4
00008660 0A84 0800 0800             		eori.l	#$8000800,d4
00008666 4844                       		swap	d4
00008668 2C84                       		move.l	d4,(a6)
0000866A D087                       		add.l	d7,d0
0000866C 2A80                       		move.l	d0,(a5)
0000866E 2819                       		move.l	(a1)+,d4
00008670 0A84 0800 0800             		eori.l	#$8000800,d4
00008676 4844                       		swap	d4
00008678 2C84                       		move.l	d4,(a6)
0000867A 4E75                       		rts	
0000867C                            ; ===========================================================================
0000867C                            
0000867C                            loc_6B6E:
0000867C 0810 0002                  		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
00008680 6600                       		bne.s	loc_6B90
00008682 2A80                       		move.l	d0,(a5)
00008684 2A19                       		move.l	(a1)+,d5
00008686 2819                       		move.l	(a1)+,d4
00008688 0A84 1000 1000             		eori.l	#$10001000,d4
0000868E 2C84                       		move.l	d4,(a6)
00008690 D087                       		add.l	d7,d0
00008692 2A80                       		move.l	d0,(a5)
00008694 0A85 1000 1000             		eori.l	#$10001000,d5
0000869A 2C85                       		move.l	d5,(a6)
0000869C 4E75                       		rts	
0000869E                            ; ===========================================================================
0000869E                            
0000869E                            loc_6B90:
0000869E 2A80                       		move.l	d0,(a5)
000086A0 2A19                       		move.l	(a1)+,d5
000086A2 2819                       		move.l	(a1)+,d4
000086A4 0A84 1800 1800             		eori.l	#$18001800,d4
000086AA 4844                       		swap	d4
000086AC 2C84                       		move.l	d4,(a6)
000086AE D087                       		add.l	d7,d0
000086B0 2A80                       		move.l	d0,(a5)
000086B2 0A85 1800 1800             		eori.l	#$18001800,d5
000086B8 4845                       		swap	d5
000086BA 2C85                       		move.l	d5,(a6)
000086BC 4E75                       		rts	
000086BE                            ; End of function sub_6B32
000086BE                            
000086BE                            ; ===========================================================================
000086BE 4E75                       		rts	
000086C0                            ; ===========================================================================
000086C0 2A80                       		move.l	d0,(a5)
000086C2 3A3C 2000                  		move.w	#$2000,d5
000086C6 3819                       		move.w	(a1)+,d4
000086C8 D845                       		add.w	d5,d4
000086CA 3C84                       		move.w	d4,(a6)
000086CC 3819                       		move.w	(a1)+,d4
000086CE D845                       		add.w	d5,d4
000086D0 3C84                       		move.w	d4,(a6)
000086D2 D087                       		add.l	d7,d0
000086D4 2A80                       		move.l	d0,(a5)
000086D6 3819                       		move.w	(a1)+,d4
000086D8 D845                       		add.w	d5,d4
000086DA 3C84                       		move.w	d4,(a6)
000086DC 3819                       		move.w	(a1)+,d4
000086DE D845                       		add.w	d5,d4
000086E0 3C84                       		move.w	d4,(a6)
000086E2 4E75                       		rts	
000086E4                            
000086E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E4                            ; Reading from layout
000086E4                            
000086E4                            sub_6BD6:
000086E4 43F8 B000                  		lea	($FFFFB000).w,a1			; MJ: load Block's location
000086E8 D86B 0004                  		add.w	4(a3),d4				; MJ: load Y position to d4
000086EC DA53                       		add.w	(a3),d5					; MJ: load X position to d5
000086EE 3604                       		move.w	d4,d3					; MJ: copy Y position to d3
000086F0 0243 0780                  		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
000086F4 E64D                       		lsr.w	#3,d5					; MJ: divide X position by 8
000086F6 3005                       		move.w	d5,d0					; MJ: copy to d0
000086F8 E848                       		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
000086FA 0240 007F                  		andi.w	#$7F,d0					; MJ: get within 7F
000086FE E34B                       		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
00008700 D043                       		add.w	d3,d0					; MJ: add calc'd Y pos
00008702 76FF                       		moveq	#-1,d3					; MJ: prepare FFFF in d3
00008704 1634 0000                  		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
00008708 0243 00FF                  		andi.w	#$FF,d3					; MJ: keep within 7F
0000870C EF4B                       		lsl.w	#$07,d3					; MJ: multiply by 80
0000870E 0244 0070                  		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
00008712 0245 000E                  		andi.w	#$000E,d5				; MJ: keep X pos within 10
00008716 D644                       		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
00008718 D645                       		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
0000871A 2043                       		movea.l	d3,a0					; MJ: set address (Chunk to read)
0000871C 3610                       		move.w	(a0),d3
0000871E 0243 03FF                  		andi.w	#$3FF,d3
00008722 E74B                       		lsl.w	#3,d3
00008724 D2C3                       		adda.w	d3,a1
00008726                            
00008726                            locret_6C1E:
00008726 4E75                       		rts	
00008728                            ; End of function sub_6BD6
00008728                            
00008728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008728                            ; getting VRam location
00008728                            
00008728                            sub_6C20:
00008728 D86B 0004                  		add.w	4(a3),d4
0000872C DA53                       		add.w	(a3),d5
0000872E 0244 00F0                  		andi.w	#$F0,d4
00008732 0245 01F0                  		andi.w	#$1F0,d5
00008736 E94C                       		lsl.w	#4,d4
00008738 E44D                       		lsr.w	#2,d5
0000873A D845                       		add.w	d5,d4
0000873C 7003                       		moveq	#3,d0
0000873E 4840                       		swap	d0
00008740 3004                       		move.w	d4,d0
00008742 4E75                       		rts	
00008744                            ; End of function sub_6C20
00008744                            
00008744                            
00008744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008744                            ; not used
00008744                            
00008744                            
00008744                            sub_6C3C:
00008744 D86B 0004                  		add.w	4(a3),d4
00008748 DA53                       		add.w	(a3),d5
0000874A 0244 00F0                  		andi.w	#$F0,d4
0000874E 0245 01F0                  		andi.w	#$1F0,d5
00008752 E94C                       		lsl.w	#4,d4
00008754 E44D                       		lsr.w	#2,d5
00008756 D845                       		add.w	d5,d4
00008758 7002                       		moveq	#2,d0
0000875A 4840                       		swap	d0
0000875C 3004                       		move.w	d4,d0
0000875E 4E75                       		rts	
00008760                            ; End of function sub_6C3C
00008760                            
00008760                            ; ---------------------------------------------------------------------------
00008760                            ; Subroutine to	load tiles as soon as the level	appears
00008760                            ; ---------------------------------------------------------------------------
00008760                            
00008760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008760                            
00008760                            
00008760                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00008760 4BF9 00C0 0004             		lea	($C00004).l,a5
00008766 4DF9 00C0 0000             		lea	($C00000).l,a6
0000876C 47F8 F700                  		lea	($FFFFF700).w,a3
00008770 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00008774 343C 4000                  		move.w	#$4000,d2
00008778 6100                       		bsr.s	LoadTilesFromStart2
0000877A 47F8 F708                  		lea	($FFFFF708).w,a3
0000877E 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00008782 343C 6000                  		move.w	#$6000,d2
00008786                            ; End of function LoadTilesFromStart
00008786                            
00008786                            
00008786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008786                            
00008786                            
00008786                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00008786 78F0                       		moveq	#-$10,d4
00008788 7C0F                       		moveq	#$F,d6
0000878A                            
0000878A                            loc_6C82:
0000878A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000878E 7A00                       		moveq	#0,d5
00008790 3204                       		move.w	d4,d1
00008792 6100 FF94                  		bsr.w	sub_6C20
00008796 3801                       		move.w	d1,d4
00008798 7A00                       		moveq	#0,d5
0000879A 7C1F                       		moveq	#$1F,d6
0000879C 6100 FE4A                  		bsr.w	sub_6ADA
000087A0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000087A4 0644 0010                  		addi.w	#$10,d4
000087A8 51CE FFE0                  		dbf	d6,loc_6C82
000087AC 4E75                       		rts	
000087AE                            ; End of function LoadTilesFromStart2
000087AE                            
000087AE                            ; ---------------------------------------------------------------------------
000087AE                            ; Main Load Block loading subroutine
000087AE                            ; ---------------------------------------------------------------------------
000087AE                            
000087AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087AE                            
000087AE                            
000087AE                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000087AE 7000                       		moveq	#0,d0
000087B0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000087B4 E948                       		lsl.w	#4,d0
000087B6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000087BC 45F2 0000                  		lea	(a2,d0.w),a2
000087C0 2F0A                       		move.l	a2,-(sp)
000087C2 588A                       		addq.l	#4,a2
000087C4 205A                       		movea.l	(a2)+,a0
000087C6 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000087CA 303C 0000                  		move.w	#0,d0
000087CE 6100 8F54                  		bsr.w	EniDec
000087D2 205A                       		movea.l	(a2)+,a0
000087D4 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000087DA 6100 90C6                  		bsr.w	KosDec
000087DE 6100 0000                  		bsr.w	LevelLayoutLoad
000087E2 301A                       		move.w	(a2)+,d0
000087E4 3012                       		move.w	(a2),d0
000087E6 0240 00FF                  		andi.w	#$FF,d0
000087EA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000087F0 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000087F2 700C                       		moveq	#$C,d0		; use SB3 Palette
000087F4                            
000087F4                            MLB_ChkSBZPal:
000087F4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000087FA 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000087FC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00008802 6600                       		bne.s	MLB_NormalPal	; if not, branch
00008804                            
00008804                            MLB_UsePal0E:
00008804 700E                       		moveq	#$E,d0		; use SBZ2/FZ Palette
00008806                            
00008806                            MLB_NormalPal:
00008806 6100 9A8E                  		bsr.w	PalLoad1	; load Palette (based on	d0)
0000880A 245F                       		movea.l	(sp)+,a2
0000880C 584A                       		addq.w	#4,a2
0000880E 7000                       		moveq	#0,d0
00008810 1012                       		move.b	(a2),d0
00008812 6700                       		beq.s	locret_6D10
00008814 6100 8D70                  		bsr.w	LoadPLC		; load pattern load cues
00008818                            
00008818                            locret_6D10:
00008818 4E75                       		rts	
0000881A                            ; End of function MainLoadBlockLoad
0000881A                            
0000881A                            ; ---------------------------------------------------------------------------
0000881A                            ; Level	layout loading subroutine
0000881A                            ; ---------------------------------------------------------------------------
0000881A                            
0000881A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000881A                            ; This method now releases free ram space from A408 - A7FF
0000881A                            
0000881A                            LevelLayoutLoad:
0000881A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000881E ED08                       		lsl.b	#6,d0
00008820 E848                       		lsr.w	#4,d0
00008822 3400                       		move.w	d0,d2
00008824 D040                       		add.w	d0,d0
00008826 D042                       		add.w	d2,d0
00008828 43F9 0000 0000             		lea	(Level_Index).l,a1
0000882E 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
00008832 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
00008836 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
0000883A 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
0000883E 4E75                       		rts						; MJ: Return
00008840                            
00008840                            ; End of function LevelLayoutLoad2
00008840                            
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Dynamic screen resize	loading	subroutine
00008840                            ; ---------------------------------------------------------------------------
00008840                            
00008840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008840                            
00008840                            
00008840                            DynScrResizeLoad:			; XREF: DeformBgLayer
00008840 7000                       		moveq	#0,d0
00008842 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008846 D040                       		add.w	d0,d0
00008848 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000884C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00008850 7202                       		moveq	#2,d1
00008852 3038 F726                  		move.w	($FFFFF726).w,d0
00008856 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000885A 6700                       		beq.s	locret_6DAA
0000885C 6400                       		bcc.s	loc_6DAC
0000885E 4441                       		neg.w	d1
00008860 3038 F704                  		move.w	($FFFFF704).w,d0
00008864 B078 F726                  		cmp.w	($FFFFF726).w,d0
00008868 6300                       		bls.s	loc_6DA0
0000886A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000886E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00008874                            
00008874                            loc_6DA0:
00008874 D378 F72E                  		add.w	d1,($FFFFF72E).w
00008878 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000887E                            
0000887E                            locret_6DAA:
0000887E 4E75                       		rts	
00008880                            ; ===========================================================================
00008880                            
00008880                            loc_6DAC:				; XREF: DynScrResizeLoad
00008880 3038 F704                  		move.w	($FFFFF704).w,d0
00008884 5040                       		addq.w	#8,d0
00008886 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000888A 6500                       		bcs.s	loc_6DC4
0000888C 0838 0001 D022             		btst	#1,($FFFFD022).w
00008892 6700                       		beq.s	loc_6DC4
00008894 D241                       		add.w	d1,d1
00008896 D241                       		add.w	d1,d1
00008898                            
00008898                            loc_6DC4:
00008898 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000889C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000088A2 4E75                       		rts	
000088A4                            ; End of function DynScrResizeLoad
000088A4                            
000088A4                            ; ===========================================================================
000088A4                            ; ---------------------------------------------------------------------------
000088A4                            ; Offset index for dynamic screen resizing
000088A4                            ; ---------------------------------------------------------------------------
000088A4 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000088A8 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000088AC 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000088B0 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_TS-Resize_Index
000088B4                            ; ===========================================================================
000088B4                            ; ---------------------------------------------------------------------------
000088B4                            ; Title Screen dynamic screen resizing (empty)
000088B4                            ; ---------------------------------------------------------------------------
000088B4                            
000088B4                            Resize_TS:				; XREF: Resize_Index
000088B4 4E75                       		rts	
000088B6                            ; ===========================================================================
000088B6                            ; ---------------------------------------------------------------------------
000088B6                            ; Green	Hill Zone dynamic screen resizing
000088B6                            ; ---------------------------------------------------------------------------
000088B6                            
000088B6                            Resize_GHZ:				; XREF: Resize_Index
000088B6 7000                       		moveq	#0,d0
000088B8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000088BC D040                       		add.w	d0,d0
000088BE 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000088C2 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000088C6                            ; ===========================================================================
000088C6 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000088C8 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000088CA 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000088CC                            ; ===========================================================================
000088CC                            
000088CC                            Resize_GHZ1:
000088CC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000088D2 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000088D8 6500                       		bcs.s	locret_6E08	; if not, branch
000088DA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000088E0                            
000088E0                            locret_6E08:
000088E0 4E75                       		rts	
000088E2                            ; ===========================================================================
000088E2                            
000088E2                            Resize_GHZ2:
000088E2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000088E8 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000088EE 6500                       		bcs.s	locret_6E3A
000088F0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000088F6 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000088FC 6500                       		bcs.s	locret_6E3A
000088FE 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00008904 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000890A 6500                       		bcs.s	locret_6E3A
0000890C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008912                            
00008912                            locret_6E3A:
00008912 4E75                       		rts	
00008914                            ; ===========================================================================
00008914                            
00008914                            Resize_GHZ3:
00008914 7000                       		moveq	#0,d0
00008916 1038 F742                  		move.b	($FFFFF742).w,d0
0000891A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000891E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008922                            ; ===========================================================================
00008922 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00008924 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00008926 0000                       		dc.w Resize_GHZ3end-off_6E4A
00008928                            ; ===========================================================================
00008928                            
00008928                            Resize_GHZ3main:
00008928 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000892E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00008934 6500                       		bcs.s	locret_6E96
00008936 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000893C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00008942 6500                       		bcs.s	locret_6E96
00008944 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000894A 6500                       		bcs.s	loc_6E98
0000894C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00008952 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00008958 6400                       		bcc.s	loc_6E8E
0000895A 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00008960 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00008966                            
00008966                            loc_6E8E:
00008966 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000896C 6400                       		bcc.s	loc_6E98
0000896E                            
0000896E                            locret_6E96:
0000896E 4E75                       		rts	
00008970                            ; ===========================================================================
00008970                            
00008970                            loc_6E98:
00008970 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008976 5438 F742                  		addq.b	#2,($FFFFF742).w
0000897A 4E75                       		rts	
0000897C                            ; ===========================================================================
0000897C                            
0000897C                            Resize_GHZ3boss:
0000897C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00008982 6400                       		bcc.s	loc_6EB0
00008984 5538 F742                  		subq.b	#2,($FFFFF742).w
00008988                            
00008988                            loc_6EB0:
00008988 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000898E 6500                       		bcs.s	locret_6EE8
00008990 6100 0000                  		bsr.w	SingleObjLoad
00008994 6600                       		bne.s	loc_6ED0
00008996 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000899A 337C 2A60 0008             		move.w	#$2A60,8(a1)
000089A0 337C 0280 000C             		move.w	#$280,$C(a1)
000089A6                            
000089A6                            loc_6ED0:
000089A6 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000089AC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000089B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000089B6 7011                       		moveq	#$11,d0
000089B8 6000 8BCC                  		bra.w	LoadPLC		; load boss patterns
000089BC                            ; ===========================================================================
000089BC                            
000089BC                            locret_6EE8:
000089BC 4E75                       		rts	
000089BE                            ; ===========================================================================
000089BE                            
000089BE                            Resize_GHZ3end:
000089BE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000089C4 4E75                       		rts	
000089C6                            ; ===========================================================================
000089C6                            ; ---------------------------------------------------------------------------
000089C6                            ; Labyrinth Zone dynamic screen	resizing
000089C6                            ; ---------------------------------------------------------------------------
000089C6                            
000089C6                            Resize_LZ:				; XREF: Resize_Index
000089C6 7000                       		moveq	#0,d0
000089C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000089CC D040                       		add.w	d0,d0
000089CE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000089D2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000089D6                            ; ===========================================================================
000089D6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000089D8 0000                       		dc.w Resize_LZ12-Resize_LZx
000089DA 0000                       		dc.w Resize_LZ3-Resize_LZx
000089DC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            Resize_LZ12:
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            
000089E0                            Resize_LZ3:
000089E0 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
000089E4 6700                       		beq.s	loc_6F28				; if not, branch
000089E6 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
000089EA 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
000089F0 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
000089F2 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
000089FA 303C 00B7                  		move.w	#$B7,d0
000089FE 6100 88CE                  		bsr.w	PlaySound_Special ; play rumbling sound
00008A02                            
00008A02                            loc_6F28:
00008A02 4A38 F742                  		tst.b	($FFFFF742).w
00008A06 6600                       		bne.s	locret_6F64
00008A08 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008A0E 6500                       		bcs.s	locret_6F62
00008A10 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008A16 6400                       		bcc.s	locret_6F62
00008A18 6100 0000                  		bsr.w	SingleObjLoad
00008A1C 6600                       		bne.s	loc_6F4A
00008A1E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008A22                            
00008A22                            loc_6F4A:
00008A22 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008A28 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008A2E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A32 7011                       		moveq	#$11,d0
00008A34 6000 8B50                  		bra.w	LoadPLC		; load boss patterns
00008A38                            ; ===========================================================================
00008A38                            
00008A38                            locret_6F62:
00008A38 4E75                       		rts	
00008A3A                            ; ===========================================================================
00008A3A                            
00008A3A                            locret_6F64:
00008A3A 4E75                       		rts	
00008A3C                            ; ===========================================================================
00008A3C                            
00008A3C                            Resize_SBZ3:
00008A3C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008A42 6500                       		bcs.s	locret_6F8C
00008A44 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008A4A 6400                       		bcc.s	locret_6F8C	; if not, branch
00008A4C 4238 FE30                  		clr.b	($FFFFFE30).w
00008A50 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00008A56 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008A5C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008A62                            
00008A62                            locret_6F8C:
00008A62 4E75                       		rts	
00008A64                            ; ===========================================================================
00008A64                            ; ---------------------------------------------------------------------------
00008A64                            ; Marble Zone dynamic screen resizing
00008A64                            ; ---------------------------------------------------------------------------
00008A64                            
00008A64                            Resize_MZ:				; XREF: Resize_Index
00008A64 7000                       		moveq	#0,d0
00008A66 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008A6A D040                       		add.w	d0,d0
00008A6C 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008A70 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00008A74                            ; ===========================================================================
00008A74 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00008A76 0000                       		dc.w Resize_MZ2-Resize_MZx
00008A78 0000                       		dc.w Resize_MZ3-Resize_MZx
00008A7A                            ; ===========================================================================
00008A7A                            
00008A7A                            Resize_MZ1:
00008A7A 7000                       		moveq	#0,d0
00008A7C 1038 F742                  		move.b	($FFFFF742).w,d0
00008A80 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00008A84 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00008A88                            ; ===========================================================================
00008A88 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00008A8A 0000                       		dc.w loc_6FEA-off_6FB2
00008A8C 0000                       		dc.w loc_702E-off_6FB2
00008A8E 0000                       		dc.w loc_7050-off_6FB2
00008A90                            ; ===========================================================================
00008A90                            
00008A90                            loc_6FBA:
00008A90 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00008A96 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00008A9C 6500                       		bcs.s	locret_6FE8
00008A9E 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00008AA4 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008AAA 6500                       		bcs.s	locret_6FE8
00008AAC 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008AB2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008AB8 6500                       		bcs.s	locret_6FE8
00008ABA 5438 F742                  		addq.b	#2,($FFFFF742).w
00008ABE                            
00008ABE                            locret_6FE8:
00008ABE 4E75                       		rts	
00008AC0                            ; ===========================================================================
00008AC0                            
00008AC0                            loc_6FEA:
00008AC0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008AC6 6400                       		bcc.s	loc_6FF8
00008AC8 5538 F742                  		subq.b	#2,($FFFFF742).w
00008ACC 4E75                       		rts	
00008ACE                            ; ===========================================================================
00008ACE                            
00008ACE                            loc_6FF8:
00008ACE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008AD4 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008ADA 6400                       		bcc.s	locret_702C
00008ADC 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008AE2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008AE8 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008AEE 6400                       		bcc.s	locret_702C
00008AF0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008AF6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008AFC 6500                       		bcs.s	locret_702C
00008AFE 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B02                            
00008B02                            locret_702C:
00008B02 4E75                       		rts	
00008B04                            ; ===========================================================================
00008B04                            
00008B04                            loc_702E:
00008B04 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008B0A 6400                       		bcc.s	loc_703C
00008B0C 5538 F742                  		subq.b	#2,($FFFFF742).w
00008B10 4E75                       		rts	
00008B12                            ; ===========================================================================
00008B12                            
00008B12                            loc_703C:
00008B12 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008B18 6500                       		bcs.s	locret_704E
00008B1A 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008B20 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B24                            
00008B24                            locret_704E:
00008B24 4E75                       		rts	
00008B26                            ; ===========================================================================
00008B26                            
00008B26                            loc_7050:
00008B26 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008B2C 6500                       		bcs.s	locret_7072
00008B2E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008B34 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008B3A 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008B40 6500                       		bcs.s	locret_7072
00008B42 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008B48                            
00008B48                            locret_7072:
00008B48 4E75                       		rts	
00008B4A                            ; ===========================================================================
00008B4A                            
00008B4A                            Resize_MZ2:
00008B4A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B50 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008B56 6500                       		bcs.s	locret_7088
00008B58 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008B5E                            
00008B5E                            locret_7088:
00008B5E 4E75                       		rts	
00008B60                            ; ===========================================================================
00008B60                            
00008B60                            Resize_MZ3:
00008B60 7000                       		moveq	#0,d0
00008B62 1038 F742                  		move.b	($FFFFF742).w,d0
00008B66 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008B6A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008B6E                            ; ===========================================================================
00008B6E 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008B70 0000                       		dc.w Resize_MZ3end-off_7098
00008B72                            ; ===========================================================================
00008B72                            
00008B72                            Resize_MZ3boss:
00008B72 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008B78 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008B7E 6500                       		bcs.s	locret_70E8
00008B80 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008B86 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008B8C 6500                       		bcs.s	locret_70E8
00008B8E 6100 0000                  		bsr.w	SingleObjLoad
00008B92 6600                       		bne.s	loc_70D0
00008B94 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00008B98 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008B9E 337C 022C 000C             		move.w	#$22C,$C(a1)
00008BA4                            
00008BA4                            loc_70D0:
00008BA4 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008BAA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008BB0 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BB4 7011                       		moveq	#$11,d0
00008BB6 6000 89CE                  		bra.w	LoadPLC		; load boss patterns
00008BBA                            ; ===========================================================================
00008BBA                            
00008BBA                            locret_70E8:
00008BBA 4E75                       		rts	
00008BBC                            ; ===========================================================================
00008BBC                            
00008BBC                            Resize_MZ3end:
00008BBC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008BC2 4E75                       		rts	
00008BC4                            ; ===========================================================================
00008BC4                            ; ---------------------------------------------------------------------------
00008BC4                            ; Star Light Zone dynamic screen resizing
00008BC4                            ; ---------------------------------------------------------------------------
00008BC4                            
00008BC4                            Resize_SLZ:				; XREF: Resize_Index
00008BC4 7000                       		moveq	#0,d0
00008BC6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008BCA D040                       		add.w	d0,d0
00008BCC 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008BD0 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008BD4                            ; ===========================================================================
00008BD4 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008BD6 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008BD8 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008BDA                            ; ===========================================================================
00008BDA                            
00008BDA                            Resize_SLZ12:
00008BDA 4E75                       		rts	
00008BDC                            ; ===========================================================================
00008BDC                            
00008BDC                            Resize_SLZ3:
00008BDC 7000                       		moveq	#0,d0
00008BDE 1038 F742                  		move.b	($FFFFF742).w,d0
00008BE2 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008BE6 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008BEA                            ; ===========================================================================
00008BEA 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008BEC 0000                       		dc.w Resize_SLZ3boss-off_7118
00008BEE 0000                       		dc.w Resize_SLZ3end-off_7118
00008BF0                            ; ===========================================================================
00008BF0                            
00008BF0                            Resize_SLZ3main:
00008BF0 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008BF6 6500                       		bcs.s	locret_7130
00008BF8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008BFE 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C02                            
00008C02                            locret_7130:
00008C02 4E75                       		rts	
00008C04                            ; ===========================================================================
00008C04                            
00008C04                            Resize_SLZ3boss:
00008C04 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008C0A 6500                       		bcs.s	locret_715C
00008C0C 6100 0000                  		bsr.w	SingleObjLoad
00008C10 6600                       		bne.s	loc_7144
00008C12 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008C16                            
00008C16                            loc_7144:
00008C16 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008C1C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008C22 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C26 7011                       		moveq	#$11,d0
00008C28 6000 895C                  		bra.w	LoadPLC		; load boss patterns
00008C2C                            ; ===========================================================================
00008C2C                            
00008C2C                            locret_715C:
00008C2C 4E75                       		rts	
00008C2E                            ; ===========================================================================
00008C2E                            
00008C2E                            Resize_SLZ3end:
00008C2E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008C34 4E75                       		rts
00008C36 4E75                       		rts
00008C38                            ; ===========================================================================
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            ; Spring Yard Zone dynamic screen resizing
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            
00008C38                            Resize_SYZ:				; XREF: Resize_Index
00008C38 7000                       		moveq	#0,d0
00008C3A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008C3E D040                       		add.w	d0,d0
00008C40 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008C44 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008C48                            ; ===========================================================================
00008C48 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008C4A 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008C4C 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008C4E                            ; ===========================================================================
00008C4E                            
00008C4E                            Resize_SYZ1:
00008C4E 4E75                       		rts	
00008C50                            ; ===========================================================================
00008C50                            
00008C50                            Resize_SYZ2:
00008C50 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008C56 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008C5C 6500                       		bcs.s	locret_71A2
00008C5E 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008C64 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008C6A 6500                       		bcs.s	locret_71A2
00008C6C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008C72                            
00008C72                            locret_71A2:
00008C72 4E75                       		rts	
00008C74                            ; ===========================================================================
00008C74                            
00008C74                            Resize_SYZ3:
00008C74 7000                       		moveq	#0,d0
00008C76 1038 F742                  		move.b	($FFFFF742).w,d0
00008C7A 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008C7E 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008C82                            ; ===========================================================================
00008C82 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00008C84 0000                       		dc.w Resize_SYZ3boss-off_71B2
00008C86 0000                       		dc.w Resize_SYZ3end-off_71B2
00008C88                            ; ===========================================================================
00008C88                            
00008C88                            Resize_SYZ3main:
00008C88 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008C8E 6500                       		bcs.s	locret_71CE
00008C90 6100 0000                  		bsr.w	SingleObjLoad
00008C94 6600                       		bne.s	locret_71CE
00008C96 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008C9A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C9E                            
00008C9E                            locret_71CE:
00008C9E 4E75                       		rts	
00008CA0                            ; ===========================================================================
00008CA0                            
00008CA0                            Resize_SYZ3boss:
00008CA0 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00008CA6 6500                       		bcs.s	locret_7200
00008CA8 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008CAE 6100 0000                  		bsr.w	SingleObjLoad
00008CB2 6600                       		bne.s	loc_71EC
00008CB4 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00008CB8 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CBC                            
00008CBC                            loc_71EC:
00008CBC 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008CC2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008CC8 7011                       		moveq	#$11,d0
00008CCA 6000 88BA                  		bra.w	LoadPLC		; load boss patterns
00008CCE                            ; ===========================================================================
00008CCE                            
00008CCE                            locret_7200:
00008CCE 4E75                       		rts	
00008CD0                            ; ===========================================================================
00008CD0                            
00008CD0                            Resize_SYZ3end:
00008CD0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008CD6 4E75                       		rts	
00008CD8                            ; ===========================================================================
00008CD8                            ; ---------------------------------------------------------------------------
00008CD8                            ; Scrap	Brain Zone dynamic screen resizing
00008CD8                            ; ---------------------------------------------------------------------------
00008CD8                            
00008CD8                            Resize_SBZ:				; XREF: Resize_Index
00008CD8 7000                       		moveq	#0,d0
00008CDA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008CDE D040                       		add.w	d0,d0
00008CE0 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008CE4 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00008CE8                            ; ===========================================================================
00008CE8 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008CEA 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008CEC 0000                       		dc.w Resize_FZ-Resize_SBZx
00008CEE                            ; ===========================================================================
00008CEE                            
00008CEE                            Resize_SBZ1:
00008CEE 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008CF4 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008CFA 6500                       		bcs.s	locret_7242
00008CFC 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008D02 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008D08 6500                       		bcs.s	locret_7242
00008D0A 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008D10                            
00008D10                            locret_7242:
00008D10 4E75                       		rts	
00008D12                            ; ===========================================================================
00008D12                            
00008D12                            Resize_SBZ2:
00008D12 7000                       		moveq	#0,d0
00008D14 1038 F742                  		move.b	($FFFFF742).w,d0
00008D18 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008D1C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008D20                            ; ===========================================================================
00008D20 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008D22 0000                       		dc.w Resize_SBZ2boss-off_7252
00008D24 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008D26 0000                       		dc.w Resize_SBZ2end-off_7252
00008D28                            ; ===========================================================================
00008D28                            
00008D28                            Resize_SBZ2main:
00008D28 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008D2E 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008D34 6500                       		bcs.s	locret_727A
00008D36 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008D3C 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008D42 6500                       		bcs.s	locret_727A
00008D44 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D48                            
00008D48                            locret_727A:
00008D48 4E75                       		rts	
00008D4A                            ; ===========================================================================
00008D4A                            
00008D4A                            Resize_SBZ2boss:
00008D4A 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008D50 6500                       		bcs.s	locret_7298
00008D52 6100 0000                  		bsr.w	SingleObjLoad
00008D56 6600                       		bne.s	locret_7298
00008D58 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008D5C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D60 701E                       		moveq	#$1E,d0
00008D62 6000 8822                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008D66                            ; ===========================================================================
00008D66                            
00008D66                            locret_7298:
00008D66 4E75                       		rts	
00008D68                            ; ===========================================================================
00008D68                            
00008D68                            Resize_SBZ2boss2:
00008D68 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008D6E 6500                       		bcs.s	loc_72B6
00008D70 6100 0000                  		bsr.w	SingleObjLoad
00008D74 6600                       		bne.s	loc_72B0
00008D76 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008D7A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D7E                            
00008D7E                            loc_72B0:
00008D7E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008D84                            
00008D84                            loc_72B6:
00008D84 6000                       		bra.s	loc_72C2
00008D86                            ; ===========================================================================
00008D86                            
00008D86                            Resize_SBZ2end:
00008D86 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008D8C 6500                       		bcs.s	loc_72C2
00008D8E 4E75                       		rts	
00008D90                            ; ===========================================================================
00008D90                            
00008D90                            loc_72C2:
00008D90 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008D96 4E75                       		rts	
00008D98                            ; ===========================================================================
00008D98                            
00008D98                            Resize_FZ:
00008D98 7000                       		moveq	#0,d0
00008D9A 1038 F742                  		move.b	($FFFFF742).w,d0
00008D9E 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008DA2 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008DA6                            ; ===========================================================================
00008DA6 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008DAA 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008DAE 0000                       		dc.w Resize_FZend2-off_72D8
00008DB0                            ; ===========================================================================
00008DB0                            
00008DB0                            Resize_FZmain:
00008DB0 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00008DB6 6500                       		bcs.s	loc_72F4
00008DB8 5438 F742                  		addq.b	#2,($FFFFF742).w
00008DBC 701F                       		moveq	#$1F,d0
00008DBE 6100 87C6                  		bsr.w	LoadPLC		; load FZ boss patterns
00008DC2                            
00008DC2                            loc_72F4:
00008DC2 60CC                       		bra.s	loc_72C2
00008DC4                            ; ===========================================================================
00008DC4                            
00008DC4                            Resize_FZboss:
00008DC4 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008DCA 6500                       		bcs.s	loc_7312
00008DCC 6100 0000                  		bsr.w	SingleObjLoad
00008DD0 6600                       		bne.s	loc_7312
00008DD2 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00008DD6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008DDA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008DE0                            
00008DE0                            loc_7312:
00008DE0 60AE                       		bra.s	loc_72C2
00008DE2                            ; ===========================================================================
00008DE2                            
00008DE2                            Resize_FZend:
00008DE2 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008DE8 6500                       		bcs.s	loc_7320
00008DEA 5438 F742                  		addq.b	#2,($FFFFF742).w
00008DEE                            
00008DEE                            loc_7320:
00008DEE 60A0                       		bra.s	loc_72C2
00008DF0                            ; ===========================================================================
00008DF0                            
00008DF0                            locret_7322:
00008DF0 4E75                       		rts	
00008DF2                            ; ===========================================================================
00008DF2                            
00008DF2                            Resize_FZend2:
00008DF2 609C                       		bra.s	loc_72C2
00008DF4                            ; ===========================================================================
00008DF4                            ; ---------------------------------------------------------------------------
00008DF4                            ; Ending sequence dynamic screen resizing (empty)
00008DF4                            ; ---------------------------------------------------------------------------
00008DF4                            
00008DF4                            Resize_Ending:				; XREF: Resize_Index
00008DF4 4E75                       		rts	
00008DF6                            ; ===========================================================================
00008DF6                            ; ---------------------------------------------------------------------------
00008DF6                            ; Object 11 - GHZ bridge
00008DF6                            ; ---------------------------------------------------------------------------
00008DF6                            
00008DF6                            Obj11:					; XREF: Obj_Index
00008DF6 7000                       		moveq	#0,d0
00008DF8 1028 0024                  		move.b	$24(a0),d0
00008DFC 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008E00 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008E04                            ; ===========================================================================
00008E04 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008E08 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008E0C 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008E10                            ; ===========================================================================
00008E10                            
00008E10                            Obj11_Main:				; XREF: Obj11_Index
00008E10 5428 0024                  		addq.b	#2,$24(a0)
00008E14 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008E1C 317C 438E 0002             		move.w	#$438E,2(a0)
00008E22 117C 0004 0001             		move.b	#4,1(a0)
00008E28 117C 0003 0018             		move.b	#3,$18(a0)
00008E2E 117C 0080 0019             		move.b	#$80,$19(a0)
00008E34 3428 000C                  		move.w	$C(a0),d2
00008E38 3628 0008                  		move.w	8(a0),d3
00008E3C 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008E3E 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008E42 7200                       		moveq	#0,d1
00008E44 1212                       		move.b	(a2),d1		; copy a2 to d1
00008E46 14FC 0000                  		move.b	#0,(a2)+
00008E4A 3001                       		move.w	d1,d0
00008E4C E248                       		lsr.w	#1,d0
00008E4E E948                       		lsl.w	#4,d0
00008E50 9640                       		sub.w	d0,d3
00008E52 5501                       		subq.b	#2,d1
00008E54 6500                       		bcs.s	Obj11_Action
00008E56                            
00008E56                            Obj11_MakeBdg:
00008E56 6100 0000                  		bsr.w	SingleObjLoad
00008E5A 6600                       		bne.s	Obj11_Action
00008E5C 5228 0028                  		addq.b	#1,$28(a0)
00008E60 B668 0008                  		cmp.w	8(a0),d3
00008E64 6600                       		bne.s	loc_73B8
00008E66 0643 0010                  		addi.w	#$10,d3
00008E6A 3142 000C                  		move.w	d2,$C(a0)
00008E6E 3142 003C                  		move.w	d2,$3C(a0)
00008E72 3A08                       		move.w	a0,d5
00008E74 0445 D000                  		subi.w	#-$3000,d5
00008E78 EC4D                       		lsr.w	#6,d5
00008E7A 0245 007F                  		andi.w	#$7F,d5
00008E7E 14C5                       		move.b	d5,(a2)+
00008E80 5228 0028                  		addq.b	#1,$28(a0)
00008E84                            
00008E84                            loc_73B8:				; XREF: ROM:00007398j
00008E84 3A09                       		move.w	a1,d5
00008E86 0445 D000                  		subi.w	#-$3000,d5
00008E8A EC4D                       		lsr.w	#6,d5
00008E8C 0245 007F                  		andi.w	#$7F,d5
00008E90 14C5                       		move.b	d5,(a2)+
00008E92 137C 000A 0024             		move.b	#$A,$24(a1)
00008E98 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008E9A 3342 000C                  		move.w	d2,$C(a1)
00008E9E 3342 003C                  		move.w	d2,$3C(a1)
00008EA2 3343 0008                  		move.w	d3,8(a1)
00008EA6 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008EAE 337C 438E 0002             		move.w	#$438E,2(a1)
00008EB4 137C 0004 0001             		move.b	#4,1(a1)
00008EBA 137C 0003 0018             		move.b	#3,$18(a1)
00008EC0 137C 0008 0019             		move.b	#8,$19(a1)
00008EC6 0643 0010                  		addi.w	#$10,d3
00008ECA 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008ECE                            
00008ECE                            Obj11_Action:				; XREF: Obj11_Index
00008ECE 6100                       		bsr.s	Obj11_Solid
00008ED0 4A28 003E                  		tst.b	$3E(a0)
00008ED4 6700                       		beq.s	Obj11_Display
00008ED6 5928 003E                  		subq.b	#4,$3E(a0)
00008EDA 6100 0000                  		bsr.w	Obj11_Bend
00008EDE                            
00008EDE                            Obj11_Display:
00008EDE 6100 0000                  		bsr.w	DisplaySprite
00008EE2 6000 0000                  		bra.w	Obj11_ChkDel
00008EE6                            
00008EE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EE6                            
00008EE6                            
00008EE6                            Obj11_Solid:				; XREF: Obj11_Action
00008EE6 7200                       		moveq	#0,d1
00008EE8 1228 0028                  		move.b	$28(a0),d1
00008EEC E749                       		lsl.w	#3,d1
00008EEE 3401                       		move.w	d1,d2
00008EF0 5041                       		addq.w	#8,d1
00008EF2 D442                       		add.w	d2,d2
00008EF4 43F8 D000                  		lea	($FFFFD000).w,a1
00008EF8 4A69 0012                  		tst.w	$12(a1)
00008EFC 6B00 0000                  		bmi.w	locret_751E
00008F00 3029 0008                  		move.w	8(a1),d0
00008F04 9068 0008                  		sub.w	8(a0),d0
00008F08 D041                       		add.w	d1,d0
00008F0A 6B00 0000                  		bmi.w	locret_751E
00008F0E B042                       		cmp.w	d2,d0
00008F10 6400 0000                  		bcc.w	locret_751E
00008F14 6000                       		bra.s	Platform2
00008F16                            ; End of function Obj11_Solid
00008F16                            
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            ; Platform subroutine
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            
00008F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F16                            
00008F16                            
00008F16                            PlatformObject:
00008F16 43F8 D000                  		lea	($FFFFD000).w,a1
00008F1A 4A69 0012                  		tst.w	$12(a1)
00008F1E 6B00 0000                  		bmi.w	locret_751E
00008F22 3029 0008                  		move.w	8(a1),d0
00008F26 9068 0008                  		sub.w	8(a0),d0
00008F2A D041                       		add.w	d1,d0
00008F2C 6B00 0000                  		bmi.w	locret_751E
00008F30 D241                       		add.w	d1,d1
00008F32 B041                       		cmp.w	d1,d0
00008F34 6400 0000                  		bcc.w	locret_751E
00008F38                            
00008F38                            Platform2:
00008F38 3028 000C                  		move.w	$C(a0),d0
00008F3C 5140                       		subq.w	#8,d0
00008F3E                            
00008F3E                            Platform3:
00008F3E 3429 000C                  		move.w	$C(a1),d2
00008F42 1229 0016                  		move.b	$16(a1),d1
00008F46 4881                       		ext.w	d1
00008F48 D242                       		add.w	d2,d1
00008F4A 5841                       		addq.w	#4,d1
00008F4C 9041                       		sub.w	d1,d0
00008F4E 6200 0000                  		bhi.w	locret_751E
00008F52 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F56 6500 0000                  		bcs.w	locret_751E
00008F5A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F5E 6B00 0000                  		bmi.w	locret_751E
00008F62 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008F68 6400 0000                  		bcc.w	locret_751E
00008F6C D440                       		add.w	d0,d2
00008F6E 5642                       		addq.w	#3,d2
00008F70 3342 000C                  		move.w	d2,$C(a1)
00008F74 5428 0024                  		addq.b	#2,$24(a0)
00008F78                            
00008F78                            loc_74AE:
00008F78 0829 0003 0022             		btst	#3,$22(a1)
00008F7E 6700                       		beq.s	loc_74DC
00008F80 7000                       		moveq	#0,d0
00008F82 1029 003D                  		move.b	$3D(a1),d0
00008F86 ED48                       		lsl.w	#6,d0
00008F88 0680 00FF D000             		addi.l	#$FFD000,d0
00008F8E 2440                       		movea.l	d0,a2
00008F90 08AA 0003 0022             		bclr	#3,$22(a2)
00008F96 422A 0025                  		clr.b	$25(a2)
00008F9A 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008FA0 6600                       		bne.s	loc_74DC
00008FA2 552A 0024                  		subq.b	#2,$24(a2)
00008FA6                            
00008FA6                            loc_74DC:
00008FA6 3008                       		move.w	a0,d0
00008FA8 0440 D000                  		subi.w	#-$3000,d0
00008FAC EC48                       		lsr.w	#6,d0
00008FAE 0240 007F                  		andi.w	#$7F,d0
00008FB2 1340 003D                  		move.b	d0,$3D(a1)
00008FB6 137C 0000 0026             		move.b	#0,$26(a1)
00008FBC 337C 0000 0012             		move.w	#0,$12(a1)
00008FC2 3369 0010 0014             		move.w	$10(a1),$14(a1)
00008FC8 0829 0001 0022             		btst	#1,$22(a1)
00008FCE 6700                       		beq.s	loc_7512
00008FD0 2F08                       		move.l	a0,-(sp)
00008FD2 2049                       		movea.l	a1,a0
00008FD4 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008FDA 205F                       		movea.l	(sp)+,a0
00008FDC                            
00008FDC                            loc_7512:
00008FDC 08E9 0003 0022             		bset	#3,$22(a1)
00008FE2 08E8 0003 0022             		bset	#3,$22(a0)
00008FE8                            
00008FE8                            locret_751E:
00008FE8 4E75                       		rts	
00008FEA                            ; End of function PlatformObject
00008FEA                            
00008FEA                            ; ---------------------------------------------------------------------------
00008FEA                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008FEA                            ; ---------------------------------------------------------------------------
00008FEA                            
00008FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FEA                            
00008FEA                            
00008FEA                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008FEA 43F8 D000                  		lea	($FFFFD000).w,a1
00008FEE 4A69 0012                  		tst.w	$12(a1)
00008FF2 6B00 FFF4                  		bmi.w	locret_751E
00008FF6 3029 0008                  		move.w	8(a1),d0
00008FFA 9068 0008                  		sub.w	8(a0),d0
00008FFE D041                       		add.w	d1,d0
00009000 6BE6                       		bmi.s	locret_751E
00009002 D241                       		add.w	d1,d1
00009004 B041                       		cmp.w	d1,d0
00009006 64E0                       		bcc.s	locret_751E
00009008 0828 0000 0001             		btst	#0,1(a0)
0000900E 6700                       		beq.s	loc_754A
00009010 4640                       		not.w	d0
00009012 D041                       		add.w	d1,d0
00009014                            
00009014                            loc_754A:
00009014 E248                       		lsr.w	#1,d0
00009016 7600                       		moveq	#0,d3
00009018 1632 0000                  		move.b	(a2,d0.w),d3
0000901C 3028 000C                  		move.w	$C(a0),d0
00009020 9043                       		sub.w	d3,d0
00009022 6000 FF1A                  		bra.w	Platform3
00009026                            ; End of function SlopeObject
00009026                            
00009026                            
00009026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009026                            
00009026                            
00009026                            Obj15_Solid:				; XREF: Obj15_SetSolid
00009026 43F8 D000                  		lea	($FFFFD000).w,a1
0000902A 4A69 0012                  		tst.w	$12(a1)
0000902E 6B00 FFB8                  		bmi.w	locret_751E
00009032 3029 0008                  		move.w	8(a1),d0
00009036 9068 0008                  		sub.w	8(a0),d0
0000903A D041                       		add.w	d1,d0
0000903C 6B00 FFAA                  		bmi.w	locret_751E
00009040 D241                       		add.w	d1,d1
00009042 B041                       		cmp.w	d1,d0
00009044 6400 FFA2                  		bcc.w	locret_751E
00009048 3028 000C                  		move.w	$C(a0),d0
0000904C 9043                       		sub.w	d3,d0
0000904E 6000 FEEE                  		bra.w	Platform3
00009052                            ; End of function Obj15_Solid
00009052                            
00009052                            ; ===========================================================================
00009052                            
00009052                            Obj11_Action2:				; XREF: Obj11_Index
00009052 6100                       		bsr.s	Obj11_WalkOff
00009054 6100 0000                  		bsr.w	DisplaySprite
00009058 6000 0000                  		bra.w	Obj11_ChkDel
0000905C                            
0000905C                            ; ---------------------------------------------------------------------------
0000905C                            ; Subroutine allowing Sonic to walk off a bridge
0000905C                            ; ---------------------------------------------------------------------------
0000905C                            
0000905C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000905C                            
0000905C                            
0000905C                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000905C 7200                       		moveq	#0,d1
0000905E 1228 0028                  		move.b	$28(a0),d1
00009062 E749                       		lsl.w	#3,d1
00009064 3401                       		move.w	d1,d2
00009066 5041                       		addq.w	#8,d1
00009068 6100                       		bsr.s	ExitPlatform2
0000906A 6400                       		bcc.s	locret_75BE
0000906C E848                       		lsr.w	#4,d0
0000906E 1140 003F                  		move.b	d0,$3F(a0)
00009072 1028 003E                  		move.b	$3E(a0),d0
00009076 0C00 0040                  		cmpi.b	#$40,d0
0000907A 6700                       		beq.s	loc_75B6
0000907C 5828 003E                  		addq.b	#4,$3E(a0)
00009080                            
00009080                            loc_75B6:
00009080 6100 0000                  		bsr.w	Obj11_Bend
00009084 6100 0000                  		bsr.w	Obj11_MoveSonic
00009088                            
00009088                            locret_75BE:
00009088 4E75                       		rts	
0000908A                            ; End of function Obj11_WalkOff
0000908A                            
0000908A                            ; ---------------------------------------------------------------------------
0000908A                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000908A                            ; ---------------------------------------------------------------------------
0000908A                            
0000908A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000908A                            
0000908A                            
0000908A                            ExitPlatform:
0000908A 3401                       		move.w	d1,d2
0000908C                            
0000908C                            ExitPlatform2:
0000908C D442                       		add.w	d2,d2
0000908E 43F8 D000                  		lea	($FFFFD000).w,a1
00009092 0829 0001 0022             		btst	#1,$22(a1)
00009098 6600                       		bne.s	loc_75E0
0000909A 3029 0008                  		move.w	8(a1),d0
0000909E 9068 0008                  		sub.w	8(a0),d0
000090A2 D041                       		add.w	d1,d0
000090A4 6B00                       		bmi.s	loc_75E0
000090A6 B042                       		cmp.w	d2,d0
000090A8 6500                       		bcs.s	locret_75F2
000090AA                            
000090AA                            loc_75E0:
000090AA 08A9 0003 0022             		bclr	#3,$22(a1)
000090B0 117C 0002 0024             		move.b	#2,$24(a0)
000090B6 08A8 0003 0022             		bclr	#3,$22(a0)
000090BC                            
000090BC                            locret_75F2:
000090BC 4E75                       		rts	
000090BE                            ; End of function ExitPlatform
000090BE                            
000090BE                            
000090BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090BE                            
000090BE                            
000090BE                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000090BE 7000                       		moveq	#0,d0
000090C0 1028 003F                  		move.b	$3F(a0),d0
000090C4 1030 0029                  		move.b	$29(a0,d0.w),d0
000090C8 ED48                       		lsl.w	#6,d0
000090CA 0680 00FF D000             		addi.l	#$FFD000,d0
000090D0 2440                       		movea.l	d0,a2
000090D2 43F8 D000                  		lea	($FFFFD000).w,a1
000090D6 302A 000C                  		move.w	$C(a2),d0
000090DA 5140                       		subq.w	#8,d0
000090DC 7200                       		moveq	#0,d1
000090DE 1229 0016                  		move.b	$16(a1),d1
000090E2 9041                       		sub.w	d1,d0
000090E4 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000090E8 4E75                       		rts	
000090EA                            ; End of function Obj11_MoveSonic
000090EA                            
000090EA                            
000090EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090EA                            
000090EA                            
000090EA                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000090EA 1028 003E                  		move.b	$3E(a0),d0
000090EE 6100 9A8C                  		bsr.w	CalcSine
000090F2 3800                       		move.w	d0,d4
000090F4 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000090FA 7000                       		moveq	#0,d0
000090FC 1028 0028                  		move.b	$28(a0),d0
00009100 E948                       		lsl.w	#4,d0
00009102 7600                       		moveq	#0,d3
00009104 1628 003F                  		move.b	$3F(a0),d3
00009108 3403                       		move.w	d3,d2
0000910A D640                       		add.w	d0,d3
0000910C 7A00                       		moveq	#0,d5
0000910E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009114 1A35 3000                  		move.b	(a5,d3.w),d5
00009118 0243 000F                  		andi.w	#$F,d3
0000911C E94B                       		lsl.w	#4,d3
0000911E 47F4 3000                  		lea	(a4,d3.w),a3
00009122 45E8 0029                  		lea	$29(a0),a2
00009126                            
00009126                            loc_765C:
00009126 7000                       		moveq	#0,d0
00009128 101A                       		move.b	(a2)+,d0
0000912A ED48                       		lsl.w	#6,d0
0000912C 0680 00FF D000             		addi.l	#$FFD000,d0
00009132 2240                       		movea.l	d0,a1
00009134 7000                       		moveq	#0,d0
00009136 101B                       		move.b	(a3)+,d0
00009138 5240                       		addq.w	#1,d0
0000913A C0C5                       		mulu.w	d5,d0
0000913C C0C4                       		mulu.w	d4,d0
0000913E 4840                       		swap	d0
00009140 D069 003C                  		add.w	$3C(a1),d0
00009144 3340 000C                  		move.w	d0,$C(a1)
00009148 51CA FFDC                  		dbf	d2,loc_765C
0000914C 7000                       		moveq	#0,d0
0000914E 1028 0028                  		move.b	$28(a0),d0
00009152 7600                       		moveq	#0,d3
00009154 1628 003F                  		move.b	$3F(a0),d3
00009158 5203                       		addq.b	#1,d3
0000915A 9600                       		sub.b	d0,d3
0000915C 4403                       		neg.b	d3
0000915E 6B00                       		bmi.s	locret_76CA
00009160 3403                       		move.w	d3,d2
00009162 E94B                       		lsl.w	#4,d3
00009164 47F4 3000                  		lea	(a4,d3.w),a3
00009168 D6C2                       		adda.w	d2,a3
0000916A 5342                       		subq.w	#1,d2
0000916C 6500                       		bcs.s	locret_76CA
0000916E                            
0000916E                            loc_76A4:
0000916E 7000                       		moveq	#0,d0
00009170 101A                       		move.b	(a2)+,d0
00009172 ED48                       		lsl.w	#6,d0
00009174 0680 00FF D000             		addi.l	#$FFD000,d0
0000917A 2240                       		movea.l	d0,a1
0000917C 7000                       		moveq	#0,d0
0000917E 1023                       		move.b	-(a3),d0
00009180 5240                       		addq.w	#1,d0
00009182 C0C5                       		mulu.w	d5,d0
00009184 C0C4                       		mulu.w	d4,d0
00009186 4840                       		swap	d0
00009188 D069 003C                  		add.w	$3C(a1),d0
0000918C 3340 000C                  		move.w	d0,$C(a1)
00009190 51CA FFDC                  		dbf	d2,loc_76A4
00009194                            
00009194                            locret_76CA:
00009194 4E75                       		rts	
00009196                            ; End of function Obj11_Bend
00009196                            
00009196                            ; ===========================================================================
00009196                            ; ---------------------------------------------------------------------------
00009196                            ; GHZ bridge-bending data
00009196                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009196                            ; ---------------------------------------------------------------------------
00009196                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000092A6                            		even
000092A6                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000093A6                            		even
000093A6                            
000093A6                            ; ===========================================================================
000093A6                            
000093A6                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000093A6 3028 0008                  		move.w	8(a0),d0
000093AA 0240 FF80                  		andi.w	#$FF80,d0
000093AE 3238 F700                  		move.w	($FFFFF700).w,d1
000093B2 0441 0080                  		subi.w	#$80,d1
000093B6 0241 FF80                  		andi.w	#$FF80,d1
000093BA 9041                       		sub.w	d1,d0
000093BC 0C40 0280                  		cmpi.w	#$280,d0
000093C0 6200 0000                  		bhi.w	Obj11_DelAll
000093C4 4E75                       		rts	
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000093C6 7400                       		moveq	#0,d2
000093C8 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000093CC 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000093CE 5302                       		subq.b	#1,d2		; subtract 1
000093D0 6500                       		bcs.s	Obj11_Delete
000093D2                            
000093D2                            Obj11_DelLoop:
000093D2 7000                       		moveq	#0,d0
000093D4 101A                       		move.b	(a2)+,d0
000093D6 ED48                       		lsl.w	#6,d0
000093D8 0680 00FF D000             		addi.l	#$FFD000,d0
000093DE 2240                       		movea.l	d0,a1
000093E0 B048                       		cmp.w	a0,d0
000093E2 6700                       		beq.s	loc_791E
000093E4 6100 0000                  		bsr.w	DeleteObject2
000093E8                            
000093E8                            loc_791E:
000093E8 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000093EC                            
000093EC                            Obj11_Delete:
000093EC 6100 0000                  		bsr.w	DeleteObject
000093F0 4E75                       		rts	
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Obj11_Delete2:				; XREF: Obj11_Index
000093F2 6100 0000                  		bsr.w	DeleteObject
000093F6 4E75                       		rts	
000093F8                            ; ===========================================================================
000093F8                            
000093F8                            Obj11_Display2:				; XREF: Obj11_Index
000093F8 6100 0000                  		bsr.w	DisplaySprite
000093FC 4E75                       		rts	
000093FE                            ; ===========================================================================
000093FE                            ; ---------------------------------------------------------------------------
000093FE                            ; Sprite mappings - GHZ	bridge
000093FE                            ; ---------------------------------------------------------------------------
000093FE                            Map_obj11:
000093FE                            	include "_maps\obj11.asm"
000093FE                            ; ---------------------------------------------------------------------------
000093FE                            ; Sprite mappings - GHZ	bridge
000093FE                            ; ---------------------------------------------------------------------------
000093FE 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00009402 0000                       		dc.w byte_794B-Map_obj11
00009404 01                         byte_793A:	dc.b 1
00009405 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000940A 02                         byte_7940:	dc.b 2
0000940B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00009410 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009415 01                         byte_794B:	dc.b 1
00009416 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000941C 00                         		even
0000941C 00                         		even
0000941C                            
0000941C                            ; ===========================================================================
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000941C                            ;	    - spiked ball on a chain (SBZ)
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            
0000941C                            Obj15:					; XREF: Obj_Index
0000941C 7000                       		moveq	#0,d0
0000941E 1028 0024                  		move.b	$24(a0),d0
00009422 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00009426 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000942A                            ; ===========================================================================
0000942A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000942E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00009432 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00009436 0000                       		dc.w Obj15_Action-Obj15_Index
00009438                            ; ===========================================================================
00009438                            
00009438                            Obj15_Main:				; XREF: Obj15_Index
00009438 5428 0024                  		addq.b	#2,$24(a0)
0000943C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00009444 317C 4380 0002             		move.w	#$4380,2(a0)
0000944A 117C 0004 0001             		move.b	#4,1(a0)
00009450 117C 0003 0018             		move.b	#3,$18(a0)
00009456 117C 0018 0019             		move.b	#$18,$19(a0)
0000945C 117C 0008 0016             		move.b	#8,$16(a0)
00009462 3168 000C 0038             		move.w	$C(a0),$38(a0)
00009468 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000946E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009474 6600                       		bne.s	Obj15_NotSLZ
00009476 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000947E 317C 43DC 0002             		move.w	#$43DC,2(a0)
00009484 117C 0020 0019             		move.b	#$20,$19(a0)
0000948A 117C 0010 0016             		move.b	#$10,$16(a0)
00009490 117C 0099 0020             		move.b	#$99,$20(a0)
00009496                            
00009496                            Obj15_NotSLZ:
00009496 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000949C 6600                       		bne.s	Obj15_SetLength
0000949E 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000094A6 317C 0391 0002             		move.w	#$391,2(a0)
000094AC 117C 0018 0019             		move.b	#$18,$19(a0)
000094B2 117C 0018 0016             		move.b	#$18,$16(a0)
000094B8 117C 0086 0020             		move.b	#$86,$20(a0)
000094BE 117C 000C 0024             		move.b	#$C,$24(a0)
000094C4                            
000094C4                            Obj15_SetLength:
000094C4 1810                       		move.b	0(a0),d4
000094C6 7200                       		moveq	#0,d1
000094C8 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000094CC 1212                       		move.b	(a2),d1		; move a2 to d1
000094CE 3F01                       		move.w	d1,-(sp)
000094D0 0241 000F                  		andi.w	#$F,d1
000094D4 14FC 0000                  		move.b	#0,(a2)+
000094D8 3601                       		move.w	d1,d3
000094DA E94B                       		lsl.w	#4,d3
000094DC 5003                       		addq.b	#8,d3
000094DE 1143 003C                  		move.b	d3,$3C(a0)
000094E2 5103                       		subq.b	#8,d3
000094E4 4A28 001A                  		tst.b	$1A(a0)
000094E8 6700                       		beq.s	Obj15_MakeChain
000094EA 5003                       		addq.b	#8,d3
000094EC 5341                       		subq.w	#1,d1
000094EE                            
000094EE                            Obj15_MakeChain:
000094EE 6100 0000                  		bsr.w	SingleObjLoad
000094F2 6600                       		bne.s	loc_7A92
000094F4 5228 0028                  		addq.b	#1,$28(a0)
000094F8 3A09                       		move.w	a1,d5
000094FA 0445 D000                  		subi.w	#-$3000,d5
000094FE EC4D                       		lsr.w	#6,d5
00009500 0245 007F                  		andi.w	#$7F,d5
00009504 14C5                       		move.b	d5,(a2)+
00009506 137C 000A 0024             		move.b	#$A,$24(a1)
0000950C 1284                       		move.b	d4,0(a1)	; load swinging	object
0000950E 2368 0004 0004             		move.l	4(a0),4(a1)
00009514 3368 0002 0002             		move.w	2(a0),2(a1)
0000951A 08A9 0006 0002             		bclr	#6,2(a1)
00009520 137C 0004 0001             		move.b	#4,1(a1)
00009526 137C 0004 0018             		move.b	#4,$18(a1)
0000952C 137C 0008 0019             		move.b	#8,$19(a1)
00009532 137C 0001 001A             		move.b	#1,$1A(a1)
00009538 1343 003C                  		move.b	d3,$3C(a1)
0000953C 0403 0010                  		subi.b	#$10,d3
00009540 6400                       		bcc.s	loc_7A8E
00009542 137C 0002 001A             		move.b	#2,$1A(a1)
00009548 137C 0003 0018             		move.b	#3,$18(a1)
0000954E 08E9 0006 0002             		bset	#6,2(a1)
00009554                            
00009554                            loc_7A8E:
00009554 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00009558                            
00009558                            loc_7A92:
00009558 3A08                       		move.w	a0,d5
0000955A 0445 D000                  		subi.w	#-$3000,d5
0000955E EC4D                       		lsr.w	#6,d5
00009560 0245 007F                  		andi.w	#$7F,d5
00009564 14C5                       		move.b	d5,(a2)+
00009566 317C 4080 0026             		move.w	#$4080,$26(a0)
0000956C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009572 321F                       		move.w	(sp)+,d1
00009574 0801 0004                  		btst	#4,d1		; is object type $8X ?
00009578 6700                       		beq.s	loc_7AD4	; if not, branch
0000957A 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00009582 317C 43AA 0002             		move.w	#$43AA,2(a0)
00009588 117C 0001 001A             		move.b	#1,$1A(a0)
0000958E 117C 0002 0018             		move.b	#2,$18(a0)
00009594 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000959A                            
0000959A                            loc_7AD4:
0000959A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000095A0 6700                       		beq.s	Obj15_Action	; if yes, branch
000095A2                            
000095A2                            Obj15_SetSolid:				; XREF: Obj15_Index
000095A2 7200                       		moveq	#0,d1
000095A4 1228 0019                  		move.b	$19(a0),d1
000095A8 7600                       		moveq	#0,d3
000095AA 1628 0016                  		move.b	$16(a0),d3
000095AE 6100 FA76                  		bsr.w	Obj15_Solid
000095B2                            
000095B2                            Obj15_Action:				; XREF: Obj15_Index
000095B2 6100 0000                  		bsr.w	Obj15_Move
000095B6 6100 0000                  		bsr.w	DisplaySprite
000095BA 6000 0000                  		bra.w	Obj15_ChkDel
000095BE                            ; ===========================================================================
000095BE                            
000095BE                            Obj15_Action2:				; XREF: Obj15_Index
000095BE 7200                       		moveq	#0,d1
000095C0 1228 0019                  		move.b	$19(a0),d1
000095C4 6100 FAC4                  		bsr.w	ExitPlatform
000095C8 3F28 0008                  		move.w	8(a0),-(sp)
000095CC 6100 0000                  		bsr.w	Obj15_Move
000095D0 341F                       		move.w	(sp)+,d2
000095D2 7600                       		moveq	#0,d3
000095D4 1628 0016                  		move.b	$16(a0),d3
000095D8 5203                       		addq.b	#1,d3
000095DA 6100 0000                  		bsr.w	MvSonicOnPtfm
000095DE 6100 0000                  		bsr.w	DisplaySprite
000095E2 6000 0000                  		bra.w	Obj15_ChkDel
000095E6                            
000095E6 4E75                       		rts
000095E8                            
000095E8                            ; ---------------------------------------------------------------------------
000095E8                            ; Subroutine to	change Sonic's position with a platform
000095E8                            ; ---------------------------------------------------------------------------
000095E8                            
000095E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095E8                            
000095E8                            
000095E8                            MvSonicOnPtfm:
000095E8 43F8 D000                  		lea	($FFFFD000).w,a1
000095EC 3028 000C                  		move.w	$C(a0),d0
000095F0 9043                       		sub.w	d3,d0
000095F2 6000                       		bra.s	MvSonic2
000095F4                            ; End of function MvSonicOnPtfm
000095F4                            
000095F4                            ; ---------------------------------------------------------------------------
000095F4                            ; Subroutine to	change Sonic's position with a platform
000095F4                            ; ---------------------------------------------------------------------------
000095F4                            
000095F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095F4                            
000095F4                            
000095F4                            MvSonicOnPtfm2:
000095F4 43F8 D000                  		lea	($FFFFD000).w,a1
000095F8 3028 000C                  		move.w	$C(a0),d0
000095FC 0440 0009                  		subi.w	#9,d0
00009600                            
00009600                            MvSonic2:
00009600 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009604 6B00                       		bmi.s	locret_7B62
00009606 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000960C 6400                       		bcc.s	locret_7B62
0000960E 4A78 FE08                  		tst.w	($FFFFFE08).w
00009612 6600                       		bne.s	locret_7B62
00009614 7200                       		moveq	#0,d1
00009616 1229 0016                  		move.b	$16(a1),d1
0000961A 9041                       		sub.w	d1,d0
0000961C 3340 000C                  		move.w	d0,$C(a1)
00009620 9468 0008                  		sub.w	8(a0),d2
00009624 9569 0008                  		sub.w	d2,8(a1)
00009628                            
00009628                            locret_7B62:
00009628 4E75                       		rts	
0000962A                            ; End of function MvSonicOnPtfm2
0000962A                            
0000962A                            
0000962A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000962A                            
0000962A                            
0000962A                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000962A 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000962E 323C 0080                  		move.w	#$80,d1
00009632 0828 0000 0022             		btst	#0,$22(a0)
00009638 6700                       		beq.s	loc_7B78
0000963A 4440                       		neg.w	d0
0000963C D041                       		add.w	d1,d0
0000963E                            
0000963E                            loc_7B78:
0000963E 6000                       		bra.s	Obj15_Move2
00009640                            ; End of function Obj15_Move
00009640                            
00009640                            
00009640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009640                            
00009640                            
00009640                            Obj48_Move:				; XREF: Obj48_Display2
00009640 4A28 003D                  		tst.b	$3D(a0)
00009644 6600                       		bne.s	loc_7B9C
00009646 3028 003E                  		move.w	$3E(a0),d0
0000964A 5040                       		addq.w	#8,d0
0000964C 3140 003E                  		move.w	d0,$3E(a0)
00009650 D168 0026                  		add.w	d0,$26(a0)
00009654 0C40 0200                  		cmpi.w	#$200,d0
00009658 6600                       		bne.s	loc_7BB6
0000965A 117C 0001 003D             		move.b	#1,$3D(a0)
00009660 6000                       		bra.s	loc_7BB6
00009662                            ; ===========================================================================
00009662                            
00009662                            loc_7B9C:
00009662 3028 003E                  		move.w	$3E(a0),d0
00009666 5140                       		subq.w	#8,d0
00009668 3140 003E                  		move.w	d0,$3E(a0)
0000966C D168 0026                  		add.w	d0,$26(a0)
00009670 0C40 FE00                  		cmpi.w	#-$200,d0
00009674 6600                       		bne.s	loc_7BB6
00009676 117C 0000 003D             		move.b	#0,$3D(a0)
0000967C                            
0000967C                            loc_7BB6:
0000967C 1028 0026                  		move.b	$26(a0),d0
00009680                            ; End of function Obj48_Move
00009680                            
00009680                            
00009680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009680                            
00009680                            
00009680                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00009680 6100 94FA                  		bsr.w	CalcSine
00009684 3428 0038                  		move.w	$38(a0),d2
00009688 3628 003A                  		move.w	$3A(a0),d3
0000968C 45E8 0028                  		lea	$28(a0),a2
00009690 7C00                       		moveq	#0,d6
00009692 1C1A                       		move.b	(a2)+,d6
00009694                            
00009694                            loc_7BCE:
00009694 7800                       		moveq	#0,d4
00009696 181A                       		move.b	(a2)+,d4
00009698 ED4C                       		lsl.w	#6,d4
0000969A 0684 00FF D000             		addi.l	#$FFD000,d4
000096A0 2244                       		movea.l	d4,a1
000096A2 7800                       		moveq	#0,d4
000096A4 1829 003C                  		move.b	$3C(a1),d4
000096A8 2A04                       		move.l	d4,d5
000096AA C9C0                       		muls.w	d0,d4
000096AC E084                       		asr.l	#8,d4
000096AE CBC1                       		muls.w	d1,d5
000096B0 E085                       		asr.l	#8,d5
000096B2 D842                       		add.w	d2,d4
000096B4 DA43                       		add.w	d3,d5
000096B6 3344 000C                  		move.w	d4,$C(a1)
000096BA 3345 0008                  		move.w	d5,8(a1)
000096BE 51CE FFD4                  		dbf	d6,loc_7BCE
000096C2 4E75                       		rts	
000096C4                            ; End of function Obj15_Move2
000096C4                            
000096C4                            ; ===========================================================================
000096C4                            
000096C4                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000096C4 3028 003A                  		move.w	$3A(a0),d0
000096C8 0240 FF80                  		andi.w	#$FF80,d0
000096CC 3238 F700                  		move.w	($FFFFF700).w,d1
000096D0 0441 0080                  		subi.w	#$80,d1
000096D4 0241 FF80                  		andi.w	#$FF80,d1
000096D8 9041                       		sub.w	d1,d0
000096DA 0C40 0280                  		cmpi.w	#$280,d0
000096DE 6200 0000                  		bhi.w	Obj15_DelAll
000096E2 4E75                       		rts	
000096E4                            ; ===========================================================================
000096E4                            
000096E4                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000096E4 7400                       		moveq	#0,d2
000096E6 45E8 0028                  		lea	$28(a0),a2
000096EA 141A                       		move.b	(a2)+,d2
000096EC                            
000096EC                            Obj15_DelLoop:
000096EC 7000                       		moveq	#0,d0
000096EE 101A                       		move.b	(a2)+,d0
000096F0 ED48                       		lsl.w	#6,d0
000096F2 0680 00FF D000             		addi.l	#$FFD000,d0
000096F8 2240                       		movea.l	d0,a1
000096FA 6100 0000                  		bsr.w	DeleteObject2
000096FE 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00009702 4E75                       		rts	
00009704                            ; ===========================================================================
00009704                            
00009704                            Obj15_Delete:				; XREF: Obj15_Index
00009704 6100 0000                  		bsr.w	DeleteObject
00009708 4E75                       		rts	
0000970A                            ; ===========================================================================
0000970A                            
0000970A                            Obj15_Display:				; XREF: Obj15_Index
0000970A 6000 0000                  		bra.w	DisplaySprite
0000970E                            ; ===========================================================================
0000970E                            ; ---------------------------------------------------------------------------
0000970E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000970E                            ; ---------------------------------------------------------------------------
0000970E                            Map_obj15:
0000970E                            	include "_maps\obj15ghz.asm"
0000970E                            ; ---------------------------------------------------------------------------
0000970E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000970E                            ; ---------------------------------------------------------------------------
0000970E 0000                       		dc.w byte_7C4E-Map_obj15
00009710 0000                       		dc.w byte_7C59-Map_obj15
00009712 0000                       		dc.w byte_7C5F-Map_obj15
00009714 02                         byte_7C4E:	dc.b 2
00009715 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000971A F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000971F 01                         byte_7C59:	dc.b 1
00009720 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009725 01                         byte_7C5F:	dc.b 1
00009726 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000972C 00                         		even
0000972C 00                         		even
0000972C                            
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            ; Sprite mappings - SLZ	swinging platforms
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            Map_obj15a:
0000972C                            	include "_maps\obj15slz.asm"
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            ; Sprite mappings - SLZ	swinging platforms
0000972C                            ; ---------------------------------------------------------------------------
0000972C 0000                       		dc.w byte_7C6C-Map_obj15a
0000972E 0000                       		dc.w byte_7C95-Map_obj15a
00009730 0000                       		dc.w byte_7C9B-Map_obj15a
00009732 08                         byte_7C6C:	dc.b 8
00009733 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009738 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000973D F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009742 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009747 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000974C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009751 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009756 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000975B 01                         byte_7C95:	dc.b 1
0000975C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009761 01                         byte_7C9B:	dc.b 1
00009762 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009768 00                         		even
00009768 00                         		even
00009768                            
00009768                            ; ===========================================================================
00009768                            ; ---------------------------------------------------------------------------
00009768                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009768                            ; ---------------------------------------------------------------------------
00009768                            
00009768                            Obj17:					; XREF: Obj_Index
00009768 7000                       		moveq	#0,d0
0000976A 1028 0024                  		move.b	$24(a0),d0
0000976E 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00009772 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00009776                            ; ===========================================================================
00009776 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00009778 0000                       		dc.w Obj17_Action-Obj17_Index
0000977A 0000                       		dc.w Obj17_Action-Obj17_Index
0000977C 0000                       		dc.w Obj17_Delete-Obj17_Index
0000977E 0000                       		dc.w Obj17_Display-Obj17_Index
00009780                            ; ===========================================================================
00009780                            
00009780                            Obj17_Main:				; XREF: Obj17_Index
00009780 5428 0024                  		addq.b	#2,$24(a0)
00009784 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000978C 317C 4398 0002             		move.w	#$4398,2(a0)
00009792 117C 0007 0022             		move.b	#7,$22(a0)
00009798 117C 0004 0001             		move.b	#4,1(a0)
0000979E 117C 0003 0018             		move.b	#3,$18(a0)
000097A4 117C 0008 0019             		move.b	#8,$19(a0)
000097AA 3428 000C                  		move.w	$C(a0),d2
000097AE 3628 0008                  		move.w	8(a0),d3
000097B2 1810                       		move.b	0(a0),d4
000097B4 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000097B8 7200                       		moveq	#0,d1
000097BA 1212                       		move.b	(a2),d1		; move a2 to d1
000097BC 14FC 0000                  		move.b	#0,(a2)+
000097C0 3001                       		move.w	d1,d0
000097C2 E248                       		lsr.w	#1,d0
000097C4 E948                       		lsl.w	#4,d0
000097C6 9640                       		sub.w	d0,d3
000097C8 5501                       		subq.b	#2,d1
000097CA 6500                       		bcs.s	Obj17_Action
000097CC 7C00                       		moveq	#0,d6
000097CE                            
000097CE                            Obj17_MakeHelix:
000097CE 6100 0000                  		bsr.w	SingleObjLoad
000097D2 6600                       		bne.s	Obj17_Action
000097D4 5228 0028                  		addq.b	#1,$28(a0)
000097D8 3A09                       		move.w	a1,d5
000097DA 0445 D000                  		subi.w	#$D000,d5
000097DE EC4D                       		lsr.w	#6,d5
000097E0 0245 007F                  		andi.w	#$7F,d5
000097E4 14C5                       		move.b	d5,(a2)+
000097E6 137C 0008 0024             		move.b	#8,$24(a1)
000097EC 1284                       		move.b	d4,0(a1)
000097EE 3342 000C                  		move.w	d2,$C(a1)
000097F2 3343 0008                  		move.w	d3,8(a1)
000097F6 2368 0004 0004             		move.l	4(a0),4(a1)
000097FC 337C 4398 0002             		move.w	#$4398,2(a1)
00009802 137C 0004 0001             		move.b	#4,1(a1)
00009808 137C 0003 0018             		move.b	#3,$18(a1)
0000980E 137C 0008 0019             		move.b	#8,$19(a1)
00009814 1346 003E                  		move.b	d6,$3E(a1)
00009818 5206                       		addq.b	#1,d6
0000981A 0206 0007                  		andi.b	#7,d6
0000981E 0643 0010                  		addi.w	#$10,d3
00009822 B668 0008                  		cmp.w	8(a0),d3
00009826 6600                       		bne.s	loc_7D78
00009828 1146 003E                  		move.b	d6,$3E(a0)
0000982C 5206                       		addq.b	#1,d6
0000982E 0206 0007                  		andi.b	#7,d6
00009832 0643 0010                  		addi.w	#$10,d3
00009836 5228 0028                  		addq.b	#1,$28(a0)
0000983A                            
0000983A                            loc_7D78:
0000983A 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000983E                            
0000983E                            Obj17_Action:				; XREF: Obj17_Index
0000983E 6100 0000                  		bsr.w	Obj17_RotateSpikes
00009842 6100 0000                  		bsr.w	DisplaySprite
00009846 6000 0000                  		bra.w	Obj17_ChkDel
0000984A                            
0000984A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000984A                            
0000984A                            
0000984A                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000984A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000984E 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00009854 D028 003E                  		add.b	$3E(a0),d0
00009858 0200 0007                  		andi.b	#7,d0
0000985C 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00009860 6600                       		bne.s	locret_7DA6
00009862 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00009868                            
00009868                            locret_7DA6:
00009868 4E75                       		rts	
0000986A                            ; End of function Obj17_RotateSpikes
0000986A                            
0000986A                            ; ===========================================================================
0000986A                            
0000986A                            Obj17_ChkDel:				; XREF: Obj17_Action
0000986A 3028 0008                  		move.w	8(a0),d0
0000986E 0240 FF80                  		andi.w	#$FF80,d0
00009872 3238 F700                  		move.w	($FFFFF700).w,d1
00009876 0441 0080                  		subi.w	#$80,d1
0000987A 0241 FF80                  		andi.w	#$FF80,d1
0000987E 9041                       		sub.w	d1,d0
00009880 0C40 0280                  		cmpi.w	#$280,d0
00009884 6200 0000                  		bhi.w	Obj17_DelAll
00009888 4E75                       		rts	
0000988A                            ; ===========================================================================
0000988A                            
0000988A                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000988A 7400                       		moveq	#0,d2
0000988C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00009890 141A                       		move.b	(a2)+,d2	; move a2 to d2
00009892 5502                       		subq.b	#2,d2
00009894 6500                       		bcs.s	Obj17_Delete
00009896                            
00009896                            Obj17_DelLoop:
00009896 7000                       		moveq	#0,d0
00009898 101A                       		move.b	(a2)+,d0
0000989A ED48                       		lsl.w	#6,d0
0000989C 0680 00FF D000             		addi.l	#$FFD000,d0
000098A2 2240                       		movea.l	d0,a1
000098A4 6100 0000                  		bsr.w	DeleteObject2	; delete object
000098A8 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000098AC                            
000098AC                            Obj17_Delete:				; XREF: Obj17_Index
000098AC 6100 0000                  		bsr.w	DeleteObject
000098B0 4E75                       		rts	
000098B2                            ; ===========================================================================
000098B2                            
000098B2                            Obj17_Display:				; XREF: Obj17_Index
000098B2 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000098B6 6000 0000                  		bra.w	DisplaySprite
000098BA                            ; ===========================================================================
000098BA                            ; ---------------------------------------------------------------------------
000098BA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000098BA                            ; ---------------------------------------------------------------------------
000098BA                            Map_obj17:
000098BA                            	include "_maps\obj17.asm"
000098BA                            ; ---------------------------------------------------------------------------
000098BA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000098BA                            ; ---------------------------------------------------------------------------
000098BA 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000098BE 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000098C2 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000098C6 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000098CA 01                         byte_7E08:	dc.b 1
000098CB F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000098D0 01                         byte_7E0E:	dc.b 1
000098D1 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000098D6 01                         byte_7E14:	dc.b 1
000098D7 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000098DC 01                         byte_7E1A:	dc.b 1
000098DD FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000098E2 01                         byte_7E20:	dc.b 1
000098E3 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000098E8 01                         byte_7E26:	dc.b 1
000098E9 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000098EE 01                         byte_7E2C:	dc.b 1
000098EF F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000098F4                            		even
000098F4                            		even
000098F4                            
000098F4                            ; ===========================================================================
000098F4                            ; ---------------------------------------------------------------------------
000098F4                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000098F4                            ; ---------------------------------------------------------------------------
000098F4                            
000098F4                            Obj18:					; XREF: Obj_Index
000098F4 7000                       		moveq	#0,d0
000098F6 1028 0024                  		move.b	$24(a0),d0
000098FA 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000098FE 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00009902                            ; ===========================================================================
00009902 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00009904 0000                       		dc.w Obj18_Solid-Obj18_Index
00009906 0000                       		dc.w Obj18_Action2-Obj18_Index
00009908 0000                       		dc.w Obj18_Delete-Obj18_Index
0000990A 0000                       		dc.w Obj18_Action-Obj18_Index
0000990C                            ; ===========================================================================
0000990C                            
0000990C                            Obj18_Main:				; XREF: Obj18_Index
0000990C 5428 0024                  		addq.b	#2,$24(a0)
00009910 317C 4000 0002             		move.w	#$4000,2(a0)
00009916 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000991E 117C 0020 0019             		move.b	#$20,$19(a0)
00009924 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000992A 6600                       		bne.s	Obj18_NotSYZ
0000992C 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00009934 117C 0020 0019             		move.b	#$20,$19(a0)
0000993A                            
0000993A                            Obj18_NotSYZ:
0000993A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009940 6600                       		bne.s	Obj18_NotSLZ
00009942 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000994A 117C 0020 0019             		move.b	#$20,$19(a0)
00009950 317C 4000 0002             		move.w	#$4000,2(a0)
00009956 117C 0003 0028             		move.b	#3,$28(a0)
0000995C                            
0000995C                            Obj18_NotSLZ:
0000995C 117C 0004 0001             		move.b	#4,1(a0)
00009962 117C 0004 0018             		move.b	#4,$18(a0)
00009968 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000996E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00009974 3168 0008 0032             		move.w	8(a0),$32(a0)
0000997A 317C 0080 0026             		move.w	#$80,$26(a0)
00009980 7200                       		moveq	#0,d1
00009982 1028 0028                  		move.b	$28(a0),d0
00009986 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000998A 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000998C 5201                       		addq.b	#1,d1		; use frame #1
0000998E 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00009994                            
00009994                            Obj18_SetFrame:
00009994 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00009998                            
00009998                            Obj18_Solid:				; XREF: Obj18_Index
00009998 4A28 0038                  		tst.b	$38(a0)
0000999C 6700                       		beq.s	loc_7EE0
0000999E 5928 0038                  		subq.b	#4,$38(a0)
000099A2                            
000099A2                            loc_7EE0:
000099A2 7200                       		moveq	#0,d1
000099A4 1228 0019                  		move.b	$19(a0),d1
000099A8 6100 F56C                  		bsr.w	PlatformObject
000099AC                            
000099AC                            Obj18_Action:				; XREF: Obj18_Index
000099AC 6100 0000                  		bsr.w	Obj18_Move
000099B0 6100 0000                  		bsr.w	Obj18_Nudge
000099B4 6100 0000                  		bsr.w	DisplaySprite
000099B8 6000 0000                  		bra.w	Obj18_ChkDel
000099BC                            ; ===========================================================================
000099BC                            
000099BC                            Obj18_Action2:				; XREF: Obj18_Index
000099BC 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000099C2 6700                       		beq.s	loc_7F06
000099C4 5828 0038                  		addq.b	#4,$38(a0)
000099C8                            
000099C8                            loc_7F06:
000099C8 7200                       		moveq	#0,d1
000099CA 1228 0019                  		move.b	$19(a0),d1
000099CE 6100 F6BA                  		bsr.w	ExitPlatform
000099D2 3F28 0008                  		move.w	8(a0),-(sp)
000099D6 6100 0000                  		bsr.w	Obj18_Move
000099DA 6100 0000                  		bsr.w	Obj18_Nudge
000099DE 341F                       		move.w	(sp)+,d2
000099E0 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000099E4 6100 0000                  		bsr.w	DisplaySprite
000099E8 6000 0000                  		bra.w	Obj18_ChkDel
000099EC                            
000099EC 4E75                       		rts
000099EE                            
000099EE                            ; ---------------------------------------------------------------------------
000099EE                            ; Subroutine to	move platform slightly when you	stand on it
000099EE                            ; ---------------------------------------------------------------------------
000099EE                            
000099EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099EE                            
000099EE                            
000099EE                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000099EE 1028 0038                  		move.b	$38(a0),d0
000099F2 6100 9188                  		bsr.w	CalcSine
000099F6 323C 0400                  		move.w	#$400,d1
000099FA C1C1                       		muls.w	d1,d0
000099FC 4840                       		swap	d0
000099FE D068 002C                  		add.w	$2C(a0),d0
00009A02 3140 000C                  		move.w	d0,$C(a0)
00009A06 4E75                       		rts	
00009A08                            ; End of function Obj18_Nudge
00009A08                            
00009A08                            ; ---------------------------------------------------------------------------
00009A08                            ; Subroutine to	move platforms
00009A08                            ; ---------------------------------------------------------------------------
00009A08                            
00009A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A08                            
00009A08                            
00009A08                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00009A08 7000                       		moveq	#0,d0
00009A0A 1028 0028                  		move.b	$28(a0),d0
00009A0E 0240 000F                  		andi.w	#$F,d0
00009A12 D040                       		add.w	d0,d0
00009A14 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00009A18 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009A1C                            ; End of function Obj18_Move
00009A1C                            
00009A1C                            ; ===========================================================================
00009A1C 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00009A20 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009A24 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00009A28 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009A2C 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00009A30 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009A34 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00009A36                            ; ===========================================================================
00009A36                            
00009A36                            Obj18_Type00:
00009A36 4E75                       		rts			; platform 00 doesn't move
00009A38                            ; ===========================================================================
00009A38                            
00009A38                            Obj18_Type05:
00009A38 3028 0032                  		move.w	$32(a0),d0
00009A3C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009A40 4401                       		neg.b	d1		; reverse platform-motion
00009A42 0601 0040                  		addi.b	#$40,d1
00009A46 6000                       		bra.s	Obj18_01_Move
00009A48                            ; ===========================================================================
00009A48                            
00009A48                            Obj18_Type01:
00009A48 3028 0032                  		move.w	$32(a0),d0
00009A4C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009A50 0401 0040                  		subi.b	#$40,d1
00009A54                            
00009A54                            Obj18_01_Move:
00009A54 4881                       		ext.w	d1
00009A56 D041                       		add.w	d1,d0
00009A58 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00009A5C 6000 0000                  		bra.w	Obj18_ChgMotion
00009A60                            ; ===========================================================================
00009A60                            
00009A60                            Obj18_Type0C:
00009A60 3028 0034                  		move.w	$34(a0),d0
00009A64 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009A68 4401                       		neg.b	d1		; reverse platform-motion
00009A6A 0601 0030                  		addi.b	#$30,d1
00009A6E 6000                       		bra.s	Obj18_02_Move
00009A70                            ; ===========================================================================
00009A70                            
00009A70                            Obj18_Type0B:
00009A70 3028 0034                  		move.w	$34(a0),d0
00009A74 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009A78 0401 0030                  		subi.b	#$30,d1
00009A7C 6000                       		bra.s	Obj18_02_Move
00009A7E                            ; ===========================================================================
00009A7E                            
00009A7E                            Obj18_Type06:
00009A7E 3028 0034                  		move.w	$34(a0),d0
00009A82 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009A86 4401                       		neg.b	d1		; reverse platform-motion
00009A88 0601 0040                  		addi.b	#$40,d1
00009A8C 6000                       		bra.s	Obj18_02_Move
00009A8E                            ; ===========================================================================
00009A8E                            
00009A8E                            Obj18_Type02:
00009A8E 3028 0034                  		move.w	$34(a0),d0
00009A92 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009A96 0401 0040                  		subi.b	#$40,d1
00009A9A                            
00009A9A                            Obj18_02_Move:
00009A9A 4881                       		ext.w	d1
00009A9C D041                       		add.w	d1,d0
00009A9E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009AA2 6000 0000                  		bra.w	Obj18_ChgMotion
00009AA6                            ; ===========================================================================
00009AA6                            
00009AA6                            Obj18_Type03:
00009AA6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009AAA 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00009AAC 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009AB2 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009AB4 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009ABA                            
00009ABA                            Obj18_03_NoMove:
00009ABA 4E75                       		rts	
00009ABC                            ; ===========================================================================
00009ABC                            
00009ABC                            Obj18_03_Wait:
00009ABC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009AC0 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009AC2 317C 0020 003A             		move.w	#32,$3A(a0)
00009AC8 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009ACC 4E75                       		rts	
00009ACE                            ; ===========================================================================
00009ACE                            
00009ACE                            Obj18_Type04:
00009ACE 4A68 003A                  		tst.w	$3A(a0)
00009AD2 6700                       		beq.s	loc_8048
00009AD4 5368 003A                  		subq.w	#1,$3A(a0)
00009AD8 6600                       		bne.s	loc_8048
00009ADA 0828 0003 0022             		btst	#3,$22(a0)
00009AE0 6700                       		beq.s	loc_8042
00009AE2 08E9 0001 0022             		bset	#1,$22(a1)
00009AE8 08A9 0003 0022             		bclr	#3,$22(a1)
00009AEE 137C 0002 0024             		move.b	#2,$24(a1)
00009AF4 08A8 0003 0022             		bclr	#3,$22(a0)
00009AFA 4228 0025                  		clr.b	$25(a0)
00009AFE 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009B04                            
00009B04                            loc_8042:
00009B04 117C 0008 0024             		move.b	#8,$24(a0)
00009B0A                            
00009B0A                            loc_8048:
00009B0A 2628 002C                  		move.l	$2C(a0),d3
00009B0E 3028 0012                  		move.w	$12(a0),d0
00009B12 48C0                       		ext.l	d0
00009B14 E180                       		asl.l	#8,d0
00009B16 D680                       		add.l	d0,d3
00009B18 2143 002C                  		move.l	d3,$2C(a0)
00009B1C 0668 0038 0012             		addi.w	#$38,$12(a0)
00009B22 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B26 0640 00E0                  		addi.w	#$E0,d0
00009B2A B068 002C                  		cmp.w	$2C(a0),d0
00009B2E 6400                       		bcc.s	locret_8074
00009B30 117C 0006 0024             		move.b	#6,$24(a0)
00009B36                            
00009B36                            locret_8074:
00009B36 4E75                       		rts	
00009B38                            ; ===========================================================================
00009B38                            
00009B38                            Obj18_Type07:
00009B38 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009B3C 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009B3E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009B42 7000                       		moveq	#0,d0
00009B44 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009B48 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009B4A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009B4E 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00009B50 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009B56                            
00009B56                            Obj18_07_NoMove:
00009B56 4E75                       		rts	
00009B58                            ; ===========================================================================
00009B58                            
00009B58                            Obj18_07_Wait:
00009B58 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009B5C 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009B5E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009B62 4E75                       		rts	
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            Obj18_Type08:
00009B64 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009B68 3028 0034                  		move.w	$34(a0),d0
00009B6C 0440 0200                  		subi.w	#$200,d0
00009B70 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009B74 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009B76 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009B7A                            
00009B7A                            Obj18_08_NoStop:
00009B7A 4E75                       		rts	
00009B7C                            ; ===========================================================================
00009B7C                            
00009B7C                            Obj18_Type0A:
00009B7C 3028 0034                  		move.w	$34(a0),d0
00009B80 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009B84 0401 0040                  		subi.b	#$40,d1
00009B88 4881                       		ext.w	d1
00009B8A E241                       		asr.w	#1,d1
00009B8C D041                       		add.w	d1,d0
00009B8E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009B92                            
00009B92                            Obj18_ChgMotion:
00009B92 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009B98 4E75                       		rts	
00009B9A                            ; ===========================================================================
00009B9A                            
00009B9A                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009B9A 3028 0032                  		move.w	$32(a0),d0
00009B9E 0240 FF80                  		andi.w	#$FF80,d0
00009BA2 3238 F700                  		move.w	($FFFFF700).w,d1
00009BA6 0441 0080                  		subi.w	#$80,d1
00009BAA 0241 FF80                  		andi.w	#$FF80,d1
00009BAE 9041                       		sub.w	d1,d0
00009BB0 0C40 0280                  		cmpi.w	#$280,d0
00009BB4 6200                       		bhi.s	Obj18_Delete
00009BB6 4E75                       		rts	
00009BB8                            ; ===========================================================================
00009BB8                            
00009BB8                            Obj18_Delete:				; XREF: Obj18_Index
00009BB8 6000 0000                  		bra.w	DeleteObject
00009BBC                            ; ===========================================================================
00009BBC                            ; ---------------------------------------------------------------------------
00009BBC                            ; Sprite mappings - unused
00009BBC                            ; ---------------------------------------------------------------------------
00009BBC                            Map_obj18x:
00009BBC                            	include "_maps\obj18x.asm"
00009BBC                            ; ---------------------------------------------------------------------------
00009BBC                            ; Sprite mappings - unused
00009BBC                            ; ---------------------------------------------------------------------------
00009BBC 0000                       		dc.w byte_80FE-Map_obj18x
00009BBE 0000                       		dc.w byte_8109-Map_obj18x
00009BC0 02                         byte_80FE:	dc.b 2
00009BC1 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009BC6 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009BCB 0A                         byte_8109:	dc.b $A
00009BCC F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009BD1 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009BD6 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009BDB 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009BE0 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009BE5 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009BEA 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009BEF 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009BF4 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009BF9 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009BFE                            		even
00009BFE                            		even
00009BFE                            
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            ; Sprite mappings - GHZ	platforms
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            Map_obj18:
00009BFE                            	include "_maps\obj18ghz.asm"
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            ; Sprite mappings - GHZ	platforms
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE 0000                       		dc.w byte_8140-Map_obj18
00009C00 0000                       		dc.w byte_8155-Map_obj18
00009C02 04                         byte_8140:	dc.b 4
00009C03 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009C08 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009C0D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009C12 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009C17 0A                         byte_8155:	dc.b $A
00009C18 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009C1D 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009C22 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009C27 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009C2C 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009C31 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009C36 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009C3B 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009C40 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009C45 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009C4A                            		even
00009C4A                            		even
00009C4A                            
00009C4A                            ; ---------------------------------------------------------------------------
00009C4A                            ; Sprite mappings - SYZ	platforms
00009C4A                            ; ---------------------------------------------------------------------------
00009C4A                            Map_obj18a:
00009C4A                            	include "_maps\obj18syz.asm"
00009C4A                            ; ---------------------------------------------------------------------------
00009C4A                            ; Sprite mappings - SYZ	platforms
00009C4A                            ; ---------------------------------------------------------------------------
00009C4A 0000                       		dc.w byte_818A-Map_obj18a
00009C4C 03                         byte_818A:	dc.b 3
00009C4D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009C52 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009C57 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009C5C                            		even
00009C5C                            		even
00009C5C                            
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            ; Sprite mappings - SLZ	platforms
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            Map_obj18b:
00009C5C                            	include "_maps\obj18slz.asm"
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            ; Sprite mappings - SLZ	platforms
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C 0000                       		dc.w byte_819C-Map_obj18b
00009C5E 02                         byte_819C:	dc.b 2
00009C5F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009C64 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009C6A 00                         		even
00009C6A 00                         		even
00009C6A                            
00009C6A                            ; ===========================================================================
00009C6A                            ; ---------------------------------------------------------------------------
00009C6A                            ; Object 19 - blank
00009C6A                            ; ---------------------------------------------------------------------------
00009C6A                            
00009C6A                            Obj19:					; XREF: Obj_Index
00009C6A 4E75                       		rts	
00009C6C                            ; ===========================================================================
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            Map_obj48:
00009C6C                            	include "_maps\obj48.asm"
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009C70 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009C74 06                         byte_81B2:	dc.b 6
00009C75 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009C7A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009C7F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009C84 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009C89 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009C8E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009C93 04                         byte_81D1:	dc.b 4
00009C94 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009C99 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009C9E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009CA3 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009CA8 04                         byte_81E6:	dc.b 4
00009CA9 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009CAE E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009CB3 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009CB8 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009CBD 04                         byte_81FB:	dc.b 4
00009CBE E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009CC3 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009CC8 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009CCD 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009CD2                            		even
00009CD2                            		even
00009CD2                            
00009CD2                            ; ===========================================================================
00009CD2                            ; ---------------------------------------------------------------------------
00009CD2                            ; Object 1A - GHZ collapsing ledge
00009CD2                            ; ---------------------------------------------------------------------------
00009CD2                            
00009CD2                            Obj1A:					; XREF: Obj_Index
00009CD2 7000                       		moveq	#0,d0
00009CD4 1028 0024                  		move.b	$24(a0),d0
00009CD8 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009CDC 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009CE0                            ; ===========================================================================
00009CE0 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009CE4 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009CE8 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009CEC                            ; ===========================================================================
00009CEC                            
00009CEC                            Obj1A_Main:				; XREF: Obj1A_Index
00009CEC 5428 0024                  		addq.b	#2,$24(a0)
00009CF0 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00009CF8 317C 4000 0002             		move.w	#$4000,2(a0)
00009CFE 0028 0004 0001             		ori.b	#4,1(a0)
00009D04 117C 0004 0018             		move.b	#4,$18(a0)
00009D0A 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009D10 117C 0064 0019             		move.b	#$64,$19(a0)
00009D16 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009D1C 117C 0038 0016             		move.b	#$38,$16(a0)
00009D22 08E8 0004 0001             		bset	#4,1(a0)
00009D28                            
00009D28                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009D28 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009D2C 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009D2E 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009D32 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009D36 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009D3A                            
00009D3A                            Obj1A_Slope:
00009D3A 323C 0030                  		move.w	#$30,d1
00009D3E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009D44 6100 F2A4                  		bsr.w	SlopeObject
00009D48 6000 0000                  		bra.w	MarkObjGone
00009D4C                            ; ===========================================================================
00009D4C                            
00009D4C                            Obj1A_Touch:				; XREF: Obj1A_Index
00009D4C 4A28 0038                  		tst.b	$38(a0)
00009D50 6700 0000                  		beq.w	loc_847A
00009D54 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009D5A 5328 0038                  		subq.b	#1,$38(a0)
00009D5E                            
00009D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D5E                            
00009D5E                            
00009D5E                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009D5E 323C 0030                  		move.w	#$30,d1
00009D62 6100 F326                  		bsr.w	ExitPlatform
00009D66 323C 0030                  		move.w	#$30,d1
00009D6A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009D70 3428 0008                  		move.w	8(a0),d2
00009D74 6100 0000                  		bsr.w	SlopeObject2
00009D78 6000 0000                  		bra.w	MarkObjGone
00009D7C                            ; End of function Obj1A_WalkOff
00009D7C                            
00009D7C                            ; ===========================================================================
00009D7C                            
00009D7C                            Obj1A_Display:				; XREF: Obj1A_Index
00009D7C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009D80 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009D82 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009D86 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009D8A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009D8E 6000 0000                  		bra.w	DisplaySprite
00009D92                            ; ===========================================================================
00009D92                            
00009D92                            loc_82D0:				; XREF: Obj1A_Display
00009D92 5328 0038                  		subq.b	#1,$38(a0)
00009D96 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009D9A 43F8 D000                  		lea	($FFFFD000).w,a1
00009D9E 0829 0003 0022             		btst	#3,$22(a1)
00009DA4 6700                       		beq.s	loc_82FC
00009DA6 4A28 0038                  		tst.b	$38(a0)
00009DAA 6600                       		bne.s	locret_8308
00009DAC 08A9 0003 0022             		bclr	#3,$22(a1)
00009DB2 08A9 0005 0022             		bclr	#5,$22(a1)
00009DB8 137C 0001 001D             		move.b	#1,$1D(a1)
00009DBE                            
00009DBE                            loc_82FC:
00009DBE 117C 0000 003A             		move.b	#0,$3A(a0)
00009DC4 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009DCA                            
00009DCA                            locret_8308:
00009DCA 4E75                       		rts	
00009DCC                            ; ===========================================================================
00009DCC                            
00009DCC                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009DCC 6100 0000                  		bsr.w	ObjectFall
00009DD0 6100 0000                  		bsr.w	DisplaySprite
00009DD4 4A28 0001                  		tst.b	1(a0)
00009DD8 6A00                       		bpl.s	Obj1A_Delete
00009DDA 4E75                       		rts	
00009DDC                            ; ===========================================================================
00009DDC                            
00009DDC                            Obj1A_Delete:				; XREF: Obj1A_Index
00009DDC 6100 0000                  		bsr.w	DeleteObject
00009DE0 4E75                       		rts	
00009DE2                            ; ===========================================================================
00009DE2                            ; ---------------------------------------------------------------------------
00009DE2                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009DE2                            ; ---------------------------------------------------------------------------
00009DE2                            
00009DE2                            Obj53:					; XREF: Obj_Index
00009DE2 7000                       		moveq	#0,d0
00009DE4 1028 0024                  		move.b	$24(a0),d0
00009DE8 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009DEC 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009DF0                            ; ===========================================================================
00009DF0 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009DF4 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009DF8 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009DFC                            ; ===========================================================================
00009DFC                            
00009DFC                            Obj53_Main:				; XREF: Obj53_Index
00009DFC 5428 0024                  		addq.b	#2,$24(a0)
00009E00 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009E08 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009E0E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009E14 6600                       		bne.s	Obj53_NotSLZ
00009E16 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009E1C 5428 001A                  		addq.b	#2,$1A(a0)
00009E20                            
00009E20                            Obj53_NotSLZ:
00009E20 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009E26 6600                       		bne.s	Obj53_NotSBZ
00009E28 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009E2E                            
00009E2E                            Obj53_NotSBZ:
00009E2E 0028 0004 0001             		ori.b	#4,1(a0)
00009E34 117C 0004 0018             		move.b	#4,$18(a0)
00009E3A 117C 0007 0038             		move.b	#7,$38(a0)
00009E40 117C 0044 0019             		move.b	#$44,$19(a0)
00009E46                            
00009E46                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009E46 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009E4A 6700                       		beq.s	Obj53_Solid	; if not, branch
00009E4C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009E50 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009E54 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009E58                            
00009E58                            Obj53_Solid:
00009E58 323C 0020                  		move.w	#$20,d1
00009E5C 6100 F0B8                  		bsr.w	PlatformObject
00009E60 4A28 0028                  		tst.b	$28(a0)
00009E64 6A00                       		bpl.s	Obj53_MarkAsGone
00009E66 0829 0003 0022             		btst	#3,$22(a1)
00009E6C 6700                       		beq.s	Obj53_MarkAsGone
00009E6E 08A8 0000 0001             		bclr	#0,1(a0)
00009E74 3029 0008                  		move.w	8(a1),d0
00009E78 9068 0008                  		sub.w	8(a0),d0
00009E7C 6400                       		bcc.s	Obj53_MarkAsGone
00009E7E 08E8 0000 0001             		bset	#0,1(a0)
00009E84                            
00009E84                            Obj53_MarkAsGone:
00009E84 6000 0000                  		bra.w	MarkObjGone
00009E88                            ; ===========================================================================
00009E88                            
00009E88                            Obj53_Touch:				; XREF: Obj53_Index
00009E88 4A28 0038                  		tst.b	$38(a0)
00009E8C 6700 0000                  		beq.w	loc_8458
00009E90 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009E96 5328 0038                  		subq.b	#1,$38(a0)
00009E9A                            
00009E9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E9A                            
00009E9A                            
00009E9A                            Obj53_WalkOff:				; XREF: Obj53_Index
00009E9A 323C 0020                  		move.w	#$20,d1
00009E9E 6100 F1EA                  		bsr.w	ExitPlatform
00009EA2 3428 0008                  		move.w	8(a0),d2
00009EA6 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00009EAA 6000 0000                  		bra.w	MarkObjGone
00009EAE                            ; End of function Obj53_WalkOff
00009EAE                            
00009EAE                            ; ===========================================================================
00009EAE                            
00009EAE                            Obj53_Display:				; XREF: Obj53_Index
00009EAE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009EB2 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009EB4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009EB8 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009EBC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009EC0 6000 0000                  		bra.w	DisplaySprite
00009EC4                            ; ===========================================================================
00009EC4                            
00009EC4                            loc_8402:
00009EC4 5328 0038                  		subq.b	#1,$38(a0)
00009EC8 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009ECC 43F8 D000                  		lea	($FFFFD000).w,a1
00009ED0 0829 0003 0022             		btst	#3,$22(a1)
00009ED6 6700                       		beq.s	loc_842E
00009ED8 4A28 0038                  		tst.b	$38(a0)
00009EDC 6600                       		bne.s	locret_843A
00009EDE 08A9 0003 0022             		bclr	#3,$22(a1)
00009EE4 08A9 0005 0022             		bclr	#5,$22(a1)
00009EEA 137C 0001 001D             		move.b	#1,$1D(a1)
00009EF0                            
00009EF0                            loc_842E:
00009EF0 117C 0000 003A             		move.b	#0,$3A(a0)
00009EF6 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009EFC                            
00009EFC                            locret_843A:
00009EFC 4E75                       		rts	
00009EFE                            ; ===========================================================================
00009EFE                            
00009EFE                            Obj53_TimeZero:				; XREF: Obj53_Display
00009EFE 6100 0000                  		bsr.w	ObjectFall
00009F02 6100 0000                  		bsr.w	DisplaySprite
00009F06 4A28 0001                  		tst.b	1(a0)
00009F0A 6A00                       		bpl.s	Obj53_Delete
00009F0C 4E75                       		rts	
00009F0E                            ; ===========================================================================
00009F0E                            
00009F0E                            Obj53_Delete:				; XREF: Obj53_Index
00009F0E 6100 0000                  		bsr.w	DeleteObject
00009F12 4E75                       		rts	
00009F14                            ; ===========================================================================
00009F14                            
00009F14                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009F14 117C 0000 003A             		move.b	#0,$3A(a0)
00009F1A                            
00009F1A                            loc_8458:				; XREF: Obj53_Touch
00009F1A 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009F20 0828 0000 0028             		btst	#0,$28(a0)
00009F26 6700                       		beq.s	loc_846C
00009F28 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009F2E                            
00009F2E                            loc_846C:
00009F2E 7207                       		moveq	#7,d1
00009F30 5228 001A                  		addq.b	#1,$1A(a0)
00009F34 6000                       		bra.s	loc_8486
00009F36                            ; ===========================================================================
00009F36                            
00009F36                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009F36 117C 0000 003A             		move.b	#0,$3A(a0)
00009F3C                            
00009F3C                            loc_847A:				; XREF: Obj1A_Touch
00009F3C 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009F42 7218                       		moveq	#$18,d1
00009F44 5428 001A                  		addq.b	#2,$1A(a0)
00009F48                            
00009F48                            loc_8486:				; XREF: Obj53_Collapse
00009F48 7000                       		moveq	#0,d0
00009F4A 1028 001A                  		move.b	$1A(a0),d0
00009F4E D040                       		add.w	d0,d0
00009F50 2668 0004                  		movea.l	4(a0),a3
00009F54 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009F58 524B                       		addq.w	#1,a3
00009F5A 08E8 0005 0001             		bset	#5,1(a0)
00009F60 1810                       		move.b	0(a0),d4
00009F62 1A28 0001                  		move.b	1(a0),d5
00009F66 2248                       		movea.l	a0,a1
00009F68 6000                       		bra.s	loc_84B2
00009F6A                            ; ===========================================================================
00009F6A                            
00009F6A                            loc_84AA:
00009F6A 6100 0000                  		bsr.w	SingleObjLoad
00009F6E 6600                       		bne.s	loc_84F2
00009F70 5A4B                       		addq.w	#5,a3
00009F72                            
00009F72                            loc_84B2:
00009F72 137C 0006 0024             		move.b	#6,$24(a1)
00009F78 1284                       		move.b	d4,0(a1)
00009F7A 234B 0004                  		move.l	a3,4(a1)
00009F7E 1345 0001                  		move.b	d5,1(a1)
00009F82 3368 0008 0008             		move.w	8(a0),8(a1)
00009F88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F8E 3368 0002 0002             		move.w	2(a0),2(a1)
00009F94 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009F9A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009FA0 135C 0038                  		move.b	(a4)+,$38(a1)
00009FA4 B3C8                       		cmpa.l	a0,a1
00009FA6 6400                       		bcc.s	loc_84EE
00009FA8 6100 0000                  		bsr.w	DisplaySprite2
00009FAC                            
00009FAC                            loc_84EE:
00009FAC 51C9 FFBC                  		dbf	d1,loc_84AA
00009FB0                            
00009FB0                            loc_84F2:
00009FB0 6100 0000                  		bsr.w	DisplaySprite
00009FB4 303C 00B9                  		move.w	#$B9,d0
00009FB8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009FBE                            ; ===========================================================================
00009FBE                            ; ---------------------------------------------------------------------------
00009FBE                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009FBE                            ; ---------------------------------------------------------------------------
00009FBE 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009FCE 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009FD8 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009FE0 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009FE8                            
00009FE8                            ; ---------------------------------------------------------------------------
00009FE8                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009FE8                            ; ---------------------------------------------------------------------------
00009FE8                            
00009FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FE8                            
00009FE8                            
00009FE8                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009FE8 43F8 D000                  		lea	($FFFFD000).w,a1
00009FEC 0829 0003 0022             		btst	#3,$22(a1)
00009FF2 6700                       		beq.s	locret_856E
00009FF4 3029 0008                  		move.w	8(a1),d0
00009FF8 9068 0008                  		sub.w	8(a0),d0
00009FFC D041                       		add.w	d1,d0
00009FFE E248                       		lsr.w	#1,d0
0000A000 0828 0000 0001             		btst	#0,1(a0)
0000A006 6700                       		beq.s	loc_854E
0000A008 4640                       		not.w	d0
0000A00A D041                       		add.w	d1,d0
0000A00C                            
0000A00C                            loc_854E:
0000A00C 7200                       		moveq	#0,d1
0000A00E 1232 0000                  		move.b	(a2,d0.w),d1
0000A012 3028 000C                  		move.w	$C(a0),d0
0000A016 9041                       		sub.w	d1,d0
0000A018 7200                       		moveq	#0,d1
0000A01A 1229 0016                  		move.b	$16(a1),d1
0000A01E 9041                       		sub.w	d1,d0
0000A020 3340 000C                  		move.w	d0,$C(a1)
0000A024 9468 0008                  		sub.w	8(a0),d2
0000A028 9569 0008                  		sub.w	d2,8(a1)
0000A02C                            
0000A02C                            locret_856E:
0000A02C 4E75                       		rts	
0000A02E                            ; End of function SlopeObject2
0000A02E                            
0000A02E                            ; ===========================================================================
0000A02E                            ; ---------------------------------------------------------------------------
0000A02E                            ; Collision data for GHZ collapsing ledge
0000A02E                            ; ---------------------------------------------------------------------------
0000A02E                            Obj1A_SlopeData:
0000A02E                            		incbin	misc\ghzledge.bin
0000A05E                            		even
0000A05E                            
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            ; Sprite mappings - GHZ	collapsing ledge
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            Map_obj1A:
0000A05E                            	include "_maps\obj1A.asm"
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            ; Sprite mappings - GHZ	collapsing ledge
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000A062 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000A066 10                         byte_85A8:	dc.b $10
0000A067 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A06C D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A071 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A076 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A07B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A080 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A085 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A08A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A08F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A094 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A099 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A09E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A0A3 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A0A8 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0AD 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A0B2 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0B7 10                         byte_85F9:	dc.b $10
0000A0B8 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A0BD D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A0C2 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A0C7 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A0CC D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0D1 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A0D6 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A0DB F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A0E0 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A0E5 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A0EA 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A0EF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A0F4 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A0F9 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A0FE 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A103 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A108 19                         byte_864A:	dc.b $19
0000A109 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A10E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A113 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A118 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A11D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A122 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A127 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A12C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A131 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A136 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A13B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A140 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A145 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A14A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A14F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A154 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A159 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A15E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A163 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A168 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A16D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A172 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A177 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A17C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A181 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A186 19                         byte_86C8:	dc.b $19
0000A187 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A18C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A191 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A196 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A19B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A1A0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A1A5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A1AA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A1AF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A1B4 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A1B9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A1BE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A1C3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A1C8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A1CD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A1D2 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A1D7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A1DC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A1E1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A1E6 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A1EB 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A1F0 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A1F5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A1FA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A1FF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A204                            		even
0000A204                            		even
0000A204                            
0000A204                            ; ---------------------------------------------------------------------------
0000A204                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A204                            ; ---------------------------------------------------------------------------
0000A204                            Map_obj53:
0000A204                            	include "_maps\obj53.asm"
0000A204                            ; ---------------------------------------------------------------------------
0000A204                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A204                            ; ---------------------------------------------------------------------------
0000A204 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000A208 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000A20C 04                         byte_874E:	dc.b 4
0000A20D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A212 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A217 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A21C 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A221 08                         byte_8763:	dc.b 8
0000A222 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A227 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A22C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A231 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A236 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A23B 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A240 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A245 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A24A 04                         byte_878C:	dc.b 4
0000A24B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A250 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A255 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A25A 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A25F 08                         byte_87A1:	dc.b 8
0000A260 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A265 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A26A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A26F F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A274 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A279 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A27E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A283 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A288                            		even
0000A288                            		even
0000A288                            
0000A288                            ; ===========================================================================
0000A288                            ; ---------------------------------------------------------------------------
0000A288                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A288                            ; ---------------------------------------------------------------------------
0000A288                            
0000A288                            Obj1C:					; XREF: Obj_Index
0000A288 7000                       		moveq	#0,d0
0000A28A 1028 0024                  		move.b	$24(a0),d0
0000A28E 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000A292 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000A296                            ; ===========================================================================
0000A296 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000A298 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000A29A                            ; ===========================================================================
0000A29A                            
0000A29A                            Obj1C_Main:				; XREF: Obj1C_Index
0000A29A 5428 0024                  		addq.b	#2,$24(a0)
0000A29E 7000                       		moveq	#0,d0
0000A2A0 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000A2A4 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A2A8 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000A2AC 2159 0004                  		move.l	(a1)+,4(a0)
0000A2B0 3159 0002                  		move.w	(a1)+,2(a0)
0000A2B4 0028 0004 0001             		ori.b	#4,1(a0)
0000A2BA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000A2BE 1159 0019                  		move.b	(a1)+,$19(a0)
0000A2C2 1159 0018                  		move.b	(a1)+,$18(a0)
0000A2C6 1159 0020                  		move.b	(a1)+,$20(a0)
0000A2CA                            
0000A2CA                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000A2CA 3028 0008                  		move.w	8(a0),d0
0000A2CE 0240 FF80                  		andi.w	#$FF80,d0
0000A2D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2D6 0441 0080                  		subi.w	#$80,d1
0000A2DA 0241 FF80                  		andi.w	#$FF80,d1
0000A2DE 9041                       		sub.w	d1,d0
0000A2E0 0C40 0280                  		cmpi.w	#$280,d0
0000A2E4 6200 0000                  		bhi.w	DeleteObject
0000A2E8 6000 0000                  		bra.w	DisplaySprite
0000A2EC                            ; ===========================================================================
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            ; Variables for	object $1C are stored in an array
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000A2F0 44D8                       		dc.w $44D8		; VRAM setting
0000A2F2 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A2F6 0000 0000                  		dc.l Map_obj1C
0000A2FA 44D8                       		dc.w $44D8
0000A2FC 0008 0200                  		dc.b 0,	8, 2, 0
0000A300 0000 0000                  		dc.l Map_obj1C
0000A304 44D8                       		dc.w $44D8
0000A306 0008 0200                  		dc.b 0,	8, 2, 0
0000A30A 0000 93FE                  		dc.l Map_obj11
0000A30E 438E                       		dc.w $438E
0000A310 0110 0100                  		dc.b 1,	$10, 1,	0
0000A314                            ; ---------------------------------------------------------------------------
0000A314                            ; Sprite mappings - SLZ	lava thrower
0000A314                            ; ---------------------------------------------------------------------------
0000A314                            Map_obj1C:
0000A314                            	include "_maps\obj1C.asm"
0000A314                            ; ---------------------------------------------------------------------------
0000A314                            ; Sprite mappings - SLZ	lava thrower
0000A314                            ; ---------------------------------------------------------------------------
0000A314 0000                       		dc.w byte_8858-Map_obj1C
0000A316 01                         byte_8858:	dc.b 1
0000A317 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A31C                            		even
0000A31C                            		even
0000A31C                            
0000A31C                            ; ===========================================================================
0000A31C                            ; ---------------------------------------------------------------------------
0000A31C                            ; Object 1D - switch that activates when Sonic touches it
0000A31C                            ; (this	is not used anywhere in	the game)
0000A31C                            ; ---------------------------------------------------------------------------
0000A31C                            
0000A31C                            Obj1D:					; XREF: Obj_Index
0000A31C 7000                       		moveq	#0,d0
0000A31E 1028 0024                  		move.b	$24(a0),d0
0000A322 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000A326 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000A32A                            ; ===========================================================================
0000A32A 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000A32C 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000A32E 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000A330                            ; ===========================================================================
0000A330                            
0000A330                            Obj1D_Main:				; XREF: Obj1D_Index
0000A330 5428 0024                  		addq.b	#2,$24(a0)
0000A334 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000A33C 317C 4000 0002             		move.w	#$4000,2(a0)
0000A342 117C 0004 0001             		move.b	#4,1(a0)
0000A348 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000A34E 117C 0010 0019             		move.b	#$10,$19(a0)
0000A354 117C 0005 0018             		move.b	#5,$18(a0)
0000A35A                            
0000A35A                            Obj1D_Action:				; XREF: Obj1D_Index
0000A35A 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000A360 323C 0010                  		move.w	#$10,d1
0000A364 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000A368 6700                       		beq.s	Obj1D_ChkDel
0000A36A 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000A36E 7001                       		moveq	#1,d0
0000A370 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000A374                            
0000A374                            Obj1D_ChkDel:
0000A374 6100 0000                  		bsr.w	DisplaySprite
0000A378 3028 0008                  		move.w	8(a0),d0
0000A37C 0240 FF80                  		andi.w	#$FF80,d0
0000A380 3238 F700                  		move.w	($FFFFF700).w,d1
0000A384 0441 0080                  		subi.w	#$80,d1
0000A388 0241 FF80                  		andi.w	#$FF80,d1
0000A38C 9041                       		sub.w	d1,d0
0000A38E 0C40 0280                  		cmpi.w	#$280,d0
0000A392 6200 0000                  		bhi.w	Obj1D_Delete
0000A396 4E75                       		rts	
0000A398                            ; ===========================================================================
0000A398                            
0000A398                            Obj1D_Delete:				; XREF: Obj1D_Index
0000A398 6100 0000                  		bsr.w	DeleteObject
0000A39C 4E75                       		rts	
0000A39E                            ; ---------------------------------------------------------------------------
0000A39E                            ; Subroutine to	check if Sonic touches the object
0000A39E                            ; ---------------------------------------------------------------------------
0000A39E                            
0000A39E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A39E                            
0000A39E                            
0000A39E                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000A39E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A3A2 3029 0008                  		move.w	8(a1),d0
0000A3A6 9068 0008                  		sub.w	8(a0),d0
0000A3AA D041                       		add.w	d1,d0
0000A3AC 6B00                       		bmi.s	loc_8918
0000A3AE D241                       		add.w	d1,d1
0000A3B0 B041                       		cmp.w	d1,d0
0000A3B2 6400                       		bcc.s	loc_8918
0000A3B4 3429 000C                  		move.w	$C(a1),d2
0000A3B8 1229 0016                  		move.b	$16(a1),d1
0000A3BC 4881                       		ext.w	d1
0000A3BE D242                       		add.w	d2,d1
0000A3C0 3028 000C                  		move.w	$C(a0),d0
0000A3C4 0440 0010                  		subi.w	#$10,d0
0000A3C8 9041                       		sub.w	d1,d0
0000A3CA 6200                       		bhi.s	loc_8918
0000A3CC 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A3D0 6500                       		bcs.s	loc_8918
0000A3D2 70FF                       		moveq	#-1,d0
0000A3D4 4E75                       		rts	
0000A3D6                            ; ===========================================================================
0000A3D6                            
0000A3D6                            loc_8918:
0000A3D6 7000                       		moveq	#0,d0
0000A3D8 4E75                       		rts	
0000A3DA                            ; End of function Obj1D_ChkTouch
0000A3DA                            
0000A3DA                            ; ===========================================================================
0000A3DA                            ; ---------------------------------------------------------------------------
0000A3DA                            ; Sprite mappings - object 1D
0000A3DA                            ; ---------------------------------------------------------------------------
0000A3DA                            Map_obj1D:
0000A3DA                            	include "_maps\obj1D.asm"
0000A3DA                            ; ---------------------------------------------------------------------------
0000A3DA                            ; Sprite mappings - object 1D
0000A3DA                            ; ---------------------------------------------------------------------------
0000A3DA 0000                       		dc.w byte_891E-Map_obj1D
0000A3DC 04                         byte_891E:	dc.b 4
0000A3DD E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A3E2 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A3E7 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A3EC 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A3F2 00                         		even
0000A3F2 00                         		even
0000A3F2                            
0000A3F2                            ; ===========================================================================
0000A3F2                            ; ---------------------------------------------------------------------------
0000A3F2                            ; Object 2A - doors (SBZ)
0000A3F2                            ; ---------------------------------------------------------------------------
0000A3F2                            
0000A3F2                            Obj2A:					; XREF: Obj_Index
0000A3F2 7000                       		moveq	#0,d0
0000A3F4 1028 0024                  		move.b	$24(a0),d0
0000A3F8 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000A3FC 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000A400                            ; ===========================================================================
0000A400 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000A402 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000A404                            ; ===========================================================================
0000A404                            
0000A404                            Obj2A_Main:				; XREF: Obj2A_Index
0000A404 5428 0024                  		addq.b	#2,$24(a0)
0000A408 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000A410 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000A416 0028 0004 0001             		ori.b	#4,1(a0)
0000A41C 117C 0008 0019             		move.b	#8,$19(a0)
0000A422 117C 0004 0018             		move.b	#4,$18(a0)
0000A428                            
0000A428                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000A428 323C 0040                  		move.w	#$40,d1
0000A42C 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000A430 3038 D008                  		move.w	($FFFFD008).w,d0
0000A434 D041                       		add.w	d1,d0
0000A436 B068 0008                  		cmp.w	8(a0),d0
0000A43A 6500                       		bcs.s	Obj2A_Animate
0000A43C 9041                       		sub.w	d1,d0
0000A43E 9041                       		sub.w	d1,d0
0000A440 B068 0008                  		cmp.w	8(a0),d0
0000A444 6400                       		bcc.s	Obj2A_Animate
0000A446 D041                       		add.w	d1,d0
0000A448 B068 0008                  		cmp.w	8(a0),d0
0000A44C 6400                       		bcc.s	loc_899A
0000A44E 0828 0000 0022             		btst	#0,$22(a0)
0000A454 6600                       		bne.s	Obj2A_Animate
0000A456 6000                       		bra.s	Obj2A_Open
0000A458                            ; ===========================================================================
0000A458                            
0000A458                            loc_899A:				; XREF: Obj2A_OpenShut
0000A458 0828 0000 0022             		btst	#0,$22(a0)
0000A45E 6700                       		beq.s	Obj2A_Animate
0000A460                            
0000A460                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000A460 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000A466                            
0000A466                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000A466 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000A46C 6100 0000                  		bsr.w	AnimateSprite
0000A470 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000A474 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000A476 323C 0011                  		move.w	#$11,d1
0000A47A 343C 0020                  		move.w	#$20,d2
0000A47E 3602                       		move.w	d2,d3
0000A480 5243                       		addq.w	#1,d3
0000A482 3828 0008                  		move.w	8(a0),d4
0000A486 6100 0000                  		bsr.w	SolidObject
0000A48A                            
0000A48A                            Obj2A_MarkAsUsed:
0000A48A 6000 0000                  		bra.w	MarkObjGone
0000A48E                            ; ===========================================================================
0000A48E                            Ani_obj2A:
0000A48E                            	include "_anim\obj2A.asm"
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E                            ; Animation script - doors (SBZ)
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000A490 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000A492 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000A49E 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000A4AA                            		even
0000A4AA                            		even
0000A4AA                            
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Sprite mappings - doors (SBZ)
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            Map_obj2A:
0000A4AA                            	include "_maps\obj2A.asm"
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Sprite mappings - doors (SBZ)
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000A4AE 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000A4B2 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000A4B6 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000A4BA 0000                       		dc.w byte_8A56-Map_obj2A
0000A4BC 02                         byte_89FE:	dc.b 2
0000A4BD E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000A4C2 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000A4C7 02                         byte_8A09:	dc.b 2
0000A4C8 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000A4CD 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000A4D2 02                         byte_8A14:	dc.b 2
0000A4D3 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000A4D8 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000A4DD 02                         byte_8A1F:	dc.b 2
0000A4DE D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000A4E3 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000A4E8 02                         byte_8A2A:	dc.b 2
0000A4E9 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000A4EE 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000A4F3 02                         byte_8A35:	dc.b 2
0000A4F4 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000A4F9 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000A4FE 02                         byte_8A40:	dc.b 2
0000A4FF C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000A504 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000A509 02                         byte_8A4B:	dc.b 2
0000A50A C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000A50F 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000A514 02                         byte_8A56:	dc.b 2
0000A515 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000A51A 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000A520 00                         		even
0000A520 00                         		even
0000A520                            
0000A520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A520                            
0000A520                            
0000A520                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000A520 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A524 6700                       		beq.s	loc_8AA8
0000A526 6B00 0000                  		bmi.w	loc_8AC4
0000A52A 4A40                       		tst.w	d0
0000A52C 6700 0000                  		beq.w	loc_8A92
0000A530 6B00                       		bmi.s	loc_8A7C
0000A532 4A69 0010                  		tst.w	$10(a1)
0000A536 6B00                       		bmi.s	loc_8A92
0000A538 6000                       		bra.s	loc_8A82
0000A53A                            ; ===========================================================================
0000A53A                            
0000A53A                            loc_8A7C:
0000A53A 4A69 0010                  		tst.w	$10(a1)
0000A53E 6A00                       		bpl.s	loc_8A92
0000A540                            
0000A540                            loc_8A82:
0000A540 9169 0008                  		sub.w	d0,8(a1)
0000A544 337C 0000 0014             		move.w	#0,$14(a1)
0000A54A 337C 0000 0010             		move.w	#0,$10(a1)
0000A550                            
0000A550                            loc_8A92:
0000A550 0829 0001 0022             		btst	#1,$22(a1)
0000A556 6600                       		bne.s	loc_8AB6
0000A558 08E9 0005 0022             		bset	#5,$22(a1)
0000A55E 08E8 0005 0022             		bset	#5,$22(a0)
0000A564 4E75                       		rts	
0000A566                            ; ===========================================================================
0000A566                            
0000A566                            loc_8AA8:
0000A566 0828 0005 0022             		btst	#5,$22(a0)
0000A56C 6700                       		beq.s	locret_8AC2
0000A56E 337C 0001 001C             		move.w	#1,$1C(a1)
0000A574                            
0000A574                            loc_8AB6:
0000A574 08A8 0005 0022             		bclr	#5,$22(a0)
0000A57A 08A9 0005 0022             		bclr	#5,$22(a1)
0000A580                            
0000A580                            locret_8AC2:
0000A580 4E75                       		rts	
0000A582                            ; ===========================================================================
0000A582                            
0000A582                            loc_8AC4:
0000A582 4A69 0012                  		tst.w	$12(a1)
0000A586 6A00                       		bpl.s	locret_8AD8
0000A588 4A43                       		tst.w	d3
0000A58A 6A00                       		bpl.s	locret_8AD8
0000A58C 9769 000C                  		sub.w	d3,$C(a1)
0000A590 337C 0000 0012             		move.w	#0,$12(a1)
0000A596                            
0000A596                            locret_8AD8:
0000A596 4E75                       		rts	
0000A598                            ; End of function Obj44_SolidWall
0000A598                            
0000A598                            
0000A598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A598                            
0000A598                            
0000A598                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A598 43F8 D000                  		lea	($FFFFD000).w,a1
0000A59C 3029 0008                  		move.w	8(a1),d0
0000A5A0 9068 0008                  		sub.w	8(a0),d0
0000A5A4 D041                       		add.w	d1,d0
0000A5A6 6B00                       		bmi.s	loc_8B48
0000A5A8 3601                       		move.w	d1,d3
0000A5AA D643                       		add.w	d3,d3
0000A5AC B043                       		cmp.w	d3,d0
0000A5AE 6200                       		bhi.s	loc_8B48
0000A5B0 1629 0016                  		move.b	$16(a1),d3
0000A5B4 4883                       		ext.w	d3
0000A5B6 D443                       		add.w	d3,d2
0000A5B8 3629 000C                  		move.w	$C(a1),d3
0000A5BC 9668 000C                  		sub.w	$C(a0),d3
0000A5C0 D642                       		add.w	d2,d3
0000A5C2 6B00                       		bmi.s	loc_8B48
0000A5C4 3802                       		move.w	d2,d4
0000A5C6 D844                       		add.w	d4,d4
0000A5C8 B644                       		cmp.w	d4,d3
0000A5CA 6400                       		bcc.s	loc_8B48
0000A5CC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A5D0 6B00                       		bmi.s	loc_8B48
0000A5D2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A5D8 6400                       		bcc.s	loc_8B48
0000A5DA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A5DE 6600                       		bne.s	loc_8B48
0000A5E0 3A00                       		move.w	d0,d5
0000A5E2 B240                       		cmp.w	d0,d1
0000A5E4 6400                       		bcc.s	loc_8B30
0000A5E6 D241                       		add.w	d1,d1
0000A5E8 9041                       		sub.w	d1,d0
0000A5EA 3A00                       		move.w	d0,d5
0000A5EC 4445                       		neg.w	d5
0000A5EE                            
0000A5EE                            loc_8B30:
0000A5EE 3203                       		move.w	d3,d1
0000A5F0 B443                       		cmp.w	d3,d2
0000A5F2 6400                       		bcc.s	loc_8B3C
0000A5F4 9644                       		sub.w	d4,d3
0000A5F6 3203                       		move.w	d3,d1
0000A5F8 4441                       		neg.w	d1
0000A5FA                            
0000A5FA                            loc_8B3C:
0000A5FA BA41                       		cmp.w	d1,d5
0000A5FC 6200                       		bhi.s	loc_8B44
0000A5FE 7801                       		moveq	#1,d4
0000A600 4E75                       		rts	
0000A602                            ; ===========================================================================
0000A602                            
0000A602                            loc_8B44:
0000A602 78FF                       		moveq	#-1,d4
0000A604 4E75                       		rts	
0000A606                            ; ===========================================================================
0000A606                            
0000A606                            loc_8B48:
0000A606 7800                       		moveq	#0,d4
0000A608 4E75                       		rts	
0000A60A                            ; End of function Obj44_SolidWall2
0000A60A                            
0000A60A                            ; ===========================================================================
0000A60A                            ; ---------------------------------------------------------------------------
0000A60A                            ; Object 1E - Ball Hog enemy (SBZ)
0000A60A                            ; ---------------------------------------------------------------------------
0000A60A                            
0000A60A                            Obj1E:					; XREF: Obj_Index
0000A60A 7000                       		moveq	#0,d0
0000A60C 1028 0024                  		move.b	$24(a0),d0
0000A610 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A614 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A618                            ; ===========================================================================
0000A618 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A61A 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A61C                            ; ===========================================================================
0000A61C                            
0000A61C                            Obj1E_Main:				; XREF: Obj1E_Index
0000A61C 117C 0013 0016             		move.b	#$13,$16(a0)
0000A622 117C 0008 0017             		move.b	#8,$17(a0)
0000A628 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A630 317C 2302 0002             		move.w	#$2302,2(a0)
0000A636 117C 0004 0001             		move.b	#4,1(a0)
0000A63C 117C 0004 0018             		move.b	#4,$18(a0)
0000A642 117C 0005 0020             		move.b	#5,$20(a0)
0000A648 117C 000C 0019             		move.b	#$C,$19(a0)
0000A64E 6100 0000                  		bsr.w	ObjectFall
0000A652 4EB9 0000 0000             		jsr	ObjHitFloor
0000A658 4A41                       		tst.w	d1
0000A65A 6A00                       		bpl.s	locret_8BAC
0000A65C D368 000C                  		add.w	d1,$C(a0)
0000A660 317C 0000 0012             		move.w	#0,$12(a0)
0000A666 5428 0024                  		addq.b	#2,$24(a0)
0000A66A                            
0000A66A                            locret_8BAC:
0000A66A 4E75                       		rts	
0000A66C                            ; ===========================================================================
0000A66C                            
0000A66C                            Obj1E_Action:				; XREF: Obj1E_Index
0000A66C 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A672 6100 0000                  		bsr.w	AnimateSprite
0000A676 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A67C 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A67E 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A682 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A684 6000                       		bra.s	Obj1E_MarkAsGone
0000A686                            ; ===========================================================================
0000A686                            
0000A686                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A686 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A68A                            
0000A68A                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A68A 6000 0000                  		bra.w	MarkObjGone
0000A68E                            ; ===========================================================================
0000A68E                            
0000A68E                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A68E 117C 0001 0032             		move.b	#1,$32(a0)
0000A694 6100 0000                  		bsr.w	SingleObjLoad
0000A698 6600                       		bne.s	loc_8C1A
0000A69A 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A69E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A6A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A6AA 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A6B0 337C 0000 0012             		move.w	#0,$12(a1)
0000A6B6 70FC                       		moveq	#-4,d0
0000A6B8 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A6BE 6700                       		beq.s	loc_8C0A	; if not, branch
0000A6C0 4440                       		neg.w	d0
0000A6C2 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A6C6                            
0000A6C6                            loc_8C0A:
0000A6C6 D169 0008                  		add.w	d0,8(a1)
0000A6CA 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A6D0 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A6D6                            
0000A6D6                            loc_8C1A:
0000A6D6 60B2                       		bra.s	Obj1E_MarkAsGone
0000A6D8                            ; ===========================================================================
0000A6D8                            ; ---------------------------------------------------------------------------
0000A6D8                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A6D8                            ; ---------------------------------------------------------------------------
0000A6D8                            
0000A6D8                            Obj20:					; XREF: Obj_Index
0000A6D8 7000                       		moveq	#0,d0
0000A6DA 1028 0024                  		move.b	$24(a0),d0
0000A6DE 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A6E2 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A6E6                            ; ===========================================================================
0000A6E6 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A6E8 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A6EA                            ; ===========================================================================
0000A6EA                            
0000A6EA                            Obj20_Main:				; XREF: Obj20_Index
0000A6EA 5428 0024                  		addq.b	#2,$24(a0)
0000A6EE 117C 0007 0016             		move.b	#7,$16(a0)
0000A6F4 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A6FC 317C 2302 0002             		move.w	#$2302,2(a0)
0000A702 117C 0004 0001             		move.b	#4,1(a0)
0000A708 117C 0003 0018             		move.b	#3,$18(a0)
0000A70E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A714 117C 0008 0019             		move.b	#8,$19(a0)
0000A71A 7000                       		moveq	#0,d0
0000A71C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A720 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A724 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A728 117C 0004 001A             		move.b	#4,$1A(a0)
0000A72E                            
0000A72E                            Obj20_Bounce:				; XREF: Obj20_Index
0000A72E 4EB9 0000 0000             		jsr	ObjectFall
0000A734 4A68 0012                  		tst.w	$12(a0)
0000A738 6B00                       		bmi.s	Obj20_ChkExplode
0000A73A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A740 4A41                       		tst.w	d1
0000A742 6A00                       		bpl.s	Obj20_ChkExplode
0000A744 D368 000C                  		add.w	d1,$C(a0)
0000A748 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A74E 4A03                       		tst.b	d3
0000A750 6700                       		beq.s	Obj20_ChkExplode
0000A752 6B00                       		bmi.s	loc_8CA4
0000A754 4A68 0010                  		tst.w	$10(a0)
0000A758 6A00                       		bpl.s	Obj20_ChkExplode
0000A75A 4468 0010                  		neg.w	$10(a0)
0000A75E 6000                       		bra.s	Obj20_ChkExplode
0000A760                            ; ===========================================================================
0000A760                            
0000A760                            loc_8CA4:				; XREF: Obj20_Bounce
0000A760 4A68 0010                  		tst.w	$10(a0)
0000A764 6B00                       		bmi.s	Obj20_ChkExplode
0000A766 4468 0010                  		neg.w	$10(a0)
0000A76A                            
0000A76A                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A76A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A76E 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A770 10BC 0024                  		move.b	#$24,0(a0)
0000A774 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A778 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A77E 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A782                            ; ===========================================================================
0000A782                            
0000A782                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A782 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A786 6A00                       		bpl.s	Obj20_Display
0000A788 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A78E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A794                            
0000A794                            Obj20_Display:
0000A794 6100 0000                  		bsr.w	DisplaySprite
0000A798 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A79C 0640 00E0                  		addi.w	#$E0,d0
0000A7A0 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A7A4 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A7A8 4E75                       		rts	
0000A7AA                            ; ===========================================================================
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            ; Object 24 - explosion	from a destroyed monitor
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            
0000A7AA                            Obj24:					; XREF: Obj_Index
0000A7AA 7000                       		moveq	#0,d0
0000A7AC 1028 0024                  		move.b	$24(a0),d0
0000A7B0 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A7B4 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A7B8                            ; ===========================================================================
0000A7B8 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A7BA 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A7BC                            ; ===========================================================================
0000A7BC                            
0000A7BC                            Obj24_Main:				; XREF: Obj24_Index
0000A7BC 5428 0024                  		addq.b	#2,$24(a0)
0000A7C0 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A7C8 317C 041C 0002             		move.w	#$41C,2(a0)
0000A7CE 117C 0004 0001             		move.b	#4,1(a0)
0000A7D4 117C 0001 0018             		move.b	#1,$18(a0)
0000A7DA 117C 0000 0020             		move.b	#0,$20(a0)
0000A7E0 117C 000C 0019             		move.b	#$C,$19(a0)
0000A7E6 117C 0009 001E             		move.b	#9,$1E(a0)
0000A7EC 117C 0000 001A             		move.b	#0,$1A(a0)
0000A7F2 303C 00A5                  		move.w	#$A5,d0
0000A7F6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A7FC                            
0000A7FC                            Obj24_Animate:				; XREF: Obj24_Index
0000A7FC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A800 6A00                       		bpl.s	Obj24_Display
0000A802 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A808 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A80C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A812 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A816                            
0000A816                            Obj24_Display:
0000A816 6000 0000                  		bra.w	DisplaySprite
0000A81A                            ; ===========================================================================
0000A81A                            ; ---------------------------------------------------------------------------
0000A81A                            ; Object 27 - explosion	from a destroyed enemy
0000A81A                            ; ---------------------------------------------------------------------------
0000A81A                            
0000A81A                            Obj27:					; XREF: Obj_Index
0000A81A 7000                       		moveq	#0,d0
0000A81C 1028 0024                  		move.b	$24(a0),d0
0000A820 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A824 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A828                            ; ===========================================================================
0000A828 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A82A 0000                       		dc.w Obj27_Main-Obj27_Index
0000A82C 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A82E                            ; ===========================================================================
0000A82E                            
0000A82E                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A82E 5428 0024                  		addq.b	#2,$24(a0)
0000A832 6100 0000                  		bsr.w	SingleObjLoad
0000A836 6600                       		bne.s	Obj27_Main
0000A838 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A83C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A842 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A848 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A84E                            
0000A84E                            Obj27_Main:				; XREF: Obj27_Index
0000A84E 5428 0024                  		addq.b	#2,$24(a0)
0000A852 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A85A 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A860 117C 0004 0001             		move.b	#4,1(a0)
0000A866 117C 0001 0018             		move.b	#1,$18(a0)
0000A86C 117C 0000 0020             		move.b	#0,$20(a0)
0000A872 117C 000C 0019             		move.b	#$C,$19(a0)
0000A878 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A87E 117C 0000 001A             		move.b	#0,$1A(a0)
0000A884 303C 00C1                  		move.w	#$C1,d0
0000A888 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A88E                            
0000A88E                            Obj27_Animate:				; XREF: Obj27_Index
0000A88E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A892 6A00                       		bpl.s	Obj27_Display
0000A894 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A89A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A89E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A8A4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A8A8                            
0000A8A8                            Obj27_Display:
0000A8A8 6000 0000                  		bra.w	DisplaySprite
0000A8AC                            ; ===========================================================================
0000A8AC                            ; ---------------------------------------------------------------------------
0000A8AC                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A8AC                            ; ---------------------------------------------------------------------------
0000A8AC                            
0000A8AC                            Obj3F:					; XREF: Obj_Index
0000A8AC 7000                       		moveq	#0,d0
0000A8AE 1028 0024                  		move.b	$24(a0),d0
0000A8B2 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A8B6 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A8BA                            ; ===========================================================================
0000A8BA 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A8BC FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A8BE                            ; ===========================================================================
0000A8BE                            
0000A8BE                            Obj3F_Main:				; XREF: Obj3F_Index
0000A8BE 5428 0024                  		addq.b	#2,$24(a0)
0000A8C2 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A8CA 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A8D0 117C 0004 0001             		move.b	#4,1(a0)
0000A8D6 117C 0001 0018             		move.b	#1,$18(a0)
0000A8DC 117C 0000 0020             		move.b	#0,$20(a0)
0000A8E2 117C 000C 0019             		move.b	#$C,$19(a0)
0000A8E8 117C 0007 001E             		move.b	#7,$1E(a0)
0000A8EE 117C 0000 001A             		move.b	#0,$1A(a0)
0000A8F4 303C 00C4                  		move.w	#$C4,d0
0000A8F8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A8FE                            ; ===========================================================================
0000A8FE                            Ani_obj1E:
0000A8FE                            	include "_anim\obj1E.asm"
0000A8FE                            ; ---------------------------------------------------------------------------
0000A8FE                            ; Animation script - doors (SBZ)
0000A8FE                            ; ---------------------------------------------------------------------------
0000A8FE 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A900 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A918 00                         		even
0000A918 00                         		even
0000A918                            
0000A918                            ; ---------------------------------------------------------------------------
0000A918                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A918                            ; ---------------------------------------------------------------------------
0000A918                            Map_obj1E:
0000A918                            	include "_maps\obj1E.asm"
0000A918                            ; ---------------------------------------------------------------------------
0000A918                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A918                            ; ---------------------------------------------------------------------------
0000A918 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A91C 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A920 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A924 02                         byte_8E6E:	dc.b 2
0000A925 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A92A FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A92F 02                         byte_8E79:	dc.b 2
0000A930 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A935 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A93A 02                         byte_8E84:	dc.b 2
0000A93B F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A940 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A945 02                         byte_8E8F:	dc.b 2
0000A946 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A94B F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A950 01                         byte_8E9A:	dc.b 1
0000A951 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A956 01                         byte_8EA0:	dc.b 1
0000A957 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A95C                            		even
0000A95C                            		even
0000A95C                            
0000A95C                            ; ---------------------------------------------------------------------------
0000A95C                            ; Sprite mappings - explosion
0000A95C                            ; ---------------------------------------------------------------------------
0000A95C                            Map_obj24:
0000A95C                            	include "_maps\obj24.asm"
0000A95C                            ; ---------------------------------------------------------------------------
0000A95C                            ; Sprite mappings - explosion
0000A95C                            ; ---------------------------------------------------------------------------
0000A95C 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A960 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A964 01                         byte_8EAE:	dc.b 1
0000A965 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A96A 01                         byte_8EB4:	dc.b 1
0000A96B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A970 01                         byte_8EBA:	dc.b 1
0000A971 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A976 01                         byte_8EC0:	dc.b 1
0000A977 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A97C                            		even
0000A97C                            		even
0000A97C                            
0000A97C                            ; ---------------------------------------------------------------------------
0000A97C                            ; Sprite mappings - explosion
0000A97C                            ; ---------------------------------------------------------------------------
0000A97C 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A980 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A984 0000                       		dc.w byte_8EF7-Map_obj27
0000A986 01                         byte_8ED0:	dc.b 1
0000A987 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A98C 01                         byte_8ED6:	dc.b 1
0000A98D F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A992 01                         byte_8EDC:	dc.b 1
0000A993 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A998 04                         byte_8EE2:	dc.b 4
0000A999 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A99E EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A9A3 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A9A8 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A9AD 04                         byte_8EF7:	dc.b 4
0000A9AE EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A9B3 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A9B8 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A9BD FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A9C2                            		even
0000A9C2                            ; ---------------------------------------------------------------------------
0000A9C2                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A9C2                            ; ---------------------------------------------------------------------------
0000A9C2 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A9C4 0000                       		dc.w byte_8F16-Map_obj3F
0000A9C6 0000                       		dc.w byte_8F1C-Map_obj3F
0000A9C8 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A9CA FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A9CC 01                         byte_8F16:	dc.b 1
0000A9CD F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A9D2 01                         byte_8F1C:	dc.b 1
0000A9D3 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A9D8                            		even
0000A9D8                            ; ===========================================================================
0000A9D8                            ; ---------------------------------------------------------------------------
0000A9D8                            ; Object 28 - animals
0000A9D8                            ; ---------------------------------------------------------------------------
0000A9D8                            
0000A9D8                            Obj28:					; XREF: Obj_Index
0000A9D8 7000                       		moveq	#0,d0
0000A9DA 1028 0024                  		move.b	$24(a0),d0
0000A9DE 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A9E2 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A9E6                            ; ===========================================================================
0000A9E6 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A9EA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A9EE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A9F2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A9F6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A9FA 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A9FE 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000AA02 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000AA06 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000AA0A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000AA0E 0000                       		dc.w loc_92D6-Obj28_Index
0000AA10                            
0000AA10 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AA1C                            
0000AA1C FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000AA20 0000 0000                  		dc.l Map_obj28
0000AA24 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000AA28 0000 0000                  		dc.l Map_obj28a		; mappings address
0000AA2C FE80 FD00                  		dc.w $FE80, $FD00
0000AA30 0000 0000                  		dc.l Map_obj28
0000AA34 FEC0 FE80                  		dc.w $FEC0, $FE80
0000AA38 0000 0000                  		dc.l Map_obj28a
0000AA3C FE40 FD00                  		dc.w $FE40, $FD00
0000AA40 0000 0000                  		dc.l Map_obj28b
0000AA44 FD00 FC00                  		dc.w $FD00, $FC00
0000AA48 0000 0000                  		dc.l Map_obj28a
0000AA4C FD80 FC80                  		dc.w $FD80, $FC80
0000AA50 0000 0000                  		dc.l Map_obj28b
0000AA54                            
0000AA54 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AA64 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA74 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA80                            
0000AA80 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000AA94 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000AAA8 0000 0000                  		dc.l Map_obj28b
0000AAAC                            
0000AAAC 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AABE 0565 05B3                  		dc.w $565, $5B3
0000AAC2                            ; ===========================================================================
0000AAC2                            
0000AAC2                            Obj28_Ending:				; XREF: Obj28_Index
0000AAC2 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000AAC6 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000AACA 7000                       		moveq	#0,d0
0000AACC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000AAD0 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AAD2 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000AAD6 0440 0014                  		subi.w	#$14,d0
0000AADA 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000AAE0 D040                       		add.w	d0,d0
0000AAE2 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000AAE8 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000AAEC 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AAF2 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000AAF8 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AAFE 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000AB04 117C 000C 0016             		move.b	#$C,$16(a0)
0000AB0A 117C 0004 0001             		move.b	#4,1(a0)
0000AB10 08E8 0000 0001             		bset	#0,1(a0)
0000AB16 117C 0006 0018             		move.b	#6,$18(a0)
0000AB1C 117C 0008 0019             		move.b	#8,$19(a0)
0000AB22 117C 0007 001E             		move.b	#7,$1E(a0)
0000AB28 6000 0000                  		bra.w	DisplaySprite
0000AB2C                            ; ===========================================================================
0000AB2C                            
0000AB2C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000AB2C 5428 0024                  		addq.b	#2,$24(a0)
0000AB30 6100 8024                  		bsr.w	RandomNumber
0000AB34 0240 0001                  		andi.w	#1,d0
0000AB38 7200                       		moveq	#0,d1
0000AB3A 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000AB3E D241                       		add.w	d1,d1
0000AB40 D240                       		add.w	d0,d1
0000AB42 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000AB46 1031 1000                  		move.b	(a1,d1.w),d0
0000AB4A 1140 0030                  		move.b	d0,$30(a0)
0000AB4E E748                       		lsl.w	#3,d0
0000AB50 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000AB54 D2C0                       		adda.w	d0,a1
0000AB56 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AB5A 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AB5E 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000AB62 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000AB68 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AB6E 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB70 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000AB76                            
0000AB76                            loc_90C0:
0000AB76 117C 000C 0016             		move.b	#$C,$16(a0)
0000AB7C 117C 0004 0001             		move.b	#4,1(a0)
0000AB82 08E8 0000 0001             		bset	#0,1(a0)
0000AB88 117C 0006 0018             		move.b	#6,$18(a0)
0000AB8E 117C 0008 0019             		move.b	#8,$19(a0)
0000AB94 117C 0007 001E             		move.b	#7,$1E(a0)
0000AB9A 117C 0002 001A             		move.b	#2,$1A(a0)
0000ABA0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000ABA6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000ABAA 6600                       		bne.s	loc_911C
0000ABAC 6100 0000                  		bsr.w	SingleObjLoad
0000ABB0 6600                       		bne.s	Obj28_Display
0000ABB2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000ABB6 3368 0008 0008             		move.w	8(a0),8(a1)
0000ABBC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ABC2 3028 003E                  		move.w	$3E(a0),d0
0000ABC6 E248                       		lsr.w	#1,d0
0000ABC8 1340 001A                  		move.b	d0,$1A(a1)
0000ABCC                            
0000ABCC                            Obj28_Display:
0000ABCC 6000 0000                  		bra.w	DisplaySprite
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            loc_911C:
0000ABD0 117C 0012 0024             		move.b	#$12,$24(a0)
0000ABD6 4268 0010                  		clr.w	$10(a0)
0000ABDA 6000 0000                  		bra.w	DisplaySprite
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            loc_912A:				; XREF: Obj28_Index
0000ABDE 4A28 0001                  		tst.b	1(a0)
0000ABE2 6A00 0000                  		bpl.w	DeleteObject
0000ABE6 6100 0000                  		bsr.w	ObjectFall
0000ABEA 4A68 0012                  		tst.w	$12(a0)
0000ABEE 6B00                       		bmi.s	loc_9180
0000ABF0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABF6 4A41                       		tst.w	d1
0000ABF8 6A00                       		bpl.s	loc_9180
0000ABFA D368 000C                  		add.w	d1,$C(a0)
0000ABFE 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AC04 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC0A 117C 0001 001A             		move.b	#1,$1A(a0)
0000AC10 1028 0030                  		move.b	$30(a0),d0
0000AC14 D000                       		add.b	d0,d0
0000AC16 5800                       		addq.b	#4,d0
0000AC18 1140 0024                  		move.b	d0,$24(a0)
0000AC1C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AC20 6700                       		beq.s	loc_9180
0000AC22 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000AC28 6700                       		beq.s	loc_9180
0000AC2A 4468 0010                  		neg.w	$10(a0)
0000AC2E 0868 0000 0001             		bchg	#0,1(a0)
0000AC34                            
0000AC34                            loc_9180:
0000AC34 6000 0000                  		bra.w	DisplaySprite
0000AC38                            ; ===========================================================================
0000AC38                            
0000AC38                            loc_9184:				; XREF: Obj28_Index
0000AC38 6100 0000                  		bsr.w	ObjectFall
0000AC3C 117C 0001 001A             		move.b	#1,$1A(a0)
0000AC42 4A68 0012                  		tst.w	$12(a0)
0000AC46 6B00                       		bmi.s	loc_91AE
0000AC48 117C 0000 001A             		move.b	#0,$1A(a0)
0000AC4E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC54 4A41                       		tst.w	d1
0000AC56 6A00                       		bpl.s	loc_91AE
0000AC58 D368 000C                  		add.w	d1,$C(a0)
0000AC5C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC62                            
0000AC62                            loc_91AE:
0000AC62 4A28 0028                  		tst.b	$28(a0)
0000AC66 6600                       		bne.s	loc_9224
0000AC68 4A28 0001                  		tst.b	1(a0)
0000AC6C 6A00 0000                  		bpl.w	DeleteObject
0000AC70 6000 0000                  		bra.w	DisplaySprite
0000AC74                            ; ===========================================================================
0000AC74                            
0000AC74                            loc_91C0:				; XREF: Obj28_Index
0000AC74 6100 0000                  		bsr.w	SpeedToPos
0000AC78 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AC7E 4A68 0012                  		tst.w	$12(a0)
0000AC82 6B00                       		bmi.s	loc_91FC
0000AC84 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC8A 4A41                       		tst.w	d1
0000AC8C 6A00                       		bpl.s	loc_91FC
0000AC8E D368 000C                  		add.w	d1,$C(a0)
0000AC92 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC98 4A28 0028                  		tst.b	$28(a0)
0000AC9C 6700                       		beq.s	loc_91FC
0000AC9E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000ACA4 6700                       		beq.s	loc_91FC
0000ACA6 4468 0010                  		neg.w	$10(a0)
0000ACAA 0868 0000 0001             		bchg	#0,1(a0)
0000ACB0                            
0000ACB0                            loc_91FC:
0000ACB0 5328 001E                  		subq.b	#1,$1E(a0)
0000ACB4 6A00                       		bpl.s	loc_9212
0000ACB6 117C 0001 001E             		move.b	#1,$1E(a0)
0000ACBC 5228 001A                  		addq.b	#1,$1A(a0)
0000ACC0 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ACC6                            
0000ACC6                            loc_9212:
0000ACC6 4A28 0028                  		tst.b	$28(a0)
0000ACCA 6600                       		bne.s	loc_9224
0000ACCC 4A28 0001                  		tst.b	1(a0)
0000ACD0 6A00 0000                  		bpl.w	DeleteObject
0000ACD4 6000 0000                  		bra.w	DisplaySprite
0000ACD8                            ; ===========================================================================
0000ACD8                            
0000ACD8                            loc_9224:				; XREF: Obj28_Index
0000ACD8 3028 0008                  		move.w	8(a0),d0
0000ACDC 9078 D008                  		sub.w	($FFFFD008).w,d0
0000ACE0 6500                       		bcs.s	loc_923C
0000ACE2 0440 0180                  		subi.w	#$180,d0
0000ACE6 6A00                       		bpl.s	loc_923C
0000ACE8 4A28 0001                  		tst.b	1(a0)
0000ACEC 6A00 0000                  		bpl.w	DeleteObject
0000ACF0                            
0000ACF0                            loc_923C:
0000ACF0 6000 0000                  		bra.w	DisplaySprite
0000ACF4                            ; ===========================================================================
0000ACF4                            
0000ACF4                            loc_9240:				; XREF: Obj28_Index
0000ACF4 4A28 0001                  		tst.b	1(a0)
0000ACF8 6A00 0000                  		bpl.w	DeleteObject
0000ACFC 5368 0036                  		subq.w	#1,$36(a0)
0000AD00 6600 0000                  		bne.w	loc_925C
0000AD04 117C 0002 0024             		move.b	#2,$24(a0)
0000AD0A 117C 0003 0018             		move.b	#3,$18(a0)
0000AD10                            
0000AD10                            loc_925C:
0000AD10 6000 0000                  		bra.w	DisplaySprite
0000AD14                            ; ===========================================================================
0000AD14                            
0000AD14                            loc_9260:				; XREF: Obj28_Index
0000AD14 6100 0000                  		bsr.w	sub_9404
0000AD18 6400                       		bcc.s	loc_927C
0000AD1A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AD20 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD26 117C 000E 0024             		move.b	#$E,$24(a0)
0000AD2C 6000 FF46                  		bra.w	loc_91C0
0000AD30                            ; ===========================================================================
0000AD30                            
0000AD30                            loc_927C:
0000AD30 6000 FFA6                  		bra.w	loc_9224
0000AD34                            ; ===========================================================================
0000AD34                            
0000AD34                            loc_9280:				; XREF: Obj28_Index
0000AD34 6100 0000                  		bsr.w	sub_9404
0000AD38 6A00                       		bpl.s	loc_92B6
0000AD3A 4268 0010                  		clr.w	$10(a0)
0000AD3E 4268 0032                  		clr.w	$32(a0)
0000AD42 6100 0000                  		bsr.w	SpeedToPos
0000AD46 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD4C 6100 0000                  		bsr.w	loc_93C4
0000AD50 6100 0000                  		bsr.w	loc_93EC
0000AD54 5328 001E                  		subq.b	#1,$1E(a0)
0000AD58 6A00                       		bpl.s	loc_92B6
0000AD5A 117C 0001 001E             		move.b	#1,$1E(a0)
0000AD60 5228 001A                  		addq.b	#1,$1A(a0)
0000AD64 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AD6A                            
0000AD6A                            loc_92B6:
0000AD6A 6000 FF6C                  		bra.w	loc_9224
0000AD6E                            ; ===========================================================================
0000AD6E                            
0000AD6E                            loc_92BA:				; XREF: Obj28_Index
0000AD6E 6100 0000                  		bsr.w	sub_9404
0000AD72 6A00                       		bpl.s	loc_9310
0000AD74 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AD7A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD80 117C 0004 0024             		move.b	#4,$24(a0)
0000AD86 6000 FEB0                  		bra.w	loc_9184
0000AD8A                            ; ===========================================================================
0000AD8A                            
0000AD8A                            loc_92D6:				; XREF: Obj28_Index
0000AD8A 6100 0000                  		bsr.w	ObjectFall
0000AD8E 117C 0001 001A             		move.b	#1,$1A(a0)
0000AD94 4A68 0012                  		tst.w	$12(a0)
0000AD98 6B00                       		bmi.s	loc_9310
0000AD9A 117C 0000 001A             		move.b	#0,$1A(a0)
0000ADA0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADA6 4A41                       		tst.w	d1
0000ADA8 6A00                       		bpl.s	loc_9310
0000ADAA 4628 0029                  		not.b	$29(a0)
0000ADAE 6600                       		bne.s	loc_9306
0000ADB0 4468 0010                  		neg.w	$10(a0)
0000ADB4 0868 0000 0001             		bchg	#0,1(a0)
0000ADBA                            
0000ADBA                            loc_9306:
0000ADBA D368 000C                  		add.w	d1,$C(a0)
0000ADBE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ADC4                            
0000ADC4                            loc_9310:
0000ADC4 6000 FF12                  		bra.w	loc_9224
0000ADC8                            ; ===========================================================================
0000ADC8                            
0000ADC8                            loc_9314:				; XREF: Obj28_Index
0000ADC8 6100 0000                  		bsr.w	sub_9404
0000ADCC 6A00                       		bpl.s	loc_932E
0000ADCE 4268 0010                  		clr.w	$10(a0)
0000ADD2 4268 0032                  		clr.w	$32(a0)
0000ADD6 6100 0000                  		bsr.w	ObjectFall
0000ADDA 6100 0000                  		bsr.w	loc_93C4
0000ADDE 6100 0000                  		bsr.w	loc_93EC
0000ADE2                            
0000ADE2                            loc_932E:
0000ADE2 6000 FEF4                  		bra.w	loc_9224
0000ADE6                            ; ===========================================================================
0000ADE6                            
0000ADE6                            loc_9332:				; XREF: Obj28_Index
0000ADE6 6100 0000                  		bsr.w	sub_9404
0000ADEA 6A00                       		bpl.s	loc_936C
0000ADEC 6100 0000                  		bsr.w	ObjectFall
0000ADF0 117C 0001 001A             		move.b	#1,$1A(a0)
0000ADF6 4A68 0012                  		tst.w	$12(a0)
0000ADFA 6B00                       		bmi.s	loc_936C
0000ADFC 117C 0000 001A             		move.b	#0,$1A(a0)
0000AE02 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE08 4A41                       		tst.w	d1
0000AE0A 6A00                       		bpl.s	loc_936C
0000AE0C 4468 0010                  		neg.w	$10(a0)
0000AE10 0868 0000 0001             		bchg	#0,1(a0)
0000AE16 D368 000C                  		add.w	d1,$C(a0)
0000AE1A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AE20                            
0000AE20                            loc_936C:
0000AE20 6000 FEB6                  		bra.w	loc_9224
0000AE24                            ; ===========================================================================
0000AE24                            
0000AE24                            loc_9370:				; XREF: Obj28_Index
0000AE24 6100 0000                  		bsr.w	sub_9404
0000AE28 6A00                       		bpl.s	loc_93C0
0000AE2A 6100 0000                  		bsr.w	SpeedToPos
0000AE2E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE34 4A68 0012                  		tst.w	$12(a0)
0000AE38 6B00                       		bmi.s	loc_93AA
0000AE3A 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE40 4A41                       		tst.w	d1
0000AE42 6A00                       		bpl.s	loc_93AA
0000AE44 4628 0029                  		not.b	$29(a0)
0000AE48 6600                       		bne.s	loc_93A0
0000AE4A 4468 0010                  		neg.w	$10(a0)
0000AE4E 0868 0000 0001             		bchg	#0,1(a0)
0000AE54                            
0000AE54                            loc_93A0:
0000AE54 D368 000C                  		add.w	d1,$C(a0)
0000AE58 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AE5E                            
0000AE5E                            loc_93AA:
0000AE5E 5328 001E                  		subq.b	#1,$1E(a0)
0000AE62 6A00                       		bpl.s	loc_93C0
0000AE64 117C 0001 001E             		move.b	#1,$1E(a0)
0000AE6A 5228 001A                  		addq.b	#1,$1A(a0)
0000AE6E 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AE74                            
0000AE74                            loc_93C0:
0000AE74 6000 FE62                  		bra.w	loc_9224
0000AE78                            ; ===========================================================================
0000AE78                            
0000AE78                            loc_93C4:
0000AE78 117C 0001 001A             		move.b	#1,$1A(a0)
0000AE7E 4A68 0012                  		tst.w	$12(a0)
0000AE82 6B00                       		bmi.s	locret_93EA
0000AE84 117C 0000 001A             		move.b	#0,$1A(a0)
0000AE8A 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE90 4A41                       		tst.w	d1
0000AE92 6A00                       		bpl.s	locret_93EA
0000AE94 D368 000C                  		add.w	d1,$C(a0)
0000AE98 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AE9E                            
0000AE9E                            locret_93EA:
0000AE9E 4E75                       		rts	
0000AEA0                            ; ===========================================================================
0000AEA0                            
0000AEA0                            loc_93EC:
0000AEA0 08E8 0000 0001             		bset	#0,1(a0)
0000AEA6 3028 0008                  		move.w	8(a0),d0
0000AEAA 9078 D008                  		sub.w	($FFFFD008).w,d0
0000AEAE 6400                       		bcc.s	locret_9402
0000AEB0 08A8 0000 0001             		bclr	#0,1(a0)
0000AEB6                            
0000AEB6                            locret_9402:
0000AEB6 4E75                       		rts	
0000AEB8                            
0000AEB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEB8                            
0000AEB8                            
0000AEB8                            sub_9404:
0000AEB8 3038 D008                  		move.w	($FFFFD008).w,d0
0000AEBC 9068 0008                  		sub.w	8(a0),d0
0000AEC0 0440 00B8                  		subi.w	#$B8,d0
0000AEC4 4E75                       		rts	
0000AEC6                            ; End of function sub_9404
0000AEC6                            
0000AEC6                            ; ===========================================================================
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            ; Object 29 - points that appear when you destroy something
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            
0000AEC6                            Obj29:					; XREF: Obj_Index
0000AEC6 7000                       		moveq	#0,d0
0000AEC8 1028 0024                  		move.b	$24(a0),d0
0000AECC 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000AED0 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000AED4 6000 0000                  		bra.w	DisplaySprite
0000AED8                            ; ===========================================================================
0000AED8 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000AEDA 0000                       		dc.w Obj29_Slower-Obj29_Index
0000AEDC                            ; ===========================================================================
0000AEDC                            
0000AEDC                            Obj29_Main:				; XREF: Obj29_Index
0000AEDC 5428 0024                  		addq.b	#2,$24(a0)
0000AEE0 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000AEE8 317C 2797 0002             		move.w	#$2797,2(a0)
0000AEEE 117C 0004 0001             		move.b	#4,1(a0)
0000AEF4 117C 0001 0018             		move.b	#1,$18(a0)
0000AEFA 117C 0008 0019             		move.b	#8,$19(a0)
0000AF00 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000AF06                            
0000AF06                            Obj29_Slower:				; XREF: Obj29_Index
0000AF06 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AF0A 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000AF0E 6100 0000                  		bsr.w	SpeedToPos
0000AF12 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AF18 4E75                       		rts	
0000AF1A                            ; ===========================================================================
0000AF1A                            ; ---------------------------------------------------------------------------
0000AF1A                            ; Sprite mappings - animals
0000AF1A                            ; ---------------------------------------------------------------------------
0000AF1A                            Map_obj28:
0000AF1A                            	include "_maps\obj28.asm"
0000AF1A                            ; ---------------------------------------------------------------------------
0000AF1A                            ; Sprite mappings - animals
0000AF1A                            ; ---------------------------------------------------------------------------
0000AF1A 0000                       		dc.w byte_9472-Map_obj28
0000AF1C 0000                       		dc.w byte_9478-Map_obj28
0000AF1E 0000                       		dc.w byte_946C-Map_obj28
0000AF20 01                         byte_946C:	dc.b 1
0000AF21 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF26 01                         byte_9472:	dc.b 1
0000AF27 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AF2C 01                         byte_9478:	dc.b 1
0000AF2D F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AF32                            		even
0000AF32                            		even
0000AF32                            
0000AF32                            Map_obj28a:
0000AF32                            	include "_maps\obj28a.asm"
0000AF32                            ; ---------------------------------------------------------------------------
0000AF32                            ; Sprite mappings - animals
0000AF32                            ; ---------------------------------------------------------------------------
0000AF32 0000                       		dc.w byte_948A-Map_obj28a
0000AF34 0000                       		dc.w byte_9490-Map_obj28a
0000AF36 0000                       		dc.w byte_9484-Map_obj28a
0000AF38 01                         byte_9484:	dc.b 1
0000AF39 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF3E 01                         byte_948A:	dc.b 1
0000AF3F FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AF44 01                         byte_9490:	dc.b 1
0000AF45 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AF4A                            		even
0000AF4A                            		even
0000AF4A                            
0000AF4A                            Map_obj28b:
0000AF4A                            	include "_maps\obj28b.asm"
0000AF4A                            ; ---------------------------------------------------------------------------
0000AF4A                            ; Sprite mappings - animals
0000AF4A                            ; ---------------------------------------------------------------------------
0000AF4A 0000                       		dc.w byte_94A2-Map_obj28b
0000AF4C 0000                       		dc.w byte_94A8-Map_obj28b
0000AF4E 0000                       		dc.w byte_949C-Map_obj28b
0000AF50 01                         byte_949C:	dc.b 1
0000AF51 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AF56 01                         byte_94A2:	dc.b 1
0000AF57 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AF5C 01                         byte_94A8:	dc.b 1
0000AF5D FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AF62                            		even
0000AF62                            		even
0000AF62                            
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62                            ; Sprite mappings - points that	appear when you	destroy	something
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62                            Map_obj29:
0000AF62                            	include "_maps\obj29.asm"
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62                            ; Sprite mappings - points that	appear when you	destroy	something
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000AF66 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AF6A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AF6E 0000                       		dc.w byte_94E5-Map_obj29
0000AF70 01                         byte_94BC:	dc.b 1
0000AF71 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AF76 01                         byte_94C2:	dc.b 1
0000AF77 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AF7C 01                         byte_94C8:	dc.b 1
0000AF7D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AF82 01                         byte_94CE:	dc.b 1
0000AF83 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AF88 01                         byte_94D4:	dc.b 1
0000AF89 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AF8E 02                         byte_94DA:	dc.b 2
0000AF8F FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AF94 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AF99 02                         byte_94E5:	dc.b 2
0000AF9A FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AF9F FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AFA4                            		even
0000AFA4                            		even
0000AFA4                            
0000AFA4                            ; ===========================================================================
0000AFA4                            ; ---------------------------------------------------------------------------
0000AFA4                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AFA4                            ; ---------------------------------------------------------------------------
0000AFA4                            
0000AFA4                            Obj1F:					; XREF: Obj_Index
0000AFA4 7000                       		moveq	#0,d0
0000AFA6 1028 0024                  		move.b	$24(a0),d0
0000AFAA 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AFAE 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AFB2                            ; ===========================================================================
0000AFB2 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AFB4 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AFB6 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AFB8 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AFBA 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AFBC                            ; ===========================================================================
0000AFBC                            
0000AFBC                            Obj1F_Main:				; XREF: Obj1F_Index
0000AFBC 117C 0010 0016             		move.b	#$10,$16(a0)
0000AFC2 117C 0008 0017             		move.b	#8,$17(a0)
0000AFC8 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AFD0 317C 0400 0002             		move.w	#$400,2(a0)
0000AFD6 117C 0004 0001             		move.b	#4,1(a0)
0000AFDC 117C 0003 0018             		move.b	#3,$18(a0)
0000AFE2 117C 0006 0020             		move.b	#6,$20(a0)
0000AFE8 117C 0015 0019             		move.b	#$15,$19(a0)
0000AFEE 6100 0000                  		bsr.w	ObjectFall
0000AFF2 4EB9 0000 0000             		jsr	ObjHitFloor
0000AFF8 4A41                       		tst.w	d1
0000AFFA 6A00                       		bpl.s	locret_955A
0000AFFC D368 000C                  		add.w	d1,$C(a0)
0000B000 1143 0026                  		move.b	d3,$26(a0)
0000B004 317C 0000 0012             		move.w	#0,$12(a0)
0000B00A 5428 0024                  		addq.b	#2,$24(a0)
0000B00E                            
0000B00E                            locret_955A:
0000B00E 4E75                       		rts	
0000B010                            ; ===========================================================================
0000B010                            
0000B010                            Obj1F_Action:				; XREF: Obj1F_Index
0000B010 7000                       		moveq	#0,d0
0000B012 1028 0025                  		move.b	$25(a0),d0
0000B016 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000B01A 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000B01E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000B024 6100 0000                  		bsr.w	AnimateSprite
0000B028 6000 0000                  		bra.w	MarkObjGone
0000B02C                            ; ===========================================================================
0000B02C 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000B02E 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000B030                            ; ===========================================================================
0000B030                            
0000B030                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000B030 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000B034 6A00                       		bpl.s	locret_95B6
0000B036 4A28 0001                  		tst.b	1(a0)
0000B03A 6A00                       		bpl.s	Obj1F_Move
0000B03C 0868 0001 0032             		bchg	#1,$32(a0)
0000B042 6600                       		bne.s	Obj1F_MakeFire
0000B044                            
0000B044                            Obj1F_Move:
0000B044 5428 0025                  		addq.b	#2,$25(a0)
0000B048 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000B04E 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000B054 6100 0000                  		bsr.w	Obj1F_SetAni
0000B058 5600                       		addq.b	#3,d0
0000B05A 1140 001C                  		move.b	d0,$1C(a0)
0000B05E 0868 0000 0022             		bchg	#0,$22(a0)
0000B064 6600                       		bne.s	locret_95B6
0000B066 4468 0010                  		neg.w	$10(a0)		; change direction
0000B06A                            
0000B06A                            locret_95B6:
0000B06A 4E75                       		rts	
0000B06C                            ; ===========================================================================
0000B06C                            
0000B06C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000B06C 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B072 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000B078 6100 0000                  		bsr.w	SingleObjLoad
0000B07C 6600                       		bne.s	Obj1F_MakeFire2
0000B07E 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000B082 137C 0006 0024             		move.b	#6,$24(a1)
0000B088 3368 0008 0008             		move.w	8(a0),8(a1)
0000B08E 0469 0010 0008             		subi.w	#$10,8(a1)
0000B094 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B09A 337C FF00 0010             		move.w	#-$100,$10(a1)
0000B0A0                            
0000B0A0                            Obj1F_MakeFire2:
0000B0A0 6100 0000                  		bsr.w	SingleObjLoad
0000B0A4 6600                       		bne.s	locret_9618
0000B0A6 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000B0AA 137C 0006 0024             		move.b	#6,$24(a1)
0000B0B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B0B6 0669 0010 0008             		addi.w	#$10,8(a1)
0000B0BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B0C2 337C 0100 0010             		move.w	#$100,$10(a1)
0000B0C8                            
0000B0C8                            locret_9618:
0000B0C8 4E75                       		rts	
0000B0CA                            ; ===========================================================================
0000B0CA                            
0000B0CA                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000B0CA 5368 0030                  		subq.w	#1,$30(a0)
0000B0CE 6B00                       		bmi.s	loc_966E
0000B0D0 6100 0000                  		bsr.w	SpeedToPos
0000B0D4 0868 0000 0032             		bchg	#0,$32(a0)
0000B0DA 6600                       		bne.s	loc_9654
0000B0DC 3628 0008                  		move.w	8(a0),d3
0000B0E0 0643 0010                  		addi.w	#$10,d3
0000B0E4 0828 0000 0022             		btst	#0,$22(a0)
0000B0EA 6700                       		beq.s	loc_9640
0000B0EC 0443 0020                  		subi.w	#$20,d3
0000B0F0                            
0000B0F0                            loc_9640:
0000B0F0 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B0F6 0C41 FFF8                  		cmpi.w	#-8,d1
0000B0FA 6D00                       		blt.s	loc_966E
0000B0FC 0C41 000C                  		cmpi.w	#$C,d1
0000B100 6C00                       		bge.s	loc_966E
0000B102 4E75                       		rts	
0000B104                            ; ===========================================================================
0000B104                            
0000B104                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000B104 4EB9 0000 0000             		jsr	ObjHitFloor
0000B10A D368 000C                  		add.w	d1,$C(a0)
0000B10E 1143 0026                  		move.b	d3,$26(a0)
0000B112 6100 0000                  		bsr.w	Obj1F_SetAni
0000B116 5600                       		addq.b	#3,d0
0000B118 1140 001C                  		move.b	d0,$1C(a0)
0000B11C 4E75                       		rts	
0000B11E                            ; ===========================================================================
0000B11E                            
0000B11E                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000B11E 5528 0025                  		subq.b	#2,$25(a0)
0000B122 317C 003B 0030             		move.w	#59,$30(a0)
0000B128 317C 0000 0010             		move.w	#0,$10(a0)
0000B12E 6100 0000                  		bsr.w	Obj1F_SetAni
0000B132 1140 001C                  		move.b	d0,$1C(a0)
0000B136 4E75                       		rts	
0000B138                            ; ---------------------------------------------------------------------------
0000B138                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B138                            ; ---------------------------------------------------------------------------
0000B138                            
0000B138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B138                            
0000B138                            
0000B138                            Obj1F_SetAni:				; XREF: loc_966E
0000B138 7000                       		moveq	#0,d0
0000B13A 1628 0026                  		move.b	$26(a0),d3
0000B13E 6B00                       		bmi.s	loc_96A4
0000B140 0C03 0006                  		cmpi.b	#6,d3
0000B144 6500                       		bcs.s	locret_96A2
0000B146 7001                       		moveq	#1,d0
0000B148 0828 0000 0022             		btst	#0,$22(a0)
0000B14E 6600                       		bne.s	locret_96A2
0000B150 7002                       		moveq	#2,d0
0000B152                            
0000B152                            locret_96A2:
0000B152 4E75                       		rts	
0000B154                            ; ===========================================================================
0000B154                            
0000B154                            loc_96A4:				; XREF: Obj1F_SetAni
0000B154 0C03 00FA                  		cmpi.b	#-6,d3
0000B158 6200                       		bhi.s	locret_96B6
0000B15A 7002                       		moveq	#2,d0
0000B15C 0828 0000 0022             		btst	#0,$22(a0)
0000B162 6600                       		bne.s	locret_96B6
0000B164 7001                       		moveq	#1,d0
0000B166                            
0000B166                            locret_96B6:
0000B166 4E75                       		rts	
0000B168                            ; End of function Obj1F_SetAni
0000B168                            
0000B168                            ; ===========================================================================
0000B168                            
0000B168                            Obj1F_Delete:				; XREF: Obj1F_Index
0000B168 6100 0000                  		bsr.w	DeleteObject
0000B16C 4E75                       		rts	
0000B16E                            ; ===========================================================================
0000B16E                            ; ---------------------------------------------------------------------------
0000B16E                            ; Sub-object - missile that the	Crabmeat throws
0000B16E                            ; ---------------------------------------------------------------------------
0000B16E                            
0000B16E                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000B16E 5428 0024                  		addq.b	#2,$24(a0)
0000B172 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000B17A 317C 0400 0002             		move.w	#$400,2(a0)
0000B180 117C 0004 0001             		move.b	#4,1(a0)
0000B186 117C 0003 0018             		move.b	#3,$18(a0)
0000B18C 117C 0087 0020             		move.b	#$87,$20(a0)
0000B192 117C 0008 0019             		move.b	#8,$19(a0)
0000B198 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B19E 117C 0007 001C             		move.b	#7,$1C(a0)
0000B1A4                            
0000B1A4                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000B1A4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000B1AA 6100 0000                  		bsr.w	AnimateSprite
0000B1AE 6100 0000                  		bsr.w	ObjectFall
0000B1B2 6100 0000                  		bsr.w	DisplaySprite
0000B1B6 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B1BA 0640 00E0                  		addi.w	#$E0,d0
0000B1BE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B1C2 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000B1C4 4E75                       		rts	
0000B1C6                            ; ===========================================================================
0000B1C6                            
0000B1C6                            Obj1F_Delete2:
0000B1C6 6000 0000                  		bra.w	DeleteObject
0000B1CA                            ; ===========================================================================
0000B1CA                            Ani_obj1F:
0000B1CA                            	include "_anim\obj1F.asm"
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA                            ; Animation script - Crabmeat enemy
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000B1D0 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000B1D6 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000B1DA 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000B1DE 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000B1E2 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000B1E6 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000B1EC 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000B1F2 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000B1F8 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000B1FC 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000B200                            		even
0000B200                            		even
0000B200                            
0000B200                            ; ---------------------------------------------------------------------------
0000B200                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B200                            ; ---------------------------------------------------------------------------
0000B200                            Map_obj1F:
0000B200                            	include "_maps\obj1F.asm"
0000B200                            ; ---------------------------------------------------------------------------
0000B200                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B200                            ; ---------------------------------------------------------------------------
0000B200 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000B204 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000B208 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000B20C 0000                       		dc.w byte_97D7-Map_obj1F
0000B20E 04                         byte_975E:	dc.b 4
0000B20F F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000B214 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B219 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B21E 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B223 04                         byte_9773:	dc.b 4
0000B224 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000B229 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B22E 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B233 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B238 04                         byte_9788:	dc.b 4
0000B239 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000B23E EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B243 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B248 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B24D 04                         byte_979D:	dc.b 4
0000B24E EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000B253 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B258 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B25D FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B262 06                         byte_97B2:	dc.b 6
0000B263 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000B268 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B26D F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B272 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B277 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B27C 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B281 01                         byte_97D1:	dc.b 1
0000B282 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000B287 01                         byte_97D7:	dc.b 1
0000B288 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000B28E 00                         		even
0000B28E 00                         		even
0000B28E                            
0000B28E                            ; ===========================================================================
0000B28E                            ; ---------------------------------------------------------------------------
0000B28E                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B28E                            ; ---------------------------------------------------------------------------
0000B28E                            
0000B28E                            Obj22:					; XREF: Obj_Index
0000B28E 7000                       		moveq	#0,d0
0000B290 1028 0024                  		move.b	$24(a0),d0
0000B294 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000B298 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000B29C                            ; ===========================================================================
0000B29C 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000B29E 0000                       		dc.w Obj22_Action-Obj22_Index
0000B2A0 0000                       		dc.w Obj22_Delete-Obj22_Index
0000B2A2                            ; ===========================================================================
0000B2A2                            
0000B2A2                            Obj22_Main:				; XREF: Obj22_Index
0000B2A2 5428 0024                  		addq.b	#2,$24(a0)
0000B2A6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000B2AE 317C 0444 0002             		move.w	#$444,2(a0)
0000B2B4 117C 0004 0001             		move.b	#4,1(a0)
0000B2BA 117C 0003 0018             		move.b	#3,$18(a0)
0000B2C0 117C 0008 0020             		move.b	#8,$20(a0)
0000B2C6 117C 0018 0019             		move.b	#$18,$19(a0)
0000B2CC                            
0000B2CC                            Obj22_Action:				; XREF: Obj22_Index
0000B2CC 7000                       		moveq	#0,d0
0000B2CE 1028 0025                  		move.b	$25(a0),d0
0000B2D2 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000B2D6 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000B2DA 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000B2E0 6100 0000                  		bsr.w	AnimateSprite
0000B2E4 6000 0000                  		bra.w	MarkObjGone
0000B2E8                            ; ===========================================================================
0000B2E8 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000B2EA 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000B2EC                            ; ===========================================================================
0000B2EC                            
0000B2EC                            Obj22_Move:				; XREF: Obj22_Index2
0000B2EC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2F0 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B2F2 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B2F8 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000B2FA 5428 0025                  		addq.b	#2,$25(a0)
0000B2FE 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000B304 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000B30A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000B310 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B316 6600                       		bne.s	locret_986C	; if not, branch
0000B318 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B31C                            
0000B31C                            locret_986C:
0000B31C 4E75                       		rts	
0000B31E                            ; ===========================================================================
0000B31E                            
0000B31E                            Obj22_Fire:				; XREF: Obj22_Move
0000B31E 6100 0000                  		bsr.w	SingleObjLoad
0000B322 6600                       		bne.s	locret_98D0
0000B324 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000B328 3368 0008 0008             		move.w	8(a0),8(a1)
0000B32E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B334 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000B33A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000B340 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000B346 303C 0018                  		move.w	#$18,d0
0000B34A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B350 6600                       		bne.s	loc_98AA	; if not, branch
0000B352 4440                       		neg.w	d0
0000B354 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000B358                            
0000B358                            loc_98AA:
0000B358 D169 0008                  		add.w	d0,8(a1)
0000B35C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000B362 337C 000E 0032             		move.w	#$E,$32(a1)
0000B368 2348 003C                  		move.l	a0,$3C(a1)
0000B36C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000B372 317C 003B 0032             		move.w	#$3B,$32(a0)
0000B378 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B37E                            
0000B37E                            locret_98D0:
0000B37E 4E75                       		rts	
0000B380                            ; ===========================================================================
0000B380                            
0000B380                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000B380 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B384 6B00                       		bmi.s	Obj22_ChgDir
0000B386 6100 0000                  		bsr.w	SpeedToPos
0000B38A 4A28 0034                  		tst.b	$34(a0)
0000B38E 6600                       		bne.s	locret_992A
0000B390 3038 D008                  		move.w	($FFFFD008).w,d0
0000B394 9068 0008                  		sub.w	8(a0),d0
0000B398 6A00                       		bpl.s	Obj22_SetNrSonic
0000B39A 4440                       		neg.w	d0
0000B39C                            
0000B39C                            Obj22_SetNrSonic:
0000B39C 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B3A0 6400                       		bcc.s	locret_992A	; if not, branch
0000B3A2 4A28 0001                  		tst.b	1(a0)
0000B3A6 6A00                       		bpl.s	locret_992A
0000B3A8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B3AE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B3B4 6000                       		bra.s	Obj22_Stop
0000B3B6                            ; ===========================================================================
0000B3B6                            
0000B3B6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000B3B6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B3BC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B3C2 317C 003B 0032             		move.w	#59,$32(a0)
0000B3C8                            
0000B3C8                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000B3C8 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000B3CC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B3D2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B3D8                            
0000B3D8                            locret_992A:
0000B3D8 4E75                       		rts	
0000B3DA                            ; ===========================================================================
0000B3DA                            
0000B3DA                            Obj22_Delete:				; XREF: Obj22_Index
0000B3DA 6100 0000                  		bsr.w	DeleteObject
0000B3DE 4E75                       		rts	
0000B3E0                            ; ===========================================================================
0000B3E0                            ; ---------------------------------------------------------------------------
0000B3E0                            ; Object 23 - missile that Buzz	Bomber throws
0000B3E0                            ; ---------------------------------------------------------------------------
0000B3E0                            
0000B3E0                            Obj23:					; XREF: Obj_Index
0000B3E0 7000                       		moveq	#0,d0
0000B3E2 1028 0024                  		move.b	$24(a0),d0
0000B3E6 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000B3EA 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000B3EE                            ; ===========================================================================
0000B3EE 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000B3F0 0000                       		dc.w Obj23_Animate-Obj23_Index
0000B3F2 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000B3F4 0000                       		dc.w Obj23_Delete-Obj23_Index
0000B3F6 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000B3F8                            ; ===========================================================================
0000B3F8                            
0000B3F8                            Obj23_Main:				; XREF: Obj23_Index
0000B3F8 5368 0032                  		subq.w	#1,$32(a0)
0000B3FC 6A00                       		bpl.s	Obj23_ChkCancel
0000B3FE 5428 0024                  		addq.b	#2,$24(a0)
0000B402 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000B40A 317C 2444 0002             		move.w	#$2444,2(a0)
0000B410 117C 0004 0001             		move.b	#4,1(a0)
0000B416 117C 0003 0018             		move.b	#3,$18(a0)
0000B41C 117C 0008 0019             		move.b	#8,$19(a0)
0000B422 0228 0003 0022             		andi.b	#3,$22(a0)
0000B428 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000B42C 6700                       		beq.s	Obj23_Animate	; if not, branch
0000B42E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000B434 117C 0087 0020             		move.b	#$87,$20(a0)
0000B43A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B440 6000                       		bra.s	Obj23_Animate2
0000B442                            ; ===========================================================================
0000B442                            
0000B442                            Obj23_Animate:				; XREF: Obj23_Index
0000B442 6100                       		bsr.s	Obj23_ChkCancel
0000B444 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B44A 6100 0000                  		bsr.w	AnimateSprite
0000B44E 6000 0000                  		bra.w	DisplaySprite
0000B452                            ; ---------------------------------------------------------------------------
0000B452                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B452                            ; destroyed, and if it has, then cancel	the missile
0000B452                            ; ---------------------------------------------------------------------------
0000B452                            
0000B452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B452                            
0000B452                            
0000B452                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000B452 2268 003C                  		movea.l	$3C(a0),a1
0000B456 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000B45A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000B45C 4E75                       		rts	
0000B45E                            ; End of function Obj23_ChkCancel
0000B45E                            
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000B45E 0828 0007 0022             		btst	#7,$22(a0)
0000B464 6600                       		bne.s	Obj23_Explode
0000B466 117C 0087 0020             		move.b	#$87,$20(a0)
0000B46C 117C 0001 001C             		move.b	#1,$1C(a0)
0000B472 6100 0000                  		bsr.w	SpeedToPos
0000B476 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B47C 6100 0000                  		bsr.w	AnimateSprite
0000B480 6100 0000                  		bsr.w	DisplaySprite
0000B484 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B488 0640 00E0                  		addi.w	#$E0,d0
0000B48C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B490 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000B492 4E75                       		rts	
0000B494                            ; ===========================================================================
0000B494                            
0000B494                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000B494 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000B498 117C 0000 0024             		move.b	#0,$24(a0)
0000B49E 6000 F30A                  		bra.w	Obj24
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            Obj23_Delete:				; XREF: Obj23_Index
0000B4A2 6100 0000                  		bsr.w	DeleteObject
0000B4A6 4E75                       		rts	
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            Obj23_FromNewt:				; XREF: Obj23_Index
0000B4A8 4A28 0001                  		tst.b	1(a0)
0000B4AC 6AF4                       		bpl.s	Obj23_Delete
0000B4AE 6100 0000                  		bsr.w	SpeedToPos
0000B4B2                            
0000B4B2                            Obj23_Animate2:				; XREF: Obj23_Main
0000B4B2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B4B8 6100 0000                  		bsr.w	AnimateSprite
0000B4BC 6100 0000                  		bsr.w	DisplaySprite
0000B4C0 4E75                       		rts	
0000B4C2                            ; ===========================================================================
0000B4C2                            Ani_obj22:
0000B4C2                            	include "_anim\obj22.asm"
0000B4C2                            ; ---------------------------------------------------------------------------
0000B4C2                            ; Animation script - Buzz Bomber enemy
0000B4C2                            ; ---------------------------------------------------------------------------
0000B4C2 0000                       		dc.w byte_9A1E-Ani_obj22
0000B4C4 0000                       		dc.w byte_9A22-Ani_obj22
0000B4C6 0000                       		dc.w byte_9A26-Ani_obj22
0000B4C8 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B4CC 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B4D0 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000B4D4                            		even
0000B4D4                            		even
0000B4D4                            
0000B4D4                            Ani_obj23:
0000B4D4                            	include "_anim\obj23.asm"
0000B4D4                            ; ---------------------------------------------------------------------------
0000B4D4                            ; Animation script - missile that Buzz Bomber throws
0000B4D4                            ; ---------------------------------------------------------------------------
0000B4D4 0000                       		dc.w byte_9A2E-Ani_obj23
0000B4D6 0000                       		dc.w byte_9A32-Ani_obj23
0000B4D8 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000B4DC 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000B4E0                            		even
0000B4E0                            		even
0000B4E0                            
0000B4E0                            ; ---------------------------------------------------------------------------
0000B4E0                            ; Sprite mappings - Buzz Bomber	enemy
0000B4E0                            ; ---------------------------------------------------------------------------
0000B4E0                            Map_obj22:
0000B4E0                            	include "_maps\obj22.asm"
0000B4E0                            ; ---------------------------------------------------------------------------
0000B4E0                            ; Sprite mappings - Buzz Bomber	enemy
0000B4E0                            ; ---------------------------------------------------------------------------
0000B4E0 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000B4E4 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000B4E8 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000B4EC 06                         byte_9A42:	dc.b 6
0000B4ED F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B4F2 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B4F7 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B4FC 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B501 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B506 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B50B 06                         byte_9A61:	dc.b 6
0000B50C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B511 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B516 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B51B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B520 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B525 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B52A 07                         byte_9A80:	dc.b 7
0000B52B 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000B530 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B535 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B53A 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B53F 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B544 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B549 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B54E 07                         byte_9AA4:	dc.b 7
0000B54F 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000B554 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B559 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B55E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B563 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B568 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B56D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B572 06                         byte_9AC8:	dc.b 6
0000B573 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B578 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B57D 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B582 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B587 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B58C F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B591 04                         byte_9AE7:	dc.b 4
0000B592 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B597 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B59C 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B5A1 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B5A6 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B5AB F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B5B0                            		even
0000B5B0                            		even
0000B5B0                            
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            ; Sprite mappings - missile that Buzz Bomber throws
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            Map_obj23:
0000B5B0                            	include "_maps\obj23.asm"
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            ; Sprite mappings - missile that Buzz Bomber throws
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B5B4 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B5B8 01                         byte_9B0E:	dc.b 1
0000B5B9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B5BE 01                         byte_9B14:	dc.b 1
0000B5BF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B5C4 01                         byte_9B1A:	dc.b 1
0000B5C5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B5CA 01                         byte_9B20:	dc.b 1
0000B5CB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B5D0                            		even
0000B5D0                            		even
0000B5D0                            
0000B5D0                            ; ===========================================================================
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            ; Object 25 - rings
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            
0000B5D0                            Obj25:					; XREF: Obj_Index
0000B5D0 7000                       		moveq	#0,d0
0000B5D2 1028 0024                  		move.b	$24(a0),d0
0000B5D6 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B5DA 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B5DE                            ; ===========================================================================
0000B5DE 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B5E0 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B5E2 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B5E4 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B5E6 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B5E8                            ; ---------------------------------------------------------------------------
0000B5E8                            ; Distances between rings (format: horizontal, vertical)
0000B5E8                            ; ---------------------------------------------------------------------------
0000B5E8 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000B5EA 1800                       		dc.b $18, 0		; horizontal normal
0000B5EC 2000                       		dc.b $20, 0		; horizontal wide
0000B5EE 0010                       		dc.b 0,	$10		; vertical tight
0000B5F0 0018                       		dc.b 0,	$18		; vertical normal
0000B5F2 0020                       		dc.b 0,	$20		; vertical wide
0000B5F4 1010                       		dc.b $10, $10		; diagonal
0000B5F6 1818                       		dc.b $18, $18
0000B5F8 2020                       		dc.b $20, $20
0000B5FA F010                       		dc.b $F0, $10
0000B5FC E818                       		dc.b $E8, $18
0000B5FE E020                       		dc.b $E0, $20
0000B600 1008                       		dc.b $10, 8
0000B602 1810                       		dc.b $18, $10
0000B604 F008                       		dc.b $F0, 8
0000B606 E810                       		dc.b $E8, $10
0000B608                            ; ===========================================================================
0000B608                            
0000B608                            Obj25_Main:				; XREF: Obj25_Index
0000B608 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B60C 7000                       		moveq	#0,d0
0000B60E 1028 0023                  		move.b	$23(a0),d0
0000B612 45F2 0002                  		lea	2(a2,d0.w),a2
0000B616 1812                       		move.b	(a2),d4
0000B618 1228 0028                  		move.b	$28(a0),d1
0000B61C 1001                       		move.b	d1,d0
0000B61E 0241 0007                  		andi.w	#7,d1
0000B622 0C41 0007                  		cmpi.w	#7,d1
0000B626 6600                       		bne.s	loc_9B80
0000B628 7206                       		moveq	#6,d1
0000B62A                            
0000B62A                            loc_9B80:
0000B62A 4841                       		swap	d1
0000B62C 323C 0000                  		move.w	#0,d1
0000B630 E808                       		lsr.b	#4,d0
0000B632 D040                       		add.w	d0,d0
0000B634 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000B638 4885                       		ext.w	d5
0000B63A 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000B63E 4886                       		ext.w	d6
0000B640 2248                       		movea.l	a0,a1
0000B642 3428 0008                  		move.w	8(a0),d2
0000B646 3628 000C                  		move.w	$C(a0),d3
0000B64A E20C                       		lsr.b	#1,d4
0000B64C 6500                       		bcs.s	loc_9C02
0000B64E 0892 0007                  		bclr	#7,(a2)
0000B652 6000                       		bra.s	loc_9BBA
0000B654                            ; ===========================================================================
0000B654                            
0000B654                            Obj25_MakeRings:
0000B654 4841                       		swap	d1
0000B656 E20C                       		lsr.b	#1,d4
0000B658 6500                       		bcs.s	loc_9C02
0000B65A 0892 0007                  		bclr	#7,(a2)
0000B65E 6100 0000                  		bsr.w	SingleObjLoad
0000B662 6600                       		bne.s	loc_9C0E
0000B664                            
0000B664                            loc_9BBA:				; XREF: Obj25_Main
0000B664 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000B668 5429 0024                  		addq.b	#2,$24(a1)
0000B66C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000B670 3368 0008 0032             		move.w	8(a0),$32(a1)
0000B676 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000B67A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B682 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B688 137C 0004 0001             		move.b	#4,1(a1)
0000B68E 137C 0002 0018             		move.b	#2,$18(a1)
0000B694 137C 0047 0020             		move.b	#$47,$20(a1)
0000B69A 137C 0008 0019             		move.b	#8,$19(a1)
0000B6A0 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000B6A6 1341 0034                  		move.b	d1,$34(a1)
0000B6AA                            
0000B6AA                            loc_9C02:
0000B6AA 5241                       		addq.w	#1,d1
0000B6AC D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B6AE D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B6B0 4841                       		swap	d1
0000B6B2 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000B6B6                            
0000B6B6                            loc_9C0E:
0000B6B6 0812 0000                  		btst	#0,(a2)
0000B6BA 6600 0000                  		bne.w	DeleteObject
0000B6BE                            
0000B6BE                            Obj25_Animate:				; XREF: Obj25_Index
0000B6BE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000B6C4 6100 0000                  		bsr.w	DisplaySprite
0000B6C8 3028 0032                  		move.w	$32(a0),d0
0000B6CC 0240 FF80                  		andi.w	#$FF80,d0
0000B6D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000B6D4 0441 0080                  		subi.w	#$80,d1
0000B6D8 0241 FF80                  		andi.w	#$FF80,d1
0000B6DC 9041                       		sub.w	d1,d0
0000B6DE 0C40 0280                  		cmpi.w	#$280,d0
0000B6E2 6200                       		bhi.s	Obj25_Delete
0000B6E4 4E75                       		rts	
0000B6E6                            ; ===========================================================================
0000B6E6                            
0000B6E6                            Obj25_Collect:				; XREF: Obj25_Index
0000B6E6 5428 0024                  		addq.b	#2,$24(a0)
0000B6EA 117C 0000 0020             		move.b	#0,$20(a0)
0000B6F0 117C 0001 0018             		move.b	#1,$18(a0)
0000B6F6 6100 0000                  		bsr.w	CollectRing
0000B6FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B6FE 7000                       		moveq	#0,d0
0000B700 1028 0023                  		move.b	$23(a0),d0
0000B704 1228 0034                  		move.b	$34(a0),d1
0000B708 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B70C                            
0000B70C                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B70C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B712 6100 0000                  		bsr.w	AnimateSprite
0000B716 6000 0000                  		bra.w	DisplaySprite
0000B71A                            ; ===========================================================================
0000B71A                            
0000B71A                            Obj25_Delete:				; XREF: Obj25_Index
0000B71A 6000 0000                  		bra.w	DeleteObject
0000B71E                            
0000B71E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B71E                            
0000B71E                            
0000B71E                            CollectRing:				; XREF: Obj25_Collect
0000B71E 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B722 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B728 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B72C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B732 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B734 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B73A 6700                       		beq.s	loc_9CA4
0000B73C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B742 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B744 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B74A 6600                       		bne.s	Obj25_PlaySnd
0000B74C                            
0000B74C                            loc_9CA4:
0000B74C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B750 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B754 303C 0088                  		move.w	#$88,d0		; play extra life music
0000B758                            
0000B758                            Obj25_PlaySnd:
0000B758 4EF9 0000 12CE             		jmp	(PlaySound_Special).l
0000B75E                            ; End of function CollectRing
0000B75E                            
0000B75E                            ; ===========================================================================
0000B75E                            ; ---------------------------------------------------------------------------
0000B75E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B75E                            ; ---------------------------------------------------------------------------
0000B75E                            
0000B75E                            Obj37:					; XREF: Obj_Index
0000B75E 7000                       		moveq	#0,d0
0000B760 1028 0024                  		move.b	$24(a0),d0
0000B764 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B768 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B76C                            ; ===========================================================================
0000B76C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B76E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B770 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B772 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B774 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B776                            ; ===========================================================================
0000B776                            
0000B776                            Obj37_CountRings:			; XREF: Obj37_Index
0000B776 2248                       		movea.l	a0,a1
0000B778 7A00                       		moveq	#0,d5
0000B77A 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B77E 7020                       		moveq	#32,d0
0000B780 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B782 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B784 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B786                            
0000B786                            loc_9CDE:
0000B786 5345                       		subq.w	#1,d5
0000B788 383C 0288                  		move.w	#$288,d4
0000B78C 6000                       		bra.s	Obj37_MakeRings
0000B78E                            ; ===========================================================================
0000B78E                            
0000B78E                            Obj37_Loop:
0000B78E 6100 0000                  		bsr.w	SingleObjLoad
0000B792 6600 0000                  		bne.w	Obj37_ResetCounter
0000B796                            
0000B796                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B796 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B79A 5429 0024                  		addq.b	#2,$24(a1)
0000B79E 137C 0008 0016             		move.b	#8,$16(a1)
0000B7A4 137C 0008 0017             		move.b	#8,$17(a1)
0000B7AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B7B6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B7BE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B7C4 137C 0004 0001             		move.b	#4,1(a1)
0000B7CA 137C 0003 0018             		move.b	#3,$18(a1)
0000B7D0 137C 0047 0020             		move.b	#$47,$20(a1)
0000B7D6 137C 0008 0019             		move.b	#8,$19(a1)
0000B7DC 4A44                       		tst.w	d4
0000B7DE 6B00                       		bmi.s	loc_9D62
0000B7E0 3004                       		move.w	d4,d0
0000B7E2 4EB8 2B7C                  		jsr	CalcSine
0000B7E6 3404                       		move.w	d4,d2
0000B7E8 E04A                       		lsr.w	#8,d2
0000B7EA 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B7EE 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B7F0 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B7F4 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B7F8 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B7FA E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B7FC E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B7FE                            
0000B7FE                            @skiphalvingvel:
0000B7FE E560                       		asl.w	d2,d0
0000B800 E561                       		asl.w	d2,d1
0000B802 3400                       		move.w	d0,d2
0000B804 3601                       		move.w	d1,d3
0000B806 0604 0010                  		addi.b	#$10,d4
0000B80A 6400                       		bcc.s	loc_9D62
0000B80C 0444 0080                  		subi.w	#$80,d4
0000B810 6400                       		bcc.s	loc_9D62
0000B812 383C 0288                  		move.w	#$288,d4
0000B816                            
0000B816                            loc_9D62:
0000B816 3342 0010                  		move.w	d2,$10(a1)
0000B81A 3343 0012                  		move.w	d3,$12(a1)
0000B81E 4442                       		neg.w	d2
0000B820 4444                       		neg.w	d4
0000B822 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B826                            
0000B826                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B826 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B82C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B832 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B838 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B83A 1140 001F                          move.b  d0,$1F(a0)       ; Move d0 to new timer
0000B83E 11C0 FEC6                          move.b  d0,($FFFFFEC6).w      ; Move d0 to old timer (for animated purposes)
0000B842 303C 00C6                  		move.w	#$C6,d0
0000B846 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B84C                            
0000B84C                            Obj37_Bounce:				; XREF: Obj37_Index
0000B84C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B852 6100 0000                  		bsr.w	SpeedToPos
0000B856 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B85C 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B860 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B862 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B866 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B86A 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B86C 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B872                            
0000B872                            @skipbounceslow:
0000B872 6B00                       		bmi.s	Obj37_ChkDel
0000B874 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B878 D007                       		add.b	d7,d0
0000B87A 0200 0003                  		andi.b	#3,d0
0000B87E 6600                       		bne.s	Obj37_ChkDel
0000B880 4EB9 0000 0000             		jsr	ObjHitFloor
0000B886 4A41                       		tst.w	d1
0000B888 6A00                       		bpl.s	Obj37_ChkDel
0000B88A D368 000C                  		add.w	d1,$C(a0)
0000B88E 3028 0012                  		move.w	$12(a0),d0
0000B892 E440                       		asr.w	#2,d0
0000B894 9168 0012                  		sub.w	d0,$12(a0)
0000B898 4468 0012                  		neg.w	$12(a0)
0000B89C                            
0000B89C                            Obj37_ChkDel:
0000B89C 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B8A0 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B8A4 0C78 FF00 F72C                     cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B8AA 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B8AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B8B2 0640 00E0                  		addi.w	#$E0,d0
0000B8B6 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000B8BA 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000B8BC                            ;Mercury Lost Rings Flash
0000B8BC 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000B8C2 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000B8C6 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000B8CC 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000B8D0 4E75                       		rts
0000B8D2                            ;end Lost Rings Flash
0000B8D2                            ; ===========================================================================
0000B8D2                            
0000B8D2                            Obj37_Collect:				; XREF: Obj37_Index
0000B8D2 5428 0024                  		addq.b	#2,$24(a0)
0000B8D6 117C 0000 0020             		move.b	#0,$20(a0)
0000B8DC 117C 0001 0018             		move.b	#1,$18(a0)
0000B8E2 6100 FE3A                  		bsr.w	CollectRing
0000B8E6                            
0000B8E6                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B8E6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B8EC 6100 0000                  		bsr.w	AnimateSprite
0000B8F0 6000 0000                  		bra.w	DisplaySprite
0000B8F4                            ; ===========================================================================
0000B8F4                            
0000B8F4                            Obj37_Delete:				; XREF: Obj37_Index
0000B8F4 6000 0000                  		bra.w	DeleteObject
0000B8F8                            ; ===========================================================================
0000B8F8                            ; ---------------------------------------------------------------------------
0000B8F8                            ; Object 4B - giant ring for entry to special stage
0000B8F8                            ; ---------------------------------------------------------------------------
0000B8F8                            
0000B8F8                            Obj4B:					; XREF: Obj_Index
0000B8F8 7000                       		moveq	#0,d0
0000B8FA 1028 0024                  		move.b	$24(a0),d0
0000B8FE 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B902 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B906                            ; ===========================================================================
0000B906 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B908 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B90A 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B90C 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B90E                            ; ===========================================================================
0000B90E                            
0000B90E                            Obj4B_Main:				; XREF: Obj4B_Index
0000B90E 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B916 317C 2400 0002             		move.w	#$2400,2(a0)
0000B91C 0028 0004 0001             		ori.b	#4,1(a0)
0000B922 117C 0040 0019             		move.b	#$40,$19(a0)
0000B928 4A28 0001                  		tst.b	1(a0)
0000B92C 6A00                       		bpl.s	Obj4B_Animate
0000B92E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B934 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B938 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B93E 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B940 4E75                       		rts	
0000B942                            ; ===========================================================================
0000B942                            
0000B942                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B942 5428 0024                  		addq.b	#2,$24(a0)
0000B946 117C 0002 0018             		move.b	#2,$18(a0)
0000B94C 117C 0052 0020             		move.b	#$52,$20(a0)
0000B952 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B958                            
0000B958                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B958 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B95E 3028 0008                  		move.w	8(a0),d0
0000B962 0240 FF80                  		andi.w	#$FF80,d0
0000B966 3238 F700                  		move.w	($FFFFF700).w,d1
0000B96A 0441 0080                  		subi.w	#$80,d1
0000B96E 0241 FF80                  		andi.w	#$FF80,d1
0000B972 9041                       		sub.w	d1,d0
0000B974 0C40 0280                  		cmpi.w	#$280,d0
0000B978 6200 0000                  		bhi.w	DeleteObject
0000B97C 6000 0000                  		bra.w	DisplaySprite
0000B980                            ; ===========================================================================
0000B980                            
0000B980                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B980 5528 0024                  		subq.b	#2,$24(a0)
0000B984 117C 0000 0020             		move.b	#0,$20(a0)
0000B98A 6100 0000                  		bsr.w	SingleObjLoad
0000B98E 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B992 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B996 3368 0008 0008             		move.w	8(a0),8(a1)
0000B99C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B9A2 2348 003C                  		move.l	a0,$3C(a1)
0000B9A6 3038 D008                  		move.w	($FFFFD008).w,d0
0000B9AA B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B9AE 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B9B0 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B9B6                            
0000B9B6                            Obj4B_PlaySnd:
0000B9B6 303C 00C3                  		move.w	#$C3,d0
0000B9BA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B9C0 6096                       		bra.s	Obj4B_Animate
0000B9C2                            ; ===========================================================================
0000B9C2                            
0000B9C2                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B9C2 6000 0000                  		bra.w	DeleteObject
0000B9C6                            ; ===========================================================================
0000B9C6                            ; ---------------------------------------------------------------------------
0000B9C6                            ; Object 7C - flash effect when	you collect the	giant ring
0000B9C6                            ; ---------------------------------------------------------------------------
0000B9C6                            
0000B9C6                            Obj7C:					; XREF: Obj_Index
0000B9C6 7000                       		moveq	#0,d0
0000B9C8 1028 0024                  		move.b	$24(a0),d0
0000B9CC 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B9D0 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B9D4                            ; ===========================================================================
0000B9D4 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B9D6 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B9D8 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B9DA                            ; ===========================================================================
0000B9DA                            
0000B9DA                            Obj7C_Main:				; XREF: Obj7C_Index
0000B9DA 5428 0024                  		addq.b	#2,$24(a0)
0000B9DE 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B9E6 317C 2462 0002             		move.w	#$2462,2(a0)
0000B9EC 0028 0004 0001             		ori.b	#4,1(a0)
0000B9F2 117C 0000 0018             		move.b	#0,$18(a0)
0000B9F8 117C 0020 0019             		move.b	#$20,$19(a0)
0000B9FE 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000BA04                            
0000BA04                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000BA04 6100                       		bsr.s	Obj7C_Collect
0000BA06 3028 0008                  		move.w	8(a0),d0
0000BA0A 0240 FF80                  		andi.w	#$FF80,d0
0000BA0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA12 0441 0080                  		subi.w	#$80,d1
0000BA16 0241 FF80                  		andi.w	#$FF80,d1
0000BA1A 9041                       		sub.w	d1,d0
0000BA1C 0C40 0280                  		cmpi.w	#$280,d0
0000BA20 6200 0000                  		bhi.w	DeleteObject
0000BA24 6000 0000                  		bra.w	DisplaySprite
0000BA28                            
0000BA28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA28                            
0000BA28                            
0000BA28                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000BA28 5328 001E                  		subq.b	#1,$1E(a0)
0000BA2C 6A00                       		bpl.s	locret_9F76
0000BA2E 117C 0001 001E             		move.b	#1,$1E(a0)
0000BA34 5228 001A                  		addq.b	#1,$1A(a0)
0000BA38 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000BA3E 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000BA40 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000BA46 6600                       		bne.s	locret_9F76	; if not, branch
0000BA48 2268 003C                  		movea.l	$3C(a0),a1
0000BA4C 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000BA52 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000BA58 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000BA5E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000BA62 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000BA66                            
0000BA66                            locret_9F76:
0000BA66 4E75                       		rts	
0000BA68                            ; ===========================================================================
0000BA68                            
0000BA68                            Obj7C_End:				; XREF: Obj7C_Collect
0000BA68 5428 0024                  		addq.b	#2,$24(a0)
0000BA6C 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000BA72 588F                       		addq.l	#4,sp
0000BA74 4E75                       		rts	
0000BA76                            ; End of function Obj7C_Collect
0000BA76                            
0000BA76                            ; ===========================================================================
0000BA76                            
0000BA76                            Obj7C_Delete:				; XREF: Obj7C_Index
0000BA76 6000 0000                  		bra.w	DeleteObject
0000BA7A                            ; ===========================================================================
0000BA7A                            Ani_obj25:
0000BA7A                            	include "_anim\obj25.asm"
0000BA7A                            ; ---------------------------------------------------------------------------
0000BA7A                            ; Animation script - ring
0000BA7A                            ; ---------------------------------------------------------------------------
0000BA7A 0000                       		dc.w byte_9F8C-Ani_obj25
0000BA7C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000BA82                            		even
0000BA82                            		even
0000BA82                            
0000BA82                            ; ---------------------------------------------------------------------------
0000BA82                            ; Sprite mappings - rings
0000BA82                            ; ---------------------------------------------------------------------------
0000BA82                            Map_obj25:
0000BA82                            	include "_maps\obj25.asm"
0000BA82                            ; ---------------------------------------------------------------------------
0000BA82                            ; Sprite mappings - rings
0000BA82                            ; ---------------------------------------------------------------------------
0000BA82 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000BA86 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000BA8A 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000BA8E 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000BA92 01                         byte_9FA2:	dc.b 1
0000BA93 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BA98 01                         byte_9FA8:	dc.b 1
0000BA99 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000BA9E 01                         byte_9FAE:	dc.b 1
0000BA9F F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000BAA4 01                         byte_9FB4:	dc.b 1
0000BAA5 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000BAAA 01                         byte_9FBA:	dc.b 1
0000BAAB F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000BAB0 01                         byte_9FC0:	dc.b 1
0000BAB1 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000BAB6 01                         byte_9FC6:	dc.b 1
0000BAB7 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000BABC 01                         byte_9FCC:	dc.b 1
0000BABD F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000BAC2                            		even
0000BAC2                            		even
0000BAC2                            
0000BAC2                            ; ---------------------------------------------------------------------------
0000BAC2                            ; Sprite mappings - giant ring
0000BAC2                            ; ---------------------------------------------------------------------------
0000BAC2                            Map_obj4B:
0000BAC2                            	include "_maps\obj4B.asm"
0000BAC2                            ; ---------------------------------------------------------------------------
0000BAC2                            ; Sprite mappings - giant ring
0000BAC2                            ; ---------------------------------------------------------------------------
0000BAC2 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000BAC6 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000BACA 0A                         byte_9FDA:	dc.b $A
0000BACB E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000BAD0 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BAD5 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BADA E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BADF F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BAE4 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BAE9 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BAEE 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BAF3 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BAF8 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BAFD 08                         byte_A00D:	dc.b 8
0000BAFE E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000BB03 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BB08 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BB0D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BB12 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BB17 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BB1C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BB21 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BB26 04                         byte_A036:	dc.b 4
0000BB27 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000BB2C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BB31 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BB36 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BB3B 08                         byte_A04B:	dc.b 8
0000BB3C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000BB41 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BB46 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BB4B F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BB50 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BB55 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BB5A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BB5F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BB64                            		even
0000BB64                            		even
0000BB64                            
0000BB64                            ; ---------------------------------------------------------------------------
0000BB64                            ; Sprite mappings - flash effect when you collect the giant ring
0000BB64                            ; ---------------------------------------------------------------------------
0000BB64                            Map_obj7C:
0000BB64                            	include "_maps\obj7C.asm"
0000BB64                            ; ---------------------------------------------------------------------------
0000BB64                            ; Sprite mappings - flash effect when you collect the giant ring
0000BB64                            ; ---------------------------------------------------------------------------
0000BB64 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000BB68 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000BB6C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000BB70 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000BB74 02                         byte_A084:	dc.b 2
0000BB75 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BB7A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BB7F 04                         byte_A08F:	dc.b 4
0000BB80 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BB85 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BB8A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BB8F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BB94 04                         byte_A0A4:	dc.b 4
0000BB95 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BB9A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BB9F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BBA4 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BBA9 04                         byte_A0B9:	dc.b 4
0000BBAA E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BBAF E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BBB4 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BBB9 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BBBE 04                         byte_A0CE:	dc.b 4
0000BBBF E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BBC4 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BBC9 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BBCE 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BBD3 04                         byte_A0E3:	dc.b 4
0000BBD4 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BBD9 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BBDE 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BBE3 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BBE8 02                         byte_A0F8:	dc.b 2
0000BBE9 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BBEE 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BBF3 04                         byte_A103:	dc.b 4
0000BBF4 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BBF9 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BBFE 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BC03 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BC08                            		even
0000BC08                            		even
0000BC08                            
0000BC08                            ; ===========================================================================
0000BC08                            ; ---------------------------------------------------------------------------
0000BC08                            ; Object 26 - monitors
0000BC08                            ; ---------------------------------------------------------------------------
0000BC08                            
0000BC08                            Obj26:					; XREF: Obj_Index
0000BC08 7000                       		moveq	#0,d0
0000BC0A 1028 0024                  		move.b	$24(a0),d0
0000BC0E 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000BC12 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000BC16                            ; ===========================================================================
0000BC16 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000BC18 0000                       		dc.w Obj26_Solid-Obj26_Index
0000BC1A 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000BC1C 0000                       		dc.w Obj26_Animate-Obj26_Index
0000BC1E 0000                       		dc.w Obj26_Display-Obj26_Index
0000BC20                            ; ===========================================================================
0000BC20                            
0000BC20                            Obj26_Main:				; XREF: Obj26_Index
0000BC20 5428 0024                  		addq.b	#2,$24(a0)
0000BC24 117C 000E 0016             		move.b	#$E,$16(a0)
0000BC2A 117C 000E 0017             		move.b	#$E,$17(a0)
0000BC30 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000BC38 317C 0680 0002             		move.w	#$680,2(a0)
0000BC3E 117C 0004 0001             		move.b	#4,1(a0)
0000BC44 117C 0003 0018             		move.b	#3,$18(a0)
0000BC4A 117C 000F 0019             		move.b	#$F,$19(a0)
0000BC50 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BC54 7000                       		moveq	#0,d0
0000BC56 1028 0023                  		move.b	$23(a0),d0
0000BC5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BC60 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BC66 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000BC68 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000BC6E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000BC74 4E75                       		rts	
0000BC76                            ; ===========================================================================
0000BC76                            
0000BC76                            Obj26_NotBroken:			; XREF: Obj26_Main
0000BC76 117C 0046 0020             		move.b	#$46,$20(a0)
0000BC7C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000BC82                            
0000BC82                            Obj26_Solid:				; XREF: Obj26_Index
0000BC82 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000BC86 6700                       		beq.s	loc_A1EC	; if not, branch
0000BC88 5500                       		subq.b	#2,d0
0000BC8A 6600                       		bne.s	Obj26_Fall
0000BC8C 7200                       		moveq	#0,d1
0000BC8E 1228 0019                  		move.b	$19(a0),d1
0000BC92 0641 000B                  		addi.w	#$B,d1
0000BC96 6100 D3F2                  		bsr.w	ExitPlatform
0000BC9A 0829 0003 0022             		btst	#3,$22(a1)
0000BCA0 6600 0000                  		bne.w	loc_A1BC
0000BCA4 4228 0025                  		clr.b	$25(a0)
0000BCA8 6000 0000                  		bra.w	Obj26_Animate
0000BCAC                            ; ===========================================================================
0000BCAC                            
0000BCAC                            loc_A1BC:				; XREF: Obj26_Solid
0000BCAC 363C 0010                  		move.w	#$10,d3
0000BCB0 3428 0008                  		move.w	8(a0),d2
0000BCB4 6100 D932                  		bsr.w	MvSonicOnPtfm
0000BCB8 6000 0000                  		bra.w	Obj26_Animate
0000BCBC                            ; ===========================================================================
0000BCBC                            
0000BCBC                            Obj26_Fall:				; XREF: Obj26_Solid
0000BCBC 6100 0000                  		bsr.w	ObjectFall
0000BCC0 4EB9 0000 0000             		jsr	ObjHitFloor
0000BCC6 4A41                       		tst.w	d1
0000BCC8 6A00 0000                  		bpl.w	Obj26_Animate
0000BCCC D368 000C                  		add.w	d1,$C(a0)
0000BCD0 4268 0012                  		clr.w	$12(a0)
0000BCD4 4228 0025                  		clr.b	$25(a0)
0000BCD8 6000 0000                  		bra.w	Obj26_Animate
0000BCDC                            ; ===========================================================================
0000BCDC                            
0000BCDC                            loc_A1EC:				; XREF: Obj26_Solid
0000BCDC 323C 001A                  		move.w	#$1A,d1
0000BCE0 343C 000F                  		move.w	#$F,d2
0000BCE4 6100 0000                  		bsr.w	Obj26_SolidSides
0000BCE8 6700 0000                  		beq.w	loc_A25C
0000BCEC 4A29 003A                  		tst.b	$3A(a1)
0000BCF0 6600                       		bne.s	loc_A25C
0000BCF2 4A41                       		tst.w	d1
0000BCF4 6A00                       		bpl.s	loc_A220
0000BCF6 9769 000C                  		sub.w	d3,$C(a1)
0000BCFA 6100 D27C                  		bsr.w	loc_74AE
0000BCFE 117C 0002 0025             		move.b	#2,$25(a0)
0000BD04 6000 0000                  		bra.w	Obj26_Animate
0000BD08                            ; ===========================================================================
0000BD08                            
0000BD08                            loc_A220:
0000BD08 4A40                       		tst.w	d0
0000BD0A 6700 0000                  		beq.w	loc_A246
0000BD0E 6B00                       		bmi.s	loc_A230
0000BD10 4A69 0010                  		tst.w	$10(a1)
0000BD14 6B00                       		bmi.s	loc_A246
0000BD16 6000                       		bra.s	loc_A236
0000BD18                            ; ===========================================================================
0000BD18                            
0000BD18                            loc_A230:
0000BD18 4A69 0010                  		tst.w	$10(a1)
0000BD1C 6A00                       		bpl.s	loc_A246
0000BD1E                            
0000BD1E                            loc_A236:
0000BD1E 9169 0008                  		sub.w	d0,8(a1)
0000BD22 337C 0000 0014             		move.w	#0,$14(a1)
0000BD28 337C 0000 0010             		move.w	#0,$10(a1)
0000BD2E                            
0000BD2E                            loc_A246:
0000BD2E 0829 0001 0022             		btst	#1,$22(a1)
0000BD34 6600                       		bne.s	loc_A26A
0000BD36 08E9 0005 0022             		bset	#5,$22(a1)
0000BD3C 08E8 0005 0022             		bset	#5,$22(a0)
0000BD42 6000                       		bra.s	Obj26_Animate
0000BD44                            ; ===========================================================================
0000BD44                            
0000BD44                            loc_A25C:
0000BD44 0828 0005 0022             		btst	#5,$22(a0)
0000BD4A 6700                       		beq.s	Obj26_Animate
0000BD4C 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000BD52 6700                       		beq.s	loc_A26A
0000BD54 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000BD5A 6700                       		beq.s	loc_A26A
0000BD5C 337C 0001 001C             		move.w	#1,$1C(a1)
0000BD62                            
0000BD62                            loc_A26A:
0000BD62 08A8 0005 0022             		bclr	#5,$22(a0)
0000BD68 08A9 0005 0022             		bclr	#5,$22(a1)
0000BD6E                            
0000BD6E                            Obj26_Animate:				; XREF: Obj26_Index
0000BD6E 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000BD74 6100 0000                  		bsr.w	AnimateSprite
0000BD78                            
0000BD78                            Obj26_Display:				; XREF: Obj26_Index
0000BD78 6100 0000                  		bsr.w	DisplaySprite
0000BD7C 3028 0008                  		move.w	8(a0),d0
0000BD80 0240 FF80                  		andi.w	#$FF80,d0
0000BD84 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD88 0441 0080                  		subi.w	#$80,d1
0000BD8C 0241 FF80                  		andi.w	#$FF80,d1
0000BD90 9041                       		sub.w	d1,d0
0000BD92 0C40 0280                  		cmpi.w	#$280,d0
0000BD96 6200 0000                  		bhi.w	DeleteObject
0000BD9A 4E75                       		rts	
0000BD9C                            ; ===========================================================================
0000BD9C                            
0000BD9C                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000BD9C 5428 0024                  		addq.b	#2,$24(a0)
0000BDA0 117C 0000 0020             		move.b	#0,$20(a0)
0000BDA6 6100 0000                  		bsr.w	SingleObjLoad
0000BDAA 6600                       		bne.s	Obj26_Explode
0000BDAC 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000BDB0 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BDBC 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000BDC2                            
0000BDC2                            Obj26_Explode:
0000BDC2 6100 0000                  		bsr.w	SingleObjLoad
0000BDC6 6600                       		bne.s	Obj26_SetBroken
0000BDC8 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000BDCC 5429 0024                  		addq.b	#2,$24(a1)
0000BDD0 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BDDC                            
0000BDDC                            Obj26_SetBroken:
0000BDDC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BDE0 7000                       		moveq	#0,d0
0000BDE2 1028 0023                  		move.b	$23(a0),d0
0000BDE6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BDEC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000BDF2 6000 0000                  		bra.w	DisplaySprite
0000BDF6                            ; ===========================================================================
0000BDF6                            ; ---------------------------------------------------------------------------
0000BDF6                            ; Object 2E - contents of monitors
0000BDF6                            ; ---------------------------------------------------------------------------
0000BDF6                            
0000BDF6                            Obj2E:					; XREF: Obj_Index
0000BDF6 7000                       		moveq	#0,d0
0000BDF8 1028 0024                  		move.b	$24(a0),d0
0000BDFC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000BE00 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000BE04 6000 0000                  		bra.w	DisplaySprite
0000BE08                            ; ===========================================================================
0000BE08 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000BE0A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000BE0C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000BE0E                            ; ===========================================================================
0000BE0E                            
0000BE0E                            Obj2E_Main:				; XREF: Obj2E_Index
0000BE0E 5428 0024                  		addq.b	#2,$24(a0)
0000BE12 317C 0680 0002             		move.w	#$680,2(a0)
0000BE18 117C 0024 0001             		move.b	#$24,1(a0)
0000BE1E 117C 0003 0018             		move.b	#3,$18(a0)
0000BE24 117C 0008 0019             		move.b	#8,$19(a0)
0000BE2A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000BE30 7000                       		moveq	#0,d0
0000BE32 1028 001C                  		move.b	$1C(a0),d0
0000BE36 5400                       		addq.b	#2,d0
0000BE38 1140 001A                  		move.b	d0,$1A(a0)
0000BE3C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000BE42 D000                       		add.b	d0,d0
0000BE44 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BE48 5249                       		addq.w	#1,a1
0000BE4A 2149 0004                  		move.l	a1,4(a0)
0000BE4E                            
0000BE4E                            Obj2E_Move:				; XREF: Obj2E_Index
0000BE4E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000BE52 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000BE56 6100 0000                  		bsr.w	SpeedToPos
0000BE5A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000BE60 4E75                       		rts	
0000BE62                            ; ===========================================================================
0000BE62                            
0000BE62                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000BE62 5428 0024                          addq.b    #2,$24(a0)
0000BE66 317C 001D 001E                     move.w    #29,$1E(a0)
0000BE6C 1028 001C                          move.b    $1C(a0),d0
0000BE70 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000BE74 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000BE76 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000BE78 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000BE7A 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000BE7E 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000BE84 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000BE86 4E75                               rts ; The Eggman monitor now does something!
0000BE88                            ; ===========================================================================
0000BE88                            
0000BE88                            Obj2E_ChkSonic:
0000BE88 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BE8C 6600                       		bne.s	Obj2E_ChkShoes
0000BE8E                            
0000BE8E                            ExtraLife:
0000BE8E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000BE92 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000BE96 303C 0088                  		move.w	#$88,d0
0000BE9A 4EF9 0000 12C6             		jmp	(PlaySound).l	; play extra life music
0000BEA0                            ; ===========================================================================
0000BEA0                            
0000BEA0                            Obj2E_ChkShoes:
0000BEA0 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BEA4 6600                       		bne.s	Obj2E_ChkShield
0000BEA6 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000BEAC                            
0000BEAC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; am I already speed shoe'd?
0000BEB0 6600                       		bne.s	Obj2E_NoShoes	; if so, branch
0000BEB2 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000BEB8                            		
0000BEB8                            Obj2E_NoShoes:
0000BEB8 4E75                       		rts
0000BEBA                            ; ===========================================================================
0000BEBA                            
0000BEBA                            Obj2E_ChkShield:
0000BEBA 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000BEBE 6600                       		bne.s	Obj2E_ChkInvinc
0000BEC0 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000BEC6 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000BECC 303C 00AF                  		move.w	#$AF,d0
0000BED0 4EF9 0000 12C6             		jmp	(PlaySound).l	; play shield sound
0000BED6                            ; ===========================================================================
0000BED6                            
0000BED6                            Obj2E_ChkInvinc:
0000BED6 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BEDA 6600 0000                  		bne.w	Obj2E_ChkRings
0000BEDE 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000BEE4                            
0000BEE4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; am I already invincible?
0000BEE8 6600                       		bne.s	Obj2E_NoInv		; if so, branch
0000BEEA                            
0000BEEA 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000BEF0                            
0000BEF0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000BEF6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000BEFC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000BF02 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000BF08 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000BF0E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000BF14 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000BF1A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000BF20                            		
0000BF20                            Obj2E_NoInv:
0000BF20 4E75                       		rts	
0000BF22                            ; ===========================================================================
0000BF22                            
0000BF22                            Obj2E_ChkRings:
0000BF22 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BF26 6600                       		bne.s	Obj2E_ChkS
0000BF28 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000BF2E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000BF34 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000BF3A 6500                       		bcs.s	Obj2E_RingSound
0000BF3C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000BF42 6700 FF4A                  		beq.w	ExtraLife
0000BF46 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000BF4C 6500                       		bcs.s	Obj2E_RingSound
0000BF4E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000BF54 6700 FF38                  		beq.w	ExtraLife
0000BF58                            
0000BF58                            Obj2E_RingSound:
0000BF58 303C 00B5                  		move.w	#$B5,d0
0000BF5C 4EF9 0000 12C6             		jmp	(PlaySound).l	; play ring sound
0000BF62                            ; ===========================================================================
0000BF62                            
0000BF62                            Obj2E_ChkS:
0000BF62 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000BF66 6600 0000                  		bne	Obj2E_ChkGoggles		; if not, branch to Goggle code
0000BF6A 4E71                       		nop
0000BF6C                            
0000BF6C                            Obj2E_ChkGoggles:	
0000BF6C 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain Goggles?
0000BF70 6600 0000                  		bne	Obj2E_ChkEnd		; if not, branch to ChkEnd
0000BF74 4E71                       		nop
0000BF76                            
0000BF76                            Obj2E_ChkEnd:
0000BF76 4E75                       		rts			; 'S' and goggles monitors do nothing
0000BF78                            ; ===========================================================================
0000BF78                            
0000BF78                            Obj2E_Delete:				; XREF: Obj2E_Index
0000BF78 5368 001E                  		subq.w	#1,$1E(a0)
0000BF7C 6B00 0000                  		bmi.w	DeleteObject
0000BF80 4E75                       		rts	
0000BF82                            ; ---------------------------------------------------------------------------
0000BF82                            ; Subroutine to	make the sides of a monitor solid
0000BF82                            ; ---------------------------------------------------------------------------
0000BF82                            
0000BF82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF82                            
0000BF82                            
0000BF82                            Obj26_SolidSides:			; XREF: loc_A1EC
0000BF82 43F8 D000                  		lea	($FFFFD000).w,a1
0000BF86 3029 0008                  		move.w	8(a1),d0
0000BF8A 9068 0008                  		sub.w	8(a0),d0
0000BF8E D041                       		add.w	d1,d0
0000BF90 6B00                       		bmi.s	loc_A4E6
0000BF92 3601                       		move.w	d1,d3
0000BF94 D643                       		add.w	d3,d3
0000BF96 B043                       		cmp.w	d3,d0
0000BF98 6200                       		bhi.s	loc_A4E6
0000BF9A 1629 0016                  		move.b	$16(a1),d3
0000BF9E 4883                       		ext.w	d3
0000BFA0 D443                       		add.w	d3,d2
0000BFA2 3629 000C                  		move.w	$C(a1),d3
0000BFA6 9668 000C                  		sub.w	$C(a0),d3
0000BFAA D642                       		add.w	d2,d3
0000BFAC 6B00                       		bmi.s	loc_A4E6
0000BFAE D442                       		add.w	d2,d2
0000BFB0 B642                       		cmp.w	d2,d3
0000BFB2 6400                       		bcc.s	loc_A4E6
0000BFB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BFB8 6B00                       		bmi.s	loc_A4E6
0000BFBA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BFC0 6400                       		bcc.s	loc_A4E6
0000BFC2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BFC6 6600                       		bne.s	loc_A4E6
0000BFC8 B240                       		cmp.w	d0,d1
0000BFCA 6400                       		bcc.s	loc_A4DC
0000BFCC D241                       		add.w	d1,d1
0000BFCE 9041                       		sub.w	d1,d0
0000BFD0                            
0000BFD0                            loc_A4DC:
0000BFD0 0C43 0010                  		cmpi.w	#$10,d3
0000BFD4 6500                       		bcs.s	loc_A4EA
0000BFD6                            
0000BFD6                            loc_A4E2:
0000BFD6 7201                       		moveq	#1,d1
0000BFD8 4E75                       		rts	
0000BFDA                            ; ===========================================================================
0000BFDA                            
0000BFDA                            loc_A4E6:
0000BFDA 7200                       		moveq	#0,d1
0000BFDC 4E75                       		rts	
0000BFDE                            ; ===========================================================================
0000BFDE                            
0000BFDE                            loc_A4EA:
0000BFDE 7200                       		moveq	#0,d1
0000BFE0 1228 0019                  		move.b	$19(a0),d1
0000BFE4 5841                       		addq.w	#4,d1
0000BFE6 3401                       		move.w	d1,d2
0000BFE8 D442                       		add.w	d2,d2
0000BFEA D269 0008                  		add.w	8(a1),d1
0000BFEE 9268 0008                  		sub.w	8(a0),d1
0000BFF2 6BE2                       		bmi.s	loc_A4E2
0000BFF4 B242                       		cmp.w	d2,d1
0000BFF6 64DE                       		bcc.s	loc_A4E2
0000BFF8 72FF                       		moveq	#-1,d1
0000BFFA 4E75                       		rts	
0000BFFC                            ; End of function Obj26_SolidSides
0000BFFC                            
0000BFFC                            ; ===========================================================================
0000BFFC                            Ani_obj26:
0000BFFC                            	include "_anim\obj26.asm"
0000BFFC                            ; ---------------------------------------------------------------------------
0000BFFC                            ; Animation script - monitors
0000BFFC                            ; ---------------------------------------------------------------------------
0000BFFC 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000C002 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000C008 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000C00E 0000                       		dc.w byte_A582-Ani_obj26
0000C010 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000C016 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000C022 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000C02E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000C03A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000C046 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000C052 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000C05E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000C06A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000C076 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000C07E                            		even
0000C07E                            		even
0000C07E                            
0000C07E                            ; ---------------------------------------------------------------------------
0000C07E                            ; Sprite mappings - monitors
0000C07E                            ; ---------------------------------------------------------------------------
0000C07E                            Map_obj26:
0000C07E                            	include "_maps\obj26.asm"
0000C07E                            ; ---------------------------------------------------------------------------
0000C07E                            ; Sprite mappings - monitors
0000C07E                            ; ---------------------------------------------------------------------------
0000C07E 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000C082 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000C086 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000C08A 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000C08E 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000C092 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000C096 01                         byte_A5A2:	dc.b 1			; static monitor
0000C097 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C09C 02                         byte_A5A8:	dc.b 2			; static monitor
0000C09D F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000C0A2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0A7 02                         byte_A5B3:	dc.b 2			; static monitor
0000C0A8 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000C0AD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0B2 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000C0B3 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000C0B8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0BD 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000C0BE F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000C0C3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0C8 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000C0C9 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000C0CE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0D3 02                         byte_A5DF:	dc.b 2			; shield monitor
0000C0D4 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000C0D9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0DE 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000C0DF F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000C0E4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0E9 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000C0EA F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000C0EF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0F4 02                         byte_A600:	dc.b 2			; 'S' monitor
0000C0F5 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000C0FA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C0FF 02                         byte_A60B:	dc.b 2			; goggles monitor
0000C100 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000C105 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C10A 01                         byte_A616:	dc.b 1			; broken monitor
0000C10B FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000C110                            		even
0000C110                            		even
0000C110                            
0000C110                            ; ===========================================================================
0000C110                            ; ---------------------------------------------------------------------------
0000C110                            ; Object 0E - Sonic on the title screen
0000C110                            ; ---------------------------------------------------------------------------
0000C110                            
0000C110                            Obj0E:					; XREF: Obj_Index
0000C110 7000                       		moveq	#0,d0
0000C112 1028 0024                  		move.b	$24(a0),d0
0000C116 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000C11A 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000C11E                            ; ===========================================================================
0000C11E 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000C120 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000C122 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000C124 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000C126                            ; ===========================================================================
0000C126                            
0000C126                            Obj0E_Main:				; XREF: Obj0E_Index
0000C126 5428 0024                  		addq.b	#2,$24(a0)
0000C12A 317C 00F0 0008             		move.w	#$F0,8(a0)
0000C130 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000C136 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000C13E 317C 2300 0002             		move.w	#$2300,2(a0)
0000C144 117C 0001 0018             		move.b	#1,$18(a0)
0000C14A 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000C150 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C156 6100 0000                  		bsr.w	AnimateSprite
0000C15A                            
0000C15A                            Obj0E_Delay:				; XREF: Obj0E_Index
0000C15A 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000C15E 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000C160 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000C164 6000 0000                  		bra.w	DisplaySprite
0000C168                            ; ===========================================================================
0000C168                            
0000C168                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000C168 4E75                       		rts	
0000C16A                            ; ===========================================================================
0000C16A                            
0000C16A                            Obj0E_Move:				; XREF: Obj0E_Index
0000C16A 5168 000A                  		subq.w	#8,$A(a0)
0000C16E 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000C174 6600                       		bne.s	Obj0E_Display
0000C176 5428 0024                  		addq.b	#2,$24(a0)
0000C17A                            
0000C17A                            Obj0E_Display:
0000C17A 6000 0000                  		bra.w	DisplaySprite
0000C17E                            ; ===========================================================================
0000C17E 4E75                       		rts	
0000C180                            ; ===========================================================================
0000C180                            
0000C180                            Obj0E_Animate:				; XREF: Obj0E_Index
0000C180 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C186 6100 0000                  		bsr.w	AnimateSprite
0000C18A 6000 0000                  		bra.w	DisplaySprite
0000C18E                            ; ===========================================================================
0000C18E 4E75                       		rts	
0000C190                            ; ===========================================================================
0000C190                            ; ---------------------------------------------------------------------------
0000C190                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C190                            ; ---------------------------------------------------------------------------
0000C190                            
0000C190                            Obj0F:					; XREF: Obj_Index
0000C190 7000                       		moveq	#0,d0
0000C192 1028 0024                  		move.b	$24(a0),d0
0000C196 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C19A 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C19E 6000 0000                  		bra.w	DisplaySprite
0000C1A2                            ; ===========================================================================
0000C1A2 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000C1A4 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000C1A6 0000                       		dc.w locret_A6F8-Obj0F_Index
0000C1A8                            ; ===========================================================================
0000C1A8                            
0000C1A8                            Obj0F_Main:				; XREF: Obj0F_Index
0000C1A8 5428 0024                  		addq.b	#2,$24(a0)
0000C1AC 317C 00D0 0008             		move.w	#$D0,8(a0)
0000C1B2 317C 0130 000A             		move.w	#$130,$A(a0)
0000C1B8 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000C1C0 317C 0200 0002             		move.w	#$200,2(a0)
0000C1C6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000C1CC 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000C1CE 5428 0024                  		addq.b	#2,$24(a0)
0000C1D2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000C1D8 6600                       		bne.s	locret_A6F8	; if not, branch
0000C1DA 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000C1E0 317C 0170 0008             		move.w	#$170,8(a0)
0000C1E6 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000C1EC                            
0000C1EC                            locret_A6F8:				; XREF: Obj0F_Index
0000C1EC 4E75                       		rts	
0000C1EE                            ; ===========================================================================
0000C1EE                            
0000C1EE                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000C1EE 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000C1F4 6000 0000                  		bra.w	AnimateSprite
0000C1F8                            ; ===========================================================================
0000C1F8                            Ani_obj0E:
0000C1F8                            	include "_anim\obj0E.asm"
0000C1F8                            ; ---------------------------------------------------------------------------
0000C1F8                            ; Animation script - Sonic on the title screen
0000C1F8                            ; ---------------------------------------------------------------------------
0000C1F8 0000                       		dc.w byte_A706-Ani_obj0E
0000C1FA 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000C206                            		even
0000C206                            		even
0000C206                            
0000C206                            Ani_obj0F:
0000C206                            	include "_anim\obj0F.asm"
0000C206                            ; ---------------------------------------------------------------------------
0000C206                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C206                            ; ---------------------------------------------------------------------------
0000C206 0000                       		dc.w byte_A714-Ani_obj0F
0000C208 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000C20C                            		even
0000C20C                            		even
0000C20C                            
0000C20C                            ; ---------------------------------------------------------------------------
0000C20C                            ; Subroutine to	animate	a sprite using an animation script
0000C20C                            ; ---------------------------------------------------------------------------
0000C20C                            
0000C20C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C20C                            
0000C20C                            
0000C20C                            AnimateSprite:
0000C20C 7000                       		moveq	#0,d0
0000C20E 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000C212 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000C216 6700                       		beq.s	Anim_Run	; if not, branch
0000C218 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000C21C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C222 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000C228                            
0000C228                            Anim_Run:
0000C228 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000C22C 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C22E D040                       		add.w	d0,d0
0000C230 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C234 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000C238 7200                       		moveq	#0,d1
0000C23A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000C23E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C242 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C244                            
0000C244                            Anim_Next:
0000C244 1200                       		move.b	d0,d1
0000C246 0200 001F                  		andi.b	#$1F,d0
0000C24A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000C24E 1028 0022                  		move.b	$22(a0),d0
0000C252 E719                       		rol.b	#3,d1
0000C254 B101                       		eor.b	d0,d1
0000C256 0201 0003                  		andi.b	#3,d1
0000C25A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000C260 8328 0001                  		or.b	d1,1(a0)
0000C264 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000C268                            
0000C268                            Anim_Wait:
0000C268 4E75                       		rts	
0000C26A                            ; ===========================================================================
0000C26A                            
0000C26A                            Anim_End_FF:
0000C26A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C26C 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C26E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000C274 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C278 60CA                       		bra.s	Anim_Next
0000C27A                            ; ===========================================================================
0000C27A                            
0000C27A                            Anim_End_FE:
0000C27A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C27C 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C27E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C282 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000C286 9200                       		sub.b	d0,d1
0000C288 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C28C 60B6                       		bra.s	Anim_Next
0000C28E                            ; ===========================================================================
0000C28E                            
0000C28E                            Anim_End_FD:
0000C28E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C290 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C292 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000C298                            
0000C298                            Anim_End_FC:
0000C298 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C29A 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C29C 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000C2A0                            
0000C2A0                            Anim_End_FB:
0000C2A0 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C2A2 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C2A4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C2AA 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000C2AE                            
0000C2AE                            Anim_End_FA:
0000C2AE 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C2B0 6600                       		bne.s	Anim_End	; if not, branch
0000C2B2 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000C2B6                            
0000C2B6                            Anim_End:
0000C2B6 4E75                       		rts	
0000C2B8                            ; End of function AnimateSprite
0000C2B8                            
0000C2B8                            ; ===========================================================================
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            Map_obj0F:
0000C2B8                            	include "_maps\obj0F.asm"
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8 0000                       		dc.w byte_A7CD-Map_obj0F
0000C2BA 0000                       		dc.w byte_A7CC-Map_obj0F
0000C2BC 0000                       		dc.w byte_A7EB-Map_obj0F
0000C2BE 0000                       		dc.w byte_A882-Map_obj0F
0000C2C0 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000C2C1 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C2C6 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C2CB 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C2D0 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C2D5 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C2DA 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C2DF 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000C2E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C2E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C2EA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C2EF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C2F4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C2F9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C2FE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C303 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C308 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C30D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C312 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C317 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C31C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C321 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C326 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C32B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C330 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C335 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C33A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C33F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C344 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C349 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C34E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C353 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C358 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C35D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C362 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C367 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C36C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C371 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C376 01                         byte_A882:	dc.b 1			; "TM"
0000C377 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C37C                            		even
0000C37C                            		even
0000C37C                            
0000C37C                            ; ---------------------------------------------------------------------------
0000C37C                            ; Sprite mappings - Sonic on the title screen
0000C37C                            ; ---------------------------------------------------------------------------
0000C37C                            Map_obj0E:
0000C37C                            	include "_maps\obj0E.asm"
0000C37C                            ; ---------------------------------------------------------------------------
0000C37C                            ; Sprite mappings - Sonic on the title screen
0000C37C                            ; ---------------------------------------------------------------------------
0000C37C 0000                       		dc.w byte_A898-Map_obj0E
0000C37E 0000                       		dc.w byte_A8CB-Map_obj0E
0000C380 0000                       		dc.w byte_A917-Map_obj0E
0000C382 0000                       		dc.w byte_A96D-Map_obj0E
0000C384 0000                       		dc.w byte_A9AF-Map_obj0E
0000C386 0000                       		dc.w byte_A9E7-Map_obj0E
0000C388 0000                       		dc.w byte_AA47-Map_obj0E
0000C38A 0000                       		dc.w byte_AAB1-Map_obj0E
0000C38C 0A                         byte_A898:	dc.b $A
0000C38D 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C392 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C397 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C39C 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C3A1 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C3A6 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C3AB 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C3B0 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C3B5 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C3BA 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C3BF 0F                         byte_A8CB:	dc.b $F
0000C3C0 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C3C5 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C3CA 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C3CF 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C3D4 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C3D9 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C3DE 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C3E3 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C3E8 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C3ED 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C3F2 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C3F7 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C3FC 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C401 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C406 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C40B 11                         byte_A917:	dc.b $11
0000C40C 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C411 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C416 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C41B 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C420 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C425 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C42A 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C42F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C434 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C439 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C43E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C443 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C448 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C44D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C452 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C457 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C45C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C461 0D                         byte_A96D:	dc.b $D
0000C462 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C467 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C46C 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C471 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C476 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C47B 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C480 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C485 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C48A 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C48F 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C494 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C499 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C49E 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C4A3 0B                         byte_A9AF:	dc.b $B
0000C4A4 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C4A9 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C4AE 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C4B3 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C4B8 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C4BD 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C4C2 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C4C7 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C4CC 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C4D1 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C4D6 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C4DB 13                         byte_A9E7:	dc.b $13
0000C4DC 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C4E1 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C4E6 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C4EB 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C4F0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C4F5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C4FA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C4FF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C504 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C509 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C50E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C513 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C518 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C51D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C522 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C527 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C52C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C531 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C536 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C53B 15                         byte_AA47:	dc.b $15
0000C53C 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C541 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C546 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C54B 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C550 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C555 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C55A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C55F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C564 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C569 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C56E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C573 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C578 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C57D 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C582 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C587 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C58C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C591 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C596 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C59B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C5A0 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C5A5 16                         byte_AAB1:	dc.b $16
0000C5A6 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C5AB 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C5B0 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C5B5 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C5BA 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C5BF 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C5C4 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C5C9 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C5CE 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C5D3 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C5D8 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C5DD 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C5E2 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C5E7 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C5EC 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C5F1 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C5F6 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C5FB 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C600 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C605 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C60A 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C60F 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C614                            		even
0000C614                            		even
0000C614                            
0000C614                            ; ===========================================================================
0000C614                            ; ---------------------------------------------------------------------------
0000C614                            ; Object 2B - Chopper enemy (GHZ)
0000C614                            ; ---------------------------------------------------------------------------
0000C614                            
0000C614                            Obj2B:					; XREF: Obj_Index
0000C614 7000                       		moveq	#0,d0
0000C616 1028 0024                  		move.b	$24(a0),d0
0000C61A 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000C61E 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000C622 6000 0000                  		bra.w	MarkObjGone
0000C626                            ; ===========================================================================
0000C626 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000C628 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000C62A                            ; ===========================================================================
0000C62A                            
0000C62A                            Obj2B_Main:				; XREF: Obj2B_Index
0000C62A 5428 0024                  		addq.b	#2,$24(a0)
0000C62E 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000C636 317C 047B 0002             		move.w	#$47B,2(a0)
0000C63C 117C 0004 0001             		move.b	#4,1(a0)
0000C642 117C 0004 0018             		move.b	#4,$18(a0)
0000C648 117C 0009 0020             		move.b	#9,$20(a0)
0000C64E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C654 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C65A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C660                            
0000C660                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000C660 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000C666 6100 FBA4                  		bsr.w	AnimateSprite
0000C66A 6100 0000                  		bsr.w	SpeedToPos
0000C66E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000C674 3028 0030                  		move.w	$30(a0),d0
0000C678 B068 000C                  		cmp.w	$C(a0),d0
0000C67C 6400                       		bcc.s	Obj2B_ChgAni
0000C67E 3140 000C                  		move.w	d0,$C(a0)
0000C682 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C688                            
0000C688                            Obj2B_ChgAni:
0000C688 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C68E 0440 00C0                  		subi.w	#$C0,d0
0000C692 B068 000C                  		cmp.w	$C(a0),d0
0000C696 6400                       		bcc.s	locret_ABB6
0000C698 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C69E 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C6A2 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C6A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C6AA                            
0000C6AA                            locret_ABB6:
0000C6AA 4E75                       		rts	
0000C6AC                            ; ===========================================================================
0000C6AC                            Ani_obj2B:
0000C6AC                            	include "_anim\obj2B.asm"
0000C6AC                            ; ---------------------------------------------------------------------------
0000C6AC                            ; Animation script - Chopper enemy
0000C6AC                            ; ---------------------------------------------------------------------------
0000C6AC 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C6AE 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C6B0 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C6B2 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C6B6 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C6BA 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C6BE 00                         		even
0000C6BE 00                         		even
0000C6BE                            
0000C6BE                            ; ---------------------------------------------------------------------------
0000C6BE                            ; Sprite mappings - Chopper enemy (GHZ)
0000C6BE                            ; ---------------------------------------------------------------------------
0000C6BE                            Map_obj2B:
0000C6BE                            	include "_maps\obj2B.asm"
0000C6BE                            ; ---------------------------------------------------------------------------
0000C6BE                            ; Sprite mappings - Chopper enemy (GHZ)
0000C6BE                            ; ---------------------------------------------------------------------------
0000C6BE 0000                       		dc.w byte_ABCE-Map_obj2B
0000C6C0 0000                       		dc.w byte_ABD4-Map_obj2B
0000C6C2 01                         byte_ABCE:	dc.b 1
0000C6C3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C6C8 01                         byte_ABD4:	dc.b 1
0000C6C9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C6CE                            		even
0000C6CE                            		even
0000C6CE                            
0000C6CE                            ; ===========================================================================
0000C6CE                            ; ---------------------------------------------------------------------------
0000C6CE                            ; Object 2C - Jaws enemy (LZ)
0000C6CE                            ; ---------------------------------------------------------------------------
0000C6CE                            
0000C6CE                            Obj2C:					; XREF: Obj_Index
0000C6CE 7000                       		moveq	#0,d0
0000C6D0 1028 0024                  		move.b	$24(a0),d0
0000C6D4 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C6D8 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C6DC                            ; ===========================================================================
0000C6DC 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C6DE 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C6E0                            ; ===========================================================================
0000C6E0                            
0000C6E0                            Obj2C_Main:				; XREF: Obj2C_Index
0000C6E0 5428 0024                  		addq.b	#2,$24(a0)
0000C6E4 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C6EC 317C 2486 0002             		move.w	#$2486,2(a0)
0000C6F2 0028 0004 0001             		ori.b	#4,1(a0)
0000C6F8 117C 000A 0020             		move.b	#$A,$20(a0)
0000C6FE 117C 0004 0018             		move.b	#4,$18(a0)
0000C704 117C 0010 0019             		move.b	#$10,$19(a0)
0000C70A 7000                       		moveq	#0,d0
0000C70C 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C710 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C712 5340                       		subq.w	#1,d0
0000C714 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C718 3140 0032                  		move.w	d0,$32(a0)
0000C71C 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C722 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C728 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C72A 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C72E                            
0000C72E                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C72E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C732 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C734 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C73A 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C73E 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C744 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C74A                            
0000C74A                            Obj2C_Animate:
0000C74A 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C750 6100 FABA                  		bsr.w	AnimateSprite
0000C754 6100 0000                  		bsr.w	SpeedToPos
0000C758 6000 0000                  		bra.w	MarkObjGone
0000C75C                            ; ===========================================================================
0000C75C                            Ani_obj2C:
0000C75C                            	include "_anim\obj2C.asm"
0000C75C                            ; ---------------------------------------------------------------------------
0000C75C                            ; Animation script - Jaws enemy
0000C75C                            ; ---------------------------------------------------------------------------
0000C75C 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C75E 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C764                            		even
0000C764                            		even
0000C764                            
0000C764                            ; ---------------------------------------------------------------------------
0000C764                            ; Sprite mappings - Jaws enemy (LZ)
0000C764                            ; ---------------------------------------------------------------------------
0000C764                            Map_obj2C:
0000C764                            	include "_maps\obj2C.asm"
0000C764                            ; ---------------------------------------------------------------------------
0000C764                            ; Sprite mappings - Jaws enemy (LZ)
0000C764                            ; ---------------------------------------------------------------------------
0000C764 0000                       		dc.w byte_AC78-Map_obj2C
0000C766 0000                       		dc.w byte_AC83-Map_obj2C
0000C768 0000                       		dc.w byte_AC8E-Map_obj2C
0000C76A 0000                       		dc.w byte_AC99-Map_obj2C
0000C76C 02                         byte_AC78:	dc.b 2
0000C76D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C772 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000C777 02                         byte_AC83:	dc.b 2
0000C778 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C77D F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000C782 02                         byte_AC8E:	dc.b 2
0000C783 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C788 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000C78D 02                         byte_AC99:	dc.b 2
0000C78E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C793 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000C798                            		even
0000C798                            		even
0000C798                            
0000C798                            ; ===========================================================================
0000C798                            ; ---------------------------------------------------------------------------
0000C798                            ; Object 2D - Burrobot enemy (LZ)
0000C798                            ; ---------------------------------------------------------------------------
0000C798                            
0000C798                            Obj2D:					; XREF: Obj_Index
0000C798 7000                       		moveq	#0,d0
0000C79A 1028 0024                  		move.b	$24(a0),d0
0000C79E 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C7A2 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C7A6                            ; ===========================================================================
0000C7A6 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C7A8 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            Obj2D_Main:				; XREF: Obj2D_Index
0000C7AA 5428 0024                  		addq.b	#2,$24(a0)
0000C7AE 117C 0013 0016             		move.b	#$13,$16(a0)
0000C7B4 117C 0008 0017             		move.b	#8,$17(a0)
0000C7BA 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C7C2 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C7C8 0028 0004 0001             		ori.b	#4,1(a0)
0000C7CE 117C 0004 0018             		move.b	#4,$18(a0)
0000C7D4 117C 0005 0020             		move.b	#5,$20(a0)
0000C7DA 117C 000C 0019             		move.b	#$C,$19(a0)
0000C7E0 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C7E4 117C 0002 001C             		move.b	#2,$1C(a0)
0000C7EA                            
0000C7EA                            Obj2D_Action:				; XREF: Obj2D_Index
0000C7EA 7000                       		moveq	#0,d0
0000C7EC 1028 0025                  		move.b	$25(a0),d0
0000C7F0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C7F4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C7F8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C7FE 6100 FA0C                  		bsr.w	AnimateSprite
0000C802 6000 0000                  		bra.w	MarkObjGone
0000C806                            ; ===========================================================================
0000C806 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C808 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C80A 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C80C 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C80E                            ; ===========================================================================
0000C80E                            
0000C80E                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C80E 5368 0030                  		subq.w	#1,$30(a0)
0000C812 6A00                       		bpl.s	locret_AD42
0000C814 5428 0025                  		addq.b	#2,$25(a0)
0000C818 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C81E 317C 0080 0010             		move.w	#$80,$10(a0)
0000C824 117C 0001 001C             		move.b	#1,$1C(a0)
0000C82A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C830 6700                       		beq.s	locret_AD42
0000C832 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C836                            
0000C836                            locret_AD42:
0000C836 4E75                       		rts	
0000C838                            ; ===========================================================================
0000C838                            
0000C838                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C838 5368 0030                  		subq.w	#1,$30(a0)
0000C83C 6B00                       		bmi.s	loc_AD84
0000C83E 6100 0000                  		bsr.w	SpeedToPos
0000C842 0868 0000 0032             		bchg	#0,$32(a0)
0000C848 6600                       		bne.s	loc_AD78
0000C84A 3628 0008                  		move.w	8(a0),d3
0000C84E 0643 000C                  		addi.w	#$C,d3
0000C852 0828 0000 0022             		btst	#0,$22(a0)
0000C858 6600                       		bne.s	loc_AD6A
0000C85A 0443 0018                  		subi.w	#$18,d3
0000C85E                            
0000C85E                            loc_AD6A:
0000C85E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C864 0C41 000C                  		cmpi.w	#$C,d1
0000C868 6C00                       		bge.s	loc_AD84
0000C86A 4E75                       		rts	
0000C86C                            ; ===========================================================================
0000C86C                            
0000C86C                            loc_AD78:				; XREF: Obj2D_Move
0000C86C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C872 D368 000C                  		add.w	d1,$C(a0)
0000C876 4E75                       		rts	
0000C878                            ; ===========================================================================
0000C878                            
0000C878                            loc_AD84:				; XREF: Obj2D_Move
0000C878 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C87E 6700                       		beq.s	loc_ADA4
0000C880 5528 0025                  		subq.b	#2,$25(a0)
0000C884 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C88A 317C 0000 0010             		move.w	#0,$10(a0)
0000C890 117C 0000 001C             		move.b	#0,$1C(a0)
0000C896 4E75                       		rts	
0000C898                            ; ===========================================================================
0000C898                            
0000C898                            loc_ADA4:
0000C898 5428 0025                  		addq.b	#2,$25(a0)
0000C89C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C8A2 117C 0002 001C             		move.b	#2,$1C(a0)
0000C8A8 4E75                       		rts	
0000C8AA                            ; ===========================================================================
0000C8AA                            
0000C8AA                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C8AA 6100 0000                  		bsr.w	SpeedToPos
0000C8AE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C8B4 6B00                       		bmi.s	locret_ADF0
0000C8B6 117C 0003 001C             		move.b	#3,$1C(a0)
0000C8BC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C8C2 4A41                       		tst.w	d1
0000C8C4 6A00                       		bpl.s	locret_ADF0
0000C8C6 D368 000C                  		add.w	d1,$C(a0)
0000C8CA 317C 0000 0012             		move.w	#0,$12(a0)
0000C8D0 117C 0001 001C             		move.b	#1,$1C(a0)
0000C8D6 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C8DC 5528 0025                  		subq.b	#2,$25(a0)
0000C8E0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C8E4                            
0000C8E4                            locret_ADF0:
0000C8E4 4E75                       		rts	
0000C8E6                            ; ===========================================================================
0000C8E6                            
0000C8E6                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C8E6 343C 0060                  		move.w	#$60,d2
0000C8EA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C8EE 6400                       		bcc.s	locret_AE20
0000C8F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C8F4 9068 000C                  		sub.w	$C(a0),d0
0000C8F8 6400                       		bcc.s	locret_AE20
0000C8FA 0C40 FF80                  		cmpi.w	#-$80,d0
0000C8FE 6500                       		bcs.s	locret_AE20
0000C900 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C904 6600                       		bne.s	locret_AE20
0000C906 5528 0025                  		subq.b	#2,$25(a0)
0000C90A 3141 0010                  		move.w	d1,$10(a0)
0000C90E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C914                            
0000C914                            locret_AE20:
0000C914 4E75                       		rts	
0000C916                            
0000C916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C916                            
0000C916                            
0000C916                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C916 323C 0080                  		move.w	#$80,d1
0000C91A 08E8 0000 0022             		bset	#0,$22(a0)
0000C920 3038 D008                  		move.w	($FFFFD008).w,d0
0000C924 9068 0008                  		sub.w	8(a0),d0
0000C928 6400                       		bcc.s	loc_AE40
0000C92A 4440                       		neg.w	d0
0000C92C 4441                       		neg.w	d1
0000C92E 08A8 0000 0022             		bclr	#0,$22(a0)
0000C934                            
0000C934                            loc_AE40:
0000C934 B042                       		cmp.w	d2,d0
0000C936 4E75                       		rts	
0000C938                            ; End of function Obj2D_ChkSonic2
0000C938                            
0000C938                            ; ===========================================================================
0000C938                            Ani_obj2D:
0000C938                            	include "_anim\obj2D.asm"
0000C938                            ; ---------------------------------------------------------------------------
0000C938                            ; Animation script - Burrobot enemy
0000C938                            ; ---------------------------------------------------------------------------
0000C938 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C93A 0000                       		dc.w byte_AE50-Ani_obj2D
0000C93C 0000                       		dc.w byte_AE54-Ani_obj2D
0000C93E 0000                       		dc.w byte_AE58-Ani_obj2D
0000C940 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C944 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C948 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C94C 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C950 00                         		even
0000C950 00                         		even
0000C950                            
0000C950                            ; ---------------------------------------------------------------------------
0000C950                            ; Sprite mappings - Burrobot enemy (LZ)
0000C950                            ; ---------------------------------------------------------------------------
0000C950                            Map_obj2D:
0000C950                            	include "_maps\obj2D.asm"
0000C950                            ; ---------------------------------------------------------------------------
0000C950                            ; Sprite mappings - Burrobot enemy (LZ)
0000C950                            ; ---------------------------------------------------------------------------
0000C950 0000                       		dc.w byte_AE6A-Map_obj2D
0000C952 0000                       		dc.w byte_AE75-Map_obj2D
0000C954 0000                       		dc.w byte_AE80-Map_obj2D
0000C956 0000                       		dc.w byte_AE8B-Map_obj2D
0000C958 0000                       		dc.w byte_AE96-Map_obj2D
0000C95A 0000                       		dc.w byte_AEA1-Map_obj2D
0000C95C 0000                       		dc.w byte_AEAC-Map_obj2D
0000C95E 02                         byte_AE6A:	dc.b 2
0000C95F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000C964 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C969 02                         byte_AE75:	dc.b 2
0000C96A EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C96F 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000C974 02                         byte_AE80:	dc.b 2
0000C975 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000C97A 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000C97F 02                         byte_AE8B:	dc.b 2
0000C980 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000C985 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000C98A 02                         byte_AE96:	dc.b 2
0000C98B E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000C990 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000C995 02                         byte_AEA1:	dc.b 2
0000C996 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000C99B F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000C9A0 02                         byte_AEAC:	dc.b 2
0000C9A1 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C9A6 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C9AC 00                         		even
0000C9AC 00                         		even
0000C9AC                            
0000C9AC                            ; ===========================================================================
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            ; Object 2F - large moving platforms (MZ)
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            
0000C9AC                            Obj2F:					; XREF: Obj_Index
0000C9AC 7000                       		moveq	#0,d0
0000C9AE 1028 0024                  		move.b	$24(a0),d0
0000C9B2 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C9B6 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C9BA                            ; ===========================================================================
0000C9BA 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C9BC 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C9BE                            
0000C9BE 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C9C0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C9C2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C9C4 0140                       		dc.b 1,	$40
0000C9C6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C9C8 0220                       		dc.b 2,	$20
0000C9CA                            ; ===========================================================================
0000C9CA                            
0000C9CA                            Obj2F_Main:				; XREF: Obj2F_Index
0000C9CA 5428 0024                  		addq.b	#2,$24(a0)
0000C9CE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C9D6 317C C000 0002             		move.w	#$C000,2(a0)
0000C9DC 117C 0004 0001             		move.b	#4,1(a0)
0000C9E2 117C 0005 0018             		move.b	#5,$18(a0)
0000C9E8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C9EE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C9F4 7000                       		moveq	#0,d0
0000C9F6 1028 0028                  		move.b	$28(a0),d0
0000C9FA E448                       		lsr.w	#2,d0
0000C9FC 0240 001C                  		andi.w	#$1C,d0
0000CA00 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000CA04 3019                       		move.w	(a1)+,d0
0000CA06 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000CA0A 214A 0030                  		move.l	a2,$30(a0)
0000CA0E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CA12 1151 0019                  		move.b	(a1),$19(a0)
0000CA16 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CA1C 117C 0040 0016             		move.b	#$40,$16(a0)
0000CA22 08E8 0004 0001             		bset	#4,1(a0)
0000CA28                            
0000CA28                            Obj2F_Action:				; XREF: Obj2F_Index
0000CA28 6100 0000                  		bsr.w	Obj2F_Types
0000CA2C 4A28 0025                  		tst.b	$25(a0)
0000CA30 6700                       		beq.s	Obj2F_Solid
0000CA32 7200                       		moveq	#0,d1
0000CA34 1228 0019                  		move.b	$19(a0),d1
0000CA38 0641 000B                  		addi.w	#$B,d1
0000CA3C 6100 C64C                  		bsr.w	ExitPlatform
0000CA40 0829 0003 0022             		btst	#3,$22(a1)
0000CA46 6600 0000                  		bne.w	Obj2F_Slope
0000CA4A 4228 0025                  		clr.b	$25(a0)
0000CA4E 6000                       		bra.s	Obj2F_Display
0000CA50                            ; ===========================================================================
0000CA50                            
0000CA50                            Obj2F_Slope:				; XREF: Obj2F_Action
0000CA50 7200                       		moveq	#0,d1
0000CA52 1228 0019                  		move.b	$19(a0),d1
0000CA56 0641 000B                  		addi.w	#$B,d1
0000CA5A 2468 0030                  		movea.l	$30(a0),a2
0000CA5E 3428 0008                  		move.w	8(a0),d2
0000CA62 6100 D584                  		bsr.w	SlopeObject2
0000CA66 6000                       		bra.s	Obj2F_Display
0000CA68                            ; ===========================================================================
0000CA68                            
0000CA68                            Obj2F_Solid:				; XREF: Obj2F_Action
0000CA68 7200                       		moveq	#0,d1
0000CA6A 1228 0019                  		move.b	$19(a0),d1
0000CA6E 0641 000B                  		addi.w	#$B,d1
0000CA72 343C 0020                  		move.w	#$20,d2
0000CA76 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CA7C 6600                       		bne.s	loc_AF8E
0000CA7E 343C 0030                  		move.w	#$30,d2
0000CA82                            
0000CA82                            loc_AF8E:
0000CA82 2468 0030                  		movea.l	$30(a0),a2
0000CA86 6100 0000                  		bsr.w	SolidObject2F
0000CA8A                            
0000CA8A                            Obj2F_Display:				; XREF: Obj2F_Action
0000CA8A 6100 0000                  		bsr.w	DisplaySprite
0000CA8E 6000 0000                  		bra.w	Obj2F_ChkDel
0000CA92                            
0000CA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CA92                            
0000CA92                            
0000CA92                            Obj2F_Types:				; XREF: Obj2F_Action
0000CA92 7000                       		moveq	#0,d0
0000CA94 1028 0028                  		move.b	$28(a0),d0
0000CA98 0240 0007                  		andi.w	#7,d0
0000CA9C D040                       		add.w	d0,d0
0000CA9E 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000CAA2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000CAA6                            ; End of function Obj2F_Types
0000CAA6                            
0000CAA6                            ; ===========================================================================
0000CAA6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000CAA8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000CAAA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000CAAC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000CAAE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000CAB0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000CAB2                            ; ===========================================================================
0000CAB2                            
0000CAB2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000CAB2 4E75                       		rts			; type 00 platform doesn't move
0000CAB4                            ; ===========================================================================
0000CAB4                            
0000CAB4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000CAB4 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000CAB8 323C 0020                  		move.w	#$20,d1
0000CABC 6000                       		bra.s	Obj2F_Move
0000CABE                            ; ===========================================================================
0000CABE                            
0000CABE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000CABE 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000CAC2 323C 0030                  		move.w	#$30,d1
0000CAC6 6000                       		bra.s	Obj2F_Move
0000CAC8                            ; ===========================================================================
0000CAC8                            
0000CAC8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000CAC8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000CACC 323C 0040                  		move.w	#$40,d1
0000CAD0 6000                       		bra.s	Obj2F_Move
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000CAD2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000CAD6 323C 0060                  		move.w	#$60,d1
0000CADA                            
0000CADA                            Obj2F_Move:
0000CADA 0828 0003 0028             		btst	#3,$28(a0)
0000CAE0 6700                       		beq.s	loc_AFF2
0000CAE2 4440                       		neg.w	d0
0000CAE4 D041                       		add.w	d1,d0
0000CAE6                            
0000CAE6                            loc_AFF2:
0000CAE6 3228 002C                  		move.w	$2C(a0),d1
0000CAEA 9240                       		sub.w	d0,d1
0000CAEC 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000CAF0 4E75                       		rts	
0000CAF2                            ; ===========================================================================
0000CAF2                            
0000CAF2                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000CAF2 1028 0034                  		move.b	$34(a0),d0
0000CAF6 4A28 0025                  		tst.b	$25(a0)
0000CAFA 6600                       		bne.s	loc_B010
0000CAFC 5500                       		subq.b	#2,d0
0000CAFE 6400                       		bcc.s	loc_B01C
0000CB00 7000                       		moveq	#0,d0
0000CB02 6000                       		bra.s	loc_B01C
0000CB04                            ; ===========================================================================
0000CB04                            
0000CB04                            loc_B010:
0000CB04 5800                       		addq.b	#4,d0
0000CB06 0C00 0040                  		cmpi.b	#$40,d0
0000CB0A 6500                       		bcs.s	loc_B01C
0000CB0C 103C 0040                  		move.b	#$40,d0
0000CB10                            
0000CB10                            loc_B01C:
0000CB10 1140 0034                  		move.b	d0,$34(a0)
0000CB14 4EB9 0000 2B7C             		jsr	(CalcSine).l
0000CB1A E848                       		lsr.w	#4,d0
0000CB1C 3200                       		move.w	d0,d1
0000CB1E D068 002C                  		add.w	$2C(a0),d0
0000CB22 3140 000C                  		move.w	d0,$C(a0)
0000CB26 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CB2C 6600                       		bne.s	loc_B07A
0000CB2E 4A28 0035                  		tst.b	$35(a0)
0000CB32 6600                       		bne.s	loc_B07A
0000CB34 117C 0001 0035             		move.b	#1,$35(a0)
0000CB3A 6100 0000                  		bsr.w	SingleObjLoad2
0000CB3E 6600                       		bne.s	loc_B07A
0000CB40 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000CB44 3368 0008 0008             		move.w	8(a0),8(a1)
0000CB4A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000CB50 5069 002C                  		addq.w	#8,$2C(a1)
0000CB54 5769 002C                  		subq.w	#3,$2C(a1)
0000CB58 0469 0040 0008             		subi.w	#$40,8(a1)
0000CB5E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CB64 2348 0038                  		move.l	a0,$38(a1)
0000CB68 2448                       		movea.l	a0,a2
0000CB6A 6100                       		bsr.s	sub_B09C
0000CB6C                            
0000CB6C                            loc_B07A:
0000CB6C 7400                       		moveq	#0,d2
0000CB6E 45E8 0036                  		lea	$36(a0),a2
0000CB72 141A                       		move.b	(a2)+,d2
0000CB74 5302                       		subq.b	#1,d2
0000CB76 6500                       		bcs.s	locret_B09A
0000CB78                            
0000CB78                            loc_B086:
0000CB78 7000                       		moveq	#0,d0
0000CB7A 101A                       		move.b	(a2)+,d0
0000CB7C ED48                       		lsl.w	#6,d0
0000CB7E 0640 D000                  		addi.w	#-$3000,d0
0000CB82 3240                       		movea.w	d0,a1
0000CB84 3341 003C                  		move.w	d1,$3C(a1)
0000CB88 51CA FFEE                  		dbf	d2,loc_B086
0000CB8C                            
0000CB8C                            locret_B09A:
0000CB8C 4E75                       		rts	
0000CB8E                            
0000CB8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CB8E                            
0000CB8E                            
0000CB8E                            sub_B09C:
0000CB8E 45EA 0036                  		lea	$36(a2),a2
0000CB92 7000                       		moveq	#0,d0
0000CB94 1012                       		move.b	(a2),d0
0000CB96 5212                       		addq.b	#1,(a2)
0000CB98 45F2 0001                  		lea	1(a2,d0.w),a2
0000CB9C 3009                       		move.w	a1,d0
0000CB9E 0440 D000                  		subi.w	#-$3000,d0
0000CBA2 EC48                       		lsr.w	#6,d0
0000CBA4 0240 007F                  		andi.w	#$7F,d0
0000CBA8 1480                       		move.b	d0,(a2)
0000CBAA 4E75                       		rts	
0000CBAC                            ; End of function sub_B09C
0000CBAC                            
0000CBAC                            ; ===========================================================================
0000CBAC                            
0000CBAC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000CBAC 4A28 0035                  		tst.b	$35(a0)
0000CBB0 6700                       		beq.s	loc_B0C6
0000CBB2 4A28 0001                  		tst.b	1(a0)
0000CBB6 6A00                       		bpl.s	Obj2F_DelFlames
0000CBB8                            
0000CBB8                            loc_B0C6:
0000CBB8 3028 002A                  		move.w	$2A(a0),d0
0000CBBC 0240 FF80                  		andi.w	#$FF80,d0
0000CBC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CBC4 0441 0080                  		subi.w	#$80,d1
0000CBC8 0241 FF80                  		andi.w	#$FF80,d1
0000CBCC 9041                       		sub.w	d1,d0
0000CBCE 0C40 0280                  		cmpi.w	#$280,d0
0000CBD2 6200 0000                  		bhi.w	DeleteObject
0000CBD6 4E75                       		rts	
0000CBD8                            ; ===========================================================================
0000CBD8                            
0000CBD8                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000CBD8 7400                       		moveq	#0,d2
0000CBDA                            
0000CBDA                            loc_B0E8:
0000CBDA 45E8 0036                  		lea	$36(a0),a2
0000CBDE 1412                       		move.b	(a2),d2
0000CBE0 421A                       		clr.b	(a2)+
0000CBE2 5302                       		subq.b	#1,d2
0000CBE4 6500                       		bcs.s	locret_B116
0000CBE6                            
0000CBE6                            loc_B0F4:
0000CBE6 7000                       		moveq	#0,d0
0000CBE8 1012                       		move.b	(a2),d0
0000CBEA 421A                       		clr.b	(a2)+
0000CBEC ED48                       		lsl.w	#6,d0
0000CBEE 0640 D000                  		addi.w	#-$3000,d0
0000CBF2 3240                       		movea.w	d0,a1
0000CBF4 6100 0000                  		bsr.w	DeleteObject2
0000CBF8 51CA FFEC                  		dbf	d2,loc_B0F4
0000CBFC 117C 0000 0035             		move.b	#0,$35(a0)
0000CC02 117C 0000 0034             		move.b	#0,$34(a0)
0000CC08                            
0000CC08                            locret_B116:
0000CC08 4E75                       		rts	
0000CC0A                            ; ===========================================================================
0000CC0A                            ; ---------------------------------------------------------------------------
0000CC0A                            ; Collision data for large moving platforms (MZ)
0000CC0A                            ; ---------------------------------------------------------------------------
0000CC0A                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000CC56                            		even
0000CC56                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000CC82                            		even
0000CC82                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000CCCE                            		even
0000CCCE                            ; ===========================================================================
0000CCCE                            ; ---------------------------------------------------------------------------
0000CCCE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CCCE                            ; (appears when	you walk on sinking platforms)
0000CCCE                            ; ---------------------------------------------------------------------------
0000CCCE                            
0000CCCE                            Obj35:					; XREF: Obj_Index
0000CCCE 7000                       		moveq	#0,d0
0000CCD0 1028 0024                  		move.b	$24(a0),d0
0000CCD4 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000CCD8 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000CCDC                            ; ===========================================================================
0000CCDC 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000CCDE 0000                       		dc.w loc_B238-Obj35_Index
0000CCE0 0000                       		dc.w Obj35_Move-Obj35_Index
0000CCE2                            ; ===========================================================================
0000CCE2                            
0000CCE2                            Obj35_Main:				; XREF: Obj35_Index
0000CCE2 5428 0024                  		addq.b	#2,$24(a0)
0000CCE6 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000CCEE 317C 0345 0002             		move.w	#$345,2(a0)
0000CCF4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000CCFA 117C 0004 0001             		move.b	#4,1(a0)
0000CD00 117C 0001 0018             		move.b	#1,$18(a0)
0000CD06 117C 008B 0020             		move.b	#$8B,$20(a0)
0000CD0C 117C 0008 0019             		move.b	#8,$19(a0)
0000CD12 303C 00C8                  		move.w	#$C8,d0
0000CD16 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
0000CD1C 4A28 0028                  		tst.b	$28(a0)
0000CD20 6700                       		beq.s	loc_B238
0000CD22 5428 0024                  		addq.b	#2,$24(a0)
0000CD26 6000 0000                  		bra.w	Obj35_Move
0000CD2A                            ; ===========================================================================
0000CD2A                            
0000CD2A                            loc_B238:				; XREF: Obj35_Index
0000CD2A 2268 0030                  		movea.l	$30(a0),a1
0000CD2E 3228 0008                  		move.w	8(a0),d1
0000CD32 9268 002A                  		sub.w	$2A(a0),d1
0000CD36 0641 000C                  		addi.w	#$C,d1
0000CD3A 3001                       		move.w	d1,d0
0000CD3C E248                       		lsr.w	#1,d0
0000CD3E 1031 0000                  		move.b	(a1,d0.w),d0
0000CD42 4440                       		neg.w	d0
0000CD44 D068 002C                  		add.w	$2C(a0),d0
0000CD48 3400                       		move.w	d0,d2
0000CD4A D068 003C                  		add.w	$3C(a0),d0
0000CD4E 3140 000C                  		move.w	d0,$C(a0)
0000CD52 0C41 0084                  		cmpi.w	#$84,d1
0000CD56 6400                       		bcc.s	loc_B2B0
0000CD58 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD60 0C41 0080                  		cmpi.w	#$80,d1
0000CD64 6400                       		bcc.s	loc_B2B0
0000CD66 2028 0008                  		move.l	8(a0),d0
0000CD6A 0680 0008 0000             		addi.l	#$80000,d0
0000CD70 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000CD76 6600                       		bne.s	loc_B2B0
0000CD78 6100 0000                  		bsr.w	SingleObjLoad2
0000CD7C 6600                       		bne.s	loc_B2B0
0000CD7E 12BC 0035                  		move.b	#$35,0(a1)
0000CD82 3368 0008 0008             		move.w	8(a0),8(a1)
0000CD88 3342 002C                  		move.w	d2,$2C(a1)
0000CD8C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000CD92 137C 0001 0028             		move.b	#1,$28(a1)
0000CD98 2468 0038                  		movea.l	$38(a0),a2
0000CD9C 6100 FDF0                  		bsr.w	sub_B09C
0000CDA0                            
0000CDA0                            loc_B2B0:
0000CDA0 6000                       		bra.s	Obj35_Animate
0000CDA2                            ; ===========================================================================
0000CDA2                            
0000CDA2                            Obj35_Move:				; XREF: Obj35_Index
0000CDA2 3028 002C                  		move.w	$2C(a0),d0
0000CDA6 D068 003C                  		add.w	$3C(a0),d0
0000CDAA 3140 000C                  		move.w	d0,$C(a0)
0000CDAE                            
0000CDAE                            Obj35_Animate:				; XREF: loc_B238
0000CDAE 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000CDB4 6100 F456                  		bsr.w	AnimateSprite
0000CDB8 6000 0000                  		bra.w	DisplaySprite
0000CDBC                            ; ===========================================================================
0000CDBC                            Ani_obj35:
0000CDBC                            	include "_anim\obj35.asm"
0000CDBC                            ; ---------------------------------------------------------------------------
0000CDBC                            ; Animation script - fireball that sits on the	floor (MZ)
0000CDBC                            ; ---------------------------------------------------------------------------
0000CDBC 0000                       		dc.w byte_B2CE-Ani_obj35
0000CDBE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000CDC4                            		even
0000CDC4                            		even
0000CDC4                            
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            ; Sprite mappings - large moving platforms (MZ)
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            Map_obj2F:
0000CDC4                            	include "_maps\obj2F.asm"
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            ; Sprite mappings - large moving platforms (MZ)
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4 0000                       		dc.w byte_B2DA-Map_obj2F
0000CDC6 0000                       		dc.w byte_B31C-Map_obj2F
0000CDC8 0000                       		dc.w byte_B34F-Map_obj2F
0000CDCA 0D                         byte_B2DA:	dc.b $D
0000CDCB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000CDD0 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000CDD5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CDDA D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000CDDF F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000CDE4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CDE9 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000CDEE D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000CDF3 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000CDF8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CDFD 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000CE02 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000CE07 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000CE0C 0A                         byte_B31C:	dc.b $A
0000CE0D D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000CE12 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000CE17 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CE1C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000CE21 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000CE26 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CE2B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000CE30 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000CE35 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000CE3A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000CE3F 06                         byte_B34F:	dc.b 6
0000CE40 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000CE45 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CE4A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000CE4F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000CE54 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CE59 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000CE5E                            		even
0000CE5E                            		even
0000CE5E                            
0000CE5E                            ; ---------------------------------------------------------------------------
0000CE5E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CE5E                            ; ---------------------------------------------------------------------------
0000CE5E                            Map_obj14:
0000CE5E                            	include "_maps\obj14.asm"
0000CE5E                            ; ---------------------------------------------------------------------------
0000CE5E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CE5E                            ; ---------------------------------------------------------------------------
0000CE5E 0000                       		dc.w byte_B37A-Map_obj14
0000CE60 0000                       		dc.w byte_B380-Map_obj14
0000CE62 0000                       		dc.w byte_B386-Map_obj14
0000CE64 0000                       		dc.w byte_B38C-Map_obj14
0000CE66 0000                       		dc.w byte_B392-Map_obj14
0000CE68 0000                       		dc.w byte_B398-Map_obj14
0000CE6A 01                         byte_B37A:	dc.b 1
0000CE6B E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000CE70 01                         byte_B380:	dc.b 1
0000CE71 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000CE76 01                         byte_B386:	dc.b 1
0000CE77 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000CE7C 01                         byte_B38C:	dc.b 1
0000CE7D F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000CE82 01                         byte_B392:	dc.b 1
0000CE83 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000CE88 01                         byte_B398:	dc.b 1
0000CE89 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000CE8E                            		even
0000CE8E                            		even
0000CE8E                            
0000CE8E                            ; ===========================================================================
0000CE8E                            ; ---------------------------------------------------------------------------
0000CE8E                            ; Object 30 - large green glassy blocks	(MZ)
0000CE8E                            ; ---------------------------------------------------------------------------
0000CE8E                            
0000CE8E                            Obj30:					; XREF: Obj_Index
0000CE8E 7000                       		moveq	#0,d0
0000CE90 1028 0024                  		move.b	$24(a0),d0
0000CE94 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000CE98 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000CE9C 3028 0008                  		move.w	8(a0),d0
0000CEA0 0240 FF80                  		andi.w	#$FF80,d0
0000CEA4 3238 F700                  		move.w	($FFFFF700).w,d1
0000CEA8 0441 0080                  		subi.w	#$80,d1
0000CEAC 0241 FF80                  		andi.w	#$FF80,d1
0000CEB0 9041                       		sub.w	d1,d0
0000CEB2 0C40 0280                  		cmpi.w	#$280,d0
0000CEB6 6200 0000                  		bhi.w	Obj30_Delete
0000CEBA 6000 0000                  		bra.w	DisplaySprite
0000CEBE                            ; ===========================================================================
0000CEBE                            
0000CEBE                            Obj30_Delete:
0000CEBE 6000 0000                  		bra.w	DeleteObject
0000CEC2                            ; ===========================================================================
0000CEC2 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000CEC4 0000                       		dc.w Obj30_Block012-Obj30_Index
0000CEC6 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000CEC8 0000                       		dc.w Obj30_Block34-Obj30_Index
0000CECA 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000CECC                            
0000CECC 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000CECF 0400 01                    		dc.b 4,	0, 1
0000CED2 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000CED5 0800 01                    		dc.b 8,	0, 1
0000CED8                            ; ===========================================================================
0000CED8                            
0000CED8                            Obj30_Main:				; XREF: Obj30_Index
0000CED8 45F9 0000 CECC             		lea	(Obj30_Vars1).l,a2
0000CEDE 7201                       		moveq	#1,d1
0000CEE0 117C 0048 0016             		move.b	#$48,$16(a0)
0000CEE6 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000CEEC 6500                       		bcs.s	loc_B40C	; if yes, branch
0000CEEE 45F9 0000 CED2             		lea	(Obj30_Vars2).l,a2
0000CEF4 7201                       		moveq	#1,d1
0000CEF6 117C 0038 0016             		move.b	#$38,$16(a0)
0000CEFC                            
0000CEFC                            loc_B40C:
0000CEFC 2248                       		movea.l	a0,a1
0000CEFE 6000                       		bra.s	Obj30_Load	; load main object
0000CF00                            ; ===========================================================================
0000CF00                            
0000CF00                            Obj30_Loop:
0000CF00 6100 0000                  		bsr.w	SingleObjLoad2
0000CF04 6600                       		bne.s	loc_B480
0000CF06                            
0000CF06                            Obj30_Load:				; XREF: Obj30_Main
0000CF06 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF0A 12BC 0030                  		move.b	#$30,0(a1)
0000CF0E 3368 0008 0008             		move.w	8(a0),8(a1)
0000CF14 101A                       		move.b	(a2)+,d0
0000CF16 4880                       		ext.w	d0
0000CF18 D068 000C                  		add.w	$C(a0),d0
0000CF1C 3340 000C                  		move.w	d0,$C(a1)
0000CF20 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000CF28 337C C38E 0002             		move.w	#$C38E,2(a1)
0000CF2E 137C 0004 0001             		move.b	#4,1(a1)
0000CF34 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CF3A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CF40 137C 0020 0019             		move.b	#$20,$19(a1)
0000CF46 137C 0004 0018             		move.b	#4,$18(a1)
0000CF4C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF50 2348 003C                  		move.l	a0,$3C(a1)
0000CF54 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000CF58                            
0000CF58 137C 0010 0019             		move.b	#$10,$19(a1)
0000CF5E 137C 0003 0018             		move.b	#3,$18(a1)
0000CF64 5029 0028                  		addq.b	#8,$28(a1)
0000CF68 0229 000F 0028             		andi.b	#$F,$28(a1)
0000CF6E                            
0000CF6E                            loc_B480:
0000CF6E 317C 0090 0032             		move.w	#$90,$32(a0)
0000CF74 08E8 0004 0001             		bset	#4,1(a0)
0000CF7A                            
0000CF7A                            Obj30_Block012:				; XREF: Obj30_Index
0000CF7A 6100 0000                  		bsr.w	Obj30_Types
0000CF7E 323C 002B                  		move.w	#$2B,d1
0000CF82 343C 0048                  		move.w	#$48,d2
0000CF86 363C 0049                  		move.w	#$49,d3
0000CF8A 3828 0008                  		move.w	8(a0),d4
0000CF8E 6000 0000                  		bra.w	SolidObject
0000CF92                            ; ===========================================================================
0000CF92                            
0000CF92                            Obj30_Reflect012:			; XREF: Obj30_Index
0000CF92 2268 003C                  		movea.l	$3C(a0),a1
0000CF96 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CF9C 6000 0000                  		bra.w	Obj30_Types
0000CFA0                            ; ===========================================================================
0000CFA0                            
0000CFA0                            Obj30_Block34:				; XREF: Obj30_Index
0000CFA0 6100 0000                  		bsr.w	Obj30_Types
0000CFA4 323C 002B                  		move.w	#$2B,d1
0000CFA8 343C 0038                  		move.w	#$38,d2
0000CFAC 363C 0039                  		move.w	#$39,d3
0000CFB0 3828 0008                  		move.w	8(a0),d4
0000CFB4 6000 0000                  		bra.w	SolidObject
0000CFB8                            ; ===========================================================================
0000CFB8                            
0000CFB8                            Obj30_Reflect34:			; XREF: Obj30_Index
0000CFB8 2268 003C                  		movea.l	$3C(a0),a1
0000CFBC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CFC2 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000CFC8 6000 0002                  		bra.w	*+4
0000CFCC                            
0000CFCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CFCC                            
0000CFCC                            
0000CFCC                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000CFCC 7000                       		moveq	#0,d0
0000CFCE 1028 0028                  		move.b	$28(a0),d0
0000CFD2 0240 0007                  		andi.w	#7,d0
0000CFD6 D040                       		add.w	d0,d0
0000CFD8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000CFDC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000CFE0                            ; End of function Obj30_Types
0000CFE0                            
0000CFE0                            ; ===========================================================================
0000CFE0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000CFE2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000CFE4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000CFE6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000CFE8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000CFEA                            ; ===========================================================================
0000CFEA                            
0000CFEA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000CFEA 4E75                       		rts	
0000CFEC                            ; ===========================================================================
0000CFEC                            
0000CFEC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000CFEC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CFF0 323C 0040                  		move.w	#$40,d1
0000CFF4 6000                       		bra.s	loc_B514
0000CFF6                            ; ===========================================================================
0000CFF6                            
0000CFF6                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000CFF6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CFFA 323C 0040                  		move.w	#$40,d1
0000CFFE 4440                       		neg.w	d0
0000D000 D041                       		add.w	d1,d0
0000D002                            
0000D002                            loc_B514:				; XREF: Obj30_Type01
0000D002 0828 0003 0028             		btst	#3,$28(a0)
0000D008 6700                       		beq.s	loc_B526
0000D00A 4440                       		neg.w	d0
0000D00C D041                       		add.w	d1,d0
0000D00E E208                       		lsr.b	#1,d0
0000D010 0640 0020                  		addi.w	#$20,d0
0000D014                            
0000D014                            loc_B526:
0000D014 6000 0000                  		bra.w	loc_B5EE
0000D018                            ; ===========================================================================
0000D018                            
0000D018                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000D018 0828 0003 0028             		btst	#3,$28(a0)
0000D01E 6700                       		beq.s	loc_B53E
0000D020 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000D024 0440 0010                  		subi.w	#$10,d0
0000D028 6000 0000                  		bra.w	loc_B5EE
0000D02C                            ; ===========================================================================
0000D02C                            
0000D02C                            loc_B53E:
0000D02C 0828 0003 0022             		btst	#3,$22(a0)
0000D032 6600                       		bne.s	loc_B54E
0000D034 08A8 0000 0034             		bclr	#0,$34(a0)
0000D03A 6000                       		bra.s	loc_B582
0000D03C                            ; ===========================================================================
0000D03C                            
0000D03C                            loc_B54E:
0000D03C 4A28 0034                  		tst.b	$34(a0)
0000D040 6600                       		bne.s	loc_B582
0000D042 117C 0001 0034             		move.b	#1,$34(a0)
0000D048 08E8 0000 0035             		bset	#0,$35(a0)
0000D04E 6700                       		beq.s	loc_B582
0000D050 08E8 0007 0034             		bset	#7,$34(a0)
0000D056 317C 0010 0036             		move.w	#$10,$36(a0)
0000D05C 117C 000A 0038             		move.b	#$A,$38(a0)
0000D062 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000D068 6600                       		bne.s	loc_B582
0000D06A 317C 0040 0036             		move.w	#$40,$36(a0)
0000D070                            
0000D070                            loc_B582:
0000D070 4A28 0034                  		tst.b	$34(a0)
0000D074 6A00                       		bpl.s	loc_B5AA
0000D076 4A28 0038                  		tst.b	$38(a0)
0000D07A 6700                       		beq.s	loc_B594
0000D07C 5328 0038                  		subq.b	#1,$38(a0)
0000D080 6600                       		bne.s	loc_B5AA
0000D082                            
0000D082                            loc_B594:
0000D082 4A68 0032                  		tst.w	$32(a0)
0000D086 6700                       		beq.s	loc_B5A4
0000D088 5368 0032                  		subq.w	#1,$32(a0)
0000D08C 5368 0036                  		subq.w	#1,$36(a0)
0000D090 6600                       		bne.s	loc_B5AA
0000D092                            
0000D092                            loc_B5A4:
0000D092 08A8 0007 0034             		bclr	#7,$34(a0)
0000D098                            
0000D098                            loc_B5AA:
0000D098 3028 0032                  		move.w	$32(a0),d0
0000D09C 6000                       		bra.s	loc_B5EE
0000D09E                            ; ===========================================================================
0000D09E                            
0000D09E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000D09E 0828 0003 0028             		btst	#3,$28(a0)
0000D0A4 6700                       		beq.s	Obj30_ChkSwitch
0000D0A6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000D0AA 0440 0010                  		subi.w	#$10,d0
0000D0AE 6000                       		bra.s	loc_B5EE
0000D0B0                            ; ===========================================================================
0000D0B0                            
0000D0B0                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000D0B0 4A28 0034                  		tst.b	$34(a0)
0000D0B4 6600                       		bne.s	loc_B5E0
0000D0B6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000D0BA 7000                       		moveq	#0,d0
0000D0BC 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000D0C0 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D0C2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D0C6 6700                       		beq.s	loc_B5EA	; if not, branch
0000D0C8 117C 0001 0034             		move.b	#1,$34(a0)
0000D0CE                            
0000D0CE                            loc_B5E0:
0000D0CE 4A68 0032                  		tst.w	$32(a0)
0000D0D2 6700                       		beq.s	loc_B5EA
0000D0D4 5568 0032                  		subq.w	#2,$32(a0)
0000D0D8                            
0000D0D8                            loc_B5EA:
0000D0D8 3028 0032                  		move.w	$32(a0),d0
0000D0DC                            
0000D0DC                            loc_B5EE:
0000D0DC 3228 0030                  		move.w	$30(a0),d1
0000D0E0 9240                       		sub.w	d0,d1
0000D0E2 3141 000C                  		move.w	d1,$C(a0)
0000D0E6 4E75                       		rts	
0000D0E8                            ; ===========================================================================
0000D0E8                            ; ---------------------------------------------------------------------------
0000D0E8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D0E8                            ; ---------------------------------------------------------------------------
0000D0E8                            Map_obj30:
0000D0E8                            	include "_maps\obj30.asm"
0000D0E8                            ; ---------------------------------------------------------------------------
0000D0E8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D0E8                            ; ---------------------------------------------------------------------------
0000D0E8 0000                       		dc.w byte_B600-Map_obj30
0000D0EA 0000                       		dc.w byte_B63D-Map_obj30
0000D0EC 0000                       		dc.w byte_B648-Map_obj30
0000D0EE 0C                         byte_B600:	dc.b $C
0000D0EF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000D0F4 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000D0F9 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000D0FE C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000D103 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000D108 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000D10D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000D112 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000D117 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000D11C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000D121 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000D126 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000D12B 02                         byte_B63D:	dc.b 2
0000D12C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000D131 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000D136 0A                         byte_B648:	dc.b $A
0000D137 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000D13C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000D141 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000D146 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000D14B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000D150 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000D155 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000D15A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000D15F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000D164 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000D16A 00                         		even
0000D16A 00                         		even
0000D16A                            
0000D16A                            ; ===========================================================================
0000D16A                            ; ---------------------------------------------------------------------------
0000D16A                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D16A                            ; ---------------------------------------------------------------------------
0000D16A                            
0000D16A                            Obj31:					; XREF: Obj_Index
0000D16A 7000                       		moveq	#0,d0
0000D16C 1028 0024                  		move.b	$24(a0),d0
0000D170 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000D174 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000D178                            ; ===========================================================================
0000D178 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000D17A 0000                       		dc.w loc_B798-Obj31_Index
0000D17C 0000                       		dc.w loc_B7FE-Obj31_Index
0000D17E 0000                       		dc.w Obj31_Display2-Obj31_Index
0000D180 0000                       		dc.w loc_B7E2-Obj31_Index
0000D182                            
0000D182 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D184 0100                       		dc.b 1,	0
0000D186                            
0000D186 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000D189 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000D18C 08CC 03                    		dc.b 8,	$CC, 3
0000D18F 06F0 02                    		dc.b 6,	$F0, 2
0000D192                            
0000D192 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D196 5000 7800                  		dc.w $5000, $7800
0000D19A 3800 5800                  		dc.w $3800, $5800
0000D19E B800                       		dc.w $B800
0000D1A0                            ; ===========================================================================
0000D1A0                            
0000D1A0                            Obj31_Main:				; XREF: Obj31_Index
0000D1A0 7000                       		moveq	#0,d0
0000D1A2 1028 0028                  		move.b	$28(a0),d0
0000D1A6 6A00                       		bpl.s	loc_B6CE
0000D1A8 0240 007F                  		andi.w	#$7F,d0
0000D1AC D040                       		add.w	d0,d0
0000D1AE 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000D1B2 115A 003A                  		move.b	(a2)+,$3A(a0)
0000D1B6 101A                       		move.b	(a2)+,d0
0000D1B8 1140 0028                  		move.b	d0,$28(a0)
0000D1BC                            
0000D1BC                            loc_B6CE:
0000D1BC 0200 000F                  		andi.b	#$F,d0
0000D1C0 D040                       		add.w	d0,d0
0000D1C2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D1C6 4A40                       		tst.w	d0
0000D1C8 6600                       		bne.s	loc_B6E0
0000D1CA 3142 0032                  		move.w	d2,$32(a0)
0000D1CE                            
0000D1CE                            loc_B6E0:
0000D1CE 45F9 0000 D186             		lea	(Obj31_Var).l,a2
0000D1D4 2248                       		movea.l	a0,a1
0000D1D6 7203                       		moveq	#3,d1
0000D1D8 6000                       		bra.s	Obj31_MakeStomper
0000D1DA                            ; ===========================================================================
0000D1DA                            
0000D1DA                            Obj31_Loop:
0000D1DA 6100 0000                  		bsr.w	SingleObjLoad2
0000D1DE 6600 0000                  		bne.w	Obj31_SetSize
0000D1E2                            
0000D1E2                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000D1E2 135A 0024                  		move.b	(a2)+,$24(a1)
0000D1E6 12BC 0031                  		move.b	#$31,0(a1)
0000D1EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000D1F0 101A                       		move.b	(a2)+,d0
0000D1F2 4880                       		ext.w	d0
0000D1F4 D068 000C                  		add.w	$C(a0),d0
0000D1F8 3340 000C                  		move.w	d0,$C(a1)
0000D1FC 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000D204 337C 0300 0002             		move.w	#$300,2(a1)
0000D20A 137C 0004 0001             		move.b	#4,1(a1)
0000D210 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000D216 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D21C 137C 0010 0019             		move.b	#$10,$19(a1)
0000D222 3342 0034                  		move.w	d2,$34(a1)
0000D226 137C 0004 0018             		move.b	#4,$18(a1)
0000D22C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D230 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000D236 6600                       		bne.s	loc_B76A
0000D238 5341                       		subq.w	#1,d1
0000D23A 1028 0028                  		move.b	$28(a0),d0
0000D23E 0240 00F0                  		andi.w	#$F0,d0
0000D242 0C40 0020                  		cmpi.w	#$20,d0
0000D246 679A                       		beq.s	Obj31_MakeStomper
0000D248 137C 0038 0019             		move.b	#$38,$19(a1)
0000D24E 137C 0090 0020             		move.b	#$90,$20(a1)
0000D254 5241                       		addq.w	#1,d1
0000D256                            
0000D256                            loc_B76A:
0000D256 2348 003C                  		move.l	a0,$3C(a1)
0000D25A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000D25E                            
0000D25E 137C 0003 0018             		move.b	#3,$18(a1)
0000D264                            
0000D264                            Obj31_SetSize:
0000D264 7000                       		moveq	#0,d0
0000D266 1028 0028                  		move.b	$28(a0),d0
0000D26A E648                       		lsr.w	#3,d0
0000D26C 0200 000E                  		andi.b	#$E,d0
0000D270 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000D274 115A 0019                  		move.b	(a2)+,$19(a0)
0000D278 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D27C 6000                       		bra.s	loc_B798
0000D27E                            ; ===========================================================================
0000D27E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000D280 3009                       		dc.b $30, 9
0000D282 100A                       		dc.b $10, $A
0000D284                            ; ===========================================================================
0000D284                            
0000D284                            loc_B798:				; XREF: Obj31_Index
0000D284 6100 0000                  		bsr.w	Obj31_Types
0000D288 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000D28E 7200                       		moveq	#0,d1
0000D290 1228 0019                  		move.b	$19(a0),d1
0000D294 0641 000B                  		addi.w	#$B,d1
0000D298 343C 000C                  		move.w	#$C,d2
0000D29C 363C 000D                  		move.w	#$D,d3
0000D2A0 3828 0008                  		move.w	8(a0),d4
0000D2A4 6100 0000                  		bsr.w	SolidObject
0000D2A8 0828 0003 0022             		btst	#3,$22(a0)
0000D2AE 6700                       		beq.s	Obj31_Display
0000D2B0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D2B6 6400                       		bcc.s	Obj31_Display
0000D2B8 2448                       		movea.l	a0,a2
0000D2BA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D2BE 4EB9 0000 0000             		jsr	KillSonic
0000D2C4 204A                       		movea.l	a2,a0
0000D2C6                            
0000D2C6                            Obj31_Display:
0000D2C6 6100 0000                  		bsr.w	DisplaySprite
0000D2CA 6000 0000                  		bra.w	Obj31_ChkDel
0000D2CE                            ; ===========================================================================
0000D2CE                            
0000D2CE                            loc_B7E2:				; XREF: Obj31_Index
0000D2CE 117C 0080 0016             		move.b	#$80,$16(a0)
0000D2D4 08E8 0004 0001             		bset	#4,1(a0)
0000D2DA 2268 003C                  		movea.l	$3C(a0),a1
0000D2DE 1029 0032                  		move.b	$32(a1),d0
0000D2E2 EA08                       		lsr.b	#5,d0
0000D2E4 5600                       		addq.b	#3,d0
0000D2E6 1140 001A                  		move.b	d0,$1A(a0)
0000D2EA                            
0000D2EA                            loc_B7FE:				; XREF: Obj31_Index
0000D2EA 2268 003C                  		movea.l	$3C(a0),a1
0000D2EE 7000                       		moveq	#0,d0
0000D2F0 1029 0032                  		move.b	$32(a1),d0
0000D2F4 D068 0030                  		add.w	$30(a0),d0
0000D2F8 3140 000C                  		move.w	d0,$C(a0)
0000D2FC                            
0000D2FC                            Obj31_Display2:				; XREF: Obj31_Index
0000D2FC 6100 0000                  		bsr.w	DisplaySprite
0000D300                            
0000D300                            Obj31_ChkDel:				; XREF: Obj31_Display
0000D300 3028 0008                  		move.w	8(a0),d0
0000D304 0240 FF80                  		andi.w	#$FF80,d0
0000D308 3238 F700                  		move.w	($FFFFF700).w,d1
0000D30C 0441 0080                  		subi.w	#$80,d1
0000D310 0241 FF80                  		andi.w	#$FF80,d1
0000D314 9041                       		sub.w	d1,d0
0000D316 0C40 0280                  		cmpi.w	#$280,d0
0000D31A 6200 0000                  		bhi.w	DeleteObject
0000D31E 4E75                       		rts	
0000D320                            ; ===========================================================================
0000D320                            
0000D320                            Obj31_Types:				; XREF: loc_B798
0000D320 1028 0028                  		move.b	$28(a0),d0
0000D324 0240 000F                  		andi.w	#$F,d0
0000D328 D040                       		add.w	d0,d0
0000D32A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000D32E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000D332                            ; ===========================================================================
0000D332 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000D334 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D336 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D338 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D33A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D33C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D33E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D340                            ; ===========================================================================
0000D340                            
0000D340                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000D340 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000D344 7000                       		moveq	#0,d0
0000D346 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000D34A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D34E 6700                       		beq.s	loc_B8A8	; if not, branch
0000D350 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000D354 6A00                       		bpl.s	loc_B872
0000D356 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D35C 6700                       		beq.s	loc_B8A0
0000D35E                            
0000D35E                            loc_B872:
0000D35E 4A68 0032                  		tst.w	$32(a0)
0000D362 6700                       		beq.s	loc_B8A0
0000D364 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D368 0200 000F                  		andi.b	#$F,d0
0000D36C 6600                       		bne.s	loc_B892
0000D36E 4A28 0001                  		tst.b	1(a0)
0000D372 6A00                       		bpl.s	loc_B892
0000D374 303C 00C7                  		move.w	#$C7,d0
0000D378 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D37E                            
0000D37E                            loc_B892:
0000D37E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D384 6400                       		bcc.s	Obj31_Restart
0000D386 317C 0000 0032             		move.w	#0,$32(a0)
0000D38C                            
0000D38C                            loc_B8A0:
0000D38C 317C 0000 0012             		move.w	#0,$12(a0)
0000D392 6000                       		bra.s	Obj31_Restart
0000D394                            ; ===========================================================================
0000D394                            
0000D394                            loc_B8A8:				; XREF: Obj31_Type00
0000D394 3228 0034                  		move.w	$34(a0),d1
0000D398 B268 0032                  		cmp.w	$32(a0),d1
0000D39C 6700                       		beq.s	Obj31_Restart
0000D39E 3028 0012                  		move.w	$12(a0),d0
0000D3A2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D3A8 D168 0032                  		add.w	d0,$32(a0)
0000D3AC B268 0032                  		cmp.w	$32(a0),d1
0000D3B0 6200                       		bhi.s	Obj31_Restart
0000D3B2 3141 0032                  		move.w	d1,$32(a0)
0000D3B6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D3BC 4A28 0001                  		tst.b	1(a0)
0000D3C0 6A00                       		bpl.s	Obj31_Restart
0000D3C2 303C 00BD                  		move.w	#$BD,d0
0000D3C6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D3CC                            
0000D3CC                            Obj31_Restart:
0000D3CC 7000                       		moveq	#0,d0
0000D3CE 1028 0032                  		move.b	$32(a0),d0
0000D3D2 D068 0030                  		add.w	$30(a0),d0
0000D3D6 3140 000C                  		move.w	d0,$C(a0)
0000D3DA 4E75                       		rts	
0000D3DC                            ; ===========================================================================
0000D3DC                            
0000D3DC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000D3DC 4A68 0036                  		tst.w	$36(a0)
0000D3E0 6700                       		beq.s	loc_B938
0000D3E2 4A68 0038                  		tst.w	$38(a0)
0000D3E6 6700                       		beq.s	loc_B902
0000D3E8 5368 0038                  		subq.w	#1,$38(a0)
0000D3EC 6000                       		bra.s	loc_B97C
0000D3EE                            ; ===========================================================================
0000D3EE                            
0000D3EE                            loc_B902:
0000D3EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3F2 0200 000F                  		andi.b	#$F,d0
0000D3F6 6600                       		bne.s	loc_B91C
0000D3F8 4A28 0001                  		tst.b	1(a0)
0000D3FC 6A00                       		bpl.s	loc_B91C
0000D3FE 303C 00C7                  		move.w	#$C7,d0
0000D402 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D408                            
0000D408                            loc_B91C:
0000D408 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D40E 6400                       		bcc.s	loc_B97C
0000D410 317C 0000 0032             		move.w	#0,$32(a0)
0000D416 317C 0000 0012             		move.w	#0,$12(a0)
0000D41C 317C 0000 0036             		move.w	#0,$36(a0)
0000D422 6000                       		bra.s	loc_B97C
0000D424                            ; ===========================================================================
0000D424                            
0000D424                            loc_B938:				; XREF: Obj31_Type01
0000D424 3228 0034                  		move.w	$34(a0),d1
0000D428 B268 0032                  		cmp.w	$32(a0),d1
0000D42C 6700                       		beq.s	loc_B97C
0000D42E 3028 0012                  		move.w	$12(a0),d0
0000D432 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D438 D168 0032                  		add.w	d0,$32(a0)
0000D43C B268 0032                  		cmp.w	$32(a0),d1
0000D440 6200                       		bhi.s	loc_B97C
0000D442 3141 0032                  		move.w	d1,$32(a0)
0000D446 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D44C 317C 0001 0036             		move.w	#1,$36(a0)
0000D452 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D458 4A28 0001                  		tst.b	1(a0)
0000D45C 6A00                       		bpl.s	loc_B97C
0000D45E 303C 00BD                  		move.w	#$BD,d0
0000D462 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D468                            
0000D468                            loc_B97C:
0000D468 6000 FF62                  		bra.w	Obj31_Restart
0000D46C                            ; ===========================================================================
0000D46C                            
0000D46C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000D46C 3038 D008                  		move.w	($FFFFD008).w,d0
0000D470 9068 0008                  		sub.w	8(a0),d0
0000D474 6400                       		bcc.s	loc_B98C
0000D476 4440                       		neg.w	d0
0000D478                            
0000D478                            loc_B98C:
0000D478 0C40 0090                  		cmpi.w	#$90,d0
0000D47C 6400                       		bcc.s	loc_B996
0000D47E 5228 0028                  		addq.b	#1,$28(a0)
0000D482                            
0000D482                            loc_B996:
0000D482 6000 FF48                  		bra.w	Obj31_Restart
0000D486                            ; ===========================================================================
0000D486                            ; ---------------------------------------------------------------------------
0000D486                            ; Object 45 - spiked metal block from beta version (MZ)
0000D486                            ; ---------------------------------------------------------------------------
0000D486                            
0000D486                            Obj45:					; XREF: Obj_Index
0000D486 7000                       		moveq	#0,d0
0000D488 1028 0024                  		move.b	$24(a0),d0
0000D48C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000D490 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000D494                            ; ===========================================================================
0000D494 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000D496 0000                       		dc.w Obj45_Solid-Obj45_Index
0000D498 0000                       		dc.w loc_BA8E-Obj45_Index
0000D49A 0000                       		dc.w Obj45_Display-Obj45_Index
0000D49C 0000                       		dc.w loc_BA7A-Obj45_Index
0000D49E                            
0000D49E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000D4A1 04E4 01                    		dc.b	4, $E4,	  1
0000D4A4 0834 03                    		dc.b	8, $34,	  3
0000D4A7 0628 02                    		dc.b	6, $28,	  2
0000D4AA                            
0000D4AA 3800                       word_B9BE:	dc.w $3800
0000D4AC A000                       		dc.w -$6000
0000D4AE 5000                       		dc.w $5000
0000D4B0                            ; ===========================================================================
0000D4B0                            
0000D4B0                            Obj45_Main:				; XREF: Obj45_Index
0000D4B0 7000                       		moveq	#0,d0
0000D4B2 1028 0028                  		move.b	$28(a0),d0
0000D4B6 D040                       		add.w	d0,d0
0000D4B8 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000D4BC 45F9 0000 D49E             		lea	(Obj45_Var).l,a2
0000D4C2 2248                       		movea.l	a0,a1
0000D4C4 7203                       		moveq	#3,d1
0000D4C6 6000                       		bra.s	Obj45_Load
0000D4C8                            ; ===========================================================================
0000D4C8                            
0000D4C8                            Obj45_Loop:
0000D4C8 6100 0000                  		bsr.w	SingleObjLoad2
0000D4CC 6600                       		bne.s	loc_BA52
0000D4CE                            
0000D4CE                            Obj45_Load:				; XREF: Obj45_Main
0000D4CE 135A 0024                  		move.b	(a2)+,$24(a1)
0000D4D2 12BC 0045                  		move.b	#$45,0(a1)
0000D4D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D4DC 101A                       		move.b	(a2)+,d0
0000D4DE 4880                       		ext.w	d0
0000D4E0 D068 0008                  		add.w	8(a0),d0
0000D4E4 3340 0008                  		move.w	d0,8(a1)
0000D4E8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000D4F0 337C 0300 0002             		move.w	#$300,2(a1)
0000D4F6 137C 0004 0001             		move.b	#4,1(a1)
0000D4FC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000D502 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000D508 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D50E 137C 0020 0019             		move.b	#$20,$19(a1)
0000D514 3342 0034                  		move.w	d2,$34(a1)
0000D518 137C 0004 0018             		move.b	#4,$18(a1)
0000D51E 0C12 0001                  		cmpi.b	#1,(a2)
0000D522 6600                       		bne.s	loc_BA40
0000D524 137C 0091 0020             		move.b	#$91,$20(a1)
0000D52A                            
0000D52A                            loc_BA40:
0000D52A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D52E 2348 003C                  		move.l	a0,$3C(a1)
0000D532 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000D536                            
0000D536 137C 0003 0018             		move.b	#3,$18(a1)
0000D53C                            
0000D53C                            loc_BA52:
0000D53C 117C 0010 0019             		move.b	#$10,$19(a0)
0000D542                            
0000D542                            Obj45_Solid:				; XREF: Obj45_Index
0000D542 3F28 0008                  		move.w	8(a0),-(sp)
0000D546 6100 0000                  		bsr.w	Obj45_Move
0000D54A 323C 0017                  		move.w	#$17,d1
0000D54E 343C 0020                  		move.w	#$20,d2
0000D552 363C 0020                  		move.w	#$20,d3
0000D556 381F                       		move.w	(sp)+,d4
0000D558 6100 0000                  		bsr.w	SolidObject
0000D55C 6100 0000                  		bsr.w	DisplaySprite
0000D560 6000 0000                  		bra.w	Obj45_ChkDel
0000D564                            ; ===========================================================================
0000D564                            
0000D564                            loc_BA7A:				; XREF: Obj45_Index
0000D564 2268 003C                  		movea.l	$3C(a0),a1
0000D568 1029 0032                  		move.b	$32(a1),d0
0000D56C 0600 0010                  		addi.b	#$10,d0
0000D570 EA08                       		lsr.b	#5,d0
0000D572 5600                       		addq.b	#3,d0
0000D574 1140 001A                  		move.b	d0,$1A(a0)
0000D578                            
0000D578                            loc_BA8E:				; XREF: Obj45_Index
0000D578 2268 003C                  		movea.l	$3C(a0),a1
0000D57C 7000                       		moveq	#0,d0
0000D57E 1029 0032                  		move.b	$32(a1),d0
0000D582 4440                       		neg.w	d0
0000D584 D068 0030                  		add.w	$30(a0),d0
0000D588 3140 0008                  		move.w	d0,8(a0)
0000D58C                            
0000D58C                            Obj45_Display:				; XREF: Obj45_Index
0000D58C 6100 0000                  		bsr.w	DisplaySprite
0000D590                            
0000D590                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000D590 3028 003A                  		move.w	$3A(a0),d0
0000D594 0240 FF80                  		andi.w	#$FF80,d0
0000D598 3238 F700                  		move.w	($FFFFF700).w,d1
0000D59C 0441 0080                  		subi.w	#$80,d1
0000D5A0 0241 FF80                  		andi.w	#$FF80,d1
0000D5A4 9041                       		sub.w	d1,d0
0000D5A6 0C40 0280                  		cmpi.w	#$280,d0
0000D5AA 6200 0000                  		bhi.w	DeleteObject
0000D5AE 4E75                       		rts	
0000D5B0                            
0000D5B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5B0                            
0000D5B0                            
0000D5B0                            Obj45_Move:				; XREF: Obj45_Solid
0000D5B0 7000                       		moveq	#0,d0
0000D5B2 1028 0028                  		move.b	$28(a0),d0
0000D5B6 D040                       		add.w	d0,d0
0000D5B8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D5BC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D5C0                            ; End of function Obj45_Move
0000D5C0                            
0000D5C0                            ; ===========================================================================
0000D5C0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D5C2 0000                       		dc.w loc_BADA-off_BAD6
0000D5C4                            ; ===========================================================================
0000D5C4                            
0000D5C4                            loc_BADA:				; XREF: off_BAD6
0000D5C4 4A68 0036                  		tst.w	$36(a0)
0000D5C8 6700                       		beq.s	loc_BB08
0000D5CA 4A68 0038                  		tst.w	$38(a0)
0000D5CE 6700                       		beq.s	loc_BAEC
0000D5D0 5368 0038                  		subq.w	#1,$38(a0)
0000D5D4 6000                       		bra.s	loc_BB3C
0000D5D6                            ; ===========================================================================
0000D5D6                            
0000D5D6                            loc_BAEC:
0000D5D6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D5DC 6400                       		bcc.s	loc_BB3C
0000D5DE 317C 0000 0032             		move.w	#0,$32(a0)
0000D5E4 317C 0000 0010             		move.w	#0,$10(a0)
0000D5EA 317C 0000 0036             		move.w	#0,$36(a0)
0000D5F0 6000                       		bra.s	loc_BB3C
0000D5F2                            ; ===========================================================================
0000D5F2                            
0000D5F2                            loc_BB08:				; XREF: loc_BADA
0000D5F2 3228 0034                  		move.w	$34(a0),d1
0000D5F6 B268 0032                  		cmp.w	$32(a0),d1
0000D5FA 6700                       		beq.s	loc_BB3C
0000D5FC 3028 0010                  		move.w	$10(a0),d0
0000D600 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D606 D168 0032                  		add.w	d0,$32(a0)
0000D60A B268 0032                  		cmp.w	$32(a0),d1
0000D60E 6200                       		bhi.s	loc_BB3C
0000D610 3141 0032                  		move.w	d1,$32(a0)
0000D614 317C 0000 0010             		move.w	#0,$10(a0)
0000D61A 317C 0001 0036             		move.w	#1,$36(a0)
0000D620 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D626                            
0000D626                            loc_BB3C:
0000D626 7000                       		moveq	#0,d0
0000D628 1028 0032                  		move.b	$32(a0),d0
0000D62C 4440                       		neg.w	d0
0000D62E D068 0030                  		add.w	$30(a0),d0
0000D632 3140 0008                  		move.w	d0,8(a0)
0000D636 4E75                       		rts	
0000D638                            ; ===========================================================================
0000D638                            ; ---------------------------------------------------------------------------
0000D638                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D638                            ; ---------------------------------------------------------------------------
0000D638                            Map_obj31:
0000D638                            	include "_maps\obj31.asm"
0000D638                            ; ---------------------------------------------------------------------------
0000D638                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D638                            ; ---------------------------------------------------------------------------
0000D638 0000                       		dc.w byte_BB64-Map_obj31
0000D63A 0000                       		dc.w byte_BB7E-Map_obj31
0000D63C 0000                       		dc.w byte_BB98-Map_obj31
0000D63E 0000                       		dc.w byte_BB9E-Map_obj31
0000D640 0000                       		dc.w byte_BBA9-Map_obj31
0000D642 0000                       		dc.w byte_BBBE-Map_obj31
0000D644 0000                       		dc.w byte_BBDD-Map_obj31
0000D646 0000                       		dc.w byte_BC06-Map_obj31
0000D648 0000                       		dc.w byte_BC06-Map_obj31
0000D64A 0000                       		dc.w byte_BC39-Map_obj31
0000D64C 0000                       		dc.w byte_BC53-Map_obj31
0000D64E 05                         byte_BB64:	dc.b 5
0000D64F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D654 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D659 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D65E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D663 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D668 05                         byte_BB7E:	dc.b 5
0000D669 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D66E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D673 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D678 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D67D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D682 01                         byte_BB98:	dc.b 1
0000D683 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D688 02                         byte_BB9E:	dc.b 2
0000D689 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D68E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D693 04                         byte_BBA9:	dc.b 4
0000D694 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D699 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D69E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D6A3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D6A8 06                         byte_BBBE:	dc.b 6
0000D6A9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D6AE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D6B3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D6B8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D6BD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D6C2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D6C7 08                         byte_BBDD:	dc.b 8
0000D6C8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D6CD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D6D2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D6D7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D6DC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D6E1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D6E6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D6EB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D6F0 0A                         byte_BC06:	dc.b $A
0000D6F1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D6F6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D6FB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D700 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D705 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D70A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D70F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D714 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D719 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D71E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D723 05                         byte_BC39:	dc.b 5
0000D724 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D729 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D72E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D733 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D738 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D73D 01                         byte_BC53:	dc.b 1
0000D73E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D744 00                         		even
0000D744 00                         		even
0000D744                            
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            Map_obj45:
0000D744                            	include "_maps\obj45.asm"
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D744                            ; ---------------------------------------------------------------------------
0000D744 0000                       		dc.w byte_BC6C-Map_obj45
0000D746 0000                       		dc.w byte_BC7C-Map_obj45
0000D748 0000                       		dc.w byte_BC8C-Map_obj45
0000D74A 0000                       		dc.w byte_BC92-Map_obj45
0000D74C 0000                       		dc.w byte_BC9D-Map_obj45
0000D74E 0000                       		dc.w byte_BCB2-Map_obj45
0000D750 0000                       		dc.w byte_BCD1-Map_obj45
0000D752 0000                       		dc.w byte_BCFA-Map_obj45
0000D754 0000                       		dc.w byte_BCFA-Map_obj45
0000D756 03                         byte_BC6C:	dc.b 3
0000D757 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D75C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D761 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D766 03                         byte_BC7C:	dc.b 3
0000D767 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D76C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D771 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D776 01                         byte_BC8C:	dc.b 1
0000D777 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D77C 02                         byte_BC92:	dc.b 2
0000D77D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D782 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D787 04                         byte_BC9D:	dc.b 4
0000D788 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D78D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D792 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D797 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D79C 06                         byte_BCB2:	dc.b 6
0000D79D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D7A2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D7A7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D7AC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D7B1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D7B6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D7BB 08                         byte_BCD1:	dc.b 8
0000D7BC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D7C1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D7C6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D7CB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D7D0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D7D5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D7DA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D7DF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D7E4 08                         byte_BCFA:	dc.b 8
0000D7E5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D7EA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D7EF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D7F4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D7F9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D7FE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D803 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D808 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D80D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D812 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D818 00                         		even
0000D818 00                         		even
0000D818                            
0000D818                            ; ===========================================================================
0000D818                            ; ---------------------------------------------------------------------------
0000D818                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D818                            ; ---------------------------------------------------------------------------
0000D818                            
0000D818                            Obj32:					; XREF: Obj_Index
0000D818 7000                       		moveq	#0,d0
0000D81A 1028 0024                  		move.b	$24(a0),d0
0000D81E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D822 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D826                            ; ===========================================================================
0000D826 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D828 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D82A                            ; ===========================================================================
0000D82A                            
0000D82A                            Obj32_Main:				; XREF: Obj32_Index
0000D82A 5428 0024                  		addq.b	#2,$24(a0)
0000D82E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D836 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D83C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D842 6700                       		beq.s	loc_BD60
0000D844 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D84A                            
0000D84A                            loc_BD60:
0000D84A 117C 0004 0001             		move.b	#4,1(a0)
0000D850 117C 0010 0019             		move.b	#$10,$19(a0)
0000D856 117C 0004 0018             		move.b	#4,$18(a0)
0000D85C 5668 000C                  		addq.w	#3,$C(a0)
0000D860                            
0000D860                            Obj32_Pressed:				; XREF: Obj32_Index
0000D860 4A28 0001                  		tst.b	1(a0)
0000D864 6A00                       		bpl.s	Obj32_Display
0000D866 323C 001B                  		move.w	#$1B,d1
0000D86A 343C 0005                  		move.w	#5,d2
0000D86E 363C 0005                  		move.w	#5,d3
0000D872 3828 0008                  		move.w	8(a0),d4
0000D876 6100 0000                  		bsr.w	SolidObject
0000D87A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D880 1028 0028                  		move.b	$28(a0),d0
0000D884 0240 000F                  		andi.w	#$F,d0
0000D888 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D88C 47F3 0000                  		lea	(a3,d0.w),a3
0000D890 7600                       		moveq	#0,d3
0000D892 0828 0006 0028             		btst	#6,$28(a0)
0000D898 6700                       		beq.s	loc_BDB2
0000D89A 7607                       		moveq	#7,d3
0000D89C                            
0000D89C                            loc_BDB2:
0000D89C 4A28 0028                  		tst.b	$28(a0)
0000D8A0 6A00                       		bpl.s	loc_BDBE
0000D8A2 6100 0000                  		bsr.w	Obj32_MZBlock
0000D8A6 6600                       		bne.s	loc_BDC8
0000D8A8                            
0000D8A8                            loc_BDBE:
0000D8A8 4A28 0025                  		tst.b	$25(a0)
0000D8AC 6600                       		bne.s	loc_BDC8
0000D8AE 0793                       		bclr	d3,(a3)
0000D8B0 6000                       		bra.s	loc_BDDE
0000D8B2                            ; ===========================================================================
0000D8B2                            
0000D8B2                            loc_BDC8:
0000D8B2 4A13                       		tst.b	(a3)
0000D8B4 6600                       		bne.s	loc_BDD6
0000D8B6 303C 00CD                  		move.w	#$CD,d0
0000D8BA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play switch sound
0000D8C0                            
0000D8C0                            loc_BDD6:
0000D8C0 07D3                       		bset	d3,(a3)
0000D8C2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D8C8                            
0000D8C8                            loc_BDDE:
0000D8C8 0828 0005 0028             		btst	#5,$28(a0)
0000D8CE 6700                       		beq.s	Obj32_Display
0000D8D0 5328 001E                  		subq.b	#1,$1E(a0)
0000D8D4 6A00                       		bpl.s	Obj32_Display
0000D8D6 117C 0007 001E             		move.b	#7,$1E(a0)
0000D8DC 0868 0001 001A             		bchg	#1,$1A(a0)
0000D8E2                            
0000D8E2                            Obj32_Display:
0000D8E2 6100 0000                  		bsr.w	DisplaySprite
0000D8E6 3028 0008                  		move.w	8(a0),d0
0000D8EA 0240 FF80                  		andi.w	#$FF80,d0
0000D8EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8F2 0441 0080                  		subi.w	#$80,d1
0000D8F6 0241 FF80                  		andi.w	#$FF80,d1
0000D8FA 9041                       		sub.w	d1,d0
0000D8FC 0C40 0280                  		cmpi.w	#$280,d0
0000D900 6200 0000                  		bhi.w	Obj32_Delete
0000D904 4E75                       		rts	
0000D906                            ; ===========================================================================
0000D906                            
0000D906                            Obj32_Delete:
0000D906 6100 0000                  		bsr.w	DeleteObject
0000D90A 4E75                       		rts	
0000D90C                            
0000D90C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D90C                            
0000D90C                            
0000D90C                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D90C 3F03                       		move.w	d3,-(sp)
0000D90E 3428 0008                  		move.w	8(a0),d2
0000D912 3628 000C                  		move.w	$C(a0),d3
0000D916 0442 0010                  		subi.w	#$10,d2
0000D91A 5143                       		subq.w	#8,d3
0000D91C 383C 0020                  		move.w	#$20,d4
0000D920 3A3C 0010                  		move.w	#$10,d5
0000D924 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D928 3C3C 005F                  		move.w	#$5F,d6
0000D92C                            
0000D92C                            Obj32_MZLoop:
0000D92C 4A29 0001                  		tst.b	1(a1)
0000D930 6A00                       		bpl.s	loc_BE4E
0000D932 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D936 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D938                            
0000D938                            loc_BE4E:
0000D938 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D93C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D940                            
0000D940 361F                       		move.w	(sp)+,d3
0000D942 7000                       		moveq	#0,d0
0000D944                            
0000D944                            locret_BE5A:
0000D944 4E75                       		rts	
0000D946                            ; ===========================================================================
0000D946 1010                       Obj32_MZData:	dc.b $10, $10
0000D948                            ; ===========================================================================
0000D948                            
0000D948                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D948 7001                       		moveq	#1,d0
0000D94A 0240 003F                  		andi.w	#$3F,d0
0000D94E D040                       		add.w	d0,d0
0000D950 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D954 121A                       		move.b	(a2)+,d1
0000D956 4881                       		ext.w	d1
0000D958 3029 0008                  		move.w	8(a1),d0
0000D95C 9041                       		sub.w	d1,d0
0000D95E 9042                       		sub.w	d2,d0
0000D960 6400                       		bcc.s	loc_BE80
0000D962 D241                       		add.w	d1,d1
0000D964 D041                       		add.w	d1,d0
0000D966 6500                       		bcs.s	loc_BE84
0000D968 60CE                       		bra.s	loc_BE4E
0000D96A                            ; ===========================================================================
0000D96A                            
0000D96A                            loc_BE80:
0000D96A B044                       		cmp.w	d4,d0
0000D96C 62CA                       		bhi.s	loc_BE4E
0000D96E                            
0000D96E                            loc_BE84:
0000D96E 121A                       		move.b	(a2)+,d1
0000D970 4881                       		ext.w	d1
0000D972 3029 000C                  		move.w	$C(a1),d0
0000D976 9041                       		sub.w	d1,d0
0000D978 9043                       		sub.w	d3,d0
0000D97A 6400                       		bcc.s	loc_BE9A
0000D97C D241                       		add.w	d1,d1
0000D97E D041                       		add.w	d1,d0
0000D980 6500                       		bcs.s	loc_BE9E
0000D982 60B4                       		bra.s	loc_BE4E
0000D984                            ; ===========================================================================
0000D984                            
0000D984                            loc_BE9A:
0000D984 B045                       		cmp.w	d5,d0
0000D986 62B0                       		bhi.s	loc_BE4E
0000D988                            
0000D988                            loc_BE9E:
0000D988 361F                       		move.w	(sp)+,d3
0000D98A 7001                       		moveq	#1,d0
0000D98C 4E75                       		rts	
0000D98E                            ; End of function Obj32_MZBlock
0000D98E                            
0000D98E                            ; ===========================================================================
0000D98E                            ; ---------------------------------------------------------------------------
0000D98E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D98E                            ; ---------------------------------------------------------------------------
0000D98E                            Map_obj32:
0000D98E                            	include "_maps\obj32.asm"
0000D98E                            ; ---------------------------------------------------------------------------
0000D98E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D98E                            ; ---------------------------------------------------------------------------
0000D98E 0000                       		dc.w byte_BEAC-Map_obj32
0000D990 0000                       		dc.w byte_BEB7-Map_obj32
0000D992 0000                       		dc.w byte_BEC2-Map_obj32
0000D994 0000                       		dc.w byte_BEB7-Map_obj32
0000D996 02                         byte_BEAC:	dc.b 2
0000D997 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D99C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D9A1 02                         byte_BEB7:	dc.b 2
0000D9A2 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D9A7 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D9AC 02                         byte_BEC2:	dc.b 2
0000D9AD F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D9B2 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D9B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D9BC                            		even
0000D9BC                            		even
0000D9BC                            
0000D9BC                            ; ===========================================================================
0000D9BC                            ; ---------------------------------------------------------------------------
0000D9BC                            ; Object 33 - pushable blocks (MZ, LZ)
0000D9BC                            ; ---------------------------------------------------------------------------
0000D9BC                            
0000D9BC                            Obj33:					; XREF: Obj_Index
0000D9BC 7000                       		moveq	#0,d0
0000D9BE 1028 0024                  		move.b	$24(a0),d0
0000D9C2 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D9C6 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D9CA                            ; ===========================================================================
0000D9CA 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D9CC 0000                       		dc.w loc_BF6E-Obj33_Index
0000D9CE 0000                       		dc.w loc_C02C-Obj33_Index
0000D9D0                            
0000D9D0 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D9D2 4001                       		dc.b $40, 1
0000D9D4                            ; ===========================================================================
0000D9D4                            
0000D9D4                            Obj33_Main:				; XREF: Obj33_Index
0000D9D4 5428 0024                  		addq.b	#2,$24(a0)
0000D9D8 117C 000F 0016             		move.b	#$F,$16(a0)
0000D9DE 117C 000F 0017             		move.b	#$F,$17(a0)
0000D9E4 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D9EC 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D9F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D9F8 6600                       		bne.s	loc_BF16
0000D9FA 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000DA00                            
0000DA00                            loc_BF16:
0000DA00 117C 0004 0001             		move.b	#4,1(a0)
0000DA06 117C 0003 0018             		move.b	#3,$18(a0)
0000DA0C 3168 0008 0034             		move.w	8(a0),$34(a0)
0000DA12 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000DA18 7000                       		moveq	#0,d0
0000DA1A 1028 0028                  		move.b	$28(a0),d0
0000DA1E D040                       		add.w	d0,d0
0000DA20 0240 000E                  		andi.w	#$E,d0
0000DA24 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000DA28 115A 0019                  		move.b	(a2)+,$19(a0)
0000DA2C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000DA30 4A28 0028                  		tst.b	$28(a0)
0000DA34 6700                       		beq.s	Obj33_ChkGone
0000DA36 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000DA3C                            
0000DA3C                            Obj33_ChkGone:
0000DA3C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA40 7000                       		moveq	#0,d0
0000DA42 1028 0023                  		move.b	$23(a0),d0
0000DA46 6700                       		beq.s	loc_BF6E
0000DA48 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DA4E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DA54 6600 0000                  		bne.w	DeleteObject
0000DA58                            
0000DA58                            loc_BF6E:				; XREF: Obj33_Index
0000DA58 4A28 0032                  		tst.b	$32(a0)
0000DA5C 6600 0000                  		bne.w	loc_C046
0000DA60 7200                       		moveq	#0,d1
0000DA62 1228 0019                  		move.b	$19(a0),d1
0000DA66 0641 000B                  		addi.w	#$B,d1
0000DA6A 343C 0010                  		move.w	#$10,d2
0000DA6E 363C 0011                  		move.w	#$11,d3
0000DA72 3828 0008                  		move.w	8(a0),d4
0000DA76 6100 0000                  		bsr.w	loc_C186
0000DA7A 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000DA80 6600                       		bne.s	loc_BFC6	; if not, branch
0000DA82 08A8 0007 0028             		bclr	#7,$28(a0)
0000DA88 3028 0008                  		move.w	8(a0),d0
0000DA8C 0C40 0A20                  		cmpi.w	#$A20,d0
0000DA90 6500                       		bcs.s	loc_BFC6
0000DA92 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000DA96 6400                       		bcc.s	loc_BFC6
0000DA98 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000DA9C 0440 001C                  		subi.w	#$1C,d0
0000DAA0 3140 000C                  		move.w	d0,$C(a0)
0000DAA4 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000DAAA 08E8 0007 0028             		bset	#7,$28(a0)
0000DAB0                            
0000DAB0                            loc_BFC6:
0000DAB0 3028 0008                  		move.w	8(a0),d0
0000DAB4 0240 FF80                  		andi.w	#$FF80,d0
0000DAB8 3238 F700                  		move.w	($FFFFF700).w,d1
0000DABC 0441 0080                  		subi.w	#$80,d1
0000DAC0 0241 FF80                  		andi.w	#$FF80,d1
0000DAC4 9041                       		sub.w	d1,d0
0000DAC6 0C40 0280                  		cmpi.w	#$280,d0
0000DACA 6200                       		bhi.s	loc_BFE6
0000DACC 6000 0000                  		bra.w	DisplaySprite
0000DAD0                            ; ===========================================================================
0000DAD0                            
0000DAD0                            loc_BFE6:
0000DAD0 3028 0034                  		move.w	$34(a0),d0
0000DAD4 0240 FF80                  		andi.w	#$FF80,d0
0000DAD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000DADC 0441 0080                  		subi.w	#$80,d1
0000DAE0 0241 FF80                  		andi.w	#$FF80,d1
0000DAE4 9041                       		sub.w	d1,d0
0000DAE6 0C40 0280                  		cmpi.w	#$280,d0
0000DAEA 6200                       		bhi.s	loc_C016
0000DAEC 3168 0034 0008             		move.w	$34(a0),8(a0)
0000DAF2 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000DAF8 117C 0004 0024             		move.b	#4,$24(a0)
0000DAFE 6000                       		bra.s	loc_C02C
0000DB00                            ; ===========================================================================
0000DB00                            
0000DB00                            loc_C016:
0000DB00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DB04 7000                       		moveq	#0,d0
0000DB06 1028 0023                  		move.b	$23(a0),d0
0000DB0A 6700                       		beq.s	loc_C028
0000DB0C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DB12                            
0000DB12                            loc_C028:
0000DB12 6000 0000                  		bra.w	DeleteObject
0000DB16                            ; ===========================================================================
0000DB16                            
0000DB16                            loc_C02C:				; XREF: Obj33_Index
0000DB16 6100 0000                  		bsr.w	ChkObjOnScreen2
0000DB1A 6700                       		beq.s	locret_C044
0000DB1C 117C 0002 0024             		move.b	#2,$24(a0)
0000DB22 4228 0032                  		clr.b	$32(a0)
0000DB26 4268 0010                  		clr.w	$10(a0)
0000DB2A 4268 0012                  		clr.w	$12(a0)
0000DB2E                            
0000DB2E                            locret_C044:
0000DB2E 4E75                       		rts	
0000DB30                            ; ===========================================================================
0000DB30                            
0000DB30                            loc_C046:				; XREF: loc_BF6E
0000DB30 3F28 0008                  		move.w	8(a0),-(sp)
0000DB34 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000DB3A 6400                       		bcc.s	loc_C056
0000DB3C 6100 0000                  		bsr.w	SpeedToPos
0000DB40                            
0000DB40                            loc_C056:
0000DB40 0828 0001 0022             		btst	#1,$22(a0)
0000DB46 6700                       		beq.s	loc_C0A0
0000DB48 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DB4E 4EB9 0000 0000             		jsr	ObjHitFloor
0000DB54 4A41                       		tst.w	d1
0000DB56 6A00 0000                  		bpl.w	loc_C09E
0000DB5A D368 000C                  		add.w	d1,$C(a0)
0000DB5E 4268 0012                  		clr.w	$12(a0)
0000DB62 08A8 0001 0022             		bclr	#1,$22(a0)
0000DB68 3011                       		move.w	(a1),d0
0000DB6A 0240 03FF                  		andi.w	#$3FF,d0
0000DB6E 0C40 016A                  		cmpi.w	#$16A,d0
0000DB72 6500                       		bcs.s	loc_C09E
0000DB74 3028 0030                  		move.w	$30(a0),d0
0000DB78 E640                       		asr.w	#3,d0
0000DB7A 3140 0010                  		move.w	d0,$10(a0)
0000DB7E 117C 0001 0032             		move.b	#1,$32(a0)
0000DB84 4268 000E                  		clr.w	$E(a0)
0000DB88                            
0000DB88                            loc_C09E:
0000DB88 6000                       		bra.s	loc_C0E6
0000DB8A                            ; ===========================================================================
0000DB8A                            
0000DB8A                            loc_C0A0:
0000DB8A 4A68 0010                  		tst.w	$10(a0)
0000DB8E 6700 0000                  		beq.w	loc_C0D6
0000DB92 6B00                       		bmi.s	loc_C0BC
0000DB94 7600                       		moveq	#0,d3
0000DB96 1628 0019                  		move.b	$19(a0),d3
0000DB9A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DBA0 4A41                       		tst.w	d1		; has block touched a wall?
0000DBA2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DBA4 6000                       		bra.s	loc_C0E6
0000DBA6                            ; ===========================================================================
0000DBA6                            
0000DBA6                            loc_C0BC:
0000DBA6 7600                       		moveq	#0,d3
0000DBA8 1628 0019                  		move.b	$19(a0),d3
0000DBAC 4643                       		not.w	d3
0000DBAE 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DBB4 4A41                       		tst.w	d1		; has block touched a wall?
0000DBB6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DBB8 6000                       		bra.s	loc_C0E6
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            Obj33_StopPush:
0000DBBA 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000DBBE 6000                       		bra.s	loc_C0E6
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            loc_C0D6:
0000DBC0 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000DBC8 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000DBCE 6400                       		bcc.s	loc_C104
0000DBD0                            
0000DBD0                            loc_C0E6:
0000DBD0 7200                       		moveq	#0,d1
0000DBD2 1228 0019                  		move.b	$19(a0),d1
0000DBD6 0641 000B                  		addi.w	#$B,d1
0000DBDA 343C 0010                  		move.w	#$10,d2
0000DBDE 363C 0011                  		move.w	#$11,d3
0000DBE2 381F                       		move.w	(sp)+,d4
0000DBE4 6100 0000                  		bsr.w	loc_C186
0000DBE8 6100                       		bsr.s	Obj33_ChkLava
0000DBEA 6000 FEC4                  		bra.w	loc_BFC6
0000DBEE                            ; ===========================================================================
0000DBEE                            
0000DBEE                            loc_C104:
0000DBEE 381F                       		move.w	(sp)+,d4
0000DBF0 43F8 D000                  		lea	($FFFFD000).w,a1
0000DBF4 08A9 0003 0022             		bclr	#3,$22(a1)
0000DBFA 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC00 6000 FECE                  		bra.w	loc_BFE6
0000DC04                            ; ===========================================================================
0000DC04                            
0000DC04                            Obj33_ChkLava:
0000DC04 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000DC0A 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000DC0C 343C FFE0                  		move.w	#-$20,d2
0000DC10 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000DC16 6700                       		beq.s	Obj33_LoadLava
0000DC18 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000DC1E 6700                       		beq.s	Obj33_LoadLava
0000DC20 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000DC26 6700                       		beq.s	Obj33_LoadLava
0000DC28 4E75                       		rts	
0000DC2A                            ; ===========================================================================
0000DC2A                            
0000DC2A                            Obj33_ChkLava2:
0000DC2A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000DC30 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000DC32 343C 0020                  		move.w	#$20,d2
0000DC36 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000DC3C 6700                       		beq.s	Obj33_LoadLava
0000DC3E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000DC44 6700                       		beq.s	Obj33_LoadLava
0000DC46                            
0000DC46                            Obj33_NoLava:
0000DC46 4E75                       		rts	
0000DC48                            ; ===========================================================================
0000DC48                            
0000DC48                            Obj33_LoadLava:
0000DC48 6100 0000                  		bsr.w	SingleObjLoad
0000DC4C 6600                       		bne.s	locret_C184
0000DC4E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000DC52 3368 0008 0008             		move.w	8(a0),8(a1)
0000DC58 D569 0008                  		add.w	d2,8(a1)
0000DC5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DC62 0669 0010 000C             		addi.w	#$10,$C(a1)
0000DC68 2348 003C                  		move.l	a0,$3C(a1)
0000DC6C                            
0000DC6C                            locret_C184:
0000DC6C 4E75                       		rts	
0000DC6E                            ; ===========================================================================
0000DC6E                            
0000DC6E                            loc_C186:				; XREF: loc_BF6E
0000DC6E 1028 0025                  		move.b	$25(a0),d0
0000DC72 6700 0000                  		beq.w	loc_C218
0000DC76 5500                       		subq.b	#2,d0
0000DC78 6600                       		bne.s	loc_C1AA
0000DC7A 6100 B40E                  		bsr.w	ExitPlatform
0000DC7E 0829 0003 0022             		btst	#3,$22(a1)
0000DC84 6600                       		bne.s	loc_C1A4
0000DC86 4228 0025                  		clr.b	$25(a0)
0000DC8A 4E75                       		rts	
0000DC8C                            ; ===========================================================================
0000DC8C                            
0000DC8C                            loc_C1A4:
0000DC8C 3404                       		move.w	d4,d2
0000DC8E 6000 B958                  		bra.w	MvSonicOnPtfm
0000DC92                            ; ===========================================================================
0000DC92                            
0000DC92                            loc_C1AA:
0000DC92 5500                       		subq.b	#2,d0
0000DC94 6600                       		bne.s	loc_C1F2
0000DC96 6100 0000                  		bsr.w	SpeedToPos
0000DC9A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DCA0 4EB9 0000 0000             		jsr	ObjHitFloor
0000DCA6 4A41                       		tst.w	d1
0000DCA8 6A00 0000                  		bpl.w	locret_C1F0
0000DCAC D368 000C                  		add.w	d1,$C(a0)
0000DCB0 4268 0012                  		clr.w	$12(a0)
0000DCB4 4228 0025                  		clr.b	$25(a0)
0000DCB8 3011                       		move.w	(a1),d0
0000DCBA 0240 03FF                  		andi.w	#$3FF,d0
0000DCBE 0C40 016A                  		cmpi.w	#$16A,d0
0000DCC2 6500                       		bcs.s	locret_C1F0
0000DCC4 3028 0030                  		move.w	$30(a0),d0
0000DCC8 E640                       		asr.w	#3,d0
0000DCCA 3140 0010                  		move.w	d0,$10(a0)
0000DCCE 117C 0001 0032             		move.b	#1,$32(a0)
0000DCD4 4268 000E                  		clr.w	$E(a0)
0000DCD8                            
0000DCD8                            locret_C1F0:
0000DCD8 4E75                       		rts	
0000DCDA                            ; ===========================================================================
0000DCDA                            
0000DCDA                            loc_C1F2:
0000DCDA 6100 0000                  		bsr.w	SpeedToPos
0000DCDE 3028 0008                  		move.w	8(a0),d0
0000DCE2 0240 000C                  		andi.w	#$C,d0
0000DCE6 6600 0000                  		bne.w	locret_C2E4
0000DCEA 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000DCF0 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000DCF6 4268 0010                  		clr.w	$10(a0)
0000DCFA 5528 0025                  		subq.b	#2,$25(a0)
0000DCFE 4E75                       		rts	
0000DD00                            ; ===========================================================================
0000DD00                            
0000DD00                            loc_C218:
0000DD00 6100 0000                  		bsr.w	loc_FAC8
0000DD04 4A44                       		tst.w	d4
0000DD06 6700 0000                  		beq.w	locret_C2E4
0000DD0A 6B00 0000                  		bmi.w	locret_C2E4
0000DD0E 4A28 0032                  		tst.b	$32(a0)
0000DD12 6700                       		beq.s	loc_C230
0000DD14 6000 0000                  		bra.w	locret_C2E4
0000DD18                            ; ===========================================================================
0000DD18                            
0000DD18                            loc_C230:
0000DD18 4A40                       		tst.w	d0
0000DD1A 6700 0000                  		beq.w	locret_C2E4
0000DD1E 6B00                       		bmi.s	loc_C268
0000DD20 0829 0000 0022             		btst	#0,$22(a1)
0000DD26 6600 0000                  		bne.w	locret_C2E4
0000DD2A 3F00                       		move.w	d0,-(sp)
0000DD2C 7600                       		moveq	#0,d3
0000DD2E 1628 0019                  		move.b	$19(a0),d3
0000DD32 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DD38 301F                       		move.w	(sp)+,d0
0000DD3A 4A41                       		tst.w	d1
0000DD3C 6B00 0000                  		bmi.w	locret_C2E4
0000DD40 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000DD48 7001                       		moveq	#1,d0
0000DD4A 323C 0040                  		move.w	#$40,d1
0000DD4E 6000                       		bra.s	loc_C294
0000DD50                            ; ===========================================================================
0000DD50                            
0000DD50                            loc_C268:
0000DD50 0829 0000 0022             		btst	#0,$22(a1)
0000DD56 6700                       		beq.s	locret_C2E4
0000DD58 3F00                       		move.w	d0,-(sp)
0000DD5A 7600                       		moveq	#0,d3
0000DD5C 1628 0019                  		move.b	$19(a0),d3
0000DD60 4643                       		not.w	d3
0000DD62 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DD68 301F                       		move.w	(sp)+,d0
0000DD6A 4A41                       		tst.w	d1
0000DD6C 6B00                       		bmi.s	locret_C2E4
0000DD6E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000DD76 70FF                       		moveq	#-1,d0
0000DD78 323C FFC0                  		move.w	#-$40,d1
0000DD7C                            
0000DD7C                            loc_C294:
0000DD7C 43F8 D000                  		lea	($FFFFD000).w,a1
0000DD80 D169 0008                  		add.w	d0,8(a1)
0000DD84 3341 0014                  		move.w	d1,$14(a1)
0000DD88 337C 0000 0010             		move.w	#0,$10(a1)
0000DD8E 3F00                       		move.w	d0,-(sp)
0000DD90 303C 00A7                  		move.w	#$A7,d0
0000DD94 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play pushing sound
0000DD9A 301F                       		move.w	(sp)+,d0
0000DD9C 4A28 0028                  		tst.b	$28(a0)
0000DDA0 6B00                       		bmi.s	locret_C2E4
0000DDA2 3F00                       		move.w	d0,-(sp)
0000DDA4 4EB9 0000 0000             		jsr	ObjHitFloor
0000DDAA 301F                       		move.w	(sp)+,d0
0000DDAC 0C41 0004                  		cmpi.w	#4,d1
0000DDB0 6F00                       		ble.s	loc_C2E0
0000DDB2 317C 0400 0010             		move.w	#$400,$10(a0)
0000DDB8 4A40                       		tst.w	d0
0000DDBA 6A00                       		bpl.s	loc_C2D8
0000DDBC 4468 0010                  		neg.w	$10(a0)
0000DDC0                            
0000DDC0                            loc_C2D8:
0000DDC0 117C 0006 0025             		move.b	#6,$25(a0)
0000DDC6 6000                       		bra.s	locret_C2E4
0000DDC8                            ; ===========================================================================
0000DDC8                            
0000DDC8                            loc_C2E0:
0000DDC8 D368 000C                  		add.w	d1,$C(a0)
0000DDCC                            
0000DDCC                            locret_C2E4:
0000DDCC 4E75                       		rts	
0000DDCE                            ; ===========================================================================
0000DDCE                            ; ---------------------------------------------------------------------------
0000DDCE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DDCE                            ; ---------------------------------------------------------------------------
0000DDCE                            Map_obj33:
0000DDCE                            	include "_maps\obj33.asm"
0000DDCE                            ; ---------------------------------------------------------------------------
0000DDCE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DDCE                            ; ---------------------------------------------------------------------------
0000DDCE 0000                       		dc.w byte_C2EA-Map_obj33
0000DDD0 0000                       		dc.w byte_C2F0-Map_obj33
0000DDD2 01                         byte_C2EA:	dc.b 1
0000DDD3 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000DDD8 04                         byte_C2F0:	dc.b 4
0000DDD9 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000DDDE F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000DDE3 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000DDE8 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000DDEE 00                         		even
0000DDEE 00                         		even
0000DDEE                            
0000DDEE                            ; ===========================================================================
0000DDEE                            ; ---------------------------------------------------------------------------
0000DDEE                            ; Object 34 - zone title cards
0000DDEE                            ; ---------------------------------------------------------------------------
0000DDEE                            
0000DDEE                            Obj34:					; XREF: Obj_Index
0000DDEE 7000                       		moveq	#0,d0
0000DDF0 1028 0024                  		move.b	$24(a0),d0
0000DDF4 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000DDF8 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000DDFC                            ; ===========================================================================
0000DDFC 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000DDFE 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000DE00 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DE02 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DE04                            ; ===========================================================================
0000DE04                            
0000DE04                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000DE04 2248                       		movea.l	a0,a1
0000DE06 7000                       		moveq	#0,d0
0000DE08 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DE0C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000DE12 6600                       		bne.s	Obj34_CheckFZ
0000DE14 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000DE16                            
0000DE16                            Obj34_CheckFZ:
0000DE16 3400                       		move.w	d0,d2
0000DE18 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000DE1E 6600                       		bne.s	Obj34_LoadConfig
0000DE20 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000DE22 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000DE24                            
0000DE24                            Obj34_LoadConfig:
0000DE24 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000DE2A E948                       		lsl.w	#4,d0
0000DE2C D6C0                       		adda.w	d0,a3
0000DE2E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000DE34 7203                       		moveq	#3,d1
0000DE36                            
0000DE36                            Obj34_Loop:
0000DE36 12BC 0034                  		move.b	#$34,0(a1)
0000DE3A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000DE3E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000DE42 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000DE46 335A 000A                  		move.w	(a2)+,$A(a1)
0000DE4A 135A 0024                  		move.b	(a2)+,$24(a1)
0000DE4E 101A                       		move.b	(a2)+,d0
0000DE50 6600                       		bne.s	Obj34_ActNumber
0000DE52 1002                       		move.b	d2,d0
0000DE54                            
0000DE54                            Obj34_ActNumber:
0000DE54 0C00 0007                  		cmpi.b	#7,d0
0000DE58 6600                       		bne.s	Obj34_MakeSprite
0000DE5A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000DE5E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000DE64 6600                       		bne.s	Obj34_MakeSprite
0000DE66 5300                       		subq.b	#1,d0
0000DE68                            
0000DE68                            Obj34_MakeSprite:
0000DE68 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000DE6C 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000DE74 337C 8580 0002             		move.w	#$8580,2(a1)
0000DE7A 137C 0078 0019             		move.b	#$78,$19(a1)
0000DE80 137C 0000 0001             		move.b	#0,1(a1)
0000DE86 137C 0000 0018             		move.b	#0,$18(a1)
0000DE8C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000DE92 43E9 0040                  		lea	$40(a1),a1	; next object
0000DE96 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000DE9A                            
0000DE9A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000DE9A 7210                       		moveq	#$10,d1		; set horizontal speed
0000DE9C 3028 0030                  		move.w	$30(a0),d0
0000DEA0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000DEA4 6700                       		beq.s	loc_C3C8	; if yes, branch
0000DEA6 6C00                       		bge.s	Obj34_Move
0000DEA8 4441                       		neg.w	d1
0000DEAA                            
0000DEAA                            Obj34_Move:
0000DEAA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DEAE                            
0000DEAE                            loc_C3C8:
0000DEAE 3028 0008                  		move.w	8(a0),d0
0000DEB2 6B00                       		bmi.s	locret_C3D8
0000DEB4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DEB8 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000DEBA 6000 0000                  		bra.w	DisplaySprite
0000DEBE                            ; ===========================================================================
0000DEBE                            
0000DEBE                            locret_C3D8:
0000DEBE 4E75                       		rts	
0000DEC0                            ; ===========================================================================
0000DEC0                            
0000DEC0                            Obj34_Wait:				; XREF: Obj34_Index
0000DEC0 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000DEC4 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000DEC6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000DECA 6000 0000                  		bra.w	DisplaySprite
0000DECE                            ; ===========================================================================
0000DECE                            
0000DECE                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000DECE 4A28 0001                  		tst.b	1(a0)
0000DED2 6A00                       		bpl.s	Obj34_ChangeArt
0000DED4 7220                       		moveq	#$20,d1
0000DED6 3028 0032                  		move.w	$32(a0),d0
0000DEDA B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000DEDE 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000DEE0 6C00                       		bge.s	Obj34_Move2
0000DEE2 4441                       		neg.w	d1
0000DEE4                            
0000DEE4                            Obj34_Move2:
0000DEE4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DEE8 3028 0008                  		move.w	8(a0),d0
0000DEEC 6B00                       		bmi.s	locret_C412
0000DEEE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DEF2 6400                       		bcc.s	locret_C412	; if yes, branch
0000DEF4 6000 0000                  		bra.w	DisplaySprite
0000DEF8                            ; ===========================================================================
0000DEF8                            
0000DEF8                            locret_C412:
0000DEF8 4E75                       		rts	
0000DEFA                            ; ===========================================================================
0000DEFA                            
0000DEFA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000DEFA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DF00 6600                       		bne.s	Obj34_Delete
0000DF02 7002                       		moveq	#2,d0
0000DF04 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
0000DF0A 7000                       		moveq	#0,d0
0000DF0C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DF10 0640 0015                  		addi.w	#$15,d0
0000DF14 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns
0000DF1A                            
0000DF1A                            Obj34_Delete:
0000DF1A 6000 0000                  		bra.w	DeleteObject
0000DF1E                            ; ===========================================================================
0000DF1E 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000DF20 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000DF22 00E4                       		dc.w $E4
0000DF24 0206                       		dc.b 2,	6
0000DF26 00EA                       		dc.w $EA
0000DF28 0207                       		dc.b 2,	7
0000DF2A 00E0                       		dc.w $E0
0000DF2C 020A                       		dc.b 2,	$A
0000DF2E                            ; ---------------------------------------------------------------------------
0000DF2E                            ; Title	card configuration data
0000DF2E                            ; Format:
0000DF2E                            ; 4 bytes per item (YYYY XXXX)
0000DF2E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000DF2E                            ; ---------------------------------------------------------------------------
0000DF2E 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000DF3E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000DF4E 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000DF5E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000DF6E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000DF7E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000DF8E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000DF9E                            ; ===========================================================================
0000DF9E                            ; ---------------------------------------------------------------------------
0000DF9E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000DF9E                            ; ---------------------------------------------------------------------------
0000DF9E                            
0000DF9E                            Obj39:					; XREF: Obj_Index
0000DF9E 7000                       		moveq	#0,d0
0000DFA0 1028 0024                  		move.b	$24(a0),d0
0000DFA4 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000DFA8 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000DFAC                            ; ===========================================================================
0000DFAC 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000DFAE 0000                       		dc.w loc_C50C-Obj39_Index
0000DFB0 0000                       		dc.w Obj39_Wait-Obj39_Index
0000DFB2                            ; ===========================================================================
0000DFB2                            
0000DFB2                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000DFB2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DFB6 6700                       		beq.s	Obj39_Main	; if yes, branch
0000DFB8 4E75                       		rts	
0000DFBA                            ; ===========================================================================
0000DFBA                            
0000DFBA                            Obj39_Main:
0000DFBA 5428 0024                  		addq.b	#2,$24(a0)
0000DFBE 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000DFC4 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000DFCA 6700                       		beq.s	loc_C4EC	; if not, branch
0000DFCC 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000DFD2                            
0000DFD2                            loc_C4EC:
0000DFD2 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000DFD8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000DFE0 317C 855E 0002             		move.w	#$855E,2(a0)
0000DFE6 117C 0000 0001             		move.b	#0,1(a0)
0000DFEC 117C 0000 0018             		move.b	#0,$18(a0)
0000DFF2                            
0000DFF2                            loc_C50C:				; XREF: Obj39_Index
0000DFF2 7210                       		moveq	#$10,d1		; set horizontal speed
0000DFF4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DFFA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DFFC 6500                       		bcs.s	Obj39_Move
0000DFFE 4441                       		neg.w	d1
0000E000                            
0000E000                            Obj39_Move:
0000E000 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E004 6000 0000                  		bra.w	DisplaySprite
0000E008                            ; ===========================================================================
0000E008                            
0000E008                            Obj39_SetWait:				; XREF: Obj39_Main
0000E008 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000E00E 5428 0024                  		addq.b	#2,$24(a0)
0000E012 4E75                       		rts	
0000E014                            ; ===========================================================================
0000E014                            
0000E014                            Obj39_Wait:				; XREF: Obj39_Index
0000E014 1038 F605                  		move.b	($FFFFF605).w,d0
0000E018 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000E01C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000E01E 0828 0000 001A             		btst	#0,$1A(a0)
0000E024 6600                       		bne.s	Obj39_Display
0000E026 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000E02A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000E02C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E030 6000 0000                  		bra.w	DisplaySprite
0000E034                            ; ===========================================================================
0000E034                            
0000E034                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000E034 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000E038 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000E03A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000E040 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000E044 6600                       		bne.s	Obj39_Display	; if yes, branch
0000E046 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set mode to 0 (Sega screen)
0000E04C 6000                       		bra.s	Obj39_Display
0000E04E                            ; ===========================================================================
0000E04E                            
0000E04E                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000E04E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E054                            
0000E054                            Obj39_Display:				; XREF: Obj39_ChgMode
0000E054 6000 0000                  		bra.w	DisplaySprite
0000E058                            ; ===========================================================================
0000E058                            ; ---------------------------------------------------------------------------
0000E058                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E058                            ; ---------------------------------------------------------------------------
0000E058                            
0000E058                            Obj3A:					; XREF: Obj_Index
0000E058 7000                       		moveq	#0,d0
0000E05A 1028 0024                  		move.b	$24(a0),d0
0000E05E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000E062 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000E066                            ; ===========================================================================
0000E066 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000E068 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000E06A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000E06C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000E06E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000E070 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000E072 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000E074 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000E076 0000                       		dc.w loc_C766-Obj3A_Index
0000E078                            ; ===========================================================================
0000E078                            
0000E078                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000E078 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E07C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000E07E 4E75                       		rts	
0000E080                            ; ===========================================================================
0000E080                            
0000E080                            Obj3A_Main:
0000E080 2248                       		movea.l	a0,a1
0000E082 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000E088 7206                       		moveq	#6,d1
0000E08A                            
0000E08A                            Obj3A_Loop:
0000E08A 12BC 003A                  		move.b	#$3A,0(a1)
0000E08E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000E092 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000E096 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E09A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E09E 135A 0024                  		move.b	(a2)+,$24(a1)
0000E0A2 101A                       		move.b	(a2)+,d0
0000E0A4 0C00 0006                  		cmpi.b	#6,d0
0000E0A8 6600                       		bne.s	loc_C5CA
0000E0AA D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000E0AE                            
0000E0AE                            loc_C5CA:
0000E0AE 1340 001A                  		move.b	d0,$1A(a1)
0000E0B2 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000E0BA 337C 8580 0002             		move.w	#$8580,2(a1)
0000E0C0 137C 0000 0001             		move.b	#0,1(a1)
0000E0C6 43E9 0040                  		lea	$40(a1),a1
0000E0CA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000E0CE                            
0000E0CE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000E0CE 7210                       		moveq	#$10,d1		; set horizontal speed
0000E0D0 3028 0030                  		move.w	$30(a0),d0
0000E0D4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E0D8 6700                       		beq.s	loc_C61A	; if yes, branch
0000E0DA 6C00                       		bge.s	Obj3A_Move
0000E0DC 4441                       		neg.w	d1
0000E0DE                            
0000E0DE                            Obj3A_Move:
0000E0DE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E0E2                            
0000E0E2                            loc_C5FE:				; XREF: loc_C61A
0000E0E2 3028 0008                  		move.w	8(a0),d0
0000E0E6 6B00                       		bmi.s	locret_C60E
0000E0E8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E0EC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E0EE 6000 0000                  		bra.w	DisplaySprite
0000E0F2                            ; ===========================================================================
0000E0F2                            
0000E0F2                            locret_C60E:
0000E0F2 4E75                       		rts	
0000E0F4                            ; ===========================================================================
0000E0F4                            
0000E0F4                            loc_C610:				; XREF: loc_C61A
0000E0F4 117C 000E 0024             		move.b	#$E,$24(a0)
0000E0FA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000E0FE                            ; ===========================================================================
0000E0FE                            
0000E0FE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000E0FE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E104 67EE                       		beq.s	loc_C610
0000E106 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E10C 66D4                       		bne.s	loc_C5FE
0000E10E 5428 0024                  		addq.b	#2,$24(a0)
0000E112 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E118                            
0000E118                            Obj3A_Wait:				; XREF: Obj3A_Index
0000E118 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E11C 6600                       		bne.s	Obj3A_Display
0000E11E 5428 0024                  		addq.b	#2,$24(a0)
0000E122                            
0000E122                            Obj3A_Display:
0000E122 6000 0000                  		bra.w	DisplaySprite
0000E126                            ; ===========================================================================
0000E126                            
0000E126                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000E126 6100 0000                  		bsr.w	DisplaySprite
0000E12A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000E130 7000                       		moveq	#0,d0
0000E132 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000E136 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000E138 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E13C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000E142                            
0000E142                            Obj3A_RingBonus:
0000E142 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E146 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000E148 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E14C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E152                            
0000E152                            Obj3A_ChkBonus:
0000E152 4A40                       		tst.w	d0		; is there any bonus?
0000E154 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000E156 303C 00C5                  		move.w	#$C5,d0
0000E15A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E160 5428 0024                  		addq.b	#2,$24(a0)
0000E164 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000E16A 6600                       		bne.s	Obj3A_SetDelay
0000E16C 5828 0024                  		addq.b	#4,$24(a0)
0000E170                            
0000E170                            Obj3A_SetDelay:
0000E170 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E176                            
0000E176                            locret_C692:
0000E176 4E75                       		rts	
0000E178                            ; ===========================================================================
0000E178                            
0000E178                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000E178 4EB9 0000 0000             		jsr	AddPoints
0000E17E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E182 0200 0003                  		andi.b	#3,d0
0000E186 66EE                       		bne.s	locret_C692
0000E188 303C 00CD                  		move.w	#$CD,d0
0000E18C 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E192                            ; ===========================================================================
0000E192                            
0000E192                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000E192 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E196 0240 0007                  		andi.w	#7,d0
0000E19A E748                       		lsl.w	#3,d0
0000E19C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000E1A0 0241 0003                  		andi.w	#3,d1
0000E1A4 D241                       		add.w	d1,d1
0000E1A6 D041                       		add.w	d1,d0
0000E1A8 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E1AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000E1B0 4A40                       		tst.w	d0
0000E1B2 6600                       		bne.s	Obj3A_ChkSS
0000E1B4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000E1BA 6000                       		bra.s	Obj3A_Display2
0000E1BC                            ; ===========================================================================
0000E1BC                            
0000E1BC                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000E1BC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000E1C0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000E1C4 6700                       		beq.s	loc_C6EA	; if not, branch
0000E1C6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000E1CC 6000                       		bra.s	Obj3A_Display2
0000E1CE                            ; ===========================================================================
0000E1CE                            
0000E1CE                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000E1CE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E1D4                            
0000E1D4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000E1D4 6000 0000                  		bra.w	DisplaySprite
0000E1D8                            ; ===========================================================================
0000E1D8                            ; ---------------------------------------------------------------------------
0000E1D8                            ; Level	order array
0000E1D8                            ; ---------------------------------------------------------------------------
0000E1D8                            LevelOrder:
0000E1D8 0200 0000                  		dc.w $0200, $0000 	;GHZ1 -> MZ
0000E1DC 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E1E0 0101 0102                  		dc.w $0101, $0102 	;LZ1 -> LZ2 -> LZ3
0000E1E4 0300 0502                  		dc.w $0300, $0502 	;LZ3 -> SLZ1 or if act 4 -> FZ
0000E1E8 0201 0400                  		dc.w $0201, $0400 	;MZ1 -> MZ2 -> SYZ 
0000E1EC 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E1F0 0301 0302                  		dc.w $0301, $0302 	;SLZ1 -> SLZ2 -> SLZ3
0000E1F4 0500 0000                  		dc.w $0500, $0000 	;SLZ3 -> SYZ1
0000E1F8 0401 0402                  		dc.w $0401, $0402 	;SYZ1 -> SYZ2 -> SYZ3
0000E1FC 0100 0000                  		dc.w $0100, $0000 	;SYZ3 -> LZ1?
0000E200 0501 0103                  		dc.w $0501, $0103 	;SBZ1 -> SBZ2 -> LZ4
0000E204                            		even
0000E204                            ; ===========================================================================
0000E204                            
0000E204                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000E204 7220                       		moveq	#$20,d1		; set horizontal speed
0000E206 3028 0032                  		move.w	$32(a0),d0
0000E20A B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000E20E 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000E210 6C00                       		bge.s	Obj3A_Move2
0000E212 4441                       		neg.w	d1
0000E214                            
0000E214                            Obj3A_Move2:
0000E214 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E218 3028 0008                  		move.w	8(a0),d0
0000E21C 6B00                       		bmi.s	locret_C748
0000E21E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E222 6400                       		bcc.s	locret_C748	; if yes, branch
0000E224 6000 0000                  		bra.w	DisplaySprite
0000E228                            ; ===========================================================================
0000E228                            
0000E228                            locret_C748:
0000E228 4E75                       		rts	
0000E22A                            ; ===========================================================================
0000E22A                            
0000E22A                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000E22A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E230 6600 0000                  		bne.w	DeleteObject
0000E234 5428 0024                  		addq.b	#2,$24(a0)
0000E238 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000E23C 303C 008D                  		move.w	#$8D,d0
0000E240 4EF9 0000 12C6             		jmp	(PlaySound).l	; play FZ music
0000E246                            ; ===========================================================================
0000E246                            
0000E246                            loc_C766:				; XREF: Obj3A_Index
0000E246 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000E24A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000E250 6700 0000                  		beq.w	DeleteObject
0000E254 4E75                       		rts	
0000E256                            ; ===========================================================================
0000E256 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000E25C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000E25E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000E264 0201                       		dc.b 2,	1
0000E266 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000E26C 0206                       		dc.b 2,	6
0000E26E 0520 0120 00EC             		dc.w $520, $120, $EC
0000E274 0202                       		dc.b 2,	2
0000E276 0540 0120 00FC             		dc.w $540, $120, $FC
0000E27C 0203                       		dc.b 2,	3
0000E27E 0560 0120 010C             		dc.w $560, $120, $10C
0000E284 0204                       		dc.b 2,	4
0000E286 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000E28C 0205                       		dc.b 2,	5
0000E28E                            ; ===========================================================================
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            ; Object 7E - special stage results screen
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            
0000E28E                            Obj7E:					; XREF: Obj_Index
0000E28E 7000                       		moveq	#0,d0
0000E290 1028 0024                  		move.b	$24(a0),d0
0000E294 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000E298 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000E29C                            ; ===========================================================================
0000E29C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000E29E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000E2A0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E2A2 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000E2A4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E2A6 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E2A8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E2AA 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000E2AC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E2AE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E2B0 0000                       		dc.w loc_C91A-Obj7E_Index
0000E2B2                            ; ===========================================================================
0000E2B2                            
0000E2B2                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000E2B2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E2B6 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000E2B8 4E75                       		rts	
0000E2BA                            ; ===========================================================================
0000E2BA                            
0000E2BA                            Obj7E_Main:
0000E2BA 2248                       		movea.l	a0,a1
0000E2BC 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000E2C2 7203                       		moveq	#3,d1
0000E2C4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000E2CA 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000E2CC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E2CE                            
0000E2CE                            Obj7E_Loop:
0000E2CE 12BC 007E                  		move.b	#$7E,0(a1)
0000E2D2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000E2D6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E2DA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E2DE 135A 0024                  		move.b	(a2)+,$24(a1)
0000E2E2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E2E6 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000E2EE 337C 8580 0002             		move.w	#$8580,2(a1)
0000E2F4 137C 0000 0001             		move.b	#0,1(a1)
0000E2FA 43E9 0040                  		lea	$40(a1),a1
0000E2FE 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000E302                            
0000E302 7007                       		moveq	#7,d0
0000E304 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000E308 6700                       		beq.s	loc_C842
0000E30A 7000                       		moveq	#0,d0
0000E30C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E310 6600                       		bne.s	loc_C842	; if not, branch
0000E312 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E314 317C 0018 0008             		move.w	#$18,8(a0)
0000E31A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000E320                            
0000E320                            loc_C842:
0000E320 1140 001A                  		move.b	d0,$1A(a0)
0000E324                            
0000E324                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000E324 7210                       		moveq	#$10,d1		; set horizontal speed
0000E326 3028 0030                  		move.w	$30(a0),d0
0000E32A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E32E 6700                       		beq.s	loc_C86C	; if yes, branch
0000E330 6C00                       		bge.s	Obj7E_Move
0000E332 4441                       		neg.w	d1
0000E334                            
0000E334                            Obj7E_Move:
0000E334 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E338                            
0000E338                            loc_C85A:				; XREF: loc_C86C
0000E338 3028 0008                  		move.w	8(a0),d0
0000E33C 6B00                       		bmi.s	locret_C86A
0000E33E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E342 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E344 6000 0000                  		bra.w	DisplaySprite
0000E348                            ; ===========================================================================
0000E348                            
0000E348                            locret_C86A:
0000E348 4E75                       		rts	
0000E34A                            ; ===========================================================================
0000E34A                            
0000E34A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000E34A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E350 66E6                       		bne.s	loc_C85A
0000E352 5428 0024                  		addq.b	#2,$24(a0)
0000E356 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E35C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000E362                            
0000E362                            Obj7E_Wait:				; XREF: Obj7E_Index
0000E362 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E366 6600                       		bne.s	Obj7E_Display
0000E368 5428 0024                  		addq.b	#2,$24(a0)
0000E36C                            
0000E36C                            Obj7E_Display:
0000E36C 6000 0000                  		bra.w	DisplaySprite
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000E370 6100 0000                  		bsr.w	DisplaySprite
0000E374 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000E37A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E37E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E380 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E386 700A                       		moveq	#10,d0		; add 10 to score
0000E388 4EB9 0000 0000             		jsr	AddPoints
0000E38E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E392 0200 0003                  		andi.b	#3,d0
0000E396 6600                       		bne.s	locret_C8EA
0000E398 303C 00CD                  		move.w	#$CD,d0
0000E39C 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E3A2                            ; ===========================================================================
0000E3A2                            
0000E3A2                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000E3A2 303C 00C5                  		move.w	#$C5,d0
0000E3A6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E3AC 5428 0024                  		addq.b	#2,$24(a0)
0000E3B0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E3B6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000E3BC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E3BE 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000E3C4 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000E3C8                            
0000E3C8                            locret_C8EA:
0000E3C8 4E75                       		rts	
0000E3CA                            ; ===========================================================================
0000E3CA                            
0000E3CA                            Obj7E_Exit:				; XREF: Obj7E_Index
0000E3CA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E3D0 6000 0000                  		bra.w	DisplaySprite
0000E3D4                            ; ===========================================================================
0000E3D4                            
0000E3D4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000E3D4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000E3DA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000E3E0 303C 00BF                  		move.w	#$BF,d0
0000E3E4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play continues music
0000E3EA 5428 0024                  		addq.b	#2,$24(a0)
0000E3EE 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000E3F4 6000 0000                  		bra.w	DisplaySprite
0000E3F8                            ; ===========================================================================
0000E3F8                            
0000E3F8                            loc_C91A:				; XREF: Obj7E_Index
0000E3F8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E3FC 0200 000F                  		andi.b	#$F,d0
0000E400 6600                       		bne.s	Obj7E_Display2
0000E402 0868 0000 001A             		bchg	#0,$1A(a0)
0000E408                            
0000E408                            Obj7E_Display2:
0000E408 6000 0000                  		bra.w	DisplaySprite
0000E40C                            ; ===========================================================================
0000E40C 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E412 0200                       		dc.b 2,	0		; rountine number, frame number
0000E414 0320 0120 0118             		dc.w $320, $120, $118
0000E41A 0201                       		dc.b 2,	1
0000E41C 0360 0120 0128             		dc.w $360, $120, $128
0000E422 0202                       		dc.b 2,	2
0000E424 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E42A 0203                       		dc.b 2,	3
0000E42C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E432 0206                       		dc.b 2,	6
0000E434                            ; ===========================================================================
0000E434                            ; ---------------------------------------------------------------------------
0000E434                            ; Object 7F - chaos emeralds from the special stage results screen
0000E434                            ; ---------------------------------------------------------------------------
0000E434                            
0000E434                            Obj7F:					; XREF: Obj_Index
0000E434 7000                       		moveq	#0,d0
0000E436 1028 0024                  		move.b	$24(a0),d0
0000E43A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000E43E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000E442                            ; ===========================================================================
0000E442 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000E444 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000E446                            
0000E446                            ; ---------------------------------------------------------------------------
0000E446                            ; X-axis positions for chaos emeralds
0000E446                            ; ---------------------------------------------------------------------------
0000E446 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E452                            ; ===========================================================================
0000E452                            
0000E452                            Obj7F_Main:				; XREF: Obj7F_Index
0000E452 2248                       		movea.l	a0,a1
0000E454 45F9 0000 E446             		lea	(Obj7F_PosData).l,a2
0000E45A 7400                       		moveq	#0,d2
0000E45C 7200                       		moveq	#0,d1
0000E45E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000E462 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E464 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E468                            
0000E468                            Obj7F_Loop:
0000E468 12BC 007F                  		move.b	#$7F,0(a1)
0000E46C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000E470 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000E476 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000E47A 1633 2000                  		move.b	(a3,d2.w),d3
0000E47E 1343 001A                  		move.b	d3,$1A(a1)
0000E482 1343 001C                  		move.b	d3,$1C(a1)
0000E486 5202                       		addq.b	#1,d2
0000E488 5429 0024                  		addq.b	#2,$24(a1)
0000E48C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000E494 337C 8541 0002             		move.w	#$8541,2(a1)
0000E49A 137C 0000 0001             		move.b	#0,1(a1)
0000E4A0 43E9 0040                  		lea	$40(a1),a1	; next object
0000E4A4 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000E4A8                            
0000E4A8                            Obj7F_Flash:				; XREF: Obj7F_Index
0000E4A8 1028 001A                  		move.b	$1A(a0),d0
0000E4AC 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000E4B2 0C00 0006                  		cmpi.b	#6,d0
0000E4B6 6600                       		bne.s	Obj7F_Display
0000E4B8 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000E4BE                            
0000E4BE                            Obj7F_Display:
0000E4BE 6000 0000                  		bra.w	DisplaySprite
0000E4C2                            ; ===========================================================================
0000E4C2                            ; ---------------------------------------------------------------------------
0000E4C2                            ; Sprite mappings - zone title cards
0000E4C2                            ; ---------------------------------------------------------------------------
0000E4C2 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000E4C4 0000                       		dc.w byte_CA2C-Map_obj34
0000E4C6 0000                       		dc.w byte_CA5A-Map_obj34
0000E4C8 0000                       		dc.w byte_CA7A-Map_obj34
0000E4CA 0000                       		dc.w byte_CAA8-Map_obj34
0000E4CC 0000                       		dc.w byte_CADC-Map_obj34
0000E4CE 0000                       		dc.w byte_CB10-Map_obj34
0000E4D0 0000                       		dc.w byte_CB26-Map_obj34
0000E4D2 0000                       		dc.w byte_CB31-Map_obj34
0000E4D4 0000                       		dc.w byte_CB3C-Map_obj34
0000E4D6 0000                       		dc.w byte_CB47-Map_obj34
0000E4D8 0000                       		dc.w byte_CB8A-Map_obj34
0000E4DA 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000E4DB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000E4E0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000E4E5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000E4EA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000E4EF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E4F4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000E4F9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000E4FE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000E503 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000E508 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000E509 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000E50E F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000E513 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000E518 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000E51D F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000E522 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000E527 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000E52C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E531 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000E536 06                         byte_CA5A:	dc.b 6			; MARBLE
0000E537 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000E53C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000E541 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000E546 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000E54B F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000E550 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000E555 00                         		dc.b 0
0000E556 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000E557 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000E55C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000E561 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000E566 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000E56B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000E570 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000E575 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000E57A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000E57F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000E584 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000E585 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000E58A F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000E58F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000E594 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E599 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000E59E F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000E5A3 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000E5A8 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000E5AD F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000E5B2 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000E5B7 00                         		dc.b 0
0000E5B8 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000E5B9 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000E5BE F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000E5C3 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000E5C8 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000E5CD F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000E5D2 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000E5D7 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000E5DC F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000E5E1 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000E5E6 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000E5EB 00                         		dc.b 0
0000E5EC 04                         byte_CB10:	dc.b 4			; ZONE
0000E5ED F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E5F2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E5F7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E5FC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E601 00                         		dc.b 0
0000E602 02                         byte_CB26:	dc.b 2			; ACT 1
0000E603 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E608 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E60D 02                         byte_CB31:	dc.b 2			; ACT 2
0000E60E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E613 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E618 02                         byte_CB3C:	dc.b 2			; ACT 3
0000E619 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E61E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E623 0D                         byte_CB47:	dc.b $D			; Oval
0000E624 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E629 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E62E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E633 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E638 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E63D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E642 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E647 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E64C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E651 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E656 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E65B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E660 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E665 00                         		dc.b 0
0000E666 05                         byte_CB8A:	dc.b 5			; FINAL
0000E667 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000E66C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000E671 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E676 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000E67B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000E680                            		even
0000E680                            ; ---------------------------------------------------------------------------
0000E680                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E680                            ; ---------------------------------------------------------------------------
0000E680                            Map_obj39:
0000E680                            	include "_maps\obj39.asm"
0000E680                            ; ---------------------------------------------------------------------------
0000E680                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E680                            ; ---------------------------------------------------------------------------
0000E680 0000                       		dc.w byte_CBAC-Map_obj39
0000E682 0000                       		dc.w byte_CBB7-Map_obj39
0000E684 0000                       		dc.w byte_CBC2-Map_obj39
0000E686 0000                       		dc.w byte_CBCD-Map_obj39
0000E688 02                         byte_CBAC:	dc.b 2
0000E689 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E68E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E693 02                         byte_CBB7:	dc.b 2
0000E694 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E699 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E69E 02                         byte_CBC2:	dc.b 2
0000E69F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E6A4 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E6A9 02                         byte_CBCD:	dc.b 2
0000E6AA F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E6AF F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E6B4                            		even
0000E6B4                            		even
0000E6B4                            
0000E6B4                            ; ---------------------------------------------------------------------------
0000E6B4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E6B4                            ; ---------------------------------------------------------------------------
0000E6B4 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000E6B6 0000                       		dc.w byte_CC13-Map_obj3A
0000E6B8 0000                       		dc.w byte_CC32-Map_obj3A
0000E6BA 0000                       		dc.w byte_CC51-Map_obj3A
0000E6BC 0000                       		dc.w byte_CC75-Map_obj3A
0000E6BE FF6F                       		dc.w byte_CB47-Map_obj3A
0000E6C0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000E6C2 FF59                       		dc.w byte_CB31-Map_obj3A
0000E6C4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000E6C6 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000E6C7 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000E6CC F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000E6D1 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000E6D6 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000E6DB F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000E6E0 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000E6E5 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000E6EA F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000E6EF 06                         byte_CC13:	dc.b 6			; PASSED
0000E6F0 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000E6F5 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000E6FA F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000E6FF F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000E704 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E709 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000E70E 06                         byte_CC32:	dc.b 6			; SCORE
0000E70F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E714 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E719 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E71E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E723 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E728 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E72D 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000E72E F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000E733 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E738 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E73D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E742 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E747 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000E74C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E751 07                         byte_CC75:	dc.b 7			; RING BONUS
0000E752 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E757 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E75C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E761 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E766 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E76B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E770 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E776 00                         		even
0000E776                            ; ---------------------------------------------------------------------------
0000E776                            ; Sprite mappings - special stage results screen
0000E776                            ; ---------------------------------------------------------------------------
0000E776 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000E778 0000                       		dc.w byte_CCEE-Map_obj7E
0000E77A 0000                       		dc.w byte_CD0D-Map_obj7E
0000E77C FEAD                       		dc.w byte_CB47-Map_obj7E
0000E77E 0000                       		dc.w byte_CD31-Map_obj7E
0000E780 0000                       		dc.w byte_CD46-Map_obj7E
0000E782 0000                       		dc.w byte_CD5B-Map_obj7E
0000E784 0000                       		dc.w byte_CD6B-Map_obj7E
0000E786 0000                       		dc.w byte_CDA8-Map_obj7E
0000E788 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E789 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E78E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E793 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E798 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E79D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E7A2 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E7A7 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E7AC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E7B1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E7B6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E7BB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E7C0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E7C5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E7CA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E7CB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E7D0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E7D5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E7DA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E7DF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E7E4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E7E9 07                         byte_CD0D:	dc.b 7
0000E7EA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E7EF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E7F4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E7F9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E7FE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E803 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E808 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E80D 04                         byte_CD31:	dc.b 4
0000E80E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E813 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E818 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E81D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E822 04                         byte_CD46:	dc.b 4
0000E823 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E828 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E82D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E832 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E837 03                         byte_CD5B:	dc.b 3
0000E838 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E83D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E842 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E847 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E848 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E84D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E852 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E857 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E85C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E861 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E866 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E86B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E870 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E875 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E87A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E87F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E884 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E885 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E88A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E88F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E894 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E899 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E89E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E8A3 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E8A8 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E8AD F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E8B2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E8B7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E8BC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E8C1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E8C6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E8CB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E8D0                            		even
0000E8D0                            ; ---------------------------------------------------------------------------
0000E8D0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E8D0                            ; ---------------------------------------------------------------------------
0000E8D0                            Map_obj7F:
0000E8D0                            	include "_maps\obj7F.asm"
0000E8D0                            ; ---------------------------------------------------------------------------
0000E8D0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E8D0                            ; ---------------------------------------------------------------------------
0000E8D0 0000                       		dc.w byte_CE02-Map_obj7F
0000E8D2 0000                       		dc.w byte_CE08-Map_obj7F
0000E8D4 0000                       		dc.w byte_CE0E-Map_obj7F
0000E8D6 0000                       		dc.w byte_CE14-Map_obj7F
0000E8D8 0000                       		dc.w byte_CE1A-Map_obj7F
0000E8DA 0000                       		dc.w byte_CE20-Map_obj7F
0000E8DC 0000                       		dc.w byte_CE26-Map_obj7F
0000E8DE 01                         byte_CE02:	dc.b 1
0000E8DF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000E8E4 01                         byte_CE08:	dc.b 1
0000E8E5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E8EA 01                         byte_CE0E:	dc.b 1
0000E8EB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E8F0 01                         byte_CE14:	dc.b 1
0000E8F1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E8F6 01                         byte_CE1A:	dc.b 1
0000E8F7 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000E8FC 01                         byte_CE20:	dc.b 1
0000E8FD F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000E902 00                         byte_CE26:	dc.b 0			; Blank frame
0000E904 00                         		even
0000E904 00                         		even
0000E904                            
0000E904                            ; ===========================================================================
0000E904                            ; ---------------------------------------------------------------------------
0000E904                            ; Object 36 - spikes
0000E904                            ; ---------------------------------------------------------------------------
0000E904                            
0000E904                            Obj36:					; XREF: Obj_Index
0000E904 7000                       		moveq	#0,d0
0000E906 1028 0024                  		move.b	$24(a0),d0
0000E90A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E90E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E912                            ; ===========================================================================
0000E912 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E914 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E916                            
0000E916 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E918 0110                       		dc.b 1,	$10
0000E91A 0204                       		dc.b 2,	4
0000E91C 031C                       		dc.b 3,	$1C
0000E91E 0440                       		dc.b 4,	$40
0000E920 0510                       		dc.b 5,	$10
0000E922                            ; ===========================================================================
0000E922                            
0000E922                            Obj36_Main:				; XREF: Obj36_Index
0000E922 5428 0024                  		addq.b	#2,$24(a0)
0000E926 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E92E 317C 051B 0002             		move.w	#$51B,2(a0)
0000E934 0028 0004 0001             		ori.b	#4,1(a0)
0000E93A 117C 0004 0018             		move.b	#4,$18(a0)
0000E940 1028 0028                  		move.b	$28(a0),d0
0000E944 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E94A 0240 00F0                  		andi.w	#$F0,d0
0000E94E 43F9 0000 E916             		lea	(Obj36_Var).l,a1
0000E954 E648                       		lsr.w	#3,d0
0000E956 D2C0                       		adda.w	d0,a1
0000E958 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E95C 1159 0019                  		move.b	(a1)+,$19(a0)
0000E960 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E966 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E96C                            
0000E96C                            Obj36_Solid:				; XREF: Obj36_Index
0000E96C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E970 343C 0004                  		move.w	#4,d2
0000E974 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E97A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E97C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E982 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E984 343C 0014                  		move.w	#$14,d2
0000E988                            
0000E988                            ; Spikes types $1x and $5x face	sideways
0000E988                            
0000E988                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E988 323C 001B                  		move.w	#$1B,d1
0000E98C 3602                       		move.w	d2,d3
0000E98E 5243                       		addq.w	#1,d3
0000E990 3828 0008                  		move.w	8(a0),d4
0000E994 6100 0000                  		bsr.w	SolidObject
0000E998 0828 0003 0022             		btst	#3,$22(a0)
0000E99E 6600                       		bne.s	Obj36_Display
0000E9A0 0C44 0001                  		cmpi.w	#1,d4
0000E9A4 6700                       		beq.s	Obj36_Hurt
0000E9A6 6000                       		bra.s	Obj36_Display
0000E9A8                            ; ===========================================================================
0000E9A8                            
0000E9A8                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E9A8                            
0000E9A8                            Obj36_Upright:				; XREF: Obj36_Solid
0000E9A8 7200                       		moveq	#0,d1
0000E9AA 1228 0019                  		move.b	$19(a0),d1
0000E9AE 0641 000B                  		addi.w	#$B,d1
0000E9B2 343C 0010                  		move.w	#$10,d2
0000E9B6 363C 0011                  		move.w	#$11,d3
0000E9BA 3828 0008                  		move.w	8(a0),d4
0000E9BE 6100 0000                  		bsr.w	SolidObject
0000E9C2 0828 0003 0022             		btst	#3,$22(a0)
0000E9C8 6600                       		bne.s	Obj36_Hurt
0000E9CA 4A44                       		tst.w	d4
0000E9CC 6A00                       		bpl.s	Obj36_Display
0000E9CE                            
0000E9CE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E9CE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E9D2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E9D4 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000E9D8 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000E9DA 2F08                       		move.l	a0,-(sp)
0000E9DC 2448                       		movea.l	a0,a2
0000E9DE 41F8 D000                  		lea	($FFFFD000).w,a0
0000E9E2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E9E8 6400                       		bcc.s	loc_CF20
0000E9EA 2628 000C                  		move.l	$C(a0),d3
0000E9EE 3028 0012                  		move.w	$12(a0),d0
0000E9F2 48C0                       		ext.l	d0
0000E9F4 E180                       		asl.l	#8,d0
0000E9F6 9680                       		sub.l	d0,d3
0000E9F8 2143 000C                  		move.l	d3,$C(a0)
0000E9FC 4EB9 0000 0000             		jsr	HurtSonic
0000EA02                            
0000EA02                            loc_CF20:
0000EA02 205F                       		movea.l	(sp)+,a0
0000EA04                            
0000EA04                            Obj36_Display:
0000EA04 6100 0000                  		bsr.w	DisplaySprite
0000EA08 3028 0030                  		move.w	$30(a0),d0
0000EA0C 0240 FF80                  		andi.w	#$FF80,d0
0000EA10 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA14 0441 0080                  		subi.w	#$80,d1
0000EA18 0241 FF80                  		andi.w	#$FF80,d1
0000EA1C 9041                       		sub.w	d1,d0
0000EA1E 0C40 0280                  		cmpi.w	#$280,d0
0000EA22 6200 0000                  		bhi.w	DeleteObject
0000EA26 4E75                       		rts	
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            Obj36_Type0x:				; XREF: Obj36_Solid
0000EA28 7000                       		moveq	#0,d0
0000EA2A 1028 0028                  		move.b	$28(a0),d0
0000EA2E D040                       		add.w	d0,d0
0000EA30 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000EA34 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000EA38                            ; ===========================================================================
0000EA38 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000EA3A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000EA3C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000EA3E                            ; ===========================================================================
0000EA3E                            
0000EA3E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000EA3E 4E75                       		rts			; don't move the object
0000EA40                            ; ===========================================================================
0000EA40                            
0000EA40                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000EA40 6100 0000                  		bsr.w	Obj36_Wait
0000EA44 7000                       		moveq	#0,d0
0000EA46 1028 0034                  		move.b	$34(a0),d0
0000EA4A D068 0032                  		add.w	$32(a0),d0
0000EA4E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000EA52 4E75                       		rts	
0000EA54                            ; ===========================================================================
0000EA54                            
0000EA54                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000EA54 6100 0000                  		bsr.w	Obj36_Wait
0000EA58 7000                       		moveq	#0,d0
0000EA5A 1028 0034                  		move.b	$34(a0),d0
0000EA5E D068 0030                  		add.w	$30(a0),d0
0000EA62 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000EA66 4E75                       		rts	
0000EA68                            ; ===========================================================================
0000EA68                            
0000EA68                            Obj36_Wait:
0000EA68 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000EA6C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000EA6E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000EA72 6600                       		bne.s	locret_CFE6
0000EA74 4A28 0001                  		tst.b	1(a0)
0000EA78 6A00                       		bpl.s	locret_CFE6
0000EA7A 303C 00B6                  		move.w	#$B6,d0
0000EA7E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000EA84 6000                       		bra.s	locret_CFE6
0000EA86                            ; ===========================================================================
0000EA86                            
0000EA86                            loc_CFA4:
0000EA86 4A68 0036                  		tst.w	$36(a0)
0000EA8A 6700                       		beq.s	loc_CFC6
0000EA8C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EA92 6400                       		bcc.s	locret_CFE6
0000EA94 317C 0000 0034             		move.w	#0,$34(a0)
0000EA9A 317C 0000 0036             		move.w	#0,$36(a0)
0000EAA0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EAA6 6000                       		bra.s	locret_CFE6
0000EAA8                            ; ===========================================================================
0000EAA8                            
0000EAA8                            loc_CFC6:
0000EAA8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EAAE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EAB4 6500                       		bcs.s	locret_CFE6
0000EAB6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EABC 317C 0001 0036             		move.w	#1,$36(a0)
0000EAC2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EAC8                            
0000EAC8                            locret_CFE6:
0000EAC8 4E75                       		rts	
0000EACA                            ; ===========================================================================
0000EACA                            ; ---------------------------------------------------------------------------
0000EACA                            ; Sprite mappings - spikes
0000EACA                            ; ---------------------------------------------------------------------------
0000EACA                            Map_obj36:
0000EACA                            	include "_maps\obj36.asm"
0000EACA                            ; ---------------------------------------------------------------------------
0000EACA                            ; Sprite mappings - spikes
0000EACA                            ; ---------------------------------------------------------------------------
0000EACA 0000                       		dc.w byte_CFF4-Map_obj36
0000EACC 0000                       		dc.w byte_D004-Map_obj36
0000EACE 0000                       		dc.w byte_D014-Map_obj36
0000EAD0 0000                       		dc.w byte_D01A-Map_obj36
0000EAD2 0000                       		dc.w byte_D02A-Map_obj36
0000EAD4 0000                       		dc.w byte_D049-Map_obj36
0000EAD6 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000EAD7 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000EADC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EAE1 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000EAE6 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000EAE7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000EAEC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EAF1 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000EAF6 01                         byte_D014:	dc.b 1			; 1 spike
0000EAF7 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EAFC 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000EAFD F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000EB02 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EB07 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000EB0C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000EB0D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000EB12 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000EB17 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000EB1C F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000EB21 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000EB26 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000EB2B 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000EB2C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EB32 00                         		even
0000EB32 00                         		even
0000EB32                            
0000EB32                            ; ===========================================================================
0000EB32                            ; ---------------------------------------------------------------------------
0000EB32                            ; Object 3B - purple rock (GHZ)
0000EB32                            ; ---------------------------------------------------------------------------
0000EB32                            
0000EB32                            Obj3B:					; XREF: Obj_Index
0000EB32 7000                       		moveq	#0,d0
0000EB34 1028 0024                  		move.b	$24(a0),d0
0000EB38 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000EB3C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000EB40                            ; ===========================================================================
0000EB40 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000EB42 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000EB44                            ; ===========================================================================
0000EB44                            
0000EB44                            Obj3B_Main:				; XREF: Obj3B_Index
0000EB44 5428 0024                  		addq.b	#2,$24(a0)
0000EB48 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000EB50 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000EB56 117C 0004 0001             		move.b	#4,1(a0)
0000EB5C 117C 0013 0019             		move.b	#$13,$19(a0)
0000EB62 117C 0004 0018             		move.b	#4,$18(a0)
0000EB68                            
0000EB68                            Obj3B_Solid:				; XREF: Obj3B_Index
0000EB68 323C 001B                  		move.w	#$1B,d1
0000EB6C 343C 0010                  		move.w	#$10,d2
0000EB70 363C 0010                  		move.w	#$10,d3
0000EB74 3828 0008                  		move.w	8(a0),d4
0000EB78 6100 0000                  		bsr.w	SolidObject
0000EB7C 6100 0000                  		bsr.w	DisplaySprite
0000EB80 3028 0008                  		move.w	8(a0),d0
0000EB84 0240 FF80                  		andi.w	#$FF80,d0
0000EB88 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB8C 0441 0080                  		subi.w	#$80,d1
0000EB90 0241 FF80                  		andi.w	#$FF80,d1
0000EB94 9041                       		sub.w	d1,d0
0000EB96 0C40 0280                  		cmpi.w	#$280,d0
0000EB9A 6200 0000                  		bhi.w	DeleteObject
0000EB9E 4E75                       		rts	
0000EBA0                            ; ===========================================================================
0000EBA0                            ; ---------------------------------------------------------------------------
0000EBA0                            ; Object 49 - waterfall	sound effect (GHZ)
0000EBA0                            ; ---------------------------------------------------------------------------
0000EBA0                            
0000EBA0                            Obj49:					; XREF: Obj_Index
0000EBA0 7000                       		moveq	#0,d0
0000EBA2 1028 0024                  		move.b	$24(a0),d0
0000EBA6 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000EBAA 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000EBAE                            ; ===========================================================================
0000EBAE 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000EBB0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000EBB2                            ; ===========================================================================
0000EBB2                            
0000EBB2                            Obj49_Main:				; XREF: Obj49_Index
0000EBB2 5428 0024                  		addq.b	#2,$24(a0)
0000EBB6 117C 0004 0001             		move.b	#4,1(a0)
0000EBBC                            
0000EBBC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000EBBC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000EBC0 0200 003F                  		andi.b	#$3F,d0
0000EBC4 6600                       		bne.s	Obj49_ChkDel
0000EBC6 303C 00D0                  		move.w	#$D0,d0
0000EBCA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000EBD0                            
0000EBD0                            Obj49_ChkDel:
0000EBD0 3028 0008                  		move.w	8(a0),d0
0000EBD4 0240 FF80                  		andi.w	#$FF80,d0
0000EBD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBDC 0441 0080                  		subi.w	#$80,d1
0000EBE0 0241 FF80                  		andi.w	#$FF80,d1
0000EBE4 9041                       		sub.w	d1,d0
0000EBE6 0C40 0280                  		cmpi.w	#$280,d0
0000EBEA 6200 0000                  		bhi.w	DeleteObject
0000EBEE 4E75                       		rts	
0000EBF0                            ; ===========================================================================
0000EBF0                            ; ---------------------------------------------------------------------------
0000EBF0                            ; Sprite mappings - purple rock	(GHZ)
0000EBF0                            ; ---------------------------------------------------------------------------
0000EBF0                            Map_obj3B:
0000EBF0                            	include "_maps\obj3B.asm"
0000EBF0                            ; ---------------------------------------------------------------------------
0000EBF0                            ; Sprite mappings - purple rock	(GHZ)
0000EBF0                            ; ---------------------------------------------------------------------------
0000EBF0 0000                       		dc.w byte_D110-Map_obj3B
0000EBF2 02                         byte_D110:	dc.b 2
0000EBF3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EBF8 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EBFE 00                         		even
0000EBFE 00                         		even
0000EBFE                            
0000EBFE                            ; ===========================================================================
0000EBFE                            ; ---------------------------------------------------------------------------
0000EBFE                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EBFE                            ; ---------------------------------------------------------------------------
0000EBFE                            
0000EBFE                            Obj3C:					; XREF: Obj_Index
0000EBFE 7000                       		moveq	#0,d0
0000EC00 1028 0024                  		move.b	$24(a0),d0
0000EC04 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000EC08 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000EC0C 6000 0000                  		bra.w	MarkObjGone
0000EC10                            ; ===========================================================================
0000EC10 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000EC12 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000EC14 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000EC16                            ; ===========================================================================
0000EC16                            
0000EC16                            Obj3C_Main:				; XREF: Obj3C_Index
0000EC16 5428 0024                  		addq.b	#2,$24(a0)
0000EC1A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000EC22 317C 450F 0002             		move.w	#$450F,2(a0)
0000EC28 117C 0004 0001             		move.b	#4,1(a0)
0000EC2E 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC34 117C 0004 0018             		move.b	#4,$18(a0)
0000EC3A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000EC40                            
0000EC40                            Obj3C_Solid:				; XREF: Obj3C_Index
0000EC40 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000EC46 323C 001B                  		move.w	#$1B,d1
0000EC4A 343C 0020                  		move.w	#$20,d2
0000EC4E 363C 0020                  		move.w	#$20,d3
0000EC52 3828 0008                  		move.w	8(a0),d4
0000EC56 6100 0000                  		bsr.w	SolidObject
0000EC5A 0828 0005 0022             		btst	#5,$22(a0)
0000EC60 6600                       		bne.s	Obj3C_ChkRoll
0000EC62                            
0000EC62                            locret_D180:
0000EC62 4E75                       		rts	
0000EC64                            ; ===========================================================================
0000EC64                            
0000EC64                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000EC64                            	;	cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000EC64                            	;	bne.s	locret_D180	; if not, branch
0000EC64 3028 0030                  		move.w	$30(a0),d0
0000EC68 6A00                       		bpl.s	Obj3C_ChkSpeed
0000EC6A 4440                       		neg.w	d0
0000EC6C                            
0000EC6C                            Obj3C_ChkSpeed:
0000EC6C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EC70 65F0                       		bcs.s	locret_D180	; if not, branch
0000EC72 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000EC78 5869 0008                  		addq.w	#4,8(a1)
0000EC7C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000EC82 3028 0008                  		move.w	8(a0),d0
0000EC86 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000EC8A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000EC8C 5169 0008                  		subq.w	#8,8(a1)
0000EC90 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000EC96                            
0000EC96                            Obj3C_Smash:
0000EC96 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000EC9C 08A8 0005 0022             		bclr	#5,$22(a0)
0000ECA2 08A9 0005 0022             		bclr	#5,$22(a1)
0000ECA8 7207                       		moveq	#7,d1		; load 8 fragments
0000ECAA 343C 0070                  		move.w	#$70,d2
0000ECAE 6100                       		bsr.s	SmashObject
0000ECB0                            
0000ECB0                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000ECB0 6100 0000                  		bsr.w	SpeedToPos
0000ECB4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000ECBA 6100 0000                  		bsr.w	DisplaySprite
0000ECBE 4A28 0001                  		tst.b	1(a0)
0000ECC2 6A00 0000                  		bpl.w	DeleteObject
0000ECC6 4E75                       		rts	
0000ECC8                            
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            
0000ECC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECC8                            
0000ECC8                            
0000ECC8                            SmashObject:				; XREF: Obj3C_Smash
0000ECC8 7000                       		moveq	#0,d0
0000ECCA 1028 001A                  		move.b	$1A(a0),d0
0000ECCE D040                       		add.w	d0,d0
0000ECD0 2668 0004                  		movea.l	4(a0),a3
0000ECD4 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000ECD8 524B                       		addq.w	#1,a3
0000ECDA 08E8 0005 0001             		bset	#5,1(a0)
0000ECE0 1810                       		move.b	0(a0),d4
0000ECE2 1A28 0001                  		move.b	1(a0),d5
0000ECE6 2248                       		movea.l	a0,a1
0000ECE8 6000                       		bra.s	Smash_LoadFrag
0000ECEA                            ; ===========================================================================
0000ECEA                            
0000ECEA                            Smash_Loop:
0000ECEA 6100 0000                  		bsr.w	SingleObjLoad
0000ECEE 6600                       		bne.s	Smash_PlaySnd
0000ECF0 5A4B                       		addq.w	#5,a3
0000ECF2                            
0000ECF2                            Smash_LoadFrag:				; XREF: SmashObject
0000ECF2 137C 0004 0024             		move.b	#4,$24(a1)
0000ECF8 1284                       		move.b	d4,0(a1)
0000ECFA 234B 0004                  		move.l	a3,4(a1)
0000ECFE 1345 0001                  		move.b	d5,1(a1)
0000ED02 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED0E 3368 0002 0002             		move.w	2(a0),2(a1)
0000ED14 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000ED1A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000ED20 335C 0010                  		move.w	(a4)+,$10(a1)
0000ED24 335C 0012                  		move.w	(a4)+,$12(a1)
0000ED28 B3C8                       		cmpa.l	a0,a1
0000ED2A 6400                       		bcc.s	loc_D268
0000ED2C 2F08                       		move.l	a0,-(sp)
0000ED2E 2049                       		movea.l	a1,a0
0000ED30 6100 0000                  		bsr.w	SpeedToPos
0000ED34 D568 0012                  		add.w	d2,$12(a0)
0000ED38 205F                       		movea.l	(sp)+,a0
0000ED3A 6100 0000                  		bsr.w	DisplaySprite2
0000ED3E                            
0000ED3E                            loc_D268:
0000ED3E 51C9 FFAA                  		dbf	d1,Smash_Loop
0000ED42                            
0000ED42                            Smash_PlaySnd:
0000ED42 303C 00CB                  		move.w	#$CB,d0
0000ED46 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0000ED4C                            ; End of function SmashObject
0000ED4C                            
0000ED4C                            ; ===========================================================================
0000ED4C                            ; Smashed block	fragment speeds
0000ED4C                            ;
0000ED4C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000ED50 0600 FF00                  		dc.w $600, $FF00
0000ED54 0600 0100                  		dc.w $600, $100
0000ED58 0400 0500                  		dc.w $400, $500
0000ED5C 0600 FA00                  		dc.w $600, $FA00
0000ED60 0800 FE00                  		dc.w $800, $FE00
0000ED64 0800 0200                  		dc.w $800, $200
0000ED68 0600 0600                  		dc.w $600, $600
0000ED6C                            
0000ED6C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000ED70 F800 FE00                  		dc.w $F800, $FE00
0000ED74 F800 0200                  		dc.w $F800, $200
0000ED78 FA00 0600                  		dc.w $FA00, $600
0000ED7C FC00 FB00                  		dc.w $FC00, $FB00
0000ED80 FA00 FF00                  		dc.w $FA00, $FF00
0000ED84 FA00 0100                  		dc.w $FA00, $100
0000ED88 FC00 0500                  		dc.w $FC00, $500
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                            Map_obj3C:
0000ED8C                            	include "_maps\obj3C.asm"
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C 0000                       		dc.w byte_D2BC-Map_obj3C
0000ED8E 0000                       		dc.w byte_D2E5-Map_obj3C
0000ED90 0000                       		dc.w byte_D30E-Map_obj3C
0000ED92 08                         byte_D2BC:	dc.b 8
0000ED93 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000ED98 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000ED9D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000EDA2 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000EDA7 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EDAC F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EDB1 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EDB6 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EDBB 08                         byte_D2E5:	dc.b 8
0000EDBC E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EDC1 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EDC6 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EDCB 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EDD0 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EDD5 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EDDA 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EDDF 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EDE4 08                         byte_D30E:	dc.b 8
0000EDE5 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EDEA F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EDEF 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EDF4 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EDF9 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000EDFE F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000EE03 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000EE08 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000EE0E 00                         		even
0000EE0E 00                         		even
0000EE0E                            
0000EE0E                            ; ---------------------------------------------------------------------------
0000EE0E                            ; Object code loading subroutine
0000EE0E                            ; ---------------------------------------------------------------------------
0000EE0E                            
0000EE0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EE0E                            
0000EE0E                            
0000EE0E                            ObjectsLoad:				; XREF: TitleScreen; et al
0000EE0E 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000EE12 7E7F                       		moveq	#$7F,d7
0000EE14 7000                       		moveq	#0,d0
0000EE16 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000EE1C 6400                       		bcc.s	loc_D362
0000EE1E                            
0000EE1E                            loc_D348:
0000EE1E 1010                       		move.b	(a0),d0		; load object number from RAM
0000EE20 6700                       		beq.s	loc_D358
0000EE22 D040                       		add.w	d0,d0
0000EE24 D040                       		add.w	d0,d0
0000EE26 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000EE2A 4E91                       		jsr	(a1)		; run the object's code
0000EE2C 7000                       		moveq	#0,d0
0000EE2E                            
0000EE2E                            loc_D358:
0000EE2E 41E8 0040                  		lea	$40(a0),a0	; next object
0000EE32 51CF FFEA                  		dbf	d7,loc_D348
0000EE36 4E75                       		rts	
0000EE38                            ; ===========================================================================
0000EE38                            
0000EE38                            loc_D362:
0000EE38 0C38 000A D024                     cmpi.b  #$A,($FFFFD024).w		      ; Has Sonic drowned?
0000EE3E 67DE                               beq.s   loc_D348                        ; If so, run objects a little longer
0000EE40 7E1F                       		moveq	#$1F,d7
0000EE42 61DA                       		bsr.s	loc_D348
0000EE44 7E5F                       		moveq	#$5F,d7
0000EE46                            
0000EE46                            loc_D368:
0000EE46 7000                       		moveq	#0,d0
0000EE48 1010                       		move.b	(a0),d0
0000EE4A 6700                       		beq.s	loc_D378
0000EE4C 4A28 0001                  		tst.b	1(a0)
0000EE50 6A00                       		bpl.s	loc_D378
0000EE52 6100 0000                  		bsr.w	DisplaySprite
0000EE56                            
0000EE56                            loc_D378:
0000EE56 41E8 0040                  		lea	$40(a0),a0
0000EE5A                            
0000EE5A                            loc_D37C:
0000EE5A 51CF FFEA                  		dbf	d7,loc_D368
0000EE5E 4E75                       		rts	
0000EE60                            ; End of function ObjectsLoad
0000EE60                            
0000EE60                            ; ===========================================================================
0000EE60                            ; ---------------------------------------------------------------------------
0000EE60                            ; Object pointers
0000EE60                            ; ---------------------------------------------------------------------------
0000EE60                            Obj_Index:
0000EE60                            	include "_inc\Object pointers.asm"
0000EE60                            ; ---------------------------------------------------------------------------
0000EE60                            ; Object pointers
0000EE60                            ; ---------------------------------------------------------------------------
0000EE60 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	Obj03, ObjectFall
0000EE70 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000EE80 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000EE90 0000 0000 0000 C110 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000EEA0 0000 8DF6 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000EEB0 0000 941C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000EEC0 0000 9C6A 0000 9CD2 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000EED0 0000 A31C 0000 A60A 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000EEE0 0000 0000 0000 B28E 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000EEF0 0000 B5D0 0000 BC08 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000EF00 0000 AEC6 0000 A3F2 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000EF10 0000 C798 0000 BDF6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000EF20 0000 D16A 0000 D818 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000EF30 0000 CCCE 0000 E904 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000EF40 0000 DF9E 0000 E058 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000EF50 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000EF60 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000EF70 0000 D486 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000EF80 0000 EBA0 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000EF90 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000EFA0 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000EFB0 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000EFC0 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000EFD0 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000EFE0 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000EFF0 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000F000 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000F010 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000F020 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000F030 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000F040 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000F050 0000 0000 0000 E28E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000F060 0000 6946 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000F070 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000F080 0000 7026 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F080 0000 7026 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F090                            
0000F090                            ; ---------------------------------------------------------------------------
0000F090                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F090                            ; ---------------------------------------------------------------------------
0000F090                            
0000F090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F090                            
0000F090                            
0000F090                            ObjectFall:
0000F090 3028 0010                  		move.w	$10(a0),d0
0000F094 48C0                       		ext.l	d0
0000F096 E188                       		lsl.l	#8,d0
0000F098 D1A8 0008                  		add.l	d0,8(a0)
0000F09C 3028 0012                  		move.w	$12(a0),d0
0000F0A0 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000F0A6 48C0                       		ext.l	d0
0000F0A8 E188                       		lsl.l	#8,d0
0000F0AA D1A8 000C                  		add.l	d0,$C(a0)
0000F0AE 4E75                       		rts	
0000F0B0                            ; End of function ObjectFall
0000F0B0                            
0000F0B0                            ; ---------------------------------------------------------------------------
0000F0B0                            ; Subroutine translating object	speed to update	object position
0000F0B0                            ; ---------------------------------------------------------------------------
0000F0B0                            
0000F0B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0B0                            
0000F0B0                            
0000F0B0                            SpeedToPos:
0000F0B0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000F0B4 48C0                       		ext.l	d0
0000F0B6 E188                       		lsl.l	#8,d0		; multiply speed by $100
0000F0B8 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000F0BC 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000F0C0 48C0                       		ext.l	d0
0000F0C2 E188                       		lsl.l	#8,d0		; multiply by $100
0000F0C4 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000F0C8 4E75                       		rts	
0000F0CA                            ; End of function SpeedToPos
0000F0CA                            
0000F0CA                            ; ---------------------------------------------------------------------------
0000F0CA                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000F0CA                            ; ---------------------------------------------------------------------------
0000F0CA                            
0000F0CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0CA                            
0000F0CA                            
0000F0CA                            DisplaySprite:
0000F0CA 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000F0CE 3028 0018                  		move.w	$18(a0),d0
0000F0D2 E248                       		lsr.w	#1,d0
0000F0D4 0240 0380                  		andi.w	#$380,d0
0000F0D8 D2C0                       		adda.w	d0,a1
0000F0DA 0C51 007E                  		cmpi.w	#$7E,(a1)
0000F0DE 6400                       		bcc.s	locret_D620
0000F0E0 5451                       		addq.w	#2,(a1)
0000F0E2 D2D1                       		adda.w	(a1),a1
0000F0E4 3288                       		move.w	a0,(a1)
0000F0E6                            
0000F0E6                            locret_D620:
0000F0E6 4E75                       		rts	
0000F0E8                            ; End of function DisplaySprite
0000F0E8                            
0000F0E8                            ; ---------------------------------------------------------------------------
0000F0E8                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000F0E8                            ; ---------------------------------------------------------------------------
0000F0E8                            
0000F0E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0E8                            
0000F0E8                            
0000F0E8                            DisplaySprite2:
0000F0E8 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000F0EC 3029 0018                  		move.w	$18(a1),d0
0000F0F0 E248                       		lsr.w	#1,d0
0000F0F2 0240 0380                  		andi.w	#$380,d0
0000F0F6 D4C0                       		adda.w	d0,a2
0000F0F8 0C52 007E                  		cmpi.w	#$7E,(a2)
0000F0FC 6400                       		bcc.s	locret_D63E
0000F0FE 5452                       		addq.w	#2,(a2)
0000F100 D4D2                       		adda.w	(a2),a2
0000F102 3489                       		move.w	a1,(a2)
0000F104                            
0000F104                            locret_D63E:
0000F104 4E75                       		rts	
0000F106                            ; End of function DisplaySprite2
0000F106                            
0000F106                            ; ---------------------------------------------------------------------------
0000F106                            ; Subroutine to	delete an object
0000F106                            ; ---------------------------------------------------------------------------
0000F106                            
0000F106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F106                            
0000F106                            
0000F106                            DeleteObject:
0000F106 2248                       		movea.l	a0,a1
0000F108                            
0000F108                            DeleteObject2:
0000F108 7200                       		moveq	#0,d1
0000F10A 700F                       		moveq	#$F,d0
0000F10C                            
0000F10C                            loc_D646:
0000F10C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F10E 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000F112 4E75                       		rts	
0000F114                            ; End of function DeleteObject
0000F114                            
0000F114                            ; ===========================================================================
0000F114 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000F118 00FF F700                  		dc.l $FFF700		; main screen x-position
0000F11C 00FF F708                  		dc.l $FFF708		; background x-position	1
0000F120 00FF F718                  		dc.l $FFF718		; background x-position	2
0000F124                            ; ---------------------------------------------------------------------------
0000F124                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F124                            ; ---------------------------------------------------------------------------
0000F124                            
0000F124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F124                            
0000F124                            
0000F124                            BuildSprites:				; XREF: TitleScreen; et al
0000F124 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000F128 7A00                       		moveq	#0,d5
0000F12A 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000F12E 7E07                       		moveq	#7,d7
0000F130                            
0000F130                            loc_D66A:
0000F130 4A54                       		tst.w	(a4)
0000F132 6700 0000                  		beq.w	loc_D72E
0000F136 7C02                       		moveq	#2,d6
0000F138                            
0000F138                            loc_D672:
0000F138 3074 6000                  		movea.w	(a4,d6.w),a0
0000F13C 4A10                       		tst.b	(a0)
0000F13E 6700 0000                  		beq.w	loc_D726
0000F142 08A8 0007 0001             		bclr	#7,1(a0)
0000F148 1028 0001                  		move.b	1(a0),d0
0000F14C 1800                       		move.b	d0,d4
0000F14E 0240 000C                  		andi.w	#$C,d0
0000F152 6700                       		beq.s	loc_D6DE
0000F154 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F158 7000                       		moveq	#0,d0
0000F15A 1028 0019                  		move.b	$19(a0),d0
0000F15E 3628 0008                  		move.w	8(a0),d3
0000F162 9651                       		sub.w	(a1),d3
0000F164 3203                       		move.w	d3,d1
0000F166 D240                       		add.w	d0,d1
0000F168 6B00 0000                  		bmi.w	loc_D726
0000F16C 3203                       		move.w	d3,d1
0000F16E 9240                       		sub.w	d0,d1
0000F170 0C41 0140                  		cmpi.w	#$140,d1
0000F174 6C00                       		bge.s	loc_D726
0000F176 0643 0080                  		addi.w	#$80,d3
0000F17A 0804 0004                  		btst	#4,d4
0000F17E 6700                       		beq.s	loc_D6E8
0000F180 7000                       		moveq	#0,d0
0000F182 1028 0016                  		move.b	$16(a0),d0
0000F186 3428 000C                  		move.w	$C(a0),d2
0000F18A 9469 0004                  		sub.w	4(a1),d2
0000F18E 3202                       		move.w	d2,d1
0000F190 D240                       		add.w	d0,d1
0000F192 6B00                       		bmi.s	loc_D726
0000F194 3202                       		move.w	d2,d1
0000F196 9240                       		sub.w	d0,d1
0000F198 0C41 00E0                  		cmpi.w	#$E0,d1
0000F19C 6C00                       		bge.s	loc_D726
0000F19E 0642 0080                  		addi.w	#$80,d2
0000F1A2 6000                       		bra.s	loc_D700
0000F1A4                            ; ===========================================================================
0000F1A4                            
0000F1A4                            loc_D6DE:
0000F1A4 3428 000A                  		move.w	$A(a0),d2
0000F1A8 3628 0008                  		move.w	8(a0),d3
0000F1AC 6000                       		bra.s	loc_D700
0000F1AE                            ; ===========================================================================
0000F1AE                            
0000F1AE                            loc_D6E8:
0000F1AE 3428 000C                  		move.w	$C(a0),d2
0000F1B2 9469 0004                  		sub.w	4(a1),d2
0000F1B6 0642 0080                  		addi.w	#$80,d2
0000F1BA 0C42 0060                  		cmpi.w	#$60,d2
0000F1BE 6500                       		bcs.s	loc_D726
0000F1C0 0C42 0180                  		cmpi.w	#$180,d2
0000F1C4 6400                       		bcc.s	loc_D726
0000F1C6                            
0000F1C6                            loc_D700:
0000F1C6 2268 0004                  		movea.l	4(a0),a1
0000F1CA 7200                       		moveq	#0,d1
0000F1CC 0804 0005                  		btst	#5,d4
0000F1D0 6600                       		bne.s	loc_D71C
0000F1D2 1228 001A                  		move.b	$1A(a0),d1
0000F1D6 D201                       		add.b	d1,d1
0000F1D8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F1DC 1219                       		move.b	(a1)+,d1
0000F1DE 5301                       		subq.b	#1,d1
0000F1E0 6B00                       		bmi.s	loc_D720
0000F1E2                            
0000F1E2                            loc_D71C:
0000F1E2 6100 0000                  		bsr.w	sub_D750
0000F1E6                            
0000F1E6                            loc_D720:
0000F1E6 08E8 0007 0001             		bset	#7,1(a0)
0000F1EC                            
0000F1EC                            loc_D726:
0000F1EC 5446                       		addq.w	#2,d6
0000F1EE 5554                       		subq.w	#2,(a4)
0000F1F0 6600 FF46                  		bne.w	loc_D672
0000F1F4                            
0000F1F4                            loc_D72E:
0000F1F4 49EC 0080                  		lea	$80(a4),a4
0000F1F8 51CF FF36                  		dbf	d7,loc_D66A
0000F1FC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F200 0C05 0050                  		cmpi.b	#$50,d5
0000F204 6700                       		beq.s	loc_D748
0000F206 24BC 0000 0000             		move.l	#0,(a2)
0000F20C 4E75                       		rts	
0000F20E                            ; ===========================================================================
0000F20E                            
0000F20E                            loc_D748:
0000F20E 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F214 4E75                       		rts	
0000F216                            ; End of function BuildSprites
0000F216                            
0000F216                            
0000F216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F216                            
0000F216                            
0000F216                            sub_D750:				; XREF: BuildSprites
0000F216 3668 0002                  		movea.w	2(a0),a3
0000F21A 0804 0000                  		btst	#0,d4
0000F21E 6600                       		bne.s	loc_D796
0000F220 0804 0001                  		btst	#1,d4
0000F224 6600 0000                  		bne.w	loc_D7E4
0000F228                            ; End of function sub_D750
0000F228                            
0000F228                            
0000F228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F228                            
0000F228                            
0000F228                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F228 0C05 0050                  		cmpi.b	#$50,d5
0000F22C 6700                       		beq.s	locret_D794
0000F22E 1019                       		move.b	(a1)+,d0
0000F230 4880                       		ext.w	d0
0000F232 D042                       		add.w	d2,d0
0000F234 34C0                       		move.w	d0,(a2)+
0000F236 14D9                       		move.b	(a1)+,(a2)+
0000F238 5205                       		addq.b	#1,d5
0000F23A 14C5                       		move.b	d5,(a2)+
0000F23C 1019                       		move.b	(a1)+,d0
0000F23E E148                       		lsl.w	#8,d0
0000F240 1019                       		move.b	(a1)+,d0
0000F242 D04B                       		add.w	a3,d0
0000F244 34C0                       		move.w	d0,(a2)+
0000F246 1019                       		move.b	(a1)+,d0
0000F248 4880                       		ext.w	d0
0000F24A D043                       		add.w	d3,d0
0000F24C 0240 01FF                  		andi.w	#$1FF,d0
0000F250 6600                       		bne.s	loc_D78E
0000F252 5240                       		addq.w	#1,d0
0000F254                            
0000F254                            loc_D78E:
0000F254 34C0                       		move.w	d0,(a2)+
0000F256 51C9 FFD0                  		dbf	d1,sub_D762
0000F25A                            
0000F25A                            locret_D794:
0000F25A 4E75                       		rts	
0000F25C                            ; End of function sub_D762
0000F25C                            
0000F25C                            ; ===========================================================================
0000F25C                            
0000F25C                            loc_D796:
0000F25C 0804 0001                  		btst	#1,d4
0000F260 6600 0000                  		bne.w	loc_D82A
0000F264                            
0000F264                            loc_D79E:
0000F264 0C05 0050                  		cmpi.b	#$50,d5
0000F268 6700                       		beq.s	locret_D7E2
0000F26A 1019                       		move.b	(a1)+,d0
0000F26C 4880                       		ext.w	d0
0000F26E D042                       		add.w	d2,d0
0000F270 34C0                       		move.w	d0,(a2)+
0000F272 1819                       		move.b	(a1)+,d4
0000F274 14C4                       		move.b	d4,(a2)+
0000F276 5205                       		addq.b	#1,d5
0000F278 14C5                       		move.b	d5,(a2)+
0000F27A 1019                       		move.b	(a1)+,d0
0000F27C E148                       		lsl.w	#8,d0
0000F27E 1019                       		move.b	(a1)+,d0
0000F280 D04B                       		add.w	a3,d0
0000F282 0A40 0800                  		eori.w	#$800,d0
0000F286 34C0                       		move.w	d0,(a2)+
0000F288 1019                       		move.b	(a1)+,d0
0000F28A 4880                       		ext.w	d0
0000F28C 4440                       		neg.w	d0
0000F28E D804                       		add.b	d4,d4
0000F290 0244 0018                  		andi.w	#$18,d4
0000F294 5044                       		addq.w	#8,d4
0000F296 9044                       		sub.w	d4,d0
0000F298 D043                       		add.w	d3,d0
0000F29A 0240 01FF                  		andi.w	#$1FF,d0
0000F29E 6600                       		bne.s	loc_D7DC
0000F2A0 5240                       		addq.w	#1,d0
0000F2A2                            
0000F2A2                            loc_D7DC:
0000F2A2 34C0                       		move.w	d0,(a2)+
0000F2A4 51C9 FFBE                  		dbf	d1,loc_D79E
0000F2A8                            
0000F2A8                            locret_D7E2:
0000F2A8 4E75                       		rts	
0000F2AA                            ; ===========================================================================
0000F2AA                            
0000F2AA                            loc_D7E4:				; XREF: sub_D750
0000F2AA 0C05 0050                  		cmpi.b	#$50,d5
0000F2AE 6700                       		beq.s	locret_D828
0000F2B0 1019                       		move.b	(a1)+,d0
0000F2B2 1811                       		move.b	(a1),d4
0000F2B4 4880                       		ext.w	d0
0000F2B6 4440                       		neg.w	d0
0000F2B8 E70C                       		lsl.b	#3,d4
0000F2BA 0244 0018                  		andi.w	#$18,d4
0000F2BE 5044                       		addq.w	#8,d4
0000F2C0 9044                       		sub.w	d4,d0
0000F2C2 D042                       		add.w	d2,d0
0000F2C4 34C0                       		move.w	d0,(a2)+
0000F2C6 14D9                       		move.b	(a1)+,(a2)+
0000F2C8 5205                       		addq.b	#1,d5
0000F2CA 14C5                       		move.b	d5,(a2)+
0000F2CC 1019                       		move.b	(a1)+,d0
0000F2CE E148                       		lsl.w	#8,d0
0000F2D0 1019                       		move.b	(a1)+,d0
0000F2D2 D04B                       		add.w	a3,d0
0000F2D4 0A40 1000                  		eori.w	#$1000,d0
0000F2D8 34C0                       		move.w	d0,(a2)+
0000F2DA 1019                       		move.b	(a1)+,d0
0000F2DC 4880                       		ext.w	d0
0000F2DE D043                       		add.w	d3,d0
0000F2E0 0240 01FF                  		andi.w	#$1FF,d0
0000F2E4 6600                       		bne.s	loc_D822
0000F2E6 5240                       		addq.w	#1,d0
0000F2E8                            
0000F2E8                            loc_D822:
0000F2E8 34C0                       		move.w	d0,(a2)+
0000F2EA 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F2EE                            
0000F2EE                            locret_D828:
0000F2EE 4E75                       		rts	
0000F2F0                            ; ===========================================================================
0000F2F0                            
0000F2F0                            loc_D82A:
0000F2F0 0C05 0050                  		cmpi.b	#$50,d5
0000F2F4 6700                       		beq.s	locret_D87C
0000F2F6 1019                       		move.b	(a1)+,d0
0000F2F8 1811                       		move.b	(a1),d4
0000F2FA 4880                       		ext.w	d0
0000F2FC 4440                       		neg.w	d0
0000F2FE E70C                       		lsl.b	#3,d4
0000F300 0244 0018                  		andi.w	#$18,d4
0000F304 5044                       		addq.w	#8,d4
0000F306 9044                       		sub.w	d4,d0
0000F308 D042                       		add.w	d2,d0
0000F30A 34C0                       		move.w	d0,(a2)+
0000F30C 1819                       		move.b	(a1)+,d4
0000F30E 14C4                       		move.b	d4,(a2)+
0000F310 5205                       		addq.b	#1,d5
0000F312 14C5                       		move.b	d5,(a2)+
0000F314 1019                       		move.b	(a1)+,d0
0000F316 E148                       		lsl.w	#8,d0
0000F318 1019                       		move.b	(a1)+,d0
0000F31A D04B                       		add.w	a3,d0
0000F31C 0A40 1800                  		eori.w	#$1800,d0
0000F320 34C0                       		move.w	d0,(a2)+
0000F322 1019                       		move.b	(a1)+,d0
0000F324 4880                       		ext.w	d0
0000F326 4440                       		neg.w	d0
0000F328 D804                       		add.b	d4,d4
0000F32A 0244 0018                  		andi.w	#$18,d4
0000F32E 5044                       		addq.w	#8,d4
0000F330 9044                       		sub.w	d4,d0
0000F332 D043                       		add.w	d3,d0
0000F334 0240 01FF                  		andi.w	#$1FF,d0
0000F338 6600                       		bne.s	loc_D876
0000F33A 5240                       		addq.w	#1,d0
0000F33C                            
0000F33C                            loc_D876:
0000F33C 34C0                       		move.w	d0,(a2)+
0000F33E 51C9 FFB0                  		dbf	d1,loc_D82A
0000F342                            
0000F342                            locret_D87C:
0000F342 4E75                       		rts	
0000F344                            ; ---------------------------------------------------------------------------
0000F344                            ; Subroutine to	check if an object is on the screen
0000F344                            ; ---------------------------------------------------------------------------
0000F344                            
0000F344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F344                            
0000F344                            
0000F344                            ChkObjOnScreen:
0000F344 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000F348 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000F34C 6B00                       		bmi.s	NotOnScreen
0000F34E 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F352 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F354                            
0000F354 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000F358 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000F35C 6B00                       		bmi.s	NotOnScreen
0000F35E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F362 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F364                            
0000F364 7000                       		moveq	#0,d0		; set flag to 0
0000F366 4E75                       		rts	
0000F368                            ; ===========================================================================
0000F368                            
0000F368                            NotOnScreen:				; XREF: ChkObjOnScreen
0000F368 7001                       		moveq	#1,d0		; set flag to 1
0000F36A 4E75                       		rts	
0000F36C                            ; End of function ChkObjOnScreen
0000F36C                            
0000F36C                            
0000F36C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F36C                            
0000F36C                            
0000F36C                            ChkObjOnScreen2:
0000F36C 7200                       		moveq	#0,d1
0000F36E 1228 0019                  		move.b	$19(a0),d1
0000F372 3028 0008                  		move.w	8(a0),d0
0000F376 9078 F700                  		sub.w	($FFFFF700).w,d0
0000F37A D041                       		add.w	d1,d0
0000F37C 6B00                       		bmi.s	NotOnScreen2
0000F37E D241                       		add.w	d1,d1
0000F380 9041                       		sub.w	d1,d0
0000F382 0C40 0140                  		cmpi.w	#320,d0
0000F386 6C00                       		bge.s	NotOnScreen2
0000F388                            
0000F388 3228 000C                  		move.w	$C(a0),d1
0000F38C 9278 F704                  		sub.w	($FFFFF704).w,d1
0000F390 6B00                       		bmi.s	NotOnScreen2
0000F392 0C41 00E0                  		cmpi.w	#224,d1
0000F396 6C00                       		bge.s	NotOnScreen2
0000F398                            
0000F398 7000                       		moveq	#0,d0
0000F39A 4E75                       		rts	
0000F39C                            ; ===========================================================================
0000F39C                            
0000F39C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000F39C 7001                       		moveq	#1,d0
0000F39E 4E75                       		rts	
0000F3A0                            ; End of function ChkObjOnScreen2
0000F3A0                            
0000F3A0                            ; ---------------------------------------------------------------------------
0000F3A0                            ; Subroutine to	load a level's objects
0000F3A0                            ; ---------------------------------------------------------------------------
0000F3A0                            
0000F3A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3A0                            
0000F3A0                            
0000F3A0                            ObjPosLoad:				; XREF: Level; et al
0000F3A0 7000                       		moveq	#0,d0
0000F3A2 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000F3A6 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F3AA 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F3AE                            ; End of function ObjPosLoad
0000F3AE                            
0000F3AE                            ; ===========================================================================
0000F3AE 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F3B0 0000                       		dc.w OPL_Next-OPL_Index
0000F3B2                            ; ===========================================================================
0000F3B2                            
0000F3B2                            OPL_Main:				; XREF: OPL_Index
0000F3B2 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000F3B6 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000F3BA ED08                       		lsl.b	#6,d0
0000F3BC E848                       		lsr.w	#4,d0
0000F3BE 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F3C4 2248                       		movea.l	a0,a1
0000F3C6 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F3CA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F3CE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F3D2 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F3D6 21C9 F778                  		move.l	a1,($FFFFF778).w
0000F3DA 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000F3DE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F3E2 34FC 0101                  		move.w	#$101,(a2)+
0000F3E6 303C 005E                  		move.w	#$5E,d0
0000F3EA                            
0000F3EA                            OPL_ClrList:
0000F3EA 429A                       		clr.l	(a2)+
0000F3EC 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F3F0                            
0000F3F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F3F4 7400                       		moveq	#0,d2
0000F3F6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F3FA 0446 0080                  		subi.w	#$80,d6
0000F3FE 6400                       		bcc.s	loc_D93C
0000F400 7C00                       		moveq	#0,d6
0000F402                            
0000F402                            loc_D93C:
0000F402 0246 FF80                  		andi.w	#$FF80,d6
0000F406 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F40A                            
0000F40A                            loc_D944:
0000F40A BC50                       		cmp.w	(a0),d6
0000F40C 6300                       		bls.s	loc_D956
0000F40E 4A28 0004                  		tst.b	4(a0)
0000F412 6A00                       		bpl.s	loc_D952
0000F414 1412                       		move.b	(a2),d2
0000F416 5212                       		addq.b	#1,(a2)
0000F418                            
0000F418                            loc_D952:
0000F418 5C48                       		addq.w	#6,a0
0000F41A 60EE                       		bra.s	loc_D944
0000F41C                            ; ===========================================================================
0000F41C                            
0000F41C                            loc_D956:
0000F41C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F420 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F424 0446 0080                  		subi.w	#$80,d6
0000F428 6500                       		bcs.s	loc_D976
0000F42A                            
0000F42A                            loc_D964:
0000F42A BC50                       		cmp.w	(a0),d6
0000F42C 6300                       		bls.s	loc_D976
0000F42E 4A28 0004                  		tst.b	4(a0)
0000F432 6A00                       		bpl.s	loc_D972
0000F434 522A 0001                  		addq.b	#1,1(a2)
0000F438                            
0000F438                            loc_D972:
0000F438 5C48                       		addq.w	#6,a0
0000F43A 60EE                       		bra.s	loc_D964
0000F43C                            ; ===========================================================================
0000F43C                            
0000F43C                            loc_D976:
0000F43C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F440 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000F446                            
0000F446                            OPL_Next:				; XREF: OPL_Index
0000F446 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F44A 7400                       		moveq	#0,d2
0000F44C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F450 0246 FF80                  		andi.w	#$FF80,d6
0000F454 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000F458 6700 0000                  		beq.w	locret_DA3A
0000F45C 6C00                       		bge.s	loc_D9F6
0000F45E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F462 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F466 0446 0080                  		subi.w	#$80,d6
0000F46A 6500                       		bcs.s	loc_D9D2
0000F46C                            
0000F46C                            loc_D9A6:
0000F46C BC68 FFFA                  		cmp.w	-6(a0),d6
0000F470 6C00                       		bge.s	loc_D9D2
0000F472 5D48                       		subq.w	#6,a0
0000F474 4A28 0004                  		tst.b	4(a0)
0000F478 6A00                       		bpl.s	loc_D9BC
0000F47A 532A 0001                  		subq.b	#1,1(a2)
0000F47E 142A 0001                  		move.b	1(a2),d2
0000F482                            
0000F482                            loc_D9BC:
0000F482 6100 0000                  		bsr.w	loc_DA3C
0000F486 6600                       		bne.s	loc_D9C6
0000F488 5D48                       		subq.w	#6,a0
0000F48A 60E0                       		bra.s	loc_D9A6
0000F48C                            ; ===========================================================================
0000F48C                            
0000F48C                            loc_D9C6:
0000F48C 4A28 0004                  		tst.b	4(a0)
0000F490 6A00                       		bpl.s	loc_D9D0
0000F492 522A 0001                  		addq.b	#1,1(a2)
0000F496                            
0000F496                            loc_D9D0:
0000F496 5C48                       		addq.w	#6,a0
0000F498                            
0000F498                            loc_D9D2:
0000F498 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F49C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F4A0 0646 0300                  		addi.w	#$300,d6
0000F4A4                            
0000F4A4                            loc_D9DE:
0000F4A4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F4A8 6E00                       		bgt.s	loc_D9F0
0000F4AA 4A28 FFFE                  		tst.b	-2(a0)
0000F4AE 6A00                       		bpl.s	loc_D9EC
0000F4B0 5312                       		subq.b	#1,(a2)
0000F4B2                            
0000F4B2                            loc_D9EC:
0000F4B2 5D48                       		subq.w	#6,a0
0000F4B4 60EE                       		bra.s	loc_D9DE
0000F4B6                            ; ===========================================================================
0000F4B6                            
0000F4B6                            loc_D9F0:
0000F4B6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F4BA 4E75                       		rts	
0000F4BC                            ; ===========================================================================
0000F4BC                            
0000F4BC                            loc_D9F6:
0000F4BC 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F4C0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F4C4 0646 0280                  		addi.w	#$280,d6
0000F4C8                            
0000F4C8                            loc_DA02:
0000F4C8 BC50                       		cmp.w	(a0),d6
0000F4CA 6300                       		bls.s	loc_DA16
0000F4CC 4A28 0004                  		tst.b	4(a0)
0000F4D0 6A00                       		bpl.s	loc_DA10
0000F4D2 1412                       		move.b	(a2),d2
0000F4D4 5212                       		addq.b	#1,(a2)
0000F4D6                            
0000F4D6                            loc_DA10:
0000F4D6 6100 0000                  		bsr.w	loc_DA3C
0000F4DA 67EC                       		beq.s	loc_DA02
0000F4DC 4A28 0004                  		tst.b	$04(a0)			; MJ: was this object a remember state?
0000F4E0 6A00                       		bpl.s	loc_DA16		; MJ: if not, branch
0000F4E2 5312                       		subq.b	#$01,(a2)		; MJ: move right counter back
0000F4E4                            
0000F4E4                            loc_DA16:
0000F4E4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F4E8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F4EC 0446 0300                  		subi.w	#$300,d6
0000F4F0 6500                       		bcs.s	loc_DA36
0000F4F2                            
0000F4F2                            loc_DA24:
0000F4F2 BC50                       		cmp.w	(a0),d6
0000F4F4 6300                       		bls.s	loc_DA36
0000F4F6 4A28 0004                  		tst.b	4(a0)
0000F4FA 6A00                       		bpl.s	loc_DA32
0000F4FC 522A 0001                  		addq.b	#1,1(a2)
0000F500                            
0000F500                            loc_DA32:
0000F500 5C48                       		addq.w	#6,a0
0000F502 60EE                       		bra.s	loc_DA24
0000F504                            ; ===========================================================================
0000F504                            
0000F504                            loc_DA36:
0000F504 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F508                            
0000F508                            locret_DA3A:
0000F508 4E75                       		rts	
0000F50A                            ; ===========================================================================
0000F50A                            
0000F50A                            loc_DA3C:
0000F50A 4A28 0004                  		tst.b	4(a0)
0000F50E 6A00                       		bpl.s	OPL_MakeItem
0000F510 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000F516 6700                       		beq.s	OPL_MakeItem
0000F518 5C48                       		addq.w	#6,a0
0000F51A 7000                       		moveq	#0,d0
0000F51C 4E75                       		rts	
0000F51E                            ; ===========================================================================
0000F51E                            
0000F51E                            OPL_MakeItem:
0000F51E 6100 0000                  		bsr.w	SingleObjLoad
0000F522 6600                       		bne.s	locret_DA8A
0000F524 3358 0008                  		move.w	(a0)+,8(a1)
0000F528 3018                       		move.w	(a0)+,d0
0000F52A 3200                       		move.w	d0,d1
0000F52C 0240 0FFF                  		andi.w	#$FFF,d0
0000F530 3340 000C                  		move.w	d0,$C(a1)
0000F534 E559                       		rol.w	#2,d1
0000F536 0201 0003                  		andi.b	#3,d1
0000F53A 1341 0001                  		move.b	d1,1(a1)
0000F53E 1341 0022                  		move.b	d1,$22(a1)
0000F542 1018                       		move.b	(a0)+,d0
0000F544 6A00                       		bpl.s	loc_DA80
0000F546 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)		; MJ: set as removed
0000F54C 0200 007F                  		andi.b	#$7F,d0
0000F550 1342 0023                  		move.b	d2,$23(a1)
0000F554                            
0000F554                            loc_DA80:
0000F554 1280                       		move.b	d0,0(a1)
0000F556 1358 0028                  		move.b	(a0)+,$28(a1)
0000F55A 7000                       		moveq	#0,d0
0000F55C                            
0000F55C                            locret_DA8A:
0000F55C 4E75                       		rts	
0000F55E                            ; ---------------------------------------------------------------------------
0000F55E                            ; Single object	loading	subroutine
0000F55E                            ; ---------------------------------------------------------------------------
0000F55E                            
0000F55E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F55E                            
0000F55E                            
0000F55E                            SingleObjLoad:
0000F55E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F562 303C 005F                  		move.w	#$5F,d0
0000F566                            
0000F566                            loc_DA94:
0000F566 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F568 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F56A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F56E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F572                            
0000F572                            locret_DAA0:
0000F572 4E75                       		rts	
0000F574                            ; End of function SingleObjLoad
0000F574                            
0000F574                            
0000F574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F574                            
0000F574                            
0000F574                            SingleObjLoad2:
0000F574 2248                       		movea.l	a0,a1
0000F576 303C F000                  		move.w	#-$1000,d0
0000F57A 9048                       		sub.w	a0,d0
0000F57C EC48                       		lsr.w	#6,d0
0000F57E 5340                       		subq.w	#1,d0
0000F580 6500                       		bcs.s	locret_DABC
0000F582                            
0000F582                            loc_DAB0:
0000F582 4A11                       		tst.b	(a1)
0000F584 6700                       		beq.s	locret_DABC
0000F586 43E9 0040                  		lea	$40(a1),a1
0000F58A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F58E                            
0000F58E                            locret_DABC:
0000F58E 4E75                       		rts	
0000F590                            ; End of function SingleObjLoad2
0000F590                            
0000F590                            ; ===========================================================================
0000F590                            ; ---------------------------------------------------------------------------
0000F590                            ; Object 41 - springs
0000F590                            ; ---------------------------------------------------------------------------
0000F590                            
0000F590                            Obj41:					; XREF: Obj_Index
0000F590 7000                       		moveq	#0,d0
0000F592 1028 0024                  		move.b	$24(a0),d0
0000F596 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F59A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F59E 6100 FB2A                  		bsr.w	DisplaySprite
0000F5A2 3028 0008                  		move.w	8(a0),d0
0000F5A6 0240 FF80                  		andi.w	#$FF80,d0
0000F5AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5AE 0441 0080                  		subi.w	#$80,d1
0000F5B2 0241 FF80                  		andi.w	#$FF80,d1
0000F5B6 9041                       		sub.w	d1,d0
0000F5B8 0C40 0280                  		cmpi.w	#$280,d0
0000F5BC 6200 FB48                  		bhi.w	DeleteObject
0000F5C0 4E75                       		rts	
0000F5C2                            ; ===========================================================================
0000F5C2 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F5C4 0000                       		dc.w Obj41_Up-Obj41_Index
0000F5C6 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F5C8 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F5CA 0000                       		dc.w Obj41_LR-Obj41_Index
0000F5CC 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F5CE 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F5D0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F5D2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F5D4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F5D6                            
0000F5D6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F5D8 F600                       		dc.w -$A00		; power	of yellow spring
0000F5DA                            ; ===========================================================================
0000F5DA                            
0000F5DA                            Obj41_Main:				; XREF: Obj41_Index
0000F5DA 5428 0024                  		addq.b	#2,$24(a0)
0000F5DE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F5E6 317C 0523 0002             		move.w	#$523,2(a0)
0000F5EC 0028 0004 0001             		ori.b	#4,1(a0)
0000F5F2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F5F8 117C 0004 0018             		move.b	#4,$18(a0)
0000F5FE 1028 0028                  		move.b	$28(a0),d0
0000F602 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F606 6700                       		beq.s	loc_DB54	; if not, branch
0000F608 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F60E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F614 117C 0003 001A             		move.b	#3,$1A(a0)
0000F61A 317C 0533 0002             		move.w	#$533,2(a0)
0000F620 117C 0008 0019             		move.b	#8,$19(a0)
0000F626                            
0000F626                            loc_DB54:
0000F626 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F62A 6700                       		beq.s	loc_DB66	; if not, branch
0000F62C 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F632 08E8 0001 0022             		bset	#1,$22(a0)
0000F638                            
0000F638                            loc_DB66:
0000F638 0800 0001                  		btst	#1,d0
0000F63C 6700                       		beq.s	loc_DB72
0000F63E 08E8 0005 0002             		bset	#5,2(a0)
0000F644                            
0000F644                            loc_DB72:
0000F644 0240 000F                  		andi.w	#$F,d0
0000F648 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F64E 4E75                       		rts	
0000F650                            ; ===========================================================================
0000F650                            
0000F650                            Obj41_Up:				; XREF: Obj41_Index
0000F650 323C 001B                  		move.w	#$1B,d1
0000F654 343C 0008                  		move.w	#8,d2
0000F658 363C 0010                  		move.w	#$10,d3
0000F65C 3828 0008                  		move.w	8(a0),d4
0000F660 6100 0000                  		bsr.w	SolidObject
0000F664 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F668 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F66A 4E75                       		rts	
0000F66C                            ; ===========================================================================
0000F66C                            
0000F66C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F66C 5428 0024                  		addq.b	#2,$24(a0)
0000F670 5069 000C                  		addq.w	#8,$C(a1)
0000F674 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F67A 08E9 0001 0022             		bset	#1,$22(a1)
0000F680 08A9 0003 0022             		bclr	#3,$22(a1)
0000F686 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F68C 137C 0002 0024             		move.b	#2,$24(a1)
0000F692 08A8 0003 0022             		bclr	#3,$22(a0)
0000F698 4228 0025                  		clr.b	$25(a0)
0000F69C 303C 00CC                  		move.w	#$CC,d0
0000F6A0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F6A6                            
0000F6A6                            Obj41_AniUp:				; XREF: Obj41_Index
0000F6A6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F6AC 6000 CB5E                  		bra.w	AnimateSprite
0000F6B0                            ; ===========================================================================
0000F6B0                            
0000F6B0                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F6B0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F6B6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F6BA 4E75                       		rts	
0000F6BC                            ; ===========================================================================
0000F6BC                            
0000F6BC                            Obj41_LR:				; XREF: Obj41_Index
0000F6BC 323C 0013                  		move.w	#$13,d1
0000F6C0 343C 000E                  		move.w	#$E,d2
0000F6C4 363C 000F                  		move.w	#$F,d3
0000F6C8 3828 0008                  		move.w	8(a0),d4
0000F6CC 6100 0000                  		bsr.w	SolidObject
0000F6D0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F6D6 6600                       		bne.s	loc_DC0C
0000F6D8 117C 0008 0024             		move.b	#8,$24(a0)
0000F6DE                            
0000F6DE                            loc_DC0C:
0000F6DE 0828 0005 0022             		btst	#5,$22(a0)
0000F6E4 6600                       		bne.s	Obj41_BounceLR
0000F6E6 4E75                       		rts	
0000F6E8                            ; ===========================================================================
0000F6E8                            
0000F6E8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F6E8 5428 0024                  		addq.b	#2,$24(a0)
0000F6EC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F6F2 5069 0008                  		addq.w	#8,8(a1)
0000F6F6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F6FC 6600                       		bne.s	loc_DC36	; if yes, branch
0000F6FE 0469 0010 0008             		subi.w	#$10,8(a1)
0000F704 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F708                            		
0000F708                            loc_DC36:
0000F708 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F70E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000F714 0869 0000 0022             		bchg	#0,$22(a1)
0000F71A 0829 0002 0022             		btst	#2,$22(a1)
0000F720 6600                       		bne.s	loc_DC56
0000F722 103C 0000                  		move.b	#0,d0
0000F726 4A29 0039                  		tst.b	$39(a1)
0000F72A 6700                       		beq.s	@not_crawling
0000F72C 4E71                       		nop
0000F72E                            		;move.b	#crawl_anim,d0
0000F72E                            		
0000F72E                            @not_crawling:
0000F72E 1340 001C                  		move.b	d0,$1C(a1)
0000F732                            
0000F732                            loc_DC56:
0000F732 08A8 0005 0022             		bclr	#5,$22(a0)
0000F738 08A9 0005 0022             		bclr	#5,$22(a1)
0000F73E 303C 00CC                  		move.w	#$CC,d0
0000F742 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F748                            
0000F748                            Obj41_AniLR:				; XREF: Obj41_Index
0000F748 31FC 0000 C904             		move.w	#0,($FFFFC904).w	; clear screen delay counter
0000F74E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F754 6000 CAB6                  		bra.w	AnimateSprite
0000F758                            ; ===========================================================================
0000F758                            
0000F758                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F758 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F75E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F762 4E75                       		rts	
0000F764                            ; ===========================================================================
0000F764                            
0000F764                            Obj41_Dwn:				; XREF: Obj41_Index
0000F764 323C 001B                  		move.w	#$1B,d1
0000F768 343C 0008                  		move.w	#8,d2
0000F76C 363C 0010                  		move.w	#$10,d3
0000F770 3828 0008                  		move.w	8(a0),d4
0000F774 6100 0000                  		bsr.w	SolidObject
0000F778 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F77E 6600                       		bne.s	loc_DCA4
0000F780 117C 000E 0024             		move.b	#$E,$24(a0)
0000F786                            
0000F786                            loc_DCA4:
0000F786 4A28 0025                  		tst.b	$25(a0)
0000F78A 6600                       		bne.s	locret_DCAE
0000F78C 4A44                       		tst.w	d4
0000F78E 6B00                       		bmi.s	Obj41_BounceDwn
0000F790                            
0000F790                            locret_DCAE:
0000F790 4E75                       		rts	
0000F792                            ; ===========================================================================
0000F792                            
0000F792                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F792 5428 0024                  		addq.b	#2,$24(a0)
0000F796 5169 000C                  		subq.w	#8,$C(a1)
0000F79A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F7A0 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F7A4 08E9 0001 0022             		bset	#1,$22(a1)
0000F7AA 08A9 0003 0022             		bclr	#3,$22(a1)
0000F7B0 137C 0002 0024             		move.b	#2,$24(a1)
0000F7B6 08A8 0003 0022             		bclr	#3,$22(a0)
0000F7BC 4228 0025                  		clr.b	$25(a0)
0000F7C0 303C 00CC                  		move.w	#$CC,d0
0000F7C4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F7CA                            
0000F7CA                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F7CA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F7D0 6000 CA3A                  		bra.w	AnimateSprite
0000F7D4                            ; ===========================================================================
0000F7D4                            
0000F7D4                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F7D4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F7DA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F7DE 4E75                       		rts	
0000F7E0                            ; ===========================================================================
0000F7E0                            Ani_obj41:
0000F7E0                            	include "_anim\obj41.asm"
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            ; Animation script - springs
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0 0000                       		dc.w byte_DD02-Ani_obj41
0000F7E2 0000                       		dc.w byte_DD0E-Ani_obj41
0000F7E4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F7F0 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F7FC                            		even
0000F7FC                            		even
0000F7FC                            
0000F7FC                            ; ---------------------------------------------------------------------------
0000F7FC                            ; Sprite mappings - springs
0000F7FC                            ; ---------------------------------------------------------------------------
0000F7FC                            Map_obj41:
0000F7FC                            	include "_maps\obj41.asm"
0000F7FC                            ; ---------------------------------------------------------------------------
0000F7FC                            ; Sprite mappings - springs
0000F7FC                            ; ---------------------------------------------------------------------------
0000F7FC 0000                       		dc.w byte_DD26-Map_obj41
0000F7FE 0000                       		dc.w byte_DD31-Map_obj41
0000F800 0000                       		dc.w byte_DD37-Map_obj41
0000F802 0000                       		dc.w byte_DD47-Map_obj41
0000F804 0000                       		dc.w byte_DD4D-Map_obj41
0000F806 0000                       		dc.w byte_DD53-Map_obj41
0000F808 02                         byte_DD26:	dc.b 2
0000F809 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F80E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F813 01                         byte_DD31:	dc.b 1
0000F814 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F819 03                         byte_DD37:	dc.b 3
0000F81A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F81F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F824 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F829 01                         byte_DD47:	dc.b 1
0000F82A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F82F 01                         byte_DD4D:	dc.b 1
0000F830 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F835 04                         byte_DD53:	dc.b 4
0000F836 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F83B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F840 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F845 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F84A                            		even
0000F84A                            		even
0000F84A                            
0000F84A                            ; ===========================================================================
0000F84A                            ; ---------------------------------------------------------------------------
0000F84A                            ; Object 42 - Newtron enemy (GHZ)
0000F84A                            ; ---------------------------------------------------------------------------
0000F84A                            
0000F84A                            Obj42:					; XREF: Obj_Index
0000F84A 7000                       		moveq	#0,d0
0000F84C 1028 0024                  		move.b	$24(a0),d0
0000F850 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F854 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F858                            ; ===========================================================================
0000F858 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F85A 0000                       		dc.w Obj42_Action-Obj42_Index
0000F85C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F85E                            ; ===========================================================================
0000F85E                            
0000F85E                            Obj42_Main:				; XREF: Obj42_Index
0000F85E 5428 0024                  		addq.b	#2,$24(a0)
0000F862 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F86A 317C 049B 0002             		move.w	#$49B,2(a0)
0000F870 117C 0004 0001             		move.b	#4,1(a0)
0000F876 117C 0004 0018             		move.b	#4,$18(a0)
0000F87C 117C 0014 0019             		move.b	#$14,$19(a0)
0000F882 117C 0010 0016             		move.b	#$10,$16(a0)
0000F888 117C 0008 0017             		move.b	#8,$17(a0)
0000F88E                            
0000F88E                            Obj42_Action:				; XREF: Obj42_Index
0000F88E 7000                       		moveq	#0,d0
0000F890 1028 0025                  		move.b	$25(a0),d0
0000F894 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F898 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F89C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F8A2 6100 C968                  		bsr.w	AnimateSprite
0000F8A6 6000 0000                  		bra.w	MarkObjGone
0000F8AA                            ; ===========================================================================
0000F8AA 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F8AC 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F8AE 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F8B0 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F8B2 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F8B4                            ; ===========================================================================
0000F8B4                            
0000F8B4                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F8B4 08E8 0000 0022             		bset	#0,$22(a0)
0000F8BA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8BE 9068 0008                  		sub.w	8(a0),d0
0000F8C2 6400                       		bcc.s	loc_DDEA
0000F8C4 4440                       		neg.w	d0
0000F8C6 08A8 0000 0022             		bclr	#0,$22(a0)
0000F8CC                            
0000F8CC                            loc_DDEA:
0000F8CC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F8D0 6400                       		bcc.s	locret_DE12	; if not, branch
0000F8D2 5428 0025                  		addq.b	#2,$25(a0)
0000F8D6 117C 0001 001C             		move.b	#1,$1C(a0)
0000F8DC 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F8E0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F8E2 317C 249B 0002             		move.w	#$249B,2(a0)
0000F8E8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F8EE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F8F4                            
0000F8F4                            locret_DE12:
0000F8F4 4E75                       		rts	
0000F8F6                            ; ===========================================================================
0000F8F6                            
0000F8F6                            Obj42_Type00:				; XREF: Obj42_Index2
0000F8F6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F8FC 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F8FE 08E8 0000 0022             		bset	#0,$22(a0)
0000F904 3038 D008                  		move.w	($FFFFD008).w,d0
0000F908 9068 0008                  		sub.w	8(a0),d0
0000F90C 6400                       		bcc.s	locret_DE32
0000F90E 08A8 0000 0022             		bclr	#0,$22(a0)
0000F914                            
0000F914                            locret_DE32:
0000F914 4E75                       		rts	
0000F916                            ; ===========================================================================
0000F916                            
0000F916                            Obj42_Fall:				; XREF: Obj42_Type00
0000F916 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F91C 6600                       		bne.s	loc_DE42
0000F91E 117C 000C 0020             		move.b	#$C,$20(a0)
0000F924                            
0000F924                            loc_DE42:
0000F924 6100 F76A                  		bsr.w	ObjectFall
0000F928 6100 0000                  		bsr.w	ObjHitFloor
0000F92C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F92E 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F930 D368 000C                  		add.w	d1,$C(a0)
0000F934 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F93A 5428 0025                  		addq.b	#2,$25(a0)
0000F93E 117C 0002 001C             		move.b	#2,$1C(a0)
0000F944 0828 0005 0002             		btst	#5,2(a0)
0000F94A 6700                       		beq.s	Obj42_Move
0000F94C 5228 001C                  		addq.b	#1,$1C(a0)
0000F950                            
0000F950                            Obj42_Move:
0000F950 117C 000D 0020             		move.b	#$D,$20(a0)
0000F956 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F95C 0828 0000 0022             		btst	#0,$22(a0)
0000F962 6600                       		bne.s	locret_DE86
0000F964 4468 0010                  		neg.w	$10(a0)
0000F968                            
0000F968                            locret_DE86:
0000F968 4E75                       		rts	
0000F96A                            ; ===========================================================================
0000F96A                            
0000F96A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F96A 6100 F744                  		bsr.w	SpeedToPos
0000F96E 6100 0000                  		bsr.w	ObjHitFloor
0000F972 0C41 FFF8                  		cmpi.w	#-8,d1
0000F976 6D00                       		blt.s	loc_DEA2
0000F978 0C41 000C                  		cmpi.w	#$C,d1
0000F97C 6C00                       		bge.s	loc_DEA2
0000F97E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F982 4E75                       		rts	
0000F984                            ; ===========================================================================
0000F984                            
0000F984                            loc_DEA2:
0000F984 5428 0025                  		addq.b	#2,$25(a0)
0000F988 4E75                       		rts	
0000F98A                            ; ===========================================================================
0000F98A                            
0000F98A                            Obj42_Speed:				; XREF: Obj42_Index2
0000F98A 6100 F724                  		bsr.w	SpeedToPos
0000F98E 4E75                       		rts	
0000F990                            ; ===========================================================================
0000F990                            
0000F990                            Obj42_Type01:				; XREF: Obj42_Index2
0000F990 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F996 6600                       		bne.s	Obj42_FireMissile
0000F998 117C 000C 0020             		move.b	#$C,$20(a0)
0000F99E                            
0000F99E                            Obj42_FireMissile:
0000F99E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F9A4 6600                       		bne.s	locret_DF14
0000F9A6 4A28 0032                  		tst.b	$32(a0)
0000F9AA 6600                       		bne.s	locret_DF14
0000F9AC 117C 0001 0032             		move.b	#1,$32(a0)
0000F9B2 6100 FBAA                  		bsr.w	SingleObjLoad
0000F9B6 6600                       		bne.s	locret_DF14
0000F9B8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F9BC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F9C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F9C8 5169 000C                  		subq.w	#8,$C(a1)
0000F9CC 337C 0200 0010             		move.w	#$200,$10(a1)
0000F9D2 303C 0014                  		move.w	#$14,d0
0000F9D6 0828 0000 0022             		btst	#0,$22(a0)
0000F9DC 6600                       		bne.s	loc_DF04
0000F9DE 4440                       		neg.w	d0
0000F9E0 4469 0010                  		neg.w	$10(a1)
0000F9E4                            
0000F9E4                            loc_DF04:
0000F9E4 D169 0008                  		add.w	d0,8(a1)
0000F9E8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F9EE 137C 0001 0028             		move.b	#1,$28(a1)
0000F9F4                            
0000F9F4                            locret_DF14:
0000F9F4 4E75                       		rts	
0000F9F6                            ; ===========================================================================
0000F9F6                            
0000F9F6                            Obj42_Delete:				; XREF: Obj42_Index
0000F9F6 6000 F70E                  		bra.w	DeleteObject
0000F9FA                            ; ===========================================================================
0000F9FA                            Ani_obj42:
0000F9FA                            	include "_anim\obj42.asm"
0000F9FA                            ; ---------------------------------------------------------------------------
0000F9FA                            ; Animation script - Newtron enemy
0000F9FA                            ; ---------------------------------------------------------------------------
0000F9FA 0000                       		dc.w byte_DF24-Ani_obj42
0000F9FC 0000                       		dc.w byte_DF28-Ani_obj42
0000F9FE 0000                       		dc.w byte_DF30-Ani_obj42
0000FA00 0000                       		dc.w byte_DF34-Ani_obj42
0000FA02 0000                       		dc.w byte_DF38-Ani_obj42
0000FA04 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000FA08 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000FA10 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000FA14 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000FA18 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000FA22                            		even
0000FA22                            		even
0000FA22                            
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            ; Sprite mappings - Newtron enemy (GHZ)
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            Map_obj42:
0000FA22                            	include "_maps\obj42.asm"
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            ; Sprite mappings - Newtron enemy (GHZ)
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000FA26 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000FA2A 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000FA2E 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000FA32 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000FA36 0000                       		dc.w byte_DFF8-Map_obj42
0000FA38 03                         byte_DF58:	dc.b 3
0000FA39 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000FA3E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FA43 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FA48 03                         byte_DF68:	dc.b 3
0000FA49 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000FA4E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FA53 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FA58 03                         byte_DF78:	dc.b 3
0000FA59 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000FA5E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FA63 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FA68 04                         byte_DF88:	dc.b 4
0000FA69 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000FA6E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FA73 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FA78 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FA7D 03                         byte_DF9D:	dc.b 3
0000FA7E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FA83 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FA88 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FA8D 02                         byte_DFAD:	dc.b 2
0000FA8E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA93 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FA98 03                         byte_DFB8:	dc.b 3
0000FA99 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA9E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FAA3 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FAA8 03                         byte_DFC8:	dc.b 3
0000FAA9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FAAE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FAB3 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FAB8 03                         byte_DFD8:	dc.b 3
0000FAB9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FABE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FAC3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FAC8 03                         byte_DFE8:	dc.b 3
0000FAC9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FACE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FAD3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FAD8 00                         byte_DFF8:	dc.b 0
0000FADA 00                         		even
0000FADA 00                         		even
0000FADA                            
0000FADA                            ; ===========================================================================
0000FADA                            ; ---------------------------------------------------------------------------
0000FADA                            ; Object 43 - Roller enemy (SYZ)
0000FADA                            ; ---------------------------------------------------------------------------
0000FADA                            
0000FADA                            Obj43:					; XREF: Obj_Index
0000FADA 7000                       		moveq	#0,d0
0000FADC 1028 0024                  		move.b	$24(a0),d0
0000FAE0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000FAE4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000FAE8                            ; ===========================================================================
0000FAE8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000FAEA 0000                       		dc.w Obj43_Action-Obj43_Index
0000FAEC                            ; ===========================================================================
0000FAEC                            
0000FAEC                            Obj43_Main:				; XREF: Obj43_Index
0000FAEC 117C 000E 0016             		move.b	#$E,$16(a0)
0000FAF2 117C 0008 0017             		move.b	#8,$17(a0)
0000FAF8 6100 F596                  		bsr.w	ObjectFall
0000FAFC 6100 0000                  		bsr.w	ObjHitFloor
0000FB00 4A41                       		tst.w	d1
0000FB02 6A00                       		bpl.s	locret_E052
0000FB04 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000FB08 317C 0000 0012             		move.w	#0,$12(a0)
0000FB0E 5428 0024                  		addq.b	#2,$24(a0)
0000FB12 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FB1A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FB20 117C 0004 0001             		move.b	#4,1(a0)
0000FB26 117C 0004 0018             		move.b	#4,$18(a0)
0000FB2C 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB32                            
0000FB32                            locret_E052:
0000FB32 4E75                       		rts	
0000FB34                            ; ===========================================================================
0000FB34                            
0000FB34                            Obj43_Action:				; XREF: Obj43_Index
0000FB34 7000                       		moveq	#0,d0
0000FB36 1028 0025                  		move.b	$25(a0),d0
0000FB3A 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FB3E 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FB42 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FB48 6100 C6C2                  		bsr.w	AnimateSprite
0000FB4C 3028 0008                  		move.w	8(a0),d0
0000FB50 0240 FF80                  		andi.w	#$FF80,d0
0000FB54 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB58 0441 0080                  		subi.w	#$80,d1
0000FB5C 0241 FF80                  		andi.w	#$FF80,d1
0000FB60 9041                       		sub.w	d1,d0
0000FB62 0C40 0280                  		cmpi.w	#$280,d0
0000FB66 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FB6A 6000 F55E                  		bra.w	DisplaySprite
0000FB6E                            ; ===========================================================================
0000FB6E                            
0000FB6E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FB6E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB72 7000                       		moveq	#0,d0
0000FB74 1028 0023                  		move.b	$23(a0),d0
0000FB78 6700                       		beq.s	Obj43_Delete
0000FB7A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB80                            
0000FB80                            Obj43_Delete:
0000FB80 6000 F584                  		bra.w	DeleteObject
0000FB84                            ; ===========================================================================
0000FB84 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FB86 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FB88 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FB8A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FB8C                            ; ===========================================================================
0000FB8C                            
0000FB8C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FB8C 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB90 0440 0100                  		subi.w	#$100,d0
0000FB94 6500                       		bcs.s	loc_E0D2
0000FB96 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FB9A 6500                       		bcs.s	loc_E0D2
0000FB9C 5828 0025                  		addq.b	#4,$25(a0)
0000FBA0 117C 0002 001C             		move.b	#2,$1C(a0)
0000FBA6 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FBAC 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FBB2                            
0000FBB2                            loc_E0D2:
0000FBB2 588F                       		addq.l	#4,sp
0000FBB4 4E75                       		rts	
0000FBB6                            ; ===========================================================================
0000FBB6                            
0000FBB6                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FBB6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FBBC 6700                       		beq.s	loc_E0F8
0000FBBE 5368 0030                  		subq.w	#1,$30(a0)
0000FBC2 6A00                       		bpl.s	locret_E0F6
0000FBC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000FBCA 317C 0700 0010             		move.w	#$700,$10(a0)
0000FBD0 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FBD6                            
0000FBD6                            locret_E0F6:
0000FBD6 4E75                       		rts	
0000FBD8                            ; ===========================================================================
0000FBD8                            
0000FBD8                            loc_E0F8:
0000FBD8 5428 0025                  		addq.b	#2,$25(a0)
0000FBDC 4E75                       		rts	
0000FBDE                            ; ===========================================================================
0000FBDE                            
0000FBDE                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FBDE 6100 0000                  		bsr.w	Obj43_Stop
0000FBE2 6100 F4CC                  		bsr.w	SpeedToPos
0000FBE6 6100 0000                  		bsr.w	ObjHitFloor
0000FBEA 0C41 FFF8                  		cmpi.w	#-8,d1
0000FBEE 6D00                       		blt.s	Obj43_Jump
0000FBF0 0C41 000C                  		cmpi.w	#$C,d1
0000FBF4 6C00                       		bge.s	Obj43_Jump
0000FBF6 D368 000C                  		add.w	d1,$C(a0)
0000FBFA 4E75                       		rts	
0000FBFC                            ; ===========================================================================
0000FBFC                            
0000FBFC                            Obj43_Jump:
0000FBFC 5428 0025                  		addq.b	#2,$25(a0)
0000FC00 08E8 0000 0032             		bset	#0,$32(a0)
0000FC06 6700                       		beq.s	locret_E12E
0000FC08 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FC0E                            
0000FC0E                            locret_E12E:
0000FC0E 4E75                       		rts	
0000FC10                            ; ===========================================================================
0000FC10                            
0000FC10                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FC10 6100 F47E                  		bsr.w	ObjectFall
0000FC14 4A68 0012                  		tst.w	$12(a0)
0000FC18 6B00                       		bmi.s	locret_E150
0000FC1A 6100 0000                  		bsr.w	ObjHitFloor
0000FC1E 4A41                       		tst.w	d1
0000FC20 6A00                       		bpl.s	locret_E150
0000FC22 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FC26 5528 0025                  		subq.b	#2,$25(a0)
0000FC2A 317C 0000 0012             		move.w	#0,$12(a0)
0000FC30                            
0000FC30                            locret_E150:
0000FC30 4E75                       		rts	
0000FC32                            
0000FC32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC32                            
0000FC32                            
0000FC32                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FC32 4A28 0032                  		tst.b	$32(a0)
0000FC36 6B00                       		bmi.s	locret_E188
0000FC38 3038 D008                  		move.w	($FFFFD008).w,d0
0000FC3C 0440 0030                  		subi.w	#$30,d0
0000FC40 9068 0008                  		sub.w	8(a0),d0
0000FC44 6400                       		bcc.s	locret_E188
0000FC46 117C 0000 001C             		move.b	#0,$1C(a0)
0000FC4C 117C 000E 0020             		move.b	#$E,$20(a0)
0000FC52 4268 0010                  		clr.w	$10(a0)
0000FC56 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FC5C 117C 0002 0025             		move.b	#2,$25(a0)
0000FC62 08E8 0007 0032             		bset	#7,$32(a0)
0000FC68                            
0000FC68                            locret_E188:
0000FC68 4E75                       		rts	
0000FC6A                            ; End of function Obj43_Stop
0000FC6A                            
0000FC6A                            ; ===========================================================================
0000FC6A                            Ani_obj43:
0000FC6A                            	include "_anim\obj43.asm"
0000FC6A                            ; ---------------------------------------------------------------------------
0000FC6A                            ; Animation script - Roller enemy
0000FC6A                            ; ---------------------------------------------------------------------------
0000FC6A 0000                       		dc.w byte_E190-Ani_obj43
0000FC6C 0000                       		dc.w byte_E196-Ani_obj43
0000FC6E 0000                       		dc.w byte_E19C-Ani_obj43
0000FC70 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FC76 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FC7C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FC82 00                         		even
0000FC82 00                         		even
0000FC82                            
0000FC82                            ; ---------------------------------------------------------------------------
0000FC82                            ; Sprite mappings - Roller enemy (SYZ)
0000FC82                            ; ---------------------------------------------------------------------------
0000FC82                            Map_obj43:
0000FC82                            	include "_maps\obj43.asm"
0000FC82                            ; ---------------------------------------------------------------------------
0000FC82                            ; Sprite mappings - Roller enemy (SYZ)
0000FC82                            ; ---------------------------------------------------------------------------
0000FC82 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FC86 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FC8A 0000                       		dc.w byte_E1CE-Map_obj43
0000FC8C 02                         byte_E1AC:	dc.b 2
0000FC8D DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FC92 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FC97 02                         byte_E1B7:	dc.b 2
0000FC98 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FC9D FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FCA2 01                         byte_E1C2:	dc.b 1
0000FCA3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FCA8 01                         byte_E1C8:	dc.b 1
0000FCA9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FCAE 01                         byte_E1CE:	dc.b 1
0000FCAF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FCB4                            		even
0000FCB4                            		even
0000FCB4                            
0000FCB4                            ; ===========================================================================
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            ; Object 44 - walls (GHZ)
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            
0000FCB4                            Obj44:					; XREF: Obj_Index
0000FCB4 7000                       		moveq	#0,d0
0000FCB6 1028 0024                  		move.b	$24(a0),d0
0000FCBA 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FCBE 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FCC2                            ; ===========================================================================
0000FCC2 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FCC4 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FCC6 0000                       		dc.w Obj44_Display-Obj44_Index
0000FCC8                            ; ===========================================================================
0000FCC8                            
0000FCC8                            Obj44_Main:				; XREF: Obj44_Index
0000FCC8 5428 0024                  		addq.b	#2,$24(a0)
0000FCCC 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FCD4 317C 434C 0002             		move.w	#$434C,2(a0)
0000FCDA 0028 0004 0001             		ori.b	#4,1(a0)
0000FCE0 117C 0008 0019             		move.b	#8,$19(a0)
0000FCE6 117C 0006 0018             		move.b	#6,$18(a0)
0000FCEC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FCF2 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FCF8 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FCFA 5428 0024                  		addq.b	#2,$24(a0)
0000FCFE 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FD00                            ; ===========================================================================
0000FD00                            
0000FD00                            Obj44_Solid:				; XREF: Obj44_Index
0000FD00 323C 0013                  		move.w	#$13,d1
0000FD04 343C 0028                  		move.w	#$28,d2
0000FD08 6100 A816                  		bsr.w	Obj44_SolidWall
0000FD0C                            
0000FD0C                            Obj44_Display:				; XREF: Obj44_Index
0000FD0C 6100 F3BC                  		bsr.w	DisplaySprite
0000FD10 3028 0008                  		move.w	8(a0),d0
0000FD14 0240 FF80                  		andi.w	#$FF80,d0
0000FD18 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD1C 0441 0080                  		subi.w	#$80,d1
0000FD20 0241 FF80                  		andi.w	#$FF80,d1
0000FD24 9041                       		sub.w	d1,d0
0000FD26 0C40 0280                  		cmpi.w	#$280,d0
0000FD2A 6200 F3DA                  		bhi.w	DeleteObject
0000FD2E 4E75                       		rts	
0000FD30                            ; ===========================================================================
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            ; Sprite mappings - walls (GHZ)
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            Map_obj44:
0000FD30                            	include "_maps\obj44.asm"
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            ; Sprite mappings - walls (GHZ)
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30 0000                       		dc.w byte_E256-Map_obj44
0000FD32 0000                       		dc.w byte_E26B-Map_obj44
0000FD34 0000                       		dc.w byte_E280-Map_obj44
0000FD36 04                         byte_E256:	dc.b 4
0000FD37 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FD3C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FD41 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FD46 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FD4B 04                         byte_E26B:	dc.b 4
0000FD4C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FD51 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FD56 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FD5B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FD60 04                         byte_E280:	dc.b 4
0000FD61 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FD66 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FD6B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FD70 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FD76 00                         		even
0000FD76 00                         		even
0000FD76                            
0000FD76                            ; ===========================================================================
0000FD76                            ; ---------------------------------------------------------------------------
0000FD76                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FD76                            ; ---------------------------------------------------------------------------
0000FD76                            
0000FD76                            Obj13:					; XREF: Obj_Index
0000FD76 7000                       		moveq	#0,d0
0000FD78 1028 0024                  		move.b	$24(a0),d0
0000FD7C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FD80 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FD84 6000 0000                  		bra.w	Obj14_ChkDel
0000FD88                            ; ===========================================================================
0000FD88 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FD8A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FD8C                            ; ---------------------------------------------------------------------------
0000FD8C                            ;
0000FD8C                            ; Lava ball production rates
0000FD8C                            ;
0000FD8C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FD92                            ; ===========================================================================
0000FD92                            
0000FD92                            Obj13_Main:				; XREF: Obj13_Index
0000FD92 5428 0024                  		addq.b	#2,$24(a0)
0000FD96 1028 0028                  		move.b	$28(a0),d0
0000FD9A E848                       		lsr.w	#4,d0
0000FD9C 0240 000F                  		andi.w	#$F,d0
0000FDA0 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FDA6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FDAC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FDB2                            
0000FDB2                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FDB2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FDB6 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FDB8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FDBE 6100 F584                  		bsr.w	ChkObjOnScreen
0000FDC2 6600                       		bne.s	locret_E302
0000FDC4 6100 F798                  		bsr.w	SingleObjLoad
0000FDC8 6600                       		bne.s	locret_E302
0000FDCA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FDCE 3368 0008 0008             		move.w	8(a0),8(a1)
0000FDD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FDDA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FDE0                            
0000FDE0                            locret_E302:
0000FDE0 4E75                       		rts	
0000FDE2                            ; ===========================================================================
0000FDE2                            ; ---------------------------------------------------------------------------
0000FDE2                            ; Object 14 - lava balls (MZ, SLZ)
0000FDE2                            ; ---------------------------------------------------------------------------
0000FDE2                            
0000FDE2                            Obj14:					; XREF: Obj_Index
0000FDE2 7000                       		moveq	#0,d0
0000FDE4 1028 0024                  		move.b	$24(a0),d0
0000FDE8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FDEC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FDF0 6000 F2D8                  		bra.w	DisplaySprite
0000FDF4                            ; ===========================================================================
0000FDF4 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FDF6 0000                       		dc.w Obj14_Action-Obj14_Index
0000FDF8 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FDFA                            
0000FDFA FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FE04 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FE0C                            ; ===========================================================================
0000FE0C                            
0000FE0C                            Obj14_Main:				; XREF: Obj14_Index
0000FE0C 5428 0024                  		addq.b	#2,$24(a0)
0000FE10 117C 0008 0016             		move.b	#8,$16(a0)
0000FE16 117C 0008 0017             		move.b	#8,$17(a0)
0000FE1C 217C 0000 CE5E 0004        		move.l	#Map_obj14,4(a0)
0000FE24 317C 0345 0002             		move.w	#$345,2(a0)
0000FE2A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FE30 6600                       		bne.s	loc_E35A
0000FE32 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FE38                            
0000FE38                            loc_E35A:
0000FE38 117C 0004 0001             		move.b	#4,1(a0)
0000FE3E 117C 0003 0018             		move.b	#3,$18(a0)
0000FE44 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FE4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FE50 4A28 0029                  		tst.b	$29(a0)
0000FE54 6700                       		beq.s	Obj14_SetSpeed
0000FE56 5428 0018                  		addq.b	#2,$18(a0)
0000FE5A                            
0000FE5A                            Obj14_SetSpeed:
0000FE5A 7000                       		moveq	#0,d0
0000FE5C 1028 0028                  		move.b	$28(a0),d0
0000FE60 D040                       		add.w	d0,d0
0000FE62 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FE68 117C 0008 0019             		move.b	#8,$19(a0)
0000FE6E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FE74 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FE76 117C 0010 0019             		move.b	#$10,$19(a0)
0000FE7C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FE82 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FE88 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FE8E                            
0000FE8E                            Obj14_PlaySnd:
0000FE8E 303C 00AE                  		move.w	#$AE,d0
0000FE92 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FE98                            
0000FE98                            Obj14_Action:				; XREF: Obj14_Index
0000FE98 7000                       		moveq	#0,d0
0000FE9A 1028 0028                  		move.b	$28(a0),d0
0000FE9E D040                       		add.w	d0,d0
0000FEA0 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FEA4 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FEA8 6100 F206                  		bsr.w	SpeedToPos
0000FEAC 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FEB2 6100 C358                  		bsr.w	AnimateSprite
0000FEB6                            
0000FEB6                            Obj14_ChkDel:				; XREF: Obj13
0000FEB6 3028 0008                  		move.w	8(a0),d0
0000FEBA 0240 FF80                  		andi.w	#$FF80,d0
0000FEBE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FEC2 0441 0080                  		subi.w	#$80,d1
0000FEC6 0241 FF80                  		andi.w	#$FF80,d1
0000FECA 9041                       		sub.w	d1,d0
0000FECC 0C40 0280                  		cmpi.w	#$280,d0
0000FED0 6200 F234                  		bhi.w	DeleteObject
0000FED4 4E75                       		rts	
0000FED6                            ; ===========================================================================
0000FED6 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FEDA 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FEDE 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FEE2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FEE6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FEE8                            ; ===========================================================================
0000FEE8                            ; lavaball types 00-03 fly up and fall back down
0000FEE8                            
0000FEE8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FEE8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FEEE 3028 0030                  		move.w	$30(a0),d0
0000FEF2 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FEF6 6400                       		bcc.s	loc_E41E	; if not, branch
0000FEF8 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FEFC                            
0000FEFC                            loc_E41E:
0000FEFC 08A8 0001 0022             		bclr	#1,$22(a0)
0000FF02 4A68 0012                  		tst.w	$12(a0)
0000FF06 6A00                       		bpl.s	locret_E430
0000FF08 08E8 0001 0022             		bset	#1,$22(a0)
0000FF0E                            
0000FF0E                            locret_E430:
0000FF0E 4E75                       		rts	
0000FF10                            ; ===========================================================================
0000FF10                            ; lavaball type	04 flies up until it hits the ceiling
0000FF10                            
0000FF10                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FF10 08E8 0001 0022             		bset	#1,$22(a0)
0000FF16 6100 0000                  		bsr.w	ObjHitCeiling
0000FF1A 4A41                       		tst.w	d1
0000FF1C 6A00                       		bpl.s	locret_E452
0000FF1E 117C 0008 0028             		move.b	#8,$28(a0)
0000FF24 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF2A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FF30                            
0000FF30                            locret_E452:
0000FF30 4E75                       		rts	
0000FF32                            ; ===========================================================================
0000FF32                            ; lavaball type	05 falls down until it hits the	floor
0000FF32                            
0000FF32                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FF32 08A8 0001 0022             		bclr	#1,$22(a0)
0000FF38 6100 0000                  		bsr.w	ObjHitFloor
0000FF3C 4A41                       		tst.w	d1
0000FF3E 6A00                       		bpl.s	locret_E474
0000FF40 117C 0008 0028             		move.b	#8,$28(a0)
0000FF46 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF4C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FF52                            
0000FF52                            locret_E474:
0000FF52 4E75                       		rts	
0000FF54                            ; ===========================================================================
0000FF54                            ; lavaball types 06-07 move sideways
0000FF54                            
0000FF54                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FF54 08E8 0000 0022             		bset	#0,$22(a0)
0000FF5A 76F8                       		moveq	#-8,d3
0000FF5C 6100 0000                  		bsr.w	ObjHitWallLeft
0000FF60 4A41                       		tst.w	d1
0000FF62 6A00                       		bpl.s	locret_E498
0000FF64 117C 0008 0028             		move.b	#8,$28(a0)
0000FF6A 117C 0003 001C             		move.b	#3,$1C(a0)
0000FF70 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FF76                            
0000FF76                            locret_E498:
0000FF76 4E75                       		rts	
0000FF78                            ; ===========================================================================
0000FF78                            
0000FF78                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FF78 08A8 0000 0022             		bclr	#0,$22(a0)
0000FF7E 7608                       		moveq	#8,d3
0000FF80 6100 0000                  		bsr.w	ObjHitWallRight
0000FF84 4A41                       		tst.w	d1
0000FF86 6A00                       		bpl.s	locret_E4BC
0000FF88 117C 0008 0028             		move.b	#8,$28(a0)
0000FF8E 117C 0003 001C             		move.b	#3,$1C(a0)
0000FF94 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FF9A                            
0000FF9A                            locret_E4BC:
0000FF9A 4E75                       		rts	
0000FF9C                            ; ===========================================================================
0000FF9C                            
0000FF9C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FF9C 4E75                       		rts	
0000FF9E                            ; ===========================================================================
0000FF9E                            
0000FF9E                            Obj14_Delete:				; XREF: Obj14_Index
0000FF9E 6000 F166                  		bra.w	DeleteObject
0000FFA2                            ; ===========================================================================
0000FFA2                            Ani_obj14:
0000FFA2                            	include "_anim\obj14.asm"
0000FFA2                            ; ---------------------------------------------------------------------------
0000FFA2                            ; Animation script - lava balls
0000FFA2                            ; ---------------------------------------------------------------------------
0000FFA2 0000                       		dc.w byte_E4CC-Ani_obj14
0000FFA4 0000                       		dc.w byte_E4D2-Ani_obj14
0000FFA6 0000                       		dc.w byte_E4D6-Ani_obj14
0000FFA8 0000                       		dc.w byte_E4DC-Ani_obj14
0000FFAA 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FFB0 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FFB4 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FFBA 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FFBE                            		even
0000FFBE                            		even
0000FFBE                            
0000FFBE                            ; ===========================================================================
0000FFBE                            ; ---------------------------------------------------------------------------
0000FFBE                            ; Object 6D - flame thrower (SBZ)
0000FFBE                            ; ---------------------------------------------------------------------------
0000FFBE                            
0000FFBE                            Obj6D:					; XREF: Obj_Index
0000FFBE 7000                       		moveq	#0,d0
0000FFC0 1028 0024                  		move.b	$24(a0),d0
0000FFC4 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FFC8 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FFCC                            ; ===========================================================================
0000FFCC 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FFCE 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FFD0                            ; ===========================================================================
0000FFD0                            
0000FFD0                            Obj6D_Main:				; XREF: Obj6D_Index
0000FFD0 5428 0024                  		addq.b	#2,$24(a0)
0000FFD4 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FFDC 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FFE2 0028 0004 0001             		ori.b	#4,1(a0)
0000FFE8 117C 0001 0018             		move.b	#1,$18(a0)
0000FFEE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FFF4 117C 000C 0019             		move.b	#$C,$19(a0)
0000FFFA 1028 0028                  		move.b	$28(a0),d0
0000FFFE 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010002 D040                       		add.w	d0,d0		; multiply by 2
00010004 3140 0030                  		move.w	d0,$30(a0)
00010008 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0001000C 1028 0028                  		move.b	$28(a0),d0
00010010 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010014 EB48                       		lsl.w	#5,d0		; multiply by $20
00010016 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001001A 117C 000A 0036             		move.b	#$A,$36(a0)
00010020 0828 0001 0022             		btst	#1,$22(a0)
00010026 6700                       		beq.s	Obj6D_Action
00010028 117C 0002 001C             		move.b	#2,$1C(a0)
0001002E 117C 0015 0036             		move.b	#$15,$36(a0)
00010034                            
00010034                            Obj6D_Action:				; XREF: Obj6D_Index
00010034 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010038 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0001003A 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00010040 0868 0000 001C             		bchg	#0,$1C(a0)
00010046 6700                       		beq.s	loc_E57A
00010048 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0001004E 303C 00B3                  		move.w	#$B3,d0
00010052 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010058                            
00010058                            loc_E57A:
00010058 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0001005E 6100 C1AC                  		bsr.w	AnimateSprite
00010062 117C 0000 0020             		move.b	#0,$20(a0)
00010068 1028 0036                  		move.b	$36(a0),d0
0001006C B028 001A                  		cmp.b	$1A(a0),d0
00010070 6600                       		bne.s	Obj6D_ChkDel
00010072 117C 00A3 0020             		move.b	#$A3,$20(a0)
00010078                            
00010078                            Obj6D_ChkDel:
00010078 3028 0008                  		move.w	8(a0),d0
0001007C 0240 FF80                  		andi.w	#$FF80,d0
00010080 3238 F700                  		move.w	($FFFFF700).w,d1
00010084 0441 0080                  		subi.w	#$80,d1
00010088 0241 FF80                  		andi.w	#$FF80,d1
0001008C 9041                       		sub.w	d1,d0
0001008E 0C40 0280                  		cmpi.w	#$280,d0
00010092 6200 F072                  		bhi.w	DeleteObject
00010096 6000 F032                  		bra.w	DisplaySprite
0001009A                            ; ===========================================================================
0001009A                            Ani_obj6D:
0001009A                            	include "_anim\obj6D.asm"
0001009A                            ; ---------------------------------------------------------------------------
0001009A                            ; Animation script - flamethrower (SBZ)
0001009A                            ; ---------------------------------------------------------------------------
0001009A 0000                       		dc.w byte_E5C4-Ani_obj6D
0001009C 0000                       		dc.w byte_E5D2-Ani_obj6D
0001009E 0000                       		dc.w byte_E5DC-Ani_obj6D
000100A0 0000                       		dc.w byte_E5EA-Ani_obj6D
000100A2 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
000100B0 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
000100BA 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
000100C8 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
000100D2                            		even
000100D2                            		even
000100D2                            
000100D2                            ; ---------------------------------------------------------------------------
000100D2                            ; Sprite mappings - flame thrower (SBZ)
000100D2                            ; ---------------------------------------------------------------------------
000100D2                            Map_obj6D:
000100D2                            	include "_maps\obj6D.asm"
000100D2                            ; ---------------------------------------------------------------------------
000100D2                            ; Sprite mappings - flame thrower (SBZ)
000100D2                            ; ---------------------------------------------------------------------------
000100D2 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
000100D6 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
000100DA 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
000100DE 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
000100E2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
000100E6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
000100EA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
000100EE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
000100F2 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
000100F6 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
000100FA 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
000100FE 01                         byte_E620:	dc.b 1
000100FF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010104 02                         byte_E626:	dc.b 2
00010105 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001010A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001010F 02                         byte_E631:	dc.b 2
00010110 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010115 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001011A 03                         byte_E63C:	dc.b 3
0001011B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010120 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010125 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001012A 03                         byte_E64C:	dc.b 3
0001012B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010130 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010135 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001013A 04                         byte_E65C:	dc.b 4
0001013B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010140 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010145 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001014A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001014F 04                         byte_E671:	dc.b 4
00010150 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010155 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001015A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001015F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010164 05                         byte_E686:	dc.b 5
00010165 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001016A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001016F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010174 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010179 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001017E 05                         byte_E6A0:	dc.b 5
0001017F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010184 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010189 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001018E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010193 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010198 06                         byte_E6BA:	dc.b 6
00010199 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001019E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000101A3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101A8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000101AD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101B2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101B7 06                         byte_E6D9:	dc.b 6
000101B8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000101BD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000101C2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000101C7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101CC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101D1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101D6 01                         byte_E6F8:	dc.b 1
000101D7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101DC 02                         byte_E6FE:	dc.b 2
000101DD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101E2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101E7 02                         byte_E709:	dc.b 2
000101E8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101ED 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101F2 03                         byte_E714:	dc.b 3
000101F3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101F8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101FD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010202 03                         byte_E724:	dc.b 3
00010203 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010208 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001020D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010212 04                         byte_E734:	dc.b 4
00010213 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010218 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001021D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010222 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010227 04                         byte_E749:	dc.b 4
00010228 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001022D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010232 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010237 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001023C 05                         byte_E75E:	dc.b 5
0001023D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010242 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010247 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001024C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010251 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010256 05                         byte_E778:	dc.b 5
00010257 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001025C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010261 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010266 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001026B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010270 06                         byte_E792:	dc.b 6
00010271 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010276 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001027B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010280 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010285 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001028A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001028F 06                         byte_E7B1:	dc.b 6
00010290 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010295 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001029A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001029F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000102A4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102A9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102AE                            		even
000102AE                            		even
000102AE                            
000102AE                            ; ===========================================================================
000102AE                            ; ---------------------------------------------------------------------------
000102AE                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000102AE                            ; ---------------------------------------------------------------------------
000102AE                            
000102AE                            Obj46:					; XREF: Obj_Index
000102AE 7000                       		moveq	#0,d0
000102B0 1028 0024                  		move.b	$24(a0),d0
000102B4 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000102B8 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000102BC                            ; ===========================================================================
000102BC 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000102BE 0000                       		dc.w Obj46_Action-Obj46_Index
000102C0                            ; ===========================================================================
000102C0                            
000102C0                            Obj46_Main:				; XREF: Obj46_Index
000102C0 5428 0024                  		addq.b	#2,$24(a0)
000102C4 117C 000F 0016             		move.b	#$F,$16(a0)
000102CA 117C 000F 0017             		move.b	#$F,$17(a0)
000102D0 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
000102D8 317C 4000 0002             		move.w	#$4000,2(a0)
000102DE 117C 0004 0001             		move.b	#4,1(a0)
000102E4 117C 0003 0018             		move.b	#3,$18(a0)
000102EA 117C 0010 0019             		move.b	#$10,$19(a0)
000102F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000102F6 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000102FC                            
000102FC                            Obj46_Action:				; XREF: Obj46_Index
000102FC 4A28 0001                  		tst.b	1(a0)
00010300 6A00                       		bpl.s	Obj46_ChkDel
00010302 7000                       		moveq	#0,d0
00010304 1028 0028                  		move.b	$28(a0),d0	; get object type
00010308 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0001030C D040                       		add.w	d0,d0
0001030E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00010312 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00010316 323C 001B                  		move.w	#$1B,d1
0001031A 343C 0010                  		move.w	#$10,d2
0001031E 363C 0011                  		move.w	#$11,d3
00010322 3828 0008                  		move.w	8(a0),d4
00010326 6100 0000                  		bsr.w	SolidObject
0001032A                            
0001032A                            Obj46_ChkDel:
0001032A 6100 ED9E                  		bsr.w	DisplaySprite
0001032E 3028 0008                  		move.w	8(a0),d0
00010332 0240 FF80                  		andi.w	#$FF80,d0
00010336 3238 F700                  		move.w	($FFFFF700).w,d1
0001033A 0441 0080                  		subi.w	#$80,d1
0001033E 0241 FF80                  		andi.w	#$FF80,d1
00010342 9041                       		sub.w	d1,d0
00010344 0C40 0280                  		cmpi.w	#$280,d0
00010348 6200 EDBC                  		bhi.w	DeleteObject
0001034C 4E75                       		rts	
0001034E                            ; ===========================================================================
0001034E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00010350 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00010352 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00010354 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00010356 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010358                            ; ===========================================================================
00010358                            
00010358                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010358 4E75                       		rts	
0001035A                            ; ===========================================================================
0001035A                            
0001035A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0001035A 3038 D008                  		move.w	($FFFFD008).w,d0
0001035E 9068 0008                  		sub.w	8(a0),d0
00010362 6400                       		bcc.s	loc_E888
00010364 4440                       		neg.w	d0
00010366                            
00010366                            loc_E888:
00010366 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0001036A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0001036C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00010372                            
00010372                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00010372 7000                       		moveq	#0,d0
00010374 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010378 0828 0003 0028             		btst	#3,$28(a0)
0001037E 6700                       		beq.s	loc_E8A8
00010380 4440                       		neg.w	d0
00010382 0640 0010                  		addi.w	#$10,d0
00010386                            
00010386                            loc_E8A8:
00010386 3228 0030                  		move.w	$30(a0),d1
0001038A 9240                       		sub.w	d0,d1
0001038C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00010390 4E75                       		rts	
00010392                            ; ===========================================================================
00010392                            
00010392                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00010392 6100 ED1C                  		bsr.w	SpeedToPos
00010396 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0001039C 6100 0000                  		bsr.w	ObjHitFloor
000103A0 4A41                       		tst.w	d1		; has the block	hit the	floor?
000103A2 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000103A6 D368 000C                  		add.w	d1,$C(a0)
000103AA 4268 0012                  		clr.w	$12(a0)		; stop the block falling
000103AE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103B4 117C 0004 0028             		move.b	#4,$28(a0)
000103BA 3011                       		move.w	(a1),d0
000103BC 0240 03FF                  		andi.w	#$3FF,d0
000103C0 0C40 02E8                  		cmpi.w	#$2E8,d0
000103C4 6400                       		bcc.s	locret_E8EE
000103C6 117C 0000 0028             		move.b	#0,$28(a0)
000103CC                            
000103CC                            locret_E8EE:
000103CC 4E75                       		rts	
000103CE                            ; ===========================================================================
000103CE                            
000103CE                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000103CE 7000                       		moveq	#0,d0
000103D0 1038 FE70                  		move.b	($FFFFFE70).w,d0
000103D4 E648                       		lsr.w	#3,d0
000103D6 3228 0030                  		move.w	$30(a0),d1
000103DA 9240                       		sub.w	d0,d1
000103DC 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
000103E0 4E75                       		rts	
000103E2                            ; ===========================================================================
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            Map_obj46:
000103E2                            	include "_maps\obj46.asm"
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000103E2                            ; ---------------------------------------------------------------------------
000103E2 0000                       		dc.w byte_E906-Map_obj46
000103E4 01                         byte_E906:	dc.b 1
000103E5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000103EA                            		even
000103EA                            		even
000103EA                            
000103EA                            ; ===========================================================================
000103EA                            ; ---------------------------------------------------------------------------
000103EA                            ; Object 12 - lamp (SYZ)
000103EA                            ; ---------------------------------------------------------------------------
000103EA                            
000103EA                            Obj12:					; XREF: Obj_Index
000103EA 7000                       		moveq	#0,d0
000103EC 1028 0024                  		move.b	$24(a0),d0
000103F0 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000103F4 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000103F8                            ; ===========================================================================
000103F8 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000103FA 0000                       		dc.w Obj12_Animate-Obj12_Index
000103FC                            ; ===========================================================================
000103FC                            
000103FC                            Obj12_Main:				; XREF: Obj12_Index
000103FC 5428 0024                  		addq.b	#2,$24(a0)
00010400 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00010408 317C 0000 0002             		move.w	#0,2(a0)
0001040E 117C 0004 0001             		move.b	#4,1(a0)
00010414 117C 0010 0019             		move.b	#$10,$19(a0)
0001041A 117C 0006 0018             		move.b	#6,$18(a0)
00010420                            
00010420                            Obj12_Animate:				; XREF: Obj12_Index
00010420 5328 001E                  		subq.b	#1,$1E(a0)
00010424 6A00                       		bpl.s	Obj12_ChkDel
00010426 117C 0007 001E             		move.b	#7,$1E(a0)
0001042C 5228 001A                  		addq.b	#1,$1A(a0)
00010430 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00010436 6500                       		bcs.s	Obj12_ChkDel
00010438 117C 0000 001A             		move.b	#0,$1A(a0)
0001043E                            
0001043E                            Obj12_ChkDel:
0001043E 3028 0008                  		move.w	8(a0),d0
00010442 0240 FF80                  		andi.w	#$FF80,d0
00010446 3238 F700                  		move.w	($FFFFF700).w,d1
0001044A 0441 0080                  		subi.w	#$80,d1
0001044E 0241 FF80                  		andi.w	#$FF80,d1
00010452 9041                       		sub.w	d1,d0
00010454 0C40 0280                  		cmpi.w	#$280,d0
00010458 6200 ECAC                  		bhi.w	DeleteObject
0001045C 6000 EC6C                  		bra.w	DisplaySprite
00010460                            ; ===========================================================================
00010460                            ; ---------------------------------------------------------------------------
00010460                            ; Sprite mappings - lamp (SYZ)
00010460                            ; ---------------------------------------------------------------------------
00010460                            Map_obj12:
00010460                            	include "_maps\obj12.asm"
00010460                            ; ---------------------------------------------------------------------------
00010460                            ; Sprite mappings - lamp (SYZ)
00010460                            ; ---------------------------------------------------------------------------
00010460 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00010464 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010468 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0001046C 02                         byte_E98E:	dc.b 2
0001046D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00010472 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010477 02                         byte_E999:	dc.b 2
00010478 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0001047D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00010482 02                         byte_E9A4:	dc.b 2
00010483 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010488 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0001048D 02                         byte_E9AF:	dc.b 2
0001048E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00010493 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010498 02                         byte_E9BA:	dc.b 2
00010499 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0001049E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
000104A3 02                         byte_E9C5:	dc.b 2
000104A4 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
000104A9 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000104AE                            		even
000104AE                            		even
000104AE                            
000104AE                            ; ===========================================================================
000104AE                            ; ---------------------------------------------------------------------------
000104AE                            ; Object 47 - pinball bumper (SYZ)
000104AE                            ; ---------------------------------------------------------------------------
000104AE                            
000104AE                            Obj47:					; XREF: Obj_Index
000104AE 7000                       		moveq	#0,d0
000104B0 1028 0024                  		move.b	$24(a0),d0
000104B4 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000104B8 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000104BC                            ; ===========================================================================
000104BC 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000104BE 0000                       		dc.w Obj47_Hit-Obj47_Index
000104C0                            ; ===========================================================================
000104C0                            
000104C0                            Obj47_Main:				; XREF: Obj47_Index
000104C0 5428 0024                  		addq.b	#2,$24(a0)
000104C4 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000104CC 317C 0380 0002             		move.w	#$380,2(a0)
000104D2 117C 0004 0001             		move.b	#4,1(a0)
000104D8 117C 0010 0019             		move.b	#$10,$19(a0)
000104DE 117C 0001 0018             		move.b	#1,$18(a0)
000104E4 117C 00D7 0020             		move.b	#$D7,$20(a0)
000104EA                            
000104EA                            Obj47_Hit:				; XREF: Obj47_Index
000104EA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000104EE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000104F2 4228 0021                  		clr.b	$21(a0)
000104F6 43F8 D000                  		lea	($FFFFD000).w,a1
000104FA 3228 0008                  		move.w	8(a0),d1
000104FE 3428 000C                  		move.w	$C(a0),d2
00010502 9269 0008                  		sub.w	8(a1),d1
00010506 9469 000C                  		sub.w	$C(a1),d2
0001050A 4EB9 0000 2E4A             		jsr	(CalcAngle).l
00010510 4EB9 0000 2B7C             		jsr	(CalcSine).l
00010516 C3FC F900                  		muls.w	#-$700,d1
0001051A E081                       		asr.l	#8,d1
0001051C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00010520 C1FC F900                  		muls.w	#-$700,d0
00010524 E080                       		asr.l	#8,d0
00010526 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0001052A 08E9 0001 0022             		bset	#1,$22(a1)
00010530 08A9 0004 0022             		bclr	#4,$22(a1)
00010536 08A9 0005 0022             		bclr	#5,$22(a1)
0001053C 4229 003C                  		clr.b	$3C(a1)
00010540 117C 0001 001C             		move.b	#1,$1C(a0)
00010546 303C 00B4                  		move.w	#$B4,d0
0001054A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bumper sound
00010550 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010554 7000                       		moveq	#0,d0
00010556 1028 0023                  		move.b	$23(a0),d0
0001055A 6700                       		beq.s	Obj47_Score
0001055C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
00010562 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010564 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010568                            
00010568                            Obj47_Score:
00010568 7001                       		moveq	#1,d0
0001056A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00010570 6100 EFEC                  		bsr.w	SingleObjLoad
00010574 6600                       		bne.s	Obj47_Display
00010576 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001057A 3368 0008 0008             		move.w	8(a0),8(a1)
00010580 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010586 137C 0004 001A             		move.b	#4,$1A(a1)
0001058C                            
0001058C                            Obj47_Display:
0001058C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00010592 6100 BC78                  		bsr.w	AnimateSprite
00010596 3028 0008                  		move.w	8(a0),d0
0001059A 0240 FF80                  		andi.w	#$FF80,d0
0001059E 3238 F700                  		move.w	($FFFFF700).w,d1
000105A2 0441 0080                  		subi.w	#$80,d1
000105A6 0241 FF80                  		andi.w	#$FF80,d1
000105AA 9041                       		sub.w	d1,d0
000105AC 0C40 0280                  		cmpi.w	#$280,d0
000105B0 6200                       		bhi.s	Obj47_ChkHit
000105B2 6000 EB16                  		bra.w	DisplaySprite
000105B6                            ; ===========================================================================
000105B6                            
000105B6                            Obj47_ChkHit:				; XREF: Obj47_Display
000105B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105BA 7000                       		moveq	#0,d0
000105BC 1028 0023                  		move.b	$23(a0),d0
000105C0 6700                       		beq.s	Obj47_Delete
000105C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000105C8                            
000105C8                            Obj47_Delete:
000105C8 6000 EB3C                  		bra.w	DeleteObject
000105CC                            ; ===========================================================================
000105CC                            Ani_obj47:
000105CC                            	include "_anim\obj47.asm"
000105CC                            ; ---------------------------------------------------------------------------
000105CC                            ; Animation script - flamethrower (SBZ)
000105CC                            ; ---------------------------------------------------------------------------
000105CC 0000                       		dc.w byte_EAF4-Ani_obj47
000105CE 0000                       		dc.w byte_EAF8-Ani_obj47
000105D0 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000105D4 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000105DC                            		even
000105DC                            		even
000105DC                            
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            ; Sprite mappings - pinball bumper (SYZ)
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            Map_obj47:
000105DC                            	include "_maps\obj47.asm"
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            ; Sprite mappings - pinball bumper (SYZ)
000105DC                            ; ---------------------------------------------------------------------------
000105DC 0000                       		dc.w byte_EB06-Map_obj47
000105DE 0000                       		dc.w byte_EB11-Map_obj47
000105E0 0000                       		dc.w byte_EB1C-Map_obj47
000105E2 02                         byte_EB06:	dc.b 2
000105E3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000105E8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000105ED 02                         byte_EB11:	dc.b 2
000105EE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000105F3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000105F8 02                         byte_EB1C:	dc.b 2
000105F9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000105FE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010604 00                         		even
00010604 00                         		even
00010604                            
00010604                            ; ===========================================================================
00010604                            ; ---------------------------------------------------------------------------
00010604                            ; Object 0D - signpost at the end of a level
00010604                            ; ---------------------------------------------------------------------------
00010604                            
00010604                            Obj0D:					; XREF: Obj_Index
00010604 7000                       		moveq	#0,d0
00010606 1028 0024                  		move.b	$24(a0),d0
0001060A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0001060E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00010612 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00010618 6100 BBF2                  		bsr.w	AnimateSprite
0001061C 6100 EAAC                  		bsr.w	DisplaySprite
00010620 3028 0008                  		move.w	8(a0),d0
00010624 0240 FF80                  		andi.w	#$FF80,d0
00010628 3238 F700                  		move.w	($FFFFF700).w,d1
0001062C 0441 0080                  		subi.w	#$80,d1
00010630 0241 FF80                  		andi.w	#$FF80,d1
00010634 9041                       		sub.w	d1,d0
00010636 0C40 0280                  		cmpi.w	#$280,d0
0001063A 6200 EACA                  		bhi.w	DeleteObject
0001063E 4E75                       		rts	
00010640                            ; ===========================================================================
00010640 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00010642 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00010644 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00010646 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010648 0000                       		dc.w locret_ED1A-Obj0D_Index
0001064A                            ; ===========================================================================
0001064A                            
0001064A                            Obj0D_Main:				; XREF: Obj0D_Index
0001064A 5428 0024                  		addq.b	#2,$24(a0)
0001064E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010656 317C 0680 0002             		move.w	#$680,2(a0)
0001065C 117C 0004 0001             		move.b	#4,1(a0)
00010662 117C 0018 0019             		move.b	#$18,$19(a0)
00010668 117C 0004 0018             		move.b	#4,$18(a0)
0001066E                            
0001066E                            Obj0D_Touch:				; XREF: Obj0D_Index
0001066E 3038 D008                  		move.w	($FFFFD008).w,d0
00010672 9068 0008                  		sub.w	8(a0),d0
00010676 6500                       		bcs.s	locret_EBBA
00010678 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0001067C 6400                       		bcc.s	locret_EBBA	; if not, branch
0001067E 303C 00CF                  		move.w	#$CF,d0
00010682 4EB9 0000 12C6             		jsr	(PlaySound).l	; play signpost	sound
00010688 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001068C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00010692 5428 0024                  		addq.b	#2,$24(a0)
00010696                            
00010696                            locret_EBBA:
00010696 4E75                       		rts	
00010698                            ; ===========================================================================
00010698                            
00010698                            Obj0D_Spin:				; XREF: Obj0D_Index
00010698 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0001069C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0001069E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
000106A4 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
000106A8 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
000106AE 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
000106B0 5428 0024                  		addq.b	#2,$24(a0)
000106B4                            
000106B4                            Obj0D_Sparkle:
000106B4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000106B8 6A00                       		bpl.s	locret_EC42	; if time remains, branch
000106BA 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
000106C0 7000                       		moveq	#0,d0
000106C2 1028 0034                  		move.b	$34(a0),d0
000106C6 5428 0034                  		addq.b	#2,$34(a0)
000106CA 0228 000E 0034             		andi.b	#$E,$34(a0)
000106D0 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000106D4 6100 EE88                  		bsr.w	SingleObjLoad
000106D8 6600                       		bne.s	locret_EC42
000106DA 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000106DE 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000106E4 101A                       		move.b	(a2)+,d0
000106E6 4880                       		ext.w	d0
000106E8 D068 0008                  		add.w	8(a0),d0
000106EC 3340 0008                  		move.w	d0,8(a1)
000106F0 101A                       		move.b	(a2)+,d0
000106F2 4880                       		ext.w	d0
000106F4 D068 000C                  		add.w	$C(a0),d0
000106F8 3340 000C                  		move.w	d0,$C(a1)
000106FC 237C 0000 BA82 0004        		move.l	#Map_obj25,4(a1)
00010704 337C 27B2 0002             		move.w	#$27B2,2(a1)
0001070A 137C 0004 0001             		move.b	#4,1(a1)
00010710 137C 0002 0018             		move.b	#2,$18(a1)
00010716 137C 0008 0019             		move.b	#8,$19(a1)
0001071C                            
0001071C                            locret_EC42:
0001071C 4E75                       		rts	
0001071E                            ; ===========================================================================
0001071E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010720 0808                       		dc.b	8,   8
00010722 F000                       		dc.b -$10,   0
00010724 18F8                       		dc.b  $18,  -8
00010726 00F8                       		dc.b	0,  -8
00010728 1000                       		dc.b  $10,   0
0001072A E808                       		dc.b -$18,   8
0001072C 1810                       		dc.b  $18, $10
0001072E                            ; ===========================================================================
0001072E                            
0001072E                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0001072E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010732 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010736 0838 0001 D022             		btst	#1,($FFFFD022).w
0001073C 6600                       		bne.s	loc_EC70
0001073E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00010744 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001074A                            
0001074A                            loc_EC70:
0001074A 4A38 D000                  		tst.b	($FFFFD000).w
0001074E 6700                       		beq.s	loc_EC86
00010750 3038 D008                  		move.w	($FFFFD008).w,d0
00010754 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010758 0641 0128                  		addi.w	#$128,d1
0001075C B041                       		cmp.w	d1,d0
0001075E 6500                       		bcs.s	locret_ECEE
00010760                            
00010760                            loc_EC86:
00010760 5428 0024                  		addq.b	#2,$24(a0)
00010764                            
00010764                            ; ---------------------------------------------------------------------------
00010764                            ; Subroutine to	set up bonuses at the end of an	act
00010764                            ; ---------------------------------------------------------------------------
00010764                            
00010764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010764                            
00010764                            
00010764                            GotThroughAct:				; XREF: Obj3E_EndAct
00010764 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010768 6600                       		bne.s	locret_ECEE
0001076A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010770 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00010774 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010778 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0001077E 7010                       		moveq	#$10,d0
00010780 4EB9 0000 15B8             		jsr	(LoadPLC2).l	; load title card patterns
00010786 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0001078C 7000                       		moveq	#0,d0
0001078E 1038 FE23                  		move.b	($FFFFFE23).w,d0
00010792 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010796 7200                       		moveq	#0,d1
00010798 1238 FE24                  		move.b	($FFFFFE24).w,d1
0001079C D041                       		add.w	d1,d0		; add up your time
0001079E 80FC 000F                  		divu.w	#15,d0		; divide by 15
000107A2 7214                       		moveq	#$14,d1
000107A4 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000107A6 6500                       		bcs.s	loc_ECD0	; if not, branch
000107A8 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000107AA                            
000107AA                            loc_ECD0:
000107AA D040                       		add.w	d0,d0
000107AC 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000107B2 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000107B6 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000107BA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000107BE 303C 008E                  		move.w	#$8E,d0
000107C2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000107C8                            
000107C8                            locret_ECEE:
000107C8 4E75                       		rts	
000107CA                            ; End of function GotThroughAct
000107CA                            
000107CA                            ; ===========================================================================
000107CA 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000107DE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000107F4                            ; ===========================================================================
000107F4                            
000107F4                            locret_ED1A:				; XREF: Obj0D_Index
000107F4 4E75                       		rts	
000107F6                            ; ===========================================================================
000107F6                            Ani_obj0D:
000107F6                            	include "_anim\obj0D.asm"
000107F6                            ; ---------------------------------------------------------------------------
000107F6                            ; Animation script - signpost
000107F6                            ; ---------------------------------------------------------------------------
000107F6 0000                       		dc.w byte_ED24-Ani_obj0D
000107F8 0000                       		dc.w byte_ED28-Ani_obj0D
000107FA 0000                       		dc.w byte_ED2E-Ani_obj0D
000107FC 0000                       		dc.w byte_ED34-Ani_obj0D
000107FE 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00010802 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00010808 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0001080E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00010812 00                         		even
00010812 00                         		even
00010812                            
00010812                            ; ---------------------------------------------------------------------------
00010812                            ; Sprite mappings - signpost
00010812                            ; ---------------------------------------------------------------------------
00010812                            Map_obj0D:
00010812                            	include "_maps\obj0D.asm"
00010812                            ; ---------------------------------------------------------------------------
00010812                            ; Sprite mappings - signpost
00010812                            ; ---------------------------------------------------------------------------
00010812 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00010816 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0001081A 0000                       		dc.w byte_ED73-Map_obj0D
0001081C 03                         byte_ED42:	dc.b 3
0001081D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00010822 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00010827 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001082C 02                         byte_ED52:	dc.b 2
0001082D F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00010832 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010837 02                         byte_ED5D:	dc.b 2
00010838 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0001083D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010842 02                         byte_ED68:	dc.b 2
00010843 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010848 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001084D 03                         byte_ED73:	dc.b 3
0001084E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00010853 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010858 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001085E 00                         		even
0001085E 00                         		even
0001085E                            
0001085E                            ; ===========================================================================
0001085E                            ; ---------------------------------------------------------------------------
0001085E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0001085E                            ; ---------------------------------------------------------------------------
0001085E                            
0001085E                            Obj4C:					; XREF: Obj_Index
0001085E 7000                       		moveq	#0,d0
00010860 1028 0024                  		move.b	$24(a0),d0
00010864 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010868 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0001086C 6000 0000                  		bra.w	Obj4D_ChkDel
00010870                            ; ===========================================================================
00010870 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00010872 0000                       		dc.w loc_EDCC-Obj4C_Index
00010874 0000                       		dc.w loc_EE3E-Obj4C_Index
00010876 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010878 0000                       		dc.w Obj4C_Display-Obj4C_Index
0001087A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0001087C                            ; ===========================================================================
0001087C                            
0001087C                            Obj4C_Main:				; XREF: Obj4C_Index
0001087C 5428 0024                  		addq.b	#2,$24(a0)
00010880 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010888 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001088E 117C 0004 0001             		move.b	#4,1(a0)
00010894 117C 0001 0018             		move.b	#1,$18(a0)
0001089A 117C 0038 0019             		move.b	#$38,$19(a0)
000108A0 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
000108A6                            
000108A6                            loc_EDCC:				; XREF: Obj4C_Index
000108A6 5368 0032                  		subq.w	#1,$32(a0)
000108AA 6A00                       		bpl.s	locret_EDF0
000108AC 3168 0034 0032             		move.w	$34(a0),$32(a0)
000108B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000108B6 3228 000C                  		move.w	$C(a0),d1
000108BA B041                       		cmp.w	d1,d0
000108BC 6400                       		bcc.s	locret_EDF0
000108BE 0441 0170                  		subi.w	#$170,d1
000108C2 B041                       		cmp.w	d1,d0
000108C4 6500                       		bcs.s	locret_EDF0
000108C6 5428 0024                  		addq.b	#2,$24(a0)
000108CA                            
000108CA                            locret_EDF0:
000108CA 4E75                       		rts	
000108CC                            ; ===========================================================================
000108CC                            
000108CC                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000108CC 5428 0024                  		addq.b	#2,$24(a0)
000108D0 6100 ECA2                  		bsr.w	SingleObjLoad2
000108D4 6600                       		bne.s	loc_EE18
000108D6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000108DA 3368 0008 0008             		move.w	8(a0),8(a1)
000108E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108E6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000108EC 2348 003C                  		move.l	a0,$3C(a1)
000108F0                            
000108F0                            loc_EE18:
000108F0 117C 0001 001C             		move.b	#1,$1C(a0)
000108F6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000108FA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000108FC 117C 0004 001C             		move.b	#4,$1C(a0)
00010902 6000                       		bra.s	Obj4C_Display
00010904                            ; ===========================================================================
00010904                            
00010904                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00010904 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00010908 08E9 0001 0022             		bset	#1,$22(a1)
0001090E 337C FA80 0012             		move.w	#-$580,$12(a1)
00010914 6000                       		bra.s	Obj4C_Display
00010916                            ; ===========================================================================
00010916                            
00010916                            loc_EE3E:				; XREF: Obj4C_Index
00010916 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0001091A 6700                       		beq.s	Obj4C_Display	; if yes, branch
0001091C 5428 0024                  		addq.b	#2,$24(a0)
00010920 4E75                       		rts	
00010922                            ; ===========================================================================
00010922                            
00010922                            Obj4C_Display:				; XREF: Obj4C_Index
00010922 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010928 6100 B8E2                  		bsr.w	AnimateSprite
0001092C 6100 E79C                  		bsr.w	DisplaySprite
00010930 4E75                       		rts	
00010932                            ; ===========================================================================
00010932                            
00010932                            Obj4C_Delete:				; XREF: Obj4C_Index
00010932 117C 0000 001C             		move.b	#0,$1C(a0)
00010938 117C 0002 0024             		move.b	#2,$24(a0)
0001093E 4A28 0028                  		tst.b	$28(a0)
00010942 6700 E7C2                  		beq.w	DeleteObject
00010946 4E75                       		rts	
00010948                            ; ===========================================================================
00010948                            ; ---------------------------------------------------------------------------
00010948                            ; Object 4D - lava geyser / lavafall (MZ)
00010948                            ; ---------------------------------------------------------------------------
00010948                            
00010948                            Obj4D:					; XREF: Obj_Index
00010948 7000                       		moveq	#0,d0
0001094A 1028 0024                  		move.b	$24(a0),d0
0001094E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010952 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010956 6000 E772                  		bra.w	DisplaySprite
0001095A                            ; ===========================================================================
0001095A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0001095C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0001095E 0000                       		dc.w loc_EFFC-Obj4D_Index
00010960 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010962                            
00010962 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010966                            ; ===========================================================================
00010966                            
00010966                            Obj4D_Main:				; XREF: Obj4D_Index
00010966 5428 0024                  		addq.b	#2,$24(a0)
0001096A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010970 4A28 0028                  		tst.b	$28(a0)
00010974 6700                       		beq.s	loc_EEA4
00010976 0468 0250 000C             		subi.w	#$250,$C(a0)
0001097C                            
0001097C                            loc_EEA4:
0001097C 7000                       		moveq	#0,d0
0001097E 1028 0028                  		move.b	$28(a0),d0
00010982 D040                       		add.w	d0,d0
00010984 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0001098A 2248                       		movea.l	a0,a1
0001098C 7201                       		moveq	#1,d1
0001098E 6100                       		bsr.s	Obj4D_MakeLava
00010990 6000                       		bra.s	loc_EF10
00010992                            ; ===========================================================================
00010992                            
00010992                            Obj4D_Loop:
00010992 6100 EBE0                  		bsr.w	SingleObjLoad2
00010996 6600                       		bne.s	loc_EF0A
00010998                            
00010998                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010998 12BC 004D                  		move.b	#$4D,0(a1)
0001099C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000109A4 337C 63A8 0002             		move.w	#$63A8,2(a1)
000109AA 137C 0004 0001             		move.b	#4,1(a1)
000109B0 137C 0020 0019             		move.b	#$20,$19(a1)
000109B6 3368 0008 0008             		move.w	8(a0),8(a1)
000109BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109C2 1368 0028 0028             		move.b	$28(a0),$28(a1)
000109C8 137C 0001 0018             		move.b	#1,$18(a1)
000109CE 137C 0005 001C             		move.b	#5,$1C(a1)
000109D4 4A28 0028                  		tst.b	$28(a0)
000109D8 6700                       		beq.s	loc_EF0A
000109DA 137C 0002 001C             		move.b	#2,$1C(a1)
000109E0                            
000109E0                            loc_EF0A:
000109E0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000109E4 4E75                       		rts	
000109E6                            ; ===========================================================================
000109E6                            
000109E6                            loc_EF10:				; XREF: Obj4D_Main
000109E6 0669 0060 000C             		addi.w	#$60,$C(a1)
000109EC 3368 0030 0030             		move.w	$30(a0),$30(a1)
000109F2 0669 0060 0030             		addi.w	#$60,$30(a1)
000109F8 137C 0093 0020             		move.b	#$93,$20(a1)
000109FE 137C 0080 0016             		move.b	#$80,$16(a1)
00010A04 08E9 0004 0001             		bset	#4,1(a1)
00010A0A 5829 0024                  		addq.b	#4,$24(a1)
00010A0E 2348 003C                  		move.l	a0,$3C(a1)
00010A12 4A28 0028                  		tst.b	$28(a0)
00010A16 6700                       		beq.s	Obj4D_PlaySnd
00010A18 7200                       		moveq	#0,d1
00010A1A 6100 FF76                  		bsr.w	Obj4D_Loop
00010A1E 5429 0024                  		addq.b	#2,$24(a1)
00010A22 08E9 0004 0002             		bset	#4,2(a1)
00010A28 0669 0100 000C             		addi.w	#$100,$C(a1)
00010A2E 137C 0000 0018             		move.b	#0,$18(a1)
00010A34 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010A3A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010A40 117C 0000 0028             		move.b	#0,$28(a0)
00010A46                            
00010A46                            Obj4D_PlaySnd:
00010A46 303C 00C8                  		move.w	#$C8,d0
00010A4A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010A50                            
00010A50                            Obj4D_Action:				; XREF: Obj4D_Index
00010A50 7000                       		moveq	#0,d0
00010A52 1028 0028                  		move.b	$28(a0),d0
00010A56 D040                       		add.w	d0,d0
00010A58 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010A5C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010A60 6100 E64E                  		bsr.w	SpeedToPos
00010A64 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010A6A 6100 B7A0                  		bsr.w	AnimateSprite
00010A6E                            
00010A6E                            Obj4D_ChkDel:				; XREF: Obj4C
00010A6E 3028 0008                  		move.w	8(a0),d0
00010A72 0240 FF80                  		andi.w	#$FF80,d0
00010A76 3238 F700                  		move.w	($FFFFF700).w,d1
00010A7A 0441 0080                  		subi.w	#$80,d1
00010A7E 0241 FF80                  		andi.w	#$FF80,d1
00010A82 9041                       		sub.w	d1,d0
00010A84 0C40 0280                  		cmpi.w	#$280,d0
00010A88 6200 E67C                  		bhi.w	DeleteObject
00010A8C 4E75                       		rts	
00010A8E                            ; ===========================================================================
00010A8E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010A90 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010A92                            ; ===========================================================================
00010A92                            
00010A92                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010A92 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010A98 3028 0030                  		move.w	$30(a0),d0
00010A9C B068 000C                  		cmp.w	$C(a0),d0
00010AA0 6400                       		bcc.s	locret_EFDA
00010AA2 5828 0024                  		addq.b	#4,$24(a0)
00010AA6 2268 003C                  		movea.l	$3C(a0),a1
00010AAA 137C 0003 001C             		move.b	#3,$1C(a1)
00010AB0                            
00010AB0                            locret_EFDA:
00010AB0 4E75                       		rts	
00010AB2                            ; ===========================================================================
00010AB2                            
00010AB2                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010AB2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010AB8 3028 0030                  		move.w	$30(a0),d0
00010ABC B068 000C                  		cmp.w	$C(a0),d0
00010AC0 6400                       		bcc.s	locret_EFFA
00010AC2 5828 0024                  		addq.b	#4,$24(a0)
00010AC6 2268 003C                  		movea.l	$3C(a0),a1
00010ACA 137C 0001 001C             		move.b	#1,$1C(a1)
00010AD0                            
00010AD0                            locret_EFFA:
00010AD0 4E75                       		rts	
00010AD2                            ; ===========================================================================
00010AD2                            
00010AD2                            loc_EFFC:				; XREF: Obj4D_Index
00010AD2 2268 003C                  		movea.l	$3C(a0),a1
00010AD6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010ADC 6700 0000                  		beq.w	Obj4D_Delete
00010AE0 3029 000C                  		move.w	$C(a1),d0
00010AE4 0640 0060                  		addi.w	#$60,d0
00010AE8 3140 000C                  		move.w	d0,$C(a0)
00010AEC 9068 0030                  		sub.w	$30(a0),d0
00010AF0 4440                       		neg.w	d0
00010AF2 7208                       		moveq	#8,d1
00010AF4 0C40 0040                  		cmpi.w	#$40,d0
00010AF8 6C00                       		bge.s	loc_F026
00010AFA 720B                       		moveq	#$B,d1
00010AFC                            
00010AFC                            loc_F026:
00010AFC 0C40 0080                  		cmpi.w	#$80,d0
00010B00 6F00                       		ble.s	loc_F02E
00010B02 720E                       		moveq	#$E,d1
00010B04                            
00010B04                            loc_F02E:
00010B04 5328 001E                  		subq.b	#1,$1E(a0)
00010B08 6A00                       		bpl.s	loc_F04C
00010B0A 117C 0007 001E             		move.b	#7,$1E(a0)
00010B10 5228 001B                  		addq.b	#1,$1B(a0)
00010B14 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010B1A 6500                       		bcs.s	loc_F04C
00010B1C 117C 0000 001B             		move.b	#0,$1B(a0)
00010B22                            
00010B22                            loc_F04C:
00010B22 1028 001B                  		move.b	$1B(a0),d0
00010B26 D001                       		add.b	d1,d0
00010B28 1140 001A                  		move.b	d0,$1A(a0)
00010B2C 6000 FF40                  		bra.w	Obj4D_ChkDel
00010B30                            ; ===========================================================================
00010B30                            
00010B30                            Obj4D_Delete:				; XREF: Obj4D_Index
00010B30 6000 E5D4                  		bra.w	DeleteObject
00010B34                            ; ===========================================================================
00010B34                            ; ---------------------------------------------------------------------------
00010B34                            ; Object 4E - advancing	wall of	lava (MZ)
00010B34                            ; ---------------------------------------------------------------------------
00010B34                            
00010B34                            Obj4E:					; XREF: Obj_Index
00010B34 7000                       		moveq	#0,d0
00010B36 1028 0024                  		move.b	$24(a0),d0
00010B3A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010B3E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010B42                            ; ===========================================================================
00010B42 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010B44 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010B46 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010B48 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010B4A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010B4C                            ; ===========================================================================
00010B4C                            
00010B4C                            Obj4E_Main:				; XREF: Obj4E_Index
00010B4C 5828 0024                  		addq.b	#4,$24(a0)
00010B50 2248                       		movea.l	a0,a1
00010B52 7201                       		moveq	#1,d1
00010B54 6000                       		bra.s	Obj4E_Main2
00010B56                            ; ===========================================================================
00010B56                            
00010B56                            Obj4E_Loop:
00010B56 6100 EA1C                  		bsr.w	SingleObjLoad2
00010B5A 6600                       		bne.s	loc_F0C8
00010B5C                            
00010B5C                            Obj4E_Main2:				; XREF: Obj4E_Main
00010B5C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010B60 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010B68 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010B6E 137C 0004 0001             		move.b	#4,1(a1)
00010B74 137C 0050 0019             		move.b	#$50,$19(a1)
00010B7A 3368 0008 0008             		move.w	8(a0),8(a1)
00010B80 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010B86 137C 0001 0018             		move.b	#1,$18(a1)
00010B8C 137C 0000 001C             		move.b	#0,$1C(a1)
00010B92 137C 0094 0020             		move.b	#$94,$20(a1)
00010B98 2348 003C                  		move.l	a0,$3C(a1)
00010B9C                            
00010B9C                            loc_F0C8:
00010B9C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010BA0                            
00010BA0 5C29 0024                  		addq.b	#6,$24(a1)
00010BA4 137C 0004 001A             		move.b	#4,$1A(a1)
00010BAA                            
00010BAA                            Obj4E_Action:				; XREF: Obj4E_Index
00010BAA 3038 D008                  		move.w	($FFFFD008).w,d0
00010BAE 9068 0008                  		sub.w	8(a0),d0
00010BB2 6400                       		bcc.s	Obj4E_ChkSonic
00010BB4 4440                       		neg.w	d0
00010BB6                            
00010BB6                            Obj4E_ChkSonic:
00010BB6 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010BBA 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010BBC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010BC0 9068 000C                  		sub.w	$C(a0),d0
00010BC4 6400                       		bcc.s	loc_F0F4
00010BC6 4440                       		neg.w	d0
00010BC8                            
00010BC8                            loc_F0F4:
00010BC8 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010BCC 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010BCE 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010BD4 6000                       		bra.s	Obj4E_Solid
00010BD6                            ; ===========================================================================
00010BD6                            
00010BD6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010BD6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010BDA 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010BDC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010BE2 5528 0024                  		subq.b	#2,$24(a0)
00010BE6                            
00010BE6                            Obj4E_Solid:				; XREF: Obj4E_Index
00010BE6 323C 002B                  		move.w	#$2B,d1
00010BEA 343C 0018                  		move.w	#$18,d2
00010BEE 3602                       		move.w	d2,d3
00010BF0 5243                       		addq.w	#1,d3
00010BF2 3828 0008                  		move.w	8(a0),d4
00010BF6 1028 0024                  		move.b	$24(a0),d0
00010BFA 3F00                       		move.w	d0,-(sp)
00010BFC 6100 0000                  		bsr.w	SolidObject
00010C00 301F                       		move.w	(sp)+,d0
00010C02 1140 0024                  		move.b	d0,$24(a0)
00010C06 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010C0C 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010C0E 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010C12 4228 0036                  		clr.b	$36(a0)
00010C16                            
00010C16                            Obj4E_Animate:
00010C16 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010C1C 6100 B5EE                  		bsr.w	AnimateSprite
00010C20 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010C26 6400                       		bcc.s	Obj4E_ChkDel
00010C28 6100 E486                  		bsr.w	SpeedToPos
00010C2C                            
00010C2C                            Obj4E_ChkDel:
00010C2C 6100 E49C                  		bsr.w	DisplaySprite
00010C30 4A28 0036                  		tst.b	$36(a0)
00010C34 6600                       		bne.s	locret_F17E
00010C36 3028 0008                  		move.w	8(a0),d0
00010C3A 0240 FF80                  		andi.w	#$FF80,d0
00010C3E 3238 F700                  		move.w	($FFFFF700).w,d1
00010C42 0441 0080                  		subi.w	#$80,d1
00010C46 0241 FF80                  		andi.w	#$FF80,d1
00010C4A 9041                       		sub.w	d1,d0
00010C4C 0C40 0280                  		cmpi.w	#$280,d0
00010C50 6200                       		bhi.s	Obj4E_ChkGone
00010C52                            
00010C52                            locret_F17E:
00010C52 4E75                       		rts	
00010C54                            ; ===========================================================================
00010C54                            
00010C54                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010C54 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C58 7000                       		moveq	#0,d0
00010C5A 1028 0023                  		move.b	$23(a0),d0
00010C5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C64 117C 0008 0024             		move.b	#8,$24(a0)
00010C6A 4E75                       		rts	
00010C6C                            ; ===========================================================================
00010C6C                            
00010C6C                            Obj4E_Move2:				; XREF: Obj4E_Index
00010C6C 2268 003C                  		movea.l	$3C(a0),a1
00010C70 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010C76 6700                       		beq.s	Obj4E_Delete
00010C78 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010C7E 0468 0080 0008             		subi.w	#$80,8(a0)
00010C84 6000 E444                  		bra.w	DisplaySprite
00010C88                            ; ===========================================================================
00010C88                            
00010C88                            Obj4E_Delete:				; XREF: Obj4E_Index
00010C88 6000 E47C                  		bra.w	DeleteObject
00010C8C                            ; ===========================================================================
00010C8C                            ; ---------------------------------------------------------------------------
00010C8C                            ; Object 54 - invisible	lava tag (MZ)
00010C8C                            ; ---------------------------------------------------------------------------
00010C8C                            
00010C8C                            Obj54:					; XREF: Obj_Index
00010C8C 7000                       		moveq	#0,d0
00010C8E 1028 0024                  		move.b	$24(a0),d0
00010C92 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010C96 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010C9A                            ; ===========================================================================
00010C9A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010C9C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010C9E                            
00010C9E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010CA2                            ; ===========================================================================
00010CA2                            
00010CA2                            Obj54_Main:				; XREF: Obj54_Index
00010CA2 5428 0024                  		addq.b	#2,$24(a0)
00010CA6 7000                       		moveq	#0,d0
00010CA8 1028 0028                  		move.b	$28(a0),d0
00010CAC 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010CB2 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010CBA 117C 0084 0001             		move.b	#$84,1(a0)
00010CC0                            
00010CC0                            Obj54_ChkDel:				; XREF: Obj54_Index
00010CC0 3028 0008                  		move.w	8(a0),d0
00010CC4 0240 FF80                  		andi.w	#$FF80,d0
00010CC8 3238 F700                  		move.w	($FFFFF700).w,d1
00010CCC 0441 0080                  		subi.w	#$80,d1
00010CD0 0241 FF80                  		andi.w	#$FF80,d1
00010CD4 9041                       		sub.w	d1,d0
00010CD6 6B00 E42E                  		bmi.w	DeleteObject
00010CDA 0C40 0280                  		cmpi.w	#$280,d0
00010CDE 6200 E426                  		bhi.w	DeleteObject
00010CE2 4E75                       		rts	
00010CE4                            ; ===========================================================================
00010CE4                            ; ---------------------------------------------------------------------------
00010CE4                            ; Sprite mappings - invisible lava tag (MZ)
00010CE4                            ; ---------------------------------------------------------------------------
00010CE4                            Map_obj54:
00010CE4                            	include "_maps\obj54.asm"
00010CE4                            ; ---------------------------------------------------------------------------
00010CE4                            ; Sprite mappings - invisible lava tag (MZ)
00010CE4                            ; ---------------------------------------------------------------------------
00010CE4 0000                       		dc.w byte_F212-Map_obj54
00010CE6 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010CE8 00                         		even
00010CE8 00                         		even
00010CE8                            
00010CE8                            Ani_obj4C:
00010CE8                            	include "_anim\obj4C.asm"
00010CE8                            ; ---------------------------------------------------------------------------
00010CE8                            ; Animation script - geyser of lava (MZ)
00010CE8                            ; ---------------------------------------------------------------------------
00010CE8 0000                       		dc.w byte_F220-Ani_obj4C
00010CEA 0000                       		dc.w byte_F22A-Ani_obj4C
00010CEC 0000                       		dc.w byte_F22E-Ani_obj4C
00010CEE 0000                       		dc.w byte_F232-Ani_obj4C
00010CF0 0000                       		dc.w byte_F23A-Ani_obj4C
00010CF2 0000                       		dc.w byte_F23E-Ani_obj4C
00010CF4 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010CFE 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010D02 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010D06 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010D0E 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010D12 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010D16                            		even
00010D16                            		even
00010D16                            
00010D16                            Ani_obj4E:
00010D16                            	include "_anim\obj4E.asm"
00010D16                            ; ---------------------------------------------------------------------------
00010D16                            ; Animation script - advancing wall of lava (MZ)
00010D16                            ; ---------------------------------------------------------------------------
00010D16 0000                       		dc.w byte_F244-Ani_obj4E
00010D18 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010D1E                            		even
00010D1E                            		even
00010D1E                            
00010D1E                            ; ---------------------------------------------------------------------------
00010D1E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010D1E                            ; ---------------------------------------------------------------------------
00010D1E                            Map_obj4C:
00010D1E                            	include "_maps\obj4C.asm"
00010D1E                            ; ---------------------------------------------------------------------------
00010D1E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010D1E                            ; ---------------------------------------------------------------------------
00010D1E 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010D22 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010D26 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010D2A 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010D2E 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010D32 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010D36 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010D3A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010D3E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010D42 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010D46 02                         byte_F272:	dc.b 2
00010D47 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010D4C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010D51 02                         byte_F27D:	dc.b 2
00010D52 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010D57 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010D5C 04                         byte_F288:	dc.b 4
00010D5D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010D62 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010D67 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010D6C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010D71 04                         byte_F29D:	dc.b 4
00010D72 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010D77 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010D7C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010D81 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010D86 06                         byte_F2B2:	dc.b 6
00010D87 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010D8C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010D91 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010D96 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010D9B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010DA0 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010DA5 06                         byte_F2D1:	dc.b 6
00010DA6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010DAB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010DB0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010DB5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010DBA E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010DBF E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010DC4 02                         byte_F2F0:	dc.b 2
00010DC5 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010DCA E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010DCF 02                         byte_F2FB:	dc.b 2
00010DD0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010DD5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010DDA 0A                         byte_F306:	dc.b $A
00010DDB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010DE0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010DE5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010DEA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010DEF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010DF4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010DF9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010DFE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010E03 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010E08 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010E0D 0A                         byte_F339:	dc.b $A
00010E0E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E13 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E18 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010E1D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010E22 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010E27 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010E2C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010E31 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010E36 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010E3B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010E40 0A                         byte_F36C:	dc.b $A
00010E41 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010E46 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010E4B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010E50 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010E55 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010E5A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010E5F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010E64 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010E69 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010E6E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010E73 06                         byte_F39F:	dc.b 6
00010E74 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010E79 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010E7E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010E83 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010E88 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010E8D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010E92 06                         byte_F3BE:	dc.b 6
00010E93 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E98 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E9D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010EA2 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010EA7 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010EAC D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010EB1 06                         byte_F3DD:	dc.b 6
00010EB2 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010EB7 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010EBC B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010EC1 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010EC6 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010ECB D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010ED0 10                         byte_F3FC:	dc.b $10
00010ED1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010ED6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010EDB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010EE0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010EE5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010EEA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010EEF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010EF4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010EF9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010EFE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010F03 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010F08 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010F0D 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010F12 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010F17 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010F1C 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010F21 10                         byte_F44D:	dc.b $10
00010F22 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010F27 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010F2C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010F31 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010F36 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010F3B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010F40 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010F45 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010F4A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010F4F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010F54 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010F59 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010F5E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010F63 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010F68 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010F6D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010F72 10                         byte_F49E:	dc.b $10
00010F73 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F78 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F7D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F82 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010F87 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010F8C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010F91 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010F96 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010F9B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010FA0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010FA5 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010FAA 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010FAF 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010FB4 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010FB9 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010FBE 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010FC3 06                         byte_F4EF:	dc.b 6
00010FC4 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010FC9 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010FCE E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010FD3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010FD8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010FDD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010FE2 06                         byte_F50E:	dc.b 6
00010FE3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010FE8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010FED E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010FF2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010FF7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010FFC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011001 00                         byte_F52D:	dc.b 0
00011002                            		even
00011002                            		even
00011002                            
00011002                            ; ---------------------------------------------------------------------------
00011002                            ; Sprite mappings - advancing wall of lava (MZ)
00011002                            ; ---------------------------------------------------------------------------
00011002                            Map_obj4E:
00011002                            	include "_maps\obj4E.asm"
00011002                            ; ---------------------------------------------------------------------------
00011002                            ; Sprite mappings - advancing wall of lava (MZ)
00011002                            ; ---------------------------------------------------------------------------
00011002 0000                       		dc.w byte_F538-Map_obj4E
00011004 0000                       		dc.w byte_F566-Map_obj4E
00011006 0000                       		dc.w byte_F594-Map_obj4E
00011008 0000                       		dc.w byte_F5C2-Map_obj4E
0001100A 0000                       		dc.w byte_F5F0-Map_obj4E
0001100C 09                         byte_F538:	dc.b 9
0001100D E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00011012 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00011017 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001101C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011021 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011026 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001102B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011030 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011035 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001103A 09                         byte_F566:	dc.b 9
0001103B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00011040 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00011045 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001104A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001104F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011054 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011059 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001105E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011063 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011068 09                         byte_F594:	dc.b 9
00011069 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001106E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00011073 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011078 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001107D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011082 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011087 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001108C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011091 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011096 09                         byte_F5C2:	dc.b 9
00011097 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001109C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000110A1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110A6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110AB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110B0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110B5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110BA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110BF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110C4 08                         byte_F5F0:	dc.b 8
000110C5 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000110CA 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110CF E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110D4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110D9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110DE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110E3 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110E8 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110EE 00                         		even
000110EE 00                         		even
000110EE                            
000110EE                            ; ===========================================================================
000110EE                            ; ---------------------------------------------------------------------------
000110EE                            ; Object 40 - Moto Bug enemy (GHZ)
000110EE                            ; ---------------------------------------------------------------------------
000110EE                            
000110EE                            Obj40:					; XREF: Obj_Index
000110EE 7000                       		moveq	#0,d0
000110F0 1028 0024                  		move.b	$24(a0),d0
000110F4 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000110F8 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000110FC                            ; ===========================================================================
000110FC 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000110FE 0000                       		dc.w Obj40_Action-Obj40_Index
00011100 0000                       		dc.w Obj40_Animate-Obj40_Index
00011102 0000                       		dc.w Obj40_Delete-Obj40_Index
00011104                            ; ===========================================================================
00011104                            
00011104                            Obj40_Main:				; XREF: Obj40_Index
00011104 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001110C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011112 117C 0004 0001             		move.b	#4,1(a0)
00011118 117C 0004 0018             		move.b	#4,$18(a0)
0001111E 117C 0014 0019             		move.b	#$14,$19(a0)
00011124 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00011128 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0001112A 117C 000E 0016             		move.b	#$E,$16(a0)
00011130 117C 0008 0017             		move.b	#8,$17(a0)
00011136 117C 000C 0020             		move.b	#$C,$20(a0)
0001113C 6100 DF52                  		bsr.w	ObjectFall
00011140 4EB9 0000 0000             		jsr	ObjHitFloor
00011146 4A41                       		tst.w	d1
00011148 6A00                       		bpl.s	locret_F68A
0001114A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001114E 317C 0000 0012             		move.w	#0,$12(a0)
00011154 5428 0024                  		addq.b	#2,$24(a0)
00011158 0868 0000 0022             		bchg	#0,$22(a0)
0001115E                            
0001115E                            locret_F68A:
0001115E 4E75                       		rts	
00011160                            ; ===========================================================================
00011160                            
00011160                            Obj40_SetSmoke:				; XREF: Obj40_Main
00011160 5828 0024                  		addq.b	#4,$24(a0)
00011164 6000 0000                  		bra.w	Obj40_Animate
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj40_Action:				; XREF: Obj40_Index
00011168 7000                       		moveq	#0,d0
0001116A 1028 0025                  		move.b	$25(a0),d0
0001116E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00011172 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00011176 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001117C 6100 B08E                  		bsr.w	AnimateSprite
00011180                            
00011180                            ; ---------------------------------------------------------------------------
00011180                            ; Routine to mark an enemy/monitor/ring	as destroyed
00011180                            ; ---------------------------------------------------------------------------
00011180                            
00011180                            MarkObjGone:
00011180 3028 0008                  		move.w	8(a0),d0
00011184 0240 FF80                  		andi.w	#$FF80,d0
00011188 3238 F700                  		move.w	($FFFFF700).w,d1
0001118C 0441 0080                  		subi.w	#$80,d1
00011190 0241 FF80                  		andi.w	#$FF80,d1
00011194 9041                       		sub.w	d1,d0
00011196 0C40 0280                  		cmpi.w	#$280,d0
0001119A 6200 0000                  		bhi.w	Mark_ChkGone
0001119E 6000 DF2A                  		bra.w	DisplaySprite
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Mark_ChkGone:
000111A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000111A6 7000                       		moveq	#0,d0
000111A8 1028 0023                  		move.b	$23(a0),d0
000111AC 6700                       		beq.s	Mark_Delete
000111AE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000111B4                            
000111B4                            Mark_Delete:
000111B4 6000 DF50                  		bra.w	DeleteObject
000111B8                            
000111B8                            ; ===========================================================================
000111B8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000111BA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            Obj40_Move:				; XREF: Obj40_Index2
000111BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000111C0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000111C2 5428 0025                  		addq.b	#2,$25(a0)
000111C6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000111CC 117C 0001 001C             		move.b	#1,$1C(a0)
000111D2 0868 0000 0022             		bchg	#0,$22(a0)
000111D8 6600                       		bne.s	locret_F70A
000111DA 4468 0010                  		neg.w	$10(a0)		; change direction
000111DE                            
000111DE                            locret_F70A:
000111DE 4E75                       		rts	
000111E0                            ; ===========================================================================
000111E0                            
000111E0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000111E0 6100 DECE                  		bsr.w	SpeedToPos
000111E4 4EB9 0000 0000             		jsr	ObjHitFloor
000111EA 0C41 FFF8                  		cmpi.w	#-8,d1
000111EE 6D00                       		blt.s	Obj40_Pause
000111F0 0C41 000C                  		cmpi.w	#$C,d1
000111F4 6C00                       		bge.s	Obj40_Pause
000111F6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000111FA 5328 0033                  		subq.b	#1,$33(a0)
000111FE 6A00                       		bpl.s	locret_F756
00011200 117C 000F 0033             		move.b	#$F,$33(a0)
00011206 6100 E356                  		bsr.w	SingleObjLoad
0001120A 6600                       		bne.s	locret_F756
0001120C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011210 3368 0008 0008             		move.w	8(a0),8(a1)
00011216 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001121C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011222 137C 0002 001C             		move.b	#2,$1C(a1)
00011228                            
00011228                            locret_F756:
00011228 4E75                       		rts	
0001122A                            ; ===========================================================================
0001122A                            
0001122A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001122A 5528 0025                  		subq.b	#2,$25(a0)
0001122E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011234 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001123A 117C 0000 001C             		move.b	#0,$1C(a0)
00011240 4E75                       		rts	
00011242                            ; ===========================================================================
00011242                            
00011242                            Obj40_Animate:				; XREF: Obj40_Index
00011242 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011248 6100 AFC2                  		bsr.w	AnimateSprite
0001124C 6000 DE7C                  		bra.w	DisplaySprite
00011250                            ; ===========================================================================
00011250                            
00011250                            Obj40_Delete:				; XREF: Obj40_Index
00011250 6000 DEB4                  		bra.w	DeleteObject
00011254                            ; ===========================================================================
00011254                            Ani_obj40:
00011254                            	include "_anim\obj40.asm"
00011254                            ; ---------------------------------------------------------------------------
00011254                            ; Animation script - Motobug enemy
00011254                            ; ---------------------------------------------------------------------------
00011254 0000                       		dc.w byte_F788-Ani_obj40
00011256 0000                       		dc.w byte_F78C-Ani_obj40
00011258 0000                       		dc.w byte_F792-Ani_obj40
0001125A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001125E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00011264 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00011272                            		even
00011272                            		even
00011272                            
00011272                            ; ---------------------------------------------------------------------------
00011272                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011272                            ; ---------------------------------------------------------------------------
00011272                            Map_obj40:
00011272                            	include "_maps\obj40.asm"
00011272                            ; ---------------------------------------------------------------------------
00011272                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011272                            ; ---------------------------------------------------------------------------
00011272 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00011276 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0001127A 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0001127E 0000                       		dc.w byte_F804-Map_obj40
00011280 04                         byte_F7AE:	dc.b 4
00011281 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00011286 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0001128B F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011290 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00011295 04                         byte_F7C3:	dc.b 4
00011296 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0001129B 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000112A0 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000112A5 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000112AA 05                         byte_F7D8:	dc.b 5
000112AB F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000112B0 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000112B5 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000112BA 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000112BF 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000112C4 01                         byte_F7F2:	dc.b 1
000112C5 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000112CA 01                         byte_F7F8:	dc.b 1
000112CB FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000112D0 01                         byte_F7FE:	dc.b 1
000112D1 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000112D6 00                         byte_F804:	dc.b 0
000112D8 00                         		even
000112D8 00                         		even
000112D8                            
000112D8                            ; ===========================================================================
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            ; Object 4F - blank
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            
000112D8                            Obj4F:					; XREF: Obj_Index
000112D8 4E75                       		rts	
000112DA                            
000112DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112DA                            
000112DA                            
000112DA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000112DA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000112DE D047                       		add.w	d7,d0
000112E0 0240 0003                  		andi.w	#3,d0
000112E4 6600                       		bne.s	loc_F836
000112E6 7600                       		moveq	#0,d3
000112E8 1628 0019                  		move.b	$19(a0),d3
000112EC 4A68 0010                  		tst.w	$10(a0)
000112F0 6B00                       		bmi.s	loc_F82C
000112F2 6100 0000                  		bsr.w	ObjHitWallRight
000112F6 4A41                       		tst.w	d1
000112F8 6A00                       		bpl.s	loc_F836
000112FA                            
000112FA                            loc_F828:
000112FA 7001                       		moveq	#1,d0
000112FC 4E75                       		rts	
000112FE                            ; ===========================================================================
000112FE                            
000112FE                            loc_F82C:
000112FE 4643                       		not.w	d3
00011300 6100 0000                  		bsr.w	ObjHitWallLeft
00011304 4A41                       		tst.w	d1
00011306 6BF2                       		bmi.s	loc_F828
00011308                            
00011308                            loc_F836:
00011308 7000                       		moveq	#0,d0
0001130A 4E75                       		rts	
0001130C                            ; End of function Obj50_ChkWall
0001130C                            
0001130C                            ; ===========================================================================
0001130C                            ; ---------------------------------------------------------------------------
0001130C                            ; Object 50 - Yadrin enemy (SYZ)
0001130C                            ; ---------------------------------------------------------------------------
0001130C                            
0001130C                            Obj50:					; XREF: Obj_Index
0001130C 7000                       		moveq	#0,d0
0001130E 1028 0024                  		move.b	$24(a0),d0
00011312 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00011316 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001131A                            ; ===========================================================================
0001131A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001131C 0000                       		dc.w Obj50_Action-Obj50_Index
0001131E                            ; ===========================================================================
0001131E                            
0001131E                            Obj50_Main:				; XREF: Obj50_Index
0001131E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00011326 317C 247B 0002             		move.w	#$247B,2(a0)
0001132C 117C 0004 0001             		move.b	#4,1(a0)
00011332 117C 0004 0018             		move.b	#4,$18(a0)
00011338 117C 0014 0019             		move.b	#$14,$19(a0)
0001133E 117C 0011 0016             		move.b	#$11,$16(a0)
00011344 117C 0008 0017             		move.b	#8,$17(a0)
0001134A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011350 6100 DD3E                  		bsr.w	ObjectFall
00011354 6100 0000                  		bsr.w	ObjHitFloor
00011358 4A41                       		tst.w	d1
0001135A 6A00                       		bpl.s	locret_F89E
0001135C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011360 317C 0000 0012             		move.w	#0,$12(a0)
00011366 5428 0024                  		addq.b	#2,$24(a0)
0001136A 0868 0000 0022             		bchg	#0,$22(a0)
00011370                            
00011370                            locret_F89E:
00011370 4E75                       		rts	
00011372                            ; ===========================================================================
00011372                            
00011372                            Obj50_Action:				; XREF: Obj50_Index
00011372 7000                       		moveq	#0,d0
00011374 1028 0025                  		move.b	$25(a0),d0
00011378 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001137C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011380 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00011386 6100 AE84                  		bsr.w	AnimateSprite
0001138A 6000 FDF4                  		bra.w	MarkObjGone
0001138E                            ; ===========================================================================
0001138E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011390 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00011392                            ; ===========================================================================
00011392                            
00011392                            Obj50_Move:				; XREF: Obj50_Index2
00011392 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00011396 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011398 5428 0025                  		addq.b	#2,$25(a0)
0001139C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000113A2 117C 0001 001C             		move.b	#1,$1C(a0)
000113A8 0868 0000 0022             		bchg	#0,$22(a0)
000113AE 6600                       		bne.s	locret_F8E2
000113B0 4468 0010                  		neg.w	$10(a0)		; change direction
000113B4                            
000113B4                            locret_F8E2:
000113B4 4E75                       		rts	
000113B6                            ; ===========================================================================
000113B6                            
000113B6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000113B6 6100 DCF8                  		bsr.w	SpeedToPos
000113BA 6100 0000                  		bsr.w	ObjHitFloor
000113BE 0C41 FFF8                  		cmpi.w	#-8,d1
000113C2 6D00                       		blt.s	Obj50_Pause
000113C4 0C41 000C                  		cmpi.w	#$C,d1
000113C8 6C00                       		bge.s	Obj50_Pause
000113CA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000113CE 6100 FF0A                  		bsr.w	Obj50_ChkWall
000113D2 6600                       		bne.s	Obj50_Pause
000113D4 4E75                       		rts	
000113D6                            ; ===========================================================================
000113D6                            
000113D6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000113D6 5528 0025                  		subq.b	#2,$25(a0)
000113DA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000113E0 317C 0000 0010             		move.w	#0,$10(a0)
000113E6 117C 0000 001C             		move.b	#0,$1C(a0)
000113EC 4E75                       		rts	
000113EE                            ; ===========================================================================
000113EE                            Ani_obj50:
000113EE                            	include "_anim\obj50.asm"
000113EE                            ; ---------------------------------------------------------------------------
000113EE                            ; Animation script - Yadrin enemy
000113EE                            ; ---------------------------------------------------------------------------
000113EE 0000                       		dc.w byte_F920-Ani_obj50
000113F0 0000                       		dc.w byte_F924-Ani_obj50
000113F2 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000113F6 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00011400                            		even
00011400                            		even
00011400                            
00011400                            ; ---------------------------------------------------------------------------
00011400                            ; Sprite mappings - Yadrin enemy (SYZ)
00011400                            ; ---------------------------------------------------------------------------
00011400                            Map_obj50:
00011400                            	include "_maps\obj50.asm"
00011400                            ; ---------------------------------------------------------------------------
00011400                            ; Sprite mappings - Yadrin enemy (SYZ)
00011400                            ; ---------------------------------------------------------------------------
00011400 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00011404 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00011408 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0001140C 05                         byte_F93A:	dc.b 5
0001140D F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011412 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011417 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001141C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011421 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011426 05                         byte_F954:	dc.b 5
00011427 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001142C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011431 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011436 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001143B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011440 05                         byte_F96E:	dc.b 5
00011441 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011446 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001144B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011450 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011455 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001145A 05                         byte_F988:	dc.b 5
0001145B F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011460 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011465 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001146A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001146F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011474 05                         byte_F9A2:	dc.b 5
00011475 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001147A FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001147F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011484 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011489 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001148E 05                         byte_F9BC:	dc.b 5
0001148F F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011494 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011499 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001149E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114A3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000114A8                            		even
000114A8                            		even
000114A8                            
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000114A8                            ;
000114A8                            ; variables:
000114A8                            ; d1 = width
000114A8                            ; d2 = height /	2 (when	jumping)
000114A8                            ; d3 = height /	2 (when	walking)
000114A8                            ; d4 = x-axis position
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            
000114A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114A8                            
000114A8                            
000114A8                            SolidObject:
000114A8 4A28 0025                  		tst.b	$25(a0)
000114AC 6700 0000                  		beq.w	loc_FAC8
000114B0 3401                       		move.w	d1,d2
000114B2 D442                       		add.w	d2,d2
000114B4 43F8 D000                  		lea	($FFFFD000).w,a1
000114B8 0829 0001 0022             		btst	#1,$22(a1)
000114BE 6600                       		bne.s	loc_F9FE
000114C0 3029 0008                  		move.w	8(a1),d0
000114C4 9068 0008                  		sub.w	8(a0),d0
000114C8 D041                       		add.w	d1,d0
000114CA 6B00                       		bmi.s	loc_F9FE
000114CC B042                       		cmp.w	d2,d0
000114CE 6500                       		bcs.s	loc_FA12
000114D0                            
000114D0                            loc_F9FE:
000114D0 08A9 0003 0022             		bclr	#3,$22(a1)
000114D6 08A8 0003 0022             		bclr	#3,$22(a0)
000114DC 4228 0025                  		clr.b	$25(a0)
000114E0 7800                       		moveq	#0,d4
000114E2 4E75                       		rts	
000114E4                            ; ===========================================================================
000114E4                            
000114E4                            loc_FA12:
000114E4 3404                       		move.w	d4,d2
000114E6 6100 8100                  		bsr.w	MvSonicOnPtfm
000114EA 7800                       		moveq	#0,d4
000114EC 4E75                       		rts	
000114EE                            ; ===========================================================================
000114EE                            
000114EE                            SolidObject71:				; XREF: Obj71_Solid
000114EE 4A28 0025                  		tst.b	$25(a0)
000114F2 6700 0000                  		beq.w	loc_FAD0
000114F6 3401                       		move.w	d1,d2
000114F8 D442                       		add.w	d2,d2
000114FA 43F8 D000                  		lea	($FFFFD000).w,a1
000114FE 0829 0001 0022             		btst	#1,$22(a1)
00011504 6600                       		bne.s	loc_FA44
00011506 3029 0008                  		move.w	8(a1),d0
0001150A 9068 0008                  		sub.w	8(a0),d0
0001150E D041                       		add.w	d1,d0
00011510 6B00                       		bmi.s	loc_FA44
00011512 B042                       		cmp.w	d2,d0
00011514 6500                       		bcs.s	loc_FA58
00011516                            
00011516                            loc_FA44:
00011516 08A9 0003 0022             		bclr	#3,$22(a1)
0001151C 08A8 0003 0022             		bclr	#3,$22(a0)
00011522 4228 0025                  		clr.b	$25(a0)
00011526 7800                       		moveq	#0,d4
00011528 4E75                       		rts	
0001152A                            ; ===========================================================================
0001152A                            
0001152A                            loc_FA58:
0001152A 3404                       		move.w	d4,d2
0001152C 6100 80BA                  		bsr.w	MvSonicOnPtfm
00011530 7800                       		moveq	#0,d4
00011532 4E75                       		rts	
00011534                            ; ===========================================================================
00011534                            
00011534                            SolidObject2F:				; XREF: Obj2F_Solid
00011534 43F8 D000                  		lea	($FFFFD000).w,a1
00011538 4A28 0001                  		tst.b	1(a0)
0001153C 6A00 0000                  		bpl.w	loc_FB92
00011540 3029 0008                  		move.w	8(a1),d0
00011544 9068 0008                  		sub.w	8(a0),d0
00011548 D041                       		add.w	d1,d0
0001154A 6B00 0000                  		bmi.w	loc_FB92
0001154E 3601                       		move.w	d1,d3
00011550 D643                       		add.w	d3,d3
00011552 B043                       		cmp.w	d3,d0
00011554 6200 0000                  		bhi.w	loc_FB92
00011558 3A00                       		move.w	d0,d5
0001155A 0828 0000 0001             		btst	#0,1(a0)
00011560 6700                       		beq.s	loc_FA94
00011562 4645                       		not.w	d5
00011564 DA43                       		add.w	d3,d5
00011566                            
00011566                            loc_FA94:
00011566 E24D                       		lsr.w	#1,d5
00011568 7600                       		moveq	#0,d3
0001156A 1632 5000                  		move.b	(a2,d5.w),d3
0001156E 9612                       		sub.b	(a2),d3
00011570 3A28 000C                  		move.w	$C(a0),d5
00011574 9A43                       		sub.w	d3,d5
00011576 1629 0016                  		move.b	$16(a1),d3
0001157A 4883                       		ext.w	d3
0001157C D443                       		add.w	d3,d2
0001157E 3629 000C                  		move.w	$C(a1),d3
00011582 9645                       		sub.w	d5,d3
00011584 5843                       		addq.w	#4,d3
00011586 D642                       		add.w	d2,d3
00011588 6B00 0000                  		bmi.w	loc_FB92
0001158C 3802                       		move.w	d2,d4
0001158E D844                       		add.w	d4,d4
00011590 B644                       		cmp.w	d4,d3
00011592 6400 0000                  		bcc.w	loc_FB92
00011596 6000 0000                  		bra.w	loc_FB0E
0001159A                            ; ===========================================================================
0001159A                            
0001159A                            loc_FAC8:
0001159A 4A28 0001                  		tst.b	1(a0)
0001159E 6A00 0000                  		bpl.w	loc_FB92
000115A2                            
000115A2                            loc_FAD0:
000115A2 43F8 D000                  		lea	($FFFFD000).w,a1
000115A6 3029 0008                  		move.w	8(a1),d0
000115AA 9068 0008                  		sub.w	8(a0),d0
000115AE D041                       		add.w	d1,d0
000115B0 6B00 0000                  		bmi.w	loc_FB92
000115B4 3601                       		move.w	d1,d3
000115B6 D643                       		add.w	d3,d3
000115B8 B043                       		cmp.w	d3,d0
000115BA 6200 0000                  		bhi.w	loc_FB92
000115BE 1629 0016                  		move.b	$16(a1),d3
000115C2 4883                       		ext.w	d3
000115C4 D443                       		add.w	d3,d2
000115C6 3629 000C                  		move.w	$C(a1),d3
000115CA 9668 000C                  		sub.w	$C(a0),d3
000115CE 5843                       		addq.w	#4,d3
000115D0 D642                       		add.w	d2,d3
000115D2 6B00 0000                  		bmi.w	loc_FB92
000115D6 3802                       		move.w	d2,d4
000115D8 D844                       		add.w	d4,d4
000115DA B644                       		cmp.w	d4,d3
000115DC 6400 0000                  		bcc.w	loc_FB92
000115E0                            
000115E0                            loc_FB0E:
000115E0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000115E4 6B00 0000                  		bmi.w	loc_FB92
000115E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000115EE 6400 0000                  		bcc.w	loc_FB92
000115F2 4A78 FE08                  		tst.w	($FFFFFE08).w
000115F6 6600 0000                  		bne.w	loc_FBAC
000115FA 3A00                       		move.w	d0,d5
000115FC B240                       		cmp.w	d0,d1
000115FE 6400                       		bcc.s	loc_FB36
00011600 D241                       		add.w	d1,d1
00011602 9041                       		sub.w	d1,d0
00011604 3A00                       		move.w	d0,d5
00011606 4445                       		neg.w	d5
00011608                            
00011608                            loc_FB36:
00011608 3203                       		move.w	d3,d1
0001160A B443                       		cmp.w	d3,d2
0001160C 6400                       		bcc.s	loc_FB44
0001160E 5943                       		subq.w	#4,d3
00011610 9644                       		sub.w	d4,d3
00011612 3203                       		move.w	d3,d1
00011614 4441                       		neg.w	d1
00011616                            
00011616                            loc_FB44:
00011616 BA41                       		cmp.w	d1,d5
00011618 6200 0000                  		bhi.w	loc_FBB0
0001161C 0C41 0004                  		cmpi.w	#4,d1
00011620 6300                       		bls.s	loc_FB8C
00011622 4A40                       		tst.w	d0
00011624 6700                       		beq.s	loc_FB70
00011626 6B00                       		bmi.s	loc_FB5E
00011628 4A69 0010                  		tst.w	$10(a1)
0001162C 6B00                       		bmi.s	loc_FB70
0001162E 6000                       		bra.s	loc_FB64
00011630                            ; ===========================================================================
00011630                            
00011630                            loc_FB5E:
00011630 4A69 0010                  		tst.w	$10(a1)
00011634 6A00                       		bpl.s	loc_FB70
00011636                            
00011636                            loc_FB64:
00011636 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001163C 337C 0000 0010             		move.w	#0,$10(a1)
00011642                            
00011642                            loc_FB70:
00011642 9169 0008                  		sub.w	d0,8(a1)
00011646 0829 0001 0022             		btst	#1,$22(a1)
0001164C 6600                       		bne.s	loc_FB8C
0001164E 08E9 0005 0022             		bset	#5,$22(a1)
00011654 08E8 0005 0022             		bset	#5,$22(a0)
0001165A 7801                       		moveq	#1,d4
0001165C 4E75                       		rts	
0001165E                            ; ===========================================================================
0001165E                            
0001165E                            loc_FB8C:
0001165E 6100                       		bsr.s	loc_FBA0
00011660 7801                       		moveq	#1,d4
00011662 4E75                       		rts	
00011664                            ; ===========================================================================
00011664                            
00011664                            loc_FB92:
00011664 0828 0005 0022             		btst	#5,$22(a0)
0001166A 6700                       		beq.s	loc_FBAC
0001166C 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00011672 6700                       		beq.s	loc_FBA0
00011674 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0001167A 6700                       		beq.s	loc_FBA0
0001167C 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
00011682 6700                       		beq.s	loc_FBA0
00011684 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001168A                            
0001168A                            loc_FBA0:
0001168A 08A8 0005 0022             		bclr	#5,$22(a0)
00011690 08A9 0005 0022             		bclr	#5,$22(a1)
00011696                            
00011696                            loc_FBAC:
00011696 7800                       		moveq	#0,d4
00011698 4E75                       		rts	
0001169A                            ; ===========================================================================
0001169A                            
0001169A                            loc_FBB0:
0001169A 4A43                       		tst.w	d3
0001169C 6B00                       		bmi.s	loc_FBBC
0001169E 0C43 0010                  		cmpi.w	#$10,d3
000116A2 6500                       		bcs.s	loc_FBEE
000116A4 60BE                       		bra.s	loc_FB92
000116A6                            ; ===========================================================================
000116A6                            
000116A6                            loc_FBBC:
000116A6 4A69 0012                  		tst.w	$12(a1)
000116AA 6700                       		beq.s	loc_FBD6
000116AC 6A00                       		bpl.s	loc_FBD2
000116AE 4A43                       		tst.w	d3
000116B0 6A00                       		bpl.s	loc_FBD2
000116B2 9769 000C                  		sub.w	d3,$C(a1)
000116B6 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000116BC                            
000116BC                            loc_FBD2:
000116BC 78FF                       		moveq	#-1,d4
000116BE 4E75                       		rts	
000116C0                            ; ===========================================================================
000116C0                            
000116C0                            loc_FBD6:
000116C0 0829 0001 0022             		btst	#1,$22(a1)
000116C6 66F4                       		bne.s	loc_FBD2
000116C8 2F08                       		move.l	a0,-(sp)
000116CA 2049                       		movea.l	a1,a0
000116CC 4EB9 0000 0000             		jsr	KillSonic
000116D2 205F                       		movea.l	(sp)+,a0
000116D4 78FF                       		moveq	#-1,d4
000116D6 4E75                       		rts	
000116D8                            ; ===========================================================================
000116D8                            
000116D8                            loc_FBEE:
000116D8 5943                       		subq.w	#4,d3
000116DA 7200                       		moveq	#0,d1
000116DC 1228 0019                  		move.b	$19(a0),d1
000116E0 3401                       		move.w	d1,d2
000116E2 D442                       		add.w	d2,d2
000116E4 D269 0008                  		add.w	8(a1),d1
000116E8 9268 0008                  		sub.w	8(a0),d1
000116EC 6B00                       		bmi.s	loc_FC28
000116EE B242                       		cmp.w	d2,d1
000116F0 6400                       		bcc.s	loc_FC28
000116F2 4A69 0012                  		tst.w	$12(a1)
000116F6 6B00                       		bmi.s	loc_FC28
000116F8 9769 000C                  		sub.w	d3,$C(a1)
000116FC 5369 000C                  		subq.w	#1,$C(a1)
00011700 6100                       		bsr.s	sub_FC2C
00011702 117C 0002 0025             		move.b	#2,$25(a0)
00011708 08E8 0003 0022             		bset	#3,$22(a0)
0001170E 78FF                       		moveq	#-1,d4
00011710 4E75                       		rts	
00011712                            ; ===========================================================================
00011712                            
00011712                            loc_FC28:
00011712 7800                       		moveq	#0,d4
00011714 4E75                       		rts	
00011716                            ; End of function SolidObject
00011716                            
00011716                            
00011716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011716                            
00011716                            
00011716                            sub_FC2C:				; XREF: SolidObject
00011716 0829 0003 0022             		btst	#3,$22(a1)
0001171C 6700                       		beq.s	loc_FC4E
0001171E 7000                       		moveq	#0,d0
00011720 1029 003D                  		move.b	$3D(a1),d0
00011724 ED48                       		lsl.w	#6,d0
00011726 0680 00FF D000             		addi.l	#$FFD000,d0
0001172C 2440                       		movea.l	d0,a2
0001172E 08AA 0003 0022             		bclr	#3,$22(a2)
00011734 422A 0025                  		clr.b	$25(a2)
00011738                            
00011738                            loc_FC4E:
00011738 3008                       		move.w	a0,d0
0001173A 0440 D000                  		subi.w	#-$3000,d0
0001173E EC48                       		lsr.w	#6,d0
00011740 0240 007F                  		andi.w	#$7F,d0
00011744 1340 003D                  		move.b	d0,$3D(a1)
00011748 137C 0000 0026             		move.b	#0,$26(a1)
0001174E 337C 0000 0012             		move.w	#0,$12(a1)
00011754 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001175A 0829 0001 0022             		btst	#1,$22(a1)
00011760 6700                       		beq.s	loc_FC84
00011762 2F08                       		move.l	a0,-(sp)
00011764 2049                       		movea.l	a1,a0
00011766 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001176C 205F                       		movea.l	(sp)+,a0
0001176E                            
0001176E                            loc_FC84:
0001176E 08E9 0003 0022             		bset	#3,$22(a1)
00011774 08E8 0003 0022             		bset	#3,$22(a0)
0001177A 4E75                       		rts	
0001177C                            ; End of function sub_FC2C
0001177C                            
0001177C                            ; ===========================================================================
0001177C                            ; ---------------------------------------------------------------------------
0001177C                            ; Object 51 - smashable	green block (MZ)
0001177C                            ; ---------------------------------------------------------------------------
0001177C                            
0001177C                            Obj51:					; XREF: Obj_Index
0001177C 7000                       		moveq	#0,d0
0001177E 1028 0024                  		move.b	$24(a0),d0
00011782 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00011786 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001178A 6000 F9F4                  		bra.w	MarkObjGone
0001178E                            ; ===========================================================================
0001178E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011790 0000                       		dc.w Obj51_Solid-Obj51_Index
00011792 0000                       		dc.w Obj51_Display-Obj51_Index
00011794                            ; ===========================================================================
00011794                            
00011794                            Obj51_Main:				; XREF: Obj51_Index
00011794 5428 0024                  		addq.b	#2,$24(a0)
00011798 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000117A0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000117A6 117C 0004 0001             		move.b	#4,1(a0)
000117AC 117C 0010 0019             		move.b	#$10,$19(a0)
000117B2 117C 0004 0018             		move.b	#4,$18(a0)
000117B8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000117BE                            
000117BE                            Obj51_Solid:				; XREF: Obj51_Index
000117BE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000117C4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000117CA 323C 001B                  		move.w	#$1B,d1
000117CE 343C 0010                  		move.w	#$10,d2
000117D2 363C 0011                  		move.w	#$11,d3
000117D6 3828 0008                  		move.w	8(a0),d4
000117DA 6100 FCCC                  		bsr.w	SolidObject
000117DE 0828 0003 0022             		btst	#3,$22(a0)
000117E4 6600                       		bne.s	Obj51_Smash
000117E6                            
000117E6                            locret_FCFC:
000117E6 4E75                       		rts	
000117E8                            ; ===========================================================================
000117E8                            
000117E8                            Obj51_Smash:				; XREF: Obj51_Solid
000117E8                            	;	cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000117E8                            	;	bne.s	locret_FCFC	; if not, branch
000117E8 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000117EE 08E9 0002 0022             		bset	#2,$22(a1)
000117F4 137C 000E 0016             		move.b	#$E,$16(a1)
000117FA 137C 0007 0017             		move.b	#7,$17(a1)
00011800 137C 0002 001C             		move.b	#2,$1C(a1)
00011806 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001180C 08E9 0001 0022             		bset	#1,$22(a1)
00011812 08A9 0003 0022             		bclr	#3,$22(a1)
00011818 137C 0002 0024             		move.b	#2,$24(a1)
0001181E 08A8 0003 0022             		bclr	#3,$22(a0)
00011824 4228 0025                  		clr.b	$25(a0)
00011828 117C 0001 001A             		move.b	#1,$1A(a0)
0001182E 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00011834 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011836 343C 0038                  		move.w	#$38,d2
0001183A 6100 D48C                  		bsr.w	SmashObject
0001183E 6100 DD1E                  		bsr.w	SingleObjLoad
00011842 6600                       		bne.s	Obj51_Display
00011844 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011848 3368 0008 0008             		move.w	8(a0),8(a1)
0001184E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011854 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011858 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001185C 0C42 0006                  		cmpi.w	#6,d2
00011860 6500                       		bcs.s	Obj51_Bonus
00011862 7406                       		moveq	#6,d2
00011864                            
00011864                            Obj51_Bonus:
00011864 7000                       		moveq	#0,d0
00011866 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001186A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00011870 6500                       		bcs.s	loc_FD98	; if not, branch
00011872 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011876 740A                       		moveq	#10,d2
00011878                            
00011878                            loc_FD98:
00011878 4EB9 0000 0000             		jsr	AddPoints
0001187E E24A                       		lsr.w	#1,d2
00011880 1342 001A                  		move.b	d2,$1A(a1)
00011884                            
00011884                            Obj51_Display:				; XREF: Obj51_Index
00011884 6100 D82A                  		bsr.w	SpeedToPos
00011888 0668 0038 0012             		addi.w	#$38,$12(a0)
0001188E 6100 D83A                  		bsr.w	DisplaySprite
00011892 4A28 0001                  		tst.b	1(a0)
00011896 6A00 D86E                  		bpl.w	DeleteObject
0001189A 4E75                       		rts	
0001189C                            ; ===========================================================================
0001189C FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000118A0 FF00 FF00                  		dc.w $FF00, $FF00
000118A4 0200 FE00                  		dc.w $200, $FE00
000118A8 0100 FF00                  		dc.w $100, $FF00
000118AC                            
000118AC 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Sprite mappings - smashable green block (MZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            Map_obj51:
000118B4                            	include "_maps\obj51.asm"
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Sprite mappings - smashable green block (MZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4 0000                       		dc.w byte_FDD8-Map_obj51
000118B6 0000                       		dc.w byte_FDE3-Map_obj51
000118B8 02                         byte_FDD8:	dc.b 2
000118B9 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000118BE 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000118C3 04                         byte_FDE3:	dc.b 4
000118C4 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000118C9 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000118CE F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000118D3 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000118D8                            		even
000118D8                            		even
000118D8                            
000118D8                            ; ===========================================================================
000118D8                            ; ---------------------------------------------------------------------------
000118D8                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000118D8                            ; ---------------------------------------------------------------------------
000118D8                            
000118D8                            Obj52:					; XREF: Obj_Index
000118D8 7000                       		moveq	#0,d0
000118DA 1028 0024                  		move.b	$24(a0),d0
000118DE 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000118E2 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000118E6                            ; ===========================================================================
000118E6 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000118E8 0000                       		dc.w Obj52_Platform-Obj52_Index
000118EA 0000                       		dc.w Obj52_StandOn-Obj52_Index
000118EC                            
000118EC 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000118EE 2001                       		dc.b $20, 1
000118F0 2002                       		dc.b $20, 2
000118F2 4003                       		dc.b $40, 3
000118F4 3004                       		dc.b $30, 4
000118F6                            ; ===========================================================================
000118F6                            
000118F6                            Obj52_Main:				; XREF: Obj52_Index
000118F6 5428 0024                  		addq.b	#2,$24(a0)
000118FA 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00011902 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011908 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001190E 6600                       		bne.s	loc_FE44
00011910 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011918 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001191E 117C 0007 0016             		move.b	#7,$16(a0)
00011924                            
00011924                            loc_FE44:
00011924 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001192A 6600                       		bne.s	loc_FE60
0001192C 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00011932 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011938 6700                       		beq.s	loc_FE60	; if yes, branch
0001193A 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011940                            
00011940                            loc_FE60:
00011940 117C 0004 0001             		move.b	#4,1(a0)
00011946 7000                       		moveq	#0,d0
00011948 1028 0028                  		move.b	$28(a0),d0
0001194C E648                       		lsr.w	#3,d0
0001194E 0240 001E                  		andi.w	#$1E,d0
00011952 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011956 115A 0019                  		move.b	(a2)+,$19(a0)
0001195A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001195E 117C 0004 0018             		move.b	#4,$18(a0)
00011964 3168 0008 0030             		move.w	8(a0),$30(a0)
0001196A 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011970 0228 000F 0028             		andi.b	#$F,$28(a0)
00011976                            
00011976                            Obj52_Platform:				; XREF: Obj52_Index
00011976 6100 0000                  		bsr.w	Obj52_Move
0001197A 7200                       		moveq	#0,d1
0001197C 1228 0019                  		move.b	$19(a0),d1
00011980 4EB9 0000 8F16             		jsr	(PlatformObject).l
00011986 6000                       		bra.s	Obj52_ChkDel
00011988                            ; ===========================================================================
00011988                            
00011988                            Obj52_StandOn:				; XREF: Obj52_Index
00011988 7200                       		moveq	#0,d1
0001198A 1228 0019                  		move.b	$19(a0),d1
0001198E 4EB9 0000 908A             		jsr	(ExitPlatform).l
00011994 3F28 0008                  		move.w	8(a0),-(sp)
00011998 6100 0000                  		bsr.w	Obj52_Move
0001199C 341F                       		move.w	(sp)+,d2
0001199E 4EB9 0000 95F4             		jsr	(MvSonicOnPtfm2).l
000119A4                            
000119A4                            Obj52_ChkDel:				; XREF: Obj52_Platform
000119A4 3028 0030                  		move.w	$30(a0),d0
000119A8 0240 FF80                  		andi.w	#$FF80,d0
000119AC 3238 F700                  		move.w	($FFFFF700).w,d1
000119B0 0441 0080                  		subi.w	#$80,d1
000119B4 0241 FF80                  		andi.w	#$FF80,d1
000119B8 9041                       		sub.w	d1,d0
000119BA 0C40 0280                  		cmpi.w	#$280,d0
000119BE 6200 D746                  		bhi.w	DeleteObject
000119C2 6000 D706                  		bra.w	DisplaySprite
000119C6                            ; ===========================================================================
000119C6                            
000119C6                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000119C6 7000                       		moveq	#0,d0
000119C8 1028 0028                  		move.b	$28(a0),d0
000119CC 0240 000F                  		andi.w	#$F,d0
000119D0 D040                       		add.w	d0,d0
000119D2 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000119D6 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000119DA                            ; ===========================================================================
000119DA 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000119DE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000119E2 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000119E6 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000119EA 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000119EE 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000119F0                            ; ===========================================================================
000119F0                            
000119F0                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000119F0 4E75                       		rts	
000119F2                            ; ===========================================================================
000119F2                            
000119F2                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000119F2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000119F6 323C 0060                  		move.w	#$60,d1
000119FA 0828 0000 0022             		btst	#0,$22(a0)
00011A00 6700                       		beq.s	loc_FF26
00011A02 4440                       		neg.w	d0
00011A04 D041                       		add.w	d1,d0
00011A06                            
00011A06                            loc_FF26:
00011A06 3228 0030                  		move.w	$30(a0),d1
00011A0A 9240                       		sub.w	d0,d1
00011A0C 3141 0008                  		move.w	d1,8(a0)
00011A10 4E75                       		rts	
00011A12                            ; ===========================================================================
00011A12                            
00011A12                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011A12 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011A18 6600                       		bne.s	Obj52_02_Wait
00011A1A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011A1E                            
00011A1E                            Obj52_02_Wait:
00011A1E 4E75                       		rts	
00011A20                            ; ===========================================================================
00011A20                            
00011A20                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011A20 7600                       		moveq	#0,d3
00011A22 1628 0019                  		move.b	$19(a0),d3
00011A26 6100 0000                  		bsr.w	ObjHitWallRight
00011A2A 4A41                       		tst.w	d1		; has the platform hit a wall?
00011A2C 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011A2E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011A32 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A38 4E75                       		rts	
00011A3A                            ; ===========================================================================
00011A3A                            
00011A3A                            Obj52_03_End:
00011A3A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011A3E 4E75                       		rts	
00011A40                            ; ===========================================================================
00011A40                            
00011A40                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011A40 7600                       		moveq	#0,d3
00011A42 1628 0019                  		move.b	$19(a0),d3
00011A46 6100 0000                  		bsr.w	ObjHitWallRight
00011A4A 4A41                       		tst.w	d1		; has the platform hit a wall?
00011A4C 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011A4E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011A52 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A58 4E75                       		rts	
00011A5A                            ; ===========================================================================
00011A5A                            
00011A5A                            Obj52_05_End:
00011A5A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011A5E 4E75                       		rts	
00011A60                            ; ===========================================================================
00011A60                            
00011A60                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011A60 6100 D64E                  		bsr.w	SpeedToPos
00011A64 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011A6A 6100 0000                  		bsr.w	ObjHitFloor
00011A6E 4A41                       		tst.w	d1		; has platform hit the floor?
00011A70 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011A74 D368 000C                  		add.w	d1,$C(a0)
00011A78 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011A7C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011A80                            
00011A80                            locret_FFA0:
00011A80 4E75                       		rts	
00011A82                            ; ===========================================================================
00011A82                            
00011A82                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00011A82 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011A86 6700                       		beq.s	Obj52_07_ChkDel
00011A88 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011A8C                            
00011A8C                            Obj52_07_ChkDel:
00011A8C 588F                       		addq.l	#4,sp
00011A8E 3028 0030                  		move.w	$30(a0),d0
00011A92 0240 FF80                  		andi.w	#$FF80,d0
00011A96 3238 F700                  		move.w	($FFFFF700).w,d1
00011A9A 0441 0080                  		subi.w	#$80,d1
00011A9E 0241 FF80                  		andi.w	#$FF80,d1
00011AA2 9041                       		sub.w	d1,d0
00011AA4 0C40 0280                  		cmpi.w	#$280,d0
00011AA8 6200 D65C                  		bhi.w	DeleteObject
00011AAC 4E75                       		rts	
00011AAE                            ; ===========================================================================
00011AAE                            
00011AAE                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011AAE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011AB2 323C 0080                  		move.w	#$80,d1
00011AB6 0828 0000 0022             		btst	#0,$22(a0)
00011ABC 6700                       		beq.s	loc_FFE2
00011ABE 4440                       		neg.w	d0
00011AC0 D041                       		add.w	d1,d0
00011AC2                            
00011AC2                            loc_FFE2:
00011AC2 3228 0032                  		move.w	$32(a0),d1
00011AC6 9240                       		sub.w	d0,d1
00011AC8 3141 000C                  		move.w	d1,$C(a0)
00011ACC 4E75                       		rts	
00011ACE                            ; ===========================================================================
00011ACE                            
00011ACE                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011ACE 7600                       		moveq	#0,d3
00011AD0 1628 0019                  		move.b	$19(a0),d3
00011AD4 D643                       		add.w	d3,d3
00011AD6 7208                       		moveq	#8,d1
00011AD8 0828 0000 0022             		btst	#0,$22(a0)
00011ADE 6700                       		beq.s	loc_10004
00011AE0 4441                       		neg.w	d1
00011AE2 4443                       		neg.w	d3
00011AE4                            
00011AE4                            loc_10004:
00011AE4 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011AE8 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011AEA 3028 0008                  		move.w	8(a0),d0
00011AEE 9068 0030                  		sub.w	$30(a0),d0
00011AF2 B043                       		cmp.w	d3,d0
00011AF4 6700                       		beq.s	Obj52_0A_Wait
00011AF6 D368 0008                  		add.w	d1,8(a0)	; move platform
00011AFA 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011B00 4E75                       		rts	
00011B02                            ; ===========================================================================
00011B02                            
00011B02                            Obj52_0A_Wait:
00011B02 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011B06 6600                       		bne.s	locret_1002E	; if time remains, branch
00011B08 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011B0E                            
00011B0E                            locret_1002E:
00011B0E 4E75                       		rts	
00011B10                            ; ===========================================================================
00011B10                            
00011B10                            Obj52_0A_Back:
00011B10 3028 0008                  		move.w	8(a0),d0
00011B14 9068 0030                  		sub.w	$30(a0),d0
00011B18 6700                       		beq.s	Obj52_0A_Reset
00011B1A 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011B1E 4E75                       		rts	
00011B20                            ; ===========================================================================
00011B20                            
00011B20                            Obj52_0A_Reset:
00011B20 4268 0036                  		clr.w	$36(a0)
00011B24 5328 0028                  		subq.b	#1,$28(a0)
00011B28 4E75                       		rts	
00011B2A                            ; ===========================================================================
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A                            Map_obj52:
00011B2A                            	include "_maps\obj52mz.asm"
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011B2E 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011B32 0000                       		dc.w byte_1008F-Map_obj52
00011B34 01                         byte_10054:	dc.b 1
00011B35 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011B3A 02                         byte_1005A:	dc.b 2
00011B3B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011B40 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011B45 04                         byte_10065:	dc.b 4
00011B46 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011B4B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011B50 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011B55 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011B5A 04                         byte_1007A:	dc.b 4
00011B5B F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011B60 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011B65 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011B6A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011B6F 03                         byte_1008F:	dc.b 3
00011B70 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011B75 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011B7A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011B80 00                         		even
00011B80 00                         		even
00011B80                            
00011B80                            ; ---------------------------------------------------------------------------
00011B80                            ; Sprite mappings - moving block (LZ)
00011B80                            ; ---------------------------------------------------------------------------
00011B80                            Map_obj52a:
00011B80                            	include "_maps\obj52lz.asm"
00011B80                            ; ---------------------------------------------------------------------------
00011B80                            ; Sprite mappings - moving block (LZ)
00011B80                            ; ---------------------------------------------------------------------------
00011B80 0000                       		dc.w byte_100A2-Map_obj52a
00011B82 01                         byte_100A2:	dc.b 1
00011B83 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011B88                            		even
00011B88                            		even
00011B88                            
00011B88                            ; ===========================================================================
00011B88                            ; ---------------------------------------------------------------------------
00011B88                            ; Object 55 - Basaran enemy (MZ)
00011B88                            ; ---------------------------------------------------------------------------
00011B88                            
00011B88                            Obj55:					; XREF: Obj_Index
00011B88 7000                       		moveq	#0,d0
00011B8A 1028 0024                  		move.b	$24(a0),d0
00011B8E 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011B92 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011B96                            ; ===========================================================================
00011B96 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011B98 0000                       		dc.w Obj55_Action-Obj55_Index
00011B9A                            ; ===========================================================================
00011B9A                            
00011B9A                            Obj55_Main:				; XREF: Obj55_Index
00011B9A 5428 0024                  		addq.b	#2,$24(a0)
00011B9E 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011BA6 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011BAC 117C 0004 0001             		move.b	#4,1(a0)
00011BB2 117C 000C 0016             		move.b	#$C,$16(a0)
00011BB8 117C 0002 0018             		move.b	#2,$18(a0)
00011BBE 117C 000B 0020             		move.b	#$B,$20(a0)
00011BC4 117C 0010 0019             		move.b	#$10,$19(a0)
00011BCA                            
00011BCA                            Obj55_Action:				; XREF: Obj55_Index
00011BCA 7000                       		moveq	#0,d0
00011BCC 1028 0025                  		move.b	$25(a0),d0
00011BD0 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011BD4 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011BD8 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011BDE 6100 A62C                  		bsr.w	AnimateSprite
00011BE2 6000 F59C                  		bra.w	MarkObjGone
00011BE6                            ; ===========================================================================
00011BE6 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011BE8 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011BEA 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011BEC 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011BEE                            ; ===========================================================================
00011BEE                            
00011BEE                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011BEE 343C 0080                  		move.w	#$80,d2
00011BF2 6100 0000                  		bsr.w	Obj55_ChkSonic
00011BF6 6400                       		bcc.s	Obj55_NoDrop
00011BF8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011BFC 3140 0036                  		move.w	d0,$36(a0)
00011C00 9068 000C                  		sub.w	$C(a0),d0
00011C04 6500                       		bcs.s	Obj55_NoDrop
00011C06 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011C0A 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011C0C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011C10 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011C12 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C16 D007                       		add.b	d7,d0
00011C18 0200 0007                  		andi.b	#7,d0
00011C1C 6600                       		bne.s	Obj55_NoDrop
00011C1E 117C 0001 001C             		move.b	#1,$1C(a0)
00011C24 5428 0025                  		addq.b	#2,$25(a0)
00011C28                            
00011C28                            Obj55_NoDrop:
00011C28 4E75                       		rts	
00011C2A                            ; ===========================================================================
00011C2A                            
00011C2A                            Obj55_DropFly:				; XREF: Obj55_Index2
00011C2A 6100 D484                  		bsr.w	SpeedToPos
00011C2E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011C34 343C 0080                  		move.w	#$80,d2
00011C38 6100 0000                  		bsr.w	Obj55_ChkSonic
00011C3C 3028 0036                  		move.w	$36(a0),d0
00011C40 9068 000C                  		sub.w	$C(a0),d0
00011C44 6500                       		bcs.s	Obj55_ChkDel
00011C46 0C40 0010                  		cmpi.w	#$10,d0
00011C4A 6400                       		bcc.s	locret_10180
00011C4C 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011C50 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011C56 117C 0002 001C             		move.b	#2,$1C(a0)
00011C5C 5428 0025                  		addq.b	#2,$25(a0)
00011C60                            
00011C60                            locret_10180:
00011C60 4E75                       		rts	
00011C62                            ; ===========================================================================
00011C62                            
00011C62                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011C62 4A28 0001                  		tst.b	1(a0)
00011C66 6A00 D49E                  		bpl.w	DeleteObject
00011C6A 4E75                       		rts	
00011C6C                            ; ===========================================================================
00011C6C                            
00011C6C                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011C6C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C70 0200 000F                  		andi.b	#$F,d0
00011C74 6600                       		bne.s	loc_101A0
00011C76 303C 00C0                  		move.w	#$C0,d0
00011C7A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flapping sound
00011C80                            
00011C80                            loc_101A0:
00011C80 6100 D42E                  		bsr.w	SpeedToPos
00011C84 3038 D008                  		move.w	($FFFFD008).w,d0
00011C88 9068 0008                  		sub.w	8(a0),d0
00011C8C 6400                       		bcc.s	loc_101B0
00011C8E 4440                       		neg.w	d0
00011C90                            
00011C90                            loc_101B0:
00011C90 0C40 0080                  		cmpi.w	#$80,d0
00011C94 6500                       		bcs.s	locret_101C6
00011C96 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C9A D007                       		add.b	d7,d0
00011C9C 0200 0007                  		andi.b	#7,d0
00011CA0 6600                       		bne.s	locret_101C6
00011CA2 5428 0025                  		addq.b	#2,$25(a0)
00011CA6                            
00011CA6                            locret_101C6:
00011CA6 4E75                       		rts	
00011CA8                            ; ===========================================================================
00011CA8                            
00011CA8                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011CA8 6100 D406                  		bsr.w	SpeedToPos
00011CAC 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011CB2 6100 0000                  		bsr.w	ObjHitCeiling
00011CB6 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011CB8 6A00                       		bpl.s	locret_101F4	; if not, branch
00011CBA 9368 000C                  		sub.w	d1,$C(a0)
00011CBE 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011CC4 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011CC8 4268 0012                  		clr.w	$12(a0)
00011CCC 4228 001C                  		clr.b	$1C(a0)
00011CD0 4228 0025                  		clr.b	$25(a0)
00011CD4                            
00011CD4                            locret_101F4:
00011CD4 4E75                       		rts	
00011CD6                            ; ===========================================================================
00011CD6                            
00011CD6                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011CD6 323C 0100                  		move.w	#$100,d1
00011CDA 08E8 0000 0022             		bset	#0,$22(a0)
00011CE0 3038 D008                  		move.w	($FFFFD008).w,d0
00011CE4 9068 0008                  		sub.w	8(a0),d0
00011CE8 6400                       		bcc.s	loc_10214
00011CEA 4440                       		neg.w	d0
00011CEC 4441                       		neg.w	d1
00011CEE 08A8 0000 0022             		bclr	#0,$22(a0)
00011CF4                            
00011CF4                            loc_10214:
00011CF4 B042                       		cmp.w	d2,d0
00011CF6 4E75                       		rts	
00011CF8                            ; ===========================================================================
00011CF8 6100 D3B6                  		bsr.w	SpeedToPos
00011CFC 6100 D3CC                  		bsr.w	DisplaySprite
00011D00 4A28 0001                  		tst.b	1(a0)
00011D04 6A00 D400                  		bpl.w	DeleteObject
00011D08 4E75                       		rts	
00011D0A                            ; ===========================================================================
00011D0A                            Ani_obj55:
00011D0A                            	include "_anim\obj55.asm"
00011D0A                            ; ---------------------------------------------------------------------------
00011D0A                            ; Animation script - Basaran enemy
00011D0A                            ; ---------------------------------------------------------------------------
00011D0A 0000                       		dc.w byte_10230-Ani_obj55
00011D0C 0000                       		dc.w byte_10234-Ani_obj55
00011D0E 0000                       		dc.w byte_10238-Ani_obj55
00011D10 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011D14 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011D18 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011D1E                            		even
00011D1E                            		even
00011D1E                            
00011D1E                            ; ---------------------------------------------------------------------------
00011D1E                            ; Sprite mappings - Basaran enemy (MZ)
00011D1E                            ; ---------------------------------------------------------------------------
00011D1E                            Map_obj55:
00011D1E                            	include "_maps\obj55.asm"
00011D1E                            ; ---------------------------------------------------------------------------
00011D1E                            ; Sprite mappings - Basaran enemy (MZ)
00011D1E                            ; ---------------------------------------------------------------------------
00011D1E 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011D22 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011D26 01                         byte_10246:	dc.b 1
00011D27 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011D2C 03                         byte_1024C:	dc.b 3
00011D2D F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011D32 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011D37 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011D3C 04                         byte_1025C:	dc.b 4
00011D3D F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011D42 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011D47 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011D4C 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011D51 04                         byte_10271:	dc.b 4
00011D52 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011D57 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011D5C 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011D61 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011D66                            		even
00011D66                            		even
00011D66                            
00011D66                            ; ===========================================================================
00011D66                            ; ---------------------------------------------------------------------------
00011D66                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011D66                            ; ---------------------------------------------------------------------------
00011D66                            
00011D66                            Obj56:					; XREF: Obj_Index
00011D66 7000                       		moveq	#0,d0
00011D68 1028 0024                  		move.b	$24(a0),d0
00011D6C 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011D70 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011D74                            ; ===========================================================================
00011D74 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011D76 0000                       		dc.w Obj56_Action-Obj56_Index
00011D78                            
00011D78 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011D7A 2020                       		dc.b  $20, $20
00011D7C 1020                       		dc.b  $10, $20
00011D7E 201A                       		dc.b  $20, $1A
00011D80 1027                       		dc.b  $10, $27
00011D82 1010                       		dc.b  $10, $10
00011D84 0820                       		dc.b	8, $20
00011D86 4010                       		dc.b  $40, $10
00011D88                            ; ===========================================================================
00011D88                            
00011D88                            Obj56_Main:				; XREF: Obj56_Index
00011D88 5428 0024                  		addq.b	#2,$24(a0)
00011D8C 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011D94 317C 4000 0002             		move.w	#$4000,2(a0)
00011D9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DA0 6600                       		bne.s	loc_102C8
00011DA2 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011DA8                            
00011DA8                            loc_102C8:
00011DA8 117C 0004 0001             		move.b	#4,1(a0)
00011DAE 117C 0003 0018             		move.b	#3,$18(a0)
00011DB4 7000                       		moveq	#0,d0
00011DB6 1028 0028                  		move.b	$28(a0),d0
00011DBA E648                       		lsr.w	#3,d0
00011DBC 0240 000E                  		andi.w	#$E,d0
00011DC0 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011DC4 115A 0019                  		move.b	(a2)+,$19(a0)
00011DC8 1152 0016                  		move.b	(a2),$16(a0)
00011DCC E248                       		lsr.w	#1,d0
00011DCE 1140 001A                  		move.b	d0,$1A(a0)
00011DD2 3168 0008 0034             		move.w	8(a0),$34(a0)
00011DD8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011DDE 7000                       		moveq	#0,d0
00011DE0 1012                       		move.b	(a2),d0
00011DE2 D040                       		add.w	d0,d0
00011DE4 3140 003A                  		move.w	d0,$3A(a0)
00011DE8 7000                       		moveq	#0,d0
00011DEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DF0 6700                       		beq.s	loc_10332
00011DF2 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011DF6 0240 000F                  		andi.w	#$F,d0
00011DFA 5140                       		subq.w	#8,d0
00011DFC 6500                       		bcs.s	loc_10332
00011DFE E548                       		lsl.w	#2,d0
00011E00 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011E04 45F2 0000                  		lea	(a2,d0.w),a2
00011E08 4A52                       		tst.w	(a2)
00011E0A 6A00                       		bpl.s	loc_10332
00011E0C 0868 0000 0022             		bchg	#0,$22(a0)
00011E12                            
00011E12                            loc_10332:
00011E12 1028 0028                  		move.b	$28(a0),d0
00011E16 6A00                       		bpl.s	Obj56_Action
00011E18 0200 000F                  		andi.b	#$F,d0
00011E1C 1140 003C                  		move.b	d0,$3C(a0)
00011E20 117C 0005 0028             		move.b	#5,$28(a0)
00011E26 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011E2C 6600                       		bne.s	Obj56_ChkGone
00011E2E 117C 000C 0028             		move.b	#$C,$28(a0)
00011E34 317C 0080 003A             		move.w	#$80,$3A(a0)
00011E3A                            
00011E3A                            Obj56_ChkGone:
00011E3A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011E3E 7000                       		moveq	#0,d0
00011E40 1028 0023                  		move.b	$23(a0),d0
00011E44 6700                       		beq.s	Obj56_Action
00011E46 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011E4C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00011E52 6700                       		beq.s	Obj56_Action
00011E54 5228 0028                  		addq.b	#1,$28(a0)
00011E58 4268 003A                  		clr.w	$3A(a0)
00011E5C                            
00011E5C                            Obj56_Action:				; XREF: Obj56_Index
00011E5C 3F28 0008                  		move.w	8(a0),-(sp)
00011E60 7000                       		moveq	#0,d0
00011E62 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E66 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011E6A D040                       		add.w	d0,d0
00011E6C 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011E70 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011E74 381F                       		move.w	(sp)+,d4
00011E76 4A28 0001                  		tst.b	1(a0)
00011E7A 6A00                       		bpl.s	Obj56_ChkDel
00011E7C 7200                       		moveq	#0,d1
00011E7E 1228 0019                  		move.b	$19(a0),d1
00011E82 0641 000B                  		addi.w	#$B,d1
00011E86 7400                       		moveq	#0,d2
00011E88 1428 0016                  		move.b	$16(a0),d2
00011E8C 3602                       		move.w	d2,d3
00011E8E 5243                       		addq.w	#1,d3
00011E90 6100 F616                  		bsr.w	SolidObject
00011E94                            
00011E94                            Obj56_ChkDel:
00011E94 3028 0034                  		move.w	$34(a0),d0
00011E98 0240 FF80                  		andi.w	#$FF80,d0
00011E9C 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA0 0441 0080                  		subi.w	#$80,d1
00011EA4 0241 FF80                  		andi.w	#$FF80,d1
00011EA8 9041                       		sub.w	d1,d0
00011EAA 0C40 0280                  		cmpi.w	#$280,d0
00011EAE 6200 D256                  		bhi.w	DeleteObject
00011EB2 6000 D216                  		bra.w	DisplaySprite
00011EB6                            ; ===========================================================================
00011EB6 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011EBA 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011EBE 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011EC2 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011EC6 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011ECA 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011ECE 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011ED2                            ; ===========================================================================
00011ED2                            
00011ED2                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011ED2 4E75                       		rts	
00011ED4                            ; ===========================================================================
00011ED4                            
00011ED4                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011ED4 323C 0040                  		move.w	#$40,d1
00011ED8 7000                       		moveq	#0,d0
00011EDA 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011EDE 6000                       		bra.s	Obj56_Move_LR
00011EE0                            ; ===========================================================================
00011EE0                            
00011EE0                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011EE0 323C 0080                  		move.w	#$80,d1
00011EE4 7000                       		moveq	#0,d0
00011EE6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011EEA                            
00011EEA                            Obj56_Move_LR:
00011EEA 0828 0000 0022             		btst	#0,$22(a0)
00011EF0 6700                       		beq.s	loc_10416
00011EF2 4440                       		neg.w	d0
00011EF4 D041                       		add.w	d1,d0
00011EF6                            
00011EF6                            loc_10416:
00011EF6 3228 0034                  		move.w	$34(a0),d1
00011EFA 9240                       		sub.w	d0,d1
00011EFC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011F00 4E75                       		rts	
00011F02                            ; ===========================================================================
00011F02                            
00011F02                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011F02 323C 0040                  		move.w	#$40,d1
00011F06 7000                       		moveq	#0,d0
00011F08 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011F0C 6000                       		bra.s	Obj56_Move_UD
00011F0E                            ; ===========================================================================
00011F0E                            
00011F0E                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011F0E 323C 0080                  		move.w	#$80,d1
00011F12 7000                       		moveq	#0,d0
00011F14 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011F18                            
00011F18                            Obj56_Move_UD:
00011F18 0828 0000 0022             		btst	#0,$22(a0)
00011F1E 6700                       		beq.s	loc_10444
00011F20 4440                       		neg.w	d0
00011F22 D041                       		add.w	d1,d0
00011F24                            
00011F24                            loc_10444:
00011F24 3228 0030                  		move.w	$30(a0),d1
00011F28 9240                       		sub.w	d0,d1
00011F2A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011F2E 4E75                       		rts	
00011F30                            ; ===========================================================================
00011F30                            
00011F30                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011F30 4A28 0038                  		tst.b	$38(a0)
00011F34 6600                       		bne.s	loc_104A4
00011F36 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011F3C 6600                       		bne.s	loc_1047A	; if not, branch
00011F3E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011F44 6600                       		bne.s	loc_1047A
00011F46 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F4A 3038 D008                  		move.w	($FFFFD008).w,d0
00011F4E B068 0008                  		cmp.w	8(a0),d0
00011F52 6400                       		bcc.s	loc_1047A
00011F54 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011F5A                            
00011F5A                            loc_1047A:
00011F5A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011F5E 7000                       		moveq	#0,d0
00011F60 1028 003C                  		move.b	$3C(a0),d0
00011F64 0832 0000 0000             		btst	#0,(a2,d0.w)
00011F6A 6700                       		beq.s	loc_104AE
00011F6C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011F72 6600                       		bne.s	loc_1049E	; if not, branch
00011F74 0C00 0003                  		cmpi.b	#3,d0
00011F78 6600                       		bne.s	loc_1049E
00011F7A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F7E                            
00011F7E                            loc_1049E:
00011F7E 117C 0001 0038             		move.b	#1,$38(a0)
00011F84                            
00011F84                            loc_104A4:
00011F84 4A68 003A                  		tst.w	$3A(a0)
00011F88 6700                       		beq.s	loc_104C8
00011F8A 5568 003A                  		subq.w	#2,$3A(a0)
00011F8E                            
00011F8E                            loc_104AE:
00011F8E 3028 003A                  		move.w	$3A(a0),d0
00011F92 0828 0000 0022             		btst	#0,$22(a0)
00011F98 6700                       		beq.s	loc_104BC
00011F9A 4440                       		neg.w	d0
00011F9C                            
00011F9C                            loc_104BC:
00011F9C 3228 0030                  		move.w	$30(a0),d1
00011FA0 D240                       		add.w	d0,d1
00011FA2 3141 000C                  		move.w	d1,$C(a0)
00011FA6 4E75                       		rts	
00011FA8                            ; ===========================================================================
00011FA8                            
00011FA8                            loc_104C8:
00011FA8 5228 0028                  		addq.b	#1,$28(a0)
00011FAC 4228 0038                  		clr.b	$38(a0)
00011FB0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011FB4 7000                       		moveq	#0,d0
00011FB6 1028 0023                  		move.b	$23(a0),d0
00011FBA 67D2                       		beq.s	loc_104AE
00011FBC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011FC2 60CA                       		bra.s	loc_104AE
00011FC4                            ; ===========================================================================
00011FC4                            
00011FC4                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011FC4 4A28 0038                  		tst.b	$38(a0)
00011FC8 6600                       		bne.s	loc_10500
00011FCA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011FCE 7000                       		moveq	#0,d0
00011FD0 1028 003C                  		move.b	$3C(a0),d0
00011FD4 4A32 0000                  		tst.b	(a2,d0.w)
00011FD8 6A00                       		bpl.s	loc_10512
00011FDA 117C 0001 0038             		move.b	#1,$38(a0)
00011FE0                            
00011FE0                            loc_10500:
00011FE0 7000                       		moveq	#0,d0
00011FE2 1028 0016                  		move.b	$16(a0),d0
00011FE6 D040                       		add.w	d0,d0
00011FE8 B068 003A                  		cmp.w	$3A(a0),d0
00011FEC 6700                       		beq.s	loc_1052C
00011FEE 5468 003A                  		addq.w	#2,$3A(a0)
00011FF2                            
00011FF2                            loc_10512:
00011FF2 3028 003A                  		move.w	$3A(a0),d0
00011FF6 0828 0000 0022             		btst	#0,$22(a0)
00011FFC 6700                       		beq.s	loc_10520
00011FFE 4440                       		neg.w	d0
00012000                            
00012000                            loc_10520:
00012000 3228 0030                  		move.w	$30(a0),d1
00012004 D240                       		add.w	d0,d1
00012006 3141 000C                  		move.w	d1,$C(a0)
0001200A 4E75                       		rts	
0001200C                            ; ===========================================================================
0001200C                            
0001200C                            loc_1052C:
0001200C 5328 0028                  		subq.b	#1,$28(a0)
00012010 4228 0038                  		clr.b	$38(a0)
00012014 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012018 7000                       		moveq	#0,d0
0001201A 1028 0023                  		move.b	$23(a0),d0
0001201E 67D2                       		beq.s	loc_10512
00012020 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012026 60CA                       		bra.s	loc_10512
00012028                            ; ===========================================================================
00012028                            
00012028                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00012028 4A28 0038                  		tst.b	$38(a0)
0001202C 6600                       		bne.s	loc_1055E
0001202E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00012032 6700                       		beq.s	locret_10578
00012034 117C 0001 0038             		move.b	#1,$38(a0)
0001203A 4268 003A                  		clr.w	$3A(a0)
0001203E                            
0001203E                            loc_1055E:
0001203E 5268 0008                  		addq.w	#1,8(a0)
00012042 3168 0008 0034             		move.w	8(a0),$34(a0)
00012048 5268 003A                  		addq.w	#1,$3A(a0)
0001204C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00012052 6600                       		bne.s	locret_10578
00012054 4228 0028                  		clr.b	$28(a0)
00012058                            
00012058                            locret_10578:
00012058 4E75                       		rts	
0001205A                            ; ===========================================================================
0001205A                            
0001205A                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001205A 4A28 0038                  		tst.b	$38(a0)
0001205E 6600                       		bne.s	loc_10598
00012060 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012064 7000                       		moveq	#0,d0
00012066 1028 003C                  		move.b	$3C(a0),d0
0001206A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012070 6700                       		beq.s	loc_105A2
00012072 117C 0001 0038             		move.b	#1,$38(a0)
00012078                            
00012078                            loc_10598:
00012078 4A68 003A                  		tst.w	$3A(a0)
0001207C 6700                       		beq.s	loc_105C0
0001207E 5568 003A                  		subq.w	#2,$3A(a0)
00012082                            
00012082                            loc_105A2:
00012082 3028 003A                  		move.w	$3A(a0),d0
00012086 0828 0000 0022             		btst	#0,$22(a0)
0001208C 6700                       		beq.s	loc_105B4
0001208E 4440                       		neg.w	d0
00012090 0640 0080                  		addi.w	#$80,d0
00012094                            
00012094                            loc_105B4:
00012094 3228 0034                  		move.w	$34(a0),d1
00012098 D240                       		add.w	d0,d1
0001209A 3141 0008                  		move.w	d1,8(a0)
0001209E 4E75                       		rts	
000120A0                            ; ===========================================================================
000120A0                            
000120A0                            loc_105C0:
000120A0 5228 0028                  		addq.b	#1,$28(a0)
000120A4 4228 0038                  		clr.b	$38(a0)
000120A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000120AC 7000                       		moveq	#0,d0
000120AE 1028 0023                  		move.b	$23(a0),d0
000120B2 67CE                       		beq.s	loc_105A2
000120B4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000120BA 60C6                       		bra.s	loc_105A2
000120BC                            ; ===========================================================================
000120BC                            
000120BC                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000120BC 4A28 0038                  		tst.b	$38(a0)
000120C0 6600                       		bne.s	loc_105F8
000120C2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000120C6 7000                       		moveq	#0,d0
000120C8 1028 003C                  		move.b	$3C(a0),d0
000120CC 4A32 0000                  		tst.b	(a2,d0.w)
000120D0 6A00                       		bpl.s	loc_10606
000120D2 117C 0001 0038             		move.b	#1,$38(a0)
000120D8                            
000120D8                            loc_105F8:
000120D8 303C 0080                  		move.w	#$80,d0
000120DC B068 003A                  		cmp.w	$3A(a0),d0
000120E0 6700                       		beq.s	loc_10624
000120E2 5468 003A                  		addq.w	#2,$3A(a0)
000120E6                            
000120E6                            loc_10606:
000120E6 3028 003A                  		move.w	$3A(a0),d0
000120EA 0828 0000 0022             		btst	#0,$22(a0)
000120F0 6700                       		beq.s	loc_10618
000120F2 4440                       		neg.w	d0
000120F4 0640 0080                  		addi.w	#$80,d0
000120F8                            
000120F8                            loc_10618:
000120F8 3228 0034                  		move.w	$34(a0),d1
000120FC D240                       		add.w	d0,d1
000120FE 3141 0008                  		move.w	d1,8(a0)
00012102 4E75                       		rts	
00012104                            ; ===========================================================================
00012104                            
00012104                            loc_10624:
00012104 5328 0028                  		subq.b	#1,$28(a0)
00012108 4228 0038                  		clr.b	$38(a0)
0001210C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012110 7000                       		moveq	#0,d0
00012112 1028 0023                  		move.b	$23(a0),d0
00012116 67CE                       		beq.s	loc_10606
00012118 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001211E 60C6                       		bra.s	loc_10606
00012120                            ; ===========================================================================
00012120                            
00012120                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00012120 323C 0010                  		move.w	#$10,d1
00012124 7000                       		moveq	#0,d0
00012126 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001212A E248                       		lsr.w	#1,d0
0001212C 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00012130 6000                       		bra.s	Obj56_Move_Sqr
00012132                            ; ===========================================================================
00012132                            
00012132                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00012132 323C 0030                  		move.w	#$30,d1
00012136 7000                       		moveq	#0,d0
00012138 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001213C 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00012140 6000                       		bra.s	Obj56_Move_Sqr
00012142                            ; ===========================================================================
00012142                            
00012142                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00012142 323C 0050                  		move.w	#$50,d1
00012146 7000                       		moveq	#0,d0
00012148 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001214C 3638 FE92                  		move.w	($FFFFFE92).w,d3
00012150 6000                       		bra.s	Obj56_Move_Sqr
00012152                            ; ===========================================================================
00012152                            
00012152                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00012152 323C 0070                  		move.w	#$70,d1
00012156 7000                       		moveq	#0,d0
00012158 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001215C 3638 FE96                  		move.w	($FFFFFE96).w,d3
00012160                            
00012160                            Obj56_Move_Sqr:
00012160 4A43                       		tst.w	d3
00012162 6600                       		bne.s	loc_1068E
00012164 5228 0022                  		addq.b	#1,$22(a0)
00012168 0228 0003 0022             		andi.b	#3,$22(a0)
0001216E                            
0001216E                            loc_1068E:
0001216E 1428 0022                  		move.b	$22(a0),d2
00012172 0202 0003                  		andi.b	#3,d2
00012176 6600                       		bne.s	loc_106AE
00012178 9041                       		sub.w	d1,d0
0001217A D068 0034                  		add.w	$34(a0),d0
0001217E 3140 0008                  		move.w	d0,8(a0)
00012182 4441                       		neg.w	d1
00012184 D268 0030                  		add.w	$30(a0),d1
00012188 3141 000C                  		move.w	d1,$C(a0)
0001218C 4E75                       		rts	
0001218E                            ; ===========================================================================
0001218E                            
0001218E                            loc_106AE:
0001218E 5302                       		subq.b	#1,d2
00012190 6600                       		bne.s	loc_106CC
00012192 5341                       		subq.w	#1,d1
00012194 9041                       		sub.w	d1,d0
00012196 4440                       		neg.w	d0
00012198 D068 0030                  		add.w	$30(a0),d0
0001219C 3140 000C                  		move.w	d0,$C(a0)
000121A0 5241                       		addq.w	#1,d1
000121A2 D268 0034                  		add.w	$34(a0),d1
000121A6 3141 0008                  		move.w	d1,8(a0)
000121AA 4E75                       		rts	
000121AC                            ; ===========================================================================
000121AC                            
000121AC                            loc_106CC:
000121AC 5302                       		subq.b	#1,d2
000121AE 6600                       		bne.s	loc_106EA
000121B0 5341                       		subq.w	#1,d1
000121B2 9041                       		sub.w	d1,d0
000121B4 4440                       		neg.w	d0
000121B6 D068 0034                  		add.w	$34(a0),d0
000121BA 3140 0008                  		move.w	d0,8(a0)
000121BE 5241                       		addq.w	#1,d1
000121C0 D268 0030                  		add.w	$30(a0),d1
000121C4 3141 000C                  		move.w	d1,$C(a0)
000121C8 4E75                       		rts	
000121CA                            ; ===========================================================================
000121CA                            
000121CA                            loc_106EA:
000121CA 9041                       		sub.w	d1,d0
000121CC D068 0030                  		add.w	$30(a0),d0
000121D0 3140 000C                  		move.w	d0,$C(a0)
000121D4 4441                       		neg.w	d1
000121D6 D268 0034                  		add.w	$34(a0),d1
000121DA 3141 0008                  		move.w	d1,8(a0)
000121DE 4E75                       		rts	
000121E0                            ; ===========================================================================
000121E0                            ; ---------------------------------------------------------------------------
000121E0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000121E0                            ; ---------------------------------------------------------------------------
000121E0                            Map_obj56:
000121E0                            	include "_maps\obj56.asm"
000121E0                            ; ---------------------------------------------------------------------------
000121E0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000121E0                            ; ---------------------------------------------------------------------------
000121E0 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000121E4 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000121E8 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000121EC 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000121F0 01                         byte_10710:	dc.b 1
000121F1 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000121F6 04                         byte_10716:	dc.b 4
000121F7 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000121FC E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012201 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012206 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001220B 02                         byte_1072B:	dc.b 2
0001220C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00012211 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012216 04                         byte_10736:	dc.b 4
00012217 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001221C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012221 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012226 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001222B 03                         byte_1074B:	dc.b 3
0001222C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00012231 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012236 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001223B 01                         byte_1075B:	dc.b 1
0001223C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012241 02                         byte_10761:	dc.b 2
00012242 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012247 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001224C 04                         byte_1076C:	dc.b 4
0001224D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00012252 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012257 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001225C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012262 00                         		even
00012262 00                         		even
00012262                            
00012262                            ; ===========================================================================
00012262                            ; ---------------------------------------------------------------------------
00012262                            ; Object 57 - spiked balls (SYZ, LZ)
00012262                            ; ---------------------------------------------------------------------------
00012262                            
00012262                            Obj57:					; XREF: Obj_Index
00012262 7000                       		moveq	#0,d0
00012264 1028 0024                  		move.b	$24(a0),d0
00012268 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001226C 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00012270                            ; ===========================================================================
00012270 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00012272 0000                       		dc.w Obj57_Move-Obj57_Index
00012274 0000                       		dc.w Obj57_Display-Obj57_Index
00012276                            ; ===========================================================================
00012276                            
00012276                            Obj57_Main:				; XREF: Obj57_Index
00012276 5428 0024                  		addq.b	#2,$24(a0)
0001227A 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00012282 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012288 117C 0004 0001             		move.b	#4,1(a0)
0001228E 117C 0004 0018             		move.b	#4,$18(a0)
00012294 117C 0008 0019             		move.b	#8,$19(a0)
0001229A 3168 0008 003A             		move.w	8(a0),$3A(a0)
000122A0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000122A6 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000122AC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122B2 6600                       		bne.s	loc_107E8
000122B4 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000122BA 317C 0310 0002             		move.w	#$310,2(a0)
000122C0 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000122C8                            
000122C8                            loc_107E8:
000122C8 1228 0028                  		move.b	$28(a0),d1	; get object type
000122CC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000122D0 4881                       		ext.w	d1
000122D2 E741                       		asl.w	#3,d1		; multiply by 8
000122D4 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000122D8 1028 0022                  		move.b	$22(a0),d0
000122DC E418                       		ror.b	#2,d0
000122DE 0200 00C0                  		andi.b	#-$40,d0
000122E2 1140 0026                  		move.b	d0,$26(a0)
000122E6 45E8 0029                  		lea	$29(a0),a2
000122EA 1228 0028                  		move.b	$28(a0),d1	; get object type
000122EE 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000122F2 14FC 0000                  		move.b	#0,(a2)+
000122F6 3601                       		move.w	d1,d3
000122F8 E94B                       		lsl.w	#4,d3
000122FA 1143 003C                  		move.b	d3,$3C(a0)
000122FE 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012300 6500                       		bcs.s	loc_10894
00012302 0828 0003 0028             		btst	#3,$28(a0)
00012308 6700                       		beq.s	Obj57_MakeChain
0001230A 5341                       		subq.w	#1,d1
0001230C 6500                       		bcs.s	loc_10894
0001230E                            
0001230E                            Obj57_MakeChain:
0001230E 6100 D24E                  		bsr.w	SingleObjLoad
00012312 6600                       		bne.s	loc_10894
00012314 5228 0029                  		addq.b	#1,$29(a0)
00012318 3A09                       		move.w	a1,d5
0001231A 0445 D000                  		subi.w	#-$3000,d5
0001231E EC4D                       		lsr.w	#6,d5
00012320 0245 007F                  		andi.w	#$7F,d5
00012324 14C5                       		move.b	d5,(a2)+
00012326 137C 0004 0024             		move.b	#4,$24(a1)
0001232C 1290                       		move.b	0(a0),0(a1)
0001232E 2368 0004 0004             		move.l	4(a0),4(a1)
00012334 3368 0002 0002             		move.w	2(a0),2(a1)
0001233A 1368 0001 0001             		move.b	1(a0),1(a1)
00012340 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012346 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001234C 1368 0020 0020             		move.b	$20(a0),$20(a1)
00012352 0403 0010                  		subi.b	#$10,d3
00012356 1343 003C                  		move.b	d3,$3C(a1)
0001235A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012360 6600                       		bne.s	loc_10890
00012362 4A03                       		tst.b	d3
00012364 6600                       		bne.s	loc_10890
00012366 137C 0002 001A             		move.b	#2,$1A(a1)
0001236C                            
0001236C                            loc_10890:
0001236C 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012370                            
00012370                            loc_10894:
00012370 3A08                       		move.w	a0,d5
00012372 0445 D000                  		subi.w	#-$3000,d5
00012376 EC4D                       		lsr.w	#6,d5
00012378 0245 007F                  		andi.w	#$7F,d5
0001237C 14C5                       		move.b	d5,(a2)+
0001237E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012384 6600                       		bne.s	Obj57_Move
00012386 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001238C 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00012392                            
00012392                            Obj57_Move:				; XREF: Obj57_Index
00012392 6100 0000                  		bsr.w	Obj57_MoveSub
00012396 6000 0000                  		bra.w	Obj57_ChkDel
0001239A                            ; ===========================================================================
0001239A                            
0001239A                            Obj57_MoveSub:				; XREF: Obj57_Move
0001239A 3028 003E                  		move.w	$3E(a0),d0
0001239E D168 0026                  		add.w	d0,$26(a0)
000123A2 1028 0026                  		move.b	$26(a0),d0
000123A6 4EB9 0000 2B7C             		jsr	(CalcSine).l
000123AC 3428 0038                  		move.w	$38(a0),d2
000123B0 3628 003A                  		move.w	$3A(a0),d3
000123B4 45E8 0029                  		lea	$29(a0),a2
000123B8 7C00                       		moveq	#0,d6
000123BA 1C1A                       		move.b	(a2)+,d6
000123BC                            
000123BC                            Obj57_MoveLoop:
000123BC 7800                       		moveq	#0,d4
000123BE 181A                       		move.b	(a2)+,d4
000123C0 ED4C                       		lsl.w	#6,d4
000123C2 0684 00FF D000             		addi.l	#$FFD000,d4
000123C8 2244                       		movea.l	d4,a1
000123CA 7800                       		moveq	#0,d4
000123CC 1829 003C                  		move.b	$3C(a1),d4
000123D0 2A04                       		move.l	d4,d5
000123D2 C9C0                       		muls.w	d0,d4
000123D4 E084                       		asr.l	#8,d4
000123D6 CBC1                       		muls.w	d1,d5
000123D8 E085                       		asr.l	#8,d5
000123DA D842                       		add.w	d2,d4
000123DC DA43                       		add.w	d3,d5
000123DE 3344 000C                  		move.w	d4,$C(a1)
000123E2 3345 0008                  		move.w	d5,8(a1)
000123E6 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000123EA 4E75                       		rts	
000123EC                            ; ===========================================================================
000123EC                            
000123EC                            Obj57_ChkDel:				; XREF: Obj57_Move
000123EC 3028 003A                  		move.w	$3A(a0),d0
000123F0 0240 FF80                  		andi.w	#$FF80,d0
000123F4 3238 F700                  		move.w	($FFFFF700).w,d1
000123F8 0441 0080                  		subi.w	#$80,d1
000123FC 0241 FF80                  		andi.w	#$FF80,d1
00012400 9041                       		sub.w	d1,d0
00012402 0C40 0280                  		cmpi.w	#$280,d0
00012406 6200 0000                  		bhi.w	Obj57_Delete
0001240A 6000 CCBE                  		bra.w	DisplaySprite
0001240E                            ; ===========================================================================
0001240E                            
0001240E                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001240E 7400                       		moveq	#0,d2
00012410 45E8 0029                  		lea	$29(a0),a2
00012414 141A                       		move.b	(a2)+,d2
00012416                            
00012416                            Obj57_DelLoop:
00012416 7000                       		moveq	#0,d0
00012418 101A                       		move.b	(a2)+,d0
0001241A ED48                       		lsl.w	#6,d0
0001241C 0680 00FF D000             		addi.l	#$FFD000,d0
00012422 2240                       		movea.l	d0,a1
00012424 6100 CCE2                  		bsr.w	DeleteObject2
00012428 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001242C                            
0001242C 4E75                       		rts	
0001242E                            ; ===========================================================================
0001242E                            
0001242E                            Obj57_Display:				; XREF: Obj57_Index
0001242E 6000 CC9A                  		bra.w	DisplaySprite
00012432                            ; ===========================================================================
00012432                            ; ---------------------------------------------------------------------------
00012432                            ; Sprite mappings - chain of spiked balls (SYZ)
00012432                            ; ---------------------------------------------------------------------------
00012432                            Map_obj57:
00012432                            	include "_maps\obj57syz.asm"
00012432                            ; ---------------------------------------------------------------------------
00012432                            ; Sprite mappings - chain of spiked balls (SYZ)
00012432                            ; ---------------------------------------------------------------------------
00012432 0000                       		dc.w byte_10958-Map_obj57
00012434 01                         byte_10958:	dc.b 1
00012435 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001243A                            		even
0001243A                            		even
0001243A                            
0001243A                            ; ---------------------------------------------------------------------------
0001243A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001243A                            ; ---------------------------------------------------------------------------
0001243A                            Map_obj57a:
0001243A                            	include "_maps\obj57lz.asm"
0001243A                            ; ---------------------------------------------------------------------------
0001243A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001243A                            ; ---------------------------------------------------------------------------
0001243A 0000                       		dc.w byte_10964-Map_obj57a
0001243C 0000                       		dc.w byte_1096A-Map_obj57a
0001243E 0000                       		dc.w byte_10970-Map_obj57a
00012440 01                         byte_10964:	dc.b 1
00012441 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012446 01                         byte_1096A:	dc.b 1
00012447 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001244C 01                         byte_10970:	dc.b 1
0001244D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012452                            		even
00012452                            		even
00012452                            
00012452                            ; ===========================================================================
00012452                            ; ---------------------------------------------------------------------------
00012452                            ; Object 58 - giant spiked balls (SYZ)
00012452                            ; ---------------------------------------------------------------------------
00012452                            
00012452                            Obj58:					; XREF: Obj_Index
00012452 7000                       		moveq	#0,d0
00012454 1028 0024                  		move.b	$24(a0),d0
00012458 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001245C 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012460                            ; ===========================================================================
00012460 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012462 0000                       		dc.w Obj58_Move-Obj58_Index
00012464                            ; ===========================================================================
00012464                            
00012464                            Obj58_Main:				; XREF: Obj58_Index
00012464 5428 0024                  		addq.b	#2,$24(a0)
00012468 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012470 317C 0396 0002             		move.w	#$396,2(a0)
00012476 117C 0004 0001             		move.b	#4,1(a0)
0001247C 117C 0004 0018             		move.b	#4,$18(a0)
00012482 117C 0018 0019             		move.b	#$18,$19(a0)
00012488 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001248E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012494 117C 0086 0020             		move.b	#$86,$20(a0)
0001249A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001249E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000124A2 4881                       		ext.w	d1
000124A4 E741                       		asl.w	#3,d1		; multiply by 8
000124A6 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000124AA 1028 0022                  		move.b	$22(a0),d0
000124AE E418                       		ror.b	#2,d0
000124B0 0200 00C0                  		andi.b	#$C0,d0
000124B4 1140 0026                  		move.b	d0,$26(a0)
000124B8 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000124BE                            
000124BE                            Obj58_Move:				; XREF: Obj58_Index
000124BE 7000                       		moveq	#0,d0
000124C0 1028 0028                  		move.b	$28(a0),d0	; get object type
000124C4 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000124C8 D040                       		add.w	d0,d0
000124CA 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000124CE 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000124D2 3028 003A                  		move.w	$3A(a0),d0
000124D6 0240 FF80                  		andi.w	#$FF80,d0
000124DA 3238 F700                  		move.w	($FFFFF700).w,d1
000124DE 0441 0080                  		subi.w	#$80,d1
000124E2 0241 FF80                  		andi.w	#$FF80,d1
000124E6 9041                       		sub.w	d1,d0
000124E8 0C40 0280                  		cmpi.w	#$280,d0
000124EC 6200 CC18                  		bhi.w	DeleteObject
000124F0 6000 CBD8                  		bra.w	DisplaySprite
000124F4                            ; ===========================================================================
000124F4 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000124F6 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000124F8 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000124FA 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000124FC                            ; ===========================================================================
000124FC                            
000124FC                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000124FC 4E75                       		rts	
000124FE                            ; ===========================================================================
000124FE                            
000124FE                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000124FE 323C 0060                  		move.w	#$60,d1
00012502 7000                       		moveq	#0,d0
00012504 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012508 0828 0000 0022             		btst	#0,$22(a0)
0001250E 6700                       		beq.s	loc_10A38
00012510 4440                       		neg.w	d0
00012512 D041                       		add.w	d1,d0
00012514                            
00012514                            loc_10A38:
00012514 3228 003A                  		move.w	$3A(a0),d1
00012518 9240                       		sub.w	d0,d1
0001251A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001251E 4E75                       		rts	
00012520                            ; ===========================================================================
00012520                            
00012520                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00012520 323C 0060                  		move.w	#$60,d1
00012524 7000                       		moveq	#0,d0
00012526 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001252A 0828 0000 0022             		btst	#0,$22(a0)
00012530 6700                       		beq.s	loc_10A5C
00012532 4440                       		neg.w	d0
00012534 0640 0080                  		addi.w	#$80,d0
00012538                            
00012538                            loc_10A5C:
00012538 3228 0038                  		move.w	$38(a0),d1
0001253C 9240                       		sub.w	d0,d1
0001253E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012542 4E75                       		rts	
00012544                            ; ===========================================================================
00012544                            
00012544                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012544 3028 003E                  		move.w	$3E(a0),d0
00012548 D168 0026                  		add.w	d0,$26(a0)
0001254C 1028 0026                  		move.b	$26(a0),d0
00012550 4EB9 0000 2B7C             		jsr	(CalcSine).l
00012556 3428 0038                  		move.w	$38(a0),d2
0001255A 3628 003A                  		move.w	$3A(a0),d3
0001255E 7800                       		moveq	#0,d4
00012560 1828 003C                  		move.b	$3C(a0),d4
00012564 2A04                       		move.l	d4,d5
00012566 C9C0                       		muls.w	d0,d4
00012568 E084                       		asr.l	#8,d4
0001256A CBC1                       		muls.w	d1,d5
0001256C E085                       		asr.l	#8,d5
0001256E D842                       		add.w	d2,d4
00012570 DA43                       		add.w	d3,d5
00012572 3144 000C                  		move.w	d4,$C(a0)
00012576 3145 0008                  		move.w	d5,8(a0)
0001257A 4E75                       		rts	
0001257C                            ; ===========================================================================
0001257C                            ; ---------------------------------------------------------------------------
0001257C                            ; Sprite mappings - SBZ	spiked ball on a chain
0001257C                            ; ---------------------------------------------------------------------------
0001257C                            Map_obj15b:
0001257C                            	include "_maps\obj15sbz.asm"
0001257C                            ; ---------------------------------------------------------------------------
0001257C                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001257C                            ; ---------------------------------------------------------------------------
0001257C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00012580 0000                       		dc.w byte_10AC6-Map_obj15b
00012582 05                         byte_10AA6:	dc.b 5
00012583 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00012588 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001258D F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00012592 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00012597 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001259C 01                         byte_10AC0:	dc.b 1
0001259D F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000125A2 02                         byte_10AC6:	dc.b 2
000125A3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000125A8 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000125AE 00                         		even
000125AE 00                         		even
000125AE                            
000125AE                            ; ===========================================================================
000125AE                            ; ---------------------------------------------------------------------------
000125AE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000125AE                            ; ---------------------------------------------------------------------------
000125AE                            
000125AE                            Obj59:					; XREF: Obj_Index
000125AE 7000                       		moveq	#0,d0
000125B0 1028 0024                  		move.b	$24(a0),d0
000125B4 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000125B8 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000125BC 3028 0032                  		move.w	$32(a0),d0
000125C0 0240 FF80                  		andi.w	#$FF80,d0
000125C4 3238 F700                  		move.w	($FFFFF700).w,d1
000125C8 0441 0080                  		subi.w	#$80,d1
000125CC 0241 FF80                  		andi.w	#$FF80,d1
000125D0 9041                       		sub.w	d1,d0
000125D2 0C40 0280                  		cmpi.w	#$280,d0
000125D6 6200 CB2E                  		bhi.w	DeleteObject
000125DA 6000 CAEE                  		bra.w	DisplaySprite
000125DE                            ; ===========================================================================
000125DE 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000125E0 0000                       		dc.w Obj59_Platform-Obj59_Index
000125E2 0000                       		dc.w Obj59_Action-Obj59_Index
000125E4 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000125E6                            
000125E6 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000125E8                            
000125E8 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000125EA 2001                       		dc.b $20, 1
000125EC 3401                       		dc.b $34, 1
000125EE 1003                       		dc.b $10, 3
000125F0 2003                       		dc.b $20, 3
000125F2 3403                       		dc.b $34, 3
000125F4 1401                       		dc.b $14, 1
000125F6 2401                       		dc.b $24, 1
000125F8 2C01                       		dc.b $2C, 1
000125FA 1403                       		dc.b $14, 3
000125FC 2403                       		dc.b $24, 3
000125FE 2C03                       		dc.b $2C, 3
00012600 2005                       		dc.b $20, 5
00012602 2007                       		dc.b $20, 7
00012604 3009                       		dc.b $30, 9
00012606                            ; ===========================================================================
00012606                            
00012606                            Obj59_Main:				; XREF: Obj59_Index
00012606 5428 0024                  		addq.b	#2,$24(a0)
0001260A 7000                       		moveq	#0,d0
0001260C 1028 0028                  		move.b	$28(a0),d0
00012610 6A00                       		bpl.s	Obj59_Main2
00012612 5828 0024                  		addq.b	#4,$24(a0)
00012616 0240 007F                  		andi.w	#$7F,d0
0001261A C0FC 0006                  		mulu.w	#6,d0
0001261E 3140 003C                  		move.w	d0,$3C(a0)
00012622 3140 003E                  		move.w	d0,$3E(a0)
00012626 588F                       		addq.l	#4,sp
00012628 4E75                       		rts	
0001262A                            ; ===========================================================================
0001262A                            
0001262A                            Obj59_Main2:
0001262A E648                       		lsr.w	#3,d0
0001262C 0240 001E                  		andi.w	#$1E,d0
00012630 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012634 115A 0019                  		move.b	(a2)+,$19(a0)
00012638 115A 001A                  		move.b	(a2)+,$1A(a0)
0001263C 7000                       		moveq	#0,d0
0001263E 1028 0028                  		move.b	$28(a0),d0
00012642 D040                       		add.w	d0,d0
00012644 0240 001E                  		andi.w	#$1E,d0
00012648 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001264C 101A                       		move.b	(a2)+,d0
0001264E E548                       		lsl.w	#2,d0
00012650 3140 003C                  		move.w	d0,$3C(a0)
00012654 115A 0028                  		move.b	(a2)+,$28(a0)
00012658 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00012660 317C 4000 0002             		move.w	#$4000,2(a0)
00012666 117C 0004 0001             		move.b	#4,1(a0)
0001266C 117C 0004 0018             		move.b	#4,$18(a0)
00012672 3168 0008 0032             		move.w	8(a0),$32(a0)
00012678 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001267E                            
0001267E                            Obj59_Platform:				; XREF: Obj59_Index
0001267E 7200                       		moveq	#0,d1
00012680 1228 0019                  		move.b	$19(a0),d1
00012684 4EB9 0000 8F16             		jsr	(PlatformObject).l
0001268A 6000 0000                  		bra.w	Obj59_Types
0001268E                            ; ===========================================================================
0001268E                            
0001268E                            Obj59_Action:				; XREF: Obj59_Index
0001268E 7200                       		moveq	#0,d1
00012690 1228 0019                  		move.b	$19(a0),d1
00012694 4EB9 0000 908A             		jsr	(ExitPlatform).l
0001269A 3F28 0008                  		move.w	8(a0),-(sp)
0001269E 6100 0000                  		bsr.w	Obj59_Types
000126A2 341F                       		move.w	(sp)+,d2
000126A4 4A10                       		tst.b	0(a0)
000126A6 6700                       		beq.s	locret_10BD4
000126A8 4EF9 0000 95F4             		jmp	(MvSonicOnPtfm2).l
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            locret_10BD4:
000126AE 4E75                       		rts	
000126B0                            ; ===========================================================================
000126B0                            
000126B0                            Obj59_Types:
000126B0 7000                       		moveq	#0,d0
000126B2 1028 0028                  		move.b	$28(a0),d0
000126B6 0240 000F                  		andi.w	#$F,d0
000126BA D040                       		add.w	d0,d0
000126BC 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000126C0 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000126C4                            ; ===========================================================================
000126C4 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126C8 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126CC 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126D0 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126D4 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000126D8                            ; ===========================================================================
000126D8                            
000126D8                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000126D8 4E75                       		rts	
000126DA                            ; ===========================================================================
000126DA                            
000126DA                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000126DA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000126E0 6600                       		bne.s	locret_10C0C
000126E2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000126E6                            
000126E6                            locret_10C0C:
000126E6 4E75                       		rts	
000126E8                            ; ===========================================================================
000126E8                            
000126E8                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000126E8 6100 0000                  		bsr.w	Obj59_Move
000126EC 3028 0034                  		move.w	$34(a0),d0
000126F0 4440                       		neg.w	d0
000126F2 D068 0030                  		add.w	$30(a0),d0
000126F6 3140 000C                  		move.w	d0,$C(a0)
000126FA 4E75                       		rts	
000126FC                            ; ===========================================================================
000126FC                            
000126FC                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000126FC 6100 0000                  		bsr.w	Obj59_Move
00012700 3028 0034                  		move.w	$34(a0),d0
00012704 D068 0030                  		add.w	$30(a0),d0
00012708 3140 000C                  		move.w	d0,$C(a0)
0001270C 4E75                       		rts	
0001270E                            ; ===========================================================================
0001270E                            
0001270E                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001270E 6100 0000                  		bsr.w	Obj59_Move
00012712 3028 0034                  		move.w	$34(a0),d0
00012716 E240                       		asr.w	#1,d0
00012718 4440                       		neg.w	d0
0001271A D068 0030                  		add.w	$30(a0),d0
0001271E 3140 000C                  		move.w	d0,$C(a0)
00012722 3028 0034                  		move.w	$34(a0),d0
00012726 D068 0032                  		add.w	$32(a0),d0
0001272A 3140 0008                  		move.w	d0,8(a0)
0001272E 4E75                       		rts	
00012730                            ; ===========================================================================
00012730                            
00012730                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00012730 6100 0000                  		bsr.w	Obj59_Move
00012734 3028 0034                  		move.w	$34(a0),d0
00012738 E240                       		asr.w	#1,d0
0001273A D068 0030                  		add.w	$30(a0),d0
0001273E 3140 000C                  		move.w	d0,$C(a0)
00012742 3028 0034                  		move.w	$34(a0),d0
00012746 4440                       		neg.w	d0
00012748 D068 0032                  		add.w	$32(a0),d0
0001274C 3140 0008                  		move.w	d0,8(a0)
00012750 4E75                       		rts	
00012752                            ; ===========================================================================
00012752                            
00012752                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00012752 6100 0000                  		bsr.w	Obj59_Move
00012756 3028 0034                  		move.w	$34(a0),d0
0001275A 4440                       		neg.w	d0
0001275C D068 0030                  		add.w	$30(a0),d0
00012760 3140 000C                  		move.w	d0,$C(a0)
00012764 4A28 0028                  		tst.b	$28(a0)
00012768 6700 0000                  		beq.w	loc_10C94
0001276C 4E75                       		rts	
0001276E                            ; ===========================================================================
0001276E                            
0001276E                            loc_10C94:
0001276E 0828 0003 0022             		btst	#3,$22(a0)
00012774 6700                       		beq.s	Obj59_Delete
00012776 08E9 0001 0022             		bset	#1,$22(a1)
0001277C 08A9 0003 0022             		bclr	#3,$22(a1)
00012782 137C 0002 0024             		move.b	#2,$24(a1)
00012788                            
00012788                            Obj59_Delete:
00012788 6000 C97C                  		bra.w	DeleteObject
0001278C                            
0001278C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001278C                            
0001278C                            
0001278C                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001278C 3028 0038                  		move.w	$38(a0),d0
00012790 4A28 003A                  		tst.b	$3A(a0)
00012794 6600                       		bne.s	loc_10CC8
00012796 0C40 0800                  		cmpi.w	#$800,d0
0001279A 6400                       		bcc.s	loc_10CD0
0001279C 0640 0010                  		addi.w	#$10,d0
000127A0 6000                       		bra.s	loc_10CD0
000127A2                            ; ===========================================================================
000127A2                            
000127A2                            loc_10CC8:
000127A2 4A40                       		tst.w	d0
000127A4 6700                       		beq.s	loc_10CD0
000127A6 0440 0010                  		subi.w	#$10,d0
000127AA                            
000127AA                            loc_10CD0:
000127AA 3140 0038                  		move.w	d0,$38(a0)
000127AE 48C0                       		ext.l	d0
000127B0 E180                       		asl.l	#8,d0
000127B2 D0A8 0034                  		add.l	$34(a0),d0
000127B6 2140 0034                  		move.l	d0,$34(a0)
000127BA 4840                       		swap	d0
000127BC 3428 003C                  		move.w	$3C(a0),d2
000127C0 B042                       		cmp.w	d2,d0
000127C2 6300                       		bls.s	loc_10CF0
000127C4 117C 0001 003A             		move.b	#1,$3A(a0)
000127CA                            
000127CA                            loc_10CF0:
000127CA D442                       		add.w	d2,d2
000127CC B042                       		cmp.w	d2,d0
000127CE 6600                       		bne.s	locret_10CFA
000127D0 4228 0028                  		clr.b	$28(a0)
000127D4                            
000127D4                            locret_10CFA:
000127D4 4E75                       		rts	
000127D6                            ; End of function Obj59_Move
000127D6                            
000127D6                            ; ===========================================================================
000127D6                            
000127D6                            Obj59_MakeMulti:			; XREF: Obj59_Index
000127D6 5368 003C                  		subq.w	#1,$3C(a0)
000127DA 6600                       		bne.s	Obj59_ChkDel
000127DC 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000127E2 6100 CD7A                  		bsr.w	SingleObjLoad
000127E6 6600                       		bne.s	Obj59_ChkDel
000127E8 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000127EC 3368 0008 0008             		move.w	8(a0),8(a1)
000127F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127F8 137C 000E 0028             		move.b	#$E,$28(a1)
000127FE                            
000127FE                            Obj59_ChkDel:
000127FE 588F                       		addq.l	#4,sp
00012800 3028 0008                  		move.w	8(a0),d0
00012804 0240 FF80                  		andi.w	#$FF80,d0
00012808 3238 F700                  		move.w	($FFFFF700).w,d1
0001280C 0441 0080                  		subi.w	#$80,d1
00012810 0241 FF80                  		andi.w	#$FF80,d1
00012814 9041                       		sub.w	d1,d0
00012816 0C40 0280                  		cmpi.w	#$280,d0
0001281A 6200 C8EA                  		bhi.w	DeleteObject
0001281E 4E75                       		rts	
00012820                            ; ===========================================================================
00012820                            ; ---------------------------------------------------------------------------
00012820                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012820                            ; ---------------------------------------------------------------------------
00012820                            Map_obj59:
00012820                            	include "_maps\obj59.asm"
00012820                            ; ---------------------------------------------------------------------------
00012820                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012820                            ; ---------------------------------------------------------------------------
00012820 0000                       		dc.w byte_10D4A-Map_obj59
00012822 03                         byte_10D4A:	dc.b 3
00012823 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012828 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001282D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012832                            		even
00012832                            		even
00012832                            
00012832                            ; ===========================================================================
00012832                            ; ---------------------------------------------------------------------------
00012832                            ; Object 5A - platforms	moving in circles (SLZ)
00012832                            ; ---------------------------------------------------------------------------
00012832                            
00012832                            Obj5A:					; XREF: Obj_Index
00012832 7000                       		moveq	#0,d0
00012834 1028 0024                  		move.b	$24(a0),d0
00012838 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001283C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00012840 3028 0032                  		move.w	$32(a0),d0
00012844 0240 FF80                  		andi.w	#$FF80,d0
00012848 3238 F700                  		move.w	($FFFFF700).w,d1
0001284C 0441 0080                  		subi.w	#$80,d1
00012850 0241 FF80                  		andi.w	#$FF80,d1
00012854 9041                       		sub.w	d1,d0
00012856 0C40 0280                  		cmpi.w	#$280,d0
0001285A 6200 C8AA                  		bhi.w	DeleteObject
0001285E 6000 C86A                  		bra.w	DisplaySprite
00012862                            ; ===========================================================================
00012862 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00012864 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012866 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012868                            ; ===========================================================================
00012868                            
00012868                            Obj5A_Main:				; XREF: Obj5A_Index
00012868 5428 0024                  		addq.b	#2,$24(a0)
0001286C 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00012874 317C 4000 0002             		move.w	#$4000,2(a0)
0001287A 117C 0004 0001             		move.b	#4,1(a0)
00012880 117C 0004 0018             		move.b	#4,$18(a0)
00012886 117C 0018 0019             		move.b	#$18,$19(a0)
0001288C 3168 0008 0032             		move.w	8(a0),$32(a0)
00012892 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012898                            
00012898                            Obj5A_Platform:				; XREF: Obj5A_Index
00012898 7200                       		moveq	#0,d1
0001289A 1228 0019                  		move.b	$19(a0),d1
0001289E 4EB9 0000 8F16             		jsr	(PlatformObject).l
000128A4 6000 0000                  		bra.w	Obj5A_Types
000128A8                            ; ===========================================================================
000128A8                            
000128A8                            Obj5A_Action:				; XREF: Obj5A_Index
000128A8 7200                       		moveq	#0,d1
000128AA 1228 0019                  		move.b	$19(a0),d1
000128AE 4EB9 0000 908A             		jsr	(ExitPlatform).l
000128B4 3F28 0008                  		move.w	8(a0),-(sp)
000128B8 6100 0000                  		bsr.w	Obj5A_Types
000128BC 341F                       		move.w	(sp)+,d2
000128BE 4EF9 0000 95F4             		jmp	(MvSonicOnPtfm2).l
000128C4                            ; ===========================================================================
000128C4                            
000128C4                            Obj5A_Types:
000128C4 7000                       		moveq	#0,d0
000128C6 1028 0028                  		move.b	$28(a0),d0
000128CA 0240 000C                  		andi.w	#$C,d0
000128CE E248                       		lsr.w	#1,d0
000128D0 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000128D4 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000128D8                            ; ===========================================================================
000128D8 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000128DA 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000128DC                            ; ===========================================================================
000128DC                            
000128DC                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000128DC 1238 FE80                  		move.b	($FFFFFE80).w,d1
000128E0 0401 0050                  		subi.b	#$50,d1
000128E4 4881                       		ext.w	d1
000128E6 1438 FE84                  		move.b	($FFFFFE84).w,d2
000128EA 0402 0050                  		subi.b	#$50,d2
000128EE 4882                       		ext.w	d2
000128F0 0828 0000 0028             		btst	#0,$28(a0)
000128F6 6700                       		beq.s	loc_10E24
000128F8 4441                       		neg.w	d1
000128FA 4442                       		neg.w	d2
000128FC                            
000128FC                            loc_10E24:
000128FC 0828 0001 0028             		btst	#1,$28(a0)
00012902 6700                       		beq.s	loc_10E30
00012904 4441                       		neg.w	d1
00012906 C342                       		exg	d1,d2
00012908                            
00012908                            loc_10E30:
00012908 D268 0032                  		add.w	$32(a0),d1
0001290C 3141 0008                  		move.w	d1,8(a0)
00012910 D468 0030                  		add.w	$30(a0),d2
00012914 3142 000C                  		move.w	d2,$C(a0)
00012918 4E75                       		rts	
0001291A                            ; ===========================================================================
0001291A                            
0001291A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001291A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001291E 0401 0050                  		subi.b	#$50,d1
00012922 4881                       		ext.w	d1
00012924 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012928 0402 0050                  		subi.b	#$50,d2
0001292C 4882                       		ext.w	d2
0001292E 0828 0000 0028             		btst	#0,$28(a0)
00012934 6700                       		beq.s	loc_10E62
00012936 4441                       		neg.w	d1
00012938 4442                       		neg.w	d2
0001293A                            
0001293A                            loc_10E62:
0001293A 0828 0001 0028             		btst	#1,$28(a0)
00012940 6700                       		beq.s	loc_10E6E
00012942 4441                       		neg.w	d1
00012944 C342                       		exg	d1,d2
00012946                            
00012946                            loc_10E6E:
00012946 4441                       		neg.w	d1
00012948 D268 0032                  		add.w	$32(a0),d1
0001294C 3141 0008                  		move.w	d1,8(a0)
00012950 D468 0030                  		add.w	$30(a0),d2
00012954 3142 000C                  		move.w	d2,$C(a0)
00012958 4E75                       		rts	
0001295A                            ; ===========================================================================
0001295A                            ; ---------------------------------------------------------------------------
0001295A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001295A                            ; ---------------------------------------------------------------------------
0001295A                            Map_obj5A:
0001295A                            	include "_maps\obj5A.asm"
0001295A                            ; ---------------------------------------------------------------------------
0001295A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001295A                            ; ---------------------------------------------------------------------------
0001295A 0000                       		dc.w byte_10E84-Map_obj5A
0001295C 02                         byte_10E84:	dc.b 2
0001295D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012962 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012968 00                         		even
00012968 00                         		even
00012968                            
00012968                            ; ===========================================================================
00012968                            ; ---------------------------------------------------------------------------
00012968                            ; Object 5B - blocks that form a staircase (SLZ)
00012968                            ; ---------------------------------------------------------------------------
00012968                            
00012968                            Obj5B:					; XREF: Obj_Index
00012968 7000                       		moveq	#0,d0
0001296A 1028 0024                  		move.b	$24(a0),d0
0001296E 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00012972 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012976 3028 0030                  		move.w	$30(a0),d0
0001297A 0240 FF80                  		andi.w	#$FF80,d0
0001297E 3238 F700                  		move.w	($FFFFF700).w,d1
00012982 0441 0080                  		subi.w	#$80,d1
00012986 0241 FF80                  		andi.w	#$FF80,d1
0001298A 9041                       		sub.w	d1,d0
0001298C 0C40 0280                  		cmpi.w	#$280,d0
00012990 6200 C774                  		bhi.w	DeleteObject
00012994 6000 C734                  		bra.w	DisplaySprite
00012998                            ; ===========================================================================
00012998 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001299A 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001299C 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001299E                            ; ===========================================================================
0001299E                            
0001299E                            Obj5B_Main:				; XREF: Obj5B_Index
0001299E 5428 0024                  		addq.b	#2,$24(a0)
000129A2 7638                       		moveq	#$38,d3
000129A4 7801                       		moveq	#1,d4
000129A6 0828 0000 0022             		btst	#0,$22(a0)
000129AC 6700                       		beq.s	loc_10EDA
000129AE 763B                       		moveq	#$3B,d3
000129B0 78FF                       		moveq	#-1,d4
000129B2                            
000129B2                            loc_10EDA:
000129B2 3428 0008                  		move.w	8(a0),d2
000129B6 2248                       		movea.l	a0,a1
000129B8 7203                       		moveq	#3,d1
000129BA 6000                       		bra.s	Obj5B_MakeBlocks
000129BC                            ; ===========================================================================
000129BC                            
000129BC                            Obj5B_Loop:
000129BC 6100 CBB6                  		bsr.w	SingleObjLoad2
000129C0 6600 0000                  		bne.w	Obj5B_Move
000129C4 137C 0004 0024             		move.b	#4,$24(a1)
000129CA                            
000129CA                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000129CA 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000129CE 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000129D6 337C 4000 0002             		move.w	#$4000,2(a1)
000129DC 137C 0004 0001             		move.b	#4,1(a1)
000129E2 137C 0003 0018             		move.b	#3,$18(a1)
000129E8 137C 0010 0019             		move.b	#$10,$19(a1)
000129EE 1368 0028 0028             		move.b	$28(a0),$28(a1)
000129F4 3342 0008                  		move.w	d2,8(a1)
000129F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129FE 3368 0008 0030             		move.w	8(a0),$30(a1)
00012A04 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012A0A 0642 0020                  		addi.w	#$20,d2
00012A0E 1343 0037                  		move.b	d3,$37(a1)
00012A12 2348 003C                  		move.l	a0,$3C(a1)
00012A16 D604                       		add.b	d4,d3
00012A18 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012A1C                            
00012A1C                            Obj5B_Move:				; XREF: Obj5B_Index
00012A1C 7000                       		moveq	#0,d0
00012A1E 1028 0028                  		move.b	$28(a0),d0
00012A22 0240 0007                  		andi.w	#7,d0
00012A26 D040                       		add.w	d0,d0
00012A28 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012A2C 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012A30                            
00012A30                            Obj5B_Solid:				; XREF: Obj5B_Index
00012A30 2468 003C                  		movea.l	$3C(a0),a2
00012A34 7000                       		moveq	#0,d0
00012A36 1028 0037                  		move.b	$37(a0),d0
00012A3A 1032 0000                  		move.b	(a2,d0.w),d0
00012A3E D068 0032                  		add.w	$32(a0),d0
00012A42 3140 000C                  		move.w	d0,$C(a0)
00012A46 7200                       		moveq	#0,d1
00012A48 1228 0019                  		move.b	$19(a0),d1
00012A4C 0641 000B                  		addi.w	#$B,d1
00012A50 343C 0010                  		move.w	#$10,d2
00012A54 363C 0011                  		move.w	#$11,d3
00012A58 3828 0008                  		move.w	8(a0),d4
00012A5C 6100 EA4A                  		bsr.w	SolidObject
00012A60 4A04                       		tst.b	d4
00012A62 6A00                       		bpl.s	loc_10F92
00012A64 1544 0036                  		move.b	d4,$36(a2)
00012A68                            
00012A68                            loc_10F92:
00012A68 0828 0003 0022             		btst	#3,$22(a0)
00012A6E 6700                       		beq.s	locret_10FA0
00012A70 157C 0001 0036             		move.b	#1,$36(a2)
00012A76                            
00012A76                            locret_10FA0:
00012A76 4E75                       		rts	
00012A78                            ; ===========================================================================
00012A78 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012A7A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012A7C 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012A7E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012A80                            ; ===========================================================================
00012A80                            
00012A80                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012A80 4A68 0034                  		tst.w	$34(a0)
00012A84 6600                       		bne.s	loc_10FC0
00012A86 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012A8C 6600                       		bne.s	locret_10FBE
00012A8E 317C 001E 0034             		move.w	#$1E,$34(a0)
00012A94                            
00012A94                            locret_10FBE:
00012A94 4E75                       		rts	
00012A96                            ; ===========================================================================
00012A96                            
00012A96                            loc_10FC0:
00012A96 5368 0034                  		subq.w	#1,$34(a0)
00012A9A 66F8                       		bne.s	locret_10FBE
00012A9C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AA0 4E75                       		rts	
00012AA2                            ; ===========================================================================
00012AA2                            
00012AA2                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012AA2 4A68 0034                  		tst.w	$34(a0)
00012AA6 6600                       		bne.s	loc_10FE0
00012AA8 4A28 0036                  		tst.b	$36(a0)
00012AAC 6A00                       		bpl.s	locret_10FDE
00012AAE 317C 003C 0034             		move.w	#$3C,$34(a0)
00012AB4                            
00012AB4                            locret_10FDE:
00012AB4 4E75                       		rts	
00012AB6                            ; ===========================================================================
00012AB6                            
00012AB6                            loc_10FE0:
00012AB6 5368 0034                  		subq.w	#1,$34(a0)
00012ABA 6600                       		bne.s	loc_10FEC
00012ABC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AC0 4E75                       		rts	
00012AC2                            ; ===========================================================================
00012AC2                            
00012AC2                            loc_10FEC:
00012AC2 43E8 0038                  		lea	$38(a0),a1
00012AC6 3028 0034                  		move.w	$34(a0),d0
00012ACA E408                       		lsr.b	#2,d0
00012ACC 0200 0001                  		andi.b	#1,d0
00012AD0 12C0                       		move.b	d0,(a1)+
00012AD2 0A00 0001                  		eori.b	#1,d0
00012AD6 12C0                       		move.b	d0,(a1)+
00012AD8 0A00 0001                  		eori.b	#1,d0
00012ADC 12C0                       		move.b	d0,(a1)+
00012ADE 0A00 0001                  		eori.b	#1,d0
00012AE2 12C0                       		move.b	d0,(a1)+
00012AE4 4E75                       		rts	
00012AE6                            ; ===========================================================================
00012AE6                            
00012AE6                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012AE6 43E8 0038                  		lea	$38(a0),a1
00012AEA 0C11 0080                  		cmpi.b	#$80,(a1)
00012AEE 6700                       		beq.s	locret_11038
00012AF0 5211                       		addq.b	#1,(a1)
00012AF2 7200                       		moveq	#0,d1
00012AF4 1219                       		move.b	(a1)+,d1
00012AF6 4841                       		swap	d1
00012AF8 E289                       		lsr.l	#1,d1
00012AFA 2401                       		move.l	d1,d2
00012AFC E289                       		lsr.l	#1,d1
00012AFE 2601                       		move.l	d1,d3
00012B00 D682                       		add.l	d2,d3
00012B02 4841                       		swap	d1
00012B04 4842                       		swap	d2
00012B06 4843                       		swap	d3
00012B08 12C3                       		move.b	d3,(a1)+
00012B0A 12C2                       		move.b	d2,(a1)+
00012B0C 12C1                       		move.b	d1,(a1)+
00012B0E                            
00012B0E                            locret_11038:
00012B0E 4E75                       		rts	
00012B10 4E75                       		rts	
00012B12                            ; ===========================================================================
00012B12                            ; ---------------------------------------------------------------------------
00012B12                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012B12                            ; ---------------------------------------------------------------------------
00012B12                            Map_obj5B:
00012B12                            	include "_maps\obj5B.asm"
00012B12                            ; ---------------------------------------------------------------------------
00012B12                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012B12                            ; ---------------------------------------------------------------------------
00012B12 0000                       		dc.w byte_1103E-Map_obj5B
00012B14 01                         byte_1103E:	dc.b 1
00012B15 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012B1A                            		even
00012B1A                            		even
00012B1A                            
00012B1A                            ; ===========================================================================
00012B1A                            ; ---------------------------------------------------------------------------
00012B1A                            ; Object 5C - metal girders in foreground (SLZ)
00012B1A                            ; ---------------------------------------------------------------------------
00012B1A                            
00012B1A                            Obj5C:					; XREF: Obj_Index
00012B1A 7000                       		moveq	#0,d0
00012B1C 1028 0024                  		move.b	$24(a0),d0
00012B20 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012B24 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012B28                            ; ===========================================================================
00012B28 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012B2A 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012B2C                            ; ===========================================================================
00012B2C                            
00012B2C                            Obj5C_Main:				; XREF: Obj5C_Index
00012B2C 5428 0024                  		addq.b	#2,$24(a0)
00012B30 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012B38 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012B3E 117C 0010 0019             		move.b	#$10,$19(a0)
00012B44                            
00012B44                            Obj5C_Display:				; XREF: Obj5C_Index
00012B44 2238 F700                  		move.l	($FFFFF700).w,d1
00012B48 D281                       		add.l	d1,d1
00012B4A 4841                       		swap	d1
00012B4C 4441                       		neg.w	d1
00012B4E 3141 0008                  		move.w	d1,8(a0)
00012B52 2238 F704                  		move.l	($FFFFF704).w,d1
00012B56 D281                       		add.l	d1,d1
00012B58 4841                       		swap	d1
00012B5A 0241 003F                  		andi.w	#$3F,d1
00012B5E 4441                       		neg.w	d1
00012B60 0641 0100                  		addi.w	#$100,d1
00012B64 3141 000A                  		move.w	d1,$A(a0)
00012B68 6000 C560                  		bra.w	DisplaySprite
00012B6C                            ; ===========================================================================
00012B6C                            ; ---------------------------------------------------------------------------
00012B6C                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012B6C                            ; ---------------------------------------------------------------------------
00012B6C                            Map_obj5C:
00012B6C                            	include "_maps\obj5C.asm"
00012B6C                            ; ---------------------------------------------------------------------------
00012B6C                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012B6C                            ; ---------------------------------------------------------------------------
00012B6C 0000                       		dc.w byte_11098-Map_obj5C
00012B6E 09                         byte_11098:	dc.b 9
00012B6F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012B74 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012B79 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012B7E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012B83 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012B88 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012B8D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012B92 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012B97 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012B9C                            		even
00012B9C                            		even
00012B9C                            
00012B9C                            ; ===========================================================================
00012B9C                            ; ---------------------------------------------------------------------------
00012B9C                            ; Object 1B - water surface (LZ)
00012B9C                            ; ---------------------------------------------------------------------------
00012B9C                            
00012B9C                            Obj1B:					; XREF: Obj_Index
00012B9C 7000                       		moveq	#0,d0
00012B9E 1028 0024                  		move.b	$24(a0),d0
00012BA2 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012BA6 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012BAA                            ; ===========================================================================
00012BAA 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012BAC 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012BAE                            ; ===========================================================================
00012BAE                            
00012BAE                            Obj1B_Main:				; XREF: Obj1B_Index
00012BAE 5428 0024                  		addq.b	#2,$24(a0)
00012BB2 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012BBA 317C C300 0002             		move.w	#$C300,2(a0)
00012BC0 117C 0004 0001             		move.b	#4,1(a0)
00012BC6 117C 0080 0019             		move.b	#$80,$19(a0)
00012BCC 3168 0008 0030             		move.w	8(a0),$30(a0)
00012BD2                            
00012BD2                            Obj1B_Action:				; XREF: Obj1B_Index
00012BD2 3238 F700                  		move.w	($FFFFF700).w,d1
00012BD6 0241 FFE0                  		andi.w	#$FFE0,d1
00012BDA D268 0030                  		add.w	$30(a0),d1
00012BDE 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012BE4 6700                       		beq.s	loc_11114
00012BE6 0641 0020                  		addi.w	#$20,d1
00012BEA                            
00012BEA                            loc_11114:
00012BEA 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012BEE 3238 F646                  		move.w	($FFFFF646).w,d1
00012BF2 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012BF6 4A28 0032                  		tst.b	$32(a0)
00012BFA 6600                       		bne.s	Obj1B_Animate
00012BFC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012C02 6700                       		beq.s	loc_1114A	; if not, branch
00012C04 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012C08 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012C0E 6000                       		bra.s	Obj1B_Display
00012C10                            ; ===========================================================================
00012C10                            
00012C10                            Obj1B_Animate:				; XREF: loc_11114
00012C10 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012C14 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012C16 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012C1C 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012C20                            
00012C20                            loc_1114A:				; XREF: loc_11114
00012C20 5328 001E                  		subq.b	#1,$1E(a0)
00012C24 6A00                       		bpl.s	Obj1B_Display
00012C26 117C 0007 001E             		move.b	#7,$1E(a0)
00012C2C 5228 001A                  		addq.b	#1,$1A(a0)
00012C30 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012C36 6500                       		bcs.s	Obj1B_Display
00012C38 117C 0000 001A             		move.b	#0,$1A(a0)
00012C3E                            
00012C3E                            Obj1B_Display:
00012C3E 6000 C48A                  		bra.w	DisplaySprite
00012C42                            ; ===========================================================================
00012C42                            ; ---------------------------------------------------------------------------
00012C42                            ; Sprite mappings - water surface (LZ)
00012C42                            ; ---------------------------------------------------------------------------
00012C42                            Map_obj1B:
00012C42                            	include "_maps\obj1B.asm"
00012C42                            ; ---------------------------------------------------------------------------
00012C42                            ; Sprite mappings - water surface (LZ)
00012C42                            ; ---------------------------------------------------------------------------
00012C42 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012C46 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012C4A 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012C4E 03                         byte_11178:	dc.b 3
00012C4F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012C54 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012C59 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012C5E 03                         byte_11188:	dc.b 3
00012C5F FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012C64 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012C69 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012C6E 03                         byte_11198:	dc.b 3
00012C6F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012C74 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012C79 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012C7E 06                         byte_111A8:	dc.b 6
00012C7F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012C84 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012C89 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012C8E FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012C93 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012C98 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012C9D 06                         byte_111C7:	dc.b 6
00012C9E FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012CA3 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012CA8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012CAD FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012CB2 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012CB7 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012CBC 06                         byte_111E6:	dc.b 6
00012CBD FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012CC2 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012CC7 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012CCC FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012CD1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012CD6 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012CDC 00                         		even
00012CDC 00                         		even
00012CDC                            
00012CDC                            ; ===========================================================================
00012CDC                            ; ---------------------------------------------------------------------------
00012CDC                            ; Object 0B - pole that	breaks (LZ)
00012CDC                            ; ---------------------------------------------------------------------------
00012CDC                            
00012CDC                            Obj0B:					; XREF: Obj_Index
00012CDC 7000                       		moveq	#0,d0
00012CDE 1028 0024                  		move.b	$24(a0),d0
00012CE2 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012CE6 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012CEA                            ; ===========================================================================
00012CEA 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012CEC 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012CEE 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012CF0                            ; ===========================================================================
00012CF0                            
00012CF0                            Obj0B_Main:				; XREF: Obj0B_Index
00012CF0 5428 0024                  		addq.b	#2,$24(a0)
00012CF4 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012CFC 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012D02 117C 0004 0001             		move.b	#4,1(a0)
00012D08 117C 0008 0019             		move.b	#8,$19(a0)
00012D0E 117C 0004 0018             		move.b	#4,$18(a0)
00012D14 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012D1A 7000                       		moveq	#0,d0
00012D1C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D20 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012D24 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012D28                            
00012D28                            Obj0B_Action:				; XREF: Obj0B_Index
00012D28 4A28 0032                  		tst.b	$32(a0)
00012D2C 6700                       		beq.s	Obj0B_Grab
00012D2E 4A68 0030                  		tst.w	$30(a0)
00012D32 6700                       		beq.s	Obj0B_MoveUp
00012D34 5368 0030                  		subq.w	#1,$30(a0)
00012D38 6600                       		bne.s	Obj0B_MoveUp
00012D3A 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012D40 6000                       		bra.s	Obj0B_Release
00012D42                            ; ===========================================================================
00012D42                            
00012D42                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012D42 43F8 D000                  		lea	($FFFFD000).w,a1
00012D46 3028 000C                  		move.w	$C(a0),d0
00012D4A 0440 0018                  		subi.w	#$18,d0
00012D4E 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012D54 6700                       		beq.s	Obj0B_MoveDown
00012D56 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012D5A B069 000C                  		cmp.w	$C(a1),d0
00012D5E 6500                       		bcs.s	Obj0B_MoveDown
00012D60 3340 000C                  		move.w	d0,$C(a1)
00012D64                            
00012D64                            Obj0B_MoveDown:
00012D64 0640 0024                  		addi.w	#$24,d0
00012D68 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012D6E 6700                       		beq.s	Obj0B_LetGo
00012D70 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012D74 B069 000C                  		cmp.w	$C(a1),d0
00012D78 6400                       		bcc.s	Obj0B_LetGo
00012D7A 3340 000C                  		move.w	d0,$C(a1)
00012D7E                            
00012D7E                            Obj0B_LetGo:
00012D7E 1038 F603                  		move.b	($FFFFF603).w,d0
00012D82 0240 0070                  		andi.w	#$70,d0
00012D86 6700                       		beq.s	Obj0B_Display
00012D88                            
00012D88                            Obj0B_Release:				; XREF: Obj0B_Action
00012D88 4228 0020                  		clr.b	$20(a0)
00012D8C 5428 0024                  		addq.b	#2,$24(a0)
00012D90 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012D94 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012D98 4228 0032                  		clr.b	$32(a0)
00012D9C 6000                       		bra.s	Obj0B_Display
00012D9E                            ; ===========================================================================
00012D9E                            
00012D9E                            Obj0B_Grab:				; XREF: Obj0B_Action
00012D9E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012DA2 6700                       		beq.s	Obj0B_Display	; if not, branch
00012DA4 43F8 D000                  		lea	($FFFFD000).w,a1
00012DA8 3028 0008                  		move.w	8(a0),d0
00012DAC 0640 0014                  		addi.w	#$14,d0
00012DB0 B069 0008                  		cmp.w	8(a1),d0
00012DB4 6400                       		bcc.s	Obj0B_Display
00012DB6 4228 0021                  		clr.b	$21(a0)
00012DBA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012DC0 6400                       		bcc.s	Obj0B_Display
00012DC2 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012DC6 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012DCA 3028 0008                  		move.w	8(a0),d0
00012DCE 0640 0014                  		addi.w	#$14,d0
00012DD2 3340 0008                  		move.w	d0,8(a1)
00012DD6 08A9 0000 0022             		bclr	#0,$22(a1)
00012DDC 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012DE2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012DE8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012DEE 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012DF4                            
00012DF4                            Obj0B_Display:				; XREF: Obj0B_Index
00012DF4 6000 E38A                  		bra.w	MarkObjGone
00012DF8                            ; ===========================================================================
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Sprite mappings - pole that breaks (LZ)
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            Map_obj0B:
00012DF8                            	include "_maps\obj0B.asm"
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Sprite mappings - pole that breaks (LZ)
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8 0000                       		dc.w byte_11326-Map_obj0B
00012DFA 0000                       		dc.w byte_11331-Map_obj0B
00012DFC 02                         byte_11326:	dc.b 2			; normal pole
00012DFD E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012E02 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012E07 04                         byte_11331:	dc.b 4			; broken pole
00012E08 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012E0D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012E12 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012E17 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012E1C                            		even
00012E1C                            		even
00012E1C                            
00012E1C                            ; ===========================================================================
00012E1C                            ; ---------------------------------------------------------------------------
00012E1C                            ; Object 0C - flapping door (LZ)
00012E1C                            ; ---------------------------------------------------------------------------
00012E1C                            
00012E1C                            Obj0C:					; XREF: Obj_Index
00012E1C 7000                       		moveq	#0,d0
00012E1E 1028 0024                  		move.b	$24(a0),d0
00012E22 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012E26 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012E2A                            ; ===========================================================================
00012E2A 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012E2C 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012E2E                            ; ===========================================================================
00012E2E                            
00012E2E                            Obj0C_Main:				; XREF: Obj0C_Index
00012E2E 5428 0024                  		addq.b	#2,$24(a0)
00012E32 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012E3A 317C 4328 0002             		move.w	#$4328,2(a0)
00012E40 0028 0004 0001             		ori.b	#4,1(a0)
00012E46 117C 0028 0019             		move.b	#$28,$19(a0)
00012E4C 7000                       		moveq	#0,d0
00012E4E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E52 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012E56 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012E5A                            
00012E5A                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012E5A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012E5E 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012E60 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012E66 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012E6C 4A28 0001                  		tst.b	1(a0)
00012E70 6A00                       		bpl.s	Obj0C_Solid
00012E72 303C 00BB                  		move.w	#$BB,d0
00012E76 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
00012E7C                            
00012E7C                            Obj0C_Solid:
00012E7C 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012E82 6100 9388                  		bsr.w	AnimateSprite
00012E86 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012E8A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012E8E 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012E90 3038 D008                  		move.w	($FFFFD008).w,d0
00012E94 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012E98 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012E9A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012EA0 323C 0013                  		move.w	#$13,d1
00012EA4 343C 0020                  		move.w	#$20,d2
00012EA8 3602                       		move.w	d2,d3
00012EAA 5243                       		addq.w	#1,d3
00012EAC 3828 0008                  		move.w	8(a0),d4
00012EB0 6100 E5F6                  		bsr.w	SolidObject	; make the door	solid
00012EB4                            
00012EB4                            Obj0C_Display:
00012EB4 6000 E2CA                  		bra.w	MarkObjGone
00012EB8                            ; ===========================================================================
00012EB8                            Ani_obj0C:
00012EB8                            	include "_anim\obj0C.asm"
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8                            ; Animation script - flapping door (LZ)
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8 0000                       		dc.w byte_113E6-Ani_obj0C
00012EBA 0000                       		dc.w byte_113EC-Ani_obj0C
00012EBC 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012EC2 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012EC8                            		even
00012EC8                            		even
00012EC8                            
00012EC8                            ; ---------------------------------------------------------------------------
00012EC8                            ; Sprite mappings - flapping door (LZ)
00012EC8                            ; ---------------------------------------------------------------------------
00012EC8                            Map_obj0C:
00012EC8                            	include "_maps\obj0C.asm"
00012EC8                            ; ---------------------------------------------------------------------------
00012EC8                            ; Sprite mappings - flapping door (LZ)
00012EC8                            ; ---------------------------------------------------------------------------
00012EC8 0000                       		dc.w byte_113F8-Map_obj0C
00012ECA 0000                       		dc.w byte_11403-Map_obj0C
00012ECC 0000                       		dc.w byte_1140E-Map_obj0C
00012ECE 02                         byte_113F8:	dc.b 2
00012ECF E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012ED4 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012ED9 02                         byte_11403:	dc.b 2
00012EDA DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012EDF 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012EE4 02                         byte_1140E:	dc.b 2
00012EE5 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012EEA 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012EF0 00                         		even
00012EF0 00                         		even
00012EF0                            
00012EF0                            ; ===========================================================================
00012EF0                            ; ---------------------------------------------------------------------------
00012EF0                            ; Object 71 - invisible	solid blocks
00012EF0                            ; ---------------------------------------------------------------------------
00012EF0                            
00012EF0                            Obj71:					; XREF: Obj_Index
00012EF0 7000                       		moveq	#0,d0
00012EF2 1028 0024                  		move.b	$24(a0),d0
00012EF6 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012EFA 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012EFE                            ; ===========================================================================
00012EFE 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012F00 0000                       		dc.w Obj71_Solid-Obj71_Index
00012F02                            ; ===========================================================================
00012F02                            
00012F02                            Obj71_Main:				; XREF: Obj71_Index
00012F02 5428 0024                  		addq.b	#2,$24(a0)
00012F06 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012F0E 317C 8680 0002             		move.w	#$8680,2(a0)
00012F14 0028 0004 0001             		ori.b	#4,1(a0)
00012F1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F1E 1200                       		move.b	d0,d1
00012F20 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012F24 0640 0010                  		addi.w	#$10,d0
00012F28 E248                       		lsr.w	#1,d0
00012F2A 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012F2E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012F32 5241                       		addq.w	#1,d1
00012F34 E749                       		lsl.w	#3,d1
00012F36 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012F3A                            
00012F3A                            Obj71_Solid:				; XREF: Obj71_Index
00012F3A 6100 C408                  		bsr.w	ChkObjOnScreen
00012F3E 6600                       		bne.s	Obj71_ChkDel
00012F40 7200                       		moveq	#0,d1
00012F42 1228 0019                  		move.b	$19(a0),d1
00012F46 0641 000B                  		addi.w	#$B,d1
00012F4A 7400                       		moveq	#0,d2
00012F4C 1428 0016                  		move.b	$16(a0),d2
00012F50 3602                       		move.w	d2,d3
00012F52 5243                       		addq.w	#1,d3
00012F54 3828 0008                  		move.w	8(a0),d4
00012F58 6100 E594                  		bsr.w	SolidObject71
00012F5C                            
00012F5C                            Obj71_ChkDel:
00012F5C 3028 0008                  		move.w	8(a0),d0
00012F60 0240 FF80                  		andi.w	#$FF80,d0
00012F64 3238 F700                  		move.w	($FFFFF700).w,d1
00012F68 0441 0080                  		subi.w	#$80,d1
00012F6C 0241 FF80                  		andi.w	#$FF80,d1
00012F70 9041                       		sub.w	d1,d0
00012F72 0C40 0280                  		cmpi.w	#$280,d0
00012F76 6200                       		bhi.s	Obj71_Delete
00012F78 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012F7C 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012F7E 4EFA C14A                  		jmp	DisplaySprite	; if yes, display the object
00012F82                            ; ===========================================================================
00012F82                            
00012F82                            Obj71_NoDisplay:
00012F82 4E75                       		rts	
00012F84                            ; ===========================================================================
00012F84                            
00012F84                            Obj71_Delete:
00012F84 4EFA C180                  		jmp	DeleteObject
00012F88                            ; ===========================================================================
00012F88                            ; ---------------------------------------------------------------------------
00012F88                            ; Sprite mappings - invisible solid blocks
00012F88                            ; ---------------------------------------------------------------------------
00012F88                            Map_obj71:
00012F88                            	include "_maps\obj71.asm"
00012F88                            ; ---------------------------------------------------------------------------
00012F88                            ; Sprite mappings - invisible solid blocks
00012F88                            ; ---------------------------------------------------------------------------
00012F88 0000                       		dc.w byte_114BC-Map_obj71
00012F8A 0000                       		dc.w byte_114D1-Map_obj71
00012F8C 0000                       		dc.w byte_114E6-Map_obj71
00012F8E 04                         byte_114BC:	dc.b 4
00012F8F F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012F94 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012F99 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012F9E 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012FA3 04                         byte_114D1:	dc.b 4
00012FA4 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012FA9 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012FAE 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012FB3 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012FB8 04                         byte_114E6:	dc.b 4
00012FB9 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012FBE E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012FC3 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012FC8 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012FCE 00                         		even
00012FCE 00                         		even
00012FCE                            
00012FCE                            ; ===========================================================================
00012FCE                            ; ---------------------------------------------------------------------------
00012FCE                            ; Object 5D - fans (SLZ)
00012FCE                            ; ---------------------------------------------------------------------------
00012FCE                            
00012FCE                            Obj5D:					; XREF: Obj_Index
00012FCE 7000                       		moveq	#0,d0
00012FD0 1028 0024                  		move.b	$24(a0),d0
00012FD4 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012FD8 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012FDC                            ; ===========================================================================
00012FDC 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012FDE 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012FE0                            ; ===========================================================================
00012FE0                            
00012FE0                            Obj5D_Main:				; XREF: Obj5D_Index
00012FE0 5428 0024                  		addq.b	#2,$24(a0)
00012FE4 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012FEC 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012FF2 0028 0004 0001             		ori.b	#4,1(a0)
00012FF8 117C 0010 0019             		move.b	#$10,$19(a0)
00012FFE 117C 0004 0018             		move.b	#4,$18(a0)
00013004                            
00013004                            Obj5D_Delay:				; XREF: Obj5D_Index
00013004 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001300A 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001300C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013010 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00013012 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00013018 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001301E 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00013020 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00013026                            
00013026                            Obj5D_Blow:
00013026 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001302A 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001302E 43F8 D000                  		lea	($FFFFD000).w,a1
00013032 3029 0008                  		move.w	8(a1),d0
00013036 9068 0008                  		sub.w	8(a0),d0
0001303A 0828 0000 0022             		btst	#0,$22(a0)
00013040 6600                       		bne.s	Obj5D_ChkSonic
00013042 4440                       		neg.w	d0
00013044                            
00013044                            Obj5D_ChkSonic:
00013044 0640 0050                  		addi.w	#$50,d0
00013048 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001304C 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001304E 3229 000C                  		move.w	$C(a1),d1
00013052 0641 0060                  		addi.w	#$60,d1
00013056 9268 000C                  		sub.w	$C(a0),d1
0001305A 6500                       		bcs.s	Obj5D_Animate
0001305C 0C41 0070                  		cmpi.w	#$70,d1
00013060 6400                       		bcc.s	Obj5D_Animate
00013062 0440 0050                  		subi.w	#$50,d0
00013066 6400                       		bcc.s	loc_1159A
00013068 4640                       		not.w	d0
0001306A D040                       		add.w	d0,d0
0001306C                            
0001306C                            loc_1159A:
0001306C 0640 0060                  		addi.w	#$60,d0
00013070 0828 0000 0022             		btst	#0,$22(a0)
00013076 6600                       		bne.s	loc_115A8
00013078 4440                       		neg.w	d0
0001307A                            
0001307A                            loc_115A8:
0001307A 4400                       		neg.b	d0
0001307C E840                       		asr.w	#4,d0
0001307E 0828 0000 0028             		btst	#0,$28(a0)
00013084 6700                       		beq.s	Obj5D_MoveSonic
00013086 4440                       		neg.w	d0
00013088                            
00013088                            Obj5D_MoveSonic:
00013088 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001308C                            
0001308C                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001308C 5328 001E                  		subq.b	#1,$1E(a0)
00013090 6A00                       		bpl.s	Obj5D_ChkDel
00013092 117C 0000 001E             		move.b	#0,$1E(a0)
00013098 5228 001B                  		addq.b	#1,$1B(a0)
0001309C 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000130A2 6500                       		bcs.s	loc_115D8
000130A4 117C 0000 001B             		move.b	#0,$1B(a0)
000130AA                            
000130AA                            loc_115D8:
000130AA 7000                       		moveq	#0,d0
000130AC 0828 0000 0028             		btst	#0,$28(a0)
000130B2 6700                       		beq.s	loc_115E4
000130B4 7002                       		moveq	#2,d0
000130B6                            
000130B6                            loc_115E4:
000130B6 D028 001B                  		add.b	$1B(a0),d0
000130BA 1140 001A                  		move.b	d0,$1A(a0)
000130BE                            
000130BE                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000130BE 6100 C00A                  		bsr.w	DisplaySprite
000130C2 3028 0008                  		move.w	8(a0),d0
000130C6 0240 FF80                  		andi.w	#$FF80,d0
000130CA 3238 F700                  		move.w	($FFFFF700).w,d1
000130CE 0441 0080                  		subi.w	#$80,d1
000130D2 0241 FF80                  		andi.w	#$FF80,d1
000130D6 9041                       		sub.w	d1,d0
000130D8 0C40 0280                  		cmpi.w	#$280,d0
000130DC 6200 C028                  		bhi.w	DeleteObject
000130E0 4E75                       		rts	
000130E2                            ; ===========================================================================
000130E2                            ; ---------------------------------------------------------------------------
000130E2                            ; Sprite mappings - fans (SLZ)
000130E2                            ; ---------------------------------------------------------------------------
000130E2                            Map_obj5D:
000130E2                            	include "_maps\obj5D.asm"
000130E2                            ; ---------------------------------------------------------------------------
000130E2                            ; Sprite mappings - fans (SLZ)
000130E2                            ; ---------------------------------------------------------------------------
000130E2 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000130E6 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000130EA 0000                       		dc.w byte_1161A-Map_obj5D
000130EC 02                         byte_1161A:	dc.b 2
000130ED F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000130F2 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000130F7 02                         byte_11625:	dc.b 2
000130F8 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000130FD 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013102 02                         byte_11630:	dc.b 2
00013103 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013108 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001310E 00                         		even
0001310E 00                         		even
0001310E                            
0001310E                            ; ===========================================================================
0001310E                            ; ---------------------------------------------------------------------------
0001310E                            ; Object 5E - seesaws (SLZ)
0001310E                            ; ---------------------------------------------------------------------------
0001310E                            
0001310E                            Obj5E:					; XREF: Obj_Index
0001310E 7000                       		moveq	#0,d0
00013110 1028 0024                  		move.b	$24(a0),d0
00013114 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00013118 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001311C 3028 0030                  		move.w	$30(a0),d0
00013120 0240 FF80                  		andi.w	#$FF80,d0
00013124 3238 F700                  		move.w	($FFFFF700).w,d1
00013128 0441 0080                  		subi.w	#$80,d1
0001312C 0241 FF80                  		andi.w	#$FF80,d1
00013130 9041                       		sub.w	d1,d0
00013132 6B00 BFD2                  		bmi.w	DeleteObject
00013136 0C40 0280                  		cmpi.w	#$280,d0
0001313A 6200 BFCA                  		bhi.w	DeleteObject
0001313E 6000 BF8A                  		bra.w	DisplaySprite
00013142                            ; ===========================================================================
00013142 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00013144 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00013146 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00013148 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001314A 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001314C 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001314E                            ; ===========================================================================
0001314E                            
0001314E                            Obj5E_Main:				; XREF: Obj5E_Index
0001314E 5428 0024                  		addq.b	#2,$24(a0)
00013152 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001315A 317C 0374 0002             		move.w	#$374,2(a0)
00013160 0028 0004 0001             		ori.b	#4,1(a0)
00013166 117C 0004 0018             		move.b	#4,$18(a0)
0001316C 117C 0030 0019             		move.b	#$30,$19(a0)
00013172 3168 0008 0030             		move.w	8(a0),$30(a0)
00013178 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001317C 6600                       		bne.s	loc_116D2	; if not, branch
0001317E 6100 C3F4                  		bsr.w	SingleObjLoad2
00013182 6600                       		bne.s	loc_116D2
00013184 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00013188 5C29 0024                  		addq.b	#6,$24(a1)
0001318C 3368 0008 0008             		move.w	8(a0),8(a1)
00013192 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013198 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001319E 2348 003C                  		move.l	a0,$3C(a1)
000131A2                            
000131A2                            loc_116D2:
000131A2 0828 0000 0022             		btst	#0,$22(a0)
000131A8 6700                       		beq.s	loc_116E0
000131AA 117C 0002 001A             		move.b	#2,$1A(a0)
000131B0                            
000131B0                            loc_116E0:
000131B0 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000131B6                            
000131B6                            Obj5E_Slope:				; XREF: Obj5E_Index
000131B6 1228 003A                  		move.b	$3A(a0),d1
000131BA 6100 0000                  		bsr.w	loc_11766
000131BE 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000131C4 0828 0000 001A             		btst	#0,$1A(a0)
000131CA 6700                       		beq.s	loc_11702
000131CC 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000131D2                            
000131D2                            loc_11702:
000131D2 43F8 D000                  		lea	($FFFFD000).w,a1
000131D6 3169 0012 0038             		move.w	$12(a1),$38(a0)
000131DC 323C 0030                  		move.w	#$30,d1
000131E0 4EB9 0000 8FEA             		jsr	(SlopeObject).l
000131E6 4E75                       		rts	
000131E8                            ; ===========================================================================
000131E8                            
000131E8                            Obj5E_Slope2:				; XREF: Obj5E_Index
000131E8 6100 0000                  		bsr.w	loc_1174A
000131EC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000131F2 0828 0000 001A             		btst	#0,$1A(a0)
000131F8 6700                       		beq.s	loc_11730
000131FA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013200                            
00013200                            loc_11730:
00013200 323C 0030                  		move.w	#$30,d1
00013204 4EB9 0000 908A             		jsr	(ExitPlatform).l
0001320A 323C 0030                  		move.w	#$30,d1
0001320E 3428 0008                  		move.w	8(a0),d2
00013212 4EB9 0000 9FE8             		jsr	SlopeObject2
00013218 4E75                       		rts	
0001321A                            ; ===========================================================================
0001321A                            
0001321A                            loc_1174A:				; XREF: Obj5E_Slope2
0001321A 7202                       		moveq	#2,d1
0001321C 43F8 D000                  		lea	($FFFFD000).w,a1
00013220 3028 0008                  		move.w	8(a0),d0
00013224 9069 0008                  		sub.w	8(a1),d0
00013228 6400                       		bcc.s	loc_1175E
0001322A 4440                       		neg.w	d0
0001322C 7200                       		moveq	#0,d1
0001322E                            
0001322E                            loc_1175E:
0001322E 0C40 0008                  		cmpi.w	#8,d0
00013232 6400                       		bcc.s	loc_11766
00013234 7201                       		moveq	#1,d1
00013236                            
00013236                            loc_11766:
00013236 1028 001A                  		move.b	$1A(a0),d0
0001323A B001                       		cmp.b	d1,d0
0001323C 6700                       		beq.s	locret_11790
0001323E 6400                       		bcc.s	loc_11772
00013240 5400                       		addq.b	#2,d0
00013242                            
00013242                            loc_11772:
00013242 5300                       		subq.b	#1,d0
00013244 1140 001A                  		move.b	d0,$1A(a0)
00013248 1141 003A                  		move.b	d1,$3A(a0)
0001324C 08A8 0000 0001             		bclr	#0,1(a0)
00013252 0828 0001 001A             		btst	#1,$1A(a0)
00013258 6700                       		beq.s	locret_11790
0001325A 08E8 0000 0001             		bset	#0,1(a0)
00013260                            
00013260                            locret_11790:
00013260 4E75                       		rts	
00013262                            ; ===========================================================================
00013262                            
00013262                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00013262 5428 0024                  		addq.b	#2,$24(a0)
00013266 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001326E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00013274 0028 0004 0001             		ori.b	#4,1(a0)
0001327A 117C 0004 0018             		move.b	#4,$18(a0)
00013280 117C 008B 0020             		move.b	#$8B,$20(a0)
00013286 117C 000C 0019             		move.b	#$C,$19(a0)
0001328C 3168 0008 0030             		move.w	8(a0),$30(a0)
00013292 0668 0028 0008             		addi.w	#$28,8(a0)
00013298 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001329E 117C 0001 001A             		move.b	#1,$1A(a0)
000132A4 0828 0000 0022             		btst	#0,$22(a0)
000132AA 6700                       		beq.s	Obj5E_MoveSpike
000132AC 0468 0050 0008             		subi.w	#$50,8(a0)
000132B2 117C 0002 003A             		move.b	#2,$3A(a0)
000132B8                            
000132B8                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000132B8 2268 003C                  		movea.l	$3C(a0),a1
000132BC 7000                       		moveq	#0,d0
000132BE 1028 003A                  		move.b	$3A(a0),d0
000132C2 9029 003A                  		sub.b	$3A(a1),d0
000132C6 6700                       		beq.s	loc_1183E
000132C8 6400                       		bcc.s	loc_117FC
000132CA 4400                       		neg.b	d0
000132CC                            
000132CC                            loc_117FC:
000132CC 323C F7E8                  		move.w	#-$818,d1
000132D0 343C FEEC                  		move.w	#-$114,d2
000132D4 0C00 0001                  		cmpi.b	#1,d0
000132D8 6700                       		beq.s	loc_11822
000132DA 323C F510                  		move.w	#-$AF0,d1
000132DE 343C FF34                  		move.w	#-$CC,d2
000132E2 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000132E8 6D00                       		blt.s	loc_11822
000132EA 323C F200                  		move.w	#-$E00,d1
000132EE 343C FF60                  		move.w	#-$A0,d2
000132F2                            
000132F2                            loc_11822:
000132F2 3141 0012                  		move.w	d1,$12(a0)
000132F6 3142 0010                  		move.w	d2,$10(a0)
000132FA 3028 0008                  		move.w	8(a0),d0
000132FE 9068 0030                  		sub.w	$30(a0),d0
00013302 6400                       		bcc.s	loc_11838
00013304 4468 0010                  		neg.w	$10(a0)
00013308                            
00013308                            loc_11838:
00013308 5428 0024                  		addq.b	#2,$24(a0)
0001330C 6000                       		bra.s	Obj5E_SpikeFall
0001330E                            ; ===========================================================================
0001330E                            
0001330E                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001330E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013314 7000                       		moveq	#0,d0
00013316 1029 001A                  		move.b	$1A(a1),d0
0001331A 343C 0028                  		move.w	#$28,d2
0001331E 3228 0008                  		move.w	8(a0),d1
00013322 9268 0030                  		sub.w	$30(a0),d1
00013326 6400                       		bcc.s	loc_1185C
00013328 4442                       		neg.w	d2
0001332A 5440                       		addq.w	#2,d0
0001332C                            
0001332C                            loc_1185C:
0001332C D040                       		add.w	d0,d0
0001332E 3228 0034                  		move.w	$34(a0),d1
00013332 D272 0000                  		add.w	(a2,d0.w),d1
00013336 3141 000C                  		move.w	d1,$C(a0)
0001333A D468 0030                  		add.w	$30(a0),d2
0001333E 3142 0008                  		move.w	d2,8(a0)
00013342 4268 000E                  		clr.w	$E(a0)
00013346 4268 000A                  		clr.w	$A(a0)
0001334A 4E75                       		rts	
0001334C                            ; ===========================================================================
0001334C                            
0001334C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001334C 4A68 0012                  		tst.w	$12(a0)
00013350 6A00                       		bpl.s	loc_1189A
00013352 6100 BD3C                  		bsr.w	ObjectFall
00013356 3028 0034                  		move.w	$34(a0),d0
0001335A 0440 002F                  		subi.w	#$2F,d0
0001335E B068 000C                  		cmp.w	$C(a0),d0
00013362 6E00                       		bgt.s	locret_11898
00013364 6100 BD2A                  		bsr.w	ObjectFall
00013368                            
00013368                            locret_11898:
00013368 4E75                       		rts	
0001336A                            ; ===========================================================================
0001336A                            
0001336A                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001336A 6100 BD24                  		bsr.w	ObjectFall
0001336E 2268 003C                  		movea.l	$3C(a0),a1
00013372 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013378 7000                       		moveq	#0,d0
0001337A 1029 001A                  		move.b	$1A(a1),d0
0001337E 3228 0008                  		move.w	8(a0),d1
00013382 9268 0030                  		sub.w	$30(a0),d1
00013386 6400                       		bcc.s	loc_118BA
00013388 5440                       		addq.w	#2,d0
0001338A                            
0001338A                            loc_118BA:
0001338A D040                       		add.w	d0,d0
0001338C 3228 0034                  		move.w	$34(a0),d1
00013390 D272 0000                  		add.w	(a2,d0.w),d1
00013394 B268 000C                  		cmp.w	$C(a0),d1
00013398 6E00                       		bgt.s	locret_11938
0001339A 2268 003C                  		movea.l	$3C(a0),a1
0001339E 7202                       		moveq	#2,d1
000133A0 4A68 0010                  		tst.w	$10(a0)
000133A4 6B00                       		bmi.s	Obj5E_Spring
000133A6 7200                       		moveq	#0,d1
000133A8                            
000133A8                            Obj5E_Spring:
000133A8 1341 003A                  		move.b	d1,$3A(a1)
000133AC 1141 003A                  		move.b	d1,$3A(a0)
000133B0 B229 001A                  		cmp.b	$1A(a1),d1
000133B4 6700                       		beq.s	loc_1192C
000133B6 08A9 0003 0022             		bclr	#3,$22(a1)
000133BC 6700                       		beq.s	loc_1192C
000133BE 4229 0025                  		clr.b	$25(a1)
000133C2 137C 0002 0024             		move.b	#2,$24(a1)
000133C8 45F8 D000                  		lea	($FFFFD000).w,a2
000133CC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000133D2 446A 0012                  		neg.w	$12(a2)
000133D6 08EA 0001 0022             		bset	#1,$22(a2)
000133DC 08AA 0003 0022             		bclr	#3,$22(a2)
000133E2 422A 003C                  		clr.b	$3C(a2)
000133E6 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000133EC 157C 0002 0024             		move.b	#2,$24(a2)
000133F2 303C 00CC                  		move.w	#$CC,d0
000133F6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
000133FC                            
000133FC                            loc_1192C:
000133FC 4268 0010                  		clr.w	$10(a0)
00013400 4268 0012                  		clr.w	$12(a0)
00013404 5528 0024                  		subq.b	#2,$24(a0)
00013408                            
00013408                            locret_11938:
00013408 4E75                       		rts	
0001340A                            ; ===========================================================================
0001340A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00013414                            
00013414                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00013444                            		even
00013444                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013474                            		even
00013474                            ; ---------------------------------------------------------------------------
00013474                            ; Sprite mappings - seesaws (SLZ)
00013474                            ; ---------------------------------------------------------------------------
00013474                            Map_obj5E:
00013474                            	include "_maps\obj5E.asm"
00013474                            ; ---------------------------------------------------------------------------
00013474                            ; Sprite mappings - seesaws (SLZ)
00013474                            ; ---------------------------------------------------------------------------
00013474 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013478 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001347C 07                         byte_119AC:	dc.b 7
0001347D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013482 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013487 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001348C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013491 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013496 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001349B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000134A0 04                         byte_119D0:	dc.b 4
000134A1 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000134A6 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000134AB E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000134B0 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000134B6 00                         		even
000134B6 00                         		even
000134B6                            
000134B6                            ; ---------------------------------------------------------------------------
000134B6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000134B6                            ; ---------------------------------------------------------------------------
000134B6                            Map_obj5Ea:
000134B6                            	include "_maps\obj5Eballs.asm"
000134B6                            ; ---------------------------------------------------------------------------
000134B6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000134B6                            ; ---------------------------------------------------------------------------
000134B6 0000                       		dc.w byte_119EA-Map_obj5Ea
000134B8 0000                       		dc.w byte_119F0-Map_obj5Ea
000134BA 01                         byte_119EA:	dc.b 1
000134BB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000134C0 01                         byte_119F0:	dc.b 1
000134C1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000134C6                            		even
000134C6                            		even
000134C6                            
000134C6                            ; ===========================================================================
000134C6                            ; ---------------------------------------------------------------------------
000134C6                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000134C6                            ; ---------------------------------------------------------------------------
000134C6                            
000134C6                            Obj5F:					; XREF: Obj_Index
000134C6 7000                       		moveq	#0,d0
000134C8 1028 0024                  		move.b	$24(a0),d0
000134CC 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000134D0 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000134D4                            ; ===========================================================================
000134D4 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000134D6 0000                       		dc.w Obj5F_Action-Obj5F_Index
000134D8 0000                       		dc.w Obj5F_Display-Obj5F_Index
000134DA 0000                       		dc.w Obj5F_End-Obj5F_Index
000134DC                            ; ===========================================================================
000134DC                            
000134DC                            Obj5F_Main:				; XREF: Obj5F_Index
000134DC 5428 0024                  		addq.b	#2,$24(a0)
000134E0 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000134E8 317C 0400 0002             		move.w	#$400,2(a0)
000134EE 0028 0004 0001             		ori.b	#4,1(a0)
000134F4 117C 0003 0018             		move.b	#3,$18(a0)
000134FA 117C 000C 0019             		move.b	#$C,$19(a0)
00013500 1028 0028                  		move.b	$28(a0),d0
00013504 6700                       		beq.s	loc_11A3C
00013506 1140 0024                  		move.b	d0,$24(a0)
0001350A 4E75                       		rts	
0001350C                            ; ===========================================================================
0001350C                            
0001350C                            loc_11A3C:
0001350C 117C 009A 0020             		move.b	#$9A,$20(a0)
00013512 0868 0000 0022             		bchg	#0,$22(a0)
00013518                            
00013518                            Obj5F_Action:				; XREF: Obj5F_Index
00013518 7000                       		moveq	#0,d0
0001351A 1028 0025                  		move.b	$25(a0),d0
0001351E 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00013522 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00013526 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001352C 6100 8CDE                  		bsr.w	AnimateSprite
00013530 6000 DC4E                  		bra.w	MarkObjGone
00013534                            ; ===========================================================================
00013534 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00013536 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00013538 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001353A                            ; ===========================================================================
0001353A                            
0001353A                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001353A 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001353E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013542 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00013544 5428 0025                  		addq.b	#2,$25(a0)
00013548 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001354E 317C 0010 0010             		move.w	#$10,$10(a0)
00013554 117C 0001 001C             		move.b	#1,$1C(a0)
0001355A 0868 0000 0022             		bchg	#0,$22(a0)
00013560 6700                       		beq.s	locret_11A96
00013562 4468 0010                  		neg.w	$10(a0)		; change direction
00013566                            
00013566                            locret_11A96:
00013566 4E75                       		rts	
00013568                            ; ===========================================================================
00013568                            
00013568                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013568 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001356C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013570 6B00                       		bmi.s	loc_11AA8
00013572 6100 BB3C                  		bsr.w	SpeedToPos
00013576 4E75                       		rts	
00013578                            ; ===========================================================================
00013578                            
00013578                            loc_11AA8:
00013578 5528 0025                  		subq.b	#2,$25(a0)
0001357C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00013582 4268 0010                  		clr.w	$10(a0)		; stop walking
00013586 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001358C 4E75                       		rts	
0001358E                            ; ===========================================================================
0001358E                            
0001358E                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001358E 5368 0030                  		subq.w	#1,$30(a0)
00013592 6A00                       		bpl.s	locret_11AD0
00013594 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00013598 117C 0000 0024             		move.b	#0,$24(a0)
0001359E                            
0001359E                            locret_11AD0:
0001359E 4E75                       		rts	
000135A0                            ; ===========================================================================
000135A0                            
000135A0                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000135A0 3038 D008                  		move.w	($FFFFD008).w,d0
000135A4 9068 0008                  		sub.w	8(a0),d0
000135A8 6400                       		bcc.s	loc_11ADE
000135AA 4440                       		neg.w	d0
000135AC                            
000135AC                            loc_11ADE:
000135AC 0C40 0060                  		cmpi.w	#$60,d0
000135B0 6400                       		bcc.s	locret_11B5E
000135B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000135B6 9068 000C                  		sub.w	$C(a0),d0
000135BA 6400                       		bcc.s	Obj5F_MakeFuse
000135BC 4440                       		neg.w	d0
000135BE                            
000135BE                            Obj5F_MakeFuse:
000135BE 0C40 0060                  		cmpi.w	#$60,d0
000135C2 6400                       		bcc.s	locret_11B5E
000135C4 4A78 FE08                  		tst.w	($FFFFFE08).w
000135C8 6600                       		bne.s	locret_11B5E
000135CA 117C 0004 0025             		move.b	#4,$25(a0)
000135D0 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000135D6 4268 0010                  		clr.w	$10(a0)
000135DA 117C 0002 001C             		move.b	#2,$1C(a0)
000135E0 6100 BF92                  		bsr.w	SingleObjLoad2
000135E4 6600                       		bne.s	locret_11B5E
000135E6 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000135EA 3368 0008 0008             		move.w	8(a0),8(a1)
000135F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000135F6 3368 000C 0034             		move.w	$C(a0),$34(a1)
000135FC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013602 137C 0004 0028             		move.b	#4,$28(a1)
00013608 137C 0003 001C             		move.b	#3,$1C(a1)
0001360E 337C 0010 0012             		move.w	#$10,$12(a1)
00013614 0828 0001 0022             		btst	#1,$22(a0)
0001361A 6700                       		beq.s	loc_11B54
0001361C 4469 0012                  		neg.w	$12(a1)
00013620                            
00013620                            loc_11B54:
00013620 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00013626 2348 003C                  		move.l	a0,$3C(a1)
0001362A                            
0001362A                            locret_11B5E:
0001362A 4E75                       		rts	
0001362C                            ; ===========================================================================
0001362C                            
0001362C                            Obj5F_Display:				; XREF: Obj5F_Index
0001362C 6100                       		bsr.s	loc_11B70
0001362E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013634 6100 8BD6                  		bsr.w	AnimateSprite
00013638 6000 DB46                  		bra.w	MarkObjGone
0001363C                            ; ===========================================================================
0001363C                            
0001363C                            loc_11B70:
0001363C 5368 0030                  		subq.w	#1,$30(a0)
00013640 6B00                       		bmi.s	loc_11B7C
00013642 6100 BA6C                  		bsr.w	SpeedToPos
00013646 4E75                       		rts	
00013648                            ; ===========================================================================
00013648                            
00013648                            loc_11B7C:
00013648 4268 0030                  		clr.w	$30(a0)
0001364C 4228 0024                  		clr.b	$24(a0)
00013650 3168 0034 000C             		move.w	$34(a0),$C(a0)
00013656 7203                       		moveq	#3,d1
00013658 2248                       		movea.l	a0,a1
0001365A 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00013660 6000                       		bra.s	Obj5F_MakeShrap
00013662                            ; ===========================================================================
00013662                            
00013662                            Obj5F_Loop:
00013662 6100 BF10                  		bsr.w	SingleObjLoad2
00013666 6600                       		bne.s	loc_11BCE
00013668                            
00013668                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013668 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001366C 3368 0008 0008             		move.w	8(a0),8(a1)
00013672 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013678 137C 0006 0028             		move.b	#6,$28(a1)
0001367E 137C 0004 001C             		move.b	#4,$1C(a1)
00013684 335A 0010                  		move.w	(a2)+,$10(a1)
00013688 335A 0012                  		move.w	(a2)+,$12(a1)
0001368C 137C 0098 0020             		move.b	#$98,$20(a1)
00013692 08E9 0007 0001             		bset	#7,1(a1)
00013698                            
00013698                            loc_11BCE:
00013698 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001369C                            
0001369C 117C 0006 0024             		move.b	#6,$24(a0)
000136A2                            
000136A2                            Obj5F_End:				; XREF: Obj5F_Index
000136A2 6100 BA0C                  		bsr.w	SpeedToPos
000136A6 0668 0018 0012             		addi.w	#$18,$12(a0)
000136AC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000136B2 6100 8B58                  		bsr.w	AnimateSprite
000136B6 4A28 0001                  		tst.b	1(a0)
000136BA 6A00 BA4A                  		bpl.w	DeleteObject
000136BE 6000 BA0A                  		bra.w	DisplaySprite
000136C2                            ; ===========================================================================
000136C2 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000136D2                            
000136D2                            Ani_obj5F:
000136D2                            	include "_anim\obj5F.asm"
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            ; Animation script - Bomb enemy
000136D2                            ; ---------------------------------------------------------------------------
000136D2 0000                       		dc.w byte_11C12-Ani_obj5F
000136D4 0000                       		dc.w byte_11C16-Ani_obj5F
000136D6 0000                       		dc.w byte_11C1C-Ani_obj5F
000136D8 0000                       		dc.w byte_11C20-Ani_obj5F
000136DA 0000                       		dc.w byte_11C24-Ani_obj5F
000136DC 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000136E0 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000136E6 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000136EA 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000136EE 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000136F2                            		even
000136F2                            		even
000136F2                            
000136F2                            ; ---------------------------------------------------------------------------
000136F2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000136F2                            ; ---------------------------------------------------------------------------
000136F2                            Map_obj5F:
000136F2                            	include "_maps\obj5F.asm"
000136F2                            ; ---------------------------------------------------------------------------
000136F2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000136F2                            ; ---------------------------------------------------------------------------
000136F2 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000136F6 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000136FA 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000136FE 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00013702 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00013706 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001370A 03                         byte_11C40:	dc.b 3
0001370B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013710 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013715 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001371A 03                         byte_11C50:	dc.b 3
0001371B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013720 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013725 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001372A 03                         byte_11C60:	dc.b 3
0001372B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013730 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013735 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001373A 03                         byte_11C70:	dc.b 3
0001373B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013740 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013745 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001374A 03                         byte_11C80:	dc.b 3
0001374B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013750 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013755 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001375A 03                         byte_11C90:	dc.b 3
0001375B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013760 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013765 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001376A 02                         byte_11CA0:	dc.b 2
0001376B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013770 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013775 02                         byte_11CAB:	dc.b 2
00013776 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001377B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013780 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00013781 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00013786 01                         byte_11CBC:	dc.b 1			; fuse
00013787 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001378C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001378D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013792 01                         byte_11CC8:	dc.b 1			; fireball
00013793 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013798                            		even
00013798                            		even
00013798                            
00013798                            ; ===========================================================================
00013798                            ; ---------------------------------------------------------------------------
00013798                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013798                            ; ---------------------------------------------------------------------------
00013798                            
00013798                            Obj60:					; XREF: Obj_Index
00013798 7000                       		moveq	#0,d0
0001379A 1028 0024                  		move.b	$24(a0),d0
0001379E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000137A2 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000137A6                            ; ===========================================================================
000137A6 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000137A8 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000137AA 0000                       		dc.w Obj60_Display-Obj60_Index
000137AC 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000137AE 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000137B0                            ; ===========================================================================
000137B0                            
000137B0                            Obj60_Main:				; XREF: Obj60_Index
000137B0 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000137B8 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000137BE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000137C4 6700                       		beq.s	loc_11D02
000137C6 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000137CC                            
000137CC                            loc_11D02:
000137CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000137D2 6600                       		bne.s	loc_11D10
000137D4 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000137DA                            
000137DA                            loc_11D10:
000137DA 0028 0004 0001             		ori.b	#4,1(a0)
000137E0 117C 0004 0018             		move.b	#4,$18(a0)
000137E6 117C 000B 0020             		move.b	#$B,$20(a0)
000137EC 117C 000C 0019             		move.b	#$C,$19(a0)
000137F2 7400                       		moveq	#0,d2
000137F4 45E8 0037                  		lea	$37(a0),a2
000137F8 264A                       		movea.l	a2,a3
000137FA 524A                       		addq.w	#1,a2
000137FC 7203                       		moveq	#3,d1
000137FE                            
000137FE                            Obj60_MakeOrbs:
000137FE 6100 BD74                  		bsr.w	SingleObjLoad2
00013802 6600                       		bne.s	loc_11D90
00013804 5213                       		addq.b	#1,(a3)
00013806 3A09                       		move.w	a1,d5
00013808 0445 D000                  		subi.w	#-$3000,d5
0001380C EC4D                       		lsr.w	#6,d5
0001380E 0245 007F                  		andi.w	#$7F,d5
00013812 14C5                       		move.b	d5,(a2)+
00013814 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013816 137C 0006 0024             		move.b	#6,$24(a1)
0001381C 2368 0004 0004             		move.l	4(a0),4(a1)
00013822 3368 0002 0002             		move.w	2(a0),2(a1)
00013828 0029 0004 0001             		ori.b	#4,1(a1)
0001382E 137C 0004 0018             		move.b	#4,$18(a1)
00013834 137C 0008 0019             		move.b	#8,$19(a1)
0001383A 137C 0003 001A             		move.b	#3,$1A(a1)
00013840 137C 0098 0020             		move.b	#$98,$20(a1)
00013846 1342 0026                  		move.b	d2,$26(a1)
0001384A 0602 0040                  		addi.b	#$40,d2
0001384E 2348 003C                  		move.l	a0,$3C(a1)
00013852 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00013856                            
00013856                            loc_11D90:
00013856 7001                       		moveq	#1,d0
00013858 0828 0000 0022             		btst	#0,$22(a0)
0001385E 6700                       		beq.s	Obj60_Move
00013860 4440                       		neg.w	d0
00013862                            
00013862                            Obj60_Move:
00013862 1140 0036                  		move.b	d0,$36(a0)
00013866 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001386C 5428 0024                  		addq.b	#2,$24(a0)
00013870 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00013876 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001387C 6700                       		beq.s	locret_11DBC	; if not, branch
0001387E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00013882                            
00013882                            locret_11DBC:
00013882 4E75                       		rts	
00013884                            ; ===========================================================================
00013884                            
00013884                            Obj60_ChkSonic:				; XREF: Obj60_Index
00013884 3038 D008                  		move.w	($FFFFD008).w,d0
00013888 9068 0008                  		sub.w	8(a0),d0
0001388C 6400                       		bcc.s	loc_11DCA
0001388E 4440                       		neg.w	d0
00013890                            
00013890                            loc_11DCA:
00013890 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013894 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013896 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001389A 9068 000C                  		sub.w	$C(a0),d0
0001389E 6400                       		bcc.s	loc_11DDC
000138A0 4440                       		neg.w	d0
000138A2                            
000138A2                            loc_11DDC:
000138A2 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000138A6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000138A8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000138AC 6600                       		bne.s	Obj60_Animate	; if yes, branch
000138AE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000138B4                            
000138B4                            Obj60_Animate:
000138B4 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000138BA 6100 8950                  		bsr.w	AnimateSprite
000138BE 6000 0000                  		bra.w	Obj60_ChkDel
000138C2                            ; ===========================================================================
000138C2                            
000138C2                            Obj60_Display:				; XREF: Obj60_Index
000138C2 6100 B7EC                  		bsr.w	SpeedToPos
000138C6                            
000138C6                            Obj60_ChkDel:				; XREF: Obj60_Animate
000138C6 3028 0008                  		move.w	8(a0),d0
000138CA 0240 FF80                  		andi.w	#$FF80,d0
000138CE 3238 F700                  		move.w	($FFFFF700).w,d1
000138D2 0441 0080                  		subi.w	#$80,d1
000138D6 0241 FF80                  		andi.w	#$FF80,d1
000138DA 9041                       		sub.w	d1,d0
000138DC 0C40 0280                  		cmpi.w	#$280,d0
000138E0 6200 0000                  		bhi.w	Obj60_ChkGone
000138E4 6000 B7E4                  		bra.w	DisplaySprite
000138E8                            ; ===========================================================================
000138E8                            
000138E8                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000138E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000138EC 7000                       		moveq	#0,d0
000138EE 1028 0023                  		move.b	$23(a0),d0
000138F2 6700                       		beq.s	loc_11E34
000138F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000138FA                            
000138FA                            loc_11E34:
000138FA 45E8 0037                  		lea	$37(a0),a2
000138FE 7400                       		moveq	#0,d2
00013900 141A                       		move.b	(a2)+,d2
00013902 5342                       		subq.w	#1,d2
00013904 6500                       		bcs.s	Obj60_Delete
00013906                            
00013906                            loc_11E40:
00013906 7000                       		moveq	#0,d0
00013908 101A                       		move.b	(a2)+,d0
0001390A ED48                       		lsl.w	#6,d0
0001390C 0680 00FF D000             		addi.l	#$FFD000,d0
00013912 2240                       		movea.l	d0,a1
00013914 6100 B7F2                  		bsr.w	DeleteObject2
00013918 51CA FFEC                  		dbf	d2,loc_11E40
0001391C                            
0001391C                            Obj60_Delete:
0001391C 6000 B7E8                  		bra.w	DeleteObject
00013920                            ; ===========================================================================
00013920                            
00013920                            Obj60_MoveOrb:				; XREF: Obj60_Index
00013920 2268 003C                  		movea.l	$3C(a0),a1
00013924 0C11 0060                  		cmpi.b	#$60,0(a1)
00013928 6600 B7DC                  		bne.w	DeleteObject
0001392C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00013932 6600                       		bne.s	Obj60_Circle
00013934 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001393A 6600                       		bne.s	Obj60_Circle
0001393C 5428 0024                  		addq.b	#2,$24(a0)
00013940 5329 0037                  		subq.b	#1,$37(a1)
00013944 6600                       		bne.s	Obj60_FireOrb
00013946 5429 0024                  		addq.b	#2,$24(a1)
0001394A                            
0001394A                            Obj60_FireOrb:
0001394A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00013950 0829 0000 0022             		btst	#0,$22(a1)
00013956 6700                       		beq.s	Obj60_Display2
00013958 4468 0010                  		neg.w	$10(a0)
0001395C                            
0001395C                            Obj60_Display2:
0001395C 6000 B76C                  		bra.w	DisplaySprite
00013960                            ; ===========================================================================
00013960                            
00013960                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00013960 1028 0026                  		move.b	$26(a0),d0
00013964 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001396A E841                       		asr.w	#4,d1
0001396C D269 0008                  		add.w	8(a1),d1
00013970 3141 0008                  		move.w	d1,8(a0)
00013974 E840                       		asr.w	#4,d0
00013976 D069 000C                  		add.w	$C(a1),d0
0001397A 3140 000C                  		move.w	d0,$C(a0)
0001397E 1029 0036                  		move.b	$36(a1),d0
00013982 D128 0026                  		add.b	d0,$26(a0)
00013986 6000 B742                  		bra.w	DisplaySprite
0001398A                            ; ===========================================================================
0001398A                            
0001398A                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001398A 6100 B724                  		bsr.w	SpeedToPos
0001398E 4A28 0001                  		tst.b	1(a0)
00013992 6A00 B772                  		bpl.w	DeleteObject
00013996 6000 B732                  		bra.w	DisplaySprite
0001399A                            ; ===========================================================================
0001399A                            Ani_obj60:
0001399A                            	include "_anim\obj60.asm"
0001399A                            ; ---------------------------------------------------------------------------
0001399A                            ; Animation script - Orbinaut enemy
0001399A                            ; ---------------------------------------------------------------------------
0001399A 0000                       		dc.w byte_11EDA-Ani_obj60
0001399C 0000                       		dc.w byte_11EDE-Ani_obj60
0001399E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000139A2 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000139A8                            		even
000139A8                            		even
000139A8                            
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            Map_obj60:
000139A8                            	include "_maps\obj60.asm"
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000139A8                            ; ---------------------------------------------------------------------------
000139A8 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000139AC 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000139B0 01                         byte_11EEC:	dc.b 1
000139B1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000139B6 01                         byte_11EF2:	dc.b 1
000139B7 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000139BC 01                         byte_11EF8:	dc.b 1
000139BD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000139C2 01                         byte_11EFE:	dc.b 1
000139C3 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000139C8                            		even
000139C8                            		even
000139C8                            
000139C8                            ; ===========================================================================
000139C8                            ; ---------------------------------------------------------------------------
000139C8                            ; Object 16 - harpoon (LZ)
000139C8                            ; ---------------------------------------------------------------------------
000139C8                            
000139C8                            Obj16:					; XREF: Obj_Index
000139C8 7000                       		moveq	#0,d0
000139CA 1028 0024                  		move.b	$24(a0),d0
000139CE 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000139D2 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000139D6                            ; ===========================================================================
000139D6 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000139D8 0000                       		dc.w Obj16_Move-Obj16_Index
000139DA 0000                       		dc.w Obj16_Wait-Obj16_Index
000139DC                            ; ===========================================================================
000139DC                            
000139DC                            Obj16_Main:				; XREF: Obj16_Index
000139DC 5428 0024                  		addq.b	#2,$24(a0)
000139E0 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000139E8 317C 03CC 0002             		move.w	#$3CC,2(a0)
000139EE 0028 0004 0001             		ori.b	#4,1(a0)
000139F4 117C 0004 0018             		move.b	#4,$18(a0)
000139FA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013A00 117C 0014 0019             		move.b	#$14,$19(a0)
00013A06 317C 003C 0030             		move.w	#60,$30(a0)
00013A0C                            
00013A0C                            Obj16_Move:				; XREF: Obj16_Index
00013A0C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013A12 6100 87F8                  		bsr.w	AnimateSprite
00013A16 7000                       		moveq	#0,d0
00013A18 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013A1C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013A22 6000 D75C                  		bra.w	MarkObjGone
00013A26                            ; ===========================================================================
00013A26 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013A2C                            ; ===========================================================================
00013A2C                            
00013A2C                            Obj16_Wait:				; XREF: Obj16_Index
00013A2C 5368 0030                  		subq.w	#1,$30(a0)
00013A30 6A00                       		bpl.s	Obj16_ChkDel
00013A32 317C 003C 0030             		move.w	#60,$30(a0)
00013A38 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013A3C 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013A42                            
00013A42                            Obj16_ChkDel:
00013A42 6000 D73C                  		bra.w	MarkObjGone
00013A46                            ; ===========================================================================
00013A46                            Ani_obj16:
00013A46                            	include "_anim\obj16.asm"
00013A46                            ; ---------------------------------------------------------------------------
00013A46                            ; Animation script - harpoon (LZ)
00013A46                            ; ---------------------------------------------------------------------------
00013A46 0000                       		dc.w byte_11F8A-Ani_obj16
00013A48 0000                       		dc.w byte_11F8E-Ani_obj16
00013A4A 0000                       		dc.w byte_11F92-Ani_obj16
00013A4C 0000                       		dc.w byte_11F96-Ani_obj16
00013A4E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013A52 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013A56 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013A5A 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013A5E                            		even
00013A5E                            		even
00013A5E                            
00013A5E                            ; ---------------------------------------------------------------------------
00013A5E                            ; Sprite mappings - harpoon (LZ)
00013A5E                            ; ---------------------------------------------------------------------------
00013A5E                            Map_obj16:
00013A5E                            	include "_maps\obj16.asm"
00013A5E                            ; ---------------------------------------------------------------------------
00013A5E                            ; Sprite mappings - harpoon (LZ)
00013A5E                            ; ---------------------------------------------------------------------------
00013A5E 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00013A62 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013A66 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013A6A 01                         byte_11FA6:	dc.b 1
00013A6B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013A70 01                         byte_11FAC:	dc.b 1
00013A71 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013A76 02                         byte_11FB2:	dc.b 2
00013A77 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013A7C FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013A81 01                         byte_11FBD:	dc.b 1
00013A82 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013A87 01                         byte_11FC3:	dc.b 1
00013A88 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013A8D 02                         byte_11FC9:	dc.b 2
00013A8E D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013A93 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013A98                            		even
00013A98                            		even
00013A98                            
00013A98                            ; ===========================================================================
00013A98                            ; ---------------------------------------------------------------------------
00013A98                            ; Object 61 - blocks (LZ)
00013A98                            ; ---------------------------------------------------------------------------
00013A98                            
00013A98                            Obj61:					; XREF: Obj_Index
00013A98 7000                       		moveq	#0,d0
00013A9A 1028 0024                  		move.b	$24(a0),d0
00013A9E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013AA2 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013AA6                            ; ===========================================================================
00013AA6 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013AA8 0000                       		dc.w Obj61_Action-Obj61_Index
00013AAA                            
00013AAA 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013AAC 200C                       		dc.b $20, $C
00013AAE 1010                       		dc.b $10, $10
00013AB0 1010                       		dc.b $10, $10
00013AB2                            ; ===========================================================================
00013AB2                            
00013AB2                            Obj61_Main:				; XREF: Obj61_Index
00013AB2 5428 0024                  		addq.b	#2,$24(a0)
00013AB6 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013ABE 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013AC4 117C 0004 0001             		move.b	#4,1(a0)
00013ACA 117C 0003 0018             		move.b	#3,$18(a0)
00013AD0 7000                       		moveq	#0,d0
00013AD2 1028 0028                  		move.b	$28(a0),d0
00013AD6 E648                       		lsr.w	#3,d0
00013AD8 0240 000E                  		andi.w	#$E,d0
00013ADC 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013AE0 115A 0019                  		move.b	(a2)+,$19(a0)
00013AE4 1152 0016                  		move.b	(a2),$16(a0)
00013AE8 E248                       		lsr.w	#1,d0
00013AEA 1140 001A                  		move.b	d0,$1A(a0)
00013AEE 3168 0008 0034             		move.w	8(a0),$34(a0)
00013AF4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013AFA 1028 0028                  		move.b	$28(a0),d0
00013AFE 0200 000F                  		andi.b	#$F,d0
00013B02 6700                       		beq.s	Obj61_Action
00013B04 0C00 0007                  		cmpi.b	#7,d0
00013B08 6700                       		beq.s	Obj61_Action
00013B0A 117C 0001 0038             		move.b	#1,$38(a0)
00013B10                            
00013B10                            Obj61_Action:				; XREF: Obj61_Index
00013B10 3F28 0008                  		move.w	8(a0),-(sp)
00013B14 7000                       		moveq	#0,d0
00013B16 1028 0028                  		move.b	$28(a0),d0
00013B1A 0240 000F                  		andi.w	#$F,d0
00013B1E D040                       		add.w	d0,d0
00013B20 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013B24 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013B28 381F                       		move.w	(sp)+,d4
00013B2A 4A28 0001                  		tst.b	1(a0)
00013B2E 6A00                       		bpl.s	Obj61_ChkDel
00013B30 7200                       		moveq	#0,d1
00013B32 1228 0019                  		move.b	$19(a0),d1
00013B36 0641 000B                  		addi.w	#$B,d1
00013B3A 7400                       		moveq	#0,d2
00013B3C 1428 0016                  		move.b	$16(a0),d2
00013B40 3602                       		move.w	d2,d3
00013B42 5243                       		addq.w	#1,d3
00013B44 6100 D962                  		bsr.w	SolidObject
00013B48 1144 003F                  		move.b	d4,$3F(a0)
00013B4C 6100 0000                  		bsr.w	loc_12180
00013B50                            
00013B50                            Obj61_ChkDel:
00013B50 3028 0034                  		move.w	$34(a0),d0
00013B54 0240 FF80                  		andi.w	#$FF80,d0
00013B58 3238 F700                  		move.w	($FFFFF700).w,d1
00013B5C 0441 0080                  		subi.w	#$80,d1
00013B60 0241 FF80                  		andi.w	#$FF80,d1
00013B64 9041                       		sub.w	d1,d0
00013B66 0C40 0280                  		cmpi.w	#$280,d0
00013B6A 6200 B59A                  		bhi.w	DeleteObject
00013B6E 6000 B55A                  		bra.w	DisplaySprite
00013B72                            ; ===========================================================================
00013B72 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013B76 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013B7A 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013B7E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013B82                            ; ===========================================================================
00013B82                            
00013B82                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013B82 4E75                       		rts	
00013B84                            ; ===========================================================================
00013B84                            
00013B84                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013B84 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013B88 6600                       		bne.s	loc_120D6	; if yes, branch
00013B8A 0828 0003 0022             		btst	#3,$22(a0)
00013B90 6700                       		beq.s	locret_120D4
00013B92 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013B98                            
00013B98                            locret_120D4:
00013B98 4E75                       		rts	
00013B9A                            ; ===========================================================================
00013B9A                            
00013B9A                            loc_120D6:
00013B9A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013B9E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013BA0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013BA4 4228 0038                  		clr.b	$38(a0)
00013BA8 4E75                       		rts	
00013BAA                            ; ===========================================================================
00013BAA                            
00013BAA                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013BAA 6100 B504                  		bsr.w	SpeedToPos
00013BAE 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013BB2 6100 0000                  		bsr.w	ObjHitFloor
00013BB6 4A41                       		tst.w	d1
00013BB8 6A00 0000                  		bpl.w	locret_12106
00013BBC 5241                       		addq.w	#1,d1
00013BBE D368 000C                  		add.w	d1,$C(a0)
00013BC2 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013BC6 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013BCA                            
00013BCA                            locret_12106:
00013BCA 4E75                       		rts	
00013BCC                            ; ===========================================================================
00013BCC                            
00013BCC                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013BCC 6100 B4E2                  		bsr.w	SpeedToPos
00013BD0 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013BD4 6100 0000                  		bsr.w	ObjHitCeiling
00013BD8 4A41                       		tst.w	d1
00013BDA 6A00 0000                  		bpl.w	locret_12126
00013BDE 9368 000C                  		sub.w	d1,$C(a0)
00013BE2 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013BE6 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013BEA                            
00013BEA                            locret_12126:
00013BEA 4E75                       		rts	
00013BEC                            ; ===========================================================================
00013BEC                            
00013BEC                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013BEC 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013BF2 6600                       		bne.s	locret_12138	; if not, branch
00013BF4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013BF8 4228 0038                  		clr.b	$38(a0)
00013BFC                            
00013BFC                            locret_12138:
00013BFC 4E75                       		rts	
00013BFE                            ; ===========================================================================
00013BFE                            
00013BFE                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013BFE 3038 F646                  		move.w	($FFFFF646).w,d0
00013C02 9068 000C                  		sub.w	$C(a0),d0
00013C06 6700                       		beq.s	locret_1217E
00013C08 6400                       		bcc.s	loc_12162
00013C0A 0C40 FFFE                  		cmpi.w	#-2,d0
00013C0E 6C00                       		bge.s	loc_1214E
00013C10 70FE                       		moveq	#-2,d0
00013C12                            
00013C12                            loc_1214E:
00013C12 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013C16 6100 0000                  		bsr.w	ObjHitCeiling
00013C1A 4A41                       		tst.w	d1
00013C1C 6A00 0000                  		bpl.w	locret_12160
00013C20 9368 000C                  		sub.w	d1,$C(a0)
00013C24                            
00013C24                            locret_12160:
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_12162:				; XREF: Obj61_Type07
00013C26 0C40 0002                  		cmpi.w	#2,d0
00013C2A 6F00                       		ble.s	loc_1216A
00013C2C 7002                       		moveq	#2,d0
00013C2E                            
00013C2E                            loc_1216A:
00013C2E D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013C32 6100 0000                  		bsr.w	ObjHitFloor
00013C36 4A41                       		tst.w	d1
00013C38 6A00 0000                  		bpl.w	locret_1217E
00013C3C 5241                       		addq.w	#1,d1
00013C3E D368 000C                  		add.w	d1,$C(a0)
00013C42                            
00013C42                            locret_1217E:
00013C42 4E75                       		rts	
00013C44                            ; ===========================================================================
00013C44                            
00013C44                            loc_12180:				; XREF: Obj61_Action
00013C44 4A28 0038                  		tst.b	$38(a0)
00013C48 6700                       		beq.s	locret_121C0
00013C4A 0828 0003 0022             		btst	#3,$22(a0)
00013C50 6600                       		bne.s	loc_1219A
00013C52 4A28 003E                  		tst.b	$3E(a0)
00013C56 6700                       		beq.s	locret_121C0
00013C58 5928 003E                  		subq.b	#4,$3E(a0)
00013C5C 6000                       		bra.s	loc_121A6
00013C5E                            ; ===========================================================================
00013C5E                            
00013C5E                            loc_1219A:
00013C5E 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013C64 6700                       		beq.s	locret_121C0
00013C66 5828 003E                  		addq.b	#4,$3E(a0)
00013C6A                            
00013C6A                            loc_121A6:
00013C6A 1028 003E                  		move.b	$3E(a0),d0
00013C6E 4EB9 0000 2B7C             		jsr	(CalcSine).l
00013C74 323C 0400                  		move.w	#$400,d1
00013C78 C1C1                       		muls.w	d1,d0
00013C7A 4840                       		swap	d0
00013C7C D068 0030                  		add.w	$30(a0),d0
00013C80 3140 000C                  		move.w	d0,$C(a0)
00013C84                            
00013C84                            locret_121C0:
00013C84 4E75                       		rts	
00013C86                            ; ===========================================================================
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            ; Sprite mappings - blocks (LZ)
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            Map_obj61:
00013C86                            	include "_maps\obj61.asm"
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            ; Sprite mappings - blocks (LZ)
00013C86                            ; ---------------------------------------------------------------------------
00013C86 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013C8A 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013C8E 01                         byte_121CA:	dc.b 1
00013C8F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013C94 02                         byte_121D0:	dc.b 2
00013C95 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013C9A F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013C9F 01                         byte_121DB:	dc.b 1
00013CA0 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013CA5 01                         byte_121E1:	dc.b 1
00013CA6 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013CAC 00                         		even
00013CAC 00                         		even
00013CAC                            
00013CAC                            ; ===========================================================================
00013CAC                            ; ---------------------------------------------------------------------------
00013CAC                            ; Object 62 - gargoyle head (LZ)
00013CAC                            ; ---------------------------------------------------------------------------
00013CAC                            
00013CAC                            Obj62:					; XREF: Obj_Index
00013CAC 7000                       		moveq	#0,d0
00013CAE 1028 0024                  		move.b	$24(a0),d0
00013CB2 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013CB6 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013CBA 6000 D4C4                  		bra.w	MarkObjGone
00013CBE                            ; ===========================================================================
00013CBE 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013CC0 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013CC2 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013CC4 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013CC6                            
00013CC6 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013CCE                            ; ===========================================================================
00013CCE                            
00013CCE                            Obj62_Main:				; XREF: Obj62_Index
00013CCE 5428 0024                  		addq.b	#2,$24(a0)
00013CD2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013CDA 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013CE0 0028 0004 0001             		ori.b	#4,1(a0)
00013CE6 117C 0003 0018             		move.b	#3,$18(a0)
00013CEC 117C 0010 0019             		move.b	#$10,$19(a0)
00013CF2 1028 0028                  		move.b	$28(a0),d0	; get object type
00013CF6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013CFA 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013D00 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013D06 0228 000F 0028             		andi.b	#$F,$28(a0)
00013D0C                            
00013D0C                            Obj62_MakeFire:				; XREF: Obj62_Index
00013D0C 5328 001E                  		subq.b	#1,$1E(a0)
00013D10 6600                       		bne.s	Obj62_NoFire
00013D12 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013D18 6100 B62A                  		bsr.w	ChkObjOnScreen
00013D1C 6600                       		bne.s	Obj62_NoFire
00013D1E 6100 B83E                  		bsr.w	SingleObjLoad
00013D22 6600                       		bne.s	Obj62_NoFire
00013D24 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013D28 5829 0024                  		addq.b	#4,$24(a1)
00013D2C 3368 0008 0008             		move.w	8(a0),8(a1)
00013D32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013D38 1368 0001 0001             		move.b	1(a0),1(a1)
00013D3E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013D44                            
00013D44                            Obj62_NoFire:
00013D44 4E75                       		rts	
00013D46                            ; ===========================================================================
00013D46                            
00013D46                            Obj62_FireBall:				; XREF: Obj62_Index
00013D46 5428 0024                  		addq.b	#2,$24(a0)
00013D4A 117C 0008 0016             		move.b	#8,$16(a0)
00013D50 117C 0008 0017             		move.b	#8,$17(a0)
00013D56 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013D5E 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013D64 0028 0004 0001             		ori.b	#4,1(a0)
00013D6A 117C 0004 0018             		move.b	#4,$18(a0)
00013D70 117C 0098 0020             		move.b	#$98,$20(a0)
00013D76 117C 0008 0019             		move.b	#8,$19(a0)
00013D7C 117C 0002 001A             		move.b	#2,$1A(a0)
00013D82 5068 000C                  		addq.w	#8,$C(a0)
00013D86 317C 0200 0010             		move.w	#$200,$10(a0)
00013D8C 0828 0000 0022             		btst	#0,$22(a0)
00013D92 6600                       		bne.s	Obj62_Sound
00013D94 4468 0010                  		neg.w	$10(a0)
00013D98                            
00013D98                            Obj62_Sound:
00013D98 303C 00AE                  		move.w	#$AE,d0
00013D9C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013DA2                            
00013DA2                            Obj62_AniFire:				; XREF: Obj62_Index
00013DA2 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013DA6 0200 0007                  		andi.b	#7,d0
00013DAA 6600                       		bne.s	Obj62_StopFire
00013DAC 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013DB2                            
00013DB2                            Obj62_StopFire:
00013DB2 6100 B2FC                  		bsr.w	SpeedToPos
00013DB6 0828 0000 0022             		btst	#0,$22(a0)
00013DBC 6600                       		bne.s	Obj62_StopFire2
00013DBE 76F8                       		moveq	#-8,d3
00013DC0 6100 0000                  		bsr.w	ObjHitWallLeft
00013DC4 4A41                       		tst.w	d1
00013DC6 6B00 B33E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013DCA 4E75                       		rts	
00013DCC                            ; ===========================================================================
00013DCC                            
00013DCC                            Obj62_StopFire2:
00013DCC 7608                       		moveq	#8,d3
00013DCE 6100 0000                  		bsr.w	ObjHitWallRight
00013DD2 4A41                       		tst.w	d1
00013DD4 6B00 B330                  		bmi.w	DeleteObject
00013DD8 4E75                       		rts	
00013DDA                            ; ===========================================================================
00013DDA                            ; ---------------------------------------------------------------------------
00013DDA                            ; Sprite mappings - gargoyle head (LZ)
00013DDA                            ; ---------------------------------------------------------------------------
00013DDA                            Map_obj62:
00013DDA                            	include "_maps\obj62.asm"
00013DDA                            ; ---------------------------------------------------------------------------
00013DDA                            ; Sprite mappings - gargoyle head (LZ)
00013DDA                            ; ---------------------------------------------------------------------------
00013DDA 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013DDE 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013DE2 03                         byte_12320:	dc.b 3
00013DE3 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013DE8 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013DED 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013DF2 01                         byte_12330:	dc.b 1
00013DF3 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013DF8 01                         byte_12336:	dc.b 1
00013DF9 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013DFE                            		even
00013DFE                            		even
00013DFE                            
00013DFE                            ; ===========================================================================
00013DFE                            ; ---------------------------------------------------------------------------
00013DFE                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013DFE                            ; ---------------------------------------------------------------------------
00013DFE                            
00013DFE                            Obj63:					; XREF: Obj_Index
00013DFE 7000                       		moveq	#0,d0
00013E00 1028 0024                  		move.b	$24(a0),d0
00013E04 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013E08 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013E0C 3028 0030                  		move.w	$30(a0),d0
00013E10 0240 FF80                  		andi.w	#$FF80,d0
00013E14 3238 F700                  		move.w	($FFFFF700).w,d1
00013E18 0441 0080                  		subi.w	#$80,d1
00013E1C 0241 FF80                  		andi.w	#$FF80,d1
00013E20 9041                       		sub.w	d1,d0
00013E22 0C40 0280                  		cmpi.w	#$280,d0
00013E26 6200                       		bhi.s	loc_1236A
00013E28                            
00013E28                            Obj63_Display:				; XREF: loc_1236A
00013E28 6000 B2A0                  		bra.w	DisplaySprite
00013E2C                            ; ===========================================================================
00013E2C                            
00013E2C                            loc_1236A:				; XREF: Obj63
00013E2C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013E32 6600                       		bne.s	loc_12378
00013E34 0C40 FF80                  		cmpi.w	#-$80,d0
00013E38 64EE                       		bcc.s	Obj63_Display
00013E3A                            
00013E3A                            loc_12378:
00013E3A 1028 002F                  		move.b	$2F(a0),d0
00013E3E 6A00 B2C6                  		bpl.w	DeleteObject
00013E42 0240 007F                  		andi.w	#$7F,d0
00013E46 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013E4A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013E50 6000 B2B4                  		bra.w	DeleteObject
00013E54                            ; ===========================================================================
00013E54 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013E56 0000                       		dc.w loc_124B2-Obj63_Index
00013E58 0000                       		dc.w loc_124C2-Obj63_Index
00013E5A 0000                       		dc.w loc_124DE-Obj63_Index
00013E5C                            ; ===========================================================================
00013E5C                            
00013E5C                            Obj63_Main:				; XREF: Obj63_Index
00013E5C 1028 0028                  		move.b	$28(a0),d0
00013E60 6B00 0000                  		bmi.w	loc_12460
00013E64 5428 0024                  		addq.b	#2,$24(a0)
00013E68 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013E70 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013E76 0028 0004 0001             		ori.b	#4,1(a0)
00013E7C 117C 0010 0019             		move.b	#$10,$19(a0)
00013E82 117C 0004 0018             		move.b	#4,$18(a0)
00013E88 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013E8E 6600                       		bne.s	loc_123E2
00013E90 5828 0024                  		addq.b	#4,$24(a0)
00013E94 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013E9A 117C 0001 0018             		move.b	#1,$18(a0)
00013EA0 6000 0000                  		bra.w	loc_124DE
00013EA4                            ; ===========================================================================
00013EA4                            
00013EA4                            loc_123E2:
00013EA4 117C 0004 001A             		move.b	#4,$1A(a0)
00013EAA 7000                       		moveq	#0,d0
00013EAC 1028 0028                  		move.b	$28(a0),d0
00013EB0 3200                       		move.w	d0,d1
00013EB2 E648                       		lsr.w	#3,d0
00013EB4 0240 001E                  		andi.w	#$1E,d0
00013EB8 45FA 0000                  		lea	Obj63_Data(pc),a2
00013EBC D4F2 0000                  		adda.w	(a2,d0.w),a2
00013EC0 315A 0038                  		move.w	(a2)+,$38(a0)
00013EC4 315A 0030                  		move.w	(a2)+,$30(a0)
00013EC8 214A 003C                  		move.l	a2,$3C(a0)
00013ECC 0241 000F                  		andi.w	#$F,d1
00013ED0 E549                       		lsl.w	#2,d1
00013ED2 1141 0038                  		move.b	d1,$38(a0)
00013ED6 117C 0004 003A             		move.b	#4,$3A(a0)
00013EDC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013EE0 6700                       		beq.s	loc_1244C
00013EE2 117C 0001 003B             		move.b	#1,$3B(a0)
00013EE8 4428 003A                  		neg.b	$3A(a0)
00013EEC 7200                       		moveq	#0,d1
00013EEE 1228 0038                  		move.b	$38(a0),d1
00013EF2 D228 003A                  		add.b	$3A(a0),d1
00013EF6 B228 0039                  		cmp.b	$39(a0),d1
00013EFA 6500                       		bcs.s	loc_12448
00013EFC 1001                       		move.b	d1,d0
00013EFE 7200                       		moveq	#0,d1
00013F00 4A00                       		tst.b	d0
00013F02 6A00                       		bpl.s	loc_12448
00013F04 1228 0039                  		move.b	$39(a0),d1
00013F08 5901                       		subq.b	#4,d1
00013F0A                            
00013F0A                            loc_12448:
00013F0A 1141 0038                  		move.b	d1,$38(a0)
00013F0E                            
00013F0E                            loc_1244C:
00013F0E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013F14 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013F1A 6100 0000                  		bsr.w	Obj63_ChangeDir
00013F1E 6000 0000                  		bra.w	loc_124B2
00013F22                            ; ===========================================================================
00013F22                            
00013F22                            loc_12460:				; XREF: Obj63_Main
00013F22 1140 002F                  		move.b	d0,$2F(a0)
00013F26 0240 007F                  		andi.w	#$7F,d0
00013F2A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013F2E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013F34 6600 B1D0                  		bne.w	DeleteObject
00013F38 D040                       		add.w	d0,d0
00013F3A 0240 001E                  		andi.w	#$1E,d0
00013F3E 0640 0070                  		addi.w	#$70,d0
00013F42 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013F48 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013F4C 321A                       		move.w	(a2)+,d1
00013F4E 2248                       		movea.l	a0,a1
00013F50 6000                       		bra.s	Obj63_MakePtfms
00013F52                            ; ===========================================================================
00013F52                            
00013F52                            Obj63_Loop:
00013F52 6100 B60A                  		bsr.w	SingleObjLoad
00013F56 6600                       		bne.s	loc_124AA
00013F58                            
00013F58                            Obj63_MakePtfms:			; XREF: loc_12460
00013F58 12BC 0063                  		move.b	#$63,0(a1)
00013F5C 335A 0008                  		move.w	(a2)+,8(a1)
00013F60 335A 000C                  		move.w	(a2)+,$C(a1)
00013F64 301A                       		move.w	(a2)+,d0
00013F66 1340 0028                  		move.b	d0,$28(a1)
00013F6A                            
00013F6A                            loc_124AA:
00013F6A 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013F6E                            
00013F6E 588F                       		addq.l	#4,sp
00013F70 4E75                       		rts	
00013F72                            ; ===========================================================================
00013F72                            
00013F72                            loc_124B2:				; XREF: Obj63_Index
00013F72 7200                       		moveq	#0,d1
00013F74 1228 0019                  		move.b	$19(a0),d1
00013F78 4EB9 0000 8F16             		jsr	(PlatformObject).l
00013F7E 6000 0000                  		bra.w	sub_12502
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            loc_124C2:				; XREF: Obj63_Index
00013F82 7200                       		moveq	#0,d1
00013F84 1228 0019                  		move.b	$19(a0),d1
00013F88 4EB9 0000 908A             		jsr	(ExitPlatform).l
00013F8E 3F28 0008                  		move.w	8(a0),-(sp)
00013F92 6100 0000                  		bsr.w	sub_12502
00013F96 341F                       		move.w	(sp)+,d2
00013F98 4EF9 0000 95F4             		jmp	(MvSonicOnPtfm2).l
00013F9E                            ; ===========================================================================
00013F9E                            
00013F9E                            loc_124DE:				; XREF: Obj63_Index
00013F9E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013FA2 0240 0003                  		andi.w	#3,d0
00013FA6 6600                       		bne.s	loc_124FC
00013FA8 7201                       		moveq	#1,d1
00013FAA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013FAE 6700                       		beq.s	loc_124F2
00013FB0 4401                       		neg.b	d1
00013FB2                            
00013FB2                            loc_124F2:
00013FB2 D328 001A                  		add.b	d1,$1A(a0)
00013FB6 0228 0003 001A             		andi.b	#3,$1A(a0)
00013FBC                            
00013FBC                            loc_124FC:
00013FBC 588F                       		addq.l	#4,sp
00013FBE 6000 D1C0                  		bra.w	MarkObjGone
00013FC2                            
00013FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FC2                            
00013FC2                            
00013FC2                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013FC2 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013FC6 6700                       		beq.s	loc_12520
00013FC8 4A28 003B                  		tst.b	$3B(a0)
00013FCC 6600                       		bne.s	loc_12520
00013FCE 117C 0001 003B             		move.b	#1,$3B(a0)
00013FD4 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013FDA 4428 003A                  		neg.b	$3A(a0)
00013FDE 6000                       		bra.s	loc_12534
00013FE0                            ; ===========================================================================
00013FE0                            
00013FE0                            loc_12520:
00013FE0 3028 0008                  		move.w	8(a0),d0
00013FE4 B068 0034                  		cmp.w	$34(a0),d0
00013FE8 6600                       		bne.s	loc_1256A
00013FEA 3028 000C                  		move.w	$C(a0),d0
00013FEE B068 0036                  		cmp.w	$36(a0),d0
00013FF2 6600                       		bne.s	loc_1256A
00013FF4                            
00013FF4                            loc_12534:
00013FF4 7200                       		moveq	#0,d1
00013FF6 1228 0038                  		move.b	$38(a0),d1
00013FFA D228 003A                  		add.b	$3A(a0),d1
00013FFE B228 0039                  		cmp.b	$39(a0),d1
00014002 6500                       		bcs.s	loc_12552
00014004 1001                       		move.b	d1,d0
00014006 7200                       		moveq	#0,d1
00014008 4A00                       		tst.b	d0
0001400A 6A00                       		bpl.s	loc_12552
0001400C 1228 0039                  		move.b	$39(a0),d1
00014010 5901                       		subq.b	#4,d1
00014012                            
00014012                            loc_12552:
00014012 1141 0038                  		move.b	d1,$38(a0)
00014016 2268 003C                  		movea.l	$3C(a0),a1
0001401A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014020 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014026 6100 0000                  		bsr.w	Obj63_ChangeDir
0001402A                            
0001402A                            loc_1256A:
0001402A 6100 B084                  		bsr.w	SpeedToPos
0001402E 4E75                       		rts	
00014030                            ; End of function sub_12502
00014030                            
00014030                            
00014030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014030                            
00014030                            
00014030                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00014030 7000                       		moveq	#0,d0
00014032 343C FF00                  		move.w	#-$100,d2
00014036 3028 0008                  		move.w	8(a0),d0
0001403A 9068 0034                  		sub.w	$34(a0),d0
0001403E 6400                       		bcc.s	loc_12584
00014040 4440                       		neg.w	d0
00014042 4442                       		neg.w	d2
00014044                            
00014044                            loc_12584:
00014044 7200                       		moveq	#0,d1
00014046 363C FF00                  		move.w	#-$100,d3
0001404A 3228 000C                  		move.w	$C(a0),d1
0001404E 9268 0036                  		sub.w	$36(a0),d1
00014052 6400                       		bcc.s	loc_12598
00014054 4441                       		neg.w	d1
00014056 4443                       		neg.w	d3
00014058                            
00014058                            loc_12598:
00014058 B240                       		cmp.w	d0,d1
0001405A 6500                       		bcs.s	loc_125C2
0001405C 3028 0008                  		move.w	8(a0),d0
00014060 9068 0034                  		sub.w	$34(a0),d0
00014064 6700                       		beq.s	loc_125AE
00014066 48C0                       		ext.l	d0
00014068 E180                       		asl.l	#8,d0
0001406A 81C1                       		divs.w	d1,d0
0001406C 4440                       		neg.w	d0
0001406E                            
0001406E                            loc_125AE:
0001406E 3140 0010                  		move.w	d0,$10(a0)
00014072 3143 0012                  		move.w	d3,$12(a0)
00014076 4840                       		swap	d0
00014078 3140 000A                  		move.w	d0,$A(a0)
0001407C 4268 000E                  		clr.w	$E(a0)
00014080 4E75                       		rts	
00014082                            ; ===========================================================================
00014082                            
00014082                            loc_125C2:				; XREF: Obj63_ChangeDir
00014082 3228 000C                  		move.w	$C(a0),d1
00014086 9268 0036                  		sub.w	$36(a0),d1
0001408A 6700                       		beq.s	loc_125D4
0001408C 48C1                       		ext.l	d1
0001408E E181                       		asl.l	#8,d1
00014090 83C0                       		divs.w	d0,d1
00014092 4441                       		neg.w	d1
00014094                            
00014094                            loc_125D4:
00014094 3141 0012                  		move.w	d1,$12(a0)
00014098 3142 0010                  		move.w	d2,$10(a0)
0001409C 4841                       		swap	d1
0001409E 3141 000E                  		move.w	d1,$E(a0)
000140A2 4268 000A                  		clr.w	$A(a0)
000140A6 4E75                       		rts	
000140A8                            ; End of function Obj63_ChangeDir
000140A8                            
000140A8                            ; ===========================================================================
000140A8 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000140AA 0000                       		dc.w word_12610-Obj63_Data
000140AC 0000                       		dc.w word_12628-Obj63_Data
000140AE 0000                       		dc.w word_1263C-Obj63_Data
000140B0 0000                       		dc.w word_12650-Obj63_Data
000140B2 0000                       		dc.w word_12668-Obj63_Data
000140B4 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000140C4 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000140D0 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000140E0 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000140E8 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000140FC 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014110 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014128 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001413C                            
0001413C                            ; ---------------------------------------------------------------------------
0001413C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001413C                            ; ---------------------------------------------------------------------------
0001413C                            Map_obj63:
0001413C                            	include "_maps\obj63.asm"
0001413C                            ; ---------------------------------------------------------------------------
0001413C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001413C                            ; ---------------------------------------------------------------------------
0001413C 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00014140 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00014144 0000                       		dc.w byte_1269E-Map_obj63
00014146 01                         byte_12686:	dc.b 1
00014147 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001414C 01                         byte_1268C:	dc.b 1
0001414D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014152 01                         byte_12692:	dc.b 1
00014153 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014158 01                         byte_12698:	dc.b 1
00014159 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001415E 01                         byte_1269E:	dc.b 1
0001415F F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014164                            		even
00014164                            		even
00014164                            
00014164                            ; ===========================================================================
00014164                            ; ---------------------------------------------------------------------------
00014164                            ; Object 64 - bubbles (LZ)
00014164                            ; ---------------------------------------------------------------------------
00014164                            
00014164                            Obj64:					; XREF: Obj_Index
00014164 7000                       		moveq	#0,d0
00014166 1028 0024                  		move.b	$24(a0),d0
0001416A 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001416E 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00014172                            ; ===========================================================================
00014172 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00014174 0000                       		dc.w Obj64_Animate-Obj64_Index
00014176 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014178 0000                       		dc.w Obj64_Display2-Obj64_Index
0001417A 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001417C 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001417E                            ; ===========================================================================
0001417E                            
0001417E                            Obj64_Main:				; XREF: Obj64_Index
0001417E 5428 0024                  		addq.b	#2,$24(a0)
00014182 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001418A 317C 8348 0002             		move.w	#$8348,2(a0)
00014190 117C 0084 0001             		move.b	#$84,1(a0)
00014196 117C 0010 0019             		move.b	#$10,$19(a0)
0001419C 117C 0001 0018             		move.b	#1,$18(a0)
000141A2 1028 0028                  		move.b	$28(a0),d0	; get object type
000141A6 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000141A8 5028 0024                  		addq.b	#8,$24(a0)
000141AC 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000141B0 1140 0032                  		move.b	d0,$32(a0)
000141B4 1140 0033                  		move.b	d0,$33(a0)
000141B8 117C 0006 001C             		move.b	#6,$1C(a0)
000141BE 6000 0000                  		bra.w	Obj64_BblMaker
000141C2                            ; ===========================================================================
000141C2                            
000141C2                            Obj64_Bubble:				; XREF: Obj64_Main
000141C2 1140 001C                  		move.b	d0,$1C(a0)
000141C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000141CC 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000141D2 4EB9 0000 2B56             		jsr	(RandomNumber).l
000141D8 1140 0026                  		move.b	d0,$26(a0)
000141DC                            
000141DC                            Obj64_Animate:				; XREF: Obj64_Index
000141DC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000141E2 4EBA 8028                  		jsr	AnimateSprite
000141E6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000141EC 6600                       		bne.s	Obj64_ChkWater
000141EE 117C 0001 002E             		move.b	#1,$2E(a0)
000141F4                            
000141F4                            Obj64_ChkWater:				; XREF: Obj64_Index
000141F4 3038 F646                  		move.w	($FFFFF646).w,d0
000141F8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000141FC 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000141FE                            
000141FE                            Obj64_Burst:				; XREF: Obj64_Wobble
000141FE 117C 0006 0024             		move.b	#6,$24(a0)
00014204 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00014208 6000 0000                  		bra.w	Obj64_Display2
0001420C                            ; ===========================================================================
0001420C                            
0001420C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001420C 1028 0026                  		move.b	$26(a0),d0
00014210 5228 0026                  		addq.b	#1,$26(a0)
00014214 0240 007F                  		andi.w	#$7F,d0
00014218 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001421E 1031 0000                  		move.b	(a1,d0.w),d0
00014222 4880                       		ext.w	d0
00014224 D068 0030                  		add.w	$30(a0),d0
00014228 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001422C 4A28 002E                  		tst.b	$2E(a0)
00014230 6700                       		beq.s	Obj64_Display
00014232 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00014236 6700                       		beq.s	Obj64_Display	; if not, branch
00014238                            
00014238 6100 0000                  		bsr.w	StopDrowning	; cancel countdown music
0001423C 303C 00AD                  		move.w	#$AD,d0
00014240 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00014246 43F8 D000                  		lea	($FFFFD000).w,a1
0001424A 4269 0010                  		clr.w	$10(a1)
0001424E 4269 0012                  		clr.w	$12(a1)
00014252 4269 0014                  		clr.w	$14(a1)
00014256 137C 0015 001C             		move.b	#$15,$1C(a1)
0001425C 337C 0023 003E             		move.w	#$23,$3E(a1)
00014262 137C 0000 003C             		move.b	#0,$3C(a1)
00014268 08A9 0005 0022             		bclr	#5,$22(a1)
0001426E 08A9 0004 0022             		bclr	#4,$22(a1)
00014274 0829 0002 0022             		btst	#2,$22(a1)
0001427A 6700 FF82                  		beq.w	Obj64_Burst
0001427E 08A9 0002 0022             		bclr	#2,$22(a1)
00014284 137C 0013 0016             		move.b	#$13,$16(a1)
0001428A 137C 0009 0017             		move.b	#9,$17(a1)
00014290 5B69 000C                  		subq.w	#5,$C(a1)
00014294 6000 FF68                  		bra.w	Obj64_Burst
00014298                            ; ===========================================================================
00014298                            
00014298                            Obj64_Display:				; XREF: Obj64_Wobble
00014298 6100 AE16                  		bsr.w	SpeedToPos
0001429C 4A28 0001                  		tst.b	1(a0)
000142A0 6A00                       		bpl.s	Obj64_Delete
000142A2 4EFA AE26                  		jmp	DisplaySprite
000142A6                            ; ===========================================================================
000142A6                            
000142A6                            Obj64_Delete:
000142A6 4EFA AE5E                  		jmp	DeleteObject
000142AA                            ; ===========================================================================
000142AA                            
000142AA                            Obj64_Display2:				; XREF: Obj64_Index
000142AA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142B0 4EB9 0000 C20C             		jsr	AnimateSprite
000142B6 4A28 0001                  		tst.b	1(a0)
000142BA 6A00                       		bpl.s	Obj64_Delete2
000142BC 4EFA AE0C                  		jmp	DisplaySprite
000142C0                            ; ===========================================================================
000142C0                            
000142C0                            Obj64_Delete2:
000142C0 4EFA AE44                  		jmp	DeleteObject
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            Obj64_Delete3:				; XREF: Obj64_Index
000142C4 6000 AE40                  		bra.w	DeleteObject
000142C8                            ; ===========================================================================
000142C8                            
000142C8                            Obj64_BblMaker:				; XREF: Obj64_Index
000142C8 4A68 0036                  		tst.w	$36(a0)
000142CC 6600                       		bne.s	loc_12874
000142CE 3038 F646                  		move.w	($FFFFF646).w,d0
000142D2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000142D6 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000142DA 4A28 0001                  		tst.b	1(a0)
000142DE 6A00 0000                  		bpl.w	Obj64_ChkDel
000142E2 5368 0038                  		subq.w	#1,$38(a0)
000142E6 6A00 0000                  		bpl.w	loc_12914
000142EA 317C 0001 0036             		move.w	#1,$36(a0)
000142F0                            
000142F0                            loc_1283A:
000142F0 4EB9 0000 2B56             		jsr	(RandomNumber).l
000142F6 3200                       		move.w	d0,d1
000142F8 0240 0007                  		andi.w	#7,d0
000142FC 0C40 0006                  		cmpi.w	#6,d0
00014300 64EE                       		bcc.s	loc_1283A
00014302                            
00014302 1140 0034                  		move.b	d0,$34(a0)
00014306 0241 000C                  		andi.w	#$C,d1
0001430A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00014310 D2C1                       		adda.w	d1,a1
00014312 2149 003C                  		move.l	a1,$3C(a0)
00014316 5328 0032                  		subq.b	#1,$32(a0)
0001431A 6A00                       		bpl.s	loc_12872
0001431C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014322 08E8 0007 0036             		bset	#7,$36(a0)
00014328                            
00014328                            loc_12872:
00014328 6000                       		bra.s	loc_1287C
0001432A                            ; ===========================================================================
0001432A                            
0001432A                            loc_12874:				; XREF: Obj64_BblMaker
0001432A 5368 0038                  		subq.w	#1,$38(a0)
0001432E 6A00 0000                  		bpl.w	loc_12914
00014332                            
00014332                            loc_1287C:
00014332 4EB9 0000 2B56             		jsr	(RandomNumber).l
00014338 0240 001F                  		andi.w	#$1F,d0
0001433C 3140 0038                  		move.w	d0,$38(a0)
00014340 6100 B21C                  		bsr.w	SingleObjLoad
00014344 6600                       		bne.s	loc_128F8
00014346 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001434A 3368 0008 0008             		move.w	8(a0),8(a1)
00014350 4EB9 0000 2B56             		jsr	(RandomNumber).l
00014356 0240 000F                  		andi.w	#$F,d0
0001435A 5140                       		subq.w	#8,d0
0001435C D169 0008                  		add.w	d0,8(a1)
00014360 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014366 7000                       		moveq	#0,d0
00014368 1028 0034                  		move.b	$34(a0),d0
0001436C 2468 003C                  		movea.l	$3C(a0),a2
00014370 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014376 0828 0007 0036             		btst	#7,$36(a0)
0001437C 6700                       		beq.s	loc_128F8
0001437E 4EB9 0000 2B56             		jsr	(RandomNumber).l
00014384 0240 0003                  		andi.w	#3,d0
00014388 6600                       		bne.s	loc_128E4
0001438A 08E8 0006 0036             		bset	#6,$36(a0)
00014390 6600                       		bne.s	loc_128F8
00014392 137C 0002 0028             		move.b	#2,$28(a1)
00014398                            
00014398                            loc_128E4:
00014398 4A28 0034                  		tst.b	$34(a0)
0001439C 6600                       		bne.s	loc_128F8
0001439E 08E8 0006 0036             		bset	#6,$36(a0)
000143A4 6600                       		bne.s	loc_128F8
000143A6 137C 0002 0028             		move.b	#2,$28(a1)
000143AC                            
000143AC                            loc_128F8:
000143AC 5328 0034                  		subq.b	#1,$34(a0)
000143B0 6A00                       		bpl.s	loc_12914
000143B2 4EB9 0000 2B56             		jsr	(RandomNumber).l
000143B8 0240 007F                  		andi.w	#$7F,d0
000143BC 0640 0080                  		addi.w	#$80,d0
000143C0 D168 0038                  		add.w	d0,$38(a0)
000143C4 4268 0036                  		clr.w	$36(a0)
000143C8                            
000143C8                            loc_12914:
000143C8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000143CE 4EB9 0000 C20C             		jsr	AnimateSprite
000143D4                            
000143D4                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000143D4 3028 0008                  		move.w	8(a0),d0
000143D8 0240 FF80                  		andi.w	#$FF80,d0
000143DC 3238 F700                  		move.w	($FFFFF700).w,d1
000143E0 0441 0080                  		subi.w	#$80,d1
000143E4 0241 FF80                  		andi.w	#$FF80,d1
000143E8 9041                       		sub.w	d1,d0
000143EA 0C40 0280                  		cmpi.w	#$280,d0
000143EE 6200 AD16                  		bhi.w	DeleteObject
000143F2 3038 F646                  		move.w	($FFFFF646).w,d0
000143F6 B068 000C                  		cmp.w	$C(a0),d0
000143FA 6500 ACCE                  		bcs.w	DisplaySprite
000143FE 4E75                       		rts	
00014400                            ; ===========================================================================
00014400                            ; bubble production sequence
00014400                            
00014400                            ; 0 = small bubble, 1 =	large bubble
00014400                            
00014400 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014412                            
00014412                            ; ===========================================================================
00014412                            
00014412                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00014412 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014416 6B00                       		bmi.s	loc_12998
00014418 43F8 D000                  		lea	($FFFFD000).w,a1
0001441C 3029 0008                  		move.w	8(a1),d0
00014420 3228 0008                  		move.w	8(a0),d1
00014424 0441 0010                  		subi.w	#$10,d1
00014428 B240                       		cmp.w	d0,d1
0001442A 6400                       		bcc.s	loc_12998
0001442C 0641 0020                  		addi.w	#$20,d1
00014430 B240                       		cmp.w	d0,d1
00014432 6500                       		bcs.s	loc_12998
00014434 3029 000C                  		move.w	$C(a1),d0
00014438 3228 000C                  		move.w	$C(a0),d1
0001443C B240                       		cmp.w	d0,d1
0001443E 6400                       		bcc.s	loc_12998
00014440 0641 0010                  		addi.w	#$10,d1
00014444 B240                       		cmp.w	d0,d1
00014446 6500                       		bcs.s	loc_12998
00014448 7001                       		moveq	#1,d0
0001444A 4E75                       		rts	
0001444C                            ; ===========================================================================
0001444C                            
0001444C                            loc_12998:
0001444C 7000                       		moveq	#0,d0
0001444E 4E75                       		rts	
00014450                            ; ===========================================================================
00014450                            Ani_obj64:
00014450                            	include "_anim\obj64.asm"
00014450                            ; ---------------------------------------------------------------------------
00014450                            ; Animation script - bubbles (LZ)
00014450                            ; ---------------------------------------------------------------------------
00014450 0000                       		dc.w byte_129AA-Ani_obj64
00014452 0000                       		dc.w byte_129B0-Ani_obj64
00014454 0000                       		dc.w byte_129B6-Ani_obj64
00014456 0000                       		dc.w byte_129BE-Ani_obj64
00014458 0000                       		dc.w byte_129BE-Ani_obj64
0001445A 0000                       		dc.w byte_129C0-Ani_obj64
0001445C 0000                       		dc.w byte_129C6-Ani_obj64
0001445E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014464 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001446A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014472 04FC                       byte_129BE:	dc.b 4,	$FC
00014474 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001447A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014480 00                         		even
00014480 00                         		even
00014480                            
00014480                            ; ---------------------------------------------------------------------------
00014480                            ; Sprite mappings - bubbles (LZ)
00014480                            ; ---------------------------------------------------------------------------
00014480                            Map_obj64:
00014480                            	include "_maps\obj64.asm"
00014480                            ; ---------------------------------------------------------------------------
00014480                            ; Sprite mappings - bubbles (LZ)
00014480                            ; ---------------------------------------------------------------------------
00014480 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00014484 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00014488 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001448C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00014490 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00014494 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00014498 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001449C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000144A0 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000144A4 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000144A8 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000144AC 0000                       		dc.w byte_12A9C-Map_obj64
000144AE 01                         byte_129FA:	dc.b 1
000144AF FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000144B4 01                         byte_12A00:	dc.b 1
000144B5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000144BA 01                         byte_12A06:	dc.b 1
000144BB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000144C0 01                         byte_12A0C:	dc.b 1
000144C1 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000144C6 01                         byte_12A12:	dc.b 1
000144C7 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000144CC 01                         byte_12A18:	dc.b 1
000144CD F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000144D2 01                         byte_12A1E:	dc.b 1
000144D3 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000144D8 04                         byte_12A24:	dc.b 4
000144D9 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000144DE F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000144E3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000144E8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000144ED 04                         byte_12A39:	dc.b 4
000144EE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000144F3 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000144F8 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000144FD 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014502 01                         byte_12A4E:	dc.b 1
00014503 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00014508 01                         byte_12A54:	dc.b 1
00014509 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001450E 01                         byte_12A5A:	dc.b 1
0001450F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014514 01                         byte_12A60:	dc.b 1
00014515 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001451A 01                         byte_12A66:	dc.b 1
0001451B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00014520 01                         byte_12A6C:	dc.b 1
00014521 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014526 01                         byte_12A72:	dc.b 1
00014527 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001452C 01                         byte_12A78:	dc.b 1
0001452D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014532 01                         byte_12A7E:	dc.b 1
00014533 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014538 01                         byte_12A84:	dc.b 1
00014539 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001453E 01                         byte_12A8A:	dc.b 1
0001453F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014544 01                         byte_12A90:	dc.b 1
00014545 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001454A 01                         byte_12A96:	dc.b 1
0001454B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014550 00                         byte_12A9C:	dc.b 0
00014552 00                         		even
00014552 00                         		even
00014552                            
00014552                            ; ===========================================================================
00014552                            ; ---------------------------------------------------------------------------
00014552                            ; Object 65 - waterfalls (LZ)
00014552                            ; ---------------------------------------------------------------------------
00014552                            
00014552                            Obj65:					; XREF: Obj_Index
00014552 7000                       		moveq	#0,d0
00014554 1028 0024                  		move.b	$24(a0),d0
00014558 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001455C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014560                            ; ===========================================================================
00014560 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014562 0000                       		dc.w Obj65_Animate-Obj65_Index
00014564 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014566 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014568 0000                       		dc.w loc_12B36-Obj65_Index
0001456A                            ; ===========================================================================
0001456A                            
0001456A                            Obj65_Main:				; XREF: Obj65_Index
0001456A 5828 0024                  		addq.b	#4,$24(a0)
0001456E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014576 317C 4259 0002             		move.w	#$4259,2(a0)
0001457C 0028 0004 0001             		ori.b	#4,1(a0)
00014582 117C 0018 0019             		move.b	#$18,$19(a0)
00014588 117C 0001 0018             		move.b	#1,$18(a0)
0001458E 1028 0028                  		move.b	$28(a0),d0	; get object type
00014592 6A00                       		bpl.s	loc_12AE6
00014594 08E8 0007 0002             		bset	#7,2(a0)
0001459A                            
0001459A                            loc_12AE6:
0001459A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001459E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000145A2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000145A6 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000145A8 4228 0018                  		clr.b	$18(a0)
000145AC 5528 0024                  		subq.b	#2,$24(a0)
000145B0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000145B6 6700                       		beq.s	loc_12B0A	; if not, branch
000145B8 117C 0006 0024             		move.b	#6,$24(a0)
000145BE                            
000145BE                            loc_12B0A:
000145BE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000145C4 6700                       		beq.s	Obj65_Animate	; if not, branch
000145C6 117C 0008 0024             		move.b	#8,$24(a0)
000145CC                            
000145CC                            Obj65_Animate:				; XREF: Obj65_Index
000145CC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000145D2 4EB9 0000 C20C             		jsr	AnimateSprite
000145D8                            
000145D8                            Obj65_ChkDel:				; XREF: Obj65_Index
000145D8 6000 CBA6                  		bra.w	MarkObjGone
000145DC                            ; ===========================================================================
000145DC                            
000145DC                            Obj65_FixHeight:			; XREF: Obj65_Index
000145DC 3038 F646                  		move.w	($FFFFF646).w,d0
000145E0 0440 0010                  		subi.w	#$10,d0
000145E4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000145E8 60E2                       		bra.s	Obj65_Animate
000145EA                            ; ===========================================================================
000145EA                            
000145EA                            loc_12B36:				; XREF: Obj65_Index
000145EA 08A8 0007 0002             		bclr	#7,2(a0)
000145F0 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000145F6 6600                       		bne.s	Obj65_Animate2
000145F8 08E8 0007 0002             		bset	#7,2(a0)
000145FE                            
000145FE                            Obj65_Animate2:
000145FE 60CC                       		bra.s	Obj65_Animate
00014600                            ; ===========================================================================
00014600                            Ani_obj65:
00014600                            	include "_anim\obj65.asm"
00014600                            ; ---------------------------------------------------------------------------
00014600                            ; Animation script - waterfall (LZ)
00014600                            ; ---------------------------------------------------------------------------
00014600 0000                       		dc.w byte_12B4E-Ani_obj65
00014602 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014608 00                         		even
00014608 00                         		even
00014608                            
00014608                            ; ---------------------------------------------------------------------------
00014608                            ; Sprite mappings - waterfalls (LZ)
00014608                            ; ---------------------------------------------------------------------------
00014608                            Map_obj65:
00014608                            	include "_maps\obj65.asm"
00014608                            ; ---------------------------------------------------------------------------
00014608                            ; Sprite mappings - waterfalls (LZ)
00014608                            ; ---------------------------------------------------------------------------
00014608 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001460C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00014610 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00014614 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014618 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001461C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00014620 01                         byte_12B6C:	dc.b 1
00014621 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014626 02                         byte_12B72:	dc.b 2
00014627 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001462C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014631 02                         byte_12B7D:	dc.b 2
00014632 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014637 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001463C 01                         byte_12B88:	dc.b 1
0001463D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014642 02                         byte_12B8E:	dc.b 2
00014643 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014648 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001464D 01                         byte_12B99:	dc.b 1
0001464E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014653 01                         byte_12B9F:	dc.b 1
00014654 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014659 01                         byte_12BA5:	dc.b 1
0001465A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001465F 02                         byte_12BAB:	dc.b 2
00014660 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014665 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001466A 02                         byte_12BB6:	dc.b 2
0001466B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014670 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014675 02                         byte_12BC1:	dc.b 2
00014676 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001467B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014680 02                         byte_12BCC:	dc.b 2
00014681 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014686 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001468C 00                         		even
0001468C 00                         		even
0001468C                            
0001468C                            SpinDash_dust:
0001468C                            	include "_inc\spindash_dust.asm"
0001468C                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
0001468C 7000                       		moveq	#0,d0
0001468E 1028 0024                  		move.b	$24(a0),d0
00014692 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014696 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001469A                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001469A 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
0001469C 0000                       		dc loc_1DD90-off_1DD2E; 1
0001469E 0000                       		dc loc_1DE46-off_1DD2E; 2
000146A0 0000                       		dc loc_1DE4A-off_1DD2E; 3
000146A2                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000146A2                            
000146A2                            loc_1DD36:				; DATA XREF: h+6DBA?o
000146A2 5428 0024                  		addq.b	#2,$24(a0)
000146A6 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
000146AE 0028 0004 0001             		or.b	#4,1(a0)
000146B4 117C 0001 0018             		move.b	#1,$18(a0)
000146BA 117C 0010 0019             		move.b	#$10,$19(a0)
000146C0 317C 07A0 0002             		move	#$7A0,2(a0)
000146C6 317C D000 003E             		move	#-$3000,$3E(a0)
000146CC 317C F400 003C             		move	#$F400,$3C(a0)
000146D2 B0FC D1C0                  		cmp	#-$2E40,a0
000146D6 6700                       		beq.s	loc_1DD8C
000146D8 117C 0001 0034             		move.b	#1,$34(a0)
000146DE                            ;		cmp	#2,($FFFFFF70).w
000146DE                            ;		beq.s	loc_1DD8C
000146DE                            ;		move	#$48C,2(a0)
000146DE                            ;		move	#-$4FC0,$3E(a0)
000146DE                            ;		move	#-$6E80,$3C(a0)
000146DE                            
000146DE                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000146DE                            ;		bsr.w	sub_16D6E
000146DE                            
000146DE                            loc_1DD90:				; DATA XREF: h+6DBA?o
000146DE 3468 003E                  		movea.w	$3E(a0),a2
000146E2 7000                       		moveq	#0,d0
000146E4 1028 001C                  		move.b	$1C(a0),d0
000146E8 D040                       		add	d0,d0
000146EA 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000146EE 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000146F2                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000146F2 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000146F4 0000                       		dc loc_1DDAC-off_1DDA4; 1
000146F6 0000                       		dc loc_1DDCC-off_1DDA4; 2
000146F8 0000                       		dc loc_1DE20-off_1DDA4; 3
000146FA                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000146FA                            
000146FA                            loc_1DDAC:				; DATA XREF: h+6E30?o
000146FA 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014700 4A28 001D                  		tst.b	$1D(a0)
00014704 6600                       		bne.s	loc_1DE28
00014706 316A 0008 0008             		move	8(a2),8(a0)
0001470C 117C 0000 0022             		move.b	#0,$22(a0)
00014712 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014718 6000                       		bra.s	loc_1DE28
0001471A                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001471A                            
0001471A                            loc_1DDCC:				; DATA XREF: h+6E30?o
0001471A                            ;		cmp.b	#$C,$28(a2)
0001471A                            ;		bcs.s	loc_1DE3E
0001471A 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014720 6400                       		bcc.s	loc_1DE3E
00014722 4A2A 0039                  		tst.b	$39(a2)
00014726 6700                       		beq.s	loc_1DE3E
00014728 316A 0008 0008             		move	8(a2),8(a0)
0001472E 316A 000C 000C             		move	$C(a2),$C(a0)
00014734 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001473A 0228 0001 0022             		and.b	#1,$22(a0)
00014740 4A28 0034                  		tst.b	$34(a0)
00014744 6700                       		beq.s	loc_1DE06
00014746 5968 000C                  		sub	#4,$C(a0)
0001474A                            
0001474A                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001474A 4A28 001D                  		tst.b	$1D(a0)
0001474E 6600                       		bne.s	loc_1DE28
00014750 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014756 4A6A 0002                  		tst	2(a2)
0001475A 6A00                       		bpl.s	loc_1DE28
0001475C 0068 8000 0002             		or	#-$8000,2(a0)
00014762                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014762                            
00014762                            loc_1DE20:				; DATA XREF: h+6E30?o
00014762                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014762 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014768 4EB9 0000 C20C             		jsr	AnimateSprite
0001476E 6100 0000                  		bsr.w	loc_1DEE4
00014772 4EFA A956                  		jmp	DisplaySprite
00014776                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014776                            
00014776                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014776 117C 0000 001C             		move.b	#0,$1C(a0)
0001477C 4E75                       		rts	
0001477E                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001477E                            
0001477E                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001477E 6000 A986                  		bra.w	DeleteObject
00014782                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014782                            
00014782                            
00014782                            
00014782                            loc_1DE4A:
00014782 3468 003E                  	movea.w	$3E(a0),a2
00014786 7210                       	moveq	#$10,d1
00014788 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001478E 6700                       	beq.s	loc_1DE64
00014790 7206                       	moveq	#$6,d1
00014792 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014798 6700                       	beq.s	loc_1DE64
0001479A 117C 0002 0024             	move.b	#2,$24(a0)
000147A0 117C 0000 0032             	move.b	#0,$32(a0)
000147A6 4E75                       	rts
000147A8                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147A8                            
000147A8                            loc_1DE64:				; CODE XREF: h+6EE0?j
000147A8 5328 0032                  		subq.b	#1,$32(a0)
000147AC 6A00                       		bpl.s	loc_1DEE0
000147AE 117C 0003 0032             		move.b	#3,$32(a0)
000147B4 4EBA ADA8                  		jsr	SingleObjLoad
000147B8 6600                       		bne.s	loc_1DEE0
000147BA 1290                       		move.b	0(a0),0(a1)
000147BC 336A 0008 0008             		move	8(a2),8(a1)
000147C2 336A 000C 000C             		move	$C(a2),$C(a1)
000147C8 4A28 0034                  		tst.b	$34(a0)
000147CC 6700                       		beq.s	loc_1DE9A
000147CE 5941                       		sub	#4,d1
000147D0                            
000147D0                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000147D0 D369 000C                  		add	d1,$C(a1)
000147D4 137C 0000 0022             		move.b	#0,$22(a1)
000147DA 137C 0003 001C             		move.b	#3,$1C(a1)
000147E0 5429 0024                  		addq.b	#2,$24(a1)
000147E4 2368 0004 0004             		move.l	4(a0),4(a1)
000147EA 1368 0001 0001             		move.b	1(a0),1(a1)
000147F0 137C 0001 0018             		move.b	#1,$18(a1)
000147F6 137C 0004 0019             		move.b	#4,$19(a1)
000147FC 3368 0002 0002             		move	2(a0),2(a1)
00014802 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014808 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001480E 4A6A 0002                  		tst	2(a2)
00014812 6A00                       		bpl.s	loc_1DEE0
00014814 0069 8000 0002             		or	#-$8000,2(a1)
0001481A                            
0001481A                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
0001481A 6100                       		bsr.s	loc_1DEE4
0001481C 4E75                       		rts	
0001481E                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001481E                            
0001481E                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001481E 7000                       		moveq	#0,d0
00014820 1028 001A                  		move.b	$1A(a0),d0
00014824 B028 0030                  		cmp.b	$30(a0),d0
00014828 6700 0000                  		beq.w	locret_1DF36
0001482C 1140 0030                  		move.b	d0,$30(a0)
00014830 45F9 0000 0000             		lea	(off_1E074).l,a2
00014836 D040                       		add	d0,d0
00014838 D4F2 0000                  		add	(a2,d0.w),a2
0001483C 3A1A                       		move	(a2)+,d5
0001483E 5345                       		subq	#1,d5
00014840 6B00 0000                  		bmi.w	locret_1DF36
00014844 3828 003C                  		move $3C(a0),d4
00014848                            
00014848                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014848 7200                       		moveq	#0,d1
0001484A 321A                       		move	(a2)+,d1
0001484C 3601                       		move	d1,d3
0001484E E04B                       		lsr.w	#8,d3
00014850 0243 00F0                  		and	#$F0,d3	; 'Ã°'
00014854 0643 0010                  		add	#$10,d3
00014858 0241 0FFF                  		and	#$FFF,d1
0001485C EB89                       		lsl.l	#5,d1
0001485E 0681 0000 0000             		add.l	#Art_Dust,d1
00014864 3404                       		move	d4,d2
00014866 D843                       		add	d3,d4
00014868 D843                       		add	d3,d4
0001486A 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00014870 51CD FFD6                  		dbf	d5,loc_1DF0A
00014874 4E75                           rts
00014876                            
00014876                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014876 4E75                       		rts	
00014878                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014878 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001487A 0000                       		dc byte_1DF43-off_1DF38; 1
0001487C 0000                       		dc byte_1DF4F-off_1DF38; 2
0001487E 0000                       		dc byte_1DF58-off_1DF38; 3
00014880 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014883 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001488F 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014898 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001489E                            ; -------------------------------------------------------------------------------
0001489E                            ; Unknown Sprite Mappings
0001489E                            ; -------------------------------------------------------------------------------
0001489E                            MapUnc_1DF5E:
0001489E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000148A0 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000148A2 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000148A4 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000148A6 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000148A8 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000148AA 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000148AC 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000148AE 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000148B0 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000148B2 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000148B4 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000148B6 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000148B8 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000148BA 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000148BC 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000148BE 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000148C0 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000148C2 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000148C4 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000148C6 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000148C8 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000148CA 00                         word_1DF8A:	dc.b 0
000148CB 01                         word_1DF8C:	dc.b 1
000148CC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000148D1 01                         word_1DF96:	dc.b 1
000148D2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148D7 01                         word_1DFA0:	dc.b 1
000148D8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148DD 01                         word_1DFAA:	dc.b 1
000148DE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148E3 01                         word_1DFB4:	dc.b 1
000148E4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148E9 01                         word_1DFBE:	dc.b 1
000148EA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148EF 01                         word_1DFC8:	dc.b 1
000148F0 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000148F5 01                         word_1DFD2:	dc.b 1
000148F6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000148FB 01                         word_1DFDC:	dc.b 1
000148FC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014901 01                         word_1DFE6:	dc.b 1
00014902 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014907 01                         word_1DFF0:	dc.b 1
00014908 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001490D 01                         word_1DFFA:	dc.b 1
0001490E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014913 02                         word_1E004:	dc.b 2
00014914 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014919 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001491E 02                         word_1E016:	dc.b 2
0001491F F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014924 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014929 02                         word_1E028:	dc.b 2
0001492A F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001492F 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014934 02                         word_1E03A:	dc.b 2
00014935 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001493A 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001493F 01                         word_1E04C:	dc.b 1
00014940 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014945 01                         word_1E056:	dc.b 1
00014946 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001494B 01                         word_1E060:	dc.b 1
0001494C F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014951 01                         word_1E06A:	dc.b 1
00014952 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014957 00                         	dc.b 0
00014958 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001495A 0000                       	dc word_1E0A2-off_1E074; 1
0001495C 0000                       	dc word_1E0A6-off_1E074; 2
0001495E 0000                       	dc word_1E0AA-off_1E074; 3
00014960 0000                       	dc word_1E0AE-off_1E074; 4
00014962 0000                       	dc word_1E0B2-off_1E074; 5
00014964 0000                       	dc word_1E0B6-off_1E074; 6
00014966 0000                       	dc word_1E0BA-off_1E074; 7
00014968 0000                       	dc word_1E0BE-off_1E074; 8
0001496A 0000                       	dc word_1E0C2-off_1E074; 9
0001496C 0000                       	dc word_1E0C6-off_1E074; 10
0001496E 0000                       	dc word_1E0CA-off_1E074; 11
00014970 0000                       	dc word_1E0CE-off_1E074; 12
00014972 0000                       	dc word_1E0D2-off_1E074; 13
00014974 0000                       	dc word_1E0D8-off_1E074; 14
00014976 0000                       	dc word_1E0DE-off_1E074; 15
00014978 0000                       	dc word_1E0E4-off_1E074; 16
0001497A 0000                       	dc word_1E0EA-off_1E074; 17
0001497C 0000                       	dc word_1E0EA-off_1E074; 18
0001497E 0000                       	dc word_1E0EA-off_1E074; 19
00014980 0000                       	dc word_1E0EA-off_1E074; 20
00014982 0000                       	dc word_1E0EC-off_1E074; 21
00014984 0000                       word_1E0A0:	dc 0
00014986 0001                       word_1E0A2:	dc 1
00014988 7000                       	dc $7000
0001498A 0001                       word_1E0A6:	dc 1
0001498C F008                       	dc $F008
0001498E 0001                       word_1E0AA:	dc 1
00014990 F018                       	dc $F018
00014992 0001                       word_1E0AE:	dc 1
00014994 F028                       	dc $F028
00014996 0001                       word_1E0B2:	dc 1
00014998 F038                       	dc $F038
0001499A 0001                       word_1E0B6:	dc 1
0001499C F048                       	dc $F048
0001499E 0001                       word_1E0BA:	dc 1
000149A0 7058                       	dc $7058
000149A2 0001                       word_1E0BE:	dc 1
000149A4 7060                       	dc $7060
000149A6 0001                       word_1E0C2:	dc 1
000149A8 7068                       	dc $7068
000149AA 0001                       word_1E0C6:	dc 1
000149AC 7070                       	dc $7070
000149AE 0001                       word_1E0CA:	dc 1
000149B0 7078                       	dc $7078
000149B2 0001                       word_1E0CE:	dc 1
000149B4 7080                       	dc $7080
000149B6 0002                       word_1E0D2:	dc 2
000149B8 1088                       	dc $1088
000149BA 708A                       	dc $708A
000149BC 0002                       word_1E0D8:	dc 2
000149BE 3092                       	dc $3092
000149C0 7096                       	dc $7096
000149C2 0002                       word_1E0DE:	dc 2
000149C4 509E                       	dc $509E
000149C6 70A4                       	dc $70A4
000149C8 0002                       word_1E0E4:	dc 2
000149CA 50AC                       	dc $50AC
000149CC 70B2                       	dc $70B2
000149CE 0000                       word_1E0EA:	dc 0
000149D0 0001                       word_1E0EC:	dc 1
000149D2 F0BA                       	dc $F0BA
000149D4                            	even
000149D4                            	even
000149D4                            
000149D4                            ; ===========================================================================
000149D4                            ; ---------------------------------------------------------------------------
000149D4                            ; Object 01 - Sonic
000149D4                            ; ---------------------------------------------------------------------------
000149D4                            ; ===========================================================================
000149D4 =00000039                  crawling								= $39			; CRAWLING IN MY SKIN!
000149D4 =0000003A                  biting									= $3A
000149D4                            ; ===========================================================================
000149D4                            Obj01_PhysicsTable:
000149D4 0600 000C 0080             		dc.w $600,   $C,  $80			; Normal
000149DA 0300 0006 0040             		dc.w $300,    6,  $40			; Underwater
000149E0 0C00 0018 0080             		dc.w $C00,  $18,  $80			; Speed shoes
000149E6 0600 000C 0080             		dc.w $600,   $C,  $80			; Speed shoes underwater
000149EC 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling
000149F2 0060 000C 0012             		dc.w  $60,   $C,  $12			; Crawling underwater
000149F8 0180 0030 0048             		dc.w $180,  $30,  $48			; Crawling with speed shoes
000149FE 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling with speed shoes underwater
00014A04                            ; ===========================================================================
00014A04                            ; Get physics for Sonic
00014A04                            ; ===========================================================================
00014A04                            Obj01_GetPhysics:
00014A04 7000                       		moveq	#0,d0
00014A06 1028 0039                  		move.b	crawling(a0),d0
00014A0A E300                       		asl.b	#1,d0
00014A0C 8038 FE2E                  		or.b	($FFFFFE2E).w,d0
00014A10 E300                       		asl.b	#1,d0
00014A12 0828 0006 0022             		btst	#6,$22(a0)
00014A18 6700                       		beq.s	@not_underwater
00014A1A 0000 0001                  		or.b	#1,d0
00014A1E                            		
00014A1E                            @not_underwater:
00014A1E C0FC 0006                  		mulu.w	#6,d0
00014A22 43FB 00B0                  		lea	Obj01_PhysicsTable(pc,d0.w),a1
00014A26 31D9 F760                  		move.w	(a1)+,($FFFFF760).w
00014A2A 31D9 F762                  		move.w	(a1)+,($FFFFF762).w
00014A2E 31D1 F764                  		move.w	(a1),($FFFFF764).w
00014A32 4E75                       		rts
00014A34                            ; ===========================================================================
00014A34                            ; Apply speed cap for Sonic
00014A34                            ; ===========================================================================
00014A34                            Obj01_ApplySpeedCap:
00014A34 3228 0014                  		move.w	$14(a0),d1
00014A38 4A41                       		tst.w	d1
00014A3A 6A00                       		bpl.s	@not_negative
00014A3C 4441                       		neg.w	d1
00014A3E                            		
00014A3E                            @not_negative:
00014A3E 3438 F760                  		move.w	($FFFFF760).w,d2
00014A42 B242                       		cmp.w	d2,d1
00014A44 6F00                       		ble.s	@no_cap
00014A46 9278 F762                  		sub.w	($FFFFF762).w,d1
00014A4A 4A68 0014                  		tst.w	$14(a0)
00014A4E 6A00                       		bpl.s	@not_negative2
00014A50 4441                       		neg.w	d1
00014A52                            		
00014A52                            @not_negative2:
00014A52 3141 0014                  		move.w	d1,$14(a0)
00014A56                            		
00014A56                            @no_cap:
00014A56 4E75                       		rts
00014A58                            ; ===========================================================================
00014A58                            
00014A58                            Obj01:					; XREF: Obj_Index
00014A58 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014A5C 6700                       		beq.s	Obj01_Normal	; if not, branch
00014A5E 4EF9 0000 0000             		jmp	DebugMode
00014A64                            ; ===========================================================================
00014A64                            
00014A64                            Obj01_Normal:
00014A64 7000                       		moveq	#0,d0
00014A66 1028 0024                  		move.b	$24(a0),d0
00014A6A 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014A6E 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00014A72                            ; ===========================================================================
00014A72 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00014A74 0000                       		dc.w Obj01_Control-Obj01_Index
00014A76 0000                       		dc.w Obj01_Hurt-Obj01_Index
00014A78 0000                       		dc.w Obj01_Death-Obj01_Index
00014A7A 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014A7C 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014A7E                            ; ===========================================================================
00014A7E                            
00014A7E                            Obj01_Main:				; XREF: Obj01_Index
00014A7E 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
00014A84 5428 0024                  		addq.b	#2,$24(a0)
00014A88 117C 0013 0016             		move.b	#$13,$16(a0)
00014A8E 117C 0009 0017             		move.b	#9,$17(a0)
00014A94 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014A9C 317C 0780 0002             		move.w	#$780,2(a0)
00014AA2 117C 0002 0018             		move.b	#2,$18(a0)
00014AA8 117C 0018 0019             		move.b	#$18,$19(a0)
00014AAE 117C 0004 0001             		move.b	#4,1(a0)
00014AB4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014ABA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00014AC0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00014AC6 11FC 0005 D1C0             		move.b	#5,($FFFFD1C0).w
00014ACC                            
00014ACC                            Obj01_Control:				; XREF: Obj01_Index
00014ACC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014AD0 6700                       		beq.s	loc_12C58	; if not, branch
00014AD2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00014AD8 6700                       		beq.s	loc_12C58	; if not, branch
00014ADA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014AE0 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014AE4 4E75                       		rts	
00014AE6                            ; ===========================================================================
00014AE6                            
00014AE6                            loc_12C58:
00014AE6 6100 FF1C                  		bsr.w	Obj01_GetPhysics
00014AEA 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00014AEE 6600                       		bne.s	loc_12C64	; if yes, branch
00014AF0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014AF6                            
00014AF6                            loc_12C64:
00014AF6 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00014AFC 6600                       		bne.s	loc_12C7E	; if yes, branch
00014AFE 6100 0000                  		bsr.w	Obj01_DoModes
00014B02                            
00014B02                            loc_12C7E:
00014B02 4A28 0039                  		tst.b	crawling(a0)
00014B06 6600                       		bne.s	@no_bite
00014B08 4A28 003A                  		tst.b	biting(a0)
00014B0C 6600                       		bne.s	@chk_bite
00014B0E 0838 0006 F602             		btst	#6,($FFFFF602).w
00014B14 6700                       		beq.s	@no_bite
00014B16 4A38 FFBD                  		tst.b	($FFFFFFBD).w
00014B1A 6600                       		bne.s	@chk_bite
00014B1C 08A8 0005 0022             		bclr	#5,$22(a0)
00014B22 117C 000D 003A             		move.b	#13,biting(a0)
00014B28 11FC 0001 FFBD             		move.b	#1,($FFFFFFBD).w
00014B2E                            
00014B2E                            @chk_bite:
00014B2E 4A28 003A                  		tst.b	biting(a0)
00014B32 6700                       		beq.s	@no_dec
00014B34 117C 0009 001C             		move.b	#9,$1C(a0) ; Use "biting" animation
00014B3A 5328 003A                  		subq.b	#1,biting(a0)
00014B3E 6000                       		bra.s	@no_dec
00014B40                            		
00014B40                            @no_bite:
00014B40 11FC 0000 FFBD             		move.b	#0,($FFFFFFBD).w
00014B46 117C 0000 003A             		move.b	#0,biting(a0)
00014B4C                            		
00014B4C                            @no_dec:
00014B4C 6100                       		bsr.s	Sonic_Display
00014B4E 6100 0000                  		bsr.w	Sonic_RecordPos
00014B52 6100 0000                  		bsr.w	Sonic_Water
00014B56 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014B5C 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014B62 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014B66 6700                       		beq.s	loc_12CA6
00014B68 4A28 001C                  		tst.b	$1C(a0)
00014B6C 6600                       		bne.s	loc_12CA6
00014B6E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014B74                            
00014B74                            loc_12CA6:
00014B74 6100 0000                  		bsr.w	Sonic_Animate
00014B78 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014B7C 6B00                       		bmi.s	loc_12CB6
00014B7E 4EB9 0000 0000             		jsr	TouchResponse
00014B84                            
00014B84                            loc_12CB6:
00014B84 6000 0000                  		bra.w	LoadSonicDynPLC
00014B88                            ; ===========================================================================
00014B88                            
00014B88                            Obj01_DoModes:
00014B88 7000                       		moveq	#0,d0
00014B8A 1028 0022                  		move.b	$22(a0),d0
00014B8E 0240 0006                  		andi.w	#6,d0
00014B92 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014B96 4EFB 1000                  		jmp	Obj01_Modes(pc,d1.w)
00014B9A                            ; ===========================================================================
00014B9A                            
00014B9A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014B9C 0000                       		dc.w Obj01_MdAir-Obj01_Modes
00014B9E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014BA0 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014BA2                            ; ===========================================================================
00014BA2                            
00014BA2                            Sonic_Display:				; XREF: loc_12C7E
00014BA2 3028 0030                  		move.w	$30(a0),d0
00014BA6 6700                       		beq.s	Obj01_Display
00014BA8 5368 0030                  		subq.w	#1,$30(a0)
00014BAC E648                       		lsr.w	#3,d0
00014BAE 6400                       		bcc.s	Obj01_ChkInvin
00014BB0                            
00014BB0                            Obj01_Display:
00014BB0 4EBA A518                  		jsr	DisplaySprite
00014BB4                            
00014BB4                            Obj01_ChkInvin:
00014BB4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014BB8 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00014BBA 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014BBE 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014BC0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014BC4 6600                       		bne.b	Obj01_ChkShoes
00014BC6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014BCC                            
00014BCC                            Obj01_ChkShoes:
00014BCC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00014BD0 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00014BD2 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014BD6 6700                       		beq.s	Obj01_ExitChk
00014BD8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014BDC 6600                       		bne.s	Obj01_ExitChk
00014BDE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014BE4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014BEA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00014BF0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014BF6                            ; ===========================================================================
00014BF6                            
00014BF6                            Obj01_ExitChk:
00014BF6 4E75                       		rts
00014BF8                            
00014BF8                            ; ---------------------------------------------------------------------------
00014BF8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014BF8                            ; ---------------------------------------------------------------------------
00014BF8                            
00014BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BF8                            
00014BF8                            
00014BF8                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014BF8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014BFC 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014C00 43F1 0000                  		lea	(a1,d0.w),a1
00014C04 32E8 0008                  		move.w	8(a0),(a1)+
00014C08 32E8 000C                  		move.w	$C(a0),(a1)+
00014C0C 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014C10 4E75                       		rts	
00014C12                            ; End of function Sonic_RecordPos
00014C12                            
00014C12                            ; ---------------------------------------------------------------------------
00014C12                            ; Subroutine for Sonic when he's underwater
00014C12                            ; ---------------------------------------------------------------------------
00014C12                            
00014C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C12                            
00014C12                            
00014C12                            Sonic_Water:				; XREF: loc_12C7E
00014C12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014C18 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014C1A                            
00014C1A                            locret_12D80:
00014C1A 4E75                       		rts	
00014C1C                            ; ===========================================================================
00014C1C                            
00014C1C                            Obj01_InWater:
00014C1C 3038 F646                  		move.w	($FFFFF646).w,d0
00014C20 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014C24 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014C26 08E8 0006 0022             		bset	#6,$22(a0)
00014C2C 66EC                       		bne.s	locret_12D80
00014C2E 6100 0000                  		bsr.w	StopDrowning
00014C32 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014C38 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014C3E E0E8 0010                  		asr	$10(a0)
00014C42 E0E8 0012                  		asr	$12(a0)
00014C46 E0E8 0012                  		asr	$12(a0)
00014C4A 67CE                       		beq.s	locret_12D80
00014C4C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014C52 303C 00AA                  		move.w	#$AA,d0
00014C56 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014C5C                            ; ===========================================================================
00014C5C                            
00014C5C                            Obj01_OutWater:
00014C5C 08A8 0006 0022             		bclr	#6,$22(a0)
00014C62 67B6                       		beq.s	locret_12D80
00014C64 6100 0000                  		bsr.w	StopDrowning
00014C68 E1E8 0012                  		asl	$12(a0)
00014C6C 6700 FFAC                  		beq.w	locret_12D80
00014C70 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014C76 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014C7C 6E00                       		bgt.s	loc_12E0E
00014C7E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014C84                            
00014C84                            loc_12E0E:
00014C84 303C 00AA                  		move.w	#$AA,d0
00014C88 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014C8E                            ; End of function Sonic_Water
00014C8E                            
00014C8E                            ; ===========================================================================
00014C8E                            ; ---------------------------------------------------------------------------
00014C8E                            ; Modes	for controlling	Sonic
00014C8E                            ; ---------------------------------------------------------------------------
00014C8E                            
00014C8E                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014C8E 6100 0000                  		bsr.w	Sonic_Jump
00014C92 4A28 0039                  		tst.b	crawling(a0)
00014C96 6600                       		bne.s	@is_crawling
00014C98 6100 0000                  		bsr.w	Sonic_SlopeResist
00014C9C                            		
00014C9C                            @is_crawling:
00014C9C 6100 0000                  		bsr.w	Sonic_Move
00014CA0 6100 0000                  		bsr.w	Sonic_LevelBound
00014CA4 4EBA A40A                  		jsr	SpeedToPos
00014CA8 6100 0000                  		bsr.w	Sonic_AnglePos
00014CAC 4A28 0039                  		tst.b	crawling(a0)
00014CB0 6600                       		bne.s	@is_crawling2
00014CB2 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014CB6                            		
00014CB6                            @is_crawling2:
00014CB6 4A68 003E                  		tst.w	$3E(a0)
00014CBA 6700                       		beq.s	@no_movelock
00014CBC 5368 003E                  		subq.w	#1,$3E(a0)
00014CC0                            		
00014CC0                            @no_movelock:
00014CC0 103C 0000                  		move.b	#0,d0
00014CC4 0838 0001 F602             		btst	#1,($FFFFF602).w
00014CCA 6700                       		beq.s	@not_crawling
00014CCC 6100 FD66                  		bsr.w	Obj01_ApplySpeedCap
00014CD0 103C 0001                  		move.b	#1,d0
00014CD4                            		
00014CD4                            @not_crawling:
00014CD4 1140 0039                  		move.b	d0,crawling(a0)
00014CD8 4E75                       		rts	
00014CDA                            ; ===========================================================================
00014CDA                            
00014CDA                            Obj01_MdAir:				; XREF: Obj01_Modes
00014CDA 117C 0000 0039             		move.b	#0,crawling(a0)
00014CE0 6100 0000                  		bsr.w	Sonic_JumpHeight
00014CE4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014CE8 6100 0000                  		bsr.w	Sonic_LevelBound
00014CEC 4EBA A3A2                  		jsr	ObjectFall
00014CF0 0828 0006 0022             		btst	#6,$22(a0)
00014CF6 6700                       		beq.s	loc_12E5C
00014CF8 0468 0028 0012             		subi.w	#$28,$12(a0)
00014CFE                            
00014CFE                            loc_12E5C:
00014CFE 6100 0000                  		bsr.w	Sonic_JumpAngle
00014D02 6100 0000                  		bsr.w	Sonic_Floor
00014D06 4E75                       		rts	
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014D08 4E75                       		rts					; Nothing to see here
00014D0A                            ; ===========================================================================
00014D0A                            
00014D0A                            Obj01_MdJump:				; XREF: Obj01_Modes
00014D0A 117C 0000 0039             		move.b	#0,crawling(a0)
00014D10 6100 0000                  		bsr.w	Sonic_JumpHeight
00014D14 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014D18 6100 0000                  		bsr.w	Sonic_LevelBound
00014D1C 6100 0000                  		bsr.w 	Sonic_JumpAnimate
00014D20 4EBA A36E                  		jsr	ObjectFall
00014D24 0828 0006 0022             		btst	#6,$22(a0)
00014D2A 6700                       		beq.s	loc_12EA6
00014D2C 0468 0028 0012             		subi.w	#$28,$12(a0)
00014D32                            
00014D32                            loc_12EA6:
00014D32 6100 0000                  		bsr.w	Sonic_JumpAngle
00014D36 6100 0000                  		bsr.w	Sonic_Floor
00014D3A 4E75                       		rts	
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            ; Subroutine to	make Sonic walk/run
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            
00014D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D3C                            
00014D3C                            
00014D3C                            Sonic_Move:				; XREF: Obj01_MdNormal
00014D3C 3C38 F760                  		move.w	($FFFFF760).w,d6
00014D40 3A38 F762                  		move.w	($FFFFF762).w,d5
00014D44 3838 F764                  		move.w	($FFFFF764).w,d4
00014D48 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014D4C 6600 0000                  		bne.w	loc_12FEE
00014D50 4A68 003E                  		tst.w	$3E(a0)
00014D54 6600 0000                  		bne.w	Obj01_ResetScr
00014D58 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014D5E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014D60 6100 0000                  		bsr.w	Sonic_MoveLeft
00014D64                            
00014D64                            Obj01_NotLeft:
00014D64 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014D6A 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014D6C 6100 0000                  		bsr.w	Sonic_MoveRight
00014D70                            
00014D70                            Obj01_NotRight:
00014D70 1028 0026                  		move.b	$26(a0),d0
00014D74 0600 0020                  		addi.b	#$20,d0
00014D78 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014D7C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014D80 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014D84 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014D88 08A8 0005 0022             		bclr	#5,$22(a0)
00014D8E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014D94 0828 0003 0022             		btst	#3,$22(a0)
00014D9A 6700                       		beq.s	Sonic_Balance
00014D9C 7000                       		moveq	#0,d0
00014D9E 1028 003D                  		move.b	$3D(a0),d0
00014DA2 ED48                       		lsl.w	#6,d0
00014DA4 43F8 D000                  		lea	($FFFFD000).w,a1
00014DA8 43F1 0000                  		lea	(a1,d0.w),a1
00014DAC 4A29 0022                  		tst.b	$22(a1)
00014DB0 6B00                       		bmi.s	Sonic_LookUp
00014DB2 7200                       		moveq	#0,d1
00014DB4 1229 0019                  		move.b	$19(a1),d1
00014DB8 3401                       		move.w	d1,d2
00014DBA D442                       		add.w	d2,d2
00014DBC 5942                       		subq.w	#4,d2
00014DBE D268 0008                  		add.w	8(a0),d1
00014DC2 9269 0008                  		sub.w	8(a1),d1
00014DC6 0C41 0004                  		cmpi.w	#4,d1
00014DCA 6D00                       		blt.s	loc_12F6A
00014DCC B242                       		cmp.w	d2,d1
00014DCE 6C00                       		bge.s	loc_12F5A
00014DD0 6000                       		bra.s	Sonic_LookUp
00014DD2                            ; ===========================================================================
00014DD2                            
00014DD2                            Sonic_Balance:
00014DD2 4EB9 0000 0000             		jsr	ObjHitFloor
00014DD8 0C41 000C                  		cmpi.w	#$C,d1
00014DDC 6D00                       		blt.s	Sonic_LookUp
00014DDE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014DE4 6600                       		bne.s	loc_12F62
00014DE6                            
00014DE6                            loc_12F5A:
00014DE6 08A8 0000 0022             		bclr	#0,$22(a0)
00014DEC 6000                       		bra.s	loc_12F70
00014DEE                            ; ===========================================================================
00014DEE                            
00014DEE                            loc_12F62:
00014DEE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014DF4 6600                       		bne.s	Sonic_LookUp
00014DF6                            
00014DF6                            loc_12F6A:
00014DF6 08E8 0000 0022             		bset	#0,$22(a0)
00014DFC                            
00014DFC                            loc_12F70:
00014DFC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014E02 6000                       		bra.s	Obj01_ResetScr
00014E04                            ; ===========================================================================
00014E04                            
00014E04                            Sonic_LookUp:
00014E04 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014E0A 6700                       		beq.s	Sonic_Duck	; if not, branch
00014E0C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014E12 5238 C903                  		addq.b	#1,($FFFFC903).w
00014E16 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00014E1C 6500                       		bcs.s	Obj01_ResetScr_Part2
00014E1E 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014E24 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014E2A 6700                       		beq.s	loc_12FC2
00014E2C 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014E30 6000                       		bra.s	loc_12FC2
00014E32                            ; ===========================================================================
00014E32                            
00014E32                            Sonic_Duck:
00014E32 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014E38 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014E3A 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014E40 5238 C903                  		addq.b	#1,($FFFFC903).w
00014E44 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00014E4A 6500                       		bcs.s	Obj01_ResetScr_Part2
00014E4C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014E52 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014E58 6700                       		beq.s	loc_12FC2
00014E5A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014E5E 6000                       		bra.s	loc_12FC2
00014E60                            ; ===========================================================================
00014E60                            
00014E60                            Obj01_ResetScr:
00014E60 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00014E66                            		
00014E66                            Obj01_ResetScr_Part2:
00014E66 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014E6C 6700                       		beq.s	loc_12FC2	; if yes, branch
00014E6E 6400                       		bcc.s	loc_12FBE
00014E70 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014E74                            
00014E74                            loc_12FBE:
00014E74 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014E78                            
00014E78                            loc_12FC2:
00014E78 1038 F602                  		move.b	($FFFFF602).w,d0
00014E7C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014E80 6600                       		bne.s	loc_12FEE	; if yes, branch
00014E82 3028 0014                  		move.w	$14(a0),d0
00014E86 6700                       		beq.s	loc_12FEE
00014E88 6B00                       		bmi.s	loc_12FE2
00014E8A 9045                       		sub.w	d5,d0
00014E8C 6400                       		bcc.s	loc_12FDC
00014E8E 303C 0000                  		move.w	#0,d0
00014E92                            
00014E92                            loc_12FDC:
00014E92 3140 0014                  		move.w	d0,$14(a0)
00014E96 6000                       		bra.s	loc_12FEE
00014E98                            ; ===========================================================================
00014E98                            
00014E98                            loc_12FE2:
00014E98 D045                       		add.w	d5,d0
00014E9A 6400                       		bcc.s	loc_12FEA
00014E9C 303C 0000                  		move.w	#0,d0
00014EA0                            
00014EA0                            loc_12FEA:
00014EA0 3140 0014                  		move.w	d0,$14(a0)
00014EA4                            
00014EA4                            loc_12FEE:
00014EA4 1028 0026                  		move.b	$26(a0),d0
00014EA8 4EB9 0000 2B7C             		jsr	(CalcSine).l
00014EAE C3E8 0014                  		muls.w	$14(a0),d1
00014EB2 E081                       		asr.l	#8,d1
00014EB4 3141 0010                  		move.w	d1,$10(a0)
00014EB8 C1E8 0014                  		muls.w	$14(a0),d0
00014EBC E080                       		asr.l	#8,d0
00014EBE 3140 0012                  		move.w	d0,$12(a0)
00014EC2                            
00014EC2                            loc_1300C:
00014EC2 1028 0026                  		move.b	$26(a0),d0
00014EC6 0600 0040                  		addi.b	#$40,d0
00014ECA 6B00                       		bmi.s	locret_1307C
00014ECC 123C 0040                  		move.b	#$40,d1
00014ED0 4A68 0014                  		tst.w	$14(a0)
00014ED4 6700                       		beq.s	locret_1307C
00014ED6 6B00                       		bmi.s	loc_13024
00014ED8 4441                       		neg.w	d1
00014EDA                            
00014EDA                            loc_13024:
00014EDA 1028 0026                  		move.b	$26(a0),d0
00014EDE D001                       		add.b	d1,d0
00014EE0 3F00                       		move.w	d0,-(sp)
00014EE2 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014EE6 301F                       		move.w	(sp)+,d0
00014EE8 4A41                       		tst.w	d1
00014EEA 6A00                       		bpl.s	locret_1307C
00014EEC E141                       		asl.w	#8,d1
00014EEE 0600 0020                  		addi.b	#$20,d0
00014EF2 0200 00C0                  		andi.b	#$C0,d0
00014EF6 6700                       		beq.s	loc_13078
00014EF8 0C00 0040                  		cmpi.b	#$40,d0
00014EFC 6700                       		beq.s	loc_13066
00014EFE 0C00 0080                  		cmpi.b	#$80,d0
00014F02 6700                       		beq.s	loc_13060
00014F04 D368 0010                  		add.w	d1,$10(a0)
00014F08 08E8 0005 0022             		bset	#5,$22(a0)
00014F0E 317C 0000 0014             		move.w	#0,$14(a0)
00014F14 4E75                       		rts	
00014F16                            ; ===========================================================================
00014F16                            
00014F16                            loc_13060:
00014F16 9368 0012                  		sub.w	d1,$12(a0)
00014F1A 4E75                       		rts	
00014F1C                            ; ===========================================================================
00014F1C                            
00014F1C                            loc_13066:
00014F1C 9368 0010                  		sub.w	d1,$10(a0)
00014F20 08E8 0005 0022             		bset	#5,$22(a0)
00014F26 317C 0000 0014             		move.w	#0,$14(a0)
00014F2C 4E75                       		rts	
00014F2E                            ; ===========================================================================
00014F2E                            
00014F2E                            loc_13078:
00014F2E D368 0012                  		add.w	d1,$12(a0)
00014F32                            
00014F32                            locret_1307C:
00014F32 4E75                       		rts	
00014F34                            ; End of function Sonic_Move
00014F34                            
00014F34                            
00014F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F34                            
00014F34                            
00014F34                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00014F34 3028 0014                  		move.w	$14(a0),d0
00014F38 6700                       		beq.s	loc_13086
00014F3A 6A00                       		bpl.s	loc_130B2
00014F3C                            
00014F3C                            loc_13086:
00014F3C 08E8 0000 0022             		bset	#0,$22(a0)
00014F42 6600                       		bne.s	loc_1309A
00014F44 08A8 0005 0022             		bclr	#5,$22(a0)
00014F4A 117C 0001 001D             		move.b	#1,$1D(a0)
00014F50                            
00014F50                            loc_1309A:
00014F50 9045                       		sub.w	d5,d0
00014F52 3206                       		move.w	d6,d1
00014F54 4441                       		neg.w	d1
00014F56 B041                       		cmp.w	d1,d0
00014F58 6E00                       		bgt.s	loc_130A6
00014F5A D045                       		add.w	d5,d0
00014F5C B041                       		cmp.w	d1,d0
00014F5E 6F00                       		ble.s	loc_130A6
00014F60 3001                       		move.w	d1,d0
00014F62                            
00014F62                            loc_130A6:
00014F62 3140 0014                  		move.w	d0,$14(a0)
00014F66 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014F6C 4E75                       		rts
00014F6E                            ; ===========================================================================
00014F6E                            
00014F6E                            loc_130B2:				; XREF: Sonic_MoveLeft
00014F6E 9044                       		sub.w	d4,d0
00014F70 6400                       		bcc.s	loc_130BA
00014F72 303C FF80                  		move.w	#-$80,d0
00014F76                            
00014F76                            loc_130BA:
00014F76 3140 0014                  		move.w	d0,$14(a0)
00014F7A 1028 0026                  		move.b	$26(a0),d0
00014F7E 0600 0020                  		addi.b	#$20,d0
00014F82 0200 00C0                  		andi.b	#$C0,d0
00014F86 6600                       		bne.s	locret_130E8
00014F88 0C40 0400                  		cmpi.w	#$400,d0
00014F8C 6D00                       		blt.s	locret_130E8
00014F8E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014F94 08A8 0000 0022             		bclr	#0,$22(a0)
00014F9A 303C 00A4                  		move.w	#$A4,d0
00014F9E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
00014FA4                            
00014FA4                            locret_130E8:
00014FA4 4E75                       		rts	
00014FA6                            ; End of function Sonic_MoveLeft
00014FA6                            
00014FA6                            
00014FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FA6                            
00014FA6                            
00014FA6                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00014FA6 3028 0014                  		move.w	$14(a0),d0
00014FAA 6B00                       		bmi.s	loc_13118
00014FAC 08A8 0000 0022             		bclr	#0,$22(a0)
00014FB2 6700                       		beq.s	loc_13104
00014FB4 08A8 0005 0022             		bclr	#5,$22(a0)
00014FBA 117C 0001 001D             		move.b	#1,$1D(a0)
00014FC0                            
00014FC0                            loc_13104:
00014FC0 D045                       		add.w	d5,d0
00014FC2 B046                       		cmp.w	d6,d0
00014FC4 6D00                       		blt.s	loc_1310C
00014FC6 9045                       		sub.w	d5,d0
00014FC8 B046                       		cmp.w	d6,d0
00014FCA 6C00                       		bge.s	loc_1310C
00014FCC 3006                       		move.w	d6,d0
00014FCE                            
00014FCE                            loc_1310C:
00014FCE 3140 0014                  		move.w	d0,$14(a0)
00014FD2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014FD8 4E75                       		rts
00014FDA                            ; ===========================================================================
00014FDA                            
00014FDA                            loc_13118:				; XREF: Sonic_MoveRight
00014FDA D044                       		add.w	d4,d0
00014FDC 6400                       		bcc.s	loc_13120
00014FDE 303C 0080                  		move.w	#$80,d0
00014FE2                            
00014FE2                            loc_13120:
00014FE2 3140 0014                  		move.w	d0,$14(a0)
00014FE6 1028 0026                  		move.b	$26(a0),d0
00014FEA 0600 0020                  		addi.b	#$20,d0
00014FEE 0200 00C0                  		andi.b	#$C0,d0
00014FF2 6600                       		bne.s	locret_1314E
00014FF4 0C40 FC00                  		cmpi.w	#-$400,d0
00014FF8 6E00                       		bgt.s	locret_1314E
00014FFA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00015000 08E8 0000 0022             		bset	#0,$22(a0)
00015006 303C 00A4                  		move.w	#$A4,d0
0001500A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
00015010                            
00015010                            locret_1314E:
00015010 4E75                       		rts	
00015012                            ; End of function Sonic_MoveRight
00015012                            
00015012                            ; ---------------------------------------------------------------------------
00015012                            ; Subroutine to	change Sonic's speed as he rolls
00015012                            ; ---------------------------------------------------------------------------
00015012                            
00015012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015012                            
00015012                            
00015012                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00015012 3C38 F760                  		move.w	($FFFFF760).w,d6
00015016 E346                       		asl.w	#1,d6
00015018 3A38 F762                  		move.w	($FFFFF762).w,d5
0001501C E245                       		asr.w	#1,d5
0001501E 3838 F764                  		move.w	($FFFFF764).w,d4
00015022 E444                       		asr.w	#2,d4
00015024 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00015028 6600 0000                  		bne.w	loc_131CC
0001502C 4A68 003E                  		tst.w	$3E(a0)
00015030 6600                       		bne.s	loc_13188
00015032 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00015038 6700                       		beq.s	loc_1317C	; if not, branch
0001503A 6100 0000                  		bsr.w	Sonic_RollLeft
0001503E                            
0001503E                            loc_1317C:
0001503E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00015044 6700                       		beq.s	loc_13188	; if not, branch
00015046 6100 0000                  		bsr.w	Sonic_RollRight
0001504A                            
0001504A                            loc_13188:
0001504A 3028 0014                  		move.w	$14(a0),d0
0001504E 6700                       		beq.s	loc_131AA
00015050 6B00                       		bmi.s	loc_1319E
00015052 9045                       		sub.w	d5,d0
00015054 6400                       		bcc.s	loc_13198
00015056 303C 0000                  		move.w	#0,d0
0001505A                            
0001505A                            loc_13198:
0001505A 3140 0014                  		move.w	d0,$14(a0)
0001505E 6000                       		bra.s	loc_131AA
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_1319E:				; XREF: Sonic_RollSpeed
00015060 D045                       		add.w	d5,d0
00015062 6400                       		bcc.s	loc_131A6
00015064 303C 0000                  		move.w	#0,d0
00015068                            
00015068                            loc_131A6:
00015068 3140 0014                  		move.w	d0,$14(a0)
0001506C                            
0001506C                            loc_131AA:
0001506C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00015070 6600                       		bne.s	loc_131CC	; if yes, branch
00015072 08A8 0002 0022             		bclr	#2,$22(a0)
00015078 117C 0013 0016             		move.b	#$13,$16(a0)
0001507E 117C 0009 0017             		move.b	#9,$17(a0)
00015084 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001508A 5B68 000C                  		subq.w	#5,$C(a0)
0001508E                            
0001508E                            loc_131CC:
0001508E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015094 6700                       		beq.s	@cont2
00015096 6400                       		bcc.s	@cont1
00015098 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001509C                            		
0001509C                            @cont1:
0001509C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000150A0                            		
000150A0                            @cont2:
000150A0 1028 0026                  		move.b	$26(a0),d0
000150A4 4EB9 0000 2B7C             		jsr	(CalcSine).l
000150AA C1E8 0014                  		muls.w	$14(a0),d0
000150AE E080                       		asr.l	#8,d0
000150B0 3140 0012                  		move.w	d0,$12(a0)
000150B4 C3E8 0014                  		muls.w	$14(a0),d1
000150B8 E081                       		asr.l	#8,d1
000150BA 0C41 1000                  		cmpi.w	#$1000,d1
000150BE 6F00                       		ble.s	loc_131F0
000150C0 323C 1000                  		move.w	#$1000,d1
000150C4                            
000150C4                            loc_131F0:
000150C4 0C41 F000                  		cmpi.w	#-$1000,d1
000150C8 6C00                       		bge.s	loc_131FA
000150CA 323C F000                  		move.w	#-$1000,d1
000150CE                            
000150CE                            loc_131FA:
000150CE 3141 0010                  		move.w	d1,$10(a0)
000150D2 6000 FDEE                  		bra.w	loc_1300C
000150D6                            ; End of function Sonic_RollSpeed
000150D6                            
000150D6                            
000150D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D6                            
000150D6                            
000150D6                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000150D6 3028 0014                  		move.w	$14(a0),d0
000150DA 6700                       		beq.s	loc_1320A
000150DC 6A00                       		bpl.s	loc_13218
000150DE                            
000150DE                            loc_1320A:
000150DE 08E8 0000 0022             		bset	#0,$22(a0)
000150E4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000150EA 4E75                       		rts	
000150EC                            ; ===========================================================================
000150EC                            
000150EC                            loc_13218:
000150EC 9044                       		sub.w	d4,d0
000150EE 6400                       		bcc.s	loc_13220
000150F0 303C FF80                  		move.w	#-$80,d0
000150F4                            
000150F4                            loc_13220:
000150F4 3140 0014                  		move.w	d0,$14(a0)
000150F8 4E75                       		rts	
000150FA                            ; End of function Sonic_RollLeft
000150FA                            
000150FA                            
000150FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FA                            
000150FA                            
000150FA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000150FA 3028 0014                  		move.w	$14(a0),d0
000150FE 6B00                       		bmi.s	loc_1323A
00015100 08A8 0000 0022             		bclr	#0,$22(a0)
00015106 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001510C 4E75                       		rts	
0001510E                            ; ===========================================================================
0001510E                            
0001510E                            loc_1323A:
0001510E D044                       		add.w	d4,d0
00015110 6400                       		bcc.s	loc_13242
00015112 303C 0080                  		move.w	#$80,d0
00015116                            
00015116                            loc_13242:
00015116 3140 0014                  		move.w	d0,$14(a0)
0001511A 4E75                       		rts	
0001511C                            ; End of function Sonic_RollRight
0001511C                            
0001511C                            ; ---------------------------------------------------------------------------
0001511C                            ; Subroutine to	change Sonic's direction while jumping
0001511C                            ; ---------------------------------------------------------------------------
0001511C                            
0001511C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001511C                            
0001511C                            
0001511C                            Sonic_ChgJumpDir:		; XREF: Obj01_MdAir; Obj01_MdJump
0001511C 3C38 F760                  		move.w	($FFFFF760).w,d6
00015120 3A38 F762                  		move.w	($FFFFF762).w,d5
00015124 E345                       		asl.w	#1,d5
00015126 0828 0004 0022             		btst	#4,$22(a0)	
0001512C 6600                       		bne.s	Obj01_ResetScr2	
0001512E 3028 0010                  		move.w	$10(a0),d0	
00015132 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015138 6700                       		beq.s	loc_13278; if not, branch	
0001513A 08E8 0000 0022             		bset	#0,$22(a0)	
00015140 9045                       		sub.w	d5,d0	
00015142 3206                       		move.w	d6,d1	
00015144 4441                       		neg.w	d1	
00015146 B041                       		cmp.w	d1,d0	
00015148 6E00                       		bgt.s	loc_13278	
0001514A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001514C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001514E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015150 3001                       		move.w	d1,d0
00015152                            
00015152                            loc_13278:
00015152 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015158 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001515A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015160 D045                       		add.w	d5,d0	
00015162 B046                       		cmp.w	d6,d0	
00015164 6D00                       		blt.s	Obj01_JumpMove
00015166 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015168 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
0001516A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001516C 3006                       		move.w	d6,d0
0001516E                            
0001516E                            Obj01_JumpMove:
0001516E 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00015172                            
00015172                            Obj01_ResetScr2:
00015172 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00015178 6700                       		beq.s	loc_132A4	; if yes, branch
0001517A 6400                       		bcc.s	loc_132A0
0001517C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015180                            
00015180                            loc_132A0:
00015180 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015184                            
00015184                            loc_132A4:
00015184 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001518A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001518C 3028 0010                  		move.w	$10(a0),d0
00015190 3200                       		move.w	d0,d1
00015192 EA41                       		asr.w	#5,d1
00015194 6700                       		beq.s	locret_132D2
00015196 6B00                       		bmi.s	loc_132C6
00015198 9041                       		sub.w	d1,d0
0001519A 6400                       		bcc.s	loc_132C0
0001519C 303C 0000                  		move.w	#0,d0
000151A0                            
000151A0                            loc_132C0:
000151A0 3140 0010                  		move.w	d0,$10(a0)
000151A4 4E75                       		rts	
000151A6                            ; ===========================================================================
000151A6                            
000151A6                            loc_132C6:
000151A6 9041                       		sub.w	d1,d0
000151A8 6500                       		bcs.s	loc_132CE
000151AA 303C 0000                  		move.w	#0,d0
000151AE                            
000151AE                            loc_132CE:
000151AE 3140 0010                  		move.w	d0,$10(a0)
000151B2                            
000151B2                            locret_132D2:
000151B2 4E75                       		rts	
000151B4                            ; End of function Sonic_ChgJumpDir
000151B4                            
000151B4                            ; ===========================================================================
000151B4                            ; ---------------------------------------------------------------------------
000151B4                            ; Unused subroutine to squash Sonic
000151B4                            ; ---------------------------------------------------------------------------
000151B4 1028 0026                  		move.b	$26(a0),d0
000151B8 0600 0020                  		addi.b	#$20,d0
000151BC 0200 00C0                  		andi.b	#$C0,d0
000151C0 6600                       		bne.s	locret_13302
000151C2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000151C6 4A41                       		tst.w	d1
000151C8 6A00                       		bpl.s	locret_13302
000151CA 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000151D0 317C 0000 0010             		move.w	#0,$10(a0)
000151D6 317C 0000 0012             		move.w	#0,$12(a0)
000151DC 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000151E2                            
000151E2                            locret_13302:
000151E2 4E75                       		rts	
000151E4                            ; ---------------------------------------------------------------------------
000151E4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000151E4                            ; ---------------------------------------------------------------------------
000151E4                            
000151E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151E4                            
000151E4                            
000151E4                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000151E4 2228 0008                  		move.l	8(a0),d1
000151E8 3028 0010                  		move.w	$10(a0),d0
000151EC 48C0                       		ext.l	d0
000151EE E180                       		asl.l	#8,d0
000151F0 D280                       		add.l	d0,d1
000151F2 4841                       		swap	d1
000151F4 3038 F728                  		move.w	($FFFFF728).w,d0
000151F8 0640 0010                  		addi.w	#$10,d0
000151FC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000151FE 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00015200 3038 F72A                  		move.w	($FFFFF72A).w,d0
00015204 0640 0128                  		addi.w	#$128,d0
00015208 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001520C 6600                       		bne.s	loc_13332
0001520E 0640 0040                  		addi.w	#$40,d0
00015212                            
00015212                            loc_13332:
00015212 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015214 6300                       		bls.s	Boundary_Sides	; if yes, branch
00015216                            
00015216                            loc_13336:
00015216 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001521A 0640 00E0                  		addi.w	#$E0,d0
0001521E B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00015222 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00015224 4E75                       		rts	
00015226                            ; ===========================================================================
00015226                            
00015226                            Boundary_Bottom:
00015226 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001522C 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00015230 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00015236 6500 0000                  		bcs.w	KillSonic
0001523A 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001523E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015244 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001524A 4E75                       		rts	
0001524C                            ; ===========================================================================
0001524C                            
0001524C                            Boundary_Sides:
0001524C 3140 0008                  		move.w	d0,8(a0)
00015250 317C 0000 000A             		move.w	#0,$A(a0)
00015256 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001525C 317C 0000 0014             		move.w	#0,$14(a0)
00015262 60B2                       		bra.s	loc_13336
00015264                            ; End of function Sonic_LevelBound
00015264                            
00015264                            ; ---------------------------------------------------------------------------
00015264                            ; Subroutine allowing Sonic to jump
00015264                            ; ---------------------------------------------------------------------------
00015264                            
00015264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015264                            
00015264                            
00015264                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015264 1038 F603                  		move.b	($FFFFF603).w,d0
00015268 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001526C 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015270 7000                       		moveq	#0,d0
00015272 1028 0026                  		move.b	$26(a0),d0
00015276 0600 0080                  		addi.b	#$80,d0
0001527A 6100 0000                  		bsr.w	sub_14D48
0001527E 0C41 0006                  		cmpi.w	#6,d1
00015282 6D00 0000                  		blt.w	locret_1348E
00015286 343C 0680                  		move.w	#$680,d2
0001528A 0828 0006 0022             		btst	#6,$22(a0)
00015290 6700                       		beq.s	loc_1341C
00015292 343C 0380                  		move.w	#$380,d2
00015296                            
00015296                            loc_1341C:
00015296 7000                       		moveq	#0,d0
00015298 1028 0026                  		move.b	$26(a0),d0
0001529C 0400 0040                  		subi.b	#$40,d0
000152A0 4EB9 0000 2B7C             		jsr	(CalcSine).l
000152A6 C3C2                       		muls.w	d2,d1
000152A8 E081                       		asr.l	#8,d1
000152AA D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000152AE C1C2                       		muls.w	d2,d0
000152B0 E080                       		asr.l	#8,d0
000152B2 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000152B6 08E8 0001 0022             		bset	#1,$22(a0)
000152BC 08A8 0005 0022             		bclr	#5,$22(a0)
000152C2 588F                       		addq.l	#4,sp
000152C4 117C 0001 003C             		move.b	#1,$3C(a0)
000152CA 4228 0038                  		clr.b	$38(a0)
000152CE 303C 00A0                  		move.w	#$A0,d0
000152D2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
000152D8 117C 0013 0016             		move.b	#$13,$16(a0)
000152DE 117C 0009 0017             		move.b	#9,$17(a0)
000152E4 0828 0002 0022             		btst	#2,$22(a0)
000152EA 6600                       		bne.s	loc_13490
000152EC 117C 000E 0016             		move.b	#$E,$16(a0)
000152F2 117C 0007 0017             		move.b	#7,$17(a0)
000152F8 117C 001F 001C             		move.b	#$1F,$1C(a0)	; use "jumping"	animation
000152FE 08E8 0002 0022             		bset	#2,$22(a0)
00015304 5A68 000C                  		addq.w	#5,$C(a0)
00015308                            
00015308                            locret_1348E:
00015308 4E75                       		rts	
0001530A                            ; ===========================================================================
0001530A                            
0001530A                            loc_13490:
0001530A 08E8 0004 0022             		bset	#4,$22(a0)
00015310 4E75                       		rts	
00015312                            ; End of function Sonic_Jump
00015312                            
00015312                            
00015312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015312                            
00015312                            
00015312                            Sonic_JumpAnimate:
00015312 103C 0020                  		move.b #$20,d0 ;animation down
00015316 4A68 0012                  		tst.w $12(a0)
0001531A 6A00                       		bpl.s @positive
0001531C 103C 001F                  		move.b #$1F,d0 ;animation up
00015320                            
00015320                            @positive:
00015320 1140 001C                  		move.b d0,$1C(a0)
00015324 4E75                       		rts
00015326                            
00015326                            Sonic_JumpHeight:			; XREF: Obj01_MdAir; Obj01_MdJump
00015326 4A28 003C                  		tst.b	$3C(a0)
0001532A 6700                       		beq.s	loc_134C4
0001532C 323C FC00                  		move.w	#-$400,d1
00015330 0828 0006 0022             		btst	#6,$22(a0)
00015336 6700                       		beq.s	loc_134AE
00015338 323C FE00                  		move.w	#-$200,d1
0001533C                            
0001533C                            loc_134AE:
0001533C B268 0012                  		cmp.w	$12(a0),d1
00015340 6F00                       		ble.s	locret_134C2
00015342 1038 F602                  		move.b	($FFFFF602).w,d0
00015346 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001534A 6600                       		bne.s	locret_134C2	; if yes, branch
0001534C 3141 0012                  		move.w	d1,$12(a0)
00015350                            
00015350                            locret_134C2:
00015350 4E75                       		rts	
00015352                            ; ===========================================================================
00015352                            
00015352                            loc_134C4:
00015352 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00015358 6C00                       		bge.s	locret_134D2
0001535A 317C F040 0012             		move.w	#-$FC0,$12(a0)
00015360                            
00015360                            locret_134D2:
00015360 4E75                       		rts	
00015362                            ; End of function Sonic_JumpHeight
00015362                            
00015362                            ; ---------------------------------------------------------------------------
00015362                            ; Subroutine to	slow Sonic walking up a	slope
00015362                            ; ---------------------------------------------------------------------------
00015362                            
00015362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015362                            
00015362                            
00015362                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00015362 1028 0026                  		move.b	$26(a0),d0
00015366 0600 0060                  		addi.b	#$60,d0
0001536A 0C00 00C0                  		cmpi.b	#$C0,d0
0001536E 6400                       		bcc.s	locret_13508
00015370 1028 0026                  		move.b	$26(a0),d0
00015374 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001537A C1FC 0020                  		muls.w	#$20,d0
0001537E E080                       		asr.l	#8,d0
00015380 4A68 0014                  		tst.w	$14(a0)
00015384 6700                       		beq.s	locret_13508
00015386 6B00                       		bmi.s	loc_13504
00015388 4A40                       		tst.w	d0
0001538A 6700                       		beq.s	locret_13502
0001538C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00015390                            
00015390                            locret_13502:
00015390 4E75                       		rts	
00015392                            ; ===========================================================================
00015392                            
00015392                            loc_13504:
00015392 D168 0014                  		add.w	d0,$14(a0)
00015396                            
00015396                            locret_13508:
00015396 4E75                       		rts	
00015398                            ; End of function Sonic_SlopeResist
00015398                            
00015398                            ; ---------------------------------------------------------------------------
00015398                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015398                            ; ---------------------------------------------------------------------------
00015398                            
00015398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015398                            
00015398                            
00015398                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00015398 1028 0026                  		move.b	$26(a0),d0
0001539C 0600 0060                  		addi.b	#$60,d0
000153A0 0C00 00C0                  		cmpi.b	#-$40,d0
000153A4 6400                       		bcc.s	locret_13544
000153A6 1028 0026                  		move.b	$26(a0),d0
000153AA 4EB9 0000 2B7C             		jsr	(CalcSine).l
000153B0 C1FC 0050                  		muls.w	#$50,d0
000153B4 E080                       		asr.l	#8,d0
000153B6 4A68 0014                  		tst.w	$14(a0)
000153BA 6B00                       		bmi.s	loc_1353A
000153BC 4A40                       		tst.w	d0
000153BE 6A00                       		bpl.s	loc_13534
000153C0 E480                       		asr.l	#2,d0
000153C2                            
000153C2                            loc_13534:
000153C2 D168 0014                  		add.w	d0,$14(a0)
000153C6 4E75                       		rts	
000153C8                            ; ===========================================================================
000153C8                            
000153C8                            loc_1353A:
000153C8 4A40                       		tst.w	d0
000153CA 6B00                       		bmi.s	loc_13540
000153CC E480                       		asr.l	#2,d0
000153CE                            
000153CE                            loc_13540:
000153CE D168 0014                  		add.w	d0,$14(a0)
000153D2                            
000153D2                            locret_13544:
000153D2 4E75                       		rts	
000153D4                            ; End of function Sonic_RollRepel
000153D4                            
000153D4                            ; ---------------------------------------------------------------------------
000153D4                            ; Subroutine to	push Sonic down	a slope
000153D4                            ; ---------------------------------------------------------------------------
000153D4                            
000153D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153D4                            
000153D4                            
000153D4                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000153D4 4E71                       		nop	
000153D6 4A28 0038                  		tst.b	$38(a0)
000153DA 6600                       		bne.s	locret_13580
000153DC 4A68 003E                  		tst.w	$3E(a0)
000153E0 6600                       		bne.s	locret_13580
000153E2 1028 0026                  		move.b	$26(a0),d0
000153E6 0600 0020                  		addi.b	#$20,d0
000153EA 0200 00C0                  		andi.b	#$C0,d0
000153EE 6700                       		beq.s	locret_13580
000153F0 3028 0014                  		move.w	$14(a0),d0
000153F4 6A00                       		bpl.s	loc_1356A
000153F6 4440                       		neg.w	d0
000153F8                            
000153F8                            loc_1356A:
000153F8 0C40 0280                  		cmpi.w	#$280,d0
000153FC 6400                       		bcc.s	locret_13580
000153FE 4268 0014                  		clr.w	$14(a0)
00015402 08E8 0001 0022             		bset	#1,$22(a0)
00015408 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001540E                            
0001540E                            locret_13580:
0001540E 4E75                       		rts	
00015410                            ; ===========================================================================
00015410                            
00015410                            loc_13582:
00015410 4E75                       		rts	
00015412                            ; End of function Sonic_SlopeRepel
00015412                            
00015412                            ; ---------------------------------------------------------------------------
00015412                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015412                            ; ---------------------------------------------------------------------------
00015412                            
00015412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015412                            
00015412                            
00015412                            Sonic_JumpAngle:			; XREF: Obj01_MdAir; Obj01_MdJump
00015412 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015416 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015418 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001541A                            
0001541A 5400                       		addq.b	#2,d0		; increase angle
0001541C 6400                       		bcc.s	loc_13596
0001541E 7000                       		moveq	#0,d0
00015420                            
00015420                            loc_13596:
00015420 6000                       		bra.s	loc_1359E
00015422                            ; ===========================================================================
00015422                            
00015422                            loc_13598:
00015422 5500                       		subq.b	#2,d0		; decrease angle
00015424 6400                       		bcc.s	loc_1359E
00015426 7000                       		moveq	#0,d0
00015428                            
00015428                            loc_1359E:
00015428 1140 0026                  		move.b	d0,$26(a0)
0001542C                            
0001542C                            locret_135A2:
0001542C 4E75                       		rts	
0001542E                            ; End of function Sonic_JumpAngle
0001542E                            
0001542E                            ; ---------------------------------------------------------------------------
0001542E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001542E                            ; ---------------------------------------------------------------------------
0001542E                            
0001542E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001542E                            
0001542E                            
0001542E                            Sonic_Floor:				; XREF: Obj01_MdAir; Obj01_MdJump
0001542E 3228 0010                  		move.w	$10(a0),d1
00015432 3428 0012                  		move.w	$12(a0),d2
00015436 4EB9 0000 2E4A             		jsr	(CalcAngle).l
0001543C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015440 0400 0020                  		subi.b	#$20,d0
00015444 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015448 0200 00C0                  		andi.b	#$C0,d0
0001544C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015450 0C00 0040                  		cmpi.b	#$40,d0
00015454 6700 0000                  		beq.w	loc_13680
00015458 0C00 0080                  		cmpi.b	#$80,d0
0001545C 6700 0000                  		beq.w	loc_136E2
00015460 0C00 00C0                  		cmpi.b	#-$40,d0
00015464 6700 0000                  		beq.w	loc_1373E
00015468 6100 0000                  		bsr.w	Sonic_HitWall
0001546C 4A41                       		tst.w	d1
0001546E 6A00                       		bpl.s	loc_135F0
00015470 9368 0008                  		sub.w	d1,8(a0)
00015474 317C 0000 0010             		move.w	#0,$10(a0)
0001547A                            
0001547A                            loc_135F0:
0001547A 6100 0000                  		bsr.w	sub_14EB4
0001547E 4A41                       		tst.w	d1
00015480 6A00                       		bpl.s	loc_13602
00015482 D368 0008                  		add.w	d1,8(a0)
00015486 317C 0000 0010             		move.w	#0,$10(a0)
0001548C                            
0001548C                            loc_13602:
0001548C 6100 0000                  		bsr.w	Sonic_HitFloor
00015490 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015494 4A41                       		tst.w	d1
00015496 6A00                       		bpl.s	locret_1367E
00015498 1428 0012                  		move.b	$12(a0),d2
0001549C 5002                       		addq.b	#8,d2
0001549E 4402                       		neg.b	d2
000154A0 B202                       		cmp.b	d2,d1
000154A2 6C00                       		bge.s	loc_1361E
000154A4 B002                       		cmp.b	d2,d0
000154A6 6D00                       		blt.s	locret_1367E
000154A8                            
000154A8                            loc_1361E:
000154A8 D368 000C                  		add.w	d1,$C(a0)
000154AC 1143 0026                  		move.b	d3,$26(a0)
000154B0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000154B4 117C 0000 001C             		move.b	#0,$1C(a0)
000154BA 1003                       		move.b	d3,d0
000154BC 0600 0020                  		addi.b	#$20,d0
000154C0 0200 0040                  		andi.b	#$40,d0
000154C4 6600                       		bne.s	loc_1365C
000154C6 1003                       		move.b	d3,d0
000154C8 0600 0010                  		addi.b	#$10,d0
000154CC 0200 0020                  		andi.b	#$20,d0
000154D0 6700                       		beq.s	loc_1364E
000154D2 E0E8 0012                  		asr	$12(a0)
000154D6 6000                       		bra.s	loc_13670
000154D8                            ; ===========================================================================
000154D8                            
000154D8                            loc_1364E:
000154D8 317C 0000 0012             		move.w	#0,$12(a0)
000154DE 3168 0010 0014             		move.w	$10(a0),$14(a0)
000154E4 4E75                       		rts	
000154E6                            ; ===========================================================================
000154E6                            
000154E6                            loc_1365C:
000154E6 317C 0000 0010             		move.w	#0,$10(a0)
000154EC 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000154F2 6F00                       		ble.s	loc_13670
000154F4 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000154FA                            
000154FA                            loc_13670:
000154FA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015500 4A03                       		tst.b	d3
00015502 6A00                       		bpl.s	locret_1367E
00015504 4468 0014                  		neg.w	$14(a0)
00015508                            
00015508                            locret_1367E:
00015508 4E75                       		rts	
0001550A                            ; ===========================================================================
0001550A                            
0001550A                            loc_13680:
0001550A 6100 0000                  		bsr.w	Sonic_HitWall
0001550E 4A41                       		tst.w	d1
00015510 6A00                       		bpl.s	loc_1369A
00015512 9368 0008                  		sub.w	d1,8(a0)
00015516 317C 0000 0010             		move.w	#0,$10(a0)
0001551C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015522 4E75                       		rts	
00015524                            ; ===========================================================================
00015524                            
00015524                            loc_1369A:
00015524 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015528 4A41                       		tst.w	d1
0001552A 6A00                       		bpl.s	loc_136B4
0001552C 9368 000C                  		sub.w	d1,$C(a0)
00015530 4A68 0012                  		tst.w	$12(a0)
00015534 6A00                       		bpl.s	locret_136B2
00015536 317C 0000 0012             		move.w	#0,$12(a0)
0001553C                            
0001553C                            locret_136B2:
0001553C 4E75                       		rts	
0001553E                            ; ===========================================================================
0001553E                            
0001553E                            loc_136B4:
0001553E 4A68 0012                  		tst.w	$12(a0)
00015542 6B00                       		bmi.s	locret_136E0
00015544 6100 0000                  		bsr.w	Sonic_HitFloor
00015548 4A41                       		tst.w	d1
0001554A 6A00                       		bpl.s	locret_136E0
0001554C D368 000C                  		add.w	d1,$C(a0)
00015550 1143 0026                  		move.b	d3,$26(a0)
00015554 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015558 117C 0000 001C             		move.b	#0,$1C(a0)
0001555E 317C 0000 0012             		move.w	#0,$12(a0)
00015564 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001556A                            
0001556A                            locret_136E0:
0001556A 4E75                       		rts	
0001556C                            ; ===========================================================================
0001556C                            
0001556C                            loc_136E2:
0001556C 6100 0000                  		bsr.w	Sonic_HitWall
00015570 4A41                       		tst.w	d1
00015572 6A00                       		bpl.s	loc_136F4
00015574 9368 0008                  		sub.w	d1,8(a0)
00015578 317C 0000 0010             		move.w	#0,$10(a0)
0001557E                            
0001557E                            loc_136F4:
0001557E 6100 0000                  		bsr.w	sub_14EB4
00015582 4A41                       		tst.w	d1
00015584 6A00                       		bpl.s	loc_13706
00015586 D368 0008                  		add.w	d1,8(a0)
0001558A 317C 0000 0010             		move.w	#0,$10(a0)
00015590                            
00015590                            loc_13706:
00015590 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015594 4A41                       		tst.w	d1
00015596 6A00                       		bpl.s	locret_1373C
00015598 9368 000C                  		sub.w	d1,$C(a0)
0001559C 1003                       		move.b	d3,d0
0001559E 0600 0020                  		addi.b	#$20,d0
000155A2 0200 0040                  		andi.b	#$40,d0
000155A6 6600                       		bne.s	loc_13726
000155A8 317C 0000 0012             		move.w	#0,$12(a0)
000155AE 4E75                       		rts	
000155B0                            ; ===========================================================================
000155B0                            
000155B0                            loc_13726:
000155B0 1143 0026                  		move.b	d3,$26(a0)
000155B4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000155B8 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155BE 4A03                       		tst.b	d3
000155C0 6A00                       		bpl.s	locret_1373C
000155C2 4468 0014                  		neg.w	$14(a0)
000155C6                            
000155C6                            locret_1373C:
000155C6 4E75                       		rts	
000155C8                            ; ===========================================================================
000155C8                            
000155C8                            loc_1373E:
000155C8 6100 0000                  		bsr.w	sub_14EB4
000155CC 4A41                       		tst.w	d1
000155CE 6A00                       		bpl.s	loc_13758
000155D0 D368 0008                  		add.w	d1,8(a0)
000155D4 317C 0000 0010             		move.w	#0,$10(a0)
000155DA 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155E0 4E75                       		rts	
000155E2                            ; ===========================================================================
000155E2                            
000155E2                            loc_13758:
000155E2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000155E6 4A41                       		tst.w	d1
000155E8 6A00                       		bpl.s	loc_13772
000155EA 9368 000C                  		sub.w	d1,$C(a0)
000155EE 4A68 0012                  		tst.w	$12(a0)
000155F2 6A00                       		bpl.s	locret_13770
000155F4 317C 0000 0012             		move.w	#0,$12(a0)
000155FA                            
000155FA                            locret_13770:
000155FA 4E75                       		rts	
000155FC                            ; ===========================================================================
000155FC                            
000155FC                            loc_13772:
000155FC 4A68 0012                  		tst.w	$12(a0)
00015600 6B00                       		bmi.s	locret_1379E
00015602 6100 0000                  		bsr.w	Sonic_HitFloor
00015606 4A41                       		tst.w	d1
00015608 6A00                       		bpl.s	locret_1379E
0001560A D368 000C                  		add.w	d1,$C(a0)
0001560E 1143 0026                  		move.b	d3,$26(a0)
00015612 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015616 117C 0000 001C             		move.b	#0,$1C(a0)
0001561C 317C 0000 0012             		move.w	#0,$12(a0)
00015622 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015628                            
00015628                            locret_1379E:
00015628 4E75                       		rts	
0001562A                            ; End of function Sonic_Floor
0001562A                            
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            
0001562A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001562A                            
0001562A                            
0001562A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001562A 0828 0004 0022             		btst	#4,$22(a0)
00015630 6700                       		beq.s	loc_137AE
00015632 4E71                       		nop	
00015634 4E71                       		nop	
00015636 4E71                       		nop	
00015638                            
00015638                            loc_137AE:
00015638 08A8 0005 0022             		bclr	#5,$22(a0)
0001563E 08A8 0001 0022             		bclr	#1,$22(a0)
00015644 08A8 0004 0022             		bclr	#4,$22(a0)
0001564A 0828 0002 0022             		btst	#2,$22(a0)
00015650 6700                       		beq.s	loc_137E4
00015652 08A8 0002 0022             		bclr	#2,$22(a0)
00015658 117C 0013 0016             		move.b	#$13,$16(a0)
0001565E 117C 0009 0017             		move.b	#9,$17(a0)
00015664 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001566A 5B68 000C                  		subq.w	#5,$C(a0)
0001566E                            
0001566E                            loc_137E4:
0001566E 117C 0000 003C             		move.b	#0,$3C(a0)
00015674 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001567A 4E75                       		rts	
0001567C                            ; End of function Sonic_ResetOnFloor
0001567C                            
0001567C                            ; ===========================================================================
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            ; Sonic	when he	gets hurt
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            
0001567C                            Obj01_Hurt:				; XREF: Obj01_Index
0001567C 4EBA 9A32                  		jsr	SpeedToPos
00015680 0668 0030 0012             		addi.w	#$30,$12(a0)
00015686 0828 0006 0022             		btst	#6,$22(a0)
0001568C 6700                       		beq.s	loc_1380C
0001568E 0468 0020 0012             		subi.w	#$20,$12(a0)
00015694                            
00015694                            loc_1380C:
00015694 6100 0000                  		bsr.w	Sonic_HurtStop
00015698 6100 FB4A                  		bsr.w	Sonic_LevelBound
0001569C 6100 F55A                  		bsr.w	Sonic_RecordPos
000156A0 6100 0000                  		bsr.w	Sonic_Animate
000156A4 6100 0000                  		bsr.w	LoadSonicDynPLC
000156A8 4EFA 9A20                  		jmp	DisplaySprite
000156AC                            
000156AC                            ; ---------------------------------------------------------------------------
000156AC                            ; Subroutine to	stop Sonic falling after he's been hurt
000156AC                            ; ---------------------------------------------------------------------------
000156AC                            
000156AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156AC                            
000156AC                            
000156AC                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000156AC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000156B0 0640 00E0                  		addi.w	#$E0,d0
000156B4 B068 000C                  		cmp.w	$C(a0),d0
000156B8 6500 0000                  		bcs.w	KillSonic
000156BC 6100 FD70                  		bsr.w	Sonic_Floor
000156C0 0828 0001 0022             		btst	#1,$22(a0)
000156C6 6600                       		bne.s	locret_13860
000156C8 7000                       		moveq	#0,d0
000156CA 3140 0012                  		move.w	d0,$12(a0)
000156CE 3140 0010                  		move.w	d0,$10(a0)
000156D2 3140 0014                  		move.w	d0,$14(a0)
000156D6 117C 0000 001C             		move.b	#0,$1C(a0)
000156DC 5528 0024                  		subq.b	#2,$24(a0)
000156E0 317C 0078 0030             		move.w	#$78,$30(a0)
000156E6                            
000156E6                            locret_13860:
000156E6 4E75                       		rts	
000156E8                            ; End of function Sonic_HurtStop
000156E8                            
000156E8                            ; ===========================================================================
000156E8                            ; ---------------------------------------------------------------------------
000156E8                            ; Sonic	when he	dies
000156E8                            ; ---------------------------------------------------------------------------
000156E8                            
000156E8                            Obj01_Death:				; XREF: Obj01_Index
000156E8 6100 0000                  		bsr.w	GameOver
000156EC 4EBA 99A2                  		jsr	ObjectFall
000156F0 6100 F506                  		bsr.w	Sonic_RecordPos
000156F4 6100 0000                  		bsr.w	Sonic_Animate
000156F8 6100 0000                  		bsr.w	LoadSonicDynPLC
000156FC 4EFA 99CC                  		jmp	DisplaySprite
00015700                            
00015700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015700                            
00015700                            
00015700                            GameOver:				; XREF: Obj01_Death
00015700 3038 F704                  		move.w	($FFFFF704).w,d0
00015704 0640 0100                  		addi.w	#$100,d0
00015708 B068 000C                  		cmp.w	$C(a0),d0
0001570C 6A00 0000                  		bpl.w	locret_13900
00015710 317C FFC8 0012             		move.w	#-$38,$12(a0)
00015716 5428 0024                  		addq.b	#2,$24(a0)
0001571A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001571E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00015722 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00015726 6600                       		bne.s	loc_138D4
00015728 317C 0000 003A             		move.w	#0,$3A(a0)
0001572E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00015734 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001573A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00015740 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015744                            
00015744                            loc_138C2:
00015744 303C 008F                  		move.w	#$8F,d0
00015748 4EB9 0000 12C6             		jsr	(PlaySound).l	; play game over music
0001574E 7003                       		moveq	#3,d0
00015750 4EF9 0000 1586             		jmp	(LoadPLC).l	; load game over patterns
00015756                            ; ===========================================================================
00015756                            
00015756                            loc_138D4:
00015756 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001575C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00015760 6700                       		beq.s	locret_13900	; if not, branch
00015762 317C 0000 003A             		move.w	#0,$3A(a0)
00015768 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001576E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015774 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001577A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00015780 60C2                       		bra.s	loc_138C2
00015782                            ; ===========================================================================
00015782                            
00015782                            locret_13900:
00015782 4E75                       		rts	
00015784                            ; End of function GameOver
00015784                            
00015784                            ; ===========================================================================
00015784                            ; ---------------------------------------------------------------------------
00015784                            ; Sonic	when the level is restarted
00015784                            ; ---------------------------------------------------------------------------
00015784                            
00015784                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015784 4A68 003A                  		tst.w	$3A(a0)
00015788 6700                       		beq.s	locret_13914
0001578A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001578E 6600                       		bne.s	locret_13914
00015790 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015796                            
00015796                            locret_13914:
00015796 4E75                       		rts	
00015798                            
00015798                            ; ---------------------------------------------------------------------------
00015798                            ; Sonic when he's drowning
00015798                            ; ---------------------------------------------------------------------------
00015798                             
00015798                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015798                             
00015798                             
00015798                            Sonic_Drowned:
00015798 6100 9916                          bsr.w   SpeedToPos              ; Make Sonic able to move
0001579C 0668 0010 0012                     addi.w  #$10,$12(a0)          ; Apply gravity
000157A2 6100 F454                          bsr.w   Sonic_RecordPos    ; Record position
000157A6 6100                               bsr.s   Sonic_Animate           ; Animate Sonic
000157A8 6100 0000                          bsr.w   LoadSonicDynPLC           ; Load Sonic's DPLCs
000157AC 6000 991C                          bra.w   DisplaySprite           ; And finally, display Sonic
000157B0                            
000157B0                            ; ---------------------------------------------------------------------------
000157B0                            ; Subroutine to	animate	Sonic's sprites
000157B0                            ; ---------------------------------------------------------------------------
000157B0                            
000157B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157B0                            
000157B0                            
000157B0                            Sonic_Animate:				; XREF: Obj01_Control; et al
000157B0 43F9 0000 0000             		lea	(SonicAniData).l,a1
000157B6 7000                       		moveq	#0,d0
000157B8 1028 001C                  		move.b	$1C(a0),d0
000157BC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000157C0 6700                       		beq.s	SAnim_Do	; if not, branch
000157C2 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000157C6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000157CC 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000157D2                            
000157D2                            SAnim_Do:
000157D2 D040                       		add.w	d0,d0
000157D4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000157D8 1011                       		move.b	(a1),d0
000157DA 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000157DC 1228 0022                  		move.b	$22(a0),d1
000157E0 0201 0001                  		andi.b	#1,d1
000157E4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000157EA 8328 0001                  		or.b	d1,1(a0)
000157EE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000157F2 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000157F4 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000157F8                            
000157F8                            SAnim_Do2:
000157F8 7200                       		moveq	#0,d1
000157FA 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000157FE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015802 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015804                            
00015804                            SAnim_Next:
00015804 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015808 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001580C                            
0001580C                            SAnim_Delay:
0001580C 4E75                       		rts	
0001580E                            ; ===========================================================================
0001580E                            
0001580E                            SAnim_End_FF:
0001580E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00015810 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015812 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00015818 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001581C 60E6                       		bra.s	SAnim_Next
0001581E                            ; ===========================================================================
0001581E                            
0001581E                            SAnim_End_FE:
0001581E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00015820 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015822 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015826 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001582A 9200                       		sub.b	d0,d1
0001582C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00015830 60D2                       		bra.s	SAnim_Next
00015832                            ; ===========================================================================
00015832                            
00015832                            SAnim_End_FD:
00015832 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00015834 6600                       		bne.s	SAnim_End	; if not, branch
00015836 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001583C                            
0001583C                            SAnim_End:
0001583C 4E75                       		rts	
0001583E                            ; ===========================================================================
0001583E                            
0001583E                            SAnim_WalkRun:				; XREF: SAnim_Do
0001583E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015842 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015844 5200                       		addq.b	#1,d0		; is animation walking/running?
00015846 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001584A 7200                       		moveq	#0,d1
0001584C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015850 1428 0022                  		move.b	$22(a0),d2
00015854 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00015858 6600                       		bne.s	loc_13A70	; if yes, branch
0001585A 4600                       		not.b	d0		; reverse angle
0001585C                            
0001585C                            loc_13A70:
0001585C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00015860 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015862 7203                       		moveq	#3,d1
00015864                            
00015864                            loc_13A78:
00015864 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001586A B302                       		eor.b	d1,d2
0001586C 8528 0001                  		or.b	d2,1(a0)
00015870 0828 0005 0022             		btst	#5,$22(a0)
00015876 6600 0000                  		bne.w	SAnim_Push
0001587A E808                       		lsr.b	#4,d0		; divide angle by $10
0001587C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00015880 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015884 6A00                       		bpl.s	loc_13A9C
00015886 4442                       		neg.w	d2
00015888                            
00015888                            loc_13A9C:
00015888 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001588E 4A28 0039                  		tst.b	crawling(a0)
00015892 6600                       		bne.s	loc_13AB4
00015894 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00015898 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001589A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000158A0 1200                       		move.b	d0,d1
000158A2 E209                       		lsr.b	#1,d1
000158A4 D001                       		add.b	d1,d0
000158A6                            
000158A6                            loc_13AB4:
000158A6 D000                       		add.b	d0,d0
000158A8 1600                       		move.b	d0,d3
000158AA 4442                       		neg.w	d2
000158AC 0642 0800                  		addi.w	#$800,d2
000158B0 6A00                       		bpl.s	loc_13AC2
000158B2 7400                       		moveq	#0,d2
000158B4                            
000158B4                            loc_13AC2:
000158B4 E04A                       		lsr.w	#8,d2
000158B6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000158BA 6100 FF3C                  		bsr.w	SAnim_Do2
000158BE D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000158C2 4E75                       		rts	
000158C4                            ; ===========================================================================
000158C4                            
000158C4                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000158C4 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000158C6 6600                       		bne.s	SAnim_Push	; if not, branch
000158C8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000158CC 6A00                       		bpl.s	loc_13ADE
000158CE 4442                       		neg.w	d2
000158D0                            
000158D0                            loc_13ADE:
000158D0                            	;	lea	(SonAni_Roll2).l,a1 ; use fast animation
000158D0                            	;	cmpi.w	#$600,d2	; is Sonic moving fast?
000158D0                            	;	bcc.s	loc_13AF0	; if yes, branch
000158D0                            	;	lea	(SonAni_Roll).l,a1 ; use slower	animation
000158D0                            
000158D0                            loc_13AF0:
000158D0 4442                       		neg.w	d2
000158D2 0642 0400                  		addi.w	#$400,d2
000158D6 6A00                       		bpl.s	loc_13AFA
000158D8 7400                       		moveq	#0,d2
000158DA                            
000158DA                            loc_13AFA:
000158DA E04A                       		lsr.w	#8,d2
000158DC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000158E0 1228 0022                  		move.b	$22(a0),d1
000158E4 0201 0001                  		andi.b	#1,d1
000158E8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000158EE 8328 0001                  		or.b	d1,1(a0)
000158F2 6000 FF04                  		bra.w	SAnim_Do2
000158F6                            ; ===========================================================================
000158F6                            
000158F6                            SAnim_Push:				; XREF: SAnim_RollJump
000158F6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000158FA 6B00                       		bmi.s	loc_13B1E
000158FC 4442                       		neg.w	d2
000158FE                            
000158FE                            loc_13B1E:
000158FE 0642 0800                  		addi.w	#$800,d2
00015902 6A00                       		bpl.s	loc_13B26
00015904 7400                       		moveq	#0,d2
00015906                            
00015906                            loc_13B26:
00015906 EC4A                       		lsr.w	#6,d2
00015908 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001590C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00015912 1228 0022                  		move.b	$22(a0),d1
00015916 0201 0001                  		andi.b	#1,d1
0001591A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015920 8328 0001                  		or.b	d1,1(a0)
00015924 6000 FED2                  		bra.w	SAnim_Do2
00015928                            ; End of function Sonic_Animate
00015928                            
00015928                            ; ===========================================================================
00015928                            SonicAniData:
00015928                            	include "_anim\Sonic.asm"
00015928                            ; ---------------------------------------------------------------------------
00015928                            ; Animation script - Sonic
00015928                            ; ---------------------------------------------------------------------------
00015928 0000                       		dc.w SonAni_Walk-SonicAniData ;0
0001592A 0000                       		dc.w SonAni_Run-SonicAniData ;1
0001592C 0000                       		dc.w SonAni_Blank-SonicAniData ;2
0001592E 0000                       		dc.w SonAni_Blank-SonicAniData ;3
00015930 0000                       		dc.w SonAni_Push-SonicAniData ;4
00015932 0000                       		dc.w SonAni_Wait-SonicAniData ;5
00015934 0000                       		dc.w SonAni_Balance-SonicAniData ;6
00015936 0000                       		dc.w SonAni_LookUp-SonicAniData ;7
00015938 0000                       		dc.w SonAni_Duck-SonicAniData ;8
0001593A 0000                       		dc.w SonAni_Bite-SonicAniData ;9
0001593C 0000                       		dc.w SonAni_Blank-SonicAniData ;A
0001593E 0000                       		dc.w SonAni_Blank-SonicAniData ;B
00015940 0000                       		dc.w SonAni_Blank-SonicAniData ;C
00015942 0000                       		dc.w SonAni_Stop-SonicAniData ;D
00015944 0000                       		dc.w SonAni_Float1-SonicAniData ;E
00015946 0000                       		dc.w SonAni_Float2-SonicAniData ;F
00015948 0000                       		dc.w SonAni_Spring-SonicAniData ;10
0001594A 0000                       		dc.w SonAni_LZHang-SonicAniData ;11
0001594C 0000                       		dc.w SonAni_Blank-SonicAniData ;12
0001594E 0000                       		dc.w SonAni_Blank-SonicAniData ;13
00015950 0000                       		dc.w SonAni_Blank-SonicAniData ;14
00015952 0000                       		dc.w SonAni_Bubble-SonicAniData ;15
00015954 0000                       		dc.w SonAni_Blank-SonicAniData ;16
00015956 0000                       		dc.w SonAni_Drown-SonicAniData ;17
00015958 0000                       		dc.w SonAni_Death-SonicAniData ;18
0001595A 0000                       		dc.w SonAni_Blank-SonicAniData ;19
0001595C 0000                       		dc.w SonAni_Hurt-SonicAniData ;1A
0001595E 0000                       		dc.w SonAni_LZSlide-SonicAniData ;1B
00015960 0000                       		dc.w SonAni_Blank-SonicAniData ;1C
00015962 0000                       		dc.w SonAni_Float3-SonicAniData ;1D
00015964 0000                       		dc.w SonAni_Float4-SonicAniData ;1E
00015966 0000                       		dc.w SonAni_Jump1-SonicAniData ;1F
00015968 0000                       		dc.w SonAni_Jump2-SonicAniData ;20
0001596A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0 ;Unused
0001596E FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015976 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001597E FD3C 3D3E 3FFF FFFF        SonAni_Push:	dc.b $FD, $3C, $3D, $3E, $3F, $FF, $FF,	$FF
00015986 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001599C 1F34 35FF                  SonAni_Balance:	dc.b $1F, $34, $35, $FF
000159A0 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000159A4 3F33 FF00                  SonAni_Duck:	dc.b $3F, $33, $FF, 0
000159A8 0201 2E2F 30FD 00          SonAni_Bite:	dc.b 2, 1, $2E, $2F, $30, $FD, 0
000159AF 0731 32FF                  SonAni_Stop:	dc.b 7,	$31, $32, $FF
000159B3 0736 FF                    SonAni_Float1:	dc.b 7,	$36, $FF
000159B6 0736 3742 3843 FF00        SonAni_Float2:	dc.b 7,	$36, $37, $42, $38, $43, $FF, 0
000159BE 2F39 FD00                  SonAni_Spring:	dc.b $2F, $39, $FD, 0
000159C2 043A 3BFF                  SonAni_LZHang:	dc.b 4,	$3A, $3B, $FF
000159C6 0B46 460A 0BFD 0000        SonAni_Bubble:	dc.b $B, $46, $46, $A, $B, $FD,	0, 0
000159CE 2F40 FF00                  SonAni_Drown:	dc.b $2F, $40, $FF, 0
000159D2 0341 FF00                  SonAni_Death:	dc.b 3,	$41, $FF, 0
000159D6 0744 45FF                  SonAni_Hurt:	dc.b 7, $44, $45, $FF
000159DA 0744 45FF                  SonAni_LZSlide:	dc.b 7, $44, $45, $FF
000159DE 0336 3742 3843 FF00        SonAni_Float3:	dc.b 3,	$36, $37, $42, $38, $43, $FF, 0
000159E6 0336 FD00                  SonAni_Float4:	dc.b 3,	$36, $FD, 0 ;Unused?
000159EA 0C47 48FE 0100             SonAni_Jump1:	dc.b $C, $47, $48, $FE, 1, 0
000159F0 2F49 FD00                  SonAni_Jump2:	dc.b $2F, $49, $FD, 0
000159F4                            		even
000159F4                            		even
000159F4                            
000159F4                            ; ---------------------------------------------------------------------------
000159F4                            ; Sonic	pattern	loading	subroutine
000159F4                            ; ---------------------------------------------------------------------------
000159F4                            
000159F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F4                            
000159F4                            
000159F4                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000159F4 7000                       		moveq	#0,d0
000159F6 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000159FA B038 F766                  		cmp.b	($FFFFF766).w,d0
000159FE 6700                       		beq.s	locret_13C96
00015A00 11C0 F766                  		move.b	d0,($FFFFF766).w
00015A04 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015A0A D040                       		add.w	d0,d0
00015A0C D4F2 0000                  		adda.w	(a2,d0.w),a2
00015A10 7A00                       		moveq	#0,d5
00015A12 1A1A                       		move.b	(a2)+,d5
00015A14 5345                       		subq.w	#1,d5
00015A16 6B00                       		bmi.s	locret_13C96
00015A18 383C F000                  		move.w	#$F000,d4
00015A1C 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015A22                            
00015A22                            SPLC_ReadEntry:
00015A22 7200                       		moveq	#0,d1
00015A24 121A                       		move.b	(a2)+,d1
00015A26 E149                       		lsl.w	#8,d1
00015A28 121A                       		move.b	(a2)+,d1
00015A2A 3601                       		move.w	d1,d3
00015A2C E04B                       		lsr.w	#8,d3
00015A2E 0243 00F0                  		andi.w	#$F0,d3
00015A32 0643 0010                  		addi.w	#$10,d3
00015A36 0241 0FFF                  		andi.w	#$FFF,d1
00015A3A EB89                       		lsl.l	#5,d1
00015A3C D286                       		add.l	d6,d1
00015A3E 3404                       		move.w	d4,d2
00015A40 D843                       		add.w	d3,d4
00015A42 D843                       		add.w	d3,d4
00015A44 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00015A4A 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015A4E                            
00015A4E                            locret_13C96:
00015A4E 4E75                       		rts	
00015A50                            ; End of function LoadSonicDynPLC
00015A50                            
00015A50                            ; ===========================================================================
00015A50                            ; ---------------------------------------------------------------------------
00015A50                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015A50                            ; ---------------------------------------------------------------------------
00015A50                            
00015A50                            Obj0A:					; XREF: Obj_Index
00015A50 7000                       		moveq	#0,d0
00015A52 1028 0024                  		move.b	$24(a0),d0
00015A56 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015A5A 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015A5E                            ; ===========================================================================
00015A5E 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015A62 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015A66 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015A6A 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015A6E 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015A70                            ; ===========================================================================
00015A70                            
00015A70                            Obj0A_Main:				; XREF: Obj0A_Index
00015A70 5428 0024                  		addq.b	#2,$24(a0)
00015A74 217C 0001 4480 0004        		move.l	#Map_obj64,4(a0)
00015A7C 317C 8348 0002             		move.w	#$8348,2(a0)
00015A82 117C 0084 0001             		move.b	#$84,1(a0)
00015A88 117C 0010 0019             		move.b	#$10,$19(a0)
00015A8E 117C 0001 0018             		move.b	#1,$18(a0)
00015A94 1028 0028                  		move.b	$28(a0),d0
00015A98 6A00                       		bpl.s	loc_13D00
00015A9A 5028 0024                  		addq.b	#8,$24(a0)
00015A9E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015AA6 317C 0440 0002             		move.w	#$440,2(a0)
00015AAC 0240 007F                  		andi.w	#$7F,d0
00015AB0 1140 0033                  		move.b	d0,$33(a0)
00015AB4 6000 0000                  		bra.w	Obj0A_Countdown
00015AB8                            ; ===========================================================================
00015AB8                            
00015AB8                            loc_13D00:
00015AB8 1140 001C                  		move.b	d0,$1C(a0)
00015ABC 3168 0008 0030             		move.w	8(a0),$30(a0)
00015AC2 317C FF78 0012             		move.w	#-$88,$12(a0)
00015AC8                            
00015AC8                            Obj0A_Animate:				; XREF: Obj0A_Index
00015AC8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015ACE 4EB9 0000 C20C             		jsr	AnimateSprite
00015AD4                            
00015AD4                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015AD4 3038 F646                  		move.w	($FFFFF646).w,d0
00015AD8 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015ADC 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00015ADE 117C 0006 0024             		move.b	#6,$24(a0)
00015AE4 5E28 001C                  		addq.b	#7,$1C(a0)
00015AE8 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015AEE 6700                       		beq.s	Obj0A_Display
00015AF0 6000                       		bra.s	Obj0A_Display
00015AF2                            ; ===========================================================================
00015AF2                            
00015AF2                            Obj0A_Wobble:
00015AF2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015AF6 6700                       		beq.s	loc_13D44
00015AF8 5868 0030                  		addq.w	#4,$30(a0)
00015AFC                            
00015AFC                            loc_13D44:
00015AFC 1028 0026                  		move.b	$26(a0),d0
00015B00 5228 0026                  		addq.b	#1,$26(a0)
00015B04 0240 007F                  		andi.w	#$7F,d0
00015B08 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015B0E 1031 0000                  		move.b	(a1,d0.w),d0
00015B12 4880                       		ext.w	d0
00015B14 D068 0030                  		add.w	$30(a0),d0
00015B18 3140 0008                  		move.w	d0,8(a0)
00015B1C 6100                       		bsr.s	Obj0A_ShowNumber
00015B1E 4EBA 9590                  		jsr	SpeedToPos
00015B22 4A28 0001                  		tst.b	1(a0)
00015B26 6A00                       		bpl.s	Obj0A_Delete
00015B28 4EFA 95A0                  		jmp	DisplaySprite
00015B2C                            ; ===========================================================================
00015B2C                            
00015B2C                            Obj0A_Delete:
00015B2C 4EFA 95D8                  		jmp	DeleteObject
00015B30                            ; ===========================================================================
00015B30                            
00015B30                            Obj0A_Display:				; XREF: Obj0A_Index
00015B30 6100                       		bsr.s	Obj0A_ShowNumber
00015B32 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B38 4EB9 0000 C20C             		jsr	AnimateSprite
00015B3E 4EFA 958A                  		jmp	DisplaySprite
00015B42                            ; ===========================================================================
00015B42                            
00015B42                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015B42 4EFA 95C2                  		jmp	DeleteObject
00015B46                            ; ===========================================================================
00015B46                            
00015B46                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015B46 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015B4C 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015B4E 5368 0038                  		subq.w	#1,$38(a0)
00015B52 6600                       		bne.s	Obj0A_Display2
00015B54 117C 000E 0024             		move.b	#$E,$24(a0)
00015B5A 5E28 001C                  		addq.b	#7,$1C(a0)
00015B5E 60D0                       		bra.s	Obj0A_Display
00015B60                            ; ===========================================================================
00015B60                            
00015B60                            Obj0A_Display2:
00015B60 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B66 4EB9 0000 C20C             		jsr	AnimateSprite
00015B6C 4A28 0001                  		tst.b	1(a0)
00015B70 6A00                       		bpl.s	Obj0A_Delete3
00015B72 4EFA 9556                  		jmp	DisplaySprite
00015B76                            ; ===========================================================================
00015B76                            
00015B76                            Obj0A_Delete3:
00015B76 4EFA 958E                  		jmp	DeleteObject
00015B7A                            ; ===========================================================================
00015B7A                            
00015B7A                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015B7A 4A68 0038                  		tst.w	$38(a0)
00015B7E 6700                       		beq.s	locret_13E1A
00015B80 5368 0038                  		subq.w	#1,$38(a0)
00015B84 6600                       		bne.s	locret_13E1A
00015B86 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015B8C 6400                       		bcc.s	locret_13E1A
00015B8E 317C 000F 0038             		move.w	#$F,$38(a0)
00015B94 4268 0012                  		clr.w	$12(a0)
00015B98 117C 0080 0001             		move.b	#$80,1(a0)
00015B9E 3028 0008                  		move.w	8(a0),d0
00015BA2 9078 F700                  		sub.w	($FFFFF700).w,d0
00015BA6 0640 0080                  		addi.w	#$80,d0
00015BAA 3140 0008                  		move.w	d0,8(a0)
00015BAE 3028 000C                  		move.w	$C(a0),d0
00015BB2 9078 F704                  		sub.w	($FFFFF704).w,d0
00015BB6 0640 0080                  		addi.w	#$80,d0
00015BBA 3140 000A                  		move.w	d0,$A(a0)
00015BBE 117C 000C 0024             		move.b	#$C,$24(a0)
00015BC4                            
00015BC4                            locret_13E1A:
00015BC4 4E75                       		rts	
00015BC6                            ; ===========================================================================
00015BC6                            Obj0A_WobbleData:
00015BC6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015BD7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015BE8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015BF9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015C09 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015C16 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015C23 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015C30 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015C3D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015C46                            ; ===========================================================================
00015C46                            
00015C46                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015C46 4A68 002C                  		tst.w	$2C(a0)
00015C4A 6600 0000                  		bne.w	loc_13F86
00015C4E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015C54 6400 0000                  		bcc.w	locret_1408C
00015C58 0838 0006 D022             		btst	#6,($FFFFD022).w
00015C5E 6700 0000                  		beq.w	locret_1408C
00015C62 5368 0038                  		subq.w	#1,$38(a0)
00015C66 6A00 0000                  		bpl.w	loc_13FAC
00015C6A 317C 003B 0038             		move.w	#59,$38(a0)
00015C70 317C 0001 0036             		move.w	#1,$36(a0)
00015C76 4EB9 0000 2B56             		jsr	(RandomNumber).l
00015C7C 0240 0001                  		andi.w	#1,d0
00015C80 1140 0034                  		move.b	d0,$34(a0)
00015C84 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015C88 0C40 0019                  		cmpi.w	#$19,d0
00015C8C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015C8E 0C40 0014                  		cmpi.w	#$14,d0
00015C92 6700                       		beq.s	Obj0A_WarnSound
00015C94 0C40 000F                  		cmpi.w	#$F,d0
00015C98 6700                       		beq.s	Obj0A_WarnSound
00015C9A 0C40 000C                  		cmpi.w	#$C,d0
00015C9E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015CA0 5328 0032                  		subq.b	#1,$32(a0)
00015CA4 6A00                       		bpl.s	Obj0A_ReduceAir
00015CA6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015CAC 08E8 0007 0036             		bset	#7,$36(a0)
00015CB2 6000                       		bra.s	Obj0A_ReduceAir
00015CB4                            ; ===========================================================================
00015CB4                            
00015CB4                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015CB4 303C 00C2                  		move.w	#$C2,d0
00015CB8 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015CBE                            
00015CBE                            Obj0A_ReduceAir:
00015CBE 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015CC2 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015CC6 6100 0000                  		bsr.w	StopDrowning
00015CCA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015CD0 303C 00B2                  		move.w	#$B2,d0
00015CD4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play drowning sound
00015CDA 117C 000A 0034             		move.b	#$A,$34(a0)
00015CE0 317C 0001 0036             		move.w	#1,$36(a0)
00015CE6 317C 0078 002C             		move.w	#$78,$2C(a0)
00015CEC 2F08                       		move.l	a0,-(sp)
00015CEE 41F8 D000                  		lea	($FFFFD000).w,a0
00015CF2 6100 F936                  		bsr.w	Sonic_ResetOnFloor
00015CF6 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015CFC 08E8 0001 0022             		bset	#1,$22(a0)
00015D02 08E8 0007 0002             		bset	#7,2(a0)
00015D08 317C 0000 0012             		move.w	#0,$12(a0)
00015D0E 317C 0000 0010             		move.w	#0,$10(a0)
00015D14 317C 0000 0014             		move.w	#0,$14(a0)
00015D1A 117C 000A 0024             		move.b  #$A,$24(a0)       ; Force the character to drown
00015D20 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015D26 11FC 0000 FE1E             		move.b  #0,($FFFFFE1E).w      ; Stop the timer immediately
00015D2C 11FC 0001 FFBC             		move.b	#1,($FFFFFFBC).w	; Sonic drowned flag
00015D32 205F                       		movea.l	(sp)+,a0
00015D34 4E75                       		rts	
00015D36                            ; ===========================================================================
00015D36                            
00015D36                            loc_13F86:
00015D36 5368 002C                  		subq.w  #1,$2C(a0)
00015D3A 6600                       		bne.s   loc_13FAC                       ; Make it jump straight to this location
00015D3C 11FC 0006 D024             		move.b  #6,($FFFFD024).w
00015D42 4E75                       		rts
00015D44                            ; ===========================================================================
00015D44                            
00015D44                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015D44 6000                       		bra.s	Obj0A_MakeItem
00015D46                            ; ===========================================================================
00015D46                            
00015D46                            loc_13FAC:
00015D46 4A68 0036                  		tst.w	$36(a0)
00015D4A 6700 0000                  		beq.w	locret_1408C
00015D4E 5368 003A                  		subq.w	#1,$3A(a0)
00015D52 6A00 0000                  		bpl.w	locret_1408C
00015D56                            
00015D56                            Obj0A_MakeItem:
00015D56 4EB9 0000 2B56             		jsr	(RandomNumber).l
00015D5C 0240 000F                  		andi.w	#$F,d0
00015D60 3140 003A                  		move.w	d0,$3A(a0)
00015D64 4EBA 97F8                  		jsr	SingleObjLoad
00015D68 6600 0000                  		bne.w	locret_1408C
00015D6C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015D70 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015D76 7006                       		moveq	#6,d0
00015D78 0838 0000 D022             		btst	#0,($FFFFD022).w
00015D7E 6700                       		beq.s	loc_13FF2
00015D80 4440                       		neg.w	d0
00015D82 137C 0040 0026             		move.b	#$40,$26(a1)
00015D88                            
00015D88                            loc_13FF2:
00015D88 D169 0008                  		add.w	d0,8(a1)
00015D8C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015D92 137C 0006 0028             		move.b	#6,$28(a1)
00015D98 4A68 002C                  		tst.w	$2C(a0)
00015D9C 6700 0000                  		beq.w	loc_1403E
00015DA0 0268 0007 003A             		andi.w	#7,$3A(a0)
00015DA6 0668 0000 003A             		addi.w	#0,$3A(a0)
00015DAC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015DB0 0440 000C                  		subi.w	#$C,d0
00015DB4 3340 000C                  		move.w	d0,$C(a1)
00015DB8 4EB9 0000 2B56             		jsr	(RandomNumber).l
00015DBE 1340 0026                  		move.b	d0,$26(a1)
00015DC2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015DC6 0200 0003                  		andi.b	#3,d0
00015DCA 6600                       		bne.s	loc_14082
00015DCC 137C 000E 0028             		move.b	#$E,$28(a1)
00015DD2 6000                       		bra.s	loc_14082
00015DD4                            ; ===========================================================================
00015DD4                            
00015DD4                            loc_1403E:
00015DD4 0828 0007 0036             		btst	#7,$36(a0)
00015DDA 6700                       		beq.s	loc_14082
00015DDC 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015DE0 E24A                       		lsr.w	#1,d2
00015DE2 4EB9 0000 2B56             		jsr	(RandomNumber).l
00015DE8 0240 0003                  		andi.w	#3,d0
00015DEC 6600                       		bne.s	loc_1406A
00015DEE 08E8 0006 0036             		bset	#6,$36(a0)
00015DF4 6600                       		bne.s	loc_14082
00015DF6 1342 0028                  		move.b	d2,$28(a1)
00015DFA 337C 001C 0038             		move.w	#$1C,$38(a1)
00015E00                            
00015E00                            loc_1406A:
00015E00 4A28 0034                  		tst.b	$34(a0)
00015E04 6600                       		bne.s	loc_14082
00015E06 08E8 0006 0036             		bset	#6,$36(a0)
00015E0C 6600                       		bne.s	loc_14082
00015E0E 1342 0028                  		move.b	d2,$28(a1)
00015E12 337C 001C 0038             		move.w	#$1C,$38(a1)
00015E18                            
00015E18                            loc_14082:
00015E18 5328 0034                  		subq.b	#1,$34(a0)
00015E1C 6A00                       		bpl.s	locret_1408C
00015E1E 4268 0036                  		clr.w	$36(a0)
00015E22                            
00015E22                            locret_1408C:
00015E22 4E75                       		rts	
00015E24                            
00015E24                            ; ---------------------------------------------------------------------------
00015E24                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015E24                            ; ---------------------------------------------------------------------------
00015E24                            
00015E24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E24                            
00015E24                            
00015E24                            StopDrowning:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015E24 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015E2A 4238 D372                  		clr.b	($FFFFD372).w
00015E2E 4E75                       		rts	
00015E30                            ; End of function StopDrowning
00015E30                            
00015E30                            ; ===========================================================================
00015E30                            Ani_obj0A:
00015E30                            	include "_anim\obj0A.asm"
00015E30                            ; ---------------------------------------------------------------------------
00015E30                            ; Animation script - countdown numbers and bubbles (LZ)
00015E30                            ; ---------------------------------------------------------------------------
00015E30 0000                       		dc.w byte_140D6-Ani_obj0A
00015E32 0000                       		dc.w byte_140E0-Ani_obj0A
00015E34 0000                       		dc.w byte_140EA-Ani_obj0A
00015E36 0000                       		dc.w byte_140F4-Ani_obj0A
00015E38 0000                       		dc.w byte_140FE-Ani_obj0A
00015E3A 0000                       		dc.w byte_14108-Ani_obj0A
00015E3C 0000                       		dc.w byte_14112-Ani_obj0A
00015E3E 0000                       		dc.w byte_14118-Ani_obj0A
00015E40 0000                       		dc.w byte_14120-Ani_obj0A
00015E42 0000                       		dc.w byte_14128-Ani_obj0A
00015E44 0000                       		dc.w byte_14130-Ani_obj0A
00015E46 0000                       		dc.w byte_14138-Ani_obj0A
00015E48 0000                       		dc.w byte_14140-Ani_obj0A
00015E4A 0000                       		dc.w byte_14148-Ani_obj0A
00015E4C 0000                       		dc.w byte_1414A-Ani_obj0A
00015E4E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015E58 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015E62 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015E6C 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015E76 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015E80 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015E8A 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015E90 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015E98 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015EA0 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015EA8 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015EB0 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015EB8 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015EC0 0EFC                       byte_14148:	dc.b $E, $FC
00015EC2 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015EC8                            		even
00015EC8                            		even
00015EC8                            
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8                            ; Sprite mappings - drowning countdown numbers (LZ)
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8                            Map_obj0A:
00015EC8                            	include "_maps\obj0A.asm"
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8                            ; Sprite mappings - drowning countdown numbers (LZ)
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8 0000                       		dc.w byte_14152-Map_obj0A
00015ECA 01                         byte_14152:	dc.b 1
00015ECB E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015ED0                            		even
00015ED0                            		even
00015ED0                            ; ===========================================================================
00015ED0                            LoadShieldDPLC:
00015ED0 2C3C 0000 0000             		move.l	#Art_Shield,d6
00015ED6 6000                       		bra.s	LoadShieldStarsDPLC
00015ED8                            		
00015ED8                            LoadStarsDPLC:
00015ED8 2C3C 0000 0000             		move.l	#Art_Stars,d6
00015EDE                            
00015EDE                            LoadShieldStarsDPLC:
00015EDE 45F9 0000 0000             		lea	(ShieldStarsDPLC).l,a2
00015EE4 383C A820                  		move.w	#$541*$20,d4
00015EE8 4EF9 0000 0000             		jmp	LoadDPLC
00015EEE                            ; ===========================================================================
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            ; Object 38 - shield and invincibility stars
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            
00015EEE                            Obj38:					; XREF: Obj_Index
00015EEE 7000                       		moveq	#0,d0
00015EF0 1028 0024                  		move.b	$24(a0),d0
00015EF4 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015EF8 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015EFC                            ; ===========================================================================
00015EFC 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015EFE 0000                       		dc.w Obj38_Shield-Obj38_Index
00015F00 0000                       		dc.w Obj38_Stars-Obj38_Index
00015F02                            ; ===========================================================================
00015F02                            
00015F02                            Obj38_Main:				; XREF: Obj38_Index
00015F02 5428 0024                  		addq.b	#2,$24(a0)
00015F06 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015F0E 117C 0004 0001             		move.b	#4,1(a0)
00015F14 117C 0001 0018             		move.b	#1,$18(a0)
00015F1A 117C 0010 0019             		move.b	#$10,$19(a0)
00015F20 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015F26 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015F2A 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015F2C 4E75                       		rts	
00015F2E                            ; ===========================================================================
00015F2E                            
00015F2E                            Obj38_DoStars:
00015F2E 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015F32 4E75                       		rts	
00015F34                            ; ===========================================================================
00015F34                            
00015F34                            Obj38_Shield:				; XREF: Obj38_Index
00015F34 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015F38 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015F3A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015F3E 6700                       		beq.s	Obj38_Delete	; if not, branch
00015F40 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015F46 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015F4C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015F52 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015F58 4EB9 0000 C20C             		jsr	AnimateSprite
00015F5E 4EBA FF70                  		jsr	LoadShieldDPLC
00015F62 4EFA 9166                  		jmp	DisplaySprite
00015F66                            ; ===========================================================================
00015F66                            
00015F66                            Obj38_RmvShield:
00015F66 4E75                       		rts	
00015F68                            ; ===========================================================================
00015F68                            
00015F68                            Obj38_Delete:
00015F68 4EFA 919C                  		jmp	DeleteObject
00015F6C                            ; ===========================================================================
00015F6C                            
00015F6C                            Obj38_Stars:				; XREF: Obj38_Index
00015F6C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015F70 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015F72 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00015F76 1228 001C                  		move.b	$1C(a0),d1
00015F7A 5301                       		subq.b	#1,d1
00015F7C 6000                       		bra.s	Obj38_StarTrail
00015F7E                            ; ===========================================================================
00015F7E E909                       		lsl.b	#4,d1
00015F80 5801                       		addq.b	#4,d1
00015F82 9001                       		sub.b	d1,d0
00015F84 1228 0030                  		move.b	$30(a0),d1
00015F88 9001                       		sub.b	d1,d0
00015F8A 5801                       		addq.b	#4,d1
00015F8C 0201 000F                  		andi.b	#$F,d1
00015F90 1141 0030                  		move.b	d1,$30(a0)
00015F94 6000                       		bra.s	Obj38_StarTrail2a
00015F96                            ; ===========================================================================
00015F96                            
00015F96                            Obj38_StarTrail:			; XREF: Obj38_Stars
00015F96 E709                       		lsl.b	#3,d1
00015F98 1401                       		move.b	d1,d2
00015F9A D201                       		add.b	d1,d1
00015F9C D202                       		add.b	d2,d1
00015F9E 5801                       		addq.b	#4,d1
00015FA0 9001                       		sub.b	d1,d0
00015FA2 1228 0030                  		move.b	$30(a0),d1
00015FA6 9001                       		sub.b	d1,d0
00015FA8 5801                       		addq.b	#4,d1
00015FAA 0C01 0018                  		cmpi.b	#$18,d1
00015FAE 6500                       		bcs.s	Obj38_StarTrail2
00015FB0 7200                       		moveq	#0,d1
00015FB2                            
00015FB2                            Obj38_StarTrail2:
00015FB2 1141 0030                  		move.b	d1,$30(a0)
00015FB6                            
00015FB6                            Obj38_StarTrail2a:
00015FB6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015FBA 43F1 0000                  		lea	(a1,d0.w),a1
00015FBE 3159 0008                  		move.w	(a1)+,8(a0)
00015FC2 3159 000C                  		move.w	(a1)+,$C(a0)
00015FC6 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015FCC 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015FD2 4EB9 0000 C20C             		jsr	AnimateSprite
00015FD8 4EBA FEFE                  		jsr	LoadStarsDPLC
00015FDC 4EFA 90EC                  		jmp	DisplaySprite
00015FE0                            ; ===========================================================================
00015FE0                            
00015FE0                            Obj38_Delete2:				; XREF: Obj38_Stars
00015FE0 4EFA 9124                  		jmp	DeleteObject
00015FE4                            ; ===========================================================================
00015FE4                            	
00015FE4                            ShieldStarsDPLC:
00015FE4                            		include "_inc/obj38_DPLC.asm"
00015FE4                            ; --------------------------------------------------------------------------------
00015FE4                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00015FE4                            
00015FE4                            SME_wct8N:	
00015FE4 0000 0000                  		dc.w SME_wct8N_84-SME_wct8N, SME_wct8N_85-SME_wct8N	
00015FE8 0000 0000                  		dc.w SME_wct8N_8E-SME_wct8N, SME_wct8N_97-SME_wct8N	
00015FEC 0000 0000                  		dc.w SME_wct8N_A0-SME_wct8N, SME_wct8N_A9-SME_wct8N	
00015FF0 0000 0000                  		dc.w SME_wct8N_B2-SME_wct8N, SME_wct8N_BB-SME_wct8N	
00015FF4 0000 0000                  		dc.w SME_wct8N_C4-SME_wct8N, SME_wct8N_C9-SME_wct8N	
00015FF8 0000 0000                  		dc.w SME_wct8N_D2-SME_wct8N, SME_wct8N_D7-SME_wct8N	
00015FFC 0000 0000                  		dc.w SME_wct8N_DE-SME_wct8N, SME_wct8N_E9-SME_wct8N	
00016000 0000 0000                  		dc.w SME_wct8N_F6-SME_wct8N, SME_wct8N_FF-SME_wct8N	
00016004 0000 0000                  		dc.w SME_wct8N_10A-SME_wct8N, SME_wct8N_113-SME_wct8N	
00016008 0000 0000                  		dc.w SME_wct8N_11E-SME_wct8N, SME_wct8N_127-SME_wct8N	
0001600C 0000 0000                  		dc.w SME_wct8N_12C-SME_wct8N, SME_wct8N_131-SME_wct8N	
00016010 0000 0000                  		dc.w SME_wct8N_13A-SME_wct8N, SME_wct8N_13F-SME_wct8N	
00016014 0000 0000                  		dc.w SME_wct8N_146-SME_wct8N, SME_wct8N_153-SME_wct8N	
00016018 0000 0000                  		dc.w SME_wct8N_160-SME_wct8N, SME_wct8N_169-SME_wct8N	
0001601C 0000 0000                  		dc.w SME_wct8N_174-SME_wct8N, SME_wct8N_17D-SME_wct8N	
00016020 0000 0000                  		dc.w SME_wct8N_188-SME_wct8N, SME_wct8N_18D-SME_wct8N	
00016024 0000 0000                  		dc.w SME_wct8N_192-SME_wct8N, SME_wct8N_197-SME_wct8N	
00016028 0000 0000                  		dc.w SME_wct8N_19C-SME_wct8N, SME_wct8N_1A5-SME_wct8N	
0001602C 0000 0000                  		dc.w SME_wct8N_1AE-SME_wct8N, SME_wct8N_1BB-SME_wct8N	
00016030 0000 0000                  		dc.w SME_wct8N_1C8-SME_wct8N, SME_wct8N_1CD-SME_wct8N	
00016034 0000 0000                  		dc.w SME_wct8N_1D2-SME_wct8N, SME_wct8N_1D7-SME_wct8N	
00016038 0000 0000                  		dc.w SME_wct8N_1DC-SME_wct8N, SME_wct8N_1E5-SME_wct8N	
0001603C 0000 0000                  		dc.w SME_wct8N_1EC-SME_wct8N, SME_wct8N_1F5-SME_wct8N	
00016040 0000 0000                  		dc.w SME_wct8N_1FC-SME_wct8N, SME_wct8N_201-SME_wct8N	
00016044 0000 0000                  		dc.w SME_wct8N_20A-SME_wct8N, SME_wct8N_211-SME_wct8N	
00016048 0000 0000                  		dc.w SME_wct8N_216-SME_wct8N, SME_wct8N_21F-SME_wct8N	
0001604C 0000 0000                  		dc.w SME_wct8N_228-SME_wct8N, SME_wct8N_22F-SME_wct8N	
00016050 0000 0000                  		dc.w SME_wct8N_236-SME_wct8N, SME_wct8N_23D-SME_wct8N	
00016054 0000 0000                  		dc.w SME_wct8N_240-SME_wct8N, SME_wct8N_247-SME_wct8N	
00016058 0000 0000                  		dc.w SME_wct8N_24E-SME_wct8N, SME_wct8N_257-SME_wct8N	
0001605C 0000 0000                  		dc.w SME_wct8N_260-SME_wct8N, SME_wct8N_265-SME_wct8N	
00016060 0000 0000                  		dc.w SME_wct8N_26C-SME_wct8N, SME_wct8N_271-SME_wct8N	
00016064 0000 0000                  		dc.w SME_wct8N_278-SME_wct8N, SME_wct8N_283-SME_wct8N	
00016068 00                         SME_wct8N_84:	dc.b 0	
00016069 0480 0080 0980 0080 09     SME_wct8N_85:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016072 0480 1280 1280 1280 12     SME_wct8N_8E:	dc.b 4, $80, $12, $80, $12, $80, $12, $80, $12	
0001607B 0480 0080 0980 0080 09     SME_wct8N_97:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016084 0480 0080 0980 0080 09     SME_wct8N_A0:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
0001608D 0480 0080 0980 0080 09     SME_wct8N_A9:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016096 0480 1280 1B80 1280 1B     SME_wct8N_B2:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
0001609F 0480 1280 1B80 1280 1B     SME_wct8N_BB:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
000160A8 0250 5280 58               SME_wct8N_C4:	dc.b 2, $50, $52, $80, $58	
000160AD 0450 5250 6150 6710 6D     SME_wct8N_C9:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
000160B6 0250 52B0 6F               SME_wct8N_D2:	dc.b 2, $50, $52, $B0, $6F	
000160BB 0370 3030 7B50 7F          SME_wct8N_D7:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
000160C2 0550 8B20 9150 9400 9A53+  SME_wct8N_DE:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
000160CD 0650 8510 9B30 9D50 A130+  SME_wct8N_E9:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
000160DA 0450 AC10 B270 B420 BC     SME_wct8N_F6:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
000160E3 0530 C570 C920 D110 D453+  SME_wct8N_FF:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
000160EE 0450 BF10 D670 D820 E0     SME_wct8N_10A:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
000160F7 0550 8510 9B00 9170 E320+  SME_wct8N_113:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00016102 0470 EE50 F610 FC50 FE     SME_wct8N_11E:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
0001610B 0270 EEB1 04               SME_wct8N_127:	dc.b 2, $70, $EE, $B1, 4	
00016110 0251 1081 16               SME_wct8N_12C:	dc.b 2, $51, $10, $81, $16	
00016115 0451 1051 1F11 2551 27     SME_wct8N_131:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
0001611E 0251 10B1 2D               SME_wct8N_13A:	dc.b 2, $51, $10, $B1, $2D	
00016123 0370 EE01 0481 39          SME_wct8N_13F:	dc.b 3, $70, $EE, 1, 4, $81, $39	
0001612A 0611 4811 4A81 4C01 5501+  SME_wct8N_146:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00016137 0651 4221 5711 5A11 5C81+  SME_wct8N_153:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00016144 0451 6711 6D81 6F11 78     SME_wct8N_160:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
0001614D 0521 8011 8371 8521 8D53+  SME_wct8N_169:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00016158 0451 7A11 9081 9211 9B     SME_wct8N_174:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00016161 0551 4281 9D11 5C11 A603+  SME_wct8N_17D:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
0001616C 0251 A8B1 AE               SME_wct8N_188:	dc.b 2, $51, $A8, $B1, $AE	
00016171 0250 52B1 BA               SME_wct8N_18D:	dc.b 2, $50, $52, $B1, $BA	
00016176 0251 A8B1 C6               SME_wct8N_192:	dc.b 2, $51, $A8, $B1, $C6	
0001617B 0250 52B1 D2               SME_wct8N_197:	dc.b 2, $50, $52, $B1, $D2	
00016180 0451 DE11 E4B1 E601 F2     SME_wct8N_19C:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00016189 0451 F311 F9B1 FB03 26     SME_wct8N_1A5:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00016192 0612 07B2 0913 9803 9A13+  SME_wct8N_1AE:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
0001619F 06B2 1513 2713 A313 C913+  SME_wct8N_1BB:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
000161AC 0252 21B2 27               SME_wct8N_1C8:	dc.b 2, $52, $21, $B2, $27	
000161B1 0251 10B2 33               SME_wct8N_1CD:	dc.b 2, $51, $10, $B2, $33	
000161B6 0252 21B2 3F               SME_wct8N_1D2:	dc.b 2, $52, $21, $B2, $3F	
000161BB 0251 10B2 4B               SME_wct8N_1D7:	dc.b 2, $51, $10, $B2, $4B	
000161C0 0452 5712 5DB2 5F02 6B     SME_wct8N_1DC:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
000161C9 0372 6CB2 7403 DF          SME_wct8N_1E5:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
000161D0 0412 80B2 8202 6B53 D9     SME_wct8N_1EC:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
000161D9 03B2 8E03 D073 D1          SME_wct8N_1F5:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
000161E0 0234 57B4 4B               SME_wct8N_1FC:	dc.b 2, $34, $57, $B4, $4B	
000161E5 0434 6A74 5B34 6324 67     SME_wct8N_201:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
000161EE 0334 7DB4 6E24 7A          SME_wct8N_20A:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
000161F5 0252 9AB2 A0               SME_wct8N_211:	dc.b 2, $52, $9A, $B2, $A0	
000161FA 0452 AC72 B212 BA02 BC     SME_wct8N_216:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00016203 0412 BD72 BF22 C702 CA     SME_wct8N_21F:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
0001620C 0322 CB22 CEF2 D1          SME_wct8N_228:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00016213 03B2 E172 ED00 6F          SME_wct8N_22F:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
0001621A 0372 F532 FD23 01          SME_wct8N_236:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00016221 0183 04                    SME_wct8N_23D:	dc.b 1, $83, 4	
00016224 0373 0D03 1533 16          SME_wct8N_240:	dc.b 3, $73, $D, 3, $15, $33, $16	
0001622B 03B3 2913 3503 37          SME_wct8N_247:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00016232 04B3 3833 4403 4803 49     SME_wct8N_24E:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
0001623B 04B3 4A33 5603 5A03 5B     SME_wct8N_257:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00016244 0283 5C73 65               SME_wct8N_260:	dc.b 2, $83, $5C, $73, $65	
00016249 0383 6D23 7613 79          SME_wct8N_265:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00016250 0283 7B73 84               SME_wct8N_26C:	dc.b 2, $83, $7B, $73, $84	
00016255 0383 6D23 8C13 8F          SME_wct8N_271:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
0001625C 0573 A613 AE53 B033 B603+  SME_wct8N_278:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00016267 0573 BB13 AE53 C333 B603+  SME_wct8N_283:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00016272                            		even
00016272                            		even
00016272                            ; ===========================================================================
00016272                            ; ---------------------------------------------------------------------------
00016272                            ; Object 4A - special stage entry from beta
00016272                            ; ---------------------------------------------------------------------------
00016272                            
00016272                            Obj4A:					; XREF: Obj_Index
00016272 7000                       		moveq	#0,d0
00016274 1028 0024                  		move.b	$24(a0),d0
00016278 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001627C 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00016280                            ; ===========================================================================
00016280 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00016282 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00016284 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00016286                            ; ===========================================================================
00016286                            
00016286                            Obj4A_Main:				; XREF: Obj4A_Index
00016286 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001628A 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001628C 4E75                       		rts	
0001628E                            ; ===========================================================================
0001628E                            
0001628E                            Obj4A_Main2:
0001628E 5428 0024                  		addq.b	#2,$24(a0)
00016292 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001629A 117C 0004 0001             		move.b	#4,1(a0)
000162A0 117C 0001 0018             		move.b	#1,$18(a0)
000162A6 117C 0038 0019             		move.b	#$38,$19(a0)
000162AC 317C 0541 0002             		move.w	#$541,2(a0)
000162B2 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000162B8                            
000162B8                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000162B8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000162BE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000162C4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000162CA 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000162D0 4EB9 0000 C20C             		jsr	AnimateSprite
000162D6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000162DC 6600                       		bne.s	Obj4A_Display
000162DE 4A38 D000                  		tst.b	($FFFFD000).w
000162E2 6700                       		beq.s	Obj4A_Display
000162E4 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000162EA 303C 00A8                  		move.w	#$A8,d0
000162EE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000162F4                            
000162F4                            Obj4A_Display:
000162F4 4EFA 8DD4                  		jmp	DisplaySprite
000162F8                            ; ===========================================================================
000162F8                            
000162F8                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000162F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000162FC 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000162FE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00016304 4EFA 8E00                  		jmp	DeleteObject
00016308                            ; ===========================================================================
00016308                            
00016308                            Obj4A_Wait:
00016308 4E75                       		rts	
0001630A                            ; ===========================================================================
0001630A                            ; ---------------------------------------------------------------------------
0001630A                            ; Object 08 - water splash (LZ)
0001630A                            ; ---------------------------------------------------------------------------
0001630A                            
0001630A                            Obj08:					; XREF: Obj_Index
0001630A 7000                       		moveq	#0,d0
0001630C 1028 0024                  		move.b	$24(a0),d0
00016310 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00016314 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00016318                            ; ===========================================================================
00016318 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001631A 0000                       		dc.w Obj08_Display-Obj08_Index
0001631C 0000                       		dc.w Obj08_Delete-Obj08_Index
0001631E                            ; ===========================================================================
0001631E                            
0001631E                            Obj08_Main:				; XREF: Obj08_Index
0001631E 5428 0024                  		addq.b	#2,$24(a0)
00016322 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001632A 0028 0004 0001             		ori.b	#4,1(a0)
00016330 117C 0001 0018             		move.b	#1,$18(a0)
00016336 117C 0010 0019             		move.b	#$10,$19(a0)
0001633C 317C 4259 0002             		move.w	#$4259,2(a0)
00016342 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016348                            
00016348                            Obj08_Display:				; XREF: Obj08_Index
00016348 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001634E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016354 4EB9 0000 C20C             		jsr	AnimateSprite
0001635A 4EFA 8D6E                  		jmp	DisplaySprite
0001635E                            ; ===========================================================================
0001635E                            
0001635E                            Obj08_Delete:				; XREF: Obj08_Index
0001635E 4EFA 8DA6                  		jmp	DeleteObject	; delete when animation	is complete
00016362                            ; ===========================================================================
00016362                            Ani_obj38:
00016362                            	include "_anim\obj38.asm"
00016362                            ; ---------------------------------------------------------------------------
00016362                            ; Animation script - shield and invincibility stars
00016362                            ; ---------------------------------------------------------------------------
00016362 0000                       		dc.w byte_14356-Ani_obj38
00016364 0000                       		dc.w byte_1435E-Ani_obj38
00016366 0000                       		dc.w byte_14364-Ani_obj38
00016368 0000                       		dc.w byte_1437E-Ani_obj38
0001636A 0000                       		dc.w byte_14398-Ani_obj38
0001636C 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016374 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001637A 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001638B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00016394 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000163A5 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000163AE 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000163BF 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000163C8                            		even
000163C8                            		even
000163C8                            
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            ; Sprite mappings - shield and invincibility stars
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            Map_obj38:
000163C8                            	include "_maps\obj38.asm"
000163C8                            ; --------------------------------------------------------------------------------
000163C8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000163C8                            ; --------------------------------------------------------------------------------
000163C8                            
000163C8                            SME_yYnGN:	
000163C8 0000 0000                  		dc.w SME_yYnGN_10-SME_yYnGN, SME_yYnGN_11-SME_yYnGN	
000163CC 0000 0000                  		dc.w SME_yYnGN_26-SME_yYnGN, SME_yYnGN_3B-SME_yYnGN	
000163D0 0000 0000                  		dc.w SME_yYnGN_50-SME_yYnGN, SME_yYnGN_65-SME_yYnGN	
000163D4 0000 0000                  		dc.w SME_yYnGN_7A-SME_yYnGN, SME_yYnGN_8F-SME_yYnGN	
000163D8 00                         SME_yYnGN_10:	dc.b 0	
000163D9 04                         SME_yYnGN_11:	dc.b 4	
000163DA E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000163DF E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000163E4 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000163E9 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000163EE 04                         SME_yYnGN_26:	dc.b 4	
000163EF E80A 0800 E8               		dc.b $E8, $A, 8, 0, $E8	
000163F4 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000163F9 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000163FE 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016403 04                         SME_yYnGN_3B:	dc.b 4	
00016404 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00016409 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
0001640E 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016413 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016418 04                         SME_yYnGN_50:	dc.b 4	
00016419 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001641E E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00016423 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016428 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
0001642D 04                         SME_yYnGN_65:	dc.b 4	
0001642E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00016433 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016438 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
0001643D 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
00016442 04                         SME_yYnGN_7A:	dc.b 4	
00016443 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00016448 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001644D 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016452 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016457 04                         SME_yYnGN_8F:	dc.b 4	
00016458 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001645D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016462 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016467 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001646C                            		even
0001646C                            		even
0001646C                            
0001646C                            Ani_obj4A:
0001646C                            	include "_anim\obj4A.asm"
0001646C                            ; ---------------------------------------------------------------------------
0001646C                            ; Animation script - special stage entry effect from beta
0001646C                            ; ---------------------------------------------------------------------------
0001646C 0000                       		dc.w byte_14458-Ani_obj4A
0001646E 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00016482                            		even
00016482                            		even
00016482                            
00016482                            ; ---------------------------------------------------------------------------
00016482                            ; Sprite mappings - special stage entry	from beta
00016482                            ; ---------------------------------------------------------------------------
00016482                            Map_obj4A:
00016482                            	include "_maps\obj4A.asm"
00016482                            ; ---------------------------------------------------------------------------
00016482                            ; Sprite mappings - special stage entry	from beta
00016482                            ; ---------------------------------------------------------------------------
00016482 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00016486 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001648A 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
0001648E 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00016492 03                         byte_1447C:	dc.b 3
00016493 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00016498 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001649D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000164A2 03                         byte_1448C:	dc.b 3
000164A3 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000164A8 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000164AD 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000164B2 05                         byte_1449C:	dc.b 5
000164B3 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000164B8 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000164BD FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000164C2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000164C7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000164CC 09                         byte_144B6:	dc.b 9
000164CD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000164D2 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000164D7 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000164DC 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000164E1 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000164E6 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000164EB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000164F0 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000164F5 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000164FA 12                         byte_144E4:	dc.b $12
000164FB 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00016500 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00016505 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001650A 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001650F 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00016514 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00016519 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001651E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00016523 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00016528 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001652D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00016532 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00016537 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001653C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00016541 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00016546 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001654B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00016550 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00016555 11                         byte_1453F:	dc.b $11
00016556 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001655B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00016560 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00016565 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001656A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001656F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00016574 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00016579 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001657E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00016583 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00016588 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001658D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00016592 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00016597 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001659C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000165A1 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000165A6 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000165AB 09                         byte_14595:	dc.b 9
000165AC FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000165B1 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000165B6 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000165BB 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000165C0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000165C5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000165CA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000165CF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000165D4 04                         		dc.b 4
000165D5 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000165DA                            		even
000165DA                            		even
000165DA                            
000165DA                            Ani_obj08:
000165DA                            	include "_anim\obj08.asm"
000165DA                            ; ---------------------------------------------------------------------------
000165DA                            ; Animation script - water splash (LZ)
000165DA                            ; ---------------------------------------------------------------------------
000165DA 0000                       		dc.w byte_145C6-Ani_obj08
000165DC 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000165E2                            		even
000165E2                            		even
000165E2                            
000165E2                            ; ---------------------------------------------------------------------------
000165E2                            ; Sprite mappings - water splash (LZ)
000165E2                            ; ---------------------------------------------------------------------------
000165E2                            Map_obj08:
000165E2                            	include "_maps\obj08.asm"
000165E2                            ; ---------------------------------------------------------------------------
000165E2                            ; Sprite mappings - water splash (LZ)
000165E2                            ; ---------------------------------------------------------------------------
000165E2 0000                       		dc.w byte_145D2-Map_obj08
000165E4 0000                       		dc.w byte_145DD-Map_obj08
000165E6 0000                       		dc.w byte_145E8-Map_obj08
000165E8 02                         byte_145D2:	dc.b 2
000165E9 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000165EE FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000165F3 02                         byte_145DD:	dc.b 2
000165F4 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000165F9 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000165FE 01                         byte_145E8:	dc.b 1
000165FF E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00016604                            		even
00016604                            		even
00016604                            
00016604                            
00016604                            
00016604                            
00016604                            
00016604                            
00016604                            ; ===========================================================================
00016604                            ; ---------------------------------------------------------------------------
00016604                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00016604                            ; ---------------------------------------------------------------------------
00016604                            
00016604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016604                            
00016604                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00016604 21F8 FFD0 F796             		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
0001660A 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
0001660E 6700                       		beq.s	SAP_First				; MJ: if not, branch
00016610 21F8 FFD4 F796             		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
00016616                            
00016616                            SAP_First:
00016616 0828 0003 0022             		btst	#3,$22(a0)
0001661C 6700                       		beq.s	loc_14602
0001661E 7000                       		moveq	#0,d0
00016620 11C0 F768                  		move.b	d0,($FFFFF768).w
00016624 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016628 4E75                       		rts	
0001662A                            ; ===========================================================================
0001662A                            
0001662A                            loc_14602:
0001662A 7003                       		moveq	#3,d0
0001662C 11C0 F768                  		move.b	d0,($FFFFF768).w
00016630 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016634 1028 0026                  		move.b	$26(a0),d0
00016638 0600 0020                  		addi.b	#$20,d0
0001663C 6A00                       		bpl.s	loc_14624
0001663E 1028 0026                  		move.b	$26(a0),d0
00016642 6A00                       		bpl.s	loc_1461E
00016644 5300                       		subq.b	#1,d0
00016646                            
00016646                            loc_1461E:
00016646 0600 0020                  		addi.b	#$20,d0
0001664A 6000                       		bra.s	loc_14630
0001664C                            ; ===========================================================================
0001664C                            
0001664C                            loc_14624:
0001664C 1028 0026                  		move.b	$26(a0),d0
00016650 6A00                       		bpl.s	loc_1462C
00016652 5200                       		addq.b	#1,d0
00016654                            
00016654                            loc_1462C:
00016654 0600 001F                  		addi.b	#$1F,d0
00016658                            
00016658                            loc_14630:
00016658 0200 00C0                  		andi.b	#$C0,d0
0001665C 0C00 0040                  		cmpi.b	#$40,d0
00016660 6700 0000                  		beq.w	Sonic_WalkVertL
00016664 0C00 0080                  		cmpi.b	#$80,d0
00016668 6700 0000                  		beq.w	Sonic_WalkCeiling
0001666C 0C00 00C0                  		cmpi.b	#$C0,d0
00016670 6700 0000                  		beq.w	Sonic_WalkVertR
00016674 3428 000C                  		move.w	$C(a0),d2
00016678 3628 0008                  		move.w	8(a0),d3
0001667C 7000                       		moveq	#0,d0
0001667E 1028 0016                  		move.b	$16(a0),d0
00016682 4880                       		ext.w	d0
00016684 D440                       		add.w	d0,d2
00016686 1028 0017                  		move.b	$17(a0),d0
0001668A 4880                       		ext.w	d0
0001668C D640                       		add.w	d0,d3
0001668E 49F8 F768                  		lea	($FFFFF768).w,a4
00016692 367C 0010                  		movea.w	#$10,a3
00016696 3C3C 0000                  		move.w	#0,d6
0001669A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001669C 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000166A0 3F01                       		move.w	d1,-(sp)
000166A2 3428 000C                  		move.w	$C(a0),d2
000166A6 3628 0008                  		move.w	8(a0),d3
000166AA 7000                       		moveq	#0,d0
000166AC 1028 0016                  		move.b	$16(a0),d0
000166B0 4880                       		ext.w	d0
000166B2 D440                       		add.w	d0,d2
000166B4 1028 0017                  		move.b	$17(a0),d0
000166B8 4880                       		ext.w	d0
000166BA 4440                       		neg.w	d0
000166BC D640                       		add.w	d0,d3
000166BE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000166C2 367C 0010                  		movea.w	#$10,a3
000166C6 3C3C 0000                  		move.w	#0,d6
000166CA 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000166CC 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000166D0 301F                       		move.w	(sp)+,d0
000166D2 6100 0000                  		bsr.w	Sonic_Angle
000166D6 4A41                       		tst.w	d1
000166D8 6700                       		beq.s	locret_146BE
000166DA 6A00                       		bpl.s	loc_146C0
000166DC 0C41 FFF2                  		cmpi.w	#-$E,d1
000166E0 6D00                       		blt.s	locret_146E6
000166E2 D368 000C                  		add.w	d1,$C(a0)
000166E6                            
000166E6                            locret_146BE:
000166E6 4E75                       		rts	
000166E8                            ; ===========================================================================
000166E8                            
000166E8                            loc_146C0:
000166E8 0C41 000E                  		cmpi.w	#$E,d1
000166EC 6E00                       		bgt.s	loc_146CC
000166EE                            
000166EE                            loc_146C6:
000166EE D368 000C                  		add.w	d1,$C(a0)
000166F2 4E75                       		rts	
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            loc_146CC:
000166F4 4A28 0038                  		tst.b	$38(a0)
000166F8 66F4                       		bne.s	loc_146C6
000166FA 08E8 0001 0022             		bset	#1,$22(a0)
00016700 08A8 0005 0022             		bclr	#5,$22(a0)
00016706 117C 0001 001D             		move.b	#1,$1D(a0)
0001670C 4E75                       		rts	
0001670E                            ; ===========================================================================
0001670E                            
0001670E                            locret_146E6:
0001670E 4E75                       		rts	
00016710                            ; End of function Sonic_AnglePos
00016710                            
00016710                            ; ===========================================================================
00016710 2428 0008                  		move.l	8(a0),d2
00016714 3028 0010                  		move.w	$10(a0),d0
00016718 48C0                       		ext.l	d0
0001671A E180                       		asl.l	#8,d0
0001671C 9480                       		sub.l	d0,d2
0001671E 2142 0008                  		move.l	d2,8(a0)
00016722 303C 0038                  		move.w	#$38,d0
00016726 48C0                       		ext.l	d0
00016728 E180                       		asl.l	#8,d0
0001672A 9680                       		sub.l	d0,d3
0001672C 2143 000C                  		move.l	d3,$C(a0)
00016730 4E75                       		rts	
00016732                            ; ===========================================================================
00016732                            
00016732                            locret_1470A:
00016732 4E75                       		rts	
00016734                            ; ===========================================================================
00016734 2628 000C                  		move.l	$C(a0),d3
00016738 3028 0012                  		move.w	$12(a0),d0
0001673C 0440 0038                  		subi.w	#$38,d0
00016740 3140 0012                  		move.w	d0,$12(a0)
00016744 48C0                       		ext.l	d0
00016746 E180                       		asl.l	#8,d0
00016748 9680                       		sub.l	d0,d3
0001674A 2143 000C                  		move.l	d3,$C(a0)
0001674E 4E75                       		rts	
00016750 4E75                       		rts	
00016752                            ; ===========================================================================
00016752 2428 0008                  		move.l	8(a0),d2
00016756 2628 000C                  		move.l	$C(a0),d3
0001675A 3028 0010                  		move.w	$10(a0),d0
0001675E 48C0                       		ext.l	d0
00016760 E180                       		asl.l	#8,d0
00016762 9480                       		sub.l	d0,d2
00016764 3028 0012                  		move.w	$12(a0),d0
00016768 48C0                       		ext.l	d0
0001676A E180                       		asl.l	#8,d0
0001676C 9680                       		sub.l	d0,d3
0001676E 2142 0008                  		move.l	d2,8(a0)
00016772 2143 000C                  		move.l	d3,$C(a0)
00016776 4E75                       		rts	
00016778                            
00016778                            ; ---------------------------------------------------------------------------
00016778                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016778                            ; ---------------------------------------------------------------------------
00016778                            
00016778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016778                            
00016778                            
00016778                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016778 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001677C B240                       		cmp.w	d0,d1
0001677E 6F00                       		ble.s	loc_1475E
00016780 1438 F768                  		move.b	($FFFFF768).w,d2
00016784 3200                       		move.w	d0,d1
00016786                            
00016786                            loc_1475E:
00016786 0802 0000                  		btst	#0,d2
0001678A 6600                       		bne.s	loc_1476A
0001678C 1142 0026                  		move.b	d2,$26(a0)
00016790 4E75                       		rts	
00016792                            ; ===========================================================================
00016792                            
00016792                            loc_1476A:
00016792 1428 0026                  		move.b	$26(a0),d2
00016796 0602 0020                  		addi.b	#$20,d2
0001679A 0202 00C0                  		andi.b	#$C0,d2
0001679E 1142 0026                  		move.b	d2,$26(a0)
000167A2 4E75                       		rts	
000167A4                            ; End of function Sonic_Angle
000167A4                            
000167A4                            ; ---------------------------------------------------------------------------
000167A4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000167A4                            ; ---------------------------------------------------------------------------
000167A4                            
000167A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167A4                            
000167A4                            
000167A4                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000167A4 3428 000C                  		move.w	$C(a0),d2
000167A8 3628 0008                  		move.w	8(a0),d3
000167AC 7000                       		moveq	#0,d0
000167AE 1028 0017                  		move.b	$17(a0),d0
000167B2 4880                       		ext.w	d0
000167B4 4440                       		neg.w	d0
000167B6 D440                       		add.w	d0,d2
000167B8 1028 0016                  		move.b	$16(a0),d0
000167BC 4880                       		ext.w	d0
000167BE D640                       		add.w	d0,d3
000167C0 49F8 F768                  		lea	($FFFFF768).w,a4
000167C4 367C 0010                  		movea.w	#$10,a3
000167C8 3C3C 0000                  		move.w	#0,d6
000167CC 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000167CE 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000167D2 3F01                       		move.w	d1,-(sp)
000167D4 3428 000C                  		move.w	$C(a0),d2
000167D8 3628 0008                  		move.w	8(a0),d3
000167DC 7000                       		moveq	#0,d0
000167DE 1028 0017                  		move.b	$17(a0),d0
000167E2 4880                       		ext.w	d0
000167E4 D440                       		add.w	d0,d2
000167E6 1028 0016                  		move.b	$16(a0),d0
000167EA 4880                       		ext.w	d0
000167EC D640                       		add.w	d0,d3
000167EE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000167F2 367C 0010                  		movea.w	#$10,a3
000167F6 3C3C 0000                  		move.w	#0,d6
000167FA 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000167FC 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016800 301F                       		move.w	(sp)+,d0
00016802 6100 FF74                  		bsr.w	Sonic_Angle
00016806 4A41                       		tst.w	d1
00016808 6700                       		beq.s	locret_147F0
0001680A 6A00                       		bpl.s	loc_147F2
0001680C 0C41 FFF2                  		cmpi.w	#-$E,d1
00016810 6D00 FF20                  		blt.w	locret_1470A
00016814 D368 0008                  		add.w	d1,8(a0)
00016818                            
00016818                            locret_147F0:
00016818 4E75                       		rts	
0001681A                            ; ===========================================================================
0001681A                            
0001681A                            loc_147F2:
0001681A 0C41 000E                  		cmpi.w	#$E,d1
0001681E 6E00                       		bgt.s	loc_147FE
00016820                            
00016820                            loc_147F8:
00016820 D368 0008                  		add.w	d1,8(a0)
00016824 4E75                       		rts	
00016826                            ; ===========================================================================
00016826                            
00016826                            loc_147FE:
00016826 4A28 0038                  		tst.b	$38(a0)
0001682A 66F4                       		bne.s	loc_147F8
0001682C 08E8 0001 0022             		bset	#1,$22(a0)
00016832 08A8 0005 0022             		bclr	#5,$22(a0)
00016838 117C 0001 001D             		move.b	#1,$1D(a0)
0001683E 4E75                       		rts	
00016840                            ; End of function Sonic_WalkVertR
00016840                            
00016840                            ; ---------------------------------------------------------------------------
00016840                            ; Subroutine allowing Sonic to walk upside-down
00016840                            ; ---------------------------------------------------------------------------
00016840                            
00016840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016840                            
00016840                            
00016840                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00016840 3428 000C                  		move.w	$C(a0),d2
00016844 3628 0008                  		move.w	8(a0),d3
00016848 7000                       		moveq	#0,d0
0001684A 1028 0016                  		move.b	$16(a0),d0
0001684E 4880                       		ext.w	d0
00016850 9440                       		sub.w	d0,d2
00016852 0A42 000F                  		eori.w	#$F,d2
00016856 1028 0017                  		move.b	$17(a0),d0
0001685A 4880                       		ext.w	d0
0001685C D640                       		add.w	d0,d3
0001685E 49F8 F768                  		lea	($FFFFF768).w,a4
00016862 367C FFF0                  		movea.w	#-$10,a3
00016866 3C3C 0800                  		move.w	#$0800,d6
0001686A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001686C 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00016870 3F01                       		move.w	d1,-(sp)
00016872 3428 000C                  		move.w	$C(a0),d2
00016876 3628 0008                  		move.w	8(a0),d3
0001687A 7000                       		moveq	#0,d0
0001687C 1028 0016                  		move.b	$16(a0),d0
00016880 4880                       		ext.w	d0
00016882 9440                       		sub.w	d0,d2
00016884 0A42 000F                  		eori.w	#$F,d2
00016888 1028 0017                  		move.b	$17(a0),d0
0001688C 4880                       		ext.w	d0
0001688E 9640                       		sub.w	d0,d3
00016890 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016894 367C FFF0                  		movea.w	#-$10,a3
00016898 3C3C 0800                  		move.w	#$0800,d6
0001689C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001689E 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000168A2 301F                       		move.w	(sp)+,d0
000168A4 6100 FED2                  		bsr.w	Sonic_Angle
000168A8 4A41                       		tst.w	d1
000168AA 6700                       		beq.s	locret_14892
000168AC 6A00                       		bpl.s	loc_14894
000168AE 0C41 FFF2                  		cmpi.w	#-$E,d1
000168B2 6D00 FE5A                  		blt.w	locret_146E6
000168B6 9368 000C                  		sub.w	d1,$C(a0)
000168BA                            
000168BA                            locret_14892:
000168BA 4E75                       		rts	
000168BC                            ; ===========================================================================
000168BC                            
000168BC                            loc_14894:
000168BC 0C41 000E                  		cmpi.w	#$E,d1
000168C0 6E00                       		bgt.s	loc_148A0
000168C2                            
000168C2                            loc_1489A:
000168C2 9368 000C                  		sub.w	d1,$C(a0)
000168C6 4E75                       		rts	
000168C8                            ; ===========================================================================
000168C8                            
000168C8                            loc_148A0:
000168C8 4A28 0038                  		tst.b	$38(a0)
000168CC 66F4                       		bne.s	loc_1489A
000168CE 08E8 0001 0022             		bset	#1,$22(a0)
000168D4 08A8 0005 0022             		bclr	#5,$22(a0)
000168DA 117C 0001 001D             		move.b	#1,$1D(a0)
000168E0 4E75                       		rts	
000168E2                            ; End of function Sonic_WalkCeiling
000168E2                            
000168E2                            ; ---------------------------------------------------------------------------
000168E2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000168E2                            ; ---------------------------------------------------------------------------
000168E2                            
000168E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168E2                            
000168E2                            
000168E2                            Sonic_WalkVertL:
000168E2 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
000168E6 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
000168EA 7000                       		moveq	#0,d0					; MJ: clear d0
000168EC 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
000168F0 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000168F2 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
000168F4 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
000168F8 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000168FA 9640                       		sub.w	d0,d3					; MJ: subtract from X position
000168FC 0A43 000F                  		eori.w	#$F,d3
00016900 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
00016904 367C FFF0                  		movea.w	#-$10,a3
00016908 3C3C 0400                  		move.w	#$400,d6
0001690C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001690E 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016912 3F01                       		move.w	d1,-(sp)
00016914 3428 000C                  		move.w	$C(a0),d2
00016918 3628 0008                  		move.w	8(a0),d3
0001691C 7000                       		moveq	#0,d0
0001691E 1028 0017                  		move.b	$17(a0),d0
00016922 4880                       		ext.w	d0
00016924 D440                       		add.w	d0,d2
00016926 1028 0016                  		move.b	$16(a0),d0
0001692A 4880                       		ext.w	d0
0001692C 9640                       		sub.w	d0,d3
0001692E 0A43 000F                  		eori.w	#$F,d3
00016932 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016936 367C FFF0                  		movea.w	#-$10,a3
0001693A 3C3C 0400                  		move.w	#$400,d6
0001693E 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016940 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016944 301F                       		move.w	(sp)+,d0
00016946 6100 FE30                  		bsr.w	Sonic_Angle
0001694A 4A41                       		tst.w	d1
0001694C 6700                       		beq.s	locret_14934
0001694E 6A00                       		bpl.s	loc_14936
00016950 0C41 FFF2                  		cmpi.w	#-$E,d1
00016954 6D00 FDDC                  		blt.w	locret_1470A
00016958 9368 0008                  		sub.w	d1,8(a0)
0001695C                            
0001695C                            locret_14934:
0001695C 4E75                       		rts
0001695E                            
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            loc_14936:
0001695E 0C41 000E                  		cmpi.w	#$E,d1
00016962 6E00                       		bgt.s	loc_14942
00016964                            
00016964                            loc_1493C:
00016964 9368 0008                  		sub.w	d1,8(a0)
00016968 4E75                       		rts	
0001696A                            
0001696A                            ; ===========================================================================
0001696A                            
0001696A                            loc_14942:
0001696A 4A28 0038                  		tst.b	$38(a0)
0001696E 66F4                       		bne.s	loc_1493C
00016970 08E8 0001 0022             		bset	#1,$22(a0)
00016976 08A8 0005 0022             		bclr	#5,$22(a0)
0001697C 117C 0001 001D             		move.b	#1,$1D(a0)
00016982 4E75                       		rts	
00016984                            ; End of function Sonic_WalkVertL
00016984                            
00016984                            ; ---------------------------------------------------------------------------
00016984                            ; Subroutine to	find which tile	the object is standing on
00016984                            ; ---------------------------------------------------------------------------
00016984                            
00016984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016984                            
00016984                            Floor_ChkTile:				; XREF: FindFloor; et al
00016984 3002                       		move.w	d2,d0					; MJ: load Y position
00016986 0240 0780                  		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
0001698A D040                       		add.w	d0,d0					; MJ: multiply by 2
0001698C 3203                       		move.w	d3,d1					; MJ: load X position
0001698E EE49                       		lsr.w	#7,d1					; MJ: shift to right side
00016990 0241 007F                  		andi.w	#$007F,d1				; MJ: get within 7F
00016994 D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
00016996 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
00016998 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
0001699C 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
000169A0 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
000169A4 EF49                       		lsl.w	#$07,d1					; MJ: multiply by 80
000169A6 3002                       		move.w	d2,d0					; MJ: load Y position
000169A8 0240 0070                  		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
000169AC D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000169AE 3003                       		move.w	d3,d0					; MJ: load X position
000169B0 E648                       		lsr.w	#3,d0					; MJ: divide by 8
000169B2 0240 000E                  		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
000169B6 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000169B8                            
000169B8                            loc_14996:
000169B8 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
000169BA 4E75                       		rts						; MJ: return
000169BC                            ; ===========================================================================
000169BC                            
000169BC                            loc_1499A:
000169BC 0241 007F                  		andi.w	#$7F,d1
000169C0 0828 0006 0001             		btst	#6,1(a0)
000169C6 6700                       		beq.s	loc_149B2
000169C8 5241                       		addq.w	#1,d1
000169CA 0C41 0029                  		cmpi.w	#$29,d1
000169CE 6600                       		bne.s	loc_149B2
000169D0 323C 0051                  		move.w	#$51,d1
000169D4                            
000169D4                            loc_149B2:
000169D4 EE59                       		ror.w	#7,d1
000169D6 E459                       		ror.w	#2,d1
000169D8 3002                       		move.w	d2,d0
000169DA D040                       		add.w	d0,d0
000169DC 0240 0070                  		andi.w	#$070,d0
000169E0 D240                       		add.w	d0,d1
000169E2 3003                       		move.w	d3,d0
000169E4 E648                       		lsr.w	#3,d0
000169E6 0240 000E                  		andi.w	#$0E,d0
000169EA D240                       		add.w	d0,d1
000169EC 2241                       		movea.l	d1,a1
000169EE 4E75                       		rts
000169F0                            ; End of function Floor_ChkTile
000169F0                            
000169F0                            
000169F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169F0                            
000169F0                            
000169F0                            ColisionChkLayer:
000169F0 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
000169F4 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
000169F6 3800                       		move.w	d0,d4					; MJ: load block ID to d4
000169F8 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
000169FC 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00016A00 E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00016A02 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
00016A04                            
00016A04                            CCL_NoChange:
00016A04 4E75                       		rts						; MJ: return
00016A06                            
00016A06                            
00016A06                            FindFloor:
00016A06 6100 FF7C                  		bsr.w	Floor_ChkTile
00016A0A 3011                       		move.w	(a1),d0
00016A0C 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
00016A0E 3800                       		move.w	d0,d4
00016A10 0240 03FF                  		andi.w	#$3FF,d0
00016A14 6700                       		beq.s	loc_149DE
00016A16 0B04                       		btst	d5,d4
00016A18 6600                       		bne.s	loc_149EC
00016A1A                            
00016A1A                            loc_149DE:
00016A1A D44B                       		add.w	a3,d2
00016A1C 6100 0000                  		bsr.w	FindFloor2
00016A20 944B                       		sub.w	a3,d2
00016A22 0641 0010                  		addi.w	#$10,d1
00016A26 4E75                       		rts	
00016A28                            ; ===========================================================================
00016A28                            
00016A28                            loc_149EC:
00016A28 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
00016A2C 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
00016A30 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
00016A34 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
00016A36 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016A3C 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
00016A40 E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
00016A42 3203                       		move.w	d3,d1					; MJ: load X position
00016A44 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
00016A48 6700                       		beq.s	loc_14A12				; MJ: if not, branch
00016A4A 4641                       		not.w	d1					; MJ: reverse bits of the X position
00016A4C 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00016A4E                            
00016A4E                            loc_14A12:
00016A4E 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
00016A52 6700                       		beq.s	loc_14A22				; MJ: if not, branch
00016A54 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
00016A58 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00016A5A 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00016A5E                            
00016A5E                            loc_14A22:
00016A5E 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00016A62 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
00016A64 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
00016A6A 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
00016A6E 4880                       		ext.w	d0					; MJ: clear left byte
00016A70 BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
00016A72 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
00016A76 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
00016A78 4440                       		neg.w	d0					; MJ: reverse solid value
00016A7A                            
00016A7A                            loc_14A3E:
00016A7A 4A40                       		tst.w	d0					; MJ: is the solid data null?
00016A7C 679C                       		beq.s	loc_149DE				; MJ: if so, branch
00016A7E 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
00016A80 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
00016A84 6700                       		beq.s	loc_14A66				; MJ: if so, branch
00016A86 3202                       		move.w	d2,d1					; MJ: load Y position
00016A88 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
00016A8C D041                       		add.w	d1,d0					; MJ: add to solid value
00016A8E 323C 000F                  		move.w	#$F,d1					; MJ: set F
00016A92 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
00016A94 4E75                       		rts			; d1 = position?	; MJ: return
00016A96                            
00016A96                            ; ===========================================================================
00016A96                            
00016A96                            loc_14A5A:
00016A96 3202                       		move.w	d2,d1
00016A98 0241 000F                  		andi.w	#$F,d1
00016A9C D041                       		add.w	d1,d0
00016A9E 6A00 FF7A                  		bpl.w	loc_149DE
00016AA2                            
00016AA2                            loc_14A66:
00016AA2 944B                       		sub.w	a3,d2
00016AA4 6100 0000                  		bsr.w	FindFloor2
00016AA8 D44B                       		add.w	a3,d2
00016AAA 0441 0010                  		subi.w	#$10,d1
00016AAE 4E75                       		rts	
00016AB0                            ; End of function FindFloor
00016AB0                            
00016AB0                            
00016AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AB0                            
00016AB0                            
00016AB0                            FindFloor2:				; XREF: FindFloor
00016AB0 6100 FED2                  		bsr.w	Floor_ChkTile
00016AB4 3011                       		move.w	(a1),d0
00016AB6 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016ABA 3800                       		move.w	d0,d4
00016ABC 0240 03FF                  		andi.w	#$3FF,d0
00016AC0 6700                       		beq.s	loc_14A86
00016AC2 0B04                       		btst	d5,d4
00016AC4 6600                       		bne.s	loc_14A94
00016AC6                            
00016AC6                            loc_14A86:
00016AC6 323C 000F                  		move.w	#$F,d1
00016ACA 3002                       		move.w	d2,d0
00016ACC 0240 000F                  		andi.w	#$F,d0
00016AD0 9240                       		sub.w	d0,d1
00016AD2 4E75                       		rts	
00016AD4                            ; ===========================================================================
00016AD4                            
00016AD4                            loc_14A94:
00016AD4 2478 F796                  		movea.l	($FFFFF796).w,a2
00016AD8 1032 0000                  		move.b	(a2,d0.w),d0
00016ADC 0240 00FF                  		andi.w	#$FF,d0
00016AE0 67E4                       		beq.s	loc_14A86
00016AE2 45F9 0000 0000             		lea	(AngleMap).l,a2
00016AE8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016AEC E948                       		lsl.w	#4,d0
00016AEE 3203                       		move.w	d3,d1
00016AF0 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016AF4 6700                       		beq.s	loc_14ABA
00016AF6 4641                       		not.w	d1
00016AF8 4414                       		neg.b	(a4)
00016AFA                            
00016AFA                            loc_14ABA:
00016AFA 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016AFE 6700                       		beq.s	loc_14ACA
00016B00 0614 0040                  		addi.b	#$40,(a4)
00016B04 4414                       		neg.b	(a4)
00016B06 0414 0040                  		subi.b	#$40,(a4)
00016B0A                            
00016B0A                            loc_14ACA:
00016B0A 0241 000F                  		andi.w	#$F,d1
00016B0E D240                       		add.w	d0,d1
00016B10 45F9 0000 0000             		lea	(CollArray1).l,a2
00016B16 1032 1000                  		move.b	(a2,d1.w),d0
00016B1A 4880                       		ext.w	d0
00016B1C BD44                       		eor.w	d6,d4
00016B1E 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016B22 6700                       		beq.s	loc_14AE6
00016B24 4440                       		neg.w	d0
00016B26                            
00016B26                            loc_14AE6:
00016B26 4A40                       		tst.w	d0
00016B28 679C                       		beq.s	loc_14A86
00016B2A 6B00                       		bmi.s	loc_14AFC
00016B2C 3202                       		move.w	d2,d1
00016B2E 0241 000F                  		andi.w	#$F,d1
00016B32 D041                       		add.w	d1,d0
00016B34 323C 000F                  		move.w	#$F,d1
00016B38 9240                       		sub.w	d0,d1
00016B3A 4E75                       		rts	
00016B3C                            ; ===========================================================================
00016B3C                            
00016B3C                            loc_14AFC:
00016B3C 3202                       		move.w	d2,d1
00016B3E 0241 000F                  		andi.w	#$F,d1
00016B42 D041                       		add.w	d1,d0
00016B44 6A00 FF80                  		bpl.w	loc_14A86
00016B48 4641                       		not.w	d1
00016B4A 4E75                       		rts	
00016B4C                            ; End of function FindFloor2
00016B4C                            
00016B4C                            
00016B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B4C                            
00016B4C                            
00016B4C                            FindWall:
00016B4C 6100 FE36                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
00016B50 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
00016B52 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016B56 3800                       		move.w	d0,d4					; MJ: copy to d4
00016B58 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00016B5C 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00016B5E 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00016B60 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00016B62                            
00016B62                            loc_14B1E:
00016B62 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
00016B64 6100 0000                  		bsr.w	FindWall2
00016B68 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
00016B6A 0641 0010                  		addi.w	#$10,d1
00016B6E 4E75                       		rts	
00016B70                            ; ===========================================================================
00016B70                            
00016B70                            loc_14B2C:
00016B70 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
00016B74 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
00016B78 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
00016B7C 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
00016B7E 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016B84 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00016B88 E948                       		lsl.w	#4,d0					; MJ: multiply by 10
00016B8A 3202                       		move.w	d2,d1					; MJ: load Y position
00016B8C 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
00016B90 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
00016B92 4641                       		not.w	d1
00016B94 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00016B98 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016B9A 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
00016B9E                            
00016B9E                            loc_14B5A:
00016B9E 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
00016BA2 6700                       		beq.s	loc_14B62				; MJ: if not, branch
00016BA4 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016BA6                            
00016BA6                            loc_14B62:
00016BA6 0241 000F                  		andi.w	#$F,d1
00016BAA D240                       		add.w	d0,d1
00016BAC 45F9 0000 0000             		lea	(CollArray2).l,a2
00016BB2 1032 1000                  		move.b	(a2,d1.w),d0
00016BB6 4880                       		ext.w	d0
00016BB8 BD44                       		eor.w	d6,d4
00016BBA 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016BBE 6700                       		beq.s	loc_14B7E
00016BC0 4440                       		neg.w	d0
00016BC2                            
00016BC2                            loc_14B7E:
00016BC2 4A40                       		tst.w	d0
00016BC4 679C                       		beq.s	loc_14B1E
00016BC6 6B00                       		bmi.s	loc_14B9A
00016BC8 0C00 0010                  		cmpi.b	#$10,d0
00016BCC 6700                       		beq.s	loc_14BA6
00016BCE 3203                       		move.w	d3,d1
00016BD0 0241 000F                  		andi.w	#$F,d1
00016BD4 D041                       		add.w	d1,d0
00016BD6 323C 000F                  		move.w	#$F,d1
00016BDA 9240                       		sub.w	d0,d1
00016BDC 4E75                       		rts	
00016BDE                            ; ===========================================================================
00016BDE                            
00016BDE                            loc_14B9A:
00016BDE 3203                       		move.w	d3,d1
00016BE0 0241 000F                  		andi.w	#$F,d1
00016BE4 D041                       		add.w	d1,d0
00016BE6 6A00 FF7A                  		bpl.w	loc_14B1E
00016BEA                            
00016BEA                            loc_14BA6:
00016BEA 964B                       		sub.w	a3,d3
00016BEC 6100 0000                  		bsr.w	FindWall2
00016BF0 D64B                       		add.w	a3,d3
00016BF2 0441 0010                  		subi.w	#$10,d1
00016BF6 4E75                       		rts	
00016BF8                            ; End of function FindWall
00016BF8                            
00016BF8                            
00016BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BF8                            
00016BF8                            
00016BF8                            FindWall2:				; XREF: FindWall
00016BF8 6100 FD8A                  		bsr.w	Floor_ChkTile
00016BFC 3011                       		move.w	(a1),d0
00016BFE 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016C02 3800                       		move.w	d0,d4
00016C04 0240 03FF                  		andi.w	#$3FF,d0
00016C08 6700                       		beq.s	loc_14BC6
00016C0A 0B04                       		btst	d5,d4
00016C0C 6600                       		bne.s	loc_14BD4
00016C0E                            
00016C0E                            loc_14BC6:
00016C0E 323C 000F                  		move.w	#$F,d1
00016C12 3003                       		move.w	d3,d0
00016C14 0240 000F                  		andi.w	#$F,d0
00016C18 9240                       		sub.w	d0,d1
00016C1A 4E75                       		rts	
00016C1C                            ; ===========================================================================
00016C1C                            
00016C1C                            loc_14BD4:
00016C1C 2478 F796                  		movea.l	($FFFFF796).w,a2
00016C20 1032 0000                  		move.b	(a2,d0.w),d0
00016C24 0240 00FF                  		andi.w	#$FF,d0
00016C28 67E4                       		beq.s	loc_14BC6
00016C2A 45F9 0000 0000             		lea	(AngleMap).l,a2
00016C30 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016C34 E948                       		lsl.w	#4,d0
00016C36 3202                       		move.w	d2,d1
00016C38 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016C3C 6700                       		beq.s	loc_14C02
00016C3E 4641                       		not.w	d1
00016C40 0614 0040                  		addi.b	#$40,(a4)
00016C44 4414                       		neg.b	(a4)
00016C46 0414 0040                  		subi.b	#$40,(a4)
00016C4A                            
00016C4A                            loc_14C02:
00016C4A 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016C4E 6700                       		beq.s	loc_14C0A
00016C50 4414                       		neg.b	(a4)
00016C52                            
00016C52                            loc_14C0A:
00016C52 0241 000F                  		andi.w	#$F,d1
00016C56 D240                       		add.w	d0,d1
00016C58 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C5E 1032 1000                  		move.b	(a2,d1.w),d0
00016C62 4880                       		ext.w	d0
00016C64 BD44                       		eor.w	d6,d4
00016C66 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016C6A 6700                       		beq.s	loc_14C26
00016C6C 4440                       		neg.w	d0
00016C6E                            
00016C6E                            loc_14C26:
00016C6E 4A40                       		tst.w	d0
00016C70 679C                       		beq.s	loc_14BC6
00016C72 6B00                       		bmi.s	loc_14C3C
00016C74 3203                       		move.w	d3,d1
00016C76 0241 000F                  		andi.w	#$F,d1
00016C7A D041                       		add.w	d1,d0
00016C7C 323C 000F                  		move.w	#$F,d1
00016C80 9240                       		sub.w	d0,d1
00016C82 4E75                       		rts	
00016C84                            ; ===========================================================================
00016C84                            
00016C84                            loc_14C3C:
00016C84 3203                       		move.w	d3,d1
00016C86 0241 000F                  		andi.w	#$F,d1
00016C8A D041                       		add.w	d1,d0
00016C8C 6A00 FF80                  		bpl.w	loc_14BC6
00016C90 4641                       		not.w	d1
00016C92 4E75                       		rts	
00016C94                            ; End of function FindWall2
00016C94                            
00016C94                            ; ---------------------------------------------------------------------------
00016C94                            ; Unused floor/wall subroutine - logs something	to do with collision
00016C94                            ; ---------------------------------------------------------------------------
00016C94                            
00016C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C94                            
00016C94                            
00016C94                            FloorLog_Unk:				; XREF: Level
00016C94 4E75                       		rts	
00016C96                            
00016C96 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C9C 45F9 0000 0000             		lea	(CollArray1).l,a2
00016CA2 363C 00FF                  		move.w	#$FF,d3
00016CA6                            
00016CA6                            loc_14C5E:
00016CA6 7A10                       		moveq	#$10,d5
00016CA8 343C 000F                  		move.w	#$F,d2
00016CAC                            
00016CAC                            loc_14C64:
00016CAC 7800                       		moveq	#0,d4
00016CAE 323C 000F                  		move.w	#$F,d1
00016CB2                            
00016CB2                            loc_14C6A:
00016CB2 3019                       		move.w	(a1)+,d0
00016CB4 EAA8                       		lsr.l	d5,d0
00016CB6 D944                       		addx.w	d4,d4
00016CB8 51C9 FFF8                  		dbf	d1,loc_14C6A
00016CBC                            
00016CBC 34C4                       		move.w	d4,(a2)+
00016CBE 92FC 0020                  		suba.w	#$20,a1
00016CC2 5345                       		subq.w	#1,d5
00016CC4 51CA FFE6                  		dbf	d2,loc_14C64
00016CC8                            
00016CC8 D2FC 0020                  		adda.w	#$20,a1
00016CCC 51CB FFD8                  		dbf	d3,loc_14C5E
00016CD0                            
00016CD0 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CD6 45F9 0000 0000             		lea	(CollArray2).l,a2
00016CDC 6100                       		bsr.s	FloorLog_Unk2
00016CDE 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CE4 45F9 0000 0000             		lea	(CollArray1).l,a2
00016CEA                            
00016CEA                            ; End of function FloorLog_Unk
00016CEA                            
00016CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CEA                            
00016CEA                            
00016CEA                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016CEA 363C 0FFF                  		move.w	#$FFF,d3
00016CEE                            
00016CEE                            loc_14CA6:
00016CEE 7400                       		moveq	#0,d2
00016CF0 323C 000F                  		move.w	#$F,d1
00016CF4 3019                       		move.w	(a1)+,d0
00016CF6 6700                       		beq.s	loc_14CD4
00016CF8 6B00                       		bmi.s	loc_14CBE
00016CFA                            
00016CFA                            loc_14CB2:
00016CFA E248                       		lsr.w	#1,d0
00016CFC 6400                       		bcc.s	loc_14CB8
00016CFE 5202                       		addq.b	#1,d2
00016D00                            
00016D00                            loc_14CB8:
00016D00 51C9 FFF8                  		dbf	d1,loc_14CB2
00016D04                            
00016D04 6000                       		bra.s	loc_14CD6
00016D06                            ; ===========================================================================
00016D06                            
00016D06                            loc_14CBE:
00016D06 0C40 FFFF                  		cmpi.w	#-1,d0
00016D0A 6700                       		beq.s	loc_14CD0
00016D0C                            
00016D0C                            loc_14CC4:
00016D0C E348                       		lsl.w	#1,d0
00016D0E 6400                       		bcc.s	loc_14CCA
00016D10 5302                       		subq.b	#1,d2
00016D12                            
00016D12                            loc_14CCA:
00016D12 51C9 FFF8                  		dbf	d1,loc_14CC4
00016D16                            
00016D16 6000                       		bra.s	loc_14CD6
00016D18                            ; ===========================================================================
00016D18                            
00016D18                            loc_14CD0:
00016D18 303C 0010                  		move.w	#$10,d0
00016D1C                            
00016D1C                            loc_14CD4:
00016D1C 3400                       		move.w	d0,d2
00016D1E                            
00016D1E                            loc_14CD6:
00016D1E 14C2                       		move.b	d2,(a2)+
00016D20 51CB FFCC                  		dbf	d3,loc_14CA6
00016D24                            
00016D24 4E75                       		rts	
00016D26                            
00016D26                            ; End of function FloorLog_Unk2
00016D26                            
00016D26                            
00016D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D26                            
00016D26                            
00016D26                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016D26 2628 0008                  		move.l	8(a0),d3
00016D2A 2428 000C                  		move.l	$C(a0),d2
00016D2E 3228 0010                  		move.w	$10(a0),d1
00016D32 48C1                       		ext.l	d1
00016D34 E181                       		asl.l	#8,d1
00016D36 D681                       		add.l	d1,d3
00016D38 3228 0012                  		move.w	$12(a0),d1
00016D3C 48C1                       		ext.l	d1
00016D3E E181                       		asl.l	#8,d1
00016D40 D481                       		add.l	d1,d2
00016D42 4842                       		swap	d2
00016D44 4843                       		swap	d3
00016D46 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D4A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D4E 1200                       		move.b	d0,d1
00016D50 0600 0020                  		addi.b	#$20,d0
00016D54 6A00                       		bpl.s	loc_14D1A
00016D56 1001                       		move.b	d1,d0
00016D58 6A00                       		bpl.s	loc_14D14
00016D5A 5300                       		subq.b	#1,d0
00016D5C                            
00016D5C                            loc_14D14:
00016D5C 0600 0020                  		addi.b	#$20,d0
00016D60 6000                       		bra.s	loc_14D24
00016D62                            ; ===========================================================================
00016D62                            
00016D62                            loc_14D1A:
00016D62 1001                       		move.b	d1,d0
00016D64 6A00                       		bpl.s	loc_14D20
00016D66 5200                       		addq.b	#1,d0
00016D68                            
00016D68                            loc_14D20:
00016D68 0600 001F                  		addi.b	#$1F,d0
00016D6C                            
00016D6C                            loc_14D24:
00016D6C 0200 00C0                  		andi.b	#$C0,d0
00016D70 6700 0000                  		beq.w	loc_14DF0
00016D74 0C00 0080                  		cmpi.b	#$80,d0
00016D78 6700 0000                  		beq.w	loc_14F7C
00016D7C 0201 0038                  		andi.b	#$38,d1
00016D80 6600                       		bne.s	loc_14D3C
00016D82 5042                       		addq.w	#8,d2
00016D84                            
00016D84                            loc_14D3C:
00016D84 0C00 0040                  		cmpi.b	#$40,d0
00016D88 6700 0000                  		beq.w	loc_1504A
00016D8C 6000 0000                  		bra.w	loc_14EBC
00016D90                            
00016D90                            ; End of function Sonic_WalkSpeed
00016D90                            
00016D90                            
00016D90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D90                            
00016D90                            
00016D90                            sub_14D48:				; XREF: Sonic_Jump
00016D90 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D94 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D98 0600 0020                  		addi.b	#$20,d0
00016D9C 0200 00C0                  		andi.b	#$C0,d0
00016DA0 0C00 0040                  		cmpi.b	#$40,d0
00016DA4 6700 0000                  		beq.w	loc_14FD6
00016DA8 0C00 0080                  		cmpi.b	#$80,d0
00016DAC 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016DB0 0C00 00C0                  		cmpi.b	#$C0,d0
00016DB4 6700 0000                  		beq.w	sub_14E50
00016DB8                            
00016DB8                            ; End of function sub_14D48
00016DB8                            
00016DB8                            ; ---------------------------------------------------------------------------
00016DB8                            ; Subroutine to	make Sonic land	on the floor after jumping
00016DB8                            ; ---------------------------------------------------------------------------
00016DB8                            
00016DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DB8                            
00016DB8                            
00016DB8                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016DB8 3428 000C                  		move.w	$C(a0),d2
00016DBC 3628 0008                  		move.w	8(a0),d3
00016DC0 7000                       		moveq	#0,d0
00016DC2 1028 0016                  		move.b	$16(a0),d0
00016DC6 4880                       		ext.w	d0
00016DC8 D440                       		add.w	d0,d2
00016DCA 1028 0017                  		move.b	$17(a0),d0
00016DCE 4880                       		ext.w	d0
00016DD0 D640                       		add.w	d0,d3
00016DD2 49F8 F768                  		lea	($FFFFF768).w,a4
00016DD6 367C 0010                  		movea.w	#$10,a3
00016DDA 3C3C 0000                  		move.w	#0,d6
00016DDE 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016DE0 6100 FC24                  		bsr.w	FindFloor				; MJ: check solidity
00016DE4 3F01                       		move.w	d1,-(sp)
00016DE6 3428 000C                  		move.w	$C(a0),d2
00016DEA 3628 0008                  		move.w	8(a0),d3
00016DEE 7000                       		moveq	#0,d0
00016DF0 1028 0016                  		move.b	$16(a0),d0
00016DF4 4880                       		ext.w	d0
00016DF6 D440                       		add.w	d0,d2
00016DF8 1028 0017                  		move.b	$17(a0),d0
00016DFC 4880                       		ext.w	d0
00016DFE 9640                       		sub.w	d0,d3
00016E00 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E04 367C 0010                  		movea.w	#$10,a3
00016E08 3C3C 0000                  		move.w	#0,d6
00016E0C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016E0E 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00016E12 301F                       		move.w	(sp)+,d0
00016E14 143C 0000                  		move.b	#0,d2
00016E18                            
00016E18                            loc_14DD0:
00016E18 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016E1C B240                       		cmp.w	d0,d1
00016E1E 6F00                       		ble.s	loc_14DDE
00016E20 1638 F768                  		move.b	($FFFFF768).w,d3
00016E24 C141                       		exg	d0,d1
00016E26                            
00016E26                            loc_14DDE:
00016E26 0803 0000                  		btst	#0,d3
00016E2A 6700                       		beq.s	locret_14DE6
00016E2C 1602                       		move.b	d2,d3
00016E2E                            
00016E2E                            locret_14DE6:
00016E2E 4E75                       		rts	
00016E30                            
00016E30                            ; End of function Sonic_HitFloor
00016E30                            
00016E30                            ; ===========================================================================
00016E30 3428 000C                  		move.w	$C(a0),d2
00016E34 3628 0008                  		move.w	8(a0),d3
00016E38                            
00016E38                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016E38 0642 000A                  		addi.w	#$A,d2
00016E3C 49F8 F768                  		lea	($FFFFF768).w,a4
00016E40 367C 0010                  		movea.w	#$10,a3
00016E44 3C3C 0000                  		move.w	#0,d6
00016E48 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016E4A 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00016E4E 143C 0000                  		move.b	#0,d2
00016E52                            
00016E52                            loc_14E0A:				; XREF: sub_14EB4
00016E52 1638 F768                  		move.b	($FFFFF768).w,d3
00016E56 0803 0000                  		btst	#0,d3
00016E5A 6700                       		beq.s	locret_14E16
00016E5C 1602                       		move.b	d2,d3
00016E5E                            
00016E5E                            locret_14E16:
00016E5E 4E75                       		rts	
00016E60                            
00016E60                            ; ---------------------------------------------------------------------------
00016E60                            ; Subroutine allowing objects to interact with the floor
00016E60                            ; ---------------------------------------------------------------------------
00016E60                            
00016E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E60                            
00016E60                            
00016E60                            ObjHitFloor:
00016E60 3628 0008                  		move.w	8(a0),d3
00016E64                            
00016E64                            ; End of function ObjHitFloor
00016E64                            
00016E64                            
00016E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E64                            
00016E64                            
00016E64                            ObjHitFloor2:
00016E64 3428 000C                  		move.w	$C(a0),d2
00016E68 7000                       		moveq	#0,d0
00016E6A 1028 0016                  		move.b	$16(a0),d0
00016E6E 4880                       		ext.w	d0
00016E70 D440                       		add.w	d0,d2
00016E72 49F8 F768                  		lea	($FFFFF768).w,a4
00016E76 18BC 0000                  		move.b	#0,(a4)
00016E7A 367C 0010                  		movea.w	#$10,a3
00016E7E 3C3C 0000                  		move.w	#0,d6
00016E82 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016E84 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00016E88 1638 F768                  		move.b	($FFFFF768).w,d3
00016E8C 0803 0000                  		btst	#0,d3
00016E90 6700                       		beq.s	locret_14E4E
00016E92 163C 0000                  		move.b	#0,d3
00016E96                            
00016E96                            locret_14E4E:
00016E96 4E75                       		rts	
00016E98                            ; End of function ObjHitFloor2
00016E98                            
00016E98                            
00016E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E98                            
00016E98                            
00016E98                            sub_14E50:				; XREF: sub_14D48
00016E98 3428 000C                  		move.w	$C(a0),d2
00016E9C 3628 0008                  		move.w	8(a0),d3
00016EA0 7000                       		moveq	#0,d0
00016EA2 1028 0017                  		move.b	$17(a0),d0
00016EA6 4880                       		ext.w	d0
00016EA8 9440                       		sub.w	d0,d2
00016EAA 1028 0016                  		move.b	$16(a0),d0
00016EAE 4880                       		ext.w	d0
00016EB0 D640                       		add.w	d0,d3
00016EB2 49F8 F768                  		lea	($FFFFF768).w,a4
00016EB6 367C 0010                  		movea.w	#$10,a3
00016EBA 3C3C 0000                  		move.w	#0,d6
00016EBE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016EC0 6100 FC8A                  		bsr.w	FindWall				; MJ: check solidity
00016EC4 3F01                       		move.w	d1,-(sp)
00016EC6 3428 000C                  		move.w	$C(a0),d2
00016ECA 3628 0008                  		move.w	8(a0),d3
00016ECE 7000                       		moveq	#0,d0
00016ED0 1028 0017                  		move.b	$17(a0),d0
00016ED4 4880                       		ext.w	d0
00016ED6 D440                       		add.w	d0,d2
00016ED8 1028 0016                  		move.b	$16(a0),d0
00016EDC 4880                       		ext.w	d0
00016EDE D640                       		add.w	d0,d3
00016EE0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016EE4 367C 0010                  		movea.w	#$10,a3
00016EE8 3C3C 0000                  		move.w	#0,d6
00016EEC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016EEE 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00016EF2 301F                       		move.w	(sp)+,d0
00016EF4 143C 00C0                  		move.b	#-$40,d2
00016EF8 6000 FF1E                  		bra.w	loc_14DD0
00016EFC                            
00016EFC                            ; End of function sub_14E50
00016EFC                            
00016EFC                            
00016EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EFC                            
00016EFC                            
00016EFC                            sub_14EB4:				; XREF: Sonic_Floor
00016EFC 3428 000C                  		move.w	$C(a0),d2
00016F00 3628 0008                  		move.w	8(a0),d3
00016F04                            
00016F04                            loc_14EBC:
00016F04 0643 000A                  		addi.w	#$A,d3
00016F08 49F8 F768                  		lea	($FFFFF768).w,a4
00016F0C 367C 0010                  		movea.w	#$10,a3
00016F10 3C3C 0000                  		move.w	#0,d6
00016F14 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F16 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00016F1A 143C 00C0                  		move.b	#-$40,d2
00016F1E 6000 FF32                  		bra.w	loc_14E0A
00016F22                            
00016F22                            ; End of function sub_14EB4
00016F22                            
00016F22                            ; ---------------------------------------------------------------------------
00016F22                            ; Subroutine to	detect when an object hits a wall to its right
00016F22                            ; ---------------------------------------------------------------------------
00016F22                            
00016F22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F22                            
00016F22                            
00016F22                            ObjHitWallRight:
00016F22 D668 0008                  		add.w	8(a0),d3
00016F26 3428 000C                  		move.w	$C(a0),d2
00016F2A 49F8 F768                  		lea	($FFFFF768).w,a4
00016F2E 18BC 0000                  		move.b	#0,(a4)
00016F32 367C 0010                  		movea.w	#$10,a3
00016F36 3C3C 0000                  		move.w	#0,d6
00016F3A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F3C 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00016F40 1638 F768                  		move.b	($FFFFF768).w,d3
00016F44 0803 0000                  		btst	#0,d3
00016F48 6700                       		beq.s	locret_14F06
00016F4A 163C 00C0                  		move.b	#-$40,d3
00016F4E                            
00016F4E                            locret_14F06:
00016F4E 4E75                       		rts	
00016F50                            
00016F50                            ; End of function ObjHitWallRight
00016F50                            
00016F50                            ; ---------------------------------------------------------------------------
00016F50                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016F50                            ; touches them
00016F50                            ; ---------------------------------------------------------------------------
00016F50                            
00016F50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F50                            
00016F50                            
00016F50                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016F50 3428 000C                  		move.w	$C(a0),d2
00016F54 3628 0008                  		move.w	8(a0),d3
00016F58 7000                       		moveq	#0,d0
00016F5A 1028 0016                  		move.b	$16(a0),d0
00016F5E 4880                       		ext.w	d0
00016F60 9440                       		sub.w	d0,d2
00016F62 0A42 000F                  		eori.w	#$F,d2
00016F66 1028 0017                  		move.b	$17(a0),d0
00016F6A 4880                       		ext.w	d0
00016F6C D640                       		add.w	d0,d3
00016F6E 49F8 F768                  		lea	($FFFFF768).w,a4
00016F72 367C FFF0                  		movea.w	#-$10,a3
00016F76 3C3C 0800                  		move.w	#$0800,d6
00016F7A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F7C 6100 FA88                  		bsr.w	FindFloor				; MJ: check solidity
00016F80 3F01                       		move.w	d1,-(sp)
00016F82 3428 000C                  		move.w	$C(a0),d2
00016F86 3628 0008                  		move.w	8(a0),d3
00016F8A 7000                       		moveq	#0,d0
00016F8C 1028 0016                  		move.b	$16(a0),d0
00016F90 4880                       		ext.w	d0
00016F92 9440                       		sub.w	d0,d2
00016F94 0A42 000F                  		eori.w	#$F,d2
00016F98 1028 0017                  		move.b	$17(a0),d0
00016F9C 4880                       		ext.w	d0
00016F9E 9640                       		sub.w	d0,d3
00016FA0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FA4 367C FFF0                  		movea.w	#-$10,a3
00016FA8 3C3C 0800                  		move.w	#$0800,d6
00016FAC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FAE 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00016FB2 301F                       		move.w	(sp)+,d0
00016FB4 143C 0080                  		move.b	#-$80,d2
00016FB8 6000 FE5E                  		bra.w	loc_14DD0
00016FBC                            ; End of function Sonic_DontRunOnWalls
00016FBC                            
00016FBC                            ; ===========================================================================
00016FBC 3428 000C                  		move.w	$C(a0),d2
00016FC0 3628 0008                  		move.w	8(a0),d3
00016FC4                            
00016FC4                            loc_14F7C:
00016FC4 0442 000A                  		subi.w	#$A,d2
00016FC8 0A42 000F                  		eori.w	#$F,d2
00016FCC 49F8 F768                  		lea	($FFFFF768).w,a4
00016FD0 367C FFF0                  		movea.w	#-$10,a3
00016FD4 3C3C 0800                  		move.w	#$0800,d6
00016FD8 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FDA 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
00016FDE 143C 0080                  		move.b	#-$80,d2
00016FE2 6000 FE6E                  		bra.w	loc_14E0A
00016FE6                            
00016FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FE6                            
00016FE6                            
00016FE6                            ObjHitCeiling:
00016FE6 3428 000C                  		move.w	$C(a0),d2
00016FEA 3628 0008                  		move.w	8(a0),d3
00016FEE 7000                       		moveq	#0,d0
00016FF0 1028 0016                  		move.b	$16(a0),d0
00016FF4 4880                       		ext.w	d0
00016FF6 9440                       		sub.w	d0,d2
00016FF8 0A42 000F                  		eori.w	#$F,d2
00016FFC 49F8 F768                  		lea	($FFFFF768).w,a4
00017000 367C FFF0                  		movea.w	#-$10,a3
00017004 3C3C 0800                  		move.w	#$0800,d6
00017008 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001700A 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
0001700E 1638 F768                  		move.b	($FFFFF768).w,d3
00017012 0803 0000                  		btst	#0,d3
00017016 6700                       		beq.s	locret_14FD4
00017018 163C 0080                  		move.b	#-$80,d3
0001701C                            
0001701C                            locret_14FD4:
0001701C 4E75                       		rts	
0001701E                            ; End of function ObjHitCeiling
0001701E                            
0001701E                            ; ===========================================================================
0001701E                            
0001701E                            loc_14FD6:				; XREF: sub_14D48
0001701E 3428 000C                  		move.w	$C(a0),d2
00017022 3628 0008                  		move.w	8(a0),d3
00017026 7000                       		moveq	#0,d0
00017028 1028 0017                  		move.b	$17(a0),d0
0001702C 4880                       		ext.w	d0
0001702E 9440                       		sub.w	d0,d2
00017030 1028 0016                  		move.b	$16(a0),d0
00017034 4880                       		ext.w	d0
00017036 9640                       		sub.w	d0,d3
00017038 0A43 000F                  		eori.w	#$F,d3
0001703C 49F8 F768                  		lea	($FFFFF768).w,a4
00017040 367C FFF0                  		movea.w	#-$10,a3
00017044 3C3C 0400                  		move.w	#$400,d6
00017048 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001704A 6100 FB00                  		bsr.w	FindWall				; MJ: check solidity
0001704E 3F01                       		move.w	d1,-(sp)
00017050 3428 000C                  		move.w	$C(a0),d2
00017054 3628 0008                  		move.w	8(a0),d3
00017058 7000                       		moveq	#0,d0
0001705A 1028 0017                  		move.b	$17(a0),d0
0001705E 4880                       		ext.w	d0
00017060 D440                       		add.w	d0,d2
00017062 1028 0016                  		move.b	$16(a0),d0
00017066 4880                       		ext.w	d0
00017068 9640                       		sub.w	d0,d3
0001706A 0A43 000F                  		eori.w	#$F,d3
0001706E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017072 367C FFF0                  		movea.w	#-$10,a3
00017076 3C3C 0400                  		move.w	#$400,d6
0001707A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001707C 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00017080 301F                       		move.w	(sp)+,d0
00017082 143C 0040                  		move.b	#$40,d2
00017086 6000 FD90                  		bra.w	loc_14DD0
0001708A                            
0001708A                            ; ---------------------------------------------------------------------------
0001708A                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001708A                            ; ---------------------------------------------------------------------------
0001708A                            
0001708A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001708A                            
0001708A                            
0001708A                            Sonic_HitWall:				; XREF: Sonic_Floor
0001708A 3428 000C                  		move.w	$C(a0),d2
0001708E 3628 0008                  		move.w	8(a0),d3
00017092                            
00017092                            loc_1504A:
00017092 0443 000A                  		subi.w	#$A,d3
00017096 0A43 000F                  		eori.w	#$F,d3
0001709A 49F8 F768                  		lea	($FFFFF768).w,a4
0001709E 367C FFF0                  		movea.w	#-$10,a3
000170A2 3C3C 0400                  		move.w	#$400,d6
000170A6 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170A8 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
000170AC 143C 0040                  		move.b	#$40,d2
000170B0 6000 FDA0                  		bra.w	loc_14E0A
000170B4                            ; End of function Sonic_HitWall
000170B4                            
000170B4                            ; ---------------------------------------------------------------------------
000170B4                            ; Subroutine to	detect when an object hits a wall to its left
000170B4                            ; ---------------------------------------------------------------------------
000170B4                            
000170B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170B4                            
000170B4                            
000170B4                            ObjHitWallLeft:
000170B4 D668 0008                  		add.w	8(a0),d3
000170B8 3428 000C                  		move.w	$C(a0),d2
000170BC 49F8 F768                  		lea	($FFFFF768).w,a4
000170C0 18BC 0000                  		move.b	#0,(a4)
000170C4 367C FFF0                  		movea.w	#-$10,a3
000170C8 3C3C 0400                  		move.w	#$400,d6
000170CC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170CE 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
000170D2 1638 F768                  		move.b	($FFFFF768).w,d3
000170D6 0803 0000                  		btst	#0,d3
000170DA 6700                       		beq.s	locret_15098
000170DC 163C 0040                  		move.b	#$40,d3
000170E0                            
000170E0                            locret_15098:
000170E0 4E75                       		rts	
000170E2                            ; End of function ObjHitWallLeft
000170E2                            
000170E2                            ; ===========================================================================
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            
000170E2                            ; ===========================================================================
000170E2                            ; ---------------------------------------------------------------------------
000170E2                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000170E2                            ; ---------------------------------------------------------------------------
000170E2                            
000170E2                            Obj66:					; XREF: Obj_Index
000170E2 7000                       		moveq	#0,d0
000170E4 1028 0024                  		move.b	$24(a0),d0
000170E8 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000170EC 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000170F0                            ; ===========================================================================
000170F0 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000170F2 0000                       		dc.w Obj66_Action-Obj66_Index
000170F4 0000                       		dc.w Obj66_Display-Obj66_Index
000170F6 0000                       		dc.w Obj66_Release-Obj66_Index
000170F8                            ; ===========================================================================
000170F8                            
000170F8                            Obj66_Main:				; XREF: Obj66_Index
000170F8 5428 0024                  		addq.b	#2,$24(a0)
000170FC 323C 0001                  		move.w	#1,d1
00017100 2248                       		movea.l	a0,a1
00017102 6000                       		bra.s	Obj66_MakeItem
00017104                            ; ===========================================================================
00017104                            
00017104                            Obj66_Loop:
00017104 6100 8458                  		bsr.w	SingleObjLoad
00017108 6600                       		bne.s	loc_150FE
0001710A 12BC 0066                  		move.b	#$66,0(a1)
0001710E 5829 0024                  		addq.b	#4,$24(a1)
00017112 3368 0008 0008             		move.w	8(a0),8(a1)
00017118 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001711E 137C 0003 0018             		move.b	#3,$18(a1)
00017124 137C 0010 001A             		move.b	#$10,$1A(a1)
0001712A                            
0001712A                            Obj66_MakeItem:				; XREF: Obj66_Main
0001712A 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00017132 337C 4348 0002             		move.w	#$4348,2(a1)
00017138 0029 0004 0001             		ori.b	#4,1(a1)
0001713E 137C 0038 0019             		move.b	#$38,$19(a1)
00017144                            
00017144                            loc_150FE:
00017144 51C9 FFBE                  		dbf	d1,Obj66_Loop
00017148                            
00017148 117C 0030 0019             		move.b	#$30,$19(a0)
0001714E 117C 0004 0018             		move.b	#4,$18(a0)
00017154 317C 003C 0030             		move.w	#$3C,$30(a0)
0001715A 117C 0001 0034             		move.b	#1,$34(a0)
00017160 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017166                            
00017166                            Obj66_Action:				; XREF: Obj66_Index
00017166 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001716A 4A28 0001                  		tst.b	1(a0)
0001716E 6A00 0000                  		bpl.w	Obj66_Display
00017172 323C 0030                  		move.w	#$30,d1
00017176 3401                       		move.w	d1,d2
00017178 3602                       		move.w	d2,d3
0001717A 5243                       		addq.w	#1,d3
0001717C 3828 0008                  		move.w	8(a0),d4
00017180 6100 A326                  		bsr.w	SolidObject
00017184 0828 0005 0022             		btst	#5,$22(a0)
0001718A 6700 0000                  		beq.w	Obj66_Display
0001718E 43F8 D000                  		lea	($FFFFD000).w,a1
00017192 720E                       		moveq	#$E,d1
00017194 3029 0008                  		move.w	8(a1),d0
00017198 B068 0008                  		cmp.w	8(a0),d0
0001719C 6500                       		bcs.s	Obj66_GrabSonic
0001719E 7207                       		moveq	#7,d1
000171A0                            
000171A0                            Obj66_GrabSonic:
000171A0 B228 001A                  		cmp.b	$1A(a0),d1
000171A4 6600                       		bne.s	Obj66_Display
000171A6 1141 0032                  		move.b	d1,$32(a0)
000171AA 5828 0024                  		addq.b	#4,$24(a0)
000171AE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000171B4 137C 0015 001C             		move.b	#$15,$1C(a1)	; make Sonic use "bubble" animation
000171BA 337C 0800 0014             		move.w	#$800,$14(a1)
000171C0 337C 0000 0010             		move.w	#0,$10(a1)
000171C6 337C 0000 0012             		move.w	#0,$12(a1)
000171CC 08A8 0005 0022             		bclr	#5,$22(a0)
000171D2 08A9 0005 0022             		bclr	#5,$22(a1)
000171D8 08E9 0001 0022             		bset	#1,$22(a1)
000171DE 3429 0008                  		move.w	8(a1),d2
000171E2 3629 000C                  		move.w	$C(a1),d3
000171E6 6100 0000                  		bsr.w	Obj66_ChgPos
000171EA D569 0008                  		add.w	d2,8(a1)
000171EE D769 000C                  		add.w	d3,$C(a1)
000171F2 E0E9 0008                  		asr	8(a1)
000171F6 E0E9 000C                  		asr	$C(a1)
000171FA                            
000171FA                            Obj66_Display:				; XREF: Obj66_Index
000171FA 6000 9F84                  		bra.w	MarkObjGone
000171FE                            ; ===========================================================================
000171FE                            
000171FE                            Obj66_Release:				; XREF: Obj66_Index
000171FE 1028 001A                  		move.b	$1A(a0),d0
00017202 0C00 0004                  		cmpi.b	#4,d0
00017206 6700                       		beq.s	loc_151C8
00017208 0C00 0007                  		cmpi.b	#7,d0
0001720C 6600                       		bne.s	loc_151F8
0001720E                            
0001720E                            loc_151C8:
0001720E B028 0032                  		cmp.b	$32(a0),d0
00017212 6700                       		beq.s	loc_151F8
00017214 43F8 D000                  		lea	($FFFFD000).w,a1
00017218 337C 0000 0010             		move.w	#0,$10(a1)
0001721E 337C 0800 0012             		move.w	#$800,$12(a1)
00017224 0C00 0004                  		cmpi.b	#4,d0
00017228 6700                       		beq.s	loc_151F0
0001722A 337C 0800 0010             		move.w	#$800,$10(a1)
00017230 337C 0800 0012             		move.w	#$800,$12(a1)
00017236                            
00017236                            loc_151F0:
00017236 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001723A 5928 0024                  		subq.b	#4,$24(a0)
0001723E                            
0001723E                            loc_151F8:
0001723E 6100                       		bsr.s	Obj66_ChkSwitch
00017240 6100                       		bsr.s	Obj66_ChgPos
00017242 6000 9F3C                  		bra.w	MarkObjGone
00017246                            
00017246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017246                            
00017246                            
00017246                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017246 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001724A 7000                       		moveq	#0,d0
0001724C 1028 0038                  		move.b	$38(a0),d0
00017250 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017256 6700                       		beq.s	loc_15224	; if not, branch
00017258 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001725C 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001725E 4428 0034                  		neg.b	$34(a0)
00017262 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017268 6000                       		bra.s	Obj66_Animate
0001726A                            ; ===========================================================================
0001726A                            
0001726A                            loc_15224:
0001726A 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001726E                            
0001726E                            Obj66_Animate:
0001726E 5328 001E                  		subq.b	#1,$1E(a0)
00017272 6A00                       		bpl.s	locret_15246
00017274 117C 0007 001E             		move.b	#7,$1E(a0)
0001727A 1228 0034                  		move.b	$34(a0),d1
0001727E 1028 001A                  		move.b	$1A(a0),d0
00017282 D001                       		add.b	d1,d0
00017284 0200 000F                  		andi.b	#$F,d0
00017288 1140 001A                  		move.b	d0,$1A(a0)
0001728C                            
0001728C                            locret_15246:
0001728C 4E75                       		rts	
0001728E                            ; End of function Obj66_ChkSwitch
0001728E                            
0001728E                            
0001728E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001728E                            
0001728E                            
0001728E                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001728E 43F8 D000                  		lea	($FFFFD000).w,a1
00017292 7000                       		moveq	#0,d0
00017294 1028 001A                  		move.b	$1A(a0),d0
00017298 D040                       		add.w	d0,d0
0001729A 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001729E 101A                       		move.b	(a2)+,d0
000172A0 4880                       		ext.w	d0
000172A2 D068 0008                  		add.w	8(a0),d0
000172A6 3340 0008                  		move.w	d0,8(a1)
000172AA 101A                       		move.b	(a2)+,d0
000172AC 4880                       		ext.w	d0
000172AE D068 000C                  		add.w	$C(a0),d0
000172B2 3340 000C                  		move.w	d0,$C(a1)
000172B6 4E75                       		rts	
000172B8                            ; End of function Obj66_ChgPos
000172B8                            
000172B8                            ; ===========================================================================
000172B8 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000172BC E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000172C0 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000172C4 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000172C8 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000172CC 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000172D0 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000172D4 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000172D8                            ; ---------------------------------------------------------------------------
000172D8                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000172D8                            ; ---------------------------------------------------------------------------
000172D8                            Map_obj66:
000172D8                            	include "_maps\obj66.asm"
000172D8                            ; ---------------------------------------------------------------------------
000172D8                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000172D8                            ; ---------------------------------------------------------------------------
000172D8 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000172DC 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000172E0 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000172E4 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000172E8 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000172EC 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000172F0 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000172F4 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000172F8 0000                       		dc.w byte_154A4-Map_obj66
000172FA 06                         byte_152B4:	dc.b 6
000172FB E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00017300 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00017305 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001730A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001730F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00017314 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00017319 06                         byte_152D3:	dc.b 6
0001731A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001731F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00017324 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00017329 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001732E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00017333 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017338 06                         byte_152F2:	dc.b 6
00017339 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001733E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017343 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017348 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001734D 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017352 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017357 06                         byte_15311:	dc.b 6
00017358 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001735D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017362 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017367 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001736C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00017371 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017376 06                         byte_15330:	dc.b 6
00017377 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001737C 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00017381 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017386 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001738B 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00017390 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017395 06                         byte_1534F:	dc.b 6
00017396 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001739B 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000173A0 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000173A5 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000173AA 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000173AF 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000173B4 06                         byte_1536E:	dc.b 6
000173B5 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000173BA 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000173BF 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000173C4 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000173C9 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000173CE 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000173D3 06                         byte_1538D:	dc.b 6
000173D4 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000173D9 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000173DE F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000173E3 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000173E8 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000173ED 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000173F2 06                         byte_153AC:	dc.b 6
000173F3 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000173F8 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000173FD E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00017402 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00017407 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001740C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00017411 06                         byte_153CB:	dc.b 6
00017412 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00017417 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001741C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00017421 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00017426 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001742B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00017430 06                         byte_153EA:	dc.b 6
00017431 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00017436 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001743B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00017440 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017445 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001744A E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001744F 06                         byte_15409:	dc.b 6
00017450 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017455 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001745A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001745F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017464 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017469 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001746E 06                         byte_15428:	dc.b 6
0001746F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017474 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017479 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001747E C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017483 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00017488 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001748D 06                         byte_15447:	dc.b 6
0001748E D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017493 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00017498 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001749D CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000174A2 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000174A7 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000174AC 06                         byte_15466:	dc.b 6
000174AD E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000174B2 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000174B7 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000174BC D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000174C1 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000174C6 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000174CB 06                         byte_15485:	dc.b 6
000174CC E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000174D1 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000174D6 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000174DB DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000174E0 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000174E5 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000174EA 0C                         byte_154A4:	dc.b $C
000174EB C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000174F0 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000174F5 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000174FA C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000174FF D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00017504 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00017509 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001750E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00017513 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00017518 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001751D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00017522 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00017528 00                         		even
00017528 00                         		even
00017528                            
00017528                            ; ===========================================================================
00017528                            ; ---------------------------------------------------------------------------
00017528                            ; Object 67 - disc that	you run	around (SBZ)
00017528                            ; ---------------------------------------------------------------------------
00017528                            
00017528                            Obj67:					; XREF: Obj_Index
00017528 7000                       		moveq	#0,d0
0001752A 1028 0024                  		move.b	$24(a0),d0
0001752E 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00017532 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00017536                            ; ===========================================================================
00017536 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017538 0000                       		dc.w Obj67_Action-Obj67_Index
0001753A                            ; ===========================================================================
0001753A                            
0001753A                            Obj67_Main:				; XREF: Obj67_Index
0001753A 5428 0024                  		addq.b	#2,$24(a0)
0001753E 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017546 317C C344 0002             		move.w	#$C344,2(a0)
0001754C 117C 0004 0001             		move.b	#4,1(a0)
00017552 117C 0004 0018             		move.b	#4,$18(a0)
00017558 117C 0008 0019             		move.b	#8,$19(a0)
0001755E 3168 0008 0032             		move.w	8(a0),$32(a0)
00017564 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001756A 117C 0018 0034             		move.b	#$18,$34(a0)
00017570 117C 0048 0038             		move.b	#$48,$38(a0)
00017576 1228 0028                  		move.b	$28(a0),d1	; get object type
0001757A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001757E 6700                       		beq.s	loc_15546
00017580 117C 0010 0034             		move.b	#$10,$34(a0)
00017586 117C 0038 0038             		move.b	#$38,$38(a0)
0001758C                            
0001758C                            loc_15546:
0001758C 1228 0028                  		move.b	$28(a0),d1	; get object type
00017590 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017594 4881                       		ext.w	d1
00017596 E741                       		asl.w	#3,d1
00017598 3141 0036                  		move.w	d1,$36(a0)
0001759C 1028 0022                  		move.b	$22(a0),d0
000175A0 E418                       		ror.b	#2,d0
000175A2 0200 00C0                  		andi.b	#-$40,d0
000175A6 1140 0026                  		move.b	d0,$26(a0)
000175AA                            
000175AA                            Obj67_Action:				; XREF: Obj67_Index
000175AA 6100 0000                  		bsr.w	Obj67_MoveSonic
000175AE 6100 0000                  		bsr.w	Obj67_MoveSpot
000175B2 6000 0000                  		bra.w	Obj67_ChkDel
000175B6                            ; ===========================================================================
000175B6                            
000175B6                            Obj67_MoveSonic:			; XREF: Obj67_Action
000175B6 7400                       		moveq	#0,d2
000175B8 1428 0038                  		move.b	$38(a0),d2
000175BC 3602                       		move.w	d2,d3
000175BE D643                       		add.w	d3,d3
000175C0 43F8 D000                  		lea	($FFFFD000).w,a1
000175C4 3029 0008                  		move.w	8(a1),d0
000175C8 9068 0032                  		sub.w	$32(a0),d0
000175CC D042                       		add.w	d2,d0
000175CE B043                       		cmp.w	d3,d0
000175D0 6400                       		bcc.s	loc_155A8
000175D2 3229 000C                  		move.w	$C(a1),d1
000175D6 9268 0030                  		sub.w	$30(a0),d1
000175DA D242                       		add.w	d2,d1
000175DC B243                       		cmp.w	d3,d1
000175DE 6400                       		bcc.s	loc_155A8
000175E0 0829 0001 0022             		btst	#1,$22(a1)
000175E6 6700                       		beq.s	loc_155B8
000175E8 4228 003A                  		clr.b	$3A(a0)
000175EC 4E75                       		rts	
000175EE                            ; ===========================================================================
000175EE                            
000175EE                            loc_155A8:
000175EE 4A28 003A                  		tst.b	$3A(a0)
000175F2 6700                       		beq.s	locret_155B6
000175F4 4229 0038                  		clr.b	$38(a1)
000175F8 4228 003A                  		clr.b	$3A(a0)
000175FC                            
000175FC                            locret_155B6:
000175FC 4E75                       		rts	
000175FE                            ; ===========================================================================
000175FE                            
000175FE                            loc_155B8:
000175FE 4A28 003A                  		tst.b	$3A(a0)
00017602 6600                       		bne.s	loc_155E2
00017604 117C 0001 003A             		move.b	#1,$3A(a0)
0001760A 0829 0002 0022             		btst	#2,$22(a1)
00017610 6600                       		bne.s	loc_155D0
00017612 4229 001C                  		clr.b	$1C(a1)
00017616                            
00017616                            loc_155D0:
00017616 08A9 0005 0022             		bclr	#5,$22(a1)
0001761C 137C 0001 001D             		move.b	#1,$1D(a1)
00017622 137C 0001 0038             		move.b	#1,$38(a1)
00017628                            
00017628                            loc_155E2:
00017628 3029 0014                  		move.w	$14(a1),d0
0001762C 4A68 0036                  		tst.w	$36(a0)
00017630 6A00                       		bpl.s	loc_15608
00017632 0C40 FC00                  		cmpi.w	#-$400,d0
00017636 6F00                       		ble.s	loc_155FA
00017638 337C FC00 0014             		move.w	#-$400,$14(a1)
0001763E 4E75                       		rts	
00017640                            ; ===========================================================================
00017640                            
00017640                            loc_155FA:
00017640 0C40 F100                  		cmpi.w	#-$F00,d0
00017644 6C00                       		bge.s	locret_15606
00017646 337C F100 0014             		move.w	#-$F00,$14(a1)
0001764C                            
0001764C                            locret_15606:
0001764C 4E75                       		rts	
0001764E                            ; ===========================================================================
0001764E                            
0001764E                            loc_15608:
0001764E 0C40 0400                  		cmpi.w	#$400,d0
00017652 6C00                       		bge.s	loc_15616
00017654 337C 0400 0014             		move.w	#$400,$14(a1)
0001765A 4E75                       		rts	
0001765C                            ; ===========================================================================
0001765C                            
0001765C                            loc_15616:
0001765C 0C40 0F00                  		cmpi.w	#$F00,d0
00017660 6F00                       		ble.s	locret_15622
00017662 337C 0F00 0014             		move.w	#$F00,$14(a1)
00017668                            
00017668                            locret_15622:
00017668 4E75                       		rts	
0001766A                            ; ===========================================================================
0001766A                            
0001766A                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001766A 3028 0036                  		move.w	$36(a0),d0
0001766E D168 0026                  		add.w	d0,$26(a0)
00017672 1028 0026                  		move.b	$26(a0),d0
00017676 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001767C 3428 0030                  		move.w	$30(a0),d2
00017680 3628 0032                  		move.w	$32(a0),d3
00017684 7800                       		moveq	#0,d4
00017686 1828 0034                  		move.b	$34(a0),d4
0001768A E14C                       		lsl.w	#8,d4
0001768C 2A04                       		move.l	d4,d5
0001768E C9C0                       		muls.w	d0,d4
00017690 4844                       		swap	d4
00017692 CBC1                       		muls.w	d1,d5
00017694 4845                       		swap	d5
00017696 D842                       		add.w	d2,d4
00017698 DA43                       		add.w	d3,d5
0001769A 3144 000C                  		move.w	d4,$C(a0)
0001769E 3145 0008                  		move.w	d5,8(a0)
000176A2 4E75                       		rts	
000176A4                            ; ===========================================================================
000176A4                            
000176A4                            Obj67_ChkDel:				; XREF: Obj67_Action
000176A4 3028 0032                  		move.w	$32(a0),d0
000176A8 0240 FF80                  		andi.w	#-$80,d0
000176AC 3238 F700                  		move.w	($FFFFF700).w,d1
000176B0 0441 0080                  		subi.w	#$80,d1
000176B4 0241 FF80                  		andi.w	#-$80,d1
000176B8 9041                       		sub.w	d1,d0
000176BA 0C40 0280                  		cmpi.w	#$280,d0
000176BE 6200                       		bhi.s	Obj67_Delete
000176C0 4EF9 0000 F0CA             		jmp	DisplaySprite
000176C6                            ; ===========================================================================
000176C6                            
000176C6                            Obj67_Delete:
000176C6 4EF9 0000 F106             		jmp	DeleteObject
000176CC                            ; ===========================================================================
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            ; Sprite mappings - disc that you run around (SBZ)
000176CC                            ; (It's just a small blob that moves around in a circle. The disc itself is
000176CC                            ; part of the level tiles.)
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            Map_obj67:
000176CC                            	include "_maps\obj67.asm"
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            ; Sprite mappings - disc that you run around (SBZ)
000176CC                            ; (It's just a small blob that moves around in a circle. The disc itself is
000176CC                            ; part of the level tiles.)
000176CC                            ; ---------------------------------------------------------------------------
000176CC 0000                       		dc.w byte_15688-Map_obj67
000176CE 01                         byte_15688:	dc.b 1
000176CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000176D4                            		even
000176D4                            		even
000176D4                            
000176D4                            ; ===========================================================================
000176D4                            ; ---------------------------------------------------------------------------
000176D4                            ; Object 68 - conveyor belts (SBZ)
000176D4                            ; ---------------------------------------------------------------------------
000176D4                            
000176D4                            Obj68:					; XREF: Obj_Index
000176D4 7000                       		moveq	#0,d0
000176D6 1028 0024                  		move.b	$24(a0),d0
000176DA 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000176DE 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000176E2                            ; ===========================================================================
000176E2 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000176E4 0000                       		dc.w Obj68_Action-Obj68_Index
000176E6                            ; ===========================================================================
000176E6                            
000176E6                            Obj68_Main:				; XREF: Obj68_Index
000176E6 5428 0024                  		addq.b	#2,$24(a0)
000176EA 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000176F0 1228 0028                  		move.b	$28(a0),d1	; get object type
000176F4 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000176F8 6700                       		beq.s	loc_156BA	; if zero, branch
000176FA 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017700                            
00017700                            loc_156BA:
00017700 1228 0028                  		move.b	$28(a0),d1	; get object type
00017704 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017708 4881                       		ext.w	d1
0001770A E841                       		asr.w	#4,d1
0001770C 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017710                            
00017710                            Obj68_Action:				; XREF: Obj68_Index
00017710 6100                       		bsr.s	Obj68_MoveSonic
00017712 3028 0008                  		move.w	8(a0),d0
00017716 0240 FF80                  		andi.w	#$FF80,d0
0001771A 3238 F700                  		move.w	($FFFFF700).w,d1
0001771E 0441 0080                  		subi.w	#$80,d1
00017722 0241 FF80                  		andi.w	#$FF80,d1
00017726 9041                       		sub.w	d1,d0
00017728 0C40 0280                  		cmpi.w	#$280,d0
0001772C 6200                       		bhi.s	Obj68_Delete
0001772E 4E75                       		rts	
00017730                            ; ===========================================================================
00017730                            
00017730                            Obj68_Delete:
00017730 4EF9 0000 F106             		jmp	DeleteObject
00017736                            ; ===========================================================================
00017736                            
00017736                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017736 7400                       		moveq	#0,d2
00017738 1428 0038                  		move.b	$38(a0),d2
0001773C 3602                       		move.w	d2,d3
0001773E D643                       		add.w	d3,d3
00017740 43F8 D000                  		lea	($FFFFD000).w,a1
00017744 3029 0008                  		move.w	8(a1),d0
00017748 9068 0008                  		sub.w	8(a0),d0
0001774C D042                       		add.w	d2,d0
0001774E B043                       		cmp.w	d3,d0
00017750 6400                       		bcc.s	locret_1572E
00017752 3229 000C                  		move.w	$C(a1),d1
00017756 9268 000C                  		sub.w	$C(a0),d1
0001775A 0641 0030                  		addi.w	#$30,d1
0001775E 0C41 0030                  		cmpi.w	#$30,d1
00017762 6400                       		bcc.s	locret_1572E
00017764 0829 0001 0022             		btst	#1,$22(a1)
0001776A 6600                       		bne.s	locret_1572E
0001776C 3028 0036                  		move.w	$36(a0),d0
00017770 D169 0008                  		add.w	d0,8(a1)
00017774                            
00017774                            locret_1572E:
00017774 4E75                       		rts	
00017776                            
00017776                            ; ===========================================================================
00017776                            ; ---------------------------------------------------------------------------
00017776                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017776                            ; ---------------------------------------------------------------------------
00017776                            
00017776                            Obj69:					; XREF: Obj_Index
00017776 7000                       		moveq	#0,d0
00017778 1028 0024                  		move.b	$24(a0),d0
0001777C 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017780 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017784                            ; ===========================================================================
00017784 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017786 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017788 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001778A                            ; ===========================================================================
0001778A                            
0001778A                            Obj69_Main:				; XREF: Obj69_Index
0001778A 5428 0024                  		addq.b	#2,$24(a0)
0001778E 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017796 317C 4492 0002             		move.w	#$4492,2(a0)
0001779C 0028 0004 0001             		ori.b	#4,1(a0)
000177A2 117C 0080 0019             		move.b	#$80,$19(a0)
000177A8 7000                       		moveq	#0,d0
000177AA 1028 0028                  		move.b	$28(a0),d0
000177AE 0240 000F                  		andi.w	#$F,d0
000177B2 C0FC 003C                  		mulu.w	#$3C,d0
000177B6 3140 0032                  		move.w	d0,$32(a0)
000177BA 4A28 0028                  		tst.b	$28(a0)
000177BE 6A00                       		bpl.s	Obj69_Trapdoor
000177C0 5428 0024                  		addq.b	#2,$24(a0)
000177C4 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000177CC 317C 04DF 0002             		move.w	#$4DF,2(a0)
000177D2 117C 0010 0019             		move.b	#$10,$19(a0)
000177D8 117C 0002 001C             		move.b	#2,$1C(a0)
000177DE 7000                       		moveq	#0,d0
000177E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000177E4 3200                       		move.w	d0,d1
000177E6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000177EA C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000177EE 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000177F2 3140 0032                  		move.w	d0,$32(a0)
000177F6 0241 0070                  		andi.w	#$70,d1
000177FA 0641 0010                  		addi.w	#$10,d1
000177FE E549                       		lsl.w	#2,d1
00017800 5341                       		subq.w	#1,d1
00017802 3141 0036                  		move.w	d1,$36(a0)
00017806 6000                       		bra.s	Obj69_Spinner
00017808                            ; ===========================================================================
00017808                            
00017808                            Obj69_Trapdoor:				; XREF: Obj69_Index
00017808 5368 0030                  		subq.w	#1,$30(a0)
0001780C 6A00                       		bpl.s	Obj69_Animate
0001780E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017814 0868 0000 001C             		bchg	#0,$1C(a0)
0001781A 4A28 0001                  		tst.b	1(a0)
0001781E 6A00                       		bpl.s	Obj69_Animate
00017820 303C 00BB                  		move.w	#$BB,d0
00017824 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
0001782A                            
0001782A                            Obj69_Animate:
0001782A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017830 4EB9 0000 C20C             		jsr	AnimateSprite
00017836 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001783A 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001783C 323C 004B                  		move.w	#$4B,d1
00017840 343C 000C                  		move.w	#$C,d2
00017844 3602                       		move.w	d2,d3
00017846 5243                       		addq.w	#1,d3
00017848 3828 0008                  		move.w	8(a0),d4
0001784C 6100 9C5A                  		bsr.w	SolidObject
00017850 6000 992E                  		bra.w	MarkObjGone
00017854                            ; ===========================================================================
00017854                            
00017854                            Obj69_NotSolid:
00017854 0828 0003 0022             		btst	#3,$22(a0)
0001785A 6700                       		beq.s	Obj69_Display
0001785C 43F8 D000                  		lea	($FFFFD000).w,a1
00017860 08A9 0003 0022             		bclr	#3,$22(a1)
00017866 08A8 0003 0022             		bclr	#3,$22(a0)
0001786C 4228 0025                  		clr.b	$25(a0)
00017870                            
00017870                            Obj69_Display:
00017870 6000 990E                  		bra.w	MarkObjGone
00017874                            ; ===========================================================================
00017874                            
00017874                            Obj69_Spinner:				; XREF: Obj69_Index
00017874 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017878 C068 0036                  		and.w	$36(a0),d0
0001787C 6600                       		bne.s	Obj69_Delay
0001787E 117C 0001 0034             		move.b	#1,$34(a0)
00017884                            
00017884                            Obj69_Delay:
00017884 4A28 0034                  		tst.b	$34(a0)
00017888 6700                       		beq.s	Obj69_Animate2
0001788A 5368 0030                  		subq.w	#1,$30(a0)
0001788E 6A00                       		bpl.s	Obj69_Animate2
00017890 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017896 4228 0034                  		clr.b	$34(a0)
0001789A 0868 0000 001C             		bchg	#0,$1C(a0)
000178A0                            
000178A0                            Obj69_Animate2:
000178A0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000178A6 4EB9 0000 C20C             		jsr	AnimateSprite
000178AC 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000178B0 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000178B2 323C 001B                  		move.w	#$1B,d1
000178B6 343C 0007                  		move.w	#7,d2
000178BA 3602                       		move.w	d2,d3
000178BC 5243                       		addq.w	#1,d3
000178BE 3828 0008                  		move.w	8(a0),d4
000178C2 6100 9BE4                  		bsr.w	SolidObject
000178C6 6000 98B8                  		bra.w	MarkObjGone
000178CA                            ; ===========================================================================
000178CA                            
000178CA                            Obj69_NotSolid2:
000178CA 0828 0003 0022             		btst	#3,$22(a0)
000178D0 6700                       		beq.s	Obj69_Display2
000178D2 43F8 D000                  		lea	($FFFFD000).w,a1
000178D6 08A9 0003 0022             		bclr	#3,$22(a1)
000178DC 08A8 0003 0022             		bclr	#3,$22(a0)
000178E2 4228 0025                  		clr.b	$25(a0)
000178E6                            
000178E6                            Obj69_Display2:
000178E6 6000 9898                  		bra.w	MarkObjGone
000178EA                            ; ===========================================================================
000178EA                            Ani_obj69:
000178EA                            	include "_anim\obj69.asm"
000178EA                            ; ---------------------------------------------------------------------------
000178EA                            ; Animation script - trapdoor (SBZ)
000178EA                            ; ---------------------------------------------------------------------------
000178EA 0000                       		dc.w byte_158AC-Ani_obj69
000178EC 0000                       		dc.w byte_158B2-Ani_obj69
000178EE 0000                       		dc.w byte_158B8-Ani_obj69
000178F0 0000                       		dc.w byte_158CC-Ani_obj69
000178F2 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000178F8 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000178FE 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001790B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017912 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001791F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017926                            		even
00017926                            		even
00017926                            
00017926                            ; ---------------------------------------------------------------------------
00017926                            ; Sprite mappings - trapdoor (SBZ)
00017926                            ; ---------------------------------------------------------------------------
00017926                            Map_obj69:
00017926                            	include "_maps\obj69.asm"
00017926                            ; ---------------------------------------------------------------------------
00017926                            ; Sprite mappings - trapdoor (SBZ)
00017926                            ; ---------------------------------------------------------------------------
00017926 0000                       		dc.w byte_158E6-Map_obj69
00017928 0000                       		dc.w byte_158FB-Map_obj69
0001792A 0000                       		dc.w byte_15924-Map_obj69
0001792C 04                         byte_158E6:	dc.b 4
0001792D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017932 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017937 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001793C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017941 08                         byte_158FB:	dc.b 8
00017942 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017947 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001794C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00017951 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017956 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001795B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00017960 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017965 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001796A 04                         byte_15924:	dc.b 4
0001796B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017970 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017975 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001797A 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017980 00                         		even
00017980 00                         		even
00017980                            
00017980                            ; ---------------------------------------------------------------------------
00017980                            ; Sprite mappings - spinning platforms (SBZ)
00017980                            ; ---------------------------------------------------------------------------
00017980                            Map_obj69a:
00017980                            	include "_maps\obj69a.asm"
00017980                            ; ---------------------------------------------------------------------------
00017980                            ; Sprite mappings - spinning platforms (SBZ)
00017980                            ; ---------------------------------------------------------------------------
00017980 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017984 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017988 0000                       		dc.w byte_15970-Map_obj69a
0001798A 02                         byte_15944:	dc.b 2
0001798B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017990 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017995 02                         byte_1594F:	dc.b 2
00017996 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001799B 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000179A0 02                         byte_1595A:	dc.b 2
000179A1 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000179A6 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000179AB 02                         byte_15965:	dc.b 2
000179AC F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000179B1 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000179B6 02                         byte_15970:	dc.b 2
000179B7 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000179BC 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000179C2 00                         		even
000179C2 00                         		even
000179C2                            
000179C2                            ; ===========================================================================
000179C2                            ; ---------------------------------------------------------------------------
000179C2                            ; Object 6A - ground saws and pizza cutters (SBZ)
000179C2                            ; ---------------------------------------------------------------------------
000179C2                            
000179C2                            Obj6A:					; XREF: Obj_Index
000179C2 7000                       		moveq	#0,d0
000179C4 1028 0024                  		move.b	$24(a0),d0
000179C8 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000179CC 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000179D0                            ; ===========================================================================
000179D0 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000179D2 0000                       		dc.w Obj6A_Action-Obj6A_Index
000179D4                            ; ===========================================================================
000179D4                            
000179D4                            Obj6A_Main:				; XREF: Obj6A_Index
000179D4 5428 0024                  		addq.b	#2,$24(a0)
000179D8 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000179E0 317C 43B5 0002             		move.w	#$43B5,2(a0)
000179E6 117C 0004 0001             		move.b	#4,1(a0)
000179EC 117C 0004 0018             		move.b	#4,$18(a0)
000179F2 117C 0020 0019             		move.b	#$20,$19(a0)
000179F8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000179FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017A04 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017A0A 6400                       		bcc.s	Obj6A_Action
00017A0C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017A12                            
00017A12                            Obj6A_Action:				; XREF: Obj6A_Index
00017A12 7000                       		moveq	#0,d0
00017A14 1028 0028                  		move.b	$28(a0),d0
00017A18 0240 0007                  		andi.w	#7,d0
00017A1C D040                       		add.w	d0,d0
00017A1E 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017A22 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017A26 3028 003A                  		move.w	$3A(a0),d0
00017A2A 0240 FF80                  		andi.w	#$FF80,d0
00017A2E 3238 F700                  		move.w	($FFFFF700).w,d1
00017A32 0441 0080                  		subi.w	#$80,d1
00017A36 0241 FF80                  		andi.w	#$FF80,d1
00017A3A 9041                       		sub.w	d1,d0
00017A3C 0C40 0280                  		cmpi.w	#$280,d0
00017A40 6200                       		bhi.s	Obj6A_Delete
00017A42 4EF9 0000 F0CA             		jmp	DisplaySprite
00017A48                            ; ===========================================================================
00017A48                            
00017A48                            Obj6A_Delete:
00017A48 4EF9 0000 F106             		jmp	DeleteObject
00017A4E                            ; ===========================================================================
00017A4E 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017A52 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017A56 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017A58                            ; ===========================================================================
00017A58                            
00017A58                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017A58 4E75                       		rts	
00017A5A                            ; ===========================================================================
00017A5A                            
00017A5A                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017A5A 323C 0060                  		move.w	#$60,d1
00017A5E 7000                       		moveq	#0,d0
00017A60 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017A64 0828 0000 0022             		btst	#0,$22(a0)
00017A6A 6700                       		beq.s	Obj6A_Animate01
00017A6C 4440                       		neg.w	d0
00017A6E D041                       		add.w	d1,d0
00017A70                            
00017A70                            Obj6A_Animate01:
00017A70 3228 003A                  		move.w	$3A(a0),d1
00017A74 9240                       		sub.w	d0,d1
00017A76 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017A7A 5328 001E                  		subq.b	#1,$1E(a0)
00017A7E 6A00                       		bpl.s	loc_15A46
00017A80 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017A86 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017A8C                            
00017A8C                            loc_15A46:
00017A8C 4A28 0001                  		tst.b	1(a0)
00017A90 6A00                       		bpl.s	locret_15A60
00017A92 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A96 0240 000F                  		andi.w	#$F,d0
00017A9A 6600                       		bne.s	locret_15A60
00017A9C 303C 00B0                  		move.w	#$B0,d0
00017AA0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017AA6                            
00017AA6                            locret_15A60:
00017AA6 4E75                       		rts	
00017AA8                            ; ===========================================================================
00017AA8                            
00017AA8                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017AA8 323C 0030                  		move.w	#$30,d1
00017AAC 7000                       		moveq	#0,d0
00017AAE 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017AB2 0828 0000 0022             		btst	#0,$22(a0)
00017AB8 6700                       		beq.s	Obj6A_Animate02
00017ABA 4440                       		neg.w	d0
00017ABC 0640 0080                  		addi.w	#$80,d0
00017AC0                            
00017AC0                            Obj6A_Animate02:
00017AC0 3228 0038                  		move.w	$38(a0),d1
00017AC4 9240                       		sub.w	d0,d1
00017AC6 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017ACA 5328 001E                  		subq.b	#1,$1E(a0)
00017ACE 6A00                       		bpl.s	loc_15A96
00017AD0 117C 0002 001E             		move.b	#2,$1E(a0)
00017AD6 0868 0000 001A             		bchg	#0,$1A(a0)
00017ADC                            
00017ADC                            loc_15A96:
00017ADC 4A28 0001                  		tst.b	1(a0)
00017AE0 6A00                       		bpl.s	locret_15AB0
00017AE2 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017AE6 0C00 0018                  		cmpi.b	#$18,d0
00017AEA 6600                       		bne.s	locret_15AB0
00017AEC 303C 00B0                  		move.w	#$B0,d0
00017AF0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017AF6                            
00017AF6                            locret_15AB0:
00017AF6 4E75                       		rts	
00017AF8                            ; ===========================================================================
00017AF8                            
00017AF8                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017AF8 4A28 003D                  		tst.b	$3D(a0)
00017AFC 6600                       		bne.s	Obj6A_Animate03
00017AFE 3038 D008                  		move.w	($FFFFD008).w,d0
00017B02 0440 00C0                  		subi.w	#$C0,d0
00017B06 6500                       		bcs.s	loc_15B02
00017B08 9068 0008                  		sub.w	8(a0),d0
00017B0C 6500                       		bcs.s	loc_15B02
00017B0E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B12 0440 0080                  		subi.w	#$80,d0
00017B16 B068 000C                  		cmp.w	$C(a0),d0
00017B1A 6400                       		bcc.s	locret_15B04
00017B1C 0640 0100                  		addi.w	#$100,d0
00017B20 B068 000C                  		cmp.w	$C(a0),d0
00017B24 6500                       		bcs.s	locret_15B04
00017B26 117C 0001 003D             		move.b	#1,$3D(a0)
00017B2C 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017B32 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B38 117C 0002 001A             		move.b	#2,$1A(a0)
00017B3E 303C 00B0                  		move.w	#$B0,d0
00017B42 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017B48                            
00017B48                            loc_15B02:
00017B48 588F                       		addq.l	#4,sp
00017B4A                            
00017B4A                            locret_15B04:
00017B4A 4E75                       		rts	
00017B4C                            ; ===========================================================================
00017B4C                            
00017B4C                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017B4C 4EB9 0000 F0B0             		jsr	SpeedToPos
00017B52 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B58 5328 001E                  		subq.b	#1,$1E(a0)
00017B5C 6A00                       		bpl.s	locret_15B24
00017B5E 117C 0002 001E             		move.b	#2,$1E(a0)
00017B64 0868 0000 001A             		bchg	#0,$1A(a0)
00017B6A                            
00017B6A                            locret_15B24:
00017B6A 4E75                       		rts	
00017B6C                            ; ===========================================================================
00017B6C                            
00017B6C                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017B6C 4A28 003D                  		tst.b	$3D(a0)
00017B70 6600                       		bne.s	Obj6A_Animate04
00017B72 3038 D008                  		move.w	($FFFFD008).w,d0
00017B76 0640 00E0                  		addi.w	#$E0,d0
00017B7A 9068 0008                  		sub.w	8(a0),d0
00017B7E 6400                       		bcc.s	loc_15B74
00017B80 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B84 0440 0080                  		subi.w	#$80,d0
00017B88 B068 000C                  		cmp.w	$C(a0),d0
00017B8C 6400                       		bcc.s	locret_15B76
00017B8E 0640 0100                  		addi.w	#$100,d0
00017B92 B068 000C                  		cmp.w	$C(a0),d0
00017B96 6500                       		bcs.s	locret_15B76
00017B98 117C 0001 003D             		move.b	#1,$3D(a0)
00017B9E 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017BA4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017BAA 117C 0002 001A             		move.b	#2,$1A(a0)
00017BB0 303C 00B0                  		move.w	#$B0,d0
00017BB4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017BBA                            
00017BBA                            loc_15B74:
00017BBA 588F                       		addq.l	#4,sp
00017BBC                            
00017BBC                            locret_15B76:
00017BBC 4E75                       		rts	
00017BBE                            ; ===========================================================================
00017BBE                            
00017BBE                            Obj6A_Animate04:
00017BBE 4EB9 0000 F0B0             		jsr	SpeedToPos
00017BC4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017BCA 5328 001E                  		subq.b	#1,$1E(a0)
00017BCE 6A00                       		bpl.s	locret_15B96
00017BD0 117C 0002 001E             		move.b	#2,$1E(a0)
00017BD6 0868 0000 001A             		bchg	#0,$1A(a0)
00017BDC                            
00017BDC                            locret_15B96:
00017BDC 4E75                       		rts	
00017BDE                            ; ===========================================================================
00017BDE                            ; ---------------------------------------------------------------------------
00017BDE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BDE                            ; ---------------------------------------------------------------------------
00017BDE                            Map_obj6A:
00017BDE                            	include "_maps\obj6A.asm"
00017BDE                            ; ---------------------------------------------------------------------------
00017BDE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BDE                            ; ---------------------------------------------------------------------------
00017BDE 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017BE2 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017BE6 07                         byte_15BA0:	dc.b 7
00017BE7 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017BEC D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017BF1 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017BF6 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017BFB E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C00 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C05 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C0A 07                         byte_15BC4:	dc.b 7
00017C0B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017C10 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017C15 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017C1A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C1F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C24 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C29 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C2E 04                         byte_15BE8:	dc.b 4
00017C2F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017C34 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C39 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C3E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C43 04                         byte_15BFD:	dc.b 4
00017C44 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C49 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C4E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C53 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C58                            		even
00017C58                            		even
00017C58                            
00017C58                            ; ===========================================================================
00017C58                            ; ---------------------------------------------------------------------------
00017C58                            ; Object 6B - stomper (SBZ)
00017C58                            ; ---------------------------------------------------------------------------
00017C58                            
00017C58                            Obj6B:					; XREF: Obj_Index
00017C58 7000                       		moveq	#0,d0
00017C5A 1028 0024                  		move.b	$24(a0),d0
00017C5E 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017C62 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017C66                            ; ===========================================================================
00017C66 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017C68 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017C6A                            
00017C6A 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017C6E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017C72 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017C76 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017C7A 8040 0005                  		dc.b  $80, $40,	  0,   5
00017C7E                            ; ===========================================================================
00017C7E                            
00017C7E                            Obj6B_Main:				; XREF: Obj6B_Index
00017C7E 5428 0024                  		addq.b	#2,$24(a0)
00017C82 7000                       		moveq	#0,d0
00017C84 1028 0028                  		move.b	$28(a0),d0
00017C88 E448                       		lsr.w	#2,d0
00017C8A 0240 001C                  		andi.w	#$1C,d0
00017C8E 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017C92 115B 0019                  		move.b	(a3)+,$19(a0)
00017C96 115B 0016                  		move.b	(a3)+,$16(a0)
00017C9A E448                       		lsr.w	#2,d0
00017C9C 1140 001A                  		move.b	d0,$1A(a0)
00017CA0 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017CA8 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017CAE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017CB4 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017CB6 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017CBC 6700                       		beq.s	Obj6B_SBZ3
00017CBE                            
00017CBE                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017CBE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CC2 7000                       		moveq	#0,d0
00017CC4 1028 0023                  		move.b	$23(a0),d0
00017CC8 6700                       		beq.s	Obj6B_Delete
00017CCA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017CD0                            
00017CD0                            Obj6B_Delete:
00017CD0 4EF9 0000 F106             		jmp	DeleteObject
00017CD6                            ; ===========================================================================
00017CD6                            
00017CD6                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017CD6 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017CDC 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017CE2 6600                       		bne.s	Obj6B_SBZ12
00017CE4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CE8 7000                       		moveq	#0,d0
00017CEA 1028 0023                  		move.b	$23(a0),d0
00017CEE 6700                       		beq.s	Obj6B_SBZ12
00017CF0 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017CF6 6700                       		beq.s	Obj6B_SBZ12
00017CF8 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017CFC 60C0                       		bra.s	Obj6B_ChkGone
00017CFE                            ; ===========================================================================
00017CFE                            
00017CFE                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017CFE 0028 0004 0001             		ori.b	#4,1(a0)
00017D04 117C 0004 0018             		move.b	#4,$18(a0)
00017D0A 3168 0008 0034             		move.w	8(a0),$34(a0)
00017D10 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017D16 7000                       		moveq	#0,d0
00017D18 101B                       		move.b	(a3)+,d0
00017D1A 3140 003C                  		move.w	d0,$3C(a0)
00017D1E 7000                       		moveq	#0,d0
00017D20 1028 0028                  		move.b	$28(a0),d0
00017D24 6A00                       		bpl.s	Obj6B_Action
00017D26 0200 000F                  		andi.b	#$F,d0
00017D2A 1140 003E                  		move.b	d0,$3E(a0)
00017D2E 1153 0028                  		move.b	(a3),$28(a0)
00017D32 0C13 0005                  		cmpi.b	#5,(a3)
00017D36 6600                       		bne.s	Obj6B_ChkGone2
00017D38 08E8 0004 0001             		bset	#4,1(a0)
00017D3E                            
00017D3E                            Obj6B_ChkGone2:
00017D3E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D42 7000                       		moveq	#0,d0
00017D44 1028 0023                  		move.b	$23(a0),d0
00017D48 6700                       		beq.s	Obj6B_Action
00017D4A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D50                            
00017D50                            Obj6B_Action:				; XREF: Obj6B_Index
00017D50 3F28 0008                  		move.w	8(a0),-(sp)
00017D54 7000                       		moveq	#0,d0
00017D56 1028 0028                  		move.b	$28(a0),d0
00017D5A 0240 000F                  		andi.w	#$F,d0
00017D5E D040                       		add.w	d0,d0
00017D60 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017D64 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017D68 381F                       		move.w	(sp)+,d4
00017D6A 4A28 0001                  		tst.b	1(a0)
00017D6E 6A00                       		bpl.s	Obj6B_ChkDel
00017D70 7200                       		moveq	#0,d1
00017D72 1228 0019                  		move.b	$19(a0),d1
00017D76 0641 000B                  		addi.w	#$B,d1
00017D7A 7400                       		moveq	#0,d2
00017D7C 1428 0016                  		move.b	$16(a0),d2
00017D80 3602                       		move.w	d2,d3
00017D82 5243                       		addq.w	#1,d3
00017D84 6100 9722                  		bsr.w	SolidObject
00017D88                            
00017D88                            Obj6B_ChkDel:
00017D88 3028 0034                  		move.w	$34(a0),d0
00017D8C 0240 FF80                  		andi.w	#$FF80,d0
00017D90 3238 F700                  		move.w	($FFFFF700).w,d1
00017D94 0441 0080                  		subi.w	#$80,d1
00017D98 0241 FF80                  		andi.w	#$FF80,d1
00017D9C 9041                       		sub.w	d1,d0
00017D9E 0C40 0280                  		cmpi.w	#$280,d0
00017DA2 6200                       		bhi.s	loc_15D64
00017DA4 4EF9 0000 F0CA             		jmp	DisplaySprite
00017DAA                            ; ===========================================================================
00017DAA                            
00017DAA                            loc_15D64:
00017DAA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017DB0 6600                       		bne.s	Obj6B_Delete2
00017DB2 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017DB6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017DBA 7000                       		moveq	#0,d0
00017DBC 1028 0023                  		move.b	$23(a0),d0
00017DC0 6700                       		beq.s	Obj6B_Delete2
00017DC2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017DC8                            
00017DC8                            Obj6B_Delete2:
00017DC8 4EF9 0000 F106             		jmp	DeleteObject
00017DCE                            ; ===========================================================================
00017DCE 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017DD2 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017DD6 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017DDA                            ; ===========================================================================
00017DDA                            
00017DDA                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017DDA 4E75                       		rts	
00017DDC                            ; ===========================================================================
00017DDC                            
00017DDC                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017DDC 4A28 0038                  		tst.b	$38(a0)
00017DE0 6600                       		bne.s	loc_15DB4
00017DE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017DE6 7000                       		moveq	#0,d0
00017DE8 1028 003E                  		move.b	$3E(a0),d0
00017DEC 0832 0000 0000             		btst	#0,(a2,d0.w)
00017DF2 6700                       		beq.s	loc_15DC2
00017DF4 117C 0001 0038             		move.b	#1,$38(a0)
00017DFA                            
00017DFA                            loc_15DB4:
00017DFA 3028 003C                  		move.w	$3C(a0),d0
00017DFE B068 003A                  		cmp.w	$3A(a0),d0
00017E02 6700                       		beq.s	loc_15DE0
00017E04 5468 003A                  		addq.w	#2,$3A(a0)
00017E08                            
00017E08                            loc_15DC2:
00017E08 3028 003A                  		move.w	$3A(a0),d0
00017E0C 0828 0000 0022             		btst	#0,$22(a0)
00017E12 6700                       		beq.s	loc_15DD4
00017E14 4440                       		neg.w	d0
00017E16 0640 0080                  		addi.w	#$80,d0
00017E1A                            
00017E1A                            loc_15DD4:
00017E1A 3228 0034                  		move.w	$34(a0),d1
00017E1E 9240                       		sub.w	d0,d1
00017E20 3141 0008                  		move.w	d1,8(a0)
00017E24 4E75                       		rts	
00017E26                            ; ===========================================================================
00017E26                            
00017E26                            loc_15DE0:
00017E26 5228 0028                  		addq.b	#1,$28(a0)
00017E2A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017E30 4228 0038                  		clr.b	$38(a0)
00017E34 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E38 7000                       		moveq	#0,d0
00017E3A 1028 0023                  		move.b	$23(a0),d0
00017E3E 67C8                       		beq.s	loc_15DC2
00017E40 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017E46 60C0                       		bra.s	loc_15DC2
00017E48                            ; ===========================================================================
00017E48                            
00017E48                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017E48 4A28 0038                  		tst.b	$38(a0)
00017E4C 6600                       		bne.s	loc_15E14
00017E4E 5368 0036                  		subq.w	#1,$36(a0)
00017E52 6600                       		bne.s	loc_15E1E
00017E54 117C 0001 0038             		move.b	#1,$38(a0)
00017E5A                            
00017E5A                            loc_15E14:
00017E5A 4A68 003A                  		tst.w	$3A(a0)
00017E5E 6700                       		beq.s	loc_15E3C
00017E60 5568 003A                  		subq.w	#2,$3A(a0)
00017E64                            
00017E64                            loc_15E1E:
00017E64 3028 003A                  		move.w	$3A(a0),d0
00017E68 0828 0000 0022             		btst	#0,$22(a0)
00017E6E 6700                       		beq.s	loc_15E30
00017E70 4440                       		neg.w	d0
00017E72 0640 0080                  		addi.w	#$80,d0
00017E76                            
00017E76                            loc_15E30:
00017E76 3228 0034                  		move.w	$34(a0),d1
00017E7A 9240                       		sub.w	d0,d1
00017E7C 3141 0008                  		move.w	d1,8(a0)
00017E80 4E75                       		rts	
00017E82                            ; ===========================================================================
00017E82                            
00017E82                            loc_15E3C:
00017E82 5328 0028                  		subq.b	#1,$28(a0)
00017E86 4228 0038                  		clr.b	$38(a0)
00017E8A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E8E 7000                       		moveq	#0,d0
00017E90 1028 0023                  		move.b	$23(a0),d0
00017E94 67CE                       		beq.s	loc_15E1E
00017E96 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017E9C 60C6                       		bra.s	loc_15E1E
00017E9E                            ; ===========================================================================
00017E9E                            
00017E9E                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017E9E 4A28 0038                  		tst.b	$38(a0)
00017EA2 6600                       		bne.s	loc_15E7C
00017EA4 4A68 003A                  		tst.w	$3A(a0)
00017EA8 6700                       		beq.s	loc_15E6A
00017EAA 5368 003A                  		subq.w	#1,$3A(a0)
00017EAE 6000                       		bra.s	loc_15E8E
00017EB0                            ; ===========================================================================
00017EB0                            
00017EB0                            loc_15E6A:
00017EB0 5368 0036                  		subq.w	#1,$36(a0)
00017EB4 6A00                       		bpl.s	loc_15E8E
00017EB6 317C 003C 0036             		move.w	#$3C,$36(a0)
00017EBC 117C 0001 0038             		move.b	#1,$38(a0)
00017EC2                            
00017EC2                            loc_15E7C:
00017EC2 5068 003A                  		addq.w	#8,$3A(a0)
00017EC6 3028 003A                  		move.w	$3A(a0),d0
00017ECA B068 003C                  		cmp.w	$3C(a0),d0
00017ECE 6600                       		bne.s	loc_15E8E
00017ED0 4228 0038                  		clr.b	$38(a0)
00017ED4                            
00017ED4                            loc_15E8E:
00017ED4 3028 003A                  		move.w	$3A(a0),d0
00017ED8 0828 0000 0022             		btst	#0,$22(a0)
00017EDE 6700                       		beq.s	loc_15EA0
00017EE0 4440                       		neg.w	d0
00017EE2 0640 0038                  		addi.w	#$38,d0
00017EE6                            
00017EE6                            loc_15EA0:
00017EE6 3228 0030                  		move.w	$30(a0),d1
00017EEA D240                       		add.w	d0,d1
00017EEC 3141 000C                  		move.w	d1,$C(a0)
00017EF0 4E75                       		rts	
00017EF2                            ; ===========================================================================
00017EF2                            
00017EF2                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017EF2 4A28 0038                  		tst.b	$38(a0)
00017EF6 6600                       		bne.s	loc_15ED0
00017EF8 4A68 003A                  		tst.w	$3A(a0)
00017EFC 6700                       		beq.s	loc_15EBE
00017EFE 5168 003A                  		subq.w	#8,$3A(a0)
00017F02 6000                       		bra.s	loc_15EF0
00017F04                            ; ===========================================================================
00017F04                            
00017F04                            loc_15EBE:
00017F04 5368 0036                  		subq.w	#1,$36(a0)
00017F08 6A00                       		bpl.s	loc_15EF0
00017F0A 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F10 117C 0001 0038             		move.b	#1,$38(a0)
00017F16                            
00017F16                            loc_15ED0:
00017F16 3028 003A                  		move.w	$3A(a0),d0
00017F1A B068 003C                  		cmp.w	$3C(a0),d0
00017F1E 6700                       		beq.s	loc_15EE0
00017F20 5068 003A                  		addq.w	#8,$3A(a0)
00017F24 6000                       		bra.s	loc_15EF0
00017F26                            ; ===========================================================================
00017F26                            
00017F26                            loc_15EE0:
00017F26 5368 0036                  		subq.w	#1,$36(a0)
00017F2A 6A00                       		bpl.s	loc_15EF0
00017F2C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F32 4228 0038                  		clr.b	$38(a0)
00017F36                            
00017F36                            loc_15EF0:
00017F36 3028 003A                  		move.w	$3A(a0),d0
00017F3A 0828 0000 0022             		btst	#0,$22(a0)
00017F40 6700                       		beq.s	loc_15F02
00017F42 4440                       		neg.w	d0
00017F44 0640 0038                  		addi.w	#$38,d0
00017F48                            
00017F48                            loc_15F02:
00017F48 3228 0030                  		move.w	$30(a0),d1
00017F4C D240                       		add.w	d0,d1
00017F4E 3141 000C                  		move.w	d1,$C(a0)
00017F52 4E75                       		rts	
00017F54                            ; ===========================================================================
00017F54                            
00017F54                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017F54 4A28 0038                  		tst.b	$38(a0)
00017F58 6600                       		bne.s	loc_15F3E
00017F5A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017F5E 7000                       		moveq	#0,d0
00017F60 1028 003E                  		move.b	$3E(a0),d0
00017F64 0832 0000 0000             		btst	#0,(a2,d0.w)
00017F6A 6700                       		beq.s	locret_15F5C
00017F6C 117C 0001 0038             		move.b	#1,$38(a0)
00017F72 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017F76 7000                       		moveq	#0,d0
00017F78 1028 0023                  		move.b	$23(a0),d0
00017F7C 6700                       		beq.s	loc_15F3E
00017F7E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017F84                            
00017F84                            loc_15F3E:
00017F84 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017F8C 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017F94 3168 0008 0034             		move.w	8(a0),$34(a0)
00017F9A 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017FA0 6700                       		beq.s	loc_15F5E
00017FA2                            
00017FA2                            locret_15F5C:
00017FA2 4E75                       		rts	
00017FA4                            ; ===========================================================================
00017FA4                            
00017FA4                            loc_15F5E:
00017FA4 4228 0028                  		clr.b	$28(a0)
00017FA8 4228 0038                  		clr.b	$38(a0)
00017FAC 4E75                       		rts	
00017FAE                            ; ===========================================================================
00017FAE                            ; ---------------------------------------------------------------------------
00017FAE                            ; Sprite mappings - stomper and	platforms (SBZ)
00017FAE                            ; ---------------------------------------------------------------------------
00017FAE                            Map_obj6B:
00017FAE                            	include "_maps\obj6B.asm"
00017FAE                            ; ---------------------------------------------------------------------------
00017FAE                            ; Sprite mappings - stomper and	platforms (SBZ)
00017FAE                            ; ---------------------------------------------------------------------------
00017FAE 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017FB2 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017FB6 0000                       		dc.w byte_15FB0-Map_obj6B
00017FB8 04                         byte_15F72:	dc.b 4
00017FB9 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017FBE F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017FC3 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017FC8 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017FCD 08                         byte_15F87:	dc.b 8
00017FCE E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017FD3 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017FD8 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017FDD E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017FE2 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017FE7 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017FEC 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017FF1 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017FF6 0E                         byte_15FB0:	dc.b $E
00017FF7 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017FFC C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018001 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018006 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001800B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018010 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018015 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001801A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001801F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018024 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018029 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001802E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018033 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018038 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001803E 00                         		even
0001803E 00                         		even
0001803E                            
0001803E                            ; ===========================================================================
0001803E                            ; ---------------------------------------------------------------------------
0001803E                            ; Object 6C - vanishing	platforms (SBZ)
0001803E                            ; ---------------------------------------------------------------------------
0001803E                            
0001803E                            Obj6C:					; XREF: Obj_Index
0001803E 7000                       		moveq	#0,d0
00018040 1028 0024                  		move.b	$24(a0),d0
00018044 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00018048 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001804C                            ; ===========================================================================
0001804C 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001804E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018050 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018052 0000                       		dc.w loc_16068-Obj6C_Index
00018054                            ; ===========================================================================
00018054                            
00018054                            Obj6C_Main:				; XREF: Obj6C_Index
00018054 5C28 0024                  		addq.b	#6,$24(a0)
00018058 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00018060 317C 44C3 0002             		move.w	#$44C3,2(a0)
00018066 0028 0004 0001             		ori.b	#4,1(a0)
0001806C 117C 0010 0019             		move.b	#$10,$19(a0)
00018072 117C 0004 0018             		move.b	#4,$18(a0)
00018078 7000                       		moveq	#0,d0
0001807A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001807E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018082 5240                       		addq.w	#1,d0		; add 1
00018084 EF48                       		lsl.w	#7,d0		; multiply by $80
00018086 3200                       		move.w	d0,d1
00018088 5340                       		subq.w	#1,d0
0001808A 3140 0030                  		move.w	d0,$30(a0)
0001808E 3140 0032                  		move.w	d0,$32(a0)
00018092 7000                       		moveq	#0,d0
00018094 1028 0028                  		move.b	$28(a0),d0	; get object type
00018098 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001809C 0641 0080                  		addi.w	#$80,d1
000180A0 C0C1                       		mulu.w	d1,d0
000180A2 E088                       		lsr.l	#8,d0
000180A4 3140 0036                  		move.w	d0,$36(a0)
000180A8 5341                       		subq.w	#1,d1
000180AA 3141 0038                  		move.w	d1,$38(a0)
000180AE                            
000180AE                            loc_16068:				; XREF: Obj6C_Index
000180AE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000180B2 9068 0036                  		sub.w	$36(a0),d0
000180B6 C068 0038                  		and.w	$38(a0),d0
000180BA 6600                       		bne.s	Obj6C_Animate
000180BC 5928 0024                  		subq.b	#4,$24(a0)
000180C0 6000                       		bra.s	Obj6C_Vanish
000180C2                            ; ===========================================================================
000180C2                            
000180C2                            Obj6C_Animate:
000180C2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000180C8 4EB9 0000 C20C             		jsr	AnimateSprite
000180CE 6000 90B0                  		bra.w	MarkObjGone
000180D2                            ; ===========================================================================
000180D2                            
000180D2                            Obj6C_Vanish:				; XREF: Obj6C_Index
000180D2 5368 0030                  		subq.w	#1,$30(a0)
000180D6 6A00                       		bpl.s	loc_160AA
000180D8 317C 007F 0030             		move.w	#127,$30(a0)
000180DE 4A28 001C                  		tst.b	$1C(a0)
000180E2 6700                       		beq.s	loc_160A4
000180E4 3168 0032 0030             		move.w	$32(a0),$30(a0)
000180EA                            
000180EA                            loc_160A4:
000180EA 0868 0000 001C             		bchg	#0,$1C(a0)
000180F0                            
000180F0                            loc_160AA:
000180F0 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000180F6 4EB9 0000 C20C             		jsr	AnimateSprite
000180FC 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00018102 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00018104 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001810A 6600                       		bne.s	loc_160D6
0001810C 7200                       		moveq	#0,d1
0001810E 1228 0019                  		move.b	$19(a0),d1
00018112 4EB9 0000 8F16             		jsr	(PlatformObject).l
00018118 6000 9066                  		bra.w	MarkObjGone
0001811C                            ; ===========================================================================
0001811C                            
0001811C                            loc_160D6:
0001811C 7200                       		moveq	#0,d1
0001811E 1228 0019                  		move.b	$19(a0),d1
00018122 4EB9 0000 908A             		jsr	(ExitPlatform).l
00018128 3428 0008                  		move.w	8(a0),d2
0001812C 4EB9 0000 95F4             		jsr	(MvSonicOnPtfm2).l
00018132 6000 904C                  		bra.w	MarkObjGone
00018136                            ; ===========================================================================
00018136                            
00018136                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018136 0828 0003 0022             		btst	#3,$22(a0)
0001813C 6700                       		beq.s	Obj6C_Display
0001813E 43F8 D000                  		lea	($FFFFD000).w,a1
00018142 08A9 0003 0022             		bclr	#3,$22(a1)
00018148 08A8 0003 0022             		bclr	#3,$22(a0)
0001814E 117C 0002 0024             		move.b	#2,$24(a0)
00018154 4228 0025                  		clr.b	$25(a0)
00018158                            
00018158                            Obj6C_Display:
00018158 6000 9026                  		bra.w	MarkObjGone
0001815C                            ; ===========================================================================
0001815C                            Ani_obj6C:
0001815C                            	include "_anim\obj6C.asm"
0001815C                            ; ---------------------------------------------------------------------------
0001815C                            ; Animation script - vanishing platforms (SBZ)
0001815C                            ; ---------------------------------------------------------------------------
0001815C 0000                       		dc.w byte_1611A-Ani_obj6C
0001815E 0000                       		dc.w byte_16122-Ani_obj6C
00018160 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00018168 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00018170                            		even
00018170                            		even
00018170                            
00018170                            ; ---------------------------------------------------------------------------
00018170                            ; Sprite mappings - vanishing platforms	(SBZ)
00018170                            ; ---------------------------------------------------------------------------
00018170                            Map_obj6C:
00018170                            	include "_maps\obj6C.asm"
00018170                            ; ---------------------------------------------------------------------------
00018170                            ; Sprite mappings - vanishing platforms	(SBZ)
00018170                            ; ---------------------------------------------------------------------------
00018170 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018174 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00018178 01                         byte_16132:	dc.b 1
00018179 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001817E 01                         byte_16138:	dc.b 1
0001817F F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018184 01                         byte_1613E:	dc.b 1
00018185 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001818A 00                         byte_16144:	dc.b 0
0001818C 00                         		even
0001818C 00                         		even
0001818C                            
0001818C                            ; ===========================================================================
0001818C                            ; ---------------------------------------------------------------------------
0001818C                            ; Object 6E - electrocution orbs (SBZ)
0001818C                            ; ---------------------------------------------------------------------------
0001818C                            
0001818C                            Obj6E:					; XREF: Obj_Index
0001818C 7000                       		moveq	#0,d0
0001818E 1028 0024                  		move.b	$24(a0),d0
00018192 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00018196 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001819A                            ; ===========================================================================
0001819A 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001819C 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001819E                            ; ===========================================================================
0001819E                            
0001819E                            Obj6E_Main:				; XREF: Obj6E_Index
0001819E 5428 0024                  		addq.b	#2,$24(a0)
000181A2 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000181AA 317C 047E 0002             		move.w	#$47E,2(a0)
000181B0 0028 0004 0001             		ori.b	#4,1(a0)
000181B6 117C 0028 0019             		move.b	#$28,$19(a0)
000181BC 7000                       		moveq	#0,d0
000181BE 1028 0028                  		move.b	$28(a0),d0	; read object type
000181C2 E948                       		lsl.w	#4,d0		; multiply by $10
000181C4 5340                       		subq.w	#1,d0
000181C6 3140 0034                  		move.w	d0,$34(a0)
000181CA                            
000181CA                            Obj6E_Shock:				; XREF: Obj6E_Index
000181CA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000181CE C068 0034                  		and.w	$34(a0),d0
000181D2 6600                       		bne.s	Obj6E_Animate
000181D4 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000181DA 4A28 0001                  		tst.b	1(a0)
000181DE 6A00                       		bpl.s	Obj6E_Animate
000181E0 303C 00B1                  		move.w	#$B1,d0
000181E4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play electricity sound
000181EA                            
000181EA                            Obj6E_Animate:
000181EA 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000181F0 4EB9 0000 C20C             		jsr	AnimateSprite
000181F6 117C 0000 0020             		move.b	#0,$20(a0)
000181FC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00018202 6600                       		bne.s	Obj6E_Display	; if not, branch
00018204 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001820A                            
0001820A                            Obj6E_Display:
0001820A 6000 8F74                  		bra.w	MarkObjGone
0001820E                            ; ===========================================================================
0001820E                            Ani_obj6E:
0001820E                            	include "_anim\obj6E.asm"
0001820E                            ; ---------------------------------------------------------------------------
0001820E                            ; Animation script - electrocution orbs (SBZ)
0001820E                            ; ---------------------------------------------------------------------------
0001820E 0000                       		dc.w byte_161CC-Ani_obj6E
00018210 0000                       		dc.w byte_161D0-Ani_obj6E
00018212 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00018216 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00018226                            		even
00018226                            		even
00018226                            
00018226                            ; ---------------------------------------------------------------------------
00018226                            ; Sprite mappings - electrocution orbs (SBZ)
00018226                            ; ---------------------------------------------------------------------------
00018226                            Map_obj6E:
00018226                            	include "_maps\obj6E.asm"
00018226                            ; ---------------------------------------------------------------------------
00018226                            ; Sprite mappings - electrocution orbs (SBZ)
00018226                            ; ---------------------------------------------------------------------------
00018226 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001822A 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001822E 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00018232 02                         byte_161EC:	dc.b 2
00018233 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018238 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001823D 03                         byte_161F7:	dc.b 3
0001823E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018243 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018248 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001824D 05                         byte_16207:	dc.b 5
0001824E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018253 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018258 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001825D F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018262 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018267 04                         byte_16221:	dc.b 4
00018268 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001826D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018272 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018277 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001827C 06                         byte_16236:	dc.b 6
0001827D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018282 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018287 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001828C F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00018291 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018296 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001829B 04                         byte_16255:	dc.b 4
0001829C F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000182A1 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000182A6 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000182AB F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000182B0                            		even
000182B0                            		even
000182B0                            
000182B0                            ; ===========================================================================
000182B0                            ; ---------------------------------------------------------------------------
000182B0                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000182B0                            ; ---------------------------------------------------------------------------
000182B0                            
000182B0                            Obj6F:					; XREF: Obj_Index
000182B0 7000                       		moveq	#0,d0
000182B2 1028 0024                  		move.b	$24(a0),d0
000182B6 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000182BA 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000182BE 3028 0030                  		move.w	$30(a0),d0
000182C2 0240 FF80                  		andi.w	#$FF80,d0
000182C6 3238 F700                  		move.w	($FFFFF700).w,d1
000182CA 0441 0080                  		subi.w	#$80,d1
000182CE 0241 FF80                  		andi.w	#$FF80,d1
000182D2 9041                       		sub.w	d1,d0
000182D4 0C40 0280                  		cmpi.w	#$280,d0
000182D8 6200                       		bhi.s	loc_1629A
000182DA                            
000182DA                            Obj6F_Display:
000182DA 4EF9 0000 F0CA             		jmp	DisplaySprite
000182E0                            ; ===========================================================================
000182E0                            
000182E0                            loc_1629A:
000182E0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000182E6 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000182E8 0C40 FF80                  		cmpi.w	#-$80,d0
000182EC 64EC                       		bcc.s	Obj6F_Display
000182EE                            
000182EE                            Obj6F_Act1or2:
000182EE 1028 002F                  		move.b	$2F(a0),d0
000182F2 6A00                       		bpl.s	Obj6F_Delete
000182F4 0240 007F                  		andi.w	#$7F,d0
000182F8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000182FC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00018302                            
00018302                            Obj6F_Delete:
00018302 4EF9 0000 F106             		jmp	DeleteObject
00018308                            ; ===========================================================================
00018308 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001830A 0000                       		dc.w loc_163D8-Obj6F_Index
0001830C                            ; ===========================================================================
0001830C                            
0001830C                            Obj6F_Main:				; XREF: Obj6F_Index
0001830C 1028 0028                  		move.b	$28(a0),d0
00018310 6B00 0000                  		bmi.w	loc_16380
00018314 5428 0024                  		addq.b	#2,$24(a0)
00018318 217C 0001 7980 0004        		move.l	#Map_obj69a,4(a0)
00018320 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018326 117C 0010 0019             		move.b	#$10,$19(a0)
0001832C 0028 0004 0001             		ori.b	#4,1(a0)
00018332 117C 0004 0018             		move.b	#4,$18(a0)
00018338 7000                       		moveq	#0,d0
0001833A 1028 0028                  		move.b	$28(a0),d0
0001833E 3200                       		move.w	d0,d1
00018340 E648                       		lsr.w	#3,d0
00018342 0240 001E                  		andi.w	#$1E,d0
00018346 45FA 0000                  		lea	off_164A6(pc),a2
0001834A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001834E 315A 0038                  		move.w	(a2)+,$38(a0)
00018352 315A 0030                  		move.w	(a2)+,$30(a0)
00018356 214A 003C                  		move.l	a2,$3C(a0)
0001835A 0241 000F                  		andi.w	#$F,d1
0001835E E549                       		lsl.w	#2,d1
00018360 1141 0038                  		move.b	d1,$38(a0)
00018364 117C 0004 003A             		move.b	#4,$3A(a0)
0001836A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001836E 6700                       		beq.s	loc_16356
00018370 117C 0001 003B             		move.b	#1,$3B(a0)
00018376 4428 003A                  		neg.b	$3A(a0)
0001837A 7200                       		moveq	#0,d1
0001837C 1228 0038                  		move.b	$38(a0),d1
00018380 D228 003A                  		add.b	$3A(a0),d1
00018384 B228 0039                  		cmp.b	$39(a0),d1
00018388 6500                       		bcs.s	loc_16352
0001838A 1001                       		move.b	d1,d0
0001838C 7200                       		moveq	#0,d1
0001838E 4A00                       		tst.b	d0
00018390 6A00                       		bpl.s	loc_16352
00018392 1228 0039                  		move.b	$39(a0),d1
00018396 5901                       		subq.b	#4,d1
00018398                            
00018398                            loc_16352:
00018398 1141 0038                  		move.b	d1,$38(a0)
0001839C                            
0001839C                            loc_16356:
0001839C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000183A2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000183A8 4A41                       		tst.w	d1
000183AA 6600                       		bne.s	loc_1636C
000183AC 117C 0001 001C             		move.b	#1,$1C(a0)
000183B2                            
000183B2                            loc_1636C:
000183B2 0C41 0008                  		cmpi.w	#8,d1
000183B6 6600                       		bne.s	loc_16378
000183B8 117C 0000 001C             		move.b	#0,$1C(a0)
000183BE                            
000183BE                            loc_16378:
000183BE 6100 BC70                  		bsr.w	Obj63_ChangeDir
000183C2 6000 0000                  		bra.w	loc_163D8
000183C6                            ; ===========================================================================
000183C6                            
000183C6                            loc_16380:				; XREF: Obj6F_Main
000183C6 1140 002F                  		move.b	d0,$2F(a0)
000183CA 0240 007F                  		andi.w	#$7F,d0
000183CE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000183D2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000183D8 6700                       		beq.s	loc_1639A
000183DA 4EF9 0000 F106             		jmp	DeleteObject
000183E0                            ; ===========================================================================
000183E0                            
000183E0                            loc_1639A:
000183E0 D040                       		add.w	d0,d0
000183E2 0240 001E                  		andi.w	#$1E,d0
000183E6 0640 0080                  		addi.w	#$80,d0
000183EA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000183F0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000183F4 321A                       		move.w	(a2)+,d1
000183F6 2248                       		movea.l	a0,a1
000183F8 6000                       		bra.s	Obj6F_LoadPform
000183FA                            ; ===========================================================================
000183FA                            
000183FA                            Obj6F_Loop:
000183FA 4EB9 0000 F55E             		jsr	SingleObjLoad
00018400 6600                       		bne.s	loc_163D0
00018402                            
00018402                            Obj6F_LoadPform:			; XREF: loc_1639A
00018402 12BC 006F                  		move.b	#$6F,0(a1)
00018406 335A 0008                  		move.w	(a2)+,8(a1)
0001840A 335A 000C                  		move.w	(a2)+,$C(a1)
0001840E 301A                       		move.w	(a2)+,d0
00018410 1340 0028                  		move.b	d0,$28(a1)
00018414                            
00018414                            loc_163D0:
00018414 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00018418                            
00018418 588F                       		addq.l	#4,sp
0001841A 4E75                       		rts	
0001841C                            ; ===========================================================================
0001841C                            
0001841C                            loc_163D8:				; XREF: Obj6F_Index
0001841C 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018422 4EB9 0000 C20C             		jsr	AnimateSprite
00018428 4A28 001A                  		tst.b	$1A(a0)
0001842C 6600                       		bne.s	loc_16404
0001842E 3F28 0008                  		move.w	8(a0),-(sp)
00018432 6100 0000                  		bsr.w	loc_16424
00018436 323C 001B                  		move.w	#$1B,d1
0001843A 343C 0007                  		move.w	#7,d2
0001843E 3602                       		move.w	d2,d3
00018440 5243                       		addq.w	#1,d3
00018442 381F                       		move.w	(sp)+,d4
00018444 6000 9062                  		bra.w	SolidObject
00018448                            ; ===========================================================================
00018448                            
00018448                            loc_16404:
00018448 0828 0003 0022             		btst	#3,$22(a0)
0001844E 6700                       		beq.s	loc_16420
00018450 43F8 D000                  		lea	($FFFFD000).w,a1
00018454 08A9 0003 0022             		bclr	#3,$22(a1)
0001845A 08A8 0003 0022             		bclr	#3,$22(a0)
00018460 4228 0025                  		clr.b	$25(a0)
00018464                            
00018464                            loc_16420:
00018464 6000 0002                  		bra.w	*+4
00018468                            
00018468                            loc_16424:
00018468 3028 0008                  		move.w	8(a0),d0
0001846C B068 0034                  		cmp.w	$34(a0),d0
00018470 6600                       		bne.s	loc_16484
00018472 3028 000C                  		move.w	$C(a0),d0
00018476 B068 0036                  		cmp.w	$36(a0),d0
0001847A 6600                       		bne.s	loc_16484
0001847C 7200                       		moveq	#0,d1
0001847E 1228 0038                  		move.b	$38(a0),d1
00018482 D228 003A                  		add.b	$3A(a0),d1
00018486 B228 0039                  		cmp.b	$39(a0),d1
0001848A 6500                       		bcs.s	loc_16456
0001848C 1001                       		move.b	d1,d0
0001848E 7200                       		moveq	#0,d1
00018490 4A00                       		tst.b	d0
00018492 6A00                       		bpl.s	loc_16456
00018494 1228 0039                  		move.b	$39(a0),d1
00018498 5901                       		subq.b	#4,d1
0001849A                            
0001849A                            loc_16456:
0001849A 1141 0038                  		move.b	d1,$38(a0)
0001849E 2268 003C                  		movea.l	$3C(a0),a1
000184A2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000184A8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000184AE 4A41                       		tst.w	d1
000184B0 6600                       		bne.s	loc_16474
000184B2 117C 0001 001C             		move.b	#1,$1C(a0)
000184B8                            
000184B8                            loc_16474:
000184B8 0C41 0008                  		cmpi.w	#8,d1
000184BC 6600                       		bne.s	loc_16480
000184BE 117C 0000 001C             		move.b	#0,$1C(a0)
000184C4                            
000184C4                            loc_16480:
000184C4 6100 BB6A                  		bsr.w	Obj63_ChangeDir
000184C8                            
000184C8                            loc_16484:
000184C8 4EF9 0000 F0B0             		jmp	SpeedToPos
000184CE                            ; ===========================================================================
000184CE                            Ani_obj6F:
000184CE                            	include "_anim\obj6F.asm"
000184CE                            ; ---------------------------------------------------------------------------
000184CE                            ; Animation script - platform on conveyor belt (SBZ)
000184CE                            ; ---------------------------------------------------------------------------
000184CE 0000                       		dc.w byte_1648E-Ani_obj6F
000184D0 0000                       		dc.w byte_164A2-Ani_obj6F
000184D2 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000184DF 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000184E6 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000184EA 00                         		even
000184EA 00                         		even
000184EA                            
000184EA 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000184F0 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000184F6 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001850A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001851E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018532 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018546 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001855A 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001856E                            ; ===========================================================================
0001856E                            ; ---------------------------------------------------------------------------
0001856E                            ; Object 70 - large girder block (SBZ)
0001856E                            ; ---------------------------------------------------------------------------
0001856E                            
0001856E                            Obj70:					; XREF: Obj_Index
0001856E 7000                       		moveq	#0,d0
00018570 1028 0024                  		move.b	$24(a0),d0
00018574 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018578 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001857C                            ; ===========================================================================
0001857C 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001857E 0000                       		dc.w Obj70_Action-Obj70_Index
00018580                            ; ===========================================================================
00018580                            
00018580                            Obj70_Main:				; XREF: Obj70_Index
00018580 5428 0024                  		addq.b	#2,$24(a0)
00018584 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001858C 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018592 0028 0004 0001             		ori.b	#4,1(a0)
00018598 117C 0004 0018             		move.b	#4,$18(a0)
0001859E 117C 0060 0019             		move.b	#$60,$19(a0)
000185A4 117C 0018 0016             		move.b	#$18,$16(a0)
000185AA 3168 0008 0032             		move.w	8(a0),$32(a0)
000185B0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000185B6 6100 0000                  		bsr.w	Obj70_Move2
000185BA                            
000185BA                            Obj70_Action:				; XREF: Obj70_Index
000185BA 3F28 0008                  		move.w	8(a0),-(sp)
000185BE 4A68 003A                  		tst.w	$3A(a0)
000185C2 6700                       		beq.s	Obj70_Move
000185C4 5368 003A                  		subq.w	#1,$3A(a0)
000185C8 6600                       		bne.s	Obj70_Solid
000185CA                            
000185CA                            Obj70_Move:
000185CA 4EB9 0000 F0B0             		jsr	SpeedToPos
000185D0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000185D4 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000185D6 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000185DA                            
000185DA                            Obj70_Solid:
000185DA 381F                       		move.w	(sp)+,d4
000185DC 4A28 0001                  		tst.b	1(a0)
000185E0 6A00                       		bpl.s	Obj70_ChkDel
000185E2 7200                       		moveq	#0,d1
000185E4 1228 0019                  		move.b	$19(a0),d1
000185E8 0641 000B                  		addi.w	#$B,d1
000185EC 7400                       		moveq	#0,d2
000185EE 1428 0016                  		move.b	$16(a0),d2
000185F2 3602                       		move.w	d2,d3
000185F4 5243                       		addq.w	#1,d3
000185F6 6100 8EB0                  		bsr.w	SolidObject
000185FA                            
000185FA                            Obj70_ChkDel:
000185FA 3028 0032                  		move.w	$32(a0),d0
000185FE 0240 FF80                  		andi.w	#$FF80,d0
00018602 3238 F700                  		move.w	($FFFFF700).w,d1
00018606 0441 0080                  		subi.w	#$80,d1
0001860A 0241 FF80                  		andi.w	#$FF80,d1
0001860E 9041                       		sub.w	d1,d0
00018610 0C40 0280                  		cmpi.w	#$280,d0
00018614 6200                       		bhi.s	Obj70_Delete
00018616 4EF9 0000 F0CA             		jmp	DisplaySprite
0001861C                            ; ===========================================================================
0001861C                            
0001861C                            Obj70_Delete:
0001861C 4EF9 0000 F106             		jmp	DeleteObject
00018622                            ; ===========================================================================
00018622                            
00018622                            Obj70_Move2:				; XREF: Obj70_Main
00018622 1028 0038                  		move.b	$38(a0),d0
00018626 0240 0018                  		andi.w	#$18,d0
0001862A 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00018630 43F1 0000                  		lea	(a1,d0.w),a1
00018634 3159 0010                  		move.w	(a1)+,$10(a0)
00018638 3159 0012                  		move.w	(a1)+,$12(a0)
0001863C 3159 0034                  		move.w	(a1)+,$34(a0)
00018640 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018644 317C 0007 003A             		move.w	#7,$3A(a0)
0001864A 4E75                       		rts	
0001864C                            ; ===========================================================================
0001864C 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018654 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001865C FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018664 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001866C                            ; ---------------------------------------------------------------------------
0001866C                            ; Sprite mappings - large girder block (SBZ)
0001866C                            ; ---------------------------------------------------------------------------
0001866C                            Map_obj70:
0001866C                            	include "_maps\obj70.asm"
0001866C                            ; ---------------------------------------------------------------------------
0001866C                            ; Sprite mappings - large girder block (SBZ)
0001866C                            ; ---------------------------------------------------------------------------
0001866C 0000                       		dc.w byte_1662A-Map_obj70
0001866E 0C                         byte_1662A:	dc.b $C
0001866F E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018674 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018679 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001867E 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018683 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018688 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001868D E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018692 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018697 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001869C 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000186A1 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000186A6 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000186AC 00                         		even
000186AC 00                         		even
000186AC                            
000186AC                            ; ===========================================================================
000186AC                            ; ---------------------------------------------------------------------------
000186AC                            ; Object 72 - teleporter (SBZ)
000186AC                            ; ---------------------------------------------------------------------------
000186AC                            
000186AC                            Obj72:					; XREF: Obj_Index
000186AC 7000                       		moveq	#0,d0
000186AE 1028 0024                  		move.b	$24(a0),d0
000186B2 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000186B6 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000186BA 3028 0008                  		move.w	8(a0),d0
000186BE 0240 FF80                  		andi.w	#$FF80,d0
000186C2 3238 F700                  		move.w	($FFFFF700).w,d1
000186C6 0441 0080                  		subi.w	#$80,d1
000186CA 0241 FF80                  		andi.w	#$FF80,d1
000186CE 9041                       		sub.w	d1,d0
000186D0 0C40 0280                  		cmpi.w	#$280,d0
000186D4 6200                       		bhi.s	Obj72_Delete
000186D6 4E75                       		rts	
000186D8                            ; ===========================================================================
000186D8                            
000186D8                            Obj72_Delete:
000186D8 4EF9 0000 F106             		jmp	DeleteObject
000186DE                            ; ===========================================================================
000186DE 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000186E0 0000                       		dc.w loc_166C8-Obj72_Index
000186E2 0000                       		dc.w loc_1675E-Obj72_Index
000186E4 0000                       		dc.w loc_16798-Obj72_Index
000186E6                            ; ===========================================================================
000186E6                            
000186E6                            Obj72_Main:				; XREF: Obj72_Index
000186E6 5428 0024                  		addq.b	#2,$24(a0)
000186EA 1028 0028                  		move.b	$28(a0),d0
000186EE D040                       		add.w	d0,d0
000186F0 0240 001E                  		andi.w	#$1E,d0
000186F4 45FA 0000                  		lea	Obj72_Data(pc),a2
000186F8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000186FC 315A 003A                  		move.w	(a2)+,$3A(a0)
00018700 214A 003C                  		move.l	a2,$3C(a0)
00018704 315A 0036                  		move.w	(a2)+,$36(a0)
00018708 315A 0038                  		move.w	(a2)+,$38(a0)
0001870C                            
0001870C                            loc_166C8:				; XREF: Obj72_Index
0001870C 43F8 D000                  		lea	($FFFFD000).w,a1
00018710 3029 0008                  		move.w	8(a1),d0
00018714 9068 0008                  		sub.w	8(a0),d0
00018718 0828 0000 0022             		btst	#0,$22(a0)
0001871E 6700                       		beq.s	loc_166E0
00018720 0640 000F                  		addi.w	#$F,d0
00018724                            
00018724                            loc_166E0:
00018724 0C40 0010                  		cmpi.w	#$10,d0
00018728 6400                       		bcc.s	locret_1675C
0001872A 3229 000C                  		move.w	$C(a1),d1
0001872E 9268 000C                  		sub.w	$C(a0),d1
00018732 0641 0020                  		addi.w	#$20,d1
00018736 0C41 0040                  		cmpi.w	#$40,d1
0001873A 6400                       		bcc.s	locret_1675C
0001873C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018740 6600                       		bne.s	locret_1675C
00018742 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018748 6600                       		bne.s	loc_1670E
0001874A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00018750 6500                       		bcs.s	locret_1675C
00018752                            
00018752                            loc_1670E:
00018752 5428 0024                  		addq.b	#2,$24(a0)
00018756 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001875C 137C 001A 001C             		move.b	#$1A,$1C(a1)	; use Sonic's hurt animation
00018762 337C 0800 0014             		move.w	#$800,$14(a1)
00018768 337C 0000 0010             		move.w	#0,$10(a1)
0001876E 337C 0000 0012             		move.w	#0,$12(a1)
00018774 08A8 0005 0022             		bclr	#5,$22(a0)
0001877A 08A9 0005 0022             		bclr	#5,$22(a1)
00018780 08E9 0001 0022             		bset	#1,$22(a1)
00018786 3368 0008 0008             		move.w	8(a0),8(a1)
0001878C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018792 4228 0032                  		clr.b	$32(a0)
00018796 303C 00BE                  		move.w	#$BE,d0
0001879A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000187A0                            
000187A0                            locret_1675C:
000187A0 4E75                       		rts	
000187A2                            ; ===========================================================================
000187A2                            
000187A2                            loc_1675E:				; XREF: Obj72_Index
000187A2 43F8 D000                  		lea	($FFFFD000).w,a1
000187A6 1028 0032                  		move.b	$32(a0),d0
000187AA 5428 0032                  		addq.b	#2,$32(a0)
000187AE 4EB9 0000 2B7C             		jsr	(CalcSine).l
000187B4 EA40                       		asr.w	#5,d0
000187B6 3428 000C                  		move.w	$C(a0),d2
000187BA 9440                       		sub.w	d0,d2
000187BC 3342 000C                  		move.w	d2,$C(a1)
000187C0 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000187C6 6600                       		bne.s	locret_16796
000187C8 6100 0000                  		bsr.w	sub_1681C
000187CC 5428 0024                  		addq.b	#2,$24(a0)
000187D0 303C 00BC                  		move.w	#$BC,d0
000187D4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play teleport sound
000187DA                            
000187DA                            locret_16796:
000187DA 4E75                       		rts	
000187DC                            ; ===========================================================================
000187DC                            
000187DC                            loc_16798:				; XREF: Obj72_Index
000187DC 588F                       		addq.l	#4,sp
000187DE 43F8 D000                  		lea	($FFFFD000).w,a1
000187E2 5328 002E                  		subq.b	#1,$2E(a0)
000187E6 6A00                       		bpl.s	loc_167DA
000187E8 3368 0036 0008             		move.w	$36(a0),8(a1)
000187EE 3368 0038 000C             		move.w	$38(a0),$C(a1)
000187F4 7200                       		moveq	#0,d1
000187F6 1228 003A                  		move.b	$3A(a0),d1
000187FA 5801                       		addq.b	#4,d1
000187FC B228 003B                  		cmp.b	$3B(a0),d1
00018800 6500                       		bcs.s	loc_167C2
00018802 7200                       		moveq	#0,d1
00018804 6000                       		bra.s	loc_16800
00018806                            ; ===========================================================================
00018806                            
00018806                            loc_167C2:
00018806 1141 003A                  		move.b	d1,$3A(a0)
0001880A 2468 003C                  		movea.l	$3C(a0),a2
0001880E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018814 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001881A 6000 0000                  		bra.w	sub_1681C
0001881E                            ; ===========================================================================
0001881E                            
0001881E                            loc_167DA:
0001881E 2429 0008                  		move.l	8(a1),d2
00018822 2629 000C                  		move.l	$C(a1),d3
00018826 3029 0010                  		move.w	$10(a1),d0
0001882A 48C0                       		ext.l	d0
0001882C E180                       		asl.l	#8,d0
0001882E D480                       		add.l	d0,d2
00018830 3029 0012                  		move.w	$12(a1),d0
00018834 48C0                       		ext.l	d0
00018836 E180                       		asl.l	#8,d0
00018838 D680                       		add.l	d0,d3
0001883A 2342 0008                  		move.l	d2,8(a1)
0001883E 2343 000C                  		move.l	d3,$C(a1)
00018842 4E75                       		rts	
00018844                            ; ===========================================================================
00018844                            
00018844                            loc_16800:
00018844 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001884A 4228 0024                  		clr.b	$24(a0)
0001884E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018852 337C 0000 0010             		move.w	#0,$10(a1)
00018858 337C 0200 0012             		move.w	#$200,$12(a1)
0001885E 4E75                       		rts	
00018860                            
00018860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018860                            
00018860                            
00018860                            sub_1681C:
00018860 7000                       		moveq	#0,d0
00018862 343C 1000                  		move.w	#$1000,d2
00018866 3028 0036                  		move.w	$36(a0),d0
0001886A 9069 0008                  		sub.w	8(a1),d0
0001886E 6C00                       		bge.s	loc_16830
00018870 4440                       		neg.w	d0
00018872 4442                       		neg.w	d2
00018874                            
00018874                            loc_16830:
00018874 7200                       		moveq	#0,d1
00018876 363C 1000                  		move.w	#$1000,d3
0001887A 3228 0038                  		move.w	$38(a0),d1
0001887E 9269 000C                  		sub.w	$C(a1),d1
00018882 6C00                       		bge.s	loc_16844
00018884 4441                       		neg.w	d1
00018886 4443                       		neg.w	d3
00018888                            
00018888                            loc_16844:
00018888 B240                       		cmp.w	d0,d1
0001888A 6500                       		bcs.s	loc_1687A
0001888C 7200                       		moveq	#0,d1
0001888E 3228 0038                  		move.w	$38(a0),d1
00018892 9269 000C                  		sub.w	$C(a1),d1
00018896 4841                       		swap	d1
00018898 83C3                       		divs.w	d3,d1
0001889A 7000                       		moveq	#0,d0
0001889C 3028 0036                  		move.w	$36(a0),d0
000188A0 9069 0008                  		sub.w	8(a1),d0
000188A4 6700                       		beq.s	loc_16866
000188A6 4840                       		swap	d0
000188A8 81C1                       		divs.w	d1,d0
000188AA                            
000188AA                            loc_16866:
000188AA 3340 0010                  		move.w	d0,$10(a1)
000188AE 3343 0012                  		move.w	d3,$12(a1)
000188B2 4A41                       		tst.w	d1
000188B4 6A00                       		bpl.s	loc_16874
000188B6 4441                       		neg.w	d1
000188B8                            
000188B8                            loc_16874:
000188B8 3141 002E                  		move.w	d1,$2E(a0)
000188BC 4E75                       		rts	
000188BE                            ; ===========================================================================
000188BE                            
000188BE                            loc_1687A:
000188BE 7000                       		moveq	#0,d0
000188C0 3028 0036                  		move.w	$36(a0),d0
000188C4 9069 0008                  		sub.w	8(a1),d0
000188C8 4840                       		swap	d0
000188CA 81C2                       		divs.w	d2,d0
000188CC 7200                       		moveq	#0,d1
000188CE 3228 0038                  		move.w	$38(a0),d1
000188D2 9269 000C                  		sub.w	$C(a1),d1
000188D6 6700                       		beq.s	loc_16898
000188D8 4841                       		swap	d1
000188DA 83C0                       		divs.w	d0,d1
000188DC                            
000188DC                            loc_16898:
000188DC 3341 0012                  		move.w	d1,$12(a1)
000188E0 3342 0010                  		move.w	d2,$10(a1)
000188E4 4A40                       		tst.w	d0
000188E6 6A00                       		bpl.s	loc_168A6
000188E8 4440                       		neg.w	d0
000188EA                            
000188EA                            loc_168A6:
000188EA 3140 002E                  		move.w	d0,$2E(a0)
000188EE 4E75                       		rts	
000188F0                            ; End of function sub_1681C
000188F0                            
000188F0                            ; ===========================================================================
000188F0 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000188F6 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000188FC 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018900 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018906 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001890C 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018912 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018918 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001891E 0884 0298 0894             		dc.w $884, $298, $894
00018924 0270 0894 0190             		dc.w $270, $894, $190
0001892A 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00018930 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018936 1184 0498 1158             		dc.w $1184, $498, $1158
0001893C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018942 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018948 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001894E 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018954 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001895A 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018960 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018966 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001896C FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018972 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018978                            ; ===========================================================================
00018978                            ; ---------------------------------------------------------------------------
00018978                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018978                            ; ---------------------------------------------------------------------------
00018978                            
00018978                            Obj78:					; XREF: Obj_Index
00018978 7000                       		moveq	#0,d0
0001897A 1028 0024                  		move.b	$24(a0),d0
0001897E 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018982 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018986                            ; ===========================================================================
00018986 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018988 0000                       		dc.w Obj78_Action-Obj78_Index
0001898A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001898C 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001898E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018990 0000                       		dc.w Obj78_Delete-Obj78_Index
00018992 0000                       		dc.w loc_16CC0-Obj78_Index
00018994                            ; ===========================================================================
00018994                            
00018994                            locret_16950:
00018994 4E75                       		rts	
00018996                            ; ===========================================================================
00018996                            
00018996                            Obj78_Main:				; XREF: Obj78_Index
00018996 117C 0007 0016             		move.b	#7,$16(a0)
0001899C 117C 0008 0017             		move.b	#8,$17(a0)
000189A2 4EB9 0000 F090             		jsr	ObjectFall
000189A8 4EBA E4B6                  		jsr	ObjHitFloor
000189AC 4A41                       		tst.w	d1
000189AE 6AE4                       		bpl.s	locret_16950
000189B0 D368 000C                  		add.w	d1,$C(a0)
000189B4 4268 0012                  		clr.w	$12(a0)
000189B8 5428 0024                  		addq.b	#2,$24(a0)
000189BC 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000189C4 317C 22B0 0002             		move.w	#$22B0,2(a0)
000189CA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000189D0 6700                       		beq.s	loc_16996
000189D2 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000189D8                            
000189D8                            loc_16996:
000189D8 0228 0003 0001             		andi.b	#3,1(a0)
000189DE 0028 0004 0001             		ori.b	#4,1(a0)
000189E4 1168 0001 0022             		move.b	1(a0),$22(a0)
000189EA 117C 0004 0018             		move.b	#4,$18(a0)
000189F0 117C 0008 0019             		move.b	#8,$19(a0)
000189F6 117C 000B 0020             		move.b	#$B,$20(a0)
000189FC 3428 0008                  		move.w	8(a0),d2
00018A00 7A0C                       		moveq	#$C,d5
00018A02 0828 0000 0022             		btst	#0,$22(a0)
00018A08 6700                       		beq.s	loc_169CA
00018A0A 4445                       		neg.w	d5
00018A0C                            
00018A0C                            loc_169CA:
00018A0C 1C3C 0004                  		move.b	#4,d6
00018A10 7600                       		moveq	#0,d3
00018A12 7804                       		moveq	#4,d4
00018A14 2448                       		movea.l	a0,a2
00018A16 7202                       		moveq	#2,d1
00018A18                            
00018A18                            Obj78_LoadBody:
00018A18 4EB9 0000 F574             		jsr	SingleObjLoad2
00018A1E 6600                       		bne.s	Obj78_QuitLoad
00018A20 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018A24 1346 0024                  		move.b	d6,$24(a1)
00018A28 5406                       		addq.b	#2,d6
00018A2A 2368 0004 0004             		move.l	4(a0),4(a1)
00018A30 3368 0002 0002             		move.w	2(a0),2(a1)
00018A36 137C 0005 0018             		move.b	#5,$18(a1)
00018A3C 137C 0008 0019             		move.b	#8,$19(a1)
00018A42 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018A48 D445                       		add.w	d5,d2
00018A4A 3342 0008                  		move.w	d2,8(a1)
00018A4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A54 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018A5A 1368 0022 0001             		move.b	$22(a0),1(a1)
00018A60 137C 0008 001A             		move.b	#8,$1A(a1)
00018A66 234A 003C                  		move.l	a2,$3C(a1)
00018A6A 1344 003C                  		move.b	d4,$3C(a1)
00018A6E 5804                       		addq.b	#4,d4
00018A70 2449                       		movea.l	a1,a2
00018A72                            
00018A72                            Obj78_QuitLoad:
00018A72 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018A76                            
00018A76 117C 0007 002A             		move.b	#7,$2A(a0)
00018A7C 4228 003C                  		clr.b	$3C(a0)
00018A80                            
00018A80                            Obj78_Action:				; XREF: Obj78_Index
00018A80 4A28 0022                  		tst.b	$22(a0)
00018A84 6B00 0000                  		bmi.w	loc_16C96
00018A88 7000                       		moveq	#0,d0
00018A8A 1028 0025                  		move.b	$25(a0),d0
00018A8E 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018A92 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018A96 1228 002B                  		move.b	$2B(a0),d1
00018A9A 6A00                       		bpl.s	Obj78_Display
00018A9C 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018AA2 1028 0026                  		move.b	$26(a0),d0
00018AA6 0240 007F                  		andi.w	#$7F,d0
00018AAA 5828 0026                  		addq.b	#4,$26(a0)
00018AAE 1031 0000                  		move.b	(a1,d0.w),d0
00018AB2 6A00                       		bpl.s	Obj78_AniHead
00018AB4 08A8 0007 002B             		bclr	#7,$2B(a0)
00018ABA 6000                       		bra.s	Obj78_Display
00018ABC                            ; ===========================================================================
00018ABC                            
00018ABC                            Obj78_AniHead:
00018ABC 0201 0010                  		andi.b	#$10,d1
00018AC0 D001                       		add.b	d1,d0
00018AC2 1140 001A                  		move.b	d0,$1A(a0)
00018AC6                            
00018AC6                            Obj78_Display:
00018AC6 3028 0008                  		move.w	8(a0),d0
00018ACA 0240 FF80                  		andi.w	#$FF80,d0
00018ACE 3238 F700                  		move.w	($FFFFF700).w,d1
00018AD2 0441 0080                  		subi.w	#$80,d1
00018AD6 0241 FF80                  		andi.w	#$FF80,d1
00018ADA 9041                       		sub.w	d1,d0
00018ADC 0C40 0280                  		cmpi.w	#$280,d0
00018AE0 6200 0000                  		bhi.w	Obj78_ChkGone
00018AE4 4EF9 0000 F0CA             		jmp	DisplaySprite
00018AEA                            ; ===========================================================================
00018AEA                            
00018AEA                            Obj78_ChkGone:
00018AEA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018AEE 7000                       		moveq	#0,d0
00018AF0 1028 0023                  		move.b	$23(a0),d0
00018AF4 6700                       		beq.s	loc_16ABC
00018AF6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018AFC                            
00018AFC                            loc_16ABC:
00018AFC 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018B02 4E75                       		rts	
00018B04                            ; ===========================================================================
00018B04                            
00018B04                            Obj78_Delete:				; XREF: Obj78_Index
00018B04 4EF9 0000 F106             		jmp	DeleteObject
00018B0A                            ; ===========================================================================
00018B0A 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018B0C 0000                       		dc.w loc_16B02-Obj78_Index2
00018B0E                            ; ===========================================================================
00018B0E                            
00018B0E                            Obj78_Move:				; XREF: Obj78_Index2
00018B0E 5328 002A                  		subq.b	#1,$2A(a0)
00018B12 6B00                       		bmi.s	Obj78_Move2
00018B14 4E75                       		rts	
00018B16                            ; ===========================================================================
00018B16                            
00018B16                            Obj78_Move2:
00018B16 5428 0025                  		addq.b	#2,$25(a0)
00018B1A 117C 0010 002A             		move.b	#$10,$2A(a0)
00018B20 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018B26 317C 0040 0014             		move.w	#$40,$14(a0)
00018B2C 0868 0004 002B             		bchg	#4,$2B(a0)
00018B32 6600                       		bne.s	loc_16AFC
00018B34 4268 0010                  		clr.w	$10(a0)
00018B38 4468 0014                  		neg.w	$14(a0)
00018B3C                            
00018B3C                            loc_16AFC:
00018B3C 08E8 0007 002B             		bset	#7,$2B(a0)
00018B42                            
00018B42                            loc_16B02:				; XREF: Obj78_Index2
00018B42 5328 002A                  		subq.b	#1,$2A(a0)
00018B46 6B00                       		bmi.s	loc_16B5E
00018B48 2F28 0008                  		move.l	8(a0),-(sp)
00018B4C 2428 0008                  		move.l	8(a0),d2
00018B50 3028 0010                  		move.w	$10(a0),d0
00018B54 0828 0000 0022             		btst	#0,$22(a0)
00018B5A 6700                       		beq.s	loc_16B1E
00018B5C 4440                       		neg.w	d0
00018B5E                            
00018B5E                            loc_16B1E:
00018B5E 48C0                       		ext.l	d0
00018B60 E180                       		asl.l	#8,d0
00018B62 D480                       		add.l	d0,d2
00018B64 2142 0008                  		move.l	d2,8(a0)
00018B68 4EBA E2F6                  		jsr	ObjHitFloor
00018B6C 241F                       		move.l	(sp)+,d2
00018B6E 0C41 FFF8                  		cmpi.w	#-8,d1
00018B72 6D00                       		blt.s	loc_16B70
00018B74 0C41 000C                  		cmpi.w	#$C,d1
00018B78 6C00                       		bge.s	loc_16B70
00018B7A D368 000C                  		add.w	d1,$C(a0)
00018B7E 4842                       		swap	d2
00018B80 B468 0008                  		cmp.w	8(a0),d2
00018B84 6700                       		beq.s	locret_16B5C
00018B86 7000                       		moveq	#0,d0
00018B88 1028 003C                  		move.b	$3C(a0),d0
00018B8C 5228 003C                  		addq.b	#1,$3C(a0)
00018B90 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018B96 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018B9A                            
00018B9A                            locret_16B5C:
00018B9A 4E75                       		rts	
00018B9C                            ; ===========================================================================
00018B9C                            
00018B9C                            loc_16B5E:
00018B9C 5528 0025                  		subq.b	#2,$25(a0)
00018BA0 117C 0007 002A             		move.b	#7,$2A(a0)
00018BA6 317C 0000 0010             		move.w	#0,$10(a0)
00018BAC 4E75                       		rts	
00018BAE                            ; ===========================================================================
00018BAE                            
00018BAE                            loc_16B70:
00018BAE 2142 0008                  		move.l	d2,8(a0)
00018BB2 0868 0000 0022             		bchg	#0,$22(a0)
00018BB8 1168 0022 0001             		move.b	$22(a0),1(a0)
00018BBE 7000                       		moveq	#0,d0
00018BC0 1028 003C                  		move.b	$3C(a0),d0
00018BC4 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018BCA 5228 003C                  		addq.b	#1,$3C(a0)
00018BCE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BD4 4E75                       		rts	
00018BD6                            ; ===========================================================================
00018BD6                            
00018BD6                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018BD6 2268 003C                  		movea.l	$3C(a0),a1
00018BDA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018BE0 6A00                       		bpl.s	Obj78_BodySeg1
00018BE2 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018BE8 1028 0026                  		move.b	$26(a0),d0
00018BEC 0240 007F                  		andi.w	#$7F,d0
00018BF0 5828 0026                  		addq.b	#4,$26(a0)
00018BF4 4A31 0004                  		tst.b	4(a1,d0.w)
00018BF8 6A00                       		bpl.s	Obj78_AniBody
00018BFA 5828 0026                  		addq.b	#4,$26(a0)
00018BFE                            
00018BFE                            Obj78_AniBody:
00018BFE 1031 0000                  		move.b	(a1,d0.w),d0
00018C02 5000                       		addq.b	#8,d0
00018C04 1140 001A                  		move.b	d0,$1A(a0)
00018C08                            
00018C08                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018C08 2268 003C                  		movea.l	$3C(a0),a1
00018C0C 4A28 0022                  		tst.b	$22(a0)
00018C10 6B00 0000                  		bmi.w	loc_16C90
00018C14 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018C1A 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018C20 6700 0000                  		beq.w	loc_16C64
00018C24 3169 0014 0014             		move.w	$14(a1),$14(a0)
00018C2A 3029 0010                  		move.w	$10(a1),d0
00018C2E D069 0014                  		add.w	$14(a1),d0
00018C32 3140 0010                  		move.w	d0,$10(a0)
00018C36 2428 0008                  		move.l	8(a0),d2
00018C3A 2602                       		move.l	d2,d3
00018C3C 3028 0010                  		move.w	$10(a0),d0
00018C40 0828 0000 0022             		btst	#0,$22(a0)
00018C46 6700                       		beq.s	loc_16C0C
00018C48 4440                       		neg.w	d0
00018C4A                            
00018C4A                            loc_16C0C:
00018C4A 48C0                       		ext.l	d0
00018C4C E180                       		asl.l	#8,d0
00018C4E D480                       		add.l	d0,d2
00018C50 2142 0008                  		move.l	d2,8(a0)
00018C54 4843                       		swap	d3
00018C56 B668 0008                  		cmp.w	8(a0),d3
00018C5A 6700                       		beq.s	loc_16C64
00018C5C 7000                       		moveq	#0,d0
00018C5E 1028 003C                  		move.b	$3C(a0),d0
00018C62 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018C66 0C01 0080                  		cmpi.b	#-$80,d1
00018C6A 6600                       		bne.s	loc_16C50
00018C6C 4843                       		swap	d3
00018C6E 2143 0008                  		move.l	d3,8(a0)
00018C72 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C76 0868 0000 0022             		bchg	#0,$22(a0)
00018C7C 1168 0022 0001             		move.b	$22(a0),1(a0)
00018C82 5228 003C                  		addq.b	#1,$3C(a0)
00018C86 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C8C 6000                       		bra.s	loc_16C64
00018C8E                            ; ===========================================================================
00018C8E                            
00018C8E                            loc_16C50:
00018C8E 4881                       		ext.w	d1
00018C90 D368 000C                  		add.w	d1,$C(a0)
00018C94 5228 003C                  		addq.b	#1,$3C(a0)
00018C98 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C9E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018CA2                            
00018CA2                            loc_16C64:
00018CA2 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018CA8 6700                       		beq.s	loc_16C90
00018CAA 0C11 0027                  		cmpi.b	#$27,0(a1)
00018CAE 6700                       		beq.s	loc_16C7C
00018CB0 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018CB6 6600                       		bne.s	loc_16C82
00018CB8                            
00018CB8                            loc_16C7C:
00018CB8 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018CBC 117C 000A 0024             		move.b	#$A,$24(a0)
00018CC2                            
00018CC2                            loc_16C82:
00018CC2 4EF9 0000 F0CA             		jmp	DisplaySprite
00018CC8                            
00018CC8                            ; ===========================================================================
00018CC8 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018CD0                            ; ===========================================================================
00018CD0                            
00018CD0                            loc_16C90:
00018CD0 08E9 0007 0022             		bset	#7,$22(a1)
00018CD6                            
00018CD6                            loc_16C96:
00018CD6 7000                       		moveq	#0,d0
00018CD8 1028 0024                  		move.b	$24(a0),d0
00018CDC 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018CE0 0828 0000 0022             		btst	#0,$22(a0)
00018CE6 6700                       		beq.s	loc_16CAA
00018CE8 4440                       		neg.w	d0
00018CEA                            
00018CEA                            loc_16CAA:
00018CEA 3140 0010                  		move.w	d0,$10(a0)
00018CEE 317C FC00 0012             		move.w	#-$400,$12(a0)
00018CF4 117C 000C 0024             		move.b	#$C,$24(a0)
00018CFA 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018D00                            
00018D00                            loc_16CC0:				; XREF: Obj78_Index
00018D00 4EB9 0000 F090             		jsr	ObjectFall
00018D06 4A68 0012                  		tst.w	$12(a0)
00018D0A 6B00                       		bmi.s	loc_16CE0
00018D0C 4EBA E152                  		jsr	ObjHitFloor
00018D10 4A41                       		tst.w	d1
00018D12 6A00                       		bpl.s	loc_16CE0
00018D14 D368 000C                  		add.w	d1,$C(a0)
00018D18 317C FC00 0012             		move.w	#-$400,$12(a0)
00018D1E                            
00018D1E                            loc_16CE0:
00018D1E 4A28 0001                  		tst.b	1(a0)
00018D22 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018D26 4EF9 0000 F0CA             		jmp	DisplaySprite
00018D2C                            ; ===========================================================================
00018D2C                            Ani_obj78:
00018D2C                            	include "_anim\obj78.asm"
00018D2C                            ; ---------------------------------------------------------------------------
00018D2C                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018D2C                            ; ---------------------------------------------------------------------------
00018D2C 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018D3C 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018D4C 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018D5C 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018D6C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018D7C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018D8C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018D9C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018DAC                            	even
00018DAC                            	even
00018DAC                            
00018DAC                            ; ---------------------------------------------------------------------------
00018DAC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018DAC                            ; ---------------------------------------------------------------------------
00018DAC                            Map_obj78:
00018DAC                            	include "_maps\obj78.asm"
00018DAC                            ; ---------------------------------------------------------------------------
00018DAC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018DAC                            ; ---------------------------------------------------------------------------
00018DAC 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018DB0 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018DB4 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018DB8 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018DBC 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018DC0 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018DC4 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018DC8 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018DCC 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018DD0 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018DD4 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018DD8 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018DDC 01                         byte_16D9E:	dc.b 1
00018DDD F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018DE2 01                         byte_16DA4:	dc.b 1
00018DE3 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018DE8 01                         byte_16DAA:	dc.b 1
00018DE9 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018DEE 01                         byte_16DB0:	dc.b 1
00018DEF EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018DF4 01                         byte_16DB6:	dc.b 1
00018DF5 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018DFA 01                         byte_16DBC:	dc.b 1
00018DFB ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018E00 01                         byte_16DC2:	dc.b 1
00018E01 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018E06 01                         byte_16DC8:	dc.b 1
00018E07 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018E0C 01                         byte_16DCE:	dc.b 1
00018E0D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018E12 01                         byte_16DD4:	dc.b 1
00018E13 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018E18 01                         byte_16DDA:	dc.b 1
00018E19 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018E1E 01                         byte_16DE0:	dc.b 1
00018E1F F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018E24 01                         byte_16DE6:	dc.b 1
00018E25 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018E2A 01                         byte_16DEC:	dc.b 1
00018E2B F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018E30 01                         byte_16DF2:	dc.b 1
00018E31 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018E36 01                         byte_16DF8:	dc.b 1
00018E37 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018E3C 01                         byte_16DFE:	dc.b 1
00018E3D F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018E42 01                         byte_16E04:	dc.b 1
00018E43 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018E48 01                         byte_16E0A:	dc.b 1
00018E49 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018E4E 01                         byte_16E10:	dc.b 1
00018E4F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018E54 01                         byte_16E16:	dc.b 1
00018E55 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018E5A 01                         byte_16E1C:	dc.b 1
00018E5B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018E60 01                         byte_16E22:	dc.b 1
00018E61 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018E66 01                         byte_16E28:	dc.b 1
00018E67 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018E6C                            		even
00018E6C                            		even
00018E6C                            
00018E6C                            ; ===========================================================================
00018E6C                            ; ---------------------------------------------------------------------------
00018E6C                            ; Object 79 - lamppost
00018E6C                            ; ---------------------------------------------------------------------------
00018E6C                            
00018E6C                            Obj79:					; XREF: Obj_Index
00018E6C 7000                       		moveq	#0,d0
00018E6E 1028 0024                  		move.b	$24(a0),d0
00018E72 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018E76 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018E7A 4EFA 8304                  		jmp	MarkObjGone
00018E7E                            ; ===========================================================================
00018E7E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018E80 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018E82 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018E84 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018E86                            ; ===========================================================================
00018E86                            
00018E86                            Obj79_Main:				; XREF: Obj79_Index
00018E86 5428 0024                  		addq.b	#2,$24(a0)
00018E8A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018E92 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018E98 117C 0004 0001             		move.b	#4,1(a0)
00018E9E 117C 0008 0019             		move.b	#8,$19(a0)
00018EA4 117C 0005 0018             		move.b	#5,$18(a0)
00018EAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018EAE 7000                       		moveq	#0,d0
00018EB0 1028 0023                  		move.b	$23(a0),d0
00018EB4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018EBA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018EC0 6600                       		bne.s	Obj79_RedLamp
00018EC2 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018EC6 0201 007F                  		andi.b	#$7F,d1
00018ECA 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018ECE 0202 007F                  		andi.b	#$7F,d2
00018ED2 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018ED4 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018ED6                            
00018ED6                            Obj79_RedLamp:
00018ED6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EDC 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018EE2 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018EE8 4E75                       		rts	
00018EEA                            ; ===========================================================================
00018EEA                            
00018EEA                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018EEA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018EEE 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018EF2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018EF6 6B00 0000                  		bmi.w	locret_16F90
00018EFA 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018EFE 0201 007F                  		andi.b	#$7F,d1
00018F02 1428 0028                  		move.b	$28(a0),d2
00018F06 0202 007F                  		andi.b	#$7F,d2
00018F0A B202                       		cmp.b	d2,d1
00018F0C 6500                       		bcs.s	Obj79_HitLamp
00018F0E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018F12 7000                       		moveq	#0,d0
00018F14 1028 0023                  		move.b	$23(a0),d0
00018F18 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018F1E 117C 0004 0024             		move.b	#4,$24(a0)
00018F24 117C 0003 001A             		move.b	#3,$1A(a0)
00018F2A 6000 0000                  		bra.w	locret_16F90
00018F2E                            ; ===========================================================================
00018F2E                            
00018F2E                            Obj79_HitLamp:
00018F2E 3038 D008                  		move.w	($FFFFD008).w,d0
00018F32 9068 0008                  		sub.w	8(a0),d0
00018F36 5040                       		addq.w	#8,d0
00018F38 0C40 0010                  		cmpi.w	#$10,d0
00018F3C 6400 0000                  		bcc.w	locret_16F90
00018F40 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018F44 9068 000C                  		sub.w	$C(a0),d0
00018F48 0640 0040                  		addi.w	#$40,d0
00018F4C 0C40 0068                  		cmpi.w	#$68,d0
00018F50 6400                       		bcc.s	locret_16F90
00018F52 303C 00A1                  		move.w	#$A1,d0
00018F56 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018F5C 5428 0024                  		addq.b	#2,$24(a0)
00018F60 4EB9 0000 F55E             		jsr	SingleObjLoad
00018F66 6600                       		bne.s	loc_16F76
00018F68 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018F6C 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018F72 3368 0008 0030             		move.w	8(a0),$30(a1)
00018F78 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018F7E 0469 0018 0032             		subi.w	#$18,$32(a1)
00018F84 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018F8C 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018F92 137C 0004 0001             		move.b	#4,1(a1)
00018F98 137C 0008 0019             		move.b	#8,$19(a1)
00018F9E 137C 0004 0018             		move.b	#4,$18(a1)
00018FA4 137C 0002 001A             		move.b	#2,$1A(a1)
00018FAA 337C 0020 0036             		move.w	#$20,$36(a1)
00018FB0                            
00018FB0                            loc_16F76:
00018FB0 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018FB6 6100 0000                  		bsr.w	Obj79_StoreInfo
00018FBA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018FBE 7000                       		moveq	#0,d0
00018FC0 1028 0023                  		move.b	$23(a0),d0
00018FC4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018FCA                            
00018FCA                            locret_16F90:
00018FCA 4E75                       		rts	
00018FCC                            ; ===========================================================================
00018FCC                            
00018FCC                            Obj79_AfterHit:				; XREF: Obj79_Index
00018FCC 4E75                       		rts	
00018FCE                            ; ===========================================================================
00018FCE                            
00018FCE                            Obj79_Twirl:				; XREF: Obj79_Index
00018FCE 5368 0036                  		subq.w	#1,$36(a0)
00018FD2 6A00                       		bpl.s	loc_16FA0
00018FD4 117C 0004 0024             		move.b	#4,$24(a0)
00018FDA                            
00018FDA                            loc_16FA0:
00018FDA 1028 0026                  		move.b	$26(a0),d0
00018FDE 0428 0010 0026             		subi.b	#$10,$26(a0)
00018FE4 0400 0040                  		subi.b	#$40,d0
00018FE8 4EB9 0000 2B7C             		jsr	(CalcSine).l
00018FEE C3FC 0C00                  		muls.w	#$C00,d1
00018FF2 4841                       		swap	d1
00018FF4 D268 0030                  		add.w	$30(a0),d1
00018FF8 3141 0008                  		move.w	d1,8(a0)
00018FFC C1FC 0C00                  		muls.w	#$C00,d0
00019000 4840                       		swap	d0
00019002 D068 0032                  		add.w	$32(a0),d0
00019006 3140 000C                  		move.w	d0,$C(a0)
0001900A 4E75                       		rts	
0001900C                            ; ===========================================================================
0001900C                            ; ---------------------------------------------------------------------------
0001900C                            ; Subroutine to	store information when you hit a lamppost
0001900C                            ; ---------------------------------------------------------------------------
0001900C                            
0001900C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001900C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00019012 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00019018 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001901E 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00019024 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001902A 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00019030 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00019036 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001903C 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00019042 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00019048 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001904E 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00019054 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001905A 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00019060 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00019066 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001906C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019072 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00019078 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001907E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00019084 4E75                       		rts	
00019086                            
00019086                            ; ---------------------------------------------------------------------------
00019086                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019086                            ; ---------------------------------------------------------------------------
00019086                            
00019086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019086                            
00019086                            
00019086                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00019086 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001908C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00019092 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00019098 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001909E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000190A4 4278 FE20                  		clr.w	($FFFFFE20).w
000190A8 4238 FE1B                  		clr.b	($FFFFFE1B).w
000190AC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000190B2 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000190B8 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000190BC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000190C2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000190C8 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000190CE 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000190D4 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000190DA 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000190E0 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000190E6 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000190EC 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000190F2 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000190F8 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000190FE 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00019104 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001910A 6600                       		bne.s	loc_170E4
0001910C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00019112 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019118 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001911E                            
0001911E                            loc_170E4:
0001911E 4A38 FE30                  		tst.b	($FFFFFE30).w
00019122 6A00                       		bpl.s	locret_170F6
00019124 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019128 0440 00A0                  		subi.w	#$A0,d0
0001912C 31C0 F728                  		move.w	d0,($FFFFF728).w
00019130                            
00019130                            locret_170F6:
00019130 4E75                       		rts	
00019132                            ; End of function Obj79_LoadInfo
00019132                            
00019132                            ; ===========================================================================
00019132                            ; ---------------------------------------------------------------------------
00019132                            ; Sprite mappings - lamppost
00019132                            ; ---------------------------------------------------------------------------
00019132                            Map_obj79:
00019132                            	include "_maps\obj79.asm"
00019132                            ; ---------------------------------------------------------------------------
00019132                            ; Sprite mappings - lamppost
00019132                            ; ---------------------------------------------------------------------------
00019132 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00019136 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001913A 06                         byte_17100:	dc.b 6
0001913B E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019140 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019145 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001914A F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001914F D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019154 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00019159 04                         byte_1711F:	dc.b 4
0001915A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001915F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019164 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019169 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001916E 02                         byte_17134:	dc.b 2
0001916F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019174 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00019179 06                         byte_1713F:	dc.b 6
0001917A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001917F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019184 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019189 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001918E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00019193 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00019198                            		even
00019198                            		even
00019198                            
00019198                            ; ===========================================================================
00019198                            ; ---------------------------------------------------------------------------
00019198                            ; Object 7D - hidden points at the end of a level
00019198                            ; ---------------------------------------------------------------------------
00019198                            
00019198                            Obj7D:					; XREF: Obj_Index
00019198 7000                       		moveq	#0,d0
0001919A 1028 0024                  		move.b	$24(a0),d0
0001919E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000191A2 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000191A6                            ; ===========================================================================
000191A6 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000191A8 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000191AA                            ; ===========================================================================
000191AA                            
000191AA                            Obj7D_Main:				; XREF: Obj7D_Index
000191AA 7410                       		moveq	#$10,d2
000191AC 3602                       		move.w	d2,d3
000191AE D643                       		add.w	d3,d3
000191B0 43F8 D000                  		lea	($FFFFD000).w,a1
000191B4 3029 0008                  		move.w	8(a1),d0
000191B8 9068 0008                  		sub.w	8(a0),d0
000191BC D042                       		add.w	d2,d0
000191BE B043                       		cmp.w	d3,d0
000191C0 6400                       		bcc.s	Obj7D_ChkDel
000191C2 3229 000C                  		move.w	$C(a1),d1
000191C6 9268 000C                  		sub.w	$C(a0),d1
000191CA D242                       		add.w	d2,d1
000191CC B243                       		cmp.w	d3,d1
000191CE 6400                       		bcc.s	Obj7D_ChkDel
000191D0 4A78 FE08                  		tst.w	($FFFFFE08).w
000191D4 6600                       		bne.s	Obj7D_ChkDel
000191D6 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000191DA 6600                       		bne.s	Obj7D_ChkDel
000191DC 5428 0024                  		addq.b	#2,$24(a0)
000191E0 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000191E8 317C 84B6 0002             		move.w	#$84B6,2(a0)
000191EE 0028 0004 0001             		ori.b	#4,1(a0)
000191F4 117C 0000 0018             		move.b	#0,$18(a0)
000191FA 117C 0010 0019             		move.b	#$10,$19(a0)
00019200 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00019206 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001920C 303C 00C9                  		move.w	#$C9,d0
00019210 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bonus sound
00019216 7000                       		moveq	#0,d0
00019218 1028 0028                  		move.b	$28(a0),d0
0001921C D040                       		add.w	d0,d0
0001921E 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00019222 4EB9 0000 0000             		jsr	AddPoints
00019228                            
00019228                            Obj7D_ChkDel:
00019228 3028 0008                  		move.w	8(a0),d0
0001922C 0240 FF80                  		andi.w	#$FF80,d0
00019230 3238 F700                  		move.w	($FFFFF700).w,d1
00019234 0441 0080                  		subi.w	#$80,d1
00019238 0241 FF80                  		andi.w	#$FF80,d1
0001923C 9041                       		sub.w	d1,d0
0001923E 0C40 0280                  		cmpi.w	#$280,d0
00019242 6200                       		bhi.s	Obj7D_Delete
00019244 4E75                       		rts	
00019246                            ; ===========================================================================
00019246                            
00019246                            Obj7D_Delete:
00019246 4EF9 0000 F106             		jmp	DeleteObject
0001924C                            ; ===========================================================================
0001924C 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001924E 03E8                       		dc.w 1000
00019250 0064                       		dc.w 100
00019252 000A                       		dc.w 10
00019254                            ; ===========================================================================
00019254                            
00019254                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019254 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019258 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001925A 3028 0008                  		move.w	8(a0),d0
0001925E 0240 FF80                  		andi.w	#-$80,d0
00019262 3238 F700                  		move.w	($FFFFF700).w,d1
00019266 0441 0080                  		subi.w	#$80,d1
0001926A 0241 FF80                  		andi.w	#-$80,d1
0001926E 9041                       		sub.w	d1,d0
00019270 0C40 0280                  		cmpi.w	#$280,d0
00019274 6200                       		bhi.s	Obj7D_Delete2
00019276 4EF9 0000 F0CA             		jmp	DisplaySprite
0001927C                            ; ===========================================================================
0001927C                            
0001927C                            Obj7D_Delete2:
0001927C 4EF9 0000 F106             		jmp	DeleteObject
00019282                            ; ===========================================================================
00019282                            ; ---------------------------------------------------------------------------
00019282                            ; Sprite mappings - hidden points at the end of	a level
00019282                            ; ---------------------------------------------------------------------------
00019282                            Map_obj7D:
00019282                            	include "_maps\obj7D.asm"
00019282                            ; ---------------------------------------------------------------------------
00019282                            ; Sprite mappings - hidden points at the end of	a level
00019282                            ; ---------------------------------------------------------------------------
00019282 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00019286 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001928A 00                         byte_17250:	dc.b 0
0001928B 01                         byte_17251:	dc.b 1
0001928C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00019291 01                         byte_17257:	dc.b 1
00019292 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00019297 01                         byte_1725D:	dc.b 1
00019298 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001929E 00                         		even
0001929E 00                         		even
0001929E                            
0001929E                            ; ===========================================================================
0001929E                            ; ---------------------------------------------------------------------------
0001929E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001929E                            ; ---------------------------------------------------------------------------
0001929E                            
0001929E                            Obj8A:					; XREF: Obj_Index
0001929E 7000                       		moveq	#0,d0
000192A0 1028 0024                  		move.b	$24(a0),d0
000192A4 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000192A8 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000192AC                            ; ===========================================================================
000192AC 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000192AE 0000                       		dc.w Obj8A_Display-Obj8A_Index
000192B0                            ; ===========================================================================
000192B0                            
000192B0                            Obj8A_Main:				; XREF: Obj8A_Index
000192B0 5428 0024                  		addq.b	#2,$24(a0)
000192B4 317C 0120 0008             		move.w	#$120,8(a0)
000192BA 317C 00F0 000A             		move.w	#$F0,$A(a0)
000192C0 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000192C8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000192CE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000192D2 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000192D6 117C 0000 0001             		move.b	#0,1(a0)
000192DC 117C 0000 0018             		move.b	#0,$18(a0)
000192E2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000192E8 6600                       		bne.s	Obj8A_Display	; if not, branch
000192EA 317C 00A6 0002             		move.w	#$A6,2(a0)
000192F0 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000192F6 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000192FA 6700                       		beq.s	Obj8A_Display	; if not, branch
000192FC 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00019302 6600                       		bne.s	Obj8A_Display	; if not, branch
00019304 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd Palette, 1st entry = white
0001930A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd Palette, 2nd entry = cyan
00019310 4EF9 0000 F106             		jmp	DeleteObject
00019316                            ; ===========================================================================
00019316                            
00019316                            Obj8A_Display:				; XREF: Obj8A_Index
00019316 4EF9 0000 F0CA             		jmp	DisplaySprite
0001931C                            ; ===========================================================================
0001931C                            ; ---------------------------------------------------------------------------
0001931C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001931C                            ; ---------------------------------------------------------------------------
0001931C                            Map_obj8A:
0001931C                            	include "_maps\obj8A.asm"
0001931C                            ; ---------------------------------------------------------------------------
0001931C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001931C                            ; ---------------------------------------------------------------------------
0001931C 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00019320 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00019324 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00019328 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001932C 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00019330 0000                       		dc.w byte_176A9-Map_obj8A
00019332 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019333 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019338 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001933D F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019342 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019347 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001934C F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00019351 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019356 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001935B F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00019360 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019365 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001936A F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001936F F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019374 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00019379 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001937A D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001937F D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00019384 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00019389 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
0001938E D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00019393 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00019398 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001939D D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000193A2 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000193A7 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000193AC 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000193B1 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000193B6 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000193BB 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000193C0 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000193C5 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000193CA 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000193CB D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000193D0 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000193D5 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000193DA D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000193DF D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000193E4 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000193E9 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000193EE 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000193F3 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000193F8 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000193FD 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000193FE D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00019403 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00019408 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
0001940D D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00019412 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019417 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
0001941C D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00019421 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00019426 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001942B D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00019430 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019435 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
0001943A D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001943F D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019444 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00019449 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001944E 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019453 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00019458 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001945D 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019462 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019467 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001946C 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00019471 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019476 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019477 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001947C D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00019481 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00019486 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001948B D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00019490 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00019495 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001949A 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
0001949F 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000194A4 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000194A9 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000194AE 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000194B3 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000194B8 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000194BD 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000194C2 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000194C7 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000194CC 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000194D1 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000194D6 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000194DB 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000194DC D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000194E1 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000194E6 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000194EB D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000194F0 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000194F5 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000194FA D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000194FF D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00019504 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00019509 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001950E D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00019513 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00019518 0809 0008 88               		dc.b 8,	9, 0, 8, $88
0001951D 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00019522 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00019527 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001952C 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00019531 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019536 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
0001953B 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00019540 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019545 0805 0004 28               		dc.b 8,	5, 0, 4, $28
0001954A 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001954F 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019554 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00019559 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001955E 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001955F D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019564 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00019569 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001956E D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019573 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00019578 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001957D D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00019582 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00019587 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001958C D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00019591 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00019596 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001959B 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000195A0 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000195A5 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000195AA 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000195AF 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000195B4 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000195B9 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000195BE 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000195C3 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000195C8 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000195CD 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000195D2 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000195D3 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000195D8 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000195DD D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000195E2 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000195E7 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000195EC D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000195F1 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000195F6 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000195FB D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00019600 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00019605 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
0001960A D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
0001960F D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00019614 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00019619 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
0001961E 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019623 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019628 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001962D 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019632 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019637 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001963C 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00019641 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019646 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
0001964B 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00019650 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019655 0001 0046 74               		dc.b 0,	1, 0, $46, $74
0001965A 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
0001965F 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019664 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019669 2005 0004 28               		dc.b $20, 5, 0,	4, $28
0001966E 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
0001966F F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019674 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019679 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001967E F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019683 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00019688 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001968D F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019692 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019697 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001969C F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
000196A1 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000196A6 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000196AB F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000196B0 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000196B5 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000196BA 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000196BB 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000196C0 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000196C5 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000196CA 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000196CF 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000196D4 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000196D9 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000196DE 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000196E3 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000196E4 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000196E9 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000196EE E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000196F3 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000196F8 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000196FD E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019702 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019707 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001970C E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00019711 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00019716 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
0001971B 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00019720 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019725 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001972A 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001972F 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019734 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001973A 00                         		even
0001973A 00                         		even
0001973A                            
0001973A                            ; ===========================================================================
0001973A                            ; ---------------------------------------------------------------------------
0001973A                            ; Object 3D - Eggman (GHZ)
0001973A                            ; ---------------------------------------------------------------------------
0001973A                            
0001973A                            Obj3D:					; XREF: Obj_Index
0001973A 7000                       		moveq	#0,d0
0001973C 1028 0024                  		move.b	$24(a0),d0
00019740 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019744 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00019748                            ; ===========================================================================
00019748 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001974A 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001974C 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001974E 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00019750                            
00019750 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019752 0401                       		dc.b 4,	1
00019754 0607                       		dc.b 6,	7
00019756                            ; ===========================================================================
00019756                            
00019756                            Obj3D_Main:				; XREF: Obj3D_Index
00019756 45F9 0001 9750             		lea	(Obj3D_ObjData).l,a2
0001975C 2248                       		movea.l	a0,a1
0001975E 7202                       		moveq	#2,d1
00019760 6000                       		bra.s	Obj3D_LoadBoss
00019762                            ; ===========================================================================
00019762                            
00019762                            Obj3D_Loop:
00019762 4EB9 0000 F574             		jsr	SingleObjLoad2
00019768 6600                       		bne.s	loc_17772
0001976A                            
0001976A                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001976A 135A 0024                  		move.b	(a2)+,$24(a1)
0001976E 12BC 003D                  		move.b	#$3D,0(a1)
00019772 3368 0008 0008             		move.w	8(a0),8(a1)
00019778 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001977E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019786 337C 0400 0002             		move.w	#$400,2(a1)
0001978C 137C 0004 0001             		move.b	#4,1(a1)
00019792 137C 0020 0019             		move.b	#$20,$19(a1)
00019798 137C 0003 0018             		move.b	#3,$18(a1)
0001979E 135A 001C                  		move.b	(a2)+,$1C(a1)
000197A2 2348 0034                  		move.l	a0,$34(a1)
000197A6 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000197AA                            
000197AA                            loc_17772:
000197AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000197B0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000197B6 117C 000F 0020             		move.b	#$F,$20(a0)
000197BC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000197C2                            
000197C2                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000197C2 7000                       		moveq	#0,d0
000197C4 1028 0025                  		move.b	$25(a0),d0
000197C8 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000197CC 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000197D0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000197D6 4EB9 0000 C20C             		jsr	AnimateSprite
000197DC 1028 0022                  		move.b	$22(a0),d0
000197E0 0200 0003                  		andi.b	#3,d0
000197E4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197EA 8128 0001                  		or.b	d0,1(a0)
000197EE 4EF9 0000 F0CA             		jmp	DisplaySprite
000197F4                            ; ===========================================================================
000197F4 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000197F6 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000197F8 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000197FA 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000197FC 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000197FE 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019800 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019802                            ; ===========================================================================
00019802                            
00019802                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019802 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019808 6100 0000                  		bsr.w	BossMove
0001980C 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019812 6600                       		bne.s	loc_177E6
00019814 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001981A 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001981E                            
0001981E                            loc_177E6:
0001981E 1028 003F                  		move.b	$3F(a0),d0
00019822 4EB9 0000 2B7C             		jsr	(CalcSine).l
00019828 EC40                       		asr.w	#6,d0
0001982A D068 0038                  		add.w	$38(a0),d0
0001982E 3140 000C                  		move.w	d0,$C(a0)
00019832 3168 0030 0008             		move.w	$30(a0),8(a0)
00019838 5428 003F                  		addq.b	#2,$3F(a0)
0001983C 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019842 6400                       		bcc.s	locret_1784A
00019844 4A28 0022                  		tst.b	$22(a0)
00019848 6B00                       		bmi.s	loc_1784C
0001984A 4A28 0020                  		tst.b	$20(a0)
0001984E 6600                       		bne.s	locret_1784A
00019850 4A28 003E                  		tst.b	$3E(a0)
00019854 6600                       		bne.s	Obj3D_ShipFlash
00019856 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001985C 303C 00AC                  		move.w	#$AC,d0
00019860 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019866                            
00019866                            Obj3D_ShipFlash:
00019866 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd Palette, 2nd	entry
0001986A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001986C 4A51                       		tst.w	(a1)
0001986E 6600                       		bne.s	loc_1783C
00019870 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019874                            
00019874                            loc_1783C:
00019874 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019876 5328 003E                  		subq.b	#1,$3E(a0)
0001987A 6600                       		bne.s	locret_1784A
0001987C 117C 000F 0020             		move.b	#$F,$20(a0)
00019882                            
00019882                            locret_1784A:
00019882 4E75                       		rts	
00019884                            ; ===========================================================================
00019884                            
00019884                            loc_1784C:				; XREF: loc_177E6
00019884 7064                       		moveq	#100,d0
00019886 6100 0000                  		bsr.w	AddPoints
0001988A 117C 0008 0025             		move.b	#8,$25(a0)
00019890 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019896 4E75                       		rts	
00019898                            
00019898                            ; ---------------------------------------------------------------------------
00019898                            ; Defeated boss	subroutine
00019898                            ; ---------------------------------------------------------------------------
00019898                            
00019898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019898                            
00019898                            
00019898                            BossDefeated:
00019898 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001989C 0200 0007                  		andi.b	#7,d0
000198A0 6600                       		bne.s	locret_178A2
000198A2 4EB9 0000 F55E             		jsr	SingleObjLoad
000198A8 6600                       		bne.s	locret_178A2
000198AA 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000198AE 3368 0008 0008             		move.w	8(a0),8(a1)
000198B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198BA 4EB9 0000 2B56             		jsr	(RandomNumber).l
000198C0 3200                       		move.w	d0,d1
000198C2 7200                       		moveq	#0,d1
000198C4 1200                       		move.b	d0,d1
000198C6 E409                       		lsr.b	#2,d1
000198C8 0441 0020                  		subi.w	#$20,d1
000198CC D369 0008                  		add.w	d1,8(a1)
000198D0 E048                       		lsr.w	#8,d0
000198D2 E608                       		lsr.b	#3,d0
000198D4 D169 000C                  		add.w	d0,$C(a1)
000198D8                            
000198D8                            locret_178A2:
000198D8 4E75                       		rts	
000198DA                            ; End of function BossDefeated
000198DA                            
000198DA                            ; ---------------------------------------------------------------------------
000198DA                            ; Subroutine to	move a boss
000198DA                            ; ---------------------------------------------------------------------------
000198DA                            
000198DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198DA                            
000198DA                            
000198DA                            BossMove:
000198DA 2428 0030                  		move.l	$30(a0),d2
000198DE 2628 0038                  		move.l	$38(a0),d3
000198E2 3028 0010                  		move.w	$10(a0),d0
000198E6 48C0                       		ext.l	d0
000198E8 E180                       		asl.l	#8,d0
000198EA D480                       		add.l	d0,d2
000198EC 3028 0012                  		move.w	$12(a0),d0
000198F0 48C0                       		ext.l	d0
000198F2 E180                       		asl.l	#8,d0
000198F4 D680                       		add.l	d0,d3
000198F6 2142 0030                  		move.l	d2,$30(a0)
000198FA 2143 0038                  		move.l	d3,$38(a0)
000198FE 4E75                       		rts	
00019900                            ; End of function BossMove
00019900                            
00019900                            ; ===========================================================================
00019900                            
00019900                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019900 317C FF00 0010             		move.w	#-$100,$10(a0)
00019906 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001990C 6100 FFCC                  		bsr.w	BossMove
00019910 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019916 6600                       		bne.s	loc_17916
00019918 317C 0000 0010             		move.w	#0,$10(a0)
0001991E 317C 0000 0012             		move.w	#0,$12(a0)
00019924 5428 0025                  		addq.b	#2,$25(a0)
00019928 4EB9 0000 F574             		jsr	SingleObjLoad2
0001992E 6600                       		bne.s	loc_17910
00019930 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00019934 3368 0030 0008             		move.w	$30(a0),8(a1)
0001993A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019940 2348 0034                  		move.l	a0,$34(a1)
00019944                            
00019944                            loc_17910:
00019944 317C 0077 003C             		move.w	#$77,$3C(a0)
0001994A                            
0001994A                            loc_17916:
0001994A 6000 FED2                  		bra.w	loc_177E6
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0001994E 5368 003C                  		subq.w	#1,$3C(a0)
00019952 6A00                       		bpl.s	Obj3D_Reverse
00019954 5428 0025                  		addq.b	#2,$25(a0)
00019958 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001995E 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019964 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001996A 6600                       		bne.s	Obj3D_Reverse
0001996C 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019972 317C 0040 0010             		move.w	#$40,$10(a0)
00019978                            
00019978                            Obj3D_Reverse:
00019978 0828 0000 0022             		btst	#0,$22(a0)
0001997E 6600                       		bne.s	loc_17950
00019980 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019984                            
00019984                            loc_17950:
00019984 6000 FE98                  		bra.w	loc_177E6
00019988                            ; ===========================================================================
00019988                            
00019988                            loc_17954:				; XREF: Obj3D_ShipIndex
00019988 5368 003C                  		subq.w	#1,$3C(a0)
0001998C 6B00                       		bmi.s	loc_17960
0001998E 6100 FF4A                  		bsr.w	BossMove
00019992 6000                       		bra.s	loc_17976
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_17960:
00019994 0868 0000 0022             		bchg	#0,$22(a0)
0001999A 317C 003F 003C             		move.w	#$3F,$3C(a0)
000199A0 5528 0025                  		subq.b	#2,$25(a0)
000199A4 317C 0000 0010             		move.w	#0,$10(a0)
000199AA                            
000199AA                            loc_17976:
000199AA 6000 FE72                  		bra.w	loc_177E6
000199AE                            ; ===========================================================================
000199AE                            
000199AE                            loc_1797A:				; XREF: Obj3D_ShipIndex
000199AE 5368 003C                  		subq.w	#1,$3C(a0)
000199B2 6B00                       		bmi.s	loc_17984
000199B4 6000 FEE2                  		bra.w	BossDefeated
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            loc_17984:
000199B8 08E8 0000 0022             		bset	#0,$22(a0)
000199BE 08A8 0007 0022             		bclr	#7,$22(a0)
000199C4 4268 0010                  		clr.w	$10(a0)
000199C8 5428 0025                  		addq.b	#2,$25(a0)
000199CC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000199D2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000199D6 6600                       		bne.s	locret_179AA
000199D8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000199DE                            
000199DE                            locret_179AA:
000199DE 4E75                       		rts	
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            loc_179AC:				; XREF: Obj3D_ShipIndex
000199E0 5268 003C                  		addq.w	#1,$3C(a0)
000199E4 6700                       		beq.s	loc_179BC
000199E6 6A00                       		bpl.s	loc_179C2
000199E8 0668 0018 0012             		addi.w	#$18,$12(a0)
000199EE 6000                       		bra.s	loc_179EE
000199F0                            ; ===========================================================================
000199F0                            
000199F0                            loc_179BC:
000199F0 4268 0012                  		clr.w	$12(a0)
000199F4 6000                       		bra.s	loc_179EE
000199F6                            ; ===========================================================================
000199F6                            
000199F6                            loc_179C2:
000199F6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000199FC 6500                       		bcs.s	loc_179DA
000199FE 6700                       		beq.s	loc_179E0
00019A00 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019A06 6500                       		bcs.s	loc_179EE
00019A08 5428 0025                  		addq.b	#2,$25(a0)
00019A0C 6000                       		bra.s	loc_179EE
00019A0E                            ; ===========================================================================
00019A0E                            
00019A0E                            loc_179DA:
00019A0E 5168 0012                  		subq.w	#8,$12(a0)
00019A12 6000                       		bra.s	loc_179EE
00019A14                            ; ===========================================================================
00019A14                            
00019A14                            loc_179E0:
00019A14 4268 0012                  		clr.w	$12(a0)
00019A18                            		
00019A18 6100 0000                  		bsr.w	BossEnd
00019A1C                            
00019A1C                            loc_179EE:
00019A1C 6100 FEBC                  		bsr.w	BossMove
00019A20 6000 FDFC                  		bra.w	loc_177E6
00019A24                            ; ===========================================================================
00019A24                            
00019A24                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019A24 317C 0400 0010             		move.w	#$400,$10(a0)
00019A2A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019A30 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019A36 6700                       		beq.s	loc_17A10
00019A38 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019A3C 6000                       		bra.s	loc_17A16
00019A3E                            ; ===========================================================================
00019A3E                            
00019A3E                            loc_17A10:
00019A3E 4A28 0001                  		tst.b	1(a0)
00019A42 6A00                       		bpl.s	Obj3D_ShipDel
00019A44                            
00019A44                            loc_17A16:
00019A44 6100 FE94                  		bsr.w	BossMove
00019A48 6000 FDD4                  		bra.w	loc_177E6
00019A4C                            ; ===========================================================================
00019A4C                            
00019A4C                            Obj3D_ShipDel:
00019A4C 4EF9 0000 F106             		jmp	DeleteObject
00019A52                            ; ===========================================================================
00019A52                            
00019A52                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019A52 7000                       		moveq	#0,d0
00019A54 7201                       		moveq	#1,d1
00019A56 2268 0034                  		movea.l	$34(a0),a1
00019A5A 1029 0025                  		move.b	$25(a1),d0
00019A5E 5900                       		subq.b	#4,d0
00019A60 6600                       		bne.s	loc_17A3E
00019A62 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019A68 6600                       		bne.s	loc_17A46
00019A6A 7204                       		moveq	#4,d1
00019A6C                            
00019A6C                            loc_17A3E:
00019A6C 5D00                       		subq.b	#6,d0
00019A6E 6B00                       		bmi.s	loc_17A46
00019A70 720A                       		moveq	#$A,d1
00019A72 6000                       		bra.s	loc_17A5A
00019A74                            ; ===========================================================================
00019A74                            
00019A74                            loc_17A46:
00019A74 4A29 0020                  		tst.b	$20(a1)
00019A78 6600                       		bne.s	loc_17A50
00019A7A 7205                       		moveq	#5,d1
00019A7C 6000                       		bra.s	loc_17A5A
00019A7E                            ; ===========================================================================
00019A7E                            
00019A7E                            loc_17A50:
00019A7E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019A84 6500                       		bcs.s	loc_17A5A
00019A86 7204                       		moveq	#4,d1
00019A88                            
00019A88                            loc_17A5A:
00019A88 1141 001C                  		move.b	d1,$1C(a0)
00019A8C 5500                       		subq.b	#2,d0
00019A8E 6600                       		bne.s	Obj3D_FaceDisp
00019A90 117C 0006 001C             		move.b	#6,$1C(a0)
00019A96 4A28 0001                  		tst.b	1(a0)
00019A9A 6A00                       		bpl.s	Obj3D_FaceDel
00019A9C                            
00019A9C                            Obj3D_FaceDisp:
00019A9C 6000                       		bra.s	Obj3D_Display
00019A9E                            ; ===========================================================================
00019A9E                            
00019A9E                            Obj3D_FaceDel:
00019A9E 4EF9 0000 F106             		jmp	DeleteObject
00019AA4                            ; ===========================================================================
00019AA4                            
00019AA4                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019AA4 117C 0007 001C             		move.b	#7,$1C(a0)
00019AAA 2268 0034                  		movea.l	$34(a0),a1
00019AAE 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019AB4 6600                       		bne.s	loc_17A96
00019AB6 117C 000B 001C             		move.b	#$B,$1C(a0)
00019ABC 4A28 0001                  		tst.b	1(a0)
00019AC0 6A00                       		bpl.s	Obj3D_FlameDel
00019AC2 6000                       		bra.s	Obj3D_FlameDisp
00019AC4                            ; ===========================================================================
00019AC4                            
00019AC4                            loc_17A96:
00019AC4 3029 0010                  		move.w	$10(a1),d0
00019AC8 6700                       		beq.s	Obj3D_FlameDisp
00019ACA 117C 0008 001C             		move.b	#8,$1C(a0)
00019AD0                            
00019AD0                            Obj3D_FlameDisp:
00019AD0 6000                       		bra.s	Obj3D_Display
00019AD2                            ; ===========================================================================
00019AD2                            
00019AD2                            Obj3D_FlameDel:
00019AD2 4EF9 0000 F106             		jmp	DeleteObject
00019AD8                            ; ===========================================================================
00019AD8                            
00019AD8                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019AD8 2268 0034                  		movea.l	$34(a0),a1
00019ADC 3169 0008 0008             		move.w	8(a1),8(a0)
00019AE2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019AE8 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019AEE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019AF4 4EB9 0000 C20C             		jsr	AnimateSprite
00019AFA 1028 0022                  		move.b	$22(a0),d0
00019AFE 0200 0003                  		andi.b	#3,d0
00019B02 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B08 8128 0001                  		or.b	d0,1(a0)
00019B0C 4EF9 0000 F0CA             		jmp	DisplaySprite
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            BossEnd:
00019B12 7000                       		moveq	#0,d0
00019B14 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00019B18 4E75                       		rts
00019B1A                            ; ===========================================================================
00019B1A                            ; LEVEL MUSIC CONTROLLER
00019B1A                            ; ===========================================================================
00019B1A                            
00019B1A                            CtrlLevelMusic:
00019B1A 4A38 FFBC                  		tst.b	($FFFFFFBC).w		; Has Sonic drowned?
00019B1E 6600                       		bne.s	@end				; If so, skip all this
00019B20 1038 FFFE                  		move.b	($FFFFFFFE).w,d0	; Level music
00019B24 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019B28 6700                       		beq.s	@chk_spdshoes		; If not, check if he has speed shoes
00019B2A 103C 0087                  		move.b	#$87,d0				; Invincibility music
00019B2E                            		
00019B2E                            @chk_spdshoes:
00019B2E 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does he have speed shoes?
00019B32 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019B34 103C 0095                  		move.b	#$95,d0				; Speed shoes music
00019B38 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019B3C 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019B3E 103C 0096                  		move.b	#$96,d0				; Speed shoes + invincibility music
00019B42                            		
00019B42                            @chk_boss:
00019B42 4A38 FFFF                  		tst.b	($FFFFFFFF).w		; Is there a boss?
00019B46 6700                       		beq.s	@chk_drowning		; If not, check if Sonic is drowning
00019B48 7200                       		moveq	#0,d1				; Clear d1
00019B4A 1238 FE10                  		move.b	($FFFFFE10).w,d1	; Set boss number
00019B4E 43F9 0000 5104             		lea	(MusicList_Bosses).l,a1	; Load Music Playlist for bosses
00019B54 1031 1000                  		move.b	(a1,d1.w),d0		; Set music ID
00019B58                            		
00019B58                            @chk_drowning:
00019B58 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w	; Check air remaining
00019B5E 6400                       		bcc.s	@chk_value			; If air is above $C, branch
00019B60 103C 0092                  		move.b	#$92,d0				; Drowning music
00019B64                            		
00019B64                            @chk_value:
00019B64 1238 FFFC                  		move.b	($FFFFFFFC).w,d1	; Get current music playing
00019B68 B200                       		cmp.b	d0,d1				; If the value is the same,
00019B6A 6600                       		bne.s	@play				; don't play it again
00019B6C                            		
00019B6C                            @end:
00019B6C 4E75                       		rts							; Return
00019B6E                            		
00019B6E                            @play:
00019B6E 4EF9 0000 12B6             		jmp	(PlayMusic).l			; Play music and return
00019B74                            ; ===========================================================================
00019B74                            ; ---------------------------------------------------------------------------
00019B74                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019B74                            ; ---------------------------------------------------------------------------
00019B74                            
00019B74                            Obj48:					; XREF: Obj_Index
00019B74 7000                       		moveq	#0,d0
00019B76 1028 0024                  		move.b	$24(a0),d0
00019B7A 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019B7E 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019B82                            ; ===========================================================================
00019B82 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019B84 0000                       		dc.w Obj48_Base-Obj48_Index
00019B86 0000                       		dc.w Obj48_Display2-Obj48_Index
00019B88 0000                       		dc.w loc_17C68-Obj48_Index
00019B8A 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019B8C                            ; ===========================================================================
00019B8C                            
00019B8C                            Obj48_Main:				; XREF: Obj48_Index
00019B8C 5428 0024                  		addq.b	#2,$24(a0)
00019B90 317C 4080 0026             		move.w	#$4080,$26(a0)
00019B96 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019B9C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019BA4 317C 046C 0002             		move.w	#$46C,2(a0)
00019BAA 45E8 0028                  		lea	$28(a0),a2
00019BAE 14FC 0000                  		move.b	#0,(a2)+
00019BB2 7205                       		moveq	#5,d1
00019BB4 2248                       		movea.l	a0,a1
00019BB6 6000                       		bra.s	loc_17B60
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            Obj48_MakeLinks:
00019BB8 4EB9 0000 F574             		jsr	SingleObjLoad2
00019BBE 6600                       		bne.s	Obj48_MakeBall
00019BC0 3368 0008 0008             		move.w	8(a0),8(a1)
00019BC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019BCC 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019BD0 137C 0006 0024             		move.b	#6,$24(a1)
00019BD6 237C 0000 970E 0004        		move.l	#Map_obj15,4(a1)
00019BDE 337C 0380 0002             		move.w	#$380,2(a1)
00019BE4 137C 0001 001A             		move.b	#1,$1A(a1)
00019BEA 5228 0028                  		addq.b	#1,$28(a0)
00019BEE                            
00019BEE                            loc_17B60:				; XREF: Obj48_Main
00019BEE 3A09                       		move.w	a1,d5
00019BF0 0445 D000                  		subi.w	#$D000,d5
00019BF4 EC4D                       		lsr.w	#6,d5
00019BF6 0245 007F                  		andi.w	#$7F,d5
00019BFA 14C5                       		move.b	d5,(a2)+
00019BFC 137C 0004 0001             		move.b	#4,1(a1)
00019C02 137C 0008 0019             		move.b	#8,$19(a1)
00019C08 137C 0006 0018             		move.b	#6,$18(a1)
00019C0E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019C14 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019C18                            
00019C18                            Obj48_MakeBall:
00019C18 137C 0008 0024             		move.b	#8,$24(a1)
00019C1E 237C 0000 9C6C 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019C26 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019C2C 137C 0001 001A             		move.b	#1,$1A(a1)
00019C32 137C 0005 0018             		move.b	#5,$18(a1)
00019C38 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019C3E 4E75                       		rts	
00019C40                            ; ===========================================================================
00019C40                            
00019C40 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019C46                            
00019C46                            ; ===========================================================================
00019C46                            
00019C46                            Obj48_Base:				; XREF: Obj48_Index
00019C46 47F9 0001 9C40             		lea	(Obj48_PosData).l,a3
00019C4C 45E8 0028                  		lea	$28(a0),a2
00019C50 7C00                       		moveq	#0,d6
00019C52 1C1A                       		move.b	(a2)+,d6
00019C54                            
00019C54                            loc_17BC6:
00019C54 7800                       		moveq	#0,d4
00019C56 181A                       		move.b	(a2)+,d4
00019C58 ED4C                       		lsl.w	#6,d4
00019C5A 0684 00FF D000             		addi.l	#$FFD000,d4
00019C60 2244                       		movea.l	d4,a1
00019C62 101B                       		move.b	(a3)+,d0
00019C64 B029 003C                  		cmp.b	$3C(a1),d0
00019C68 6700                       		beq.s	loc_17BE0
00019C6A 5229 003C                  		addq.b	#1,$3C(a1)
00019C6E                            
00019C6E                            loc_17BE0:
00019C6E 51CE FFE4                  		dbf	d6,loc_17BC6
00019C72                            
00019C72 B029 003C                  		cmp.b	$3C(a1),d0
00019C76 6600                       		bne.s	loc_17BFA
00019C78 2268 0034                  		movea.l	$34(a0),a1
00019C7C 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019C82 6600                       		bne.s	loc_17BFA
00019C84 5428 0024                  		addq.b	#2,$24(a0)
00019C88                            
00019C88                            loc_17BFA:
00019C88 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019C8E 6700                       		beq.s	Obj48_Display
00019C90 5268 0032                  		addq.w	#1,$32(a0)
00019C94                            
00019C94                            Obj48_Display:
00019C94 6100 0000                  		bsr.w	sub_17C2A
00019C98 1028 0026                  		move.b	$26(a0),d0
00019C9C 4EB9 0000 9680             		jsr	(Obj15_Move2).l
00019CA2 4EF9 0000 F0CA             		jmp	DisplaySprite
00019CA8                            ; ===========================================================================
00019CA8                            
00019CA8                            Obj48_Display2:				; XREF: Obj48_Index
00019CA8 6100 0000                  		bsr.w	sub_17C2A
00019CAC 4EB9 0000 9640             		jsr	(Obj48_Move).l
00019CB2 4EF9 0000 F0CA             		jmp	DisplaySprite
00019CB8                            
00019CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CB8                            
00019CB8                            
00019CB8                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019CB8 2268 0034                  		movea.l	$34(a0),a1
00019CBC 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019CC2 6400                       		bcc.s	loc_17C3C
00019CC4 0868 0000 001A             		bchg	#0,$1A(a0)
00019CCA                            
00019CCA                            loc_17C3C:
00019CCA 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019CD0 3029 000C                  		move.w	$C(a1),d0
00019CD4 D068 0032                  		add.w	$32(a0),d0
00019CD8 3140 0038                  		move.w	d0,$38(a0)
00019CDC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019CE2 4A29 0022                  		tst.b	$22(a1)
00019CE6 6A00                       		bpl.s	locret_17C66
00019CE8 10BC 003F                  		move.b	#$3F,0(a0)
00019CEC 117C 0000 0024             		move.b	#0,$24(a0)
00019CF2                            
00019CF2                            locret_17C66:
00019CF2 4E75                       		rts	
00019CF4                            ; End of function sub_17C2A
00019CF4                            
00019CF4                            ; ===========================================================================
00019CF4                            
00019CF4                            loc_17C68:				; XREF: Obj48_Index
00019CF4 2268 0034                  		movea.l	$34(a0),a1
00019CF8 4A29 0022                  		tst.b	$22(a1)
00019CFC 6A00                       		bpl.s	Obj48_Display3
00019CFE 10BC 003F                  		move.b	#$3F,0(a0)
00019D02 117C 0000 0024             		move.b	#0,$24(a0)
00019D08                            
00019D08                            Obj48_Display3:
00019D08 4EF9 0000 F0CA             		jmp	DisplaySprite
00019D0E                            ; ===========================================================================
00019D0E                            
00019D0E                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019D0E 7000                       		moveq	#0,d0
00019D10 4A28 001A                  		tst.b	$1A(a0)
00019D14 6600                       		bne.s	Obj48_Vanish
00019D16 5200                       		addq.b	#1,d0
00019D18                            
00019D18                            Obj48_Vanish:
00019D18 1140 001A                  		move.b	d0,$1A(a0)
00019D1C 2268 0034                  		movea.l	$34(a0),a1
00019D20 4A29 0022                  		tst.b	$22(a1)
00019D24 6A00                       		bpl.s	Obj48_Display4
00019D26 117C 0000 0020             		move.b	#0,$20(a0)
00019D2C 6100 FB6A                  		bsr.w	BossDefeated
00019D30 5328 003C                  		subq.b	#1,$3C(a0)
00019D34 6A00                       		bpl.s	Obj48_Display4
00019D36 10BC 003F                  		move.b	#$3F,(a0)
00019D3A 117C 0000 0024             		move.b	#0,$24(a0)
00019D40                            
00019D40                            Obj48_Display4:
00019D40 4EF9 0000 F0CA             		jmp	DisplaySprite
00019D46                            ; ===========================================================================
00019D46                            Ani_Eggman:
00019D46                            	include "_anim\Eggman.asm"
00019D46                            ; ---------------------------------------------------------------------------
00019D46                            ; Animation script - Eggman (bosses)
00019D46                            ; ---------------------------------------------------------------------------
00019D46 0000                       		dc.w byte_17CD4-Ani_Eggman
00019D48 0000                       		dc.w byte_17CD8-Ani_Eggman
00019D4A 0000                       		dc.w byte_17CDC-Ani_Eggman
00019D4C 0000                       		dc.w byte_17CE0-Ani_Eggman
00019D4E 0000                       		dc.w byte_17CE4-Ani_Eggman
00019D50 0000                       		dc.w byte_17CE8-Ani_Eggman
00019D52 0000                       		dc.w byte_17CEC-Ani_Eggman
00019D54 0000                       		dc.w byte_17CF0-Ani_Eggman
00019D56 0000                       		dc.w byte_17CF4-Ani_Eggman
00019D58 0000                       		dc.w byte_17CF8-Ani_Eggman
00019D5A 0000                       		dc.w byte_17CFC-Ani_Eggman
00019D5C 0000                       		dc.w byte_17D00-Ani_Eggman
00019D5E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019D62 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019D66 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019D6A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019D6E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019D72 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019D76 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019D7A 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019D7E 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019D82 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019D86 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019D8A 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019D96                            		even
00019D96                            		even
00019D96                            
00019D96                            ; ---------------------------------------------------------------------------
00019D96                            ; Sprite mappings - Eggman (boss levels)
00019D96                            ; ---------------------------------------------------------------------------
00019D96                            Map_Eggman:
00019D96                            	include "_maps\Eggman.asm"
00019D96                            ; ---------------------------------------------------------------------------
00019D96                            ; Sprite mappings - Eggman (boss levels)
00019D96                            ; ---------------------------------------------------------------------------
00019D96 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019D9A 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019D9E 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019DA2 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019DA6 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019DAA 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019DAE 0000                       		dc.w byte_17DC8-Map_Eggman
00019DB0 06                         byte_17D26:	dc.b 6
00019DB1 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019DB6 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019DBB FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019DC0 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019DC5 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019DCA 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019DCF 02                         byte_17D45:	dc.b 2
00019DD0 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019DD5 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019DDA 02                         byte_17D50:	dc.b 2
00019DDB E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019DE0 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019DE5 03                         byte_17D5B:	dc.b 3
00019DE6 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019DEB EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019DF0 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019DF5 03                         byte_17D6B:	dc.b 3
00019DF6 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019DFB EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019E00 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019E05 03                         byte_17D7B:	dc.b 3
00019E06 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019E0B EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019E10 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019E15 03                         byte_17D8B:	dc.b 3
00019E16 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019E1B E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019E20 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019E25 04                         byte_17D9B:	dc.b 4
00019E26 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019E2B E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019E30 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019E35 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019E3A 01                         byte_17DB0:	dc.b 1
00019E3B 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019E40 01                         byte_17DB6:	dc.b 1
00019E41 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019E46 00                         byte_17DBC:	dc.b 0
00019E47 02                         byte_17DBD:	dc.b 2
00019E48 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019E4D 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019E52 02                         byte_17DC8:	dc.b 2
00019E53 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019E58 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019E5E 00                         		even
00019E5E 00                         		even
00019E5E                            
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            Map_BossItems:
00019E5E                            	include "_maps\Boss items.asm"
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019E62 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019E66 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019E6A 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019E6E 01                         byte_17DE4:	dc.b 1
00019E6F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019E74 02                         byte_17DEA:	dc.b 2
00019E75 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019E7A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019E7F 00                         		dc.b 0
00019E80 01                         byte_17DF6:	dc.b 1
00019E81 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019E86 01                         byte_17DFC:	dc.b 1
00019E87 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019E8C 01                         byte_17E02:	dc.b 1
00019E8D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019E92 04                         byte_17E08:	dc.b 4
00019E93 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019E98 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019E9D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019EA2 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019EA7 00                         		dc.b 0
00019EA8 02                         byte_17E1E:	dc.b 2
00019EA9 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019EAE 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019EB3 00                         		dc.b 0
00019EB4 02                         byte_17E2A:	dc.b 2
00019EB5 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019EBA 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019EC0 00                         		even
00019EC0 00                         		even
00019EC0                            
00019EC0                            ; ===========================================================================
00019EC0                            ; ---------------------------------------------------------------------------
00019EC0                            ; Object 77 - Eggman (LZ)
00019EC0                            ; ---------------------------------------------------------------------------
00019EC0                            
00019EC0                            Obj77:					; XREF: Obj_Index
00019EC0 7000                       		moveq	#0,d0
00019EC2 1028 0024                  		move.b	$24(a0),d0
00019EC6 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019ECA 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019ECE                            ; ===========================================================================
00019ECE 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019ED0 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019ED2 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019ED4 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019ED6                            
00019ED6 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019ED8 0401                       		dc.b 4,	1
00019EDA 0607                       		dc.b 6,	7
00019EDC                            ; ===========================================================================
00019EDC                            
00019EDC                            Obj77_Main:				; XREF: Obj77_Index
00019EDC 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019EE2 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019EE8 3168 0008 0030             		move.w	8(a0),$30(a0)
00019EEE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019EF4 117C 000F 0020             		move.b	#$F,$20(a0)
00019EFA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019F00 117C 0004 0018             		move.b	#4,$18(a0)
00019F06 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019F0A 2248                       		movea.l	a0,a1
00019F0C 7202                       		moveq	#2,d1
00019F0E 6000                       		bra.s	Obj77_LoadBoss
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            Obj77_Loop:
00019F10 4EB9 0000 F574             		jsr	SingleObjLoad2
00019F16 6600                       		bne.s	Obj77_ShipMain
00019F18 12BC 0077                  		move.b	#$77,0(a1)
00019F1C 3368 0008 0008             		move.w	8(a0),8(a1)
00019F22 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019F28                            
00019F28                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019F28 08A8 0000 0022             		bclr	#0,$22(a0)
00019F2E 4229 0025                  		clr.b	$25(a1)
00019F32 135A 0024                  		move.b	(a2)+,$24(a1)
00019F36 135A 001C                  		move.b	(a2)+,$1C(a1)
00019F3A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019F40 237C 0001 9D96 0004        		move.l	#Map_Eggman,4(a1)
00019F48 337C 0400 0002             		move.w	#$400,2(a1)
00019F4E 137C 0004 0001             		move.b	#4,1(a1)
00019F54 137C 0020 0019             		move.b	#$20,$19(a1)
00019F5A 2348 0034                  		move.l	a0,$34(a1)
00019F5E 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019F62                            
00019F62                            Obj77_ShipMain:
00019F62 43F8 D000                  		lea	($FFFFD000).w,a1
00019F66 7000                       		moveq	#0,d0
00019F68 1028 0025                  		move.b	$25(a0),d0
00019F6C 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019F70 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019F74 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
00019F7A 4EB9 0000 C20C             		jsr	AnimateSprite
00019F80 7003                       		moveq	#3,d0
00019F82 C028 0022                  		and.b	$22(a0),d0
00019F86 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F8C 8128 0001                  		or.b	d0,1(a0)
00019F90 4EF9 0000 F0CA             		jmp	DisplaySprite
00019F96                            ; ===========================================================================
00019F96 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019F9A 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019F9E 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019FA2 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019FA6 3029 0008                  		move.w	8(a1),d0
00019FAA 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019FAE 6500                       		bcs.s	loc_17F38
00019FB0 317C FE80 0012             		move.w	#-$180,$12(a0)
00019FB6 317C 0060 0010             		move.w	#$60,$10(a0)
00019FBC 5428 0025                  		addq.b	#2,$25(a0)
00019FC0                            
00019FC0                            loc_17F38:
00019FC0 6100 F918                  		bsr.w	BossMove
00019FC4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019FCA 3168 0030 0008             		move.w	$30(a0),8(a0)
00019FD0                            
00019FD0                            loc_17F48:
00019FD0 4A28 003D                  		tst.b	$3D(a0)
00019FD4 6600                       		bne.s	loc_17F8E
00019FD6 4A28 0022                  		tst.b	$22(a0)
00019FDA 6B00                       		bmi.s	loc_17F92
00019FDC 4A28 0020                  		tst.b	$20(a0)
00019FE0 6600                       		bne.s	locret_17F8C
00019FE2 4A28 003E                  		tst.b	$3E(a0)
00019FE6 6600                       		bne.s	loc_17F70
00019FE8 117C 0020 003E             		move.b	#$20,$3E(a0)
00019FEE 303C 00AC                  		move.w	#$AC,d0
00019FF2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
00019FF8                            
00019FF8                            loc_17F70:
00019FF8 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019FFC 7000                       		moveq	#0,d0
00019FFE 4A51                       		tst.w	(a1)
0001A000 6600                       		bne.s	loc_17F7E
0001A002 303C 0EEE                  		move.w	#$EEE,d0
0001A006                            
0001A006                            loc_17F7E:
0001A006 3280                       		move.w	d0,(a1)
0001A008 5328 003E                  		subq.b	#1,$3E(a0)
0001A00C 6600                       		bne.s	locret_17F8C
0001A00E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A014                            
0001A014                            locret_17F8C:
0001A014 4E75                       		rts	
0001A016                            ; ===========================================================================
0001A016                            
0001A016                            loc_17F8E:				; XREF: loc_17F48
0001A016 6000 F880                  		bra.w	BossDefeated
0001A01A                            ; ===========================================================================
0001A01A                            
0001A01A                            loc_17F92:				; XREF: loc_17F48
0001A01A 7064                       		moveq	#100,d0
0001A01C 6100 0000                  		bsr.w	AddPoints
0001A020 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A026 4E75                       		rts	
0001A028                            ; ===========================================================================
0001A028                            
0001A028                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001A028 70FE                       		moveq	#-2,d0
0001A02A 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001A030 6500                       		bcs.s	loc_17FB6
0001A032 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001A038 4268 0010                  		clr.w	$10(a0)
0001A03C 5240                       		addq.w	#1,d0
0001A03E                            
0001A03E                            loc_17FB6:
0001A03E 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A044 6E00                       		bgt.s	loc_17FCA
0001A046 317C 0500 0038             		move.w	#$500,$38(a0)
0001A04C 4268 0012                  		clr.w	$12(a0)
0001A050 5240                       		addq.w	#1,d0
0001A052                            
0001A052                            loc_17FCA:
0001A052 6600                       		bne.s	loc_17FDC
0001A054 317C 0140 0010             		move.w	#$140,$10(a0)
0001A05A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A060 5428 0025                  		addq.b	#2,$25(a0)
0001A064                            
0001A064                            loc_17FDC:
0001A064 6000 FF5A                  		bra.w	loc_17F38
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A068 70FE                       		moveq	#-2,d0
0001A06A 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A070 6500                       		bcs.s	loc_17FF6
0001A072 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A078 4268 0010                  		clr.w	$10(a0)
0001A07C 5240                       		addq.w	#1,d0
0001A07E                            
0001A07E                            loc_17FF6:
0001A07E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A084 6E00                       		bgt.s	loc_1800A
0001A086 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A08C 4268 0012                  		clr.w	$12(a0)
0001A090 5240                       		addq.w	#1,d0
0001A092                            
0001A092                            loc_1800A:
0001A092 6600                       		bne.s	loc_1801A
0001A094 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A09A 5428 0025                  		addq.b	#2,$25(a0)
0001A09E 4228 003F                  		clr.b	$3F(a0)
0001A0A2                            
0001A0A2                            loc_1801A:
0001A0A2 6000 FF1C                  		bra.w	loc_17F38
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A0A6 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A0AC 6E00                       		bgt.s	loc_1804E
0001A0AE 317C 0100 0038             		move.w	#$100,$38(a0)
0001A0B4 317C 0140 0010             		move.w	#$140,$10(a0)
0001A0BA 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A0C0 4A28 003D                  		tst.b	$3D(a0)
0001A0C4 6700                       		beq.s	loc_18046
0001A0C6 E1E8 0010                  		asl	$10(a0)
0001A0CA E1E8 0012                  		asl	$12(a0)
0001A0CE                            
0001A0CE                            loc_18046:
0001A0CE 5428 0025                  		addq.b	#2,$25(a0)
0001A0D2 6000 FEEC                  		bra.w	loc_17F38
0001A0D6                            ; ===========================================================================
0001A0D6                            
0001A0D6                            loc_1804E:
0001A0D6 08E8 0000 0022             		bset	#0,$22(a0)
0001A0DC 5428 003F                  		addq.b	#2,$3F(a0)
0001A0E0 1028 003F                  		move.b	$3F(a0),d0
0001A0E4 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001A0EA 4A41                       		tst.w	d1
0001A0EC 6A00                       		bpl.s	loc_1806C
0001A0EE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0F4                            
0001A0F4                            loc_1806C:
0001A0F4 E840                       		asr.w	#4,d0
0001A0F6 4840                       		swap	d0
0001A0F8 4240                       		clr.w	d0
0001A0FA D0A8 0030                  		add.l	$30(a0),d0
0001A0FE 4840                       		swap	d0
0001A100 3140 0008                  		move.w	d0,8(a0)
0001A104 3028 0012                  		move.w	$12(a0),d0
0001A108 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A10C 9268 000C                  		sub.w	$C(a0),d1
0001A110 6500                       		bcs.s	loc_180A2
0001A112 0441 0048                  		subi.w	#$48,d1
0001A116 6500                       		bcs.s	loc_180A2
0001A118 E240                       		asr.w	#1,d0
0001A11A 0441 0028                  		subi.w	#$28,d1
0001A11E 6500                       		bcs.s	loc_180A2
0001A120 E240                       		asr.w	#1,d0
0001A122 0441 0028                  		subi.w	#$28,d1
0001A126 6500                       		bcs.s	loc_180A2
0001A128 7000                       		moveq	#0,d0
0001A12A                            
0001A12A                            loc_180A2:
0001A12A 48C0                       		ext.l	d0
0001A12C E180                       		asl.l	#8,d0
0001A12E 4A28 003D                  		tst.b	$3D(a0)
0001A132 6700                       		beq.s	loc_180AE
0001A134 D080                       		add.l	d0,d0
0001A136                            
0001A136                            loc_180AE:
0001A136 D1A8 0038                  		add.l	d0,$38(a0)
0001A13A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A140 6000 FE8E                  		bra.w	loc_17F48
0001A144                            ; ===========================================================================
0001A144                            
0001A144                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A144 70FE                       		moveq	#-2,d0
0001A146 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A14C 6500                       		bcs.s	loc_180D2
0001A14E 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A154 4268 0010                  		clr.w	$10(a0)
0001A158 5240                       		addq.w	#1,d0
0001A15A                            
0001A15A                            loc_180D2:
0001A15A 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A160 6E00                       		bgt.s	loc_180E6
0001A162 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A168 4268 0012                  		clr.w	$12(a0)
0001A16C 5240                       		addq.w	#1,d0
0001A16E                            
0001A16E                            loc_180E6:
0001A16E 6600                       		bne.s	loc_180F2
0001A170 5428 0025                  		addq.b	#2,$25(a0)
0001A174 08A8 0000 0022             		bclr	#0,$22(a0)
0001A17A                            
0001A17A                            loc_180F2:
0001A17A 6000 FE44                  		bra.w	loc_17F38
0001A17E                            ; ===========================================================================
0001A17E                            
0001A17E                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A17E 4A28 003D                  		tst.b	$3D(a0)
0001A182 6600                       		bne.s	loc_18112
0001A184 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A18A 6D00                       		blt.s	loc_18126
0001A18C 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A192 6E00                       		bgt.s	loc_18126
0001A194 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A19A                            
0001A19A                            loc_18112:
0001A19A                            		
0001A19A 6100 F976                  		bsr.w	BossEnd
0001A19E                            		
0001A19E 08E8 0000 0022             		bset	#0,$22(a0)
0001A1A4 5428 0025                  		addq.b	#2,$25(a0)
0001A1A8                            
0001A1A8                            loc_18126:
0001A1A8 6000 FE16                  		bra.w	loc_17F38
0001A1AC                            ; ===========================================================================
0001A1AC                            
0001A1AC                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A1AC 4A28 003D                  		tst.b	$3D(a0)
0001A1B0 6600                       		bne.s	loc_18136
0001A1B2 5328 003C                  		subq.b	#1,$3C(a0)
0001A1B6 6600                       		bne.s	loc_1814E
0001A1B8                            
0001A1B8                            loc_18136:
0001A1B8 4228 003C                  		clr.b	$3C(a0)
0001A1BC 317C 0400 0010             		move.w	#$400,$10(a0)
0001A1C2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A1C8 4228 003D                  		clr.b	$3D(a0)
0001A1CC 5428 0025                  		addq.b	#2,$25(a0)
0001A1D0                            
0001A1D0                            loc_1814E:
0001A1D0 6000 FDEE                  		bra.w	loc_17F38
0001A1D4                            ; ===========================================================================
0001A1D4                            
0001A1D4                            loc_18152:				; XREF: Obj77_ShipIndex
0001A1D4 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A1DA 6400                       		bcc.s	loc_18160
0001A1DC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A1E0 6000                       		bra.s	loc_18166
0001A1E2                            ; ===========================================================================
0001A1E2                            
0001A1E2                            loc_18160:
0001A1E2 4A28 0001                  		tst.b	1(a0)
0001A1E6 6A00                       		bpl.s	Obj77_ShipDel
0001A1E8                            
0001A1E8                            loc_18166:
0001A1E8 6000 FDD6                  		bra.w	loc_17F38
0001A1EC                            ; ===========================================================================
0001A1EC                            
0001A1EC                            Obj77_ShipDel:
0001A1EC 4EF9 0000 F106             		jmp	DeleteObject
0001A1F2                            ; ===========================================================================
0001A1F2                            
0001A1F2                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A1F2 2268 0034                  		movea.l	$34(a0),a1
0001A1F6 1011                       		move.b	(a1),d0
0001A1F8 B010                       		cmp.b	(a0),d0
0001A1FA 6600                       		bne.s	Obj77_FaceDel
0001A1FC 7000                       		moveq	#0,d0
0001A1FE 1029 0025                  		move.b	$25(a1),d0
0001A202 7201                       		moveq	#1,d1
0001A204 4A28 003D                  		tst.b	$3D(a0)
0001A208 6700                       		beq.s	loc_1818C
0001A20A 720A                       		moveq	#$A,d1
0001A20C 6000                       		bra.s	loc_181A0
0001A20E                            ; ===========================================================================
0001A20E                            
0001A20E                            loc_1818C:
0001A20E 4A29 0020                  		tst.b	$20(a1)
0001A212 6600                       		bne.s	loc_18196
0001A214 7205                       		moveq	#5,d1
0001A216 6000                       		bra.s	loc_181A0
0001A218                            ; ===========================================================================
0001A218                            
0001A218                            loc_18196:
0001A218 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A21E 6500                       		bcs.s	loc_181A0
0001A220 7204                       		moveq	#4,d1
0001A222                            
0001A222                            loc_181A0:
0001A222 1141 001C                  		move.b	d1,$1C(a0)
0001A226 0C00 000E                  		cmpi.b	#$E,d0
0001A22A 6600                       		bne.s	loc_181B6
0001A22C 117C 0006 001C             		move.b	#6,$1C(a0)
0001A232 4A28 0001                  		tst.b	1(a0)
0001A236 6A00                       		bpl.s	Obj77_FaceDel
0001A238                            
0001A238                            loc_181B6:
0001A238 6000                       		bra.s	Obj77_Display
0001A23A                            ; ===========================================================================
0001A23A                            
0001A23A                            Obj77_FaceDel:
0001A23A 4EF9 0000 F106             		jmp	DeleteObject
0001A240                            ; ===========================================================================
0001A240                            
0001A240                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A240 117C 0007 001C             		move.b	#7,$1C(a0)
0001A246 2268 0034                  		movea.l	$34(a0),a1
0001A24A 1011                       		move.b	(a1),d0
0001A24C B010                       		cmp.b	(a0),d0
0001A24E 6600                       		bne.s	Obj77_FlameDel
0001A250 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A256 6600                       		bne.s	loc_181F0
0001A258 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A25E 4A28 0001                  		tst.b	1(a0)
0001A262 6A00                       		bpl.s	Obj77_FlameDel
0001A264 6000                       		bra.s	loc_181F0
0001A266                            ; ===========================================================================
0001A266 4A69 0010                  		tst.w	$10(a1)
0001A26A 6700                       		beq.s	loc_181F0
0001A26C 117C 0008 001C             		move.b	#8,$1C(a0)
0001A272                            
0001A272                            loc_181F0:
0001A272 6000                       		bra.s	Obj77_Display
0001A274                            ; ===========================================================================
0001A274                            
0001A274                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A274 4EF9 0000 F106             		jmp	DeleteObject
0001A27A                            ; ===========================================================================
0001A27A                            
0001A27A                            Obj77_Display:
0001A27A 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001A280 4EB9 0000 C20C             		jsr	AnimateSprite
0001A286 2268 0034                  		movea.l	$34(a0),a1
0001A28A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A290 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A296 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A29C 7003                       		moveq	#3,d0
0001A29E C028 0022                  		and.b	$22(a0),d0
0001A2A2 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A2A8 8128 0001                  		or.b	d0,1(a0)
0001A2AC 4EF9 0000 F0CA             		jmp	DisplaySprite
0001A2B2                            ; ===========================================================================
0001A2B2                            ; ---------------------------------------------------------------------------
0001A2B2                            ; Object 73 - Eggman (MZ)
0001A2B2                            ; ---------------------------------------------------------------------------
0001A2B2                            
0001A2B2                            Obj73:					; XREF: Obj_Index
0001A2B2 7000                       		moveq	#0,d0
0001A2B4 1028 0024                  		move.b	$24(a0),d0
0001A2B8 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A2BC 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A2C0                            ; ===========================================================================
0001A2C0 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A2C2 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A2C4 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A2C6 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A2C8 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A2CA                            
0001A2CA 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A2CD 0401 04                    		dc.b 4,	1, 4
0001A2D0 0607 04                    		dc.b 6,	7, 4
0001A2D3 0800 03                    		dc.b 8,	0, 3
0001A2D6                            ; ===========================================================================
0001A2D6                            
0001A2D6                            Obj73_Main:				; XREF: Obj73_Index
0001A2D6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A2DC 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A2E2 117C 000F 0020             		move.b	#$F,$20(a0)
0001A2E8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A2EE 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A2F2 2248                       		movea.l	a0,a1
0001A2F4 7203                       		moveq	#3,d1
0001A2F6 6000                       		bra.s	Obj73_LoadBoss
0001A2F8                            ; ===========================================================================
0001A2F8                            
0001A2F8                            Obj73_Loop:
0001A2F8 4EB9 0000 F574             		jsr	SingleObjLoad2
0001A2FE 6600                       		bne.s	Obj73_ShipMain
0001A300 12BC 0073                  		move.b	#$73,0(a1)
0001A304 3368 0008 0008             		move.w	8(a0),8(a1)
0001A30A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A310                            
0001A310                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A310 08A8 0000 0022             		bclr	#0,$22(a0)
0001A316 4229 0025                  		clr.b	$25(a1)
0001A31A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A31E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A322 135A 0018                  		move.b	(a2)+,$18(a1)
0001A326 237C 0001 9D96 0004        		move.l	#Map_Eggman,4(a1)
0001A32E 337C 0400 0002             		move.w	#$400,2(a1)
0001A334 137C 0004 0001             		move.b	#4,1(a1)
0001A33A 137C 0020 0019             		move.b	#$20,$19(a1)
0001A340 2348 0034                  		move.l	a0,$34(a1)
0001A344 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A348                            
0001A348                            Obj73_ShipMain:
0001A348 7000                       		moveq	#0,d0
0001A34A 1028 0025                  		move.b	$25(a0),d0
0001A34E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A352 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A356 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001A35C 4EB9 0000 C20C             		jsr	AnimateSprite
0001A362 7003                       		moveq	#3,d0
0001A364 C028 0022                  		and.b	$22(a0),d0
0001A368 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A36E 8128 0001                  		or.b	d0,1(a0)
0001A372 4EF9 0000 F0CA             		jmp	DisplaySprite
0001A378                            ; ===========================================================================
0001A378 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A37A 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A37C 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A37E 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A380 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A382                            ; ===========================================================================
0001A382                            
0001A382                            loc_18302:				; XREF: Obj73_ShipIndex
0001A382 1028 003F                  		move.b	$3F(a0),d0
0001A386 5428 003F                  		addq.b	#2,$3F(a0)
0001A38A 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001A390 E440                       		asr.w	#2,d0
0001A392 3140 0012                  		move.w	d0,$12(a0)
0001A396 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A39C 6100 F53C                  		bsr.w	BossMove
0001A3A0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A3A6 6600                       		bne.s	loc_18334
0001A3A8 5428 0025                  		addq.b	#2,$25(a0)
0001A3AC 4228 0028                  		clr.b	$28(a0)
0001A3B0 42A8 0010                  		clr.l	$10(a0)
0001A3B4                            
0001A3B4                            loc_18334:
0001A3B4 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001A3BA 1140 0034                  		move.b	d0,$34(a0)
0001A3BE                            
0001A3BE                            loc_1833E:
0001A3BE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A3C4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3CA 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A3D0 6400                       		bcc.s	locret_18390
0001A3D2 4A28 0022                  		tst.b	$22(a0)
0001A3D6 6B00                       		bmi.s	loc_18392
0001A3D8 4A28 0020                  		tst.b	$20(a0)
0001A3DC 6600                       		bne.s	locret_18390
0001A3DE 4A28 003E                  		tst.b	$3E(a0)
0001A3E2 6600                       		bne.s	loc_18374
0001A3E4 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A3EA 303C 00AC                  		move.w	#$AC,d0
0001A3EE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3F4                            
0001A3F4                            loc_18374:
0001A3F4 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3F8 7000                       		moveq	#0,d0
0001A3FA 4A51                       		tst.w	(a1)
0001A3FC 6600                       		bne.s	loc_18382
0001A3FE 303C 0EEE                  		move.w	#$EEE,d0
0001A402                            
0001A402                            loc_18382:
0001A402 3280                       		move.w	d0,(a1)
0001A404 5328 003E                  		subq.b	#1,$3E(a0)
0001A408 6600                       		bne.s	locret_18390
0001A40A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A410                            
0001A410                            locret_18390:
0001A410 4E75                       		rts	
0001A412                            ; ===========================================================================
0001A412                            
0001A412                            loc_18392:				; XREF: loc_1833E
0001A412 7064                       		moveq	#100,d0
0001A414 6100 0000                  		bsr.w	AddPoints
0001A418 117C 0004 0025             		move.b	#4,$25(a0)
0001A41E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A424 4268 0010                  		clr.w	$10(a0)
0001A428 4E75                       		rts	
0001A42A                            ; ===========================================================================
0001A42A                            
0001A42A                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A42A 7000                       		moveq	#0,d0
0001A42C 1028 0028                  		move.b	$28(a0),d0
0001A430 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A434 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A438 0228 0006 0028             		andi.b	#6,$28(a0)
0001A43E 6000 FF7E                  		bra.w	loc_1833E
0001A442                            ; ===========================================================================
0001A442 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A444 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A446 0000                       		dc.w loc_183CA-off_183C2
0001A448 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A44A                            ; ===========================================================================
0001A44A                            
0001A44A                            loc_183CA:				; XREF: off_183C2
0001A44A 4A68 0010                  		tst.w	$10(a0)
0001A44E 6600                       		bne.s	loc_183FE
0001A450 7040                       		moveq	#$40,d0
0001A452 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A458 6700                       		beq.s	loc_183E6
0001A45A 6500                       		bcs.s	loc_183DE
0001A45C 4440                       		neg.w	d0
0001A45E                            
0001A45E                            loc_183DE:
0001A45E 3140 0012                  		move.w	d0,$12(a0)
0001A462 6000 F476                  		bra.w	BossMove
0001A466                            ; ===========================================================================
0001A466                            
0001A466                            loc_183E6:
0001A466 317C 0200 0010             		move.w	#$200,$10(a0)
0001A46C 317C 0100 0012             		move.w	#$100,$12(a0)
0001A472 0828 0000 0022             		btst	#0,$22(a0)
0001A478 6600                       		bne.s	loc_183FE
0001A47A 4468 0010                  		neg.w	$10(a0)
0001A47E                            
0001A47E                            loc_183FE:
0001A47E 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A484 6400                       		bcc.s	Obj73_MakeLava
0001A486 6100 F452                  		bsr.w	BossMove
0001A48A 5968 0012                  		subq.w	#4,$12(a0)
0001A48E                            
0001A48E                            Obj73_MakeLava:
0001A48E 5328 0034                  		subq.b	#1,$34(a0)
0001A492 6400                       		bcc.s	loc_1845C
0001A494 4EB9 0000 F55E             		jsr	SingleObjLoad
0001A49A 6600                       		bne.s	loc_1844A
0001A49C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A4A0 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A4A6 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001A4AC 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A4B2 80FC 0050                  		divu.w	#$50,d0
0001A4B6 4840                       		swap	d0
0001A4B8 0640 1878                  		addi.w	#$1878,d0
0001A4BC 3340 0008                  		move.w	d0,8(a1)
0001A4C0 EE09                       		lsr.b	#7,d1
0001A4C2 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A4C8                            
0001A4C8                            loc_1844A:
0001A4C8 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001A4CE 0200 001F                  		andi.b	#$1F,d0
0001A4D2 0600 0040                  		addi.b	#$40,d0
0001A4D6 1140 0034                  		move.b	d0,$34(a0)
0001A4DA                            
0001A4DA                            loc_1845C:
0001A4DA 0828 0000 0022             		btst	#0,$22(a0)
0001A4E0 6700                       		beq.s	loc_18474
0001A4E2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A4E8 6D00                       		blt.s	locret_1849C
0001A4EA 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A4F0 6000                       		bra.s	loc_18482
0001A4F2                            ; ===========================================================================
0001A4F2                            
0001A4F2                            loc_18474:
0001A4F2 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A4F8 6E00                       		bgt.s	locret_1849C
0001A4FA 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A500                            
0001A500                            loc_18482:
0001A500 4268 0010                  		clr.w	$10(a0)
0001A504 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A50A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A510 6400                       		bcc.s	loc_18498
0001A512 4468 0012                  		neg.w	$12(a0)
0001A516                            
0001A516                            loc_18498:
0001A516 5428 0028                  		addq.b	#2,$28(a0)
0001A51A                            
0001A51A                            locret_1849C:
0001A51A 4E75                       		rts	
0001A51C                            ; ===========================================================================
0001A51C                            
0001A51C                            Obj73_MakeLava2:			; XREF: off_183C2
0001A51C 6100 F3BC                  		bsr.w	BossMove
0001A520 3028 0038                  		move.w	$38(a0),d0
0001A524 0440 022C                  		subi.w	#$22C,d0
0001A528 6E00                       		bgt.s	locret_184F4
0001A52A 303C 022C                  		move.w	#$22C,d0
0001A52E 4A68 0012                  		tst.w	$12(a0)
0001A532 6700                       		beq.s	loc_184EA
0001A534 4268 0012                  		clr.w	$12(a0)
0001A538 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A53E 0868 0000 0022             		bchg	#0,$22(a0)
0001A544 4EB9 0000 F55E             		jsr	SingleObjLoad
0001A54A 6600                       		bne.s	loc_184EA
0001A54C 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A552 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A558 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A55E 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A562 137C 0001 0028             		move.b	#1,$28(a1)
0001A568                            
0001A568                            loc_184EA:
0001A568 5368 003C                  		subq.w	#1,$3C(a0)
0001A56C 6600                       		bne.s	locret_184F4
0001A56E 5428 0028                  		addq.b	#2,$28(a0)
0001A572                            
0001A572                            locret_184F4:
0001A572 4E75                       		rts	
0001A574                            ; ===========================================================================
0001A574                            
0001A574                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A574 5368 003C                  		subq.w	#1,$3C(a0)
0001A578 6B00                       		bmi.s	loc_18500
0001A57A 6000 F31C                  		bra.w	BossDefeated
0001A57E                            ; ===========================================================================
0001A57E                            
0001A57E                            loc_18500:
0001A57E 08E8 0000 0022             		bset	#0,$22(a0)
0001A584 08A8 0007 0022             		bclr	#7,$22(a0)
0001A58A 4268 0010                  		clr.w	$10(a0)
0001A58E 5428 0025                  		addq.b	#2,$25(a0)
0001A592 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A598 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A59C 6600                       		bne.s	locret_1852A
0001A59E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A5A4 4268 0012                  		clr.w	$12(a0)
0001A5A8                            
0001A5A8                            locret_1852A:
0001A5A8 4E75                       		rts	
0001A5AA                            ; ===========================================================================
0001A5AA                            
0001A5AA                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A5AA 5268 003C                  		addq.w	#1,$3C(a0)
0001A5AE 6700                       		beq.s	loc_18544
0001A5B0 6A00                       		bpl.s	loc_1854E
0001A5B2 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A5B8 6400                       		bcc.s	loc_18544
0001A5BA 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A5C0 6000                       		bra.s	loc_1857A
0001A5C2                            ; ===========================================================================
0001A5C2                            
0001A5C2                            loc_18544:
0001A5C2 4268 0012                  		clr.w	$12(a0)
0001A5C6 4268 003C                  		clr.w	$3C(a0)
0001A5CA 6000                       		bra.s	loc_1857A
0001A5CC                            ; ===========================================================================
0001A5CC                            
0001A5CC                            loc_1854E:
0001A5CC 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A5D2 6500                       		bcs.s	loc_18566
0001A5D4 6700                       		beq.s	loc_1856C
0001A5D6 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A5DC 6500                       		bcs.s	loc_1857A
0001A5DE 5428 0025                  		addq.b	#2,$25(a0)
0001A5E2 6000                       		bra.s	loc_1857A
0001A5E4                            ; ===========================================================================
0001A5E4                            
0001A5E4                            loc_18566:
0001A5E4 5168 0012                  		subq.w	#8,$12(a0)
0001A5E8 6000                       		bra.s	loc_1857A
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            loc_1856C:
0001A5EA 4268 0012                  		clr.w	$12(a0)
0001A5EE 6100 F522                  		bsr.w	BossEnd
0001A5F2                            
0001A5F2                            loc_1857A:
0001A5F2 6100 F2E6                  		bsr.w	BossMove
0001A5F6 6000 FDC6                  		bra.w	loc_1833E
0001A5FA                            ; ===========================================================================
0001A5FA                            
0001A5FA                            loc_18582:				; XREF: Obj73_ShipIndex
0001A5FA 317C 0500 0010             		move.w	#$500,$10(a0)
0001A600 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A606 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A60C 6400                       		bcc.s	loc_1859C
0001A60E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A612 6000                       		bra.s	loc_185A2
0001A614                            ; ===========================================================================
0001A614                            
0001A614                            loc_1859C:
0001A614 4A28 0001                  		tst.b	1(a0)
0001A618 6A00                       		bpl.s	Obj73_ShipDel
0001A61A                            
0001A61A                            loc_185A2:
0001A61A 6100 F2BE                  		bsr.w	BossMove
0001A61E 6000 FD9E                  		bra.w	loc_1833E
0001A622                            ; ===========================================================================
0001A622                            
0001A622                            Obj73_ShipDel:
0001A622 4EF9 0000 F106             		jmp	DeleteObject
0001A628                            ; ===========================================================================
0001A628                            
0001A628                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A628 7000                       		moveq	#0,d0
0001A62A 7201                       		moveq	#1,d1
0001A62C 2268 0034                  		movea.l	$34(a0),a1
0001A630 1029 0025                  		move.b	$25(a1),d0
0001A634 5540                       		subq.w	#2,d0
0001A636 6600                       		bne.s	loc_185D2
0001A638 0829 0001 0028             		btst	#1,$28(a1)
0001A63E 6700                       		beq.s	loc_185DA
0001A640 4A69 0012                  		tst.w	$12(a1)
0001A644 6600                       		bne.s	loc_185DA
0001A646 7204                       		moveq	#4,d1
0001A648 6000                       		bra.s	loc_185EE
0001A64A                            ; ===========================================================================
0001A64A                            
0001A64A                            loc_185D2:
0001A64A 5500                       		subq.b	#2,d0
0001A64C 6B00                       		bmi.s	loc_185DA
0001A64E 720A                       		moveq	#$A,d1
0001A650 6000                       		bra.s	loc_185EE
0001A652                            ; ===========================================================================
0001A652                            
0001A652                            loc_185DA:
0001A652 4A29 0020                  		tst.b	$20(a1)
0001A656 6600                       		bne.s	loc_185E4
0001A658 7205                       		moveq	#5,d1
0001A65A 6000                       		bra.s	loc_185EE
0001A65C                            ; ===========================================================================
0001A65C                            
0001A65C                            loc_185E4:
0001A65C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A662 6500                       		bcs.s	loc_185EE
0001A664 7204                       		moveq	#4,d1
0001A666                            
0001A666                            loc_185EE:
0001A666 1141 001C                  		move.b	d1,$1C(a0)
0001A66A 5900                       		subq.b	#4,d0
0001A66C 6600                       		bne.s	loc_18602
0001A66E 117C 0006 001C             		move.b	#6,$1C(a0)
0001A674 4A28 0001                  		tst.b	1(a0)
0001A678 6A00                       		bpl.s	Obj73_FaceDel
0001A67A                            
0001A67A                            loc_18602:
0001A67A 6000                       		bra.s	Obj73_Display
0001A67C                            ; ===========================================================================
0001A67C                            
0001A67C                            Obj73_FaceDel:
0001A67C 4EF9 0000 F106             		jmp	DeleteObject
0001A682                            ; ===========================================================================
0001A682                            
0001A682                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A682 117C 0007 001C             		move.b	#7,$1C(a0)
0001A688 2268 0034                  		movea.l	$34(a0),a1
0001A68C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A692 6D00                       		blt.s	loc_1862A
0001A694 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A69A 4A28 0001                  		tst.b	1(a0)
0001A69E 6A00                       		bpl.s	Obj73_FlameDel
0001A6A0 6000                       		bra.s	loc_18636
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            loc_1862A:
0001A6A2 4A69 0010                  		tst.w	$10(a1)
0001A6A6 6700                       		beq.s	loc_18636
0001A6A8 117C 0008 001C             		move.b	#8,$1C(a0)
0001A6AE                            
0001A6AE                            loc_18636:
0001A6AE 6000                       		bra.s	Obj73_Display
0001A6B0                            ; ===========================================================================
0001A6B0                            
0001A6B0                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A6B0 4EF9 0000 F106             		jmp	DeleteObject
0001A6B6                            ; ===========================================================================
0001A6B6                            
0001A6B6                            Obj73_Display:
0001A6B6 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001A6BC 4EB9 0000 C20C             		jsr	AnimateSprite
0001A6C2                            
0001A6C2                            loc_1864A:
0001A6C2 2268 0034                  		movea.l	$34(a0),a1
0001A6C6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A6CC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A6D2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A6D8 7003                       		moveq	#3,d0
0001A6DA C028 0022                  		and.b	$22(a0),d0
0001A6DE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A6E4 8128 0001                  		or.b	d0,1(a0)
0001A6E8 4EF9 0000 F0CA             		jmp	DisplaySprite
0001A6EE                            ; ===========================================================================
0001A6EE                            
0001A6EE                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A6EE 2268 0034                  		movea.l	$34(a0),a1
0001A6F2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A6F8 6600                       		bne.s	loc_18688
0001A6FA 4A28 0001                  		tst.b	1(a0)
0001A6FE 6A00                       		bpl.s	Obj73_TubeDel
0001A700                            
0001A700                            loc_18688:
0001A700 217C 0001 9E5E 0004        		move.l	#Map_BossItems,4(a0)
0001A708 317C 246C 0002             		move.w	#$246C,2(a0)
0001A70E 117C 0004 001A             		move.b	#4,$1A(a0)
0001A714 60AC                       		bra.s	loc_1864A
0001A716                            ; ===========================================================================
0001A716                            
0001A716                            Obj73_TubeDel:
0001A716 4EF9 0000 F106             		jmp	DeleteObject
0001A71C                            ; ===========================================================================
0001A71C                            ; ---------------------------------------------------------------------------
0001A71C                            ; Object 74 - lava that	Eggman drops (MZ)
0001A71C                            ; ---------------------------------------------------------------------------
0001A71C                            
0001A71C                            Obj74:					; XREF: Obj_Index
0001A71C 7000                       		moveq	#0,d0
0001A71E 1028 0024                  		move.b	$24(a0),d0
0001A722 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A726 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A72A 4EF9 0000 F0CA             		jmp	DisplaySprite
0001A730                            ; ===========================================================================
0001A730 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A732 0000                       		dc.w Obj74_Action-Obj74_Index
0001A734 0000                       		dc.w loc_18886-Obj74_Index
0001A736 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A738                            ; ===========================================================================
0001A738                            
0001A738                            Obj74_Main:				; XREF: Obj74_Index
0001A738 117C 0008 0016             		move.b	#8,$16(a0)
0001A73E 117C 0008 0017             		move.b	#8,$17(a0)
0001A744 217C 0000 CE5E 0004        		move.l	#Map_obj14,4(a0)
0001A74C 317C 0345 0002             		move.w	#$345,2(a0)
0001A752 117C 0004 0001             		move.b	#4,1(a0)
0001A758 117C 0005 0018             		move.b	#5,$18(a0)
0001A75E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A764 117C 0008 0019             		move.b	#8,$19(a0)
0001A76A 5428 0024                  		addq.b	#2,$24(a0)
0001A76E 4A28 0028                  		tst.b	$28(a0)
0001A772 6600                       		bne.s	loc_1870A
0001A774 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A77A 5428 0024                  		addq.b	#2,$24(a0)
0001A77E 6000 0000                  		bra.w	loc_18886
0001A782                            ; ===========================================================================
0001A782                            
0001A782                            loc_1870A:
0001A782 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A788 303C 00AE                  		move.w	#$AE,d0
0001A78C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava sound
0001A792                            
0001A792                            Obj74_Action:				; XREF: Obj74_Index
0001A792 7000                       		moveq	#0,d0
0001A794 1028 0025                  		move.b	$25(a0),d0
0001A798 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A79C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A7A0 4EB9 0000 F0B0             		jsr	SpeedToPos
0001A7A6 43F9 0000 FFA2             		lea	(Ani_obj14).l,a1
0001A7AC 4EB9 0000 C20C             		jsr	AnimateSprite
0001A7B2 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A7B8 6200                       		bhi.s	Obj74_Delete
0001A7BA 4E75                       		rts	
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            Obj74_Delete:
0001A7BC 4EF9 0000 F106             		jmp	DeleteObject
0001A7C2                            ; ===========================================================================
0001A7C2 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A7C4 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A7C6 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A7C8 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A7CA                            ; ===========================================================================
0001A7CA                            
0001A7CA                            Obj74_Drop:				; XREF: Obj74_Index2
0001A7CA 08E8 0001 0022             		bset	#1,$22(a0)
0001A7D0 5328 0029                  		subq.b	#1,$29(a0)
0001A7D4 6A00                       		bpl.s	locret_18780
0001A7D6 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A7DC 4228 0028                  		clr.b	$28(a0)
0001A7E0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A7E6 08A8 0001 0022             		bclr	#1,$22(a0)
0001A7EC 6100 C672                  		bsr.w	ObjHitFloor
0001A7F0 4A41                       		tst.w	d1
0001A7F2 6A00                       		bpl.s	locret_18780
0001A7F4 5428 0025                  		addq.b	#2,$25(a0)
0001A7F8                            
0001A7F8                            locret_18780:
0001A7F8 4E75                       		rts	
0001A7FA                            ; ===========================================================================
0001A7FA                            
0001A7FA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A7FA 5568 000C                  		subq.w	#2,$C(a0)
0001A7FE 08E8 0007 0002             		bset	#7,2(a0)
0001A804 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A80A 4268 0012                  		clr.w	$12(a0)
0001A80E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A814 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A81A 117C 0003 0029             		move.b	#3,$29(a0)
0001A820 4EB9 0000 F574             		jsr	SingleObjLoad2
0001A826 6600                       		bne.s	loc_187CA
0001A828 47D1                       		lea	(a1),a3
0001A82A 45D0                       		lea	(a0),a2
0001A82C 7003                       		moveq	#3,d0
0001A82E                            
0001A82E                            Obj74_Loop:
0001A82E 26DA                       		move.l	(a2)+,(a3)+
0001A830 26DA                       		move.l	(a2)+,(a3)+
0001A832 26DA                       		move.l	(a2)+,(a3)+
0001A834 26DA                       		move.l	(a2)+,(a3)+
0001A836 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A83A                            
0001A83A 4469 0010                  		neg.w	$10(a1)
0001A83E 5429 0025                  		addq.b	#2,$25(a1)
0001A842                            
0001A842                            loc_187CA:
0001A842 5428 0025                  		addq.b	#2,$25(a0)
0001A846 4E75                       		rts	
0001A848                            
0001A848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A848                            
0001A848                            
0001A848                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A848 4EB9 0000 F574             		jsr	SingleObjLoad2
0001A84E 6600                       		bne.s	locret_187EE
0001A850 3368 0008 0008             		move.w	8(a0),8(a1)
0001A856 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A85C 12BC 0074                  		move.b	#$74,(a1)
0001A860 337C 0067 0028             		move.w	#$67,$28(a1)
0001A866                            
0001A866                            locret_187EE:
0001A866 4E75                       		rts	
0001A868                            ; End of function Obj74_Duplicate2
0001A868                            
0001A868                            ; ===========================================================================
0001A868                            
0001A868                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A868 6100 C5F6                  		bsr.w	ObjHitFloor
0001A86C 4A41                       		tst.w	d1
0001A86E 6A00                       		bpl.s	loc_18826
0001A870 3028 0008                  		move.w	8(a0),d0
0001A874 0C40 1940                  		cmpi.w	#$1940,d0
0001A878 6E00                       		bgt.s	loc_1882C
0001A87A 3228 0030                  		move.w	$30(a0),d1
0001A87E B240                       		cmp.w	d0,d1
0001A880 6700                       		beq.s	loc_1881E
0001A882 0240 0010                  		andi.w	#$10,d0
0001A886 0241 0010                  		andi.w	#$10,d1
0001A88A B240                       		cmp.w	d0,d1
0001A88C 6700                       		beq.s	loc_1881E
0001A88E 61B8                       		bsr.s	Obj74_Duplicate2
0001A890 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A896                            
0001A896                            loc_1881E:
0001A896 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A89C 4E75                       		rts	
0001A89E                            ; ===========================================================================
0001A89E                            
0001A89E                            loc_18826:
0001A89E 5428 0025                  		addq.b	#2,$25(a0)
0001A8A2 4E75                       		rts	
0001A8A4                            ; ===========================================================================
0001A8A4                            
0001A8A4                            loc_1882C:
0001A8A4 5428 0024                  		addq.b	#2,$24(a0)
0001A8A8 4E75                       		rts	
0001A8AA                            ; ===========================================================================
0001A8AA                            
0001A8AA                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A8AA 08A8 0001 0022             		bclr	#1,$22(a0)
0001A8B0 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A8B6 3028 0008                  		move.w	8(a0),d0
0001A8BA 9068 0032                  		sub.w	$32(a0),d0
0001A8BE 6A00                       		bpl.s	loc_1884A
0001A8C0 4440                       		neg.w	d0
0001A8C2                            
0001A8C2                            loc_1884A:
0001A8C2 0C40 0012                  		cmpi.w	#$12,d0
0001A8C6 6600                       		bne.s	loc_18856
0001A8C8 08A8 0007 0002             		bclr	#7,2(a0)
0001A8CE                            
0001A8CE                            loc_18856:
0001A8CE 6100 C590                  		bsr.w	ObjHitFloor
0001A8D2 4A41                       		tst.w	d1
0001A8D4 6A00                       		bpl.s	locret_1887E
0001A8D6 5328 0029                  		subq.b	#1,$29(a0)
0001A8DA 6700                       		beq.s	Obj74_Delete2
0001A8DC 4268 0012                  		clr.w	$12(a0)
0001A8E0 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A8E6 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A8EC 08E8 0007 0002             		bset	#7,2(a0)
0001A8F2 5528 0025                  		subq.b	#2,$25(a0)
0001A8F6                            
0001A8F6                            locret_1887E:
0001A8F6 4E75                       		rts	
0001A8F8                            ; ===========================================================================
0001A8F8                            
0001A8F8                            Obj74_Delete2:
0001A8F8 4EF9 0000 F106             		jmp	DeleteObject
0001A8FE                            ; ===========================================================================
0001A8FE                            
0001A8FE                            loc_18886:				; XREF: Obj74_Index
0001A8FE 08E8 0007 0002             		bset	#7,2(a0)
0001A904 5328 0029                  		subq.b	#1,$29(a0)
0001A908 6600                       		bne.s	Obj74_Animate
0001A90A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A910 5968 000C                  		subq.w	#4,$C(a0)
0001A914 4228 0020                  		clr.b	$20(a0)
0001A918                            
0001A918                            Obj74_Animate:
0001A918 43F9 0000 FFA2             		lea	(Ani_obj14).l,a1
0001A91E 4EF9 0000 C20C             		jmp	AnimateSprite
0001A924                            ; ===========================================================================
0001A924                            
0001A924                            Obj74_Delete3:				; XREF: Obj74_Index
0001A924 4EF9 0000 F106             		jmp	DeleteObject
0001A92A                            ; ===========================================================================
0001A92A                            
0001A92A                            Obj7A_Delete:
0001A92A 4EF9 0000 F106             		jmp	DeleteObject
0001A930                            ; ===========================================================================
0001A930                            ; ---------------------------------------------------------------------------
0001A930                            ; Object 7A - Eggman (SLZ)
0001A930                            ; ---------------------------------------------------------------------------
0001A930                            
0001A930                            Obj7A:					; XREF: Obj_Index
0001A930 7000                       		moveq	#0,d0
0001A932 1028 0024                  		move.b	$24(a0),d0
0001A936 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A93A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A93E                            ; ===========================================================================
0001A93E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A940 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A942 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A944 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A946 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A948                            
0001A948 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A94B 0401 04                    		dc.b 4,	1, 4
0001A94E 0607 04                    		dc.b 6,	7, 4
0001A951 0800 03                    		dc.b 8,	0, 3
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            Obj7A_Main:				; XREF: Obj7A_Index
0001A954 317C 2188 0008             		move.w	#$2188,8(a0)
0001A95A 317C 0228 000C             		move.w	#$228,$C(a0)
0001A960 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A966 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A96C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A972 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A978 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A97C 2248                       		movea.l	a0,a1
0001A97E 7203                       		moveq	#3,d1
0001A980 6000                       		bra.s	Obj7A_LoadBoss
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            Obj7A_Loop:
0001A982 4EB9 0000 F574             		jsr	SingleObjLoad2
0001A988 6600                       		bne.s	loc_1895C
0001A98A 12BC 007A                  		move.b	#$7A,0(a1)
0001A98E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A994 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A99A                            
0001A99A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A99A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A9A0 4229 0025                  		clr.b	$25(a1)
0001A9A4 135A 0024                  		move.b	(a2)+,$24(a1)
0001A9A8 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A9AC 135A 0018                  		move.b	(a2)+,$18(a1)
0001A9B0 237C 0001 9D96 0004        		move.l	#Map_Eggman,4(a1)
0001A9B8 337C 0400 0002             		move.w	#$400,2(a1)
0001A9BE 137C 0004 0001             		move.b	#4,1(a1)
0001A9C4 137C 0020 0019             		move.b	#$20,$19(a1)
0001A9CA 2348 0034                  		move.l	a0,$34(a1)
0001A9CE 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A9D2                            
0001A9D2                            loc_1895C:
0001A9D2 43F8 D040                  		lea	($FFFFD040).w,a1
0001A9D6 45E8 002A                  		lea	$2A(a0),a2
0001A9DA 705E                       		moveq	#$5E,d0
0001A9DC 723E                       		moveq	#$3E,d1
0001A9DE                            
0001A9DE                            loc_18968:
0001A9DE B011                       		cmp.b	(a1),d0
0001A9E0 6600                       		bne.s	loc_18974
0001A9E2 4A29 0028                  		tst.b	$28(a1)
0001A9E6 6700                       		beq.s	loc_18974
0001A9E8 34C9                       		move.w	a1,(a2)+
0001A9EA                            
0001A9EA                            loc_18974:
0001A9EA D2FC 0040                  		adda.w	#$40,a1
0001A9EE 51C9 FFEE                  		dbf	d1,loc_18968
0001A9F2                            
0001A9F2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A9F2 7000                       		moveq	#0,d0
0001A9F4 1028 0025                  		move.b	$25(a0),d0
0001A9F8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A9FC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001AA00 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001AA06 4EB9 0000 C20C             		jsr	AnimateSprite
0001AA0C 7003                       		moveq	#3,d0
0001AA0E C028 0022                  		and.b	$22(a0),d0
0001AA12 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AA18 8128 0001                  		or.b	d0,1(a0)
0001AA1C 4EF9 0000 F0CA             		jmp	DisplaySprite
0001AA22                            ; ===========================================================================
0001AA22 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AA24 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AA26 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AA28 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AA2A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AA2C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AA2E                            ; ===========================================================================
0001AA2E                            
0001AA2E                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AA2E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AA34 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AA3A 6400                       		bcc.s	loc_189CA
0001AA3C 5428 0025                  		addq.b	#2,$25(a0)
0001AA40                            
0001AA40                            loc_189CA:
0001AA40 6100 EE98                  		bsr.w	BossMove
0001AA44 1028 003F                  		move.b	$3F(a0),d0
0001AA48 5428 003F                  		addq.b	#2,$3F(a0)
0001AA4C 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001AA52 EC40                       		asr.w	#6,d0
0001AA54 D068 0038                  		add.w	$38(a0),d0
0001AA58 3140 000C                  		move.w	d0,$C(a0)
0001AA5C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AA62 6000                       		bra.s	loc_189FE
0001AA64                            ; ===========================================================================
0001AA64                            
0001AA64                            loc_189EE:
0001AA64 6100 EE74                  		bsr.w	BossMove
0001AA68 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AA6E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AA74                            
0001AA74                            loc_189FE:
0001AA74 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AA7A 6400                       		bcc.s	locret_18A44
0001AA7C 4A28 0022                  		tst.b	$22(a0)
0001AA80 6B00                       		bmi.s	loc_18A46
0001AA82 4A28 0020                  		tst.b	$20(a0)
0001AA86 6600                       		bne.s	locret_18A44
0001AA88 4A28 003E                  		tst.b	$3E(a0)
0001AA8C 6600                       		bne.s	loc_18A28
0001AA8E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AA94 303C 00AC                  		move.w	#$AC,d0
0001AA98 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA9E                            
0001AA9E                            loc_18A28:
0001AA9E 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AAA2 7000                       		moveq	#0,d0
0001AAA4 4A51                       		tst.w	(a1)
0001AAA6 6600                       		bne.s	loc_18A36
0001AAA8 303C 0EEE                  		move.w	#$EEE,d0
0001AAAC                            
0001AAAC                            loc_18A36:
0001AAAC 3280                       		move.w	d0,(a1)
0001AAAE 5328 003E                  		subq.b	#1,$3E(a0)
0001AAB2 6600                       		bne.s	locret_18A44
0001AAB4 117C 000F 0020             		move.b	#$F,$20(a0)
0001AABA                            
0001AABA                            locret_18A44:
0001AABA 4E75                       		rts	
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            loc_18A46:
0001AABC 7064                       		moveq	#100,d0
0001AABE 6100 0000                  		bsr.w	AddPoints
0001AAC2 117C 0006 0025             		move.b	#6,$25(a0)
0001AAC8 117C 0078 003C             		move.b	#$78,$3C(a0)
0001AACE 4268 0010                  		clr.w	$10(a0)
0001AAD2 4E75                       		rts	
0001AAD4                            ; ===========================================================================
0001AAD4                            
0001AAD4                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001AAD4 3028 0030                  		move.w	$30(a0),d0
0001AAD8 317C 0200 0010             		move.w	#$200,$10(a0)
0001AADE 0828 0000 0022             		btst	#0,$22(a0)
0001AAE4 6600                       		bne.s	loc_18A7C
0001AAE6 4468 0010                  		neg.w	$10(a0)
0001AAEA 0C40 2008                  		cmpi.w	#$2008,d0
0001AAEE 6E00                       		bgt.s	loc_18A88
0001AAF0 6000                       		bra.s	loc_18A82
0001AAF2                            ; ===========================================================================
0001AAF2                            
0001AAF2                            loc_18A7C:
0001AAF2 0C40 2138                  		cmpi.w	#$2138,d0
0001AAF6 6D00                       		blt.s	loc_18A88
0001AAF8                            
0001AAF8                            loc_18A82:
0001AAF8 0868 0000 0022             		bchg	#0,$22(a0)
0001AAFE                            
0001AAFE                            loc_18A88:
0001AAFE 3028 0008                  		move.w	8(a0),d0
0001AB02 72FF                       		moveq	#-1,d1
0001AB04 7402                       		moveq	#2,d2
0001AB06 45E8 002A                  		lea	$2A(a0),a2
0001AB0A 7828                       		moveq	#$28,d4
0001AB0C 4A68 0010                  		tst.w	$10(a0)
0001AB10 6A00                       		bpl.s	loc_18A9E
0001AB12 4444                       		neg.w	d4
0001AB14                            
0001AB14                            loc_18A9E:
0001AB14 321A                       		move.w	(a2)+,d1
0001AB16 2641                       		movea.l	d1,a3
0001AB18 082B 0003 0022             		btst	#3,$22(a3)
0001AB1E 6600                       		bne.s	loc_18AB4
0001AB20 362B 0008                  		move.w	8(a3),d3
0001AB24 D644                       		add.w	d4,d3
0001AB26 9640                       		sub.w	d0,d3
0001AB28 6700                       		beq.s	loc_18AC0
0001AB2A                            
0001AB2A                            loc_18AB4:
0001AB2A 51CA FFE8                  		dbf	d2,loc_18A9E
0001AB2E                            
0001AB2E 1142 0028                  		move.b	d2,$28(a0)
0001AB32 6000 FF0C                  		bra.w	loc_189CA
0001AB36                            ; ===========================================================================
0001AB36                            
0001AB36                            loc_18AC0:
0001AB36 1142 0028                  		move.b	d2,$28(a0)
0001AB3A 5428 0025                  		addq.b	#2,$25(a0)
0001AB3E 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AB44 6000 FEFA                  		bra.w	loc_189CA
0001AB48                            ; ===========================================================================
0001AB48                            
0001AB48                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AB48 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AB4E 6600                       		bne.s	loc_18B36
0001AB50 70FF                       		moveq	#-1,d0
0001AB52 1028 0028                  		move.b	$28(a0),d0
0001AB56 4880                       		ext.w	d0
0001AB58 6B00                       		bmi.s	loc_18B40
0001AB5A 5540                       		subq.w	#2,d0
0001AB5C 4440                       		neg.w	d0
0001AB5E D040                       		add.w	d0,d0
0001AB60 43E8 002A                  		lea	$2A(a0),a1
0001AB64 3031 0000                  		move.w	(a1,d0.w),d0
0001AB68 2440                       		movea.l	d0,a2
0001AB6A 43F8 D040                  		lea	($FFFFD040).w,a1
0001AB6E 723E                       		moveq	#$3E,d1
0001AB70                            
0001AB70                            loc_18AFA:
0001AB70 B0A9 003C                  		cmp.l	$3C(a1),d0
0001AB74 6700                       		beq.s	loc_18B40
0001AB76 D2FC 0040                  		adda.w	#$40,a1
0001AB7A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AB7E                            
0001AB7E 2F08                       		move.l	a0,-(sp)
0001AB80 41D2                       		lea	(a2),a0
0001AB82 4EB9 0000 F574             		jsr	SingleObjLoad2
0001AB88 205F                       		movea.l	(sp)+,a0
0001AB8A 6600                       		bne.s	loc_18B40
0001AB8C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AB90 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB96 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB9C 0669 0020 000C             		addi.w	#$20,$C(a1)
0001ABA2 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001ABA8 234A 003C                  		move.l	a2,$3C(a1)
0001ABAC                            
0001ABAC                            loc_18B36:
0001ABAC 5328 003C                  		subq.b	#1,$3C(a0)
0001ABB0 6700                       		beq.s	loc_18B40
0001ABB2 6000 FEC0                  		bra.w	loc_189FE
0001ABB6                            ; ===========================================================================
0001ABB6                            
0001ABB6                            loc_18B40:
0001ABB6 5528 0025                  		subq.b	#2,$25(a0)
0001ABBA 6000 FE84                  		bra.w	loc_189CA
0001ABBE                            ; ===========================================================================
0001ABBE                            
0001ABBE                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001ABBE 5328 003C                  		subq.b	#1,$3C(a0)
0001ABC2 6B00                       		bmi.s	loc_18B52
0001ABC4 6000 ECD2                  		bra.w	BossDefeated
0001ABC8                            ; ===========================================================================
0001ABC8                            
0001ABC8                            loc_18B52:
0001ABC8 5428 0025                  		addq.b	#2,$25(a0)
0001ABCC 4268 0012                  		clr.w	$12(a0)
0001ABD0 08E8 0000 0022             		bset	#0,$22(a0)
0001ABD6 08A8 0007 0022             		bclr	#7,$22(a0)
0001ABDC 4268 0010                  		clr.w	$10(a0)
0001ABE0 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001ABE6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001ABEA 6600                       		bne.s	loc_18B7C
0001ABEC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001ABF2                            
0001ABF2                            loc_18B7C:
0001ABF2 6000 FE80                  		bra.w	loc_189FE
0001ABF6                            ; ===========================================================================
0001ABF6                            
0001ABF6                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001ABF6 5228 003C                  		addq.b	#1,$3C(a0)
0001ABFA 6700                       		beq.s	loc_18B90
0001ABFC 6A00                       		bpl.s	loc_18B96
0001ABFE 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AC04 6000                       		bra.s	loc_18BC2
0001AC06                            ; ===========================================================================
0001AC06                            
0001AC06                            loc_18B90:
0001AC06 4268 0012                  		clr.w	$12(a0)
0001AC0A 6000                       		bra.s	loc_18BC2
0001AC0C                            ; ===========================================================================
0001AC0C                            
0001AC0C                            loc_18B96:
0001AC0C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AC12 6500                       		bcs.s	loc_18BAE
0001AC14 6700                       		beq.s	loc_18BB4
0001AC16 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AC1C 6500                       		bcs.s	loc_18BC2
0001AC1E 5428 0025                  		addq.b	#2,$25(a0)
0001AC22 6000                       		bra.s	loc_18BC2
0001AC24                            ; ===========================================================================
0001AC24                            
0001AC24                            loc_18BAE:
0001AC24 5168 0012                  		subq.w	#8,$12(a0)
0001AC28 6000                       		bra.s	loc_18BC2
0001AC2A                            ; ===========================================================================
0001AC2A                            
0001AC2A                            loc_18BB4:
0001AC2A 4268 0012                  		clr.w	$12(a0)
0001AC2E 6100 EEE2                  		bsr.w	BossEnd
0001AC32                            
0001AC32                            loc_18BC2:
0001AC32 6000 FE30                  		bra.w	loc_189EE
0001AC36                            ; ===========================================================================
0001AC36                            
0001AC36                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AC36 317C 0400 0010             		move.w	#$400,$10(a0)
0001AC3C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AC42 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AC48 6400                       		bcc.s	loc_18BE0
0001AC4A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC4E 6000                       		bra.s	loc_18BE8
0001AC50                            ; ===========================================================================
0001AC50                            
0001AC50                            loc_18BE0:
0001AC50 4A28 0001                  		tst.b	1(a0)
0001AC54 6A00 FCD4                  		bpl.w	Obj7A_Delete
0001AC58                            
0001AC58                            loc_18BE8:
0001AC58 6100 EC80                  		bsr.w	BossMove
0001AC5C 6000 FDE2                  		bra.w	loc_189CA
0001AC60                            ; ===========================================================================
0001AC60                            
0001AC60                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AC60 7000                       		moveq	#0,d0
0001AC62 7201                       		moveq	#1,d1
0001AC64 2268 0034                  		movea.l	$34(a0),a1
0001AC68 1029 0025                  		move.b	$25(a1),d0
0001AC6C 0C00 0006                  		cmpi.b	#6,d0
0001AC70 6B00                       		bmi.s	loc_18C06
0001AC72 720A                       		moveq	#$A,d1
0001AC74 6000                       		bra.s	loc_18C1A
0001AC76                            ; ===========================================================================
0001AC76                            
0001AC76                            loc_18C06:
0001AC76 4A29 0020                  		tst.b	$20(a1)
0001AC7A 6600                       		bne.s	loc_18C10
0001AC7C 7205                       		moveq	#5,d1
0001AC7E 6000                       		bra.s	loc_18C1A
0001AC80                            ; ===========================================================================
0001AC80                            
0001AC80                            loc_18C10:
0001AC80 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AC86 6500                       		bcs.s	loc_18C1A
0001AC88 7204                       		moveq	#4,d1
0001AC8A                            
0001AC8A                            loc_18C1A:
0001AC8A 1141 001C                  		move.b	d1,$1C(a0)
0001AC8E 0C00 000A                  		cmpi.b	#$A,d0
0001AC92 6600                       		bne.s	loc_18C32
0001AC94 117C 0006 001C             		move.b	#6,$1C(a0)
0001AC9A 4A28 0001                  		tst.b	1(a0)
0001AC9E 6A00 FC8A                  		bpl.w	Obj7A_Delete
0001ACA2                            
0001ACA2                            loc_18C32:
0001ACA2 6000                       		bra.s	loc_18C6C
0001ACA4                            ; ===========================================================================
0001ACA4                            
0001ACA4                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001ACA4 117C 0008 001C             		move.b	#8,$1C(a0)
0001ACAA 2268 0034                  		movea.l	$34(a0),a1
0001ACAE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ACB4 6600                       		bne.s	loc_18C56
0001ACB6 4A28 0001                  		tst.b	1(a0)
0001ACBA 6A00 FC6E                  		bpl.w	Obj7A_Delete
0001ACBE 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ACC4 6000                       		bra.s	loc_18C6C
0001ACC6                            ; ===========================================================================
0001ACC6                            
0001ACC6                            loc_18C56:
0001ACC6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001ACCC 6E00                       		bgt.s	loc_18C6C
0001ACCE 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001ACD4 6D00                       		blt.s	loc_18C6C
0001ACD6 117C 0007 001C             		move.b	#7,$1C(a0)
0001ACDC                            
0001ACDC                            loc_18C6C:
0001ACDC 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001ACE2 4EB9 0000 C20C             		jsr	AnimateSprite
0001ACE8                            
0001ACE8                            loc_18C78:
0001ACE8 2268 0034                  		movea.l	$34(a0),a1
0001ACEC 3169 0008 0008             		move.w	8(a1),8(a0)
0001ACF2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ACF8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ACFE 7003                       		moveq	#3,d0
0001AD00 C028 0022                  		and.b	$22(a0),d0
0001AD04 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AD0A 8128 0001                  		or.b	d0,1(a0)
0001AD0E 4EF9 0000 F0CA             		jmp	DisplaySprite
0001AD14                            ; ===========================================================================
0001AD14                            
0001AD14                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AD14 2268 0034                  		movea.l	$34(a0),a1
0001AD18 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AD1E 6600                       		bne.s	loc_18CB8
0001AD20 4A28 0001                  		tst.b	1(a0)
0001AD24 6A00 FC04                  		bpl.w	Obj7A_Delete
0001AD28                            
0001AD28                            loc_18CB8:
0001AD28 217C 0001 9E5E 0004        		move.l	#Map_BossItems,4(a0)
0001AD30 317C 246C 0002             		move.w	#$246C,2(a0)
0001AD36 117C 0003 001A             		move.b	#3,$1A(a0)
0001AD3C 60AA                       		bra.s	loc_18C78
0001AD3E                            ; ===========================================================================
0001AD3E                            ; ---------------------------------------------------------------------------
0001AD3E                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AD3E                            ; ---------------------------------------------------------------------------
0001AD3E                            
0001AD3E                            Obj7B:					; XREF: Obj_Index
0001AD3E 7000                       		moveq	#0,d0
0001AD40 1028 0024                  		move.b	$24(a0),d0
0001AD44 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AD48 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AD4C 3028 0030                  		move.w	$30(a0),d0
0001AD50 0240 FF80                  		andi.w	#$FF80,d0
0001AD54 3238 F700                  		move.w	($FFFFF700).w,d1
0001AD58 0441 0080                  		subi.w	#$80,d1
0001AD5C 0241 FF80                  		andi.w	#$FF80,d1
0001AD60 9041                       		sub.w	d1,d0
0001AD62 6B00 FBC6                  		bmi.w	Obj7A_Delete
0001AD66 0C40 0280                  		cmpi.w	#$280,d0
0001AD6A 6200 FBBE                  		bhi.w	Obj7A_Delete
0001AD6E 4EF9 0000 F0CA             		jmp	DisplaySprite
0001AD74                            ; ===========================================================================
0001AD74 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AD76 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AD78 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AD7A 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AD7C 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AD7E 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AD80                            ; ===========================================================================
0001AD80                            
0001AD80                            Obj7B_Main:				; XREF: Obj7B_Index
0001AD80 217C 0001 34B6 0004        		move.l	#Map_obj5Ea,4(a0)
0001AD88 317C 0518 0002             		move.w	#$518,2(a0)
0001AD8E 117C 0001 001A             		move.b	#1,$1A(a0)
0001AD94 0028 0004 0001             		ori.b	#4,1(a0)
0001AD9A 117C 0004 0018             		move.b	#4,$18(a0)
0001ADA0 117C 008B 0020             		move.b	#$8B,$20(a0)
0001ADA6 117C 000C 0019             		move.b	#$C,$19(a0)
0001ADAC 2268 003C                  		movea.l	$3C(a0),a1
0001ADB0 3169 0008 0030             		move.w	8(a1),$30(a0)
0001ADB6 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001ADBC 08E8 0000 0022             		bset	#0,$22(a0)
0001ADC2 3028 0008                  		move.w	8(a0),d0
0001ADC6 B069 0008                  		cmp.w	8(a1),d0
0001ADCA 6E00                       		bgt.s	loc_18D68
0001ADCC 08A8 0000 0022             		bclr	#0,$22(a0)
0001ADD2 117C 0002 003A             		move.b	#2,$3A(a0)
0001ADD8                            
0001ADD8                            loc_18D68:
0001ADD8 5428 0024                  		addq.b	#2,$24(a0)
0001ADDC                            
0001ADDC                            Obj7B_Fall:				; XREF: Obj7B_Index
0001ADDC 4EB9 0000 F090             		jsr	ObjectFall
0001ADE2 2268 003C                  		movea.l	$3C(a0),a1
0001ADE6 45F9 0000 0000             		lea	(word_19018).l,a2
0001ADEC 7000                       		moveq	#0,d0
0001ADEE 1029 001A                  		move.b	$1A(a1),d0
0001ADF2 3228 0008                  		move.w	8(a0),d1
0001ADF6 9268 0030                  		sub.w	$30(a0),d1
0001ADFA 6400                       		bcc.s	loc_18D8E
0001ADFC 5440                       		addq.w	#2,d0
0001ADFE                            
0001ADFE                            loc_18D8E:
0001ADFE D040                       		add.w	d0,d0
0001AE00 3228 0034                  		move.w	$34(a0),d1
0001AE04 D272 0000                  		add.w	(a2,d0.w),d1
0001AE08 B268 000C                  		cmp.w	$C(a0),d1
0001AE0C 6E00                       		bgt.s	locret_18DC4
0001AE0E 2268 003C                  		movea.l	$3C(a0),a1
0001AE12 7202                       		moveq	#2,d1
0001AE14 0828 0000 0022             		btst	#0,$22(a0)
0001AE1A 6700                       		beq.s	loc_18DAE
0001AE1C 7200                       		moveq	#0,d1
0001AE1E                            
0001AE1E                            loc_18DAE:
0001AE1E 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AE24 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AE2A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AE30 6000 0000                  		bra.w	loc_18FA2
0001AE34                            ; ===========================================================================
0001AE34                            
0001AE34                            locret_18DC4:
0001AE34 4E75                       		rts	
0001AE36                            ; ===========================================================================
0001AE36                            
0001AE36                            loc_18DC6:				; XREF: Obj7B_Index
0001AE36 2268 003C                  		movea.l	$3C(a0),a1
0001AE3A 7000                       		moveq	#0,d0
0001AE3C 1028 003A                  		move.b	$3A(a0),d0
0001AE40 9029 003A                  		sub.b	$3A(a1),d0
0001AE44 6700                       		beq.s	loc_18E2A
0001AE46 6400                       		bcc.s	loc_18DDA
0001AE48 4400                       		neg.b	d0
0001AE4A                            
0001AE4A                            loc_18DDA:
0001AE4A 323C F7E8                  		move.w	#-$818,d1
0001AE4E 343C FEEC                  		move.w	#-$114,d2
0001AE52 0C00 0001                  		cmpi.b	#1,d0
0001AE56 6700                       		beq.s	loc_18E00
0001AE58 323C F6A0                  		move.w	#-$960,d1
0001AE5C 343C FF0C                  		move.w	#-$F4,d2
0001AE60 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AE66 6D00                       		blt.s	loc_18E00
0001AE68 323C F5E0                  		move.w	#-$A20,d1
0001AE6C 343C FF80                  		move.w	#-$80,d2
0001AE70                            
0001AE70                            loc_18E00:
0001AE70 3141 0012                  		move.w	d1,$12(a0)
0001AE74 3142 0010                  		move.w	d2,$10(a0)
0001AE78 3028 0008                  		move.w	8(a0),d0
0001AE7C 9068 0030                  		sub.w	$30(a0),d0
0001AE80 6400                       		bcc.s	loc_18E16
0001AE82 4468 0010                  		neg.w	$10(a0)
0001AE86                            
0001AE86                            loc_18E16:
0001AE86 117C 0001 001A             		move.b	#1,$1A(a0)
0001AE8C 317C 0020 0028             		move.w	#$20,$28(a0)
0001AE92 5428 0024                  		addq.b	#2,$24(a0)
0001AE96 6000 0000                  		bra.w	loc_18EAA
0001AE9A                            ; ===========================================================================
0001AE9A                            
0001AE9A                            loc_18E2A:				; XREF: loc_18DC6
0001AE9A 45F9 0000 0000             		lea	(word_19018).l,a2
0001AEA0 7000                       		moveq	#0,d0
0001AEA2 1029 001A                  		move.b	$1A(a1),d0
0001AEA6 343C 0028                  		move.w	#$28,d2
0001AEAA 3228 0008                  		move.w	8(a0),d1
0001AEAE 9268 0030                  		sub.w	$30(a0),d1
0001AEB2 6400                       		bcc.s	loc_18E48
0001AEB4 4442                       		neg.w	d2
0001AEB6 5440                       		addq.w	#2,d0
0001AEB8                            
0001AEB8                            loc_18E48:
0001AEB8 D040                       		add.w	d0,d0
0001AEBA 3228 0034                  		move.w	$34(a0),d1
0001AEBE D272 0000                  		add.w	(a2,d0.w),d1
0001AEC2 3141 000C                  		move.w	d1,$C(a0)
0001AEC6 D468 0030                  		add.w	$30(a0),d2
0001AECA 3142 0008                  		move.w	d2,8(a0)
0001AECE 4268 000E                  		clr.w	$E(a0)
0001AED2 4268 000A                  		clr.w	$A(a0)
0001AED6 5368 0028                  		subq.w	#1,$28(a0)
0001AEDA 6600                       		bne.s	loc_18E7A
0001AEDC 317C 0020 0028             		move.w	#$20,$28(a0)
0001AEE2 117C 0008 0024             		move.b	#8,$24(a0)
0001AEE8 4E75                       		rts	
0001AEEA                            ; ===========================================================================
0001AEEA                            
0001AEEA                            loc_18E7A:
0001AEEA 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AEF0 6600                       		bne.s	loc_18E88
0001AEF2 117C 0005 001F             		move.b	#5,$1F(a0)
0001AEF8                            
0001AEF8                            loc_18E88:
0001AEF8 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AEFE 6600                       		bne.s	loc_18E96
0001AF00 117C 0002 001F             		move.b	#2,$1F(a0)
0001AF06                            
0001AF06                            loc_18E96:
0001AF06 5328 001E                  		subq.b	#1,$1E(a0)
0001AF0A 6E00                       		bgt.s	locret_18EA8
0001AF0C 0868 0000 001A             		bchg	#0,$1A(a0)
0001AF12 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AF18                            
0001AF18                            locret_18EA8:
0001AF18 4E75                       		rts	
0001AF1A                            ; ===========================================================================
0001AF1A                            
0001AF1A                            loc_18EAA:				; XREF: Obj7B_Index
0001AF1A 43F8 D040                  		lea	($FFFFD040).w,a1
0001AF1E 707A                       		moveq	#$7A,d0
0001AF20 7240                       		moveq	#$40,d1
0001AF22 743E                       		moveq	#$3E,d2
0001AF24                            
0001AF24                            loc_18EB4:
0001AF24 B011                       		cmp.b	(a1),d0
0001AF26 6700                       		beq.s	loc_18EC0
0001AF28 D2C1                       		adda.w	d1,a1
0001AF2A 51CA FFF8                  		dbf	d2,loc_18EB4
0001AF2E                            
0001AF2E 6000                       		bra.s	loc_18F38
0001AF30                            ; ===========================================================================
0001AF30                            
0001AF30                            loc_18EC0:
0001AF30 3029 0008                  		move.w	8(a1),d0
0001AF34 3229 000C                  		move.w	$C(a1),d1
0001AF38 3428 0008                  		move.w	8(a0),d2
0001AF3C 3628 000C                  		move.w	$C(a0),d3
0001AF40 45FA 0000                  		lea	byte_19022(pc),a2
0001AF44 47FA 0000                  		lea	byte_19026(pc),a3
0001AF48 181A                       		move.b	(a2)+,d4
0001AF4A 4884                       		ext.w	d4
0001AF4C D044                       		add.w	d4,d0
0001AF4E 181B                       		move.b	(a3)+,d4
0001AF50 4884                       		ext.w	d4
0001AF52 D444                       		add.w	d4,d2
0001AF54 B440                       		cmp.w	d0,d2
0001AF56 6500                       		bcs.s	loc_18F38
0001AF58 181A                       		move.b	(a2)+,d4
0001AF5A 4884                       		ext.w	d4
0001AF5C D044                       		add.w	d4,d0
0001AF5E 181B                       		move.b	(a3)+,d4
0001AF60 4884                       		ext.w	d4
0001AF62 D444                       		add.w	d4,d2
0001AF64 B042                       		cmp.w	d2,d0
0001AF66 6500                       		bcs.s	loc_18F38
0001AF68 181A                       		move.b	(a2)+,d4
0001AF6A 4884                       		ext.w	d4
0001AF6C D244                       		add.w	d4,d1
0001AF6E 181B                       		move.b	(a3)+,d4
0001AF70 4884                       		ext.w	d4
0001AF72 D644                       		add.w	d4,d3
0001AF74 B641                       		cmp.w	d1,d3
0001AF76 6500                       		bcs.s	loc_18F38
0001AF78 181A                       		move.b	(a2)+,d4
0001AF7A 4884                       		ext.w	d4
0001AF7C D244                       		add.w	d4,d1
0001AF7E 181B                       		move.b	(a3)+,d4
0001AF80 4884                       		ext.w	d4
0001AF82 D644                       		add.w	d4,d3
0001AF84 B243                       		cmp.w	d3,d1
0001AF86 6500                       		bcs.s	loc_18F38
0001AF88 5428 0024                  		addq.b	#2,$24(a0)
0001AF8C 4268 0028                  		clr.w	$28(a0)
0001AF90 4229 0020                  		clr.b	$20(a1)
0001AF94 5329 0021                  		subq.b	#1,$21(a1)
0001AF98 6600                       		bne.s	loc_18F38
0001AF9A 08E9 0007 0022             		bset	#7,$22(a1)
0001AFA0 4268 0010                  		clr.w	$10(a0)
0001AFA4 4268 0012                  		clr.w	$12(a0)
0001AFA8                            
0001AFA8                            loc_18F38:
0001AFA8 4A68 0012                  		tst.w	$12(a0)
0001AFAC 6A00                       		bpl.s	loc_18F5C
0001AFAE 4EB9 0000 F090             		jsr	ObjectFall
0001AFB4 3028 0034                  		move.w	$34(a0),d0
0001AFB8 0440 002F                  		subi.w	#$2F,d0
0001AFBC B068 000C                  		cmp.w	$C(a0),d0
0001AFC0 6E00                       		bgt.s	loc_18F58
0001AFC2 4EB9 0000 F090             		jsr	ObjectFall
0001AFC8                            
0001AFC8                            loc_18F58:
0001AFC8 6000 FF20                  		bra.w	loc_18E7A
0001AFCC                            ; ===========================================================================
0001AFCC                            
0001AFCC                            loc_18F5C:
0001AFCC 4EB9 0000 F090             		jsr	ObjectFall
0001AFD2 2268 003C                  		movea.l	$3C(a0),a1
0001AFD6 45F9 0000 0000             		lea	(word_19018).l,a2
0001AFDC 7000                       		moveq	#0,d0
0001AFDE 1029 001A                  		move.b	$1A(a1),d0
0001AFE2 3228 0008                  		move.w	8(a0),d1
0001AFE6 9268 0030                  		sub.w	$30(a0),d1
0001AFEA 6400                       		bcc.s	loc_18F7E
0001AFEC 5440                       		addq.w	#2,d0
0001AFEE                            
0001AFEE                            loc_18F7E:
0001AFEE D040                       		add.w	d0,d0
0001AFF0 3228 0034                  		move.w	$34(a0),d1
0001AFF4 D272 0000                  		add.w	(a2,d0.w),d1
0001AFF8 B268 000C                  		cmp.w	$C(a0),d1
0001AFFC 6ECA                       		bgt.s	loc_18F58
0001AFFE 2268 003C                  		movea.l	$3C(a0),a1
0001B002 7202                       		moveq	#2,d1
0001B004 4A68 0010                  		tst.w	$10(a0)
0001B008 6B00                       		bmi.s	loc_18F9C
0001B00A 7200                       		moveq	#0,d1
0001B00C                            
0001B00C                            loc_18F9C:
0001B00C 317C 0000 0028             		move.w	#0,$28(a0)
0001B012                            
0001B012                            loc_18FA2:
0001B012 1341 003A                  		move.b	d1,$3A(a1)
0001B016 1141 003A                  		move.b	d1,$3A(a0)
0001B01A B229 001A                  		cmp.b	$1A(a1),d1
0001B01E 6700                       		beq.s	loc_19008
0001B020 08A9 0003 0022             		bclr	#3,$22(a1)
0001B026 6700                       		beq.s	loc_19008
0001B028 4229 0025                  		clr.b	$25(a1)
0001B02C 137C 0002 0024             		move.b	#2,$24(a1)
0001B032 45F8 D000                  		lea	($FFFFD000).w,a2
0001B036 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B03C 446A 0012                  		neg.w	$12(a2)
0001B040 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B046 6600                       		bne.s	loc_18FDC
0001B048 E0EA 0012                  		asr	$12(a2)
0001B04C                            
0001B04C                            loc_18FDC:
0001B04C 08EA 0001 0022             		bset	#1,$22(a2)
0001B052 08AA 0003 0022             		bclr	#3,$22(a2)
0001B058 422A 003C                  		clr.b	$3C(a2)
0001B05C 2F08                       		move.l	a0,-(sp)
0001B05E 41D2                       		lea	(a2),a0
0001B060                            	;	jsr	Obj01_ChkRoll
0001B060 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001B066 205F                       		movea.l	(sp)+,a0
0001B068 157C 0002 0024             		move.b	#2,$24(a2)
0001B06E 303C 00CC                  		move.w	#$CC,d0
0001B072 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B078                            
0001B078                            loc_19008:
0001B078 4268 0010                  		clr.w	$10(a0)
0001B07C 4268 0012                  		clr.w	$12(a0)
0001B080 5428 0024                  		addq.b	#2,$24(a0)
0001B084 6000 FE64                  		bra.w	loc_18E7A
0001B088                            ; ===========================================================================
0001B088 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B092                            		even
0001B092 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B096                            		even
0001B096 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B09A                            		even
0001B09A                            ; ===========================================================================
0001B09A                            
0001B09A                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B09A 10BC 003F                  		move.b	#$3F,(a0)
0001B09E 4228 0024                  		clr.b	$24(a0)
0001B0A2 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B0A8 6700                       		beq.s	Obj7B_MakeFrag
0001B0AA 4E75                       		rts	
0001B0AC                            ; ===========================================================================
0001B0AC                            
0001B0AC                            Obj7B_MakeFrag:
0001B0AC 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B0B2 7203                       		moveq	#3,d1
0001B0B4 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B0B8                            
0001B0B8                            Obj7B_Loop:
0001B0B8 4EB9 0000 F55E             		jsr	SingleObjLoad
0001B0BE 6600                       		bne.s	loc_1909A
0001B0C0 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B0C4 137C 000A 0024             		move.b	#$A,$24(a1)
0001B0CA 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B0D2 137C 0003 0018             		move.b	#3,$18(a1)
0001B0D8 337C 0518 0002             		move.w	#$518,2(a1)
0001B0DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0EA 335A 0010                  		move.w	(a2)+,$10(a1)
0001B0EE 335A 0012                  		move.w	(a2)+,$12(a1)
0001B0F2 137C 0098 0020             		move.b	#$98,$20(a1)
0001B0F8 0029 0004 0001             		ori.b	#4,1(a1)
0001B0FE 08E9 0007 0001             		bset	#7,1(a1)
0001B104 137C 000C 0019             		move.b	#$C,$19(a1)
0001B10A                            
0001B10A                            loc_1909A:
0001B10A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B10E                            
0001B10E 4E75                       		rts	
0001B110                            ; ===========================================================================
0001B110 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B114 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B118 0100 FCC0                  		dc.w $100, $FCC0
0001B11C 00A0 FDC0                  		dc.w $A0, $FDC0
0001B120                            ; ===========================================================================
0001B120                            
0001B120                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B120 4EB9 0000 F0B0             		jsr	SpeedToPos
0001B126 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B12C 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B132 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B138 7004                       		moveq	#4,d0
0001B13A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B13E E448                       		lsr.w	#2,d0
0001B140 1140 001A                  		move.b	d0,$1A(a0)
0001B144 4A28 0001                  		tst.b	1(a0)
0001B148 6A00 F7E0                  		bpl.w	Obj7A_Delete
0001B14C 4E75                       		rts	
0001B14E                            ; ===========================================================================
0001B14E                            ; ---------------------------------------------------------------------------
0001B14E                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B14E                            ; ---------------------------------------------------------------------------
0001B14E                            Map_obj7B:
0001B14E                            	include "_maps\obj7B.asm"
0001B14E                            ; ---------------------------------------------------------------------------
0001B14E                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B14E                            ; ---------------------------------------------------------------------------
0001B14E 0000                       		dc.w byte_190E2-Map_obj7B
0001B150 0000                       		dc.w byte_190E8-Map_obj7B
0001B152 01                         byte_190E2:	dc.b 1
0001B153 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B158 01                         byte_190E8:	dc.b 1
0001B159 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B15E                            		even
0001B15E                            		even
0001B15E                            
0001B15E                            ; ===========================================================================
0001B15E                            ; ---------------------------------------------------------------------------
0001B15E                            ; Object 75 - Eggman (SYZ)
0001B15E                            ; ---------------------------------------------------------------------------
0001B15E                            
0001B15E                            Obj75:					; XREF: Obj_Index
0001B15E 7000                       		moveq	#0,d0
0001B160 1028 0024                  		move.b	$24(a0),d0
0001B164 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B168 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B16C                            ; ===========================================================================
0001B16C 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B16E 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B170 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B172 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B174 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B176                            
0001B176 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B179 0401 05                    		dc.b 4,	1, 5
0001B17C 0607 05                    		dc.b 6,	7, 5
0001B17F 0800 05                    		dc.b 8,	0, 5
0001B182                            ; ===========================================================================
0001B182                            
0001B182                            Obj75_Main:				; XREF: Obj75_Index
0001B182 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B188 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B18E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B194 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B19A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1A0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B1A6 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B1AA 2248                       		movea.l	a0,a1
0001B1AC 7203                       		moveq	#3,d1
0001B1AE 6000                       		bra.s	Obj75_LoadBoss
0001B1B0                            ; ===========================================================================
0001B1B0                            
0001B1B0                            Obj75_Loop:
0001B1B0 4EB9 0000 F574             		jsr	SingleObjLoad2
0001B1B6 6600                       		bne.s	Obj75_ShipMain
0001B1B8 12BC 0075                  		move.b	#$75,(a1)
0001B1BC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1C8                            
0001B1C8                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B1C8 08A8 0000 0022             		bclr	#0,$22(a0)
0001B1CE 4229 0025                  		clr.b	$25(a1)
0001B1D2 135A 0024                  		move.b	(a2)+,$24(a1)
0001B1D6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B1DA 135A 0018                  		move.b	(a2)+,$18(a1)
0001B1DE 237C 0001 9D96 0004        		move.l	#Map_Eggman,4(a1)
0001B1E6 337C 0400 0002             		move.w	#$400,2(a1)
0001B1EC 137C 0004 0001             		move.b	#4,1(a1)
0001B1F2 137C 0020 0019             		move.b	#$20,$19(a1)
0001B1F8 2348 0034                  		move.l	a0,$34(a1)
0001B1FC 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B200                            
0001B200                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B200 7000                       		moveq	#0,d0
0001B202 1028 0025                  		move.b	$25(a0),d0
0001B206 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B20A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B20E 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001B214 4EB9 0000 C20C             		jsr	AnimateSprite
0001B21A 7003                       		moveq	#3,d0
0001B21C C028 0022                  		and.b	$22(a0),d0
0001B220 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B226 8128 0001                  		or.b	d0,1(a0)
0001B22A 4EF9 0000 F0CA             		jmp	DisplaySprite
0001B230                            ; ===========================================================================
0001B230 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B234 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B238 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B23C                            ; ===========================================================================
0001B23C                            
0001B23C                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B23C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B242 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B248 6400                       		bcc.s	loc_191DE
0001B24A 5428 0025                  		addq.b	#2,$25(a0)
0001B24E                            
0001B24E                            loc_191DE:
0001B24E 1028 003F                  		move.b	$3F(a0),d0
0001B252 5428 003F                  		addq.b	#2,$3F(a0)
0001B256 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001B25C E440                       		asr.w	#2,d0
0001B25E 3140 0012                  		move.w	d0,$12(a0)
0001B262                            
0001B262                            loc_191F2:
0001B262 6100 E676                  		bsr.w	BossMove
0001B266 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B26C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B272                            
0001B272                            loc_19202:
0001B272 3028 0008                  		move.w	8(a0),d0
0001B276 0440 2C00                  		subi.w	#$2C00,d0
0001B27A EA48                       		lsr.w	#5,d0
0001B27C 1140 0034                  		move.b	d0,$34(a0)
0001B280 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B286 6400                       		bcc.s	locret_19256
0001B288 4A28 0022                  		tst.b	$22(a0)
0001B28C 6B00                       		bmi.s	loc_19258
0001B28E 4A28 0020                  		tst.b	$20(a0)
0001B292 6600                       		bne.s	locret_19256
0001B294 4A28 003E                  		tst.b	$3E(a0)
0001B298 6600                       		bne.s	loc_1923A
0001B29A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B2A0 303C 00AC                  		move.w	#$AC,d0
0001B2A4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B2AA                            
0001B2AA                            loc_1923A:
0001B2AA 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B2AE 7000                       		moveq	#0,d0
0001B2B0 4A51                       		tst.w	(a1)
0001B2B2 6600                       		bne.s	loc_19248
0001B2B4 303C 0EEE                  		move.w	#$EEE,d0
0001B2B8                            
0001B2B8                            loc_19248:
0001B2B8 3280                       		move.w	d0,(a1)
0001B2BA 5328 003E                  		subq.b	#1,$3E(a0)
0001B2BE 6600                       		bne.s	locret_19256
0001B2C0 117C 000F 0020             		move.b	#$F,$20(a0)
0001B2C6                            
0001B2C6                            locret_19256:
0001B2C6 4E75                       		rts	
0001B2C8                            ; ===========================================================================
0001B2C8                            
0001B2C8                            loc_19258:				; XREF: loc_19202
0001B2C8 7064                       		moveq	#100,d0
0001B2CA 6100 0000                  		bsr.w	AddPoints
0001B2CE 117C 0006 0025             		move.b	#6,$25(a0)
0001B2D4 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B2DA 4268 0010                  		clr.w	$10(a0)
0001B2DE 4E75                       		rts	
0001B2E0                            ; ===========================================================================
0001B2E0                            
0001B2E0                            loc_19270:				; XREF: Obj75_ShipIndex
0001B2E0 3028 0030                  		move.w	$30(a0),d0
0001B2E4 317C 0140 0010             		move.w	#$140,$10(a0)
0001B2EA 0828 0000 0022             		btst	#0,$22(a0)
0001B2F0 6600                       		bne.s	loc_1928E
0001B2F2 4468 0010                  		neg.w	$10(a0)
0001B2F6 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B2FA 6E00                       		bgt.s	loc_1929E
0001B2FC 6000                       		bra.s	loc_19294
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            loc_1928E:
0001B2FE 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B302 6D00                       		blt.s	loc_1929E
0001B304                            
0001B304                            loc_19294:
0001B304 0868 0000 0022             		bchg	#0,$22(a0)
0001B30A 4228 003D                  		clr.b	$3D(a0)
0001B30E                            
0001B30E                            loc_1929E:
0001B30E 0440 2C10                  		subi.w	#$2C10,d0
0001B312 0240 001F                  		andi.w	#$1F,d0
0001B316 0440 001F                  		subi.w	#$1F,d0
0001B31A 6A00                       		bpl.s	loc_192AE
0001B31C 4440                       		neg.w	d0
0001B31E                            
0001B31E                            loc_192AE:
0001B31E 5340                       		subq.w	#1,d0
0001B320 6E00                       		bgt.s	loc_192E8
0001B322 4A28 003D                  		tst.b	$3D(a0)
0001B326 6600                       		bne.s	loc_192E8
0001B328 3238 D008                  		move.w	($FFFFD008).w,d1
0001B32C 0441 2C00                  		subi.w	#$2C00,d1
0001B330 EA41                       		asr.w	#5,d1
0001B332 B228 0034                  		cmp.b	$34(a0),d1
0001B336 6600                       		bne.s	loc_192E8
0001B338 7000                       		moveq	#0,d0
0001B33A 1028 0034                  		move.b	$34(a0),d0
0001B33E EB40                       		asl.w	#5,d0
0001B340 0640 2C10                  		addi.w	#$2C10,d0
0001B344 3140 0030                  		move.w	d0,$30(a0)
0001B348 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B34C 5428 0025                  		addq.b	#2,$25(a0)
0001B350 4268 0028                  		clr.w	$28(a0)
0001B354 4268 0010                  		clr.w	$10(a0)
0001B358                            
0001B358                            loc_192E8:
0001B358 6000 FEF4                  		bra.w	loc_191DE
0001B35C                            ; ===========================================================================
0001B35C                            
0001B35C                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B35C 7000                       		moveq	#0,d0
0001B35E 1028 0028                  		move.b	$28(a0),d0
0001B362 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B366 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B36A                            ; ===========================================================================
0001B36A 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B36C 0000                       		dc.w loc_19348-off_192FA
0001B36E 0000                       		dc.w loc_1938E-off_192FA
0001B370 0000                       		dc.w loc_193D0-off_192FA
0001B372                            ; ===========================================================================
0001B372                            
0001B372                            loc_19302:				; XREF: off_192FA
0001B372 317C 0180 0012             		move.w	#$180,$12(a0)
0001B378 3028 0038                  		move.w	$38(a0),d0
0001B37C 0C40 0556                  		cmpi.w	#$556,d0
0001B380 6500                       		bcs.s	loc_19344
0001B382 317C 0556 0038             		move.w	#$556,$38(a0)
0001B388 4268 003C                  		clr.w	$3C(a0)
0001B38C 70FF                       		moveq	#-1,d0
0001B38E 3028 0036                  		move.w	$36(a0),d0
0001B392 6700                       		beq.s	loc_1933C
0001B394 2240                       		movea.l	d0,a1
0001B396 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B39C 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B3A2 2348 0034                  		move.l	a0,$34(a1)
0001B3A6 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B3AC                            
0001B3AC                            loc_1933C:
0001B3AC 4268 0012                  		clr.w	$12(a0)
0001B3B0 5428 0028                  		addq.b	#2,$28(a0)
0001B3B4                            
0001B3B4                            loc_19344:
0001B3B4 6000 FEAC                  		bra.w	loc_191F2
0001B3B8                            ; ===========================================================================
0001B3B8                            
0001B3B8                            loc_19348:				; XREF: off_192FA
0001B3B8 5368 003C                  		subq.w	#1,$3C(a0)
0001B3BC 6A00                       		bpl.s	loc_19366
0001B3BE 5428 0028                  		addq.b	#2,$28(a0)
0001B3C2 317C F800 0012             		move.w	#-$800,$12(a0)
0001B3C8 4A68 0036                  		tst.w	$36(a0)
0001B3CC 6600                       		bne.s	loc_19362
0001B3CE E0E8 0012                  		asr	$12(a0)
0001B3D2                            
0001B3D2                            loc_19362:
0001B3D2 7000                       		moveq	#0,d0
0001B3D4 6000                       		bra.s	loc_1937C
0001B3D6                            ; ===========================================================================
0001B3D6                            
0001B3D6                            loc_19366:
0001B3D6 7000                       		moveq	#0,d0
0001B3D8 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B3DE 6E00                       		bgt.s	loc_1937C
0001B3E0 7002                       		moveq	#2,d0
0001B3E2 0828 0001 003D             		btst	#1,$3D(a0)
0001B3E8 6700                       		beq.s	loc_1937C
0001B3EA 4440                       		neg.w	d0
0001B3EC                            
0001B3EC                            loc_1937C:
0001B3EC D068 0038                  		add.w	$38(a0),d0
0001B3F0 3140 000C                  		move.w	d0,$C(a0)
0001B3F4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B3FA 6000 FE76                  		bra.w	loc_19202
0001B3FE                            ; ===========================================================================
0001B3FE                            
0001B3FE                            loc_1938E:				; XREF: off_192FA
0001B3FE 303C 04DA                  		move.w	#$4DA,d0
0001B402 4A68 0036                  		tst.w	$36(a0)
0001B406 6700                       		beq.s	loc_1939C
0001B408 0440 0018                  		subi.w	#$18,d0
0001B40C                            
0001B40C                            loc_1939C:
0001B40C B068 0038                  		cmp.w	$38(a0),d0
0001B410 6D00                       		blt.s	loc_193BE
0001B412 317C 0008 003C             		move.w	#8,$3C(a0)
0001B418 4A68 0036                  		tst.w	$36(a0)
0001B41C 6700                       		beq.s	loc_193B4
0001B41E 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B424                            
0001B424                            loc_193B4:
0001B424 5428 0028                  		addq.b	#2,$28(a0)
0001B428 4268 0012                  		clr.w	$12(a0)
0001B42C 6000                       		bra.s	loc_193CC
0001B42E                            ; ===========================================================================
0001B42E                            
0001B42E                            loc_193BE:
0001B42E 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B434 6C00                       		bge.s	loc_193CC
0001B436 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B43C                            
0001B43C                            loc_193CC:
0001B43C 6000 FE24                  		bra.w	loc_191F2
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            loc_193D0:				; XREF: off_192FA
0001B440 5368 003C                  		subq.w	#1,$3C(a0)
0001B444 6E00                       		bgt.s	loc_19406
0001B446 6B00                       		bmi.s	loc_193EE
0001B448 70FF                       		moveq	#-1,d0
0001B44A 3028 0036                  		move.w	$36(a0),d0
0001B44E 6700                       		beq.s	loc_193E8
0001B450 2240                       		movea.l	d0,a1
0001B452 137C 000A 0029             		move.b	#$A,$29(a1)
0001B458                            
0001B458                            loc_193E8:
0001B458 4268 0036                  		clr.w	$36(a0)
0001B45C 6000                       		bra.s	loc_19406
0001B45E                            ; ===========================================================================
0001B45E                            
0001B45E                            loc_193EE:
0001B45E 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B464 6600                       		bne.s	loc_19406
0001B466 4228 0029                  		clr.b	$29(a0)
0001B46A 5528 0025                  		subq.b	#2,$25(a0)
0001B46E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B474 6000                       		bra.s	loc_19446
0001B476                            ; ===========================================================================
0001B476                            
0001B476                            loc_19406:
0001B476 7001                       		moveq	#1,d0
0001B478 4A68 0036                  		tst.w	$36(a0)
0001B47C 6700                       		beq.s	loc_19410
0001B47E 7002                       		moveq	#2,d0
0001B480                            
0001B480                            loc_19410:
0001B480 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B486 6700                       		beq.s	loc_19424
0001B488 6D00                       		blt.s	loc_1941C
0001B48A 4440                       		neg.w	d0
0001B48C                            
0001B48C                            loc_1941C:
0001B48C 4A68 0036                  		tst.w	$36(a0)
0001B490 D168 0038                  		add.w	d0,$38(a0)
0001B494                            
0001B494                            loc_19424:
0001B494 7000                       		moveq	#0,d0
0001B496 4A68 0036                  		tst.w	$36(a0)
0001B49A 6700                       		beq.s	loc_19438
0001B49C 7002                       		moveq	#2,d0
0001B49E 0828 0000 003D             		btst	#0,$3D(a0)
0001B4A4 6700                       		beq.s	loc_19438
0001B4A6 4440                       		neg.w	d0
0001B4A8                            
0001B4A8                            loc_19438:
0001B4A8 D068 0038                  		add.w	$38(a0),d0
0001B4AC 3140 000C                  		move.w	d0,$C(a0)
0001B4B0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B4B6                            
0001B4B6                            loc_19446:
0001B4B6 6000 FDBA                  		bra.w	loc_19202
0001B4BA                            
0001B4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4BA                            
0001B4BA                            
0001B4BA                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B4BA 4268 0036                  		clr.w	$36(a0)
0001B4BE 43F8 D040                  		lea	($FFFFD040).w,a1
0001B4C2 703E                       		moveq	#$3E,d0
0001B4C4 7276                       		moveq	#$76,d1
0001B4C6 1428 0034                  		move.b	$34(a0),d2
0001B4CA                            
0001B4CA                            Obj75_FindLoop:
0001B4CA B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B4CC 6600                       		bne.s	loc_1946A	; if not, branch
0001B4CE B429 0028                  		cmp.b	$28(a1),d2
0001B4D2 6600                       		bne.s	loc_1946A
0001B4D4 3149 0036                  		move.w	a1,$36(a0)
0001B4D8 6000                       		bra.s	locret_19472
0001B4DA                            ; ===========================================================================
0001B4DA                            
0001B4DA                            loc_1946A:
0001B4DA 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B4DE 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B4E2                            
0001B4E2                            locret_19472:
0001B4E2 4E75                       		rts	
0001B4E4                            ; End of function Obj75_FindBlocks
0001B4E4                            
0001B4E4                            ; ===========================================================================
0001B4E4                            
0001B4E4                            loc_19474:				; XREF: Obj75_ShipIndex
0001B4E4 5368 003C                  		subq.w	#1,$3C(a0)
0001B4E8 6B00                       		bmi.s	loc_1947E
0001B4EA 6000 E3AC                  		bra.w	BossDefeated
0001B4EE                            ; ===========================================================================
0001B4EE                            
0001B4EE                            loc_1947E:
0001B4EE 5428 0025                  		addq.b	#2,$25(a0)
0001B4F2 4268 0012                  		clr.w	$12(a0)
0001B4F6 08E8 0000 0022             		bset	#0,$22(a0)
0001B4FC 08A8 0007 0022             		bclr	#7,$22(a0)
0001B502 4268 0010                  		clr.w	$10(a0)
0001B506 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B50C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B510 6600                       		bne.s	loc_194A8
0001B512 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B518                            
0001B518                            loc_194A8:
0001B518 6000 FD58                  		bra.w	loc_19202
0001B51C                            ; ===========================================================================
0001B51C                            
0001B51C                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B51C 5268 003C                  		addq.w	#1,$3C(a0)
0001B520 6700                       		beq.s	loc_194BC
0001B522 6A00                       		bpl.s	loc_194C2
0001B524 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B52A 6000                       		bra.s	loc_194EE
0001B52C                            ; ===========================================================================
0001B52C                            
0001B52C                            loc_194BC:
0001B52C 4268 0012                  		clr.w	$12(a0)
0001B530 6000                       		bra.s	loc_194EE
0001B532                            ; ===========================================================================
0001B532                            
0001B532                            loc_194C2:
0001B532 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B538 6500                       		bcs.s	loc_194DA
0001B53A 6700                       		beq.s	loc_194E0
0001B53C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B542 6500                       		bcs.s	loc_194EE
0001B544 5428 0025                  		addq.b	#2,$25(a0)
0001B548 6000                       		bra.s	loc_194EE
0001B54A                            ; ===========================================================================
0001B54A                            
0001B54A                            loc_194DA:
0001B54A 5168 0012                  		subq.w	#8,$12(a0)
0001B54E 6000                       		bra.s	loc_194EE
0001B550                            ; ===========================================================================
0001B550                            
0001B550                            loc_194E0:
0001B550 4268 0012                  		clr.w	$12(a0)
0001B554 6100 E5BC                  		bsr.w	BossEnd
0001B558                            
0001B558                            loc_194EE:
0001B558 6000 FD08                  		bra.w	loc_191F2
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B55C 317C 0400 0010             		move.w	#$400,$10(a0)
0001B562 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B568 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B56E 6400                       		bcc.s	loc_1950C
0001B570 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B574 6000                       		bra.s	loc_19512
0001B576                            ; ===========================================================================
0001B576                            
0001B576                            loc_1950C:
0001B576 4A28 0001                  		tst.b	1(a0)
0001B57A 6A00                       		bpl.s	Obj75_ShipDelete
0001B57C                            
0001B57C                            loc_19512:
0001B57C 6100 E35C                  		bsr.w	BossMove
0001B580 6000 FCCC                  		bra.w	loc_191DE
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            Obj75_ShipDelete:
0001B584 4EF9 0000 F106             		jmp	DeleteObject
0001B58A                            ; ===========================================================================
0001B58A                            
0001B58A                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B58A 7201                       		moveq	#1,d1
0001B58C 2268 0034                  		movea.l	$34(a0),a1
0001B590 7000                       		moveq	#0,d0
0001B592 1029 0025                  		move.b	$25(a1),d0
0001B596 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B59A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B59E 1141 001C                  		move.b	d1,$1C(a0)
0001B5A2 1010                       		move.b	(a0),d0
0001B5A4 B011                       		cmp.b	(a1),d0
0001B5A6 6600                       		bne.s	Obj75_FaceDelete
0001B5A8 6000                       		bra.s	loc_195BE
0001B5AA                            ; ===========================================================================
0001B5AA                            
0001B5AA                            Obj75_FaceDelete:
0001B5AA 4EF9 0000 F106             		jmp	DeleteObject
0001B5B0                            ; ===========================================================================
0001B5B0 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B5B4 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B5B8 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_19552:				; XREF: off_19546
0001B5BC 720A                       		moveq	#$A,d1
0001B5BE 4E75                       		rts	
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            loc_19556:				; XREF: off_19546
0001B5C0 7206                       		moveq	#6,d1
0001B5C2 4E75                       		rts	
0001B5C4                            ; ===========================================================================
0001B5C4                            
0001B5C4                            loc_1955A:				; XREF: off_19546
0001B5C4 7000                       		moveq	#0,d0
0001B5C6 1029 0028                  		move.b	$28(a1),d0
0001B5CA 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B5CE 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B5D2                            ; ===========================================================================
0001B5D2 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B5D6 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B5DA                            ; ===========================================================================
0001B5DA                            
0001B5DA                            loc_19570:				; XREF: off_19568
0001B5DA 6000                       		bra.s	loc_19574
0001B5DC                            ; ===========================================================================
0001B5DC                            
0001B5DC                            loc_19572:				; XREF: off_19568
0001B5DC 7206                       		moveq	#6,d1
0001B5DE                            
0001B5DE                            loc_19574:				; XREF: off_19546
0001B5DE 4A29 0020                  		tst.b	$20(a1)
0001B5E2 6600                       		bne.s	loc_1957E
0001B5E4 7205                       		moveq	#5,d1
0001B5E6 4E75                       		rts	
0001B5E8                            ; ===========================================================================
0001B5E8                            
0001B5E8                            loc_1957E:
0001B5E8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B5EE 6500                       		bcs.s	locret_19588
0001B5F0 7204                       		moveq	#4,d1
0001B5F2                            
0001B5F2                            locret_19588:
0001B5F2 4E75                       		rts	
0001B5F4                            ; ===========================================================================
0001B5F4                            
0001B5F4                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B5F4 117C 0007 001C             		move.b	#7,$1C(a0)
0001B5FA 2268 0034                  		movea.l	$34(a0),a1
0001B5FE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B604 6600                       		bne.s	loc_195AA
0001B606 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B60C 4A28 0001                  		tst.b	1(a0)
0001B610 6A00                       		bpl.s	Obj75_FlameDelete
0001B612 6000                       		bra.s	loc_195B6
0001B614                            ; ===========================================================================
0001B614                            
0001B614                            loc_195AA:
0001B614 4A69 0010                  		tst.w	$10(a1)
0001B618 6700                       		beq.s	loc_195B6
0001B61A 117C 0008 001C             		move.b	#8,$1C(a0)
0001B620                            
0001B620                            loc_195B6:
0001B620 6000                       		bra.s	loc_195BE
0001B622                            ; ===========================================================================
0001B622                            
0001B622                            Obj75_FlameDelete:
0001B622 4EF9 0000 F106             		jmp	DeleteObject
0001B628                            ; ===========================================================================
0001B628                            
0001B628                            loc_195BE:
0001B628 43F9 0001 9D46             		lea	(Ani_Eggman).l,a1
0001B62E 4EB9 0000 C20C             		jsr	AnimateSprite
0001B634 2268 0034                  		movea.l	$34(a0),a1
0001B638 3169 0008 0008             		move.w	8(a1),8(a0)
0001B63E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B644                            
0001B644                            loc_195DA:
0001B644 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B64A 7003                       		moveq	#3,d0
0001B64C C028 0022                  		and.b	$22(a0),d0
0001B650 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B656 8128 0001                  		or.b	d0,1(a0)
0001B65A 4EF9 0000 F0CA             		jmp	DisplaySprite
0001B660                            ; ===========================================================================
0001B660                            
0001B660                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B660 217C 0001 9E5E 0004        		move.l	#Map_BossItems,4(a0)
0001B668 317C 246C 0002             		move.w	#$246C,2(a0)
0001B66E 117C 0005 001A             		move.b	#5,$1A(a0)
0001B674 2268 0034                  		movea.l	$34(a0),a1
0001B678 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B67E 6600                       		bne.s	loc_1961C
0001B680 4A28 0001                  		tst.b	1(a0)
0001B684 6A00                       		bpl.s	Obj75_SpikeDelete
0001B686                            
0001B686                            loc_1961C:
0001B686 3169 0008 0008             		move.w	8(a1),8(a0)
0001B68C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B692 3028 003C                  		move.w	$3C(a0),d0
0001B696 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B69C 6600                       		bne.s	loc_19652
0001B69E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B6A4 6700                       		beq.s	loc_1964C
0001B6A6 4A29 0028                  		tst.b	$28(a1)
0001B6AA 6600                       		bne.s	loc_19658
0001B6AC 0C40 0094                  		cmpi.w	#$94,d0
0001B6B0 6C00                       		bge.s	loc_19658
0001B6B2 5E40                       		addq.w	#7,d0
0001B6B4 6000                       		bra.s	loc_19658
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            loc_1964C:
0001B6B6 4A69 003C                  		tst.w	$3C(a1)
0001B6BA 6A00                       		bpl.s	loc_19658
0001B6BC                            
0001B6BC                            loc_19652:
0001B6BC 4A40                       		tst.w	d0
0001B6BE 6F00                       		ble.s	loc_19658
0001B6C0 5B40                       		subq.w	#5,d0
0001B6C2                            
0001B6C2                            loc_19658:
0001B6C2 3140 003C                  		move.w	d0,$3C(a0)
0001B6C6 E440                       		asr.w	#2,d0
0001B6C8 D168 000C                  		add.w	d0,$C(a0)
0001B6CC 117C 0008 0019             		move.b	#8,$19(a0)
0001B6D2 117C 000C 0016             		move.b	#$C,$16(a0)
0001B6D8 4228 0020                  		clr.b	$20(a0)
0001B6DC 2268 0034                  		movea.l	$34(a0),a1
0001B6E0 4A29 0020                  		tst.b	$20(a1)
0001B6E4 6700                       		beq.s	loc_19688
0001B6E6 4A29 0029                  		tst.b	$29(a1)
0001B6EA 6600                       		bne.s	loc_19688
0001B6EC 117C 0084 0020             		move.b	#$84,$20(a0)
0001B6F2                            
0001B6F2                            loc_19688:
0001B6F2 6000 FF50                  		bra.w	loc_195DA
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            Obj75_SpikeDelete:
0001B6F6 4EF9 0000 F106             		jmp	DeleteObject
0001B6FC                            ; ===========================================================================
0001B6FC                            ; ---------------------------------------------------------------------------
0001B6FC                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B6FC                            ; ---------------------------------------------------------------------------
0001B6FC                            
0001B6FC                            Obj76:					; XREF: Obj_Index
0001B6FC 7000                       		moveq	#0,d0
0001B6FE 1028 0024                  		move.b	$24(a0),d0
0001B702 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B706 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B70A                            ; ===========================================================================
0001B70A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B70C 0000                       		dc.w Obj76_Action-Obj76_Index
0001B70E 0000                       		dc.w loc_19762-Obj76_Index
0001B710                            ; ===========================================================================
0001B710                            
0001B710                            Obj76_Main:				; XREF: Obj76_Index
0001B710 7800                       		moveq	#0,d4
0001B712 3A3C 2C10                  		move.w	#$2C10,d5
0001B716 7C09                       		moveq	#9,d6
0001B718 43D0                       		lea	(a0),a1
0001B71A 6000                       		bra.s	Obj76_MakeBlock
0001B71C                            ; ===========================================================================
0001B71C                            
0001B71C                            Obj76_Loop:
0001B71C 4EB9 0000 F55E             		jsr	SingleObjLoad
0001B722 6600                       		bne.s	Obj76_ExitLoop
0001B724                            
0001B724                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B724 12BC 0076                  		move.b	#$76,(a1)
0001B728 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B730 337C 4000 0002             		move.w	#$4000,2(a1)
0001B736 137C 0004 0001             		move.b	#4,1(a1)
0001B73C 137C 0010 0019             		move.b	#$10,$19(a1)
0001B742 137C 0010 0016             		move.b	#$10,$16(a1)
0001B748 137C 0003 0018             		move.b	#3,$18(a1)
0001B74E 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B752 337C 0582 000C             		move.w	#$582,$C(a1)
0001B758 3344 0028                  		move.w	d4,$28(a1)
0001B75C 0644 0101                  		addi.w	#$101,d4
0001B760 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B764 5429 0024                  		addq.b	#2,$24(a1)
0001B768 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B76C                            
0001B76C                            Obj76_ExitLoop:
0001B76C 4E75                       		rts	
0001B76E                            ; ===========================================================================
0001B76E                            
0001B76E                            Obj76_Action:				; XREF: Obj76_Index
0001B76E 1028 0029                  		move.b	$29(a0),d0
0001B772 B028 0028                  		cmp.b	$28(a0),d0
0001B776 6700                       		beq.s	Obj76_Solid
0001B778 4A00                       		tst.b	d0
0001B77A 6B00                       		bmi.s	loc_19718
0001B77C                            
0001B77C                            loc_19712:
0001B77C 6100 0000                  		bsr.w	Obj76_Break
0001B780 6000                       		bra.s	Obj76_Display
0001B782                            ; ===========================================================================
0001B782                            
0001B782                            loc_19718:
0001B782 2268 0034                  		movea.l	$34(a0),a1
0001B786 4A29 0021                  		tst.b	$21(a1)
0001B78A 67F0                       		beq.s	loc_19712
0001B78C 3169 0008 0008             		move.w	8(a1),8(a0)
0001B792 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B798 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B79E B2C8                       		cmpa.w	a0,a1
0001B7A0 6500                       		bcs.s	Obj76_Display
0001B7A2 3029 0012                  		move.w	$12(a1),d0
0001B7A6 48C0                       		ext.l	d0
0001B7A8 E080                       		asr.l	#8,d0
0001B7AA D168 000C                  		add.w	d0,$C(a0)
0001B7AE 6000                       		bra.s	Obj76_Display
0001B7B0                            ; ===========================================================================
0001B7B0                            
0001B7B0                            Obj76_Solid:				; XREF: Obj76_Action
0001B7B0 323C 001B                  		move.w	#$1B,d1
0001B7B4 343C 0010                  		move.w	#$10,d2
0001B7B8 363C 0011                  		move.w	#$11,d3
0001B7BC 3828 0008                  		move.w	8(a0),d4
0001B7C0 4EB9 0001 14A8             		jsr	SolidObject
0001B7C6                            
0001B7C6                            Obj76_Display:				; XREF: Obj76_Action
0001B7C6 4EF9 0000 F0CA             		jmp	DisplaySprite
0001B7CC                            ; ===========================================================================
0001B7CC                            
0001B7CC                            loc_19762:				; XREF: Obj76_Index
0001B7CC 4A28 0001                  		tst.b	1(a0)
0001B7D0 6A00                       		bpl.s	Obj76_Delete
0001B7D2 4EB9 0000 F090             		jsr	ObjectFall
0001B7D8 4EF9 0000 F0CA             		jmp	DisplaySprite
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            Obj76_Delete:
0001B7DE 4EF9 0000 F106             		jmp	DeleteObject
0001B7E4                            
0001B7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7E4                            
0001B7E4                            
0001B7E4                            Obj76_Break:				; XREF: Obj76_Action
0001B7E4 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B7E8 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B7EC 7801                       		moveq	#1,d4
0001B7EE 7203                       		moveq	#3,d1
0001B7F0 7438                       		moveq	#$38,d2
0001B7F2 5428 0024                  		addq.b	#2,$24(a0)
0001B7F6 117C 0008 0019             		move.b	#8,$19(a0)
0001B7FC 117C 0008 0016             		move.b	#8,$16(a0)
0001B802 43D0                       		lea	(a0),a1
0001B804 6000                       		bra.s	Obj76_MakeFrag
0001B806                            ; ===========================================================================
0001B806                            
0001B806                            Obj76_LoopFrag:
0001B806 4EB9 0000 F574             		jsr	SingleObjLoad2
0001B80C 6600                       		bne.s	loc_197D4
0001B80E                            
0001B80E                            Obj76_MakeFrag:
0001B80E 45D0                       		lea	(a0),a2
0001B810 47D1                       		lea	(a1),a3
0001B812 7603                       		moveq	#3,d3
0001B814                            
0001B814                            loc_197AA:
0001B814 26DA                       		move.l	(a2)+,(a3)+
0001B816 26DA                       		move.l	(a2)+,(a3)+
0001B818 26DA                       		move.l	(a2)+,(a3)+
0001B81A 26DA                       		move.l	(a2)+,(a3)+
0001B81C 51CB FFF6                  		dbf	d3,loc_197AA
0001B820                            
0001B820 335C 0010                  		move.w	(a4)+,$10(a1)
0001B824 335C 0012                  		move.w	(a4)+,$12(a1)
0001B828 361D                       		move.w	(a5)+,d3
0001B82A D769 0008                  		add.w	d3,8(a1)
0001B82E 361D                       		move.w	(a5)+,d3
0001B830 D769 000C                  		add.w	d3,$C(a1)
0001B834 1344 001A                  		move.b	d4,$1A(a1)
0001B838 5244                       		addq.w	#1,d4
0001B83A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B83E                            
0001B83E                            loc_197D4:
0001B83E 303C 00CB                  		move.w	#$CB,d0
0001B842 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B848                            ; End of function Obj76_Break
0001B848                            
0001B848                            ; ===========================================================================
0001B848 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B84C 0180 FE00                  		dc.w $180, $FE00
0001B850 FF00 FF00                  		dc.w $FF00, $FF00
0001B854 0100 FF00                  		dc.w $100, $FF00
0001B858 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B85C 0010 0000                  		dc.w $10, 0
0001B860 0000 0010                  		dc.w 0,	$10
0001B864 0010 0010                  		dc.w $10, $10
0001B868                            ; ---------------------------------------------------------------------------
0001B868                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B868                            ; ---------------------------------------------------------------------------
0001B868                            Map_obj76:
0001B868                            	include "_maps\obj76.asm"
0001B868                            ; ---------------------------------------------------------------------------
0001B868                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B868                            ; ---------------------------------------------------------------------------
0001B868 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B86C 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B870 0000                       		dc.w byte_19826-Map_obj76
0001B872 02                         byte_19808:	dc.b 2
0001B873 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B878 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B87D 00                         		dc.b 0
0001B87E 01                         byte_19814:	dc.b 1
0001B87F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B884 01                         byte_1981A:	dc.b 1
0001B885 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B88A 01                         byte_19820:	dc.b 1
0001B88B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B890 01                         byte_19826:	dc.b 1
0001B891 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B896                            		even
0001B896                            		even
0001B896                            
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B896 4EF9 0000 F106             		jmp	DeleteObject
0001B89C                            ; ===========================================================================
0001B89C                            ; ---------------------------------------------------------------------------
0001B89C                            ; Object 82 - Eggman (SBZ2)
0001B89C                            ; ---------------------------------------------------------------------------
0001B89C                            
0001B89C                            Obj82:					; XREF: Obj_Index
0001B89C 7000                       		moveq	#0,d0
0001B89E 1028 0024                  		move.b	$24(a0),d0
0001B8A2 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B8A6 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B8AA                            ; ===========================================================================
0001B8AA 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B8AC 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B8AE 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B8B0                            
0001B8B0 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B8B3 0400 03                    		dc.b 4,	0, 3
0001B8B6                            ; ===========================================================================
0001B8B6                            
0001B8B6                            Obj82_Main:				; XREF: Obj82_Index
0001B8B6 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B8BA 317C 2160 0008             		move.w	#$2160,8(a0)
0001B8C0 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B8C6 117C 000F 0020             		move.b	#$F,$20(a0)
0001B8CC 117C 0010 0021             		move.b	#$10,$21(a0)
0001B8D2 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8D8 4228 0025                  		clr.b	$25(a0)
0001B8DC 115A 0024                  		move.b	(a2)+,$24(a0)
0001B8E0 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B8E4 115A 0018                  		move.b	(a2)+,$18(a0)
0001B8E8 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B8F0 317C 0400 0002             		move.w	#$400,2(a0)
0001B8F6 117C 0004 0001             		move.b	#4,1(a0)
0001B8FC 08E8 0007 0001             		bset	#7,1(a0)
0001B902 117C 0020 0019             		move.b	#$20,$19(a0)
0001B908 4EB9 0000 F574             		jsr	SingleObjLoad2
0001B90E 6600                       		bne.s	Obj82_Eggman
0001B910 2348 0034                  		move.l	a0,$34(a1)
0001B914 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B918 337C 2130 0008             		move.w	#$2130,8(a1)
0001B91E 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B924 4228 0025                  		clr.b	$25(a0)
0001B928 135A 0024                  		move.b	(a2)+,$24(a1)
0001B92C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B930 135A 0018                  		move.b	(a2)+,$18(a1)
0001B934 237C 0000 D98E 0004        		move.l	#Map_obj32,4(a1)
0001B93C 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B942 137C 0004 0001             		move.b	#4,1(a1)
0001B948 08E9 0007 0001             		bset	#7,1(a1)
0001B94E 137C 0010 0019             		move.b	#$10,$19(a1)
0001B954 137C 0000 001A             		move.b	#0,$1A(a1)
0001B95A                            
0001B95A                            Obj82_Eggman:				; XREF: Obj82_Index
0001B95A 7000                       		moveq	#0,d0
0001B95C 1028 0025                  		move.b	$25(a0),d0
0001B960 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B964 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B968 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B96C 4EB9 0000 C20C             		jsr	AnimateSprite
0001B972 4EF9 0000 F0CA             		jmp	DisplaySprite
0001B978                            ; ===========================================================================
0001B978 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B97A 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B97C 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B97E 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B980                            ; ===========================================================================
0001B980                            
0001B980                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B980 3028 0008                  		move.w	8(a0),d0
0001B984 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B988 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B98C 6400                       		bcc.s	loc_19934	; if not, branch
0001B98E 5428 0025                  		addq.b	#2,$25(a0)
0001B992 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B998 117C 0001 001C             		move.b	#1,$1C(a0)
0001B99E                            
0001B99E                            loc_19934:				; XREF: Obj82_EggIndex
0001B99E 4EF9 0000 F0B0             		jmp	SpeedToPos
0001B9A4                            ; ===========================================================================
0001B9A4                            
0001B9A4                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B9A4 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B9A8 6600                       		bne.s	loc_19954	; if time remains, branch
0001B9AA 5428 0025                  		addq.b	#2,$25(a0)
0001B9AE 117C 0002 001C             		move.b	#2,$1C(a0)
0001B9B4 5868 000C                  		addq.w	#4,$C(a0)
0001B9B8 317C 000F 003C             		move.w	#15,$3C(a0)
0001B9BE                            
0001B9BE                            loc_19954:
0001B9BE 60DE                       		bra.s	loc_19934
0001B9C0                            ; ===========================================================================
0001B9C0                            
0001B9C0                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B9C0 5368 003C                  		subq.w	#1,$3C(a0)
0001B9C4 6E00                       		bgt.s	loc_199D0
0001B9C6 6600                       		bne.s	loc_1996A
0001B9C8 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B9CE 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B9D4                            
0001B9D4                            loc_1996A:
0001B9D4 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B9DA 6E00                       		bgt.s	loc_19976
0001B9DC 4268 0010                  		clr.w	$10(a0)
0001B9E0                            
0001B9E0                            loc_19976:
0001B9E0 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B9E6 4A68 0012                  		tst.w	$12(a0)
0001B9EA 6B00                       		bmi.s	Obj82_FindBlocks
0001B9EC 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B9F2 6500                       		bcs.s	Obj82_FindBlocks
0001B9F4 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B9FA 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BA00 6500                       		bcs.s	Obj82_FindBlocks
0001BA02 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BA08 4268 0012                  		clr.w	$12(a0)
0001BA0C                            
0001BA0C                            Obj82_FindBlocks:
0001BA0C 3028 0010                  		move.w	$10(a0),d0
0001BA10 8068 0012                  		or.w	$12(a0),d0
0001BA14 6600                       		bne.s	loc_199D0
0001BA16 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BA1A 703E                       		moveq	#$3E,d0
0001BA1C 7240                       		moveq	#$40,d1
0001BA1E                            
0001BA1E                            Obj82_FindLoop:	
0001BA1E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BA20 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BA24 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BA28                            
0001BA28 6600                       		bne.s	loc_199D0
0001BA2A 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BA30 5428 0025                  		addq.b	#2,$25(a0)
0001BA34 117C 0001 001C             		move.b	#1,$1C(a0)
0001BA3A                            
0001BA3A                            loc_199D0:
0001BA3A 6000 FF62                  		bra.w	loc_19934
0001BA3E                            ; ===========================================================================
0001BA3E                            
0001BA3E                            Obj82_Switch:				; XREF: Obj82_Index
0001BA3E 7000                       		moveq	#0,d0
0001BA40 1028 0025                  		move.b	$25(a0),d0
0001BA44 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BA48 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BA4C                            ; ===========================================================================
0001BA4C 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BA4E 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BA50                            ; ===========================================================================
0001BA50                            
0001BA50                            loc_199E6:				; XREF: Obj82_SwIndex
0001BA50 2268 0034                  		movea.l	$34(a0),a1
0001BA54 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BA5A 6600                       		bne.s	Obj82_SwDisplay
0001BA5C 117C 0001 001A             		move.b	#1,$1A(a0)
0001BA62 5428 0025                  		addq.b	#2,$25(a0)
0001BA66                            
0001BA66                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BA66 4EF9 0000 F0CA             		jmp	DisplaySprite
0001BA6C                            ; ===========================================================================
0001BA6C                            Ani_obj82:
0001BA6C                            	include "_anim\obj82.asm"
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C                            ; Animation script - Eggman (SBZ2)
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C 0000                       		dc.w byte_19A10-Ani_obj82
0001BA6E 0000                       		dc.w byte_19A14-Ani_obj82
0001BA70 0000                       		dc.w byte_19A18-Ani_obj82
0001BA72 0000                       		dc.w byte_19A20-Ani_obj82
0001BA74 0000                       		dc.w byte_19A24-Ani_obj82
0001BA76 0000                       		dc.w byte_19A2A-Ani_obj82
0001BA78 0000                       		dc.w byte_19A30-Ani_obj82
0001BA7A 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BA7E 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BA82 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BA8A 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BA8E 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BA94 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BA9A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BA9E                            		even
0001BA9E                            		even
0001BA9E                            
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            ; Sprite mappings - Eggman (SBZ2)
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            Map_obj82:
0001BA9E                            	include "_maps\obj82.asm"
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            ; Sprite mappings - Eggman (SBZ2)
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BAA2 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BAA6 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BAAA 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BAAE 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BAB2 0000                       		dc.w byte_19B4F-Map_obj82
0001BAB4 03                         byte_19A4A:	dc.b 3
0001BAB5 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BABA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BABF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BAC4 04                         byte_19A5A:	dc.b 4
0001BAC5 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BACA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BACF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BAD4 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BAD9 00                         		dc.b 0
0001BADA 04                         byte_19A70:	dc.b 4
0001BADB E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BAE0 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BAE5 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BAEA FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BAEF 00                         		dc.b 0
0001BAF0 04                         byte_19A86:	dc.b 4
0001BAF1 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BAF6 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BAFB 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BB00 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BB05 00                         		dc.b 0
0001BB06 04                         byte_19A9C:	dc.b 4
0001BB07 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BB0C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BB11 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BB16 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB1B 00                         		dc.b 0
0001BB1C 04                         byte_19AB2:	dc.b 4
0001BB1D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BB22 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BB27 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB2C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BB31 00                         		dc.b 0
0001BB32 07                         byte_19AC8:	dc.b 7
0001BB33 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BB38 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BB3D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BB42 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BB47 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BB4C F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BB51 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BB56 05                         byte_19AEC:	dc.b 5
0001BB57 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BB5C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BB61 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BB66 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BB6B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB70 06                         byte_19B06:	dc.b 6
0001BB71 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BB76 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BB7B 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BB80 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BB85 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BB8A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BB8F 00                         		dc.b 0
0001BB90 08                         byte_19B26:	dc.b 8
0001BB91 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BB96 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BB9B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBA0 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BBA5 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BBAA F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BBAF 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BBB4 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BBB9 03                         byte_19B4F:	dc.b 3
0001BBBA EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BBBF F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BBC4 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BBCA 00                         		even
0001BBCA 00                         		even
0001BBCA                            
0001BBCA                            ; ===========================================================================
0001BBCA                            ; ---------------------------------------------------------------------------
0001BBCA                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BBCA                            ; ---------------------------------------------------------------------------
0001BBCA                            
0001BBCA                            Obj83:					; XREF: Obj_Index
0001BBCA 7000                       		moveq	#0,d0
0001BBCC 1028 0024                  		move.b	$24(a0),d0
0001BBD0 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BBD4 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BBD8                            ; ===========================================================================
0001BBD8 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BBDA 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BBDC 0000                       		dc.w loc_19C36-Obj83_Index
0001BBDE 0000                       		dc.w loc_19C62-Obj83_Index
0001BBE0 0000                       		dc.w loc_19C72-Obj83_Index
0001BBE2 0000                       		dc.w loc_19C80-Obj83_Index
0001BBE4                            ; ===========================================================================
0001BBE4                            
0001BBE4                            Obj83_Main:				; XREF: Obj83_Index
0001BBE4 317C 2080 0008             		move.w	#$2080,8(a0)
0001BBEA 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BBF0 117C 0080 0019             		move.b	#$80,$19(a0)
0001BBF6 117C 0010 0016             		move.b	#$10,$16(a0)
0001BBFC 117C 0004 0001             		move.b	#4,1(a0)
0001BC02 08E8 0007 0001             		bset	#7,1(a0)
0001BC08 7800                       		moveq	#0,d4
0001BC0A 3A3C 2010                  		move.w	#$2010,d5
0001BC0E 7C07                       		moveq	#7,d6
0001BC10 45E8 0030                  		lea	$30(a0),a2
0001BC14                            
0001BC14                            Obj83_MakeBlock:
0001BC14 4EB9 0000 F55E             		jsr	SingleObjLoad
0001BC1A 6600                       		bne.s	Obj83_ExitMake
0001BC1C 34C9                       		move.w	a1,(a2)+
0001BC1E 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BC22 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BC2A 337C 4518 0002             		move.w	#$4518,2(a1)
0001BC30 137C 0004 0001             		move.b	#4,1(a1)
0001BC36 137C 0010 0019             		move.b	#$10,$19(a1)
0001BC3C 137C 0010 0016             		move.b	#$10,$16(a1)
0001BC42 137C 0003 0018             		move.b	#3,$18(a1)
0001BC48 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BC4C 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BC52 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BC56 137C 0008 0024             		move.b	#8,$24(a1)
0001BC5C 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BC60                            
0001BC60                            Obj83_ExitMake:
0001BC60 5428 0024                  		addq.b	#2,$24(a0)
0001BC64 4E75                       		rts	
0001BC66                            ; ===========================================================================
0001BC66                            
0001BC66                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BC66 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BC6C 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BC6E 4228 001A                  		clr.b	$1A(a0)
0001BC72 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BC76                            
0001BC76                            Obj83_Solid:
0001BC76 7000                       		moveq	#0,d0
0001BC78 1028 001A                  		move.b	$1A(a0),d0
0001BC7C 4400                       		neg.b	d0
0001BC7E 4880                       		ext.w	d0
0001BC80 5040                       		addq.w	#8,d0
0001BC82 E940                       		asl.w	#4,d0
0001BC84 383C 2100                  		move.w	#$2100,d4
0001BC88 9840                       		sub.w	d0,d4
0001BC8A 1140 0019                  		move.b	d0,$19(a0)
0001BC8E 3144 0008                  		move.w	d4,8(a0)
0001BC92 720B                       		moveq	#$B,d1
0001BC94 D240                       		add.w	d0,d1
0001BC96 7410                       		moveq	#$10,d2
0001BC98 7611                       		moveq	#$11,d3
0001BC9A 4EF9 0001 14A8             		jmp	SolidObject
0001BCA0                            ; ===========================================================================
0001BCA0                            
0001BCA0                            loc_19C36:				; XREF: Obj83_Index
0001BCA0 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BCA6 6400                       		bcc.s	Obj83_Solid2
0001BCA8 70FF                       		moveq	#-1,d0
0001BCAA 1028 001A                  		move.b	$1A(a0),d0
0001BCAE 4880                       		ext.w	d0
0001BCB0 D040                       		add.w	d0,d0
0001BCB2 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BCB6 2240                       		movea.l	d0,a1
0001BCB8 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BCBE 5228 001A                  		addq.b	#1,$1A(a0)
0001BCC2 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BCC8 6700                       		beq.s	loc_19C62
0001BCCA                            
0001BCCA                            Obj83_Solid2:
0001BCCA 60AA                       		bra.s	Obj83_Solid
0001BCCC                            ; ===========================================================================
0001BCCC                            
0001BCCC                            loc_19C62:				; XREF: Obj83_Index
0001BCCC 08A8 0003 0022             		bclr	#3,$22(a0)
0001BCD2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BCD8 6000 FBBC                  		bra.w	loc_1982C
0001BCDC                            ; ===========================================================================
0001BCDC                            
0001BCDC                            loc_19C72:				; XREF: Obj83_Index
0001BCDC 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BCE2 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BCE4 4EF9 0000 F0CA             		jmp	DisplaySprite
0001BCEA                            ; ===========================================================================
0001BCEA                            
0001BCEA                            loc_19C80:				; XREF: Obj83_Index
0001BCEA 4A28 0001                  		tst.b	1(a0)
0001BCEE 6A00 FBA6                  		bpl.w	loc_1982C
0001BCF2 4EB9 0000 F090             		jsr	ObjectFall
0001BCF8 4EF9 0000 F0CA             		jmp	DisplaySprite
0001BCFE                            ; ===========================================================================
0001BCFE                            
0001BCFE                            Obj83_Break:				; XREF: loc_19C72
0001BCFE 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BD02 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BD06 7801                       		moveq	#1,d4
0001BD08 7203                       		moveq	#3,d1
0001BD0A 7438                       		moveq	#$38,d2
0001BD0C 5428 0024                  		addq.b	#2,$24(a0)
0001BD10 117C 0008 0019             		move.b	#8,$19(a0)
0001BD16 117C 0008 0016             		move.b	#8,$16(a0)
0001BD1C 43D0                       		lea	(a0),a1
0001BD1E 6000                       		bra.s	Obj83_MakeFrag
0001BD20                            ; ===========================================================================
0001BD20                            
0001BD20                            Obj83_LoopFrag:
0001BD20 4EB9 0000 F574             		jsr	SingleObjLoad2
0001BD26 6600                       		bne.s	Obj83_BreakSnd
0001BD28                            
0001BD28                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BD28 45D0                       		lea	(a0),a2
0001BD2A 47D1                       		lea	(a1),a3
0001BD2C 7603                       		moveq	#3,d3
0001BD2E                            
0001BD2E                            loc_19CC4:
0001BD2E 26DA                       		move.l	(a2)+,(a3)+
0001BD30 26DA                       		move.l	(a2)+,(a3)+
0001BD32 26DA                       		move.l	(a2)+,(a3)+
0001BD34 26DA                       		move.l	(a2)+,(a3)+
0001BD36 51CB FFF6                  		dbf	d3,loc_19CC4
0001BD3A                            
0001BD3A 335C 0012                  		move.w	(a4)+,$12(a1)
0001BD3E 361D                       		move.w	(a5)+,d3
0001BD40 D769 0008                  		add.w	d3,8(a1)
0001BD44 361D                       		move.w	(a5)+,d3
0001BD46 D769 000C                  		add.w	d3,$C(a1)
0001BD4A 1344 001A                  		move.b	d4,$1A(a1)
0001BD4E 5244                       		addq.w	#1,d4
0001BD50 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BD54                            
0001BD54                            Obj83_BreakSnd:
0001BD54 303C 00CB                  		move.w	#$CB,d0
0001BD58 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BD5E 4EF9 0000 F0CA             		jmp	DisplaySprite
0001BD64                            ; ===========================================================================
0001BD64 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BD68 0120 00C0                  		dc.w $120, $C0
0001BD6C FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BD70 0010 0000                  		dc.w $10, 0
0001BD74 0000 0010                  		dc.w 0,	$10
0001BD78 0010 0010                  		dc.w $10, $10
0001BD7C                            ; ---------------------------------------------------------------------------
0001BD7C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BD7C                            ; ---------------------------------------------------------------------------
0001BD7C                            Map_obj83:
0001BD7C                            	include "_maps\obj83.asm"
0001BD7C                            ; ---------------------------------------------------------------------------
0001BD7C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BD7C                            ; ---------------------------------------------------------------------------
0001BD7C 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BD80 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BD84 0000                       		dc.w byte_19D46-Map_obj83
0001BD86 01                         byte_19D1C:	dc.b 1
0001BD87 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BD8C 02                         byte_19D22:	dc.b 2
0001BD8D F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BD92 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BD97 00                         		dc.b 0
0001BD98 02                         byte_19D2E:	dc.b 2
0001BD99 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BD9E F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BDA3 00                         		dc.b 0
0001BDA4 02                         byte_19D3A:	dc.b 2
0001BDA5 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BDAA F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BDAF 00                         		dc.b 0
0001BDB0 02                         byte_19D46:	dc.b 2
0001BDB1 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BDB6 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BDBC 00                         		even
0001BDBC 00                         		even
0001BDBC                            
0001BDBC                            ; ===========================================================================
0001BDBC                            ; ---------------------------------------------------------------------------
0001BDBC                            ; Object 85 - Eggman (FZ)
0001BDBC                            ; ---------------------------------------------------------------------------
0001BDBC                            
0001BDBC                            Obj85_Delete:
0001BDBC 4EF9 0000 F106             		jmp	DeleteObject
0001BDC2                            ; ===========================================================================
0001BDC2                            
0001BDC2                            Obj85:					; XREF: Obj_Index
0001BDC2 7000                       		moveq	#0,d0
0001BDC4 1028 0024                  		move.b	$24(a0),d0
0001BDC8 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BDCC 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BDD0                            ; ===========================================================================
0001BDD0 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BDD2 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BDD4 0000                       		dc.w loc_1A38E-Obj85_Index
0001BDD6 0000                       		dc.w loc_1A346-Obj85_Index
0001BDD8 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BDDA 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BDDC 0000                       		dc.w loc_1A264-Obj85_Index
0001BDDE                            
0001BDDE 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BDE4 0001 BA9E                  		dc.l Map_obj82		; mappings pointer
0001BDE8 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BDEE 0000 0000                  		dc.l Map_obj84
0001BDF2 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BDF8 0000 0000                  		dc.l Map_FZBoss
0001BDFC 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BE02 0001 BA9E                  		dc.l Map_obj82
0001BE06 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BE0C 0001 9D96                  		dc.l Map_Eggman
0001BE10 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BE16 0001 9D96                  		dc.l Map_Eggman
0001BE1A                            
0001BE1A 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BE1F 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BE24 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BE29 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BE2E 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BE33 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BE38                            ; ===========================================================================
0001BE38                            
0001BE38                            Obj85_Main:				; XREF: Obj85_Index
0001BE38 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BE3C 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BE40 2248                       		movea.l	a0,a1
0001BE42 7205                       		moveq	#5,d1
0001BE44 6000                       		bra.s	Obj85_LoadBoss
0001BE46                            ; ===========================================================================
0001BE46                            
0001BE46                            Obj85_Loop:
0001BE46 4EB9 0000 F574             		jsr	SingleObjLoad2
0001BE4C 6600                       		bne.s	loc_19E20
0001BE4E                            
0001BE4E                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BE4E 12BC 0085                  		move.b	#$85,(a1)
0001BE52 335A 0008                  		move.w	(a2)+,8(a1)
0001BE56 335A 000C                  		move.w	(a2)+,$C(a1)
0001BE5A 335A 0002                  		move.w	(a2)+,2(a1)
0001BE5E 235A 0004                  		move.l	(a2)+,4(a1)
0001BE62 135B 0024                  		move.b	(a3)+,$24(a1)
0001BE66 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BE6A 135B 0018                  		move.b	(a3)+,$18(a1)
0001BE6E 135B 0017                  		move.b	(a3)+,$17(a1)
0001BE72 135B 0016                  		move.b	(a3)+,$16(a1)
0001BE76 137C 0004 0001             		move.b	#4,1(a1)
0001BE7C 08E8 0007 0001             		bset	#7,1(a0)
0001BE82 2348 0034                  		move.l	a0,$34(a1)
0001BE86 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BE8A                            
0001BE8A                            loc_19E20:
0001BE8A 45E8 0036                  		lea	$36(a0),a2
0001BE8E 4EB9 0000 F55E             		jsr	SingleObjLoad
0001BE94 6600                       		bne.s	loc_19E5A
0001BE96 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BE9A 3489                       		move.w	a1,(a2)
0001BE9C 2348 0034                  		move.l	a0,$34(a1)
0001BEA0 45E8 0038                  		lea	$38(a0),a2
0001BEA4 7400                       		moveq	#0,d2
0001BEA6 7203                       		moveq	#3,d1
0001BEA8                            
0001BEA8                            loc_19E3E:
0001BEA8 4EB9 0000 F574             		jsr	SingleObjLoad2
0001BEAE 6600                       		bne.s	loc_19E5A
0001BEB0 34C9                       		move.w	a1,(a2)+
0001BEB2 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BEB6 2348 0034                  		move.l	a0,$34(a1)
0001BEBA 1342 0028                  		move.b	d2,$28(a1)
0001BEBE 5442                       		addq.w	#2,d2
0001BEC0 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BEC4                            
0001BEC4                            loc_19E5A:
0001BEC4 317C 0000 0034             		move.w	#0,$34(a0)
0001BECA 117C 0001 0021             		move.b	#1,$21(a0)	; set number of	hits to	1
0001BED0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BED6                            
0001BED6                            Obj85_Eggman:				; XREF: Obj85_Index
0001BED6 7000                       		moveq	#0,d0
0001BED8 1028 0034                  		move.b	$34(a0),d0
0001BEDC 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BEE0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BEE4 4EF9 0000 F0CA             		jmp	DisplaySprite
0001BEEA                            ; ===========================================================================
0001BEEA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BEEE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BEF2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BEF6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BEFA                            ; ===========================================================================
0001BEFA                            
0001BEFA                            loc_19E90:				; XREF: off_19E80
0001BEFA 4AB8 F680                  		tst.l	($FFFFF680).w
0001BEFE 6600                       		bne.s	loc_19EA2
0001BF00 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BF06 6500                       		bcs.s	loc_19EA2
0001BF08 5428 0034                  		addq.b	#2,$34(a0)
0001BF0C                            
0001BF0C                            loc_19EA2:
0001BF0C 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BF10 4E75                       		rts	
0001BF12                            ; ===========================================================================
0001BF12                            
0001BF12                            loc_19EA8:				; XREF: off_19E80
0001BF12 4A68 0030                  		tst.w	$30(a0)
0001BF16 6A00                       		bpl.s	loc_19F10
0001BF18 4268 0030                  		clr.w	$30(a0)
0001BF1C 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001BF22 0240 000C                  		andi.w	#$C,d0
0001BF26 3200                       		move.w	d0,d1
0001BF28 5441                       		addq.w	#2,d1
0001BF2A 4A80                       		tst.l	d0
0001BF2C 6A00                       		bpl.s	loc_19EC6
0001BF2E C141                       		exg	d1,d0
0001BF30                            
0001BF30                            loc_19EC6:
0001BF30 43FA 0000                  		lea	word_19FD6(pc),a1
0001BF34 3031 0000                  		move.w	(a1,d0.w),d0
0001BF38 3231 1000                  		move.w	(a1,d1.w),d1
0001BF3C 3140 0030                  		move.w	d0,$30(a0)
0001BF40 74FF                       		moveq	#-1,d2
0001BF42 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BF46 2242                       		movea.l	d2,a1
0001BF48 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BF4E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BF54 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BF58 2242                       		movea.l	d2,a1
0001BF5A 137C 0001 0029             		move.b	#1,$29(a1)
0001BF60 337C 0000 0030             		move.w	#0,$30(a1)
0001BF66 317C 0001 0032             		move.w	#1,$32(a0)
0001BF6C 4228 0035                  		clr.b	$35(a0)
0001BF70 303C 00B7                  		move.w	#$B7,d0
0001BF74 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BF7A                            
0001BF7A                            loc_19F10:
0001BF7A 4A68 0032                  		tst.w	$32(a0)
0001BF7E 6B00 0000                  		bmi.w	loc_19FA6
0001BF82 08A8 0000 0022             		bclr	#0,$22(a0)
0001BF88 3038 D008                  		move.w	($FFFFD008).w,d0
0001BF8C 9068 0008                  		sub.w	8(a0),d0
0001BF90 6500                       		bcs.s	loc_19F2E
0001BF92 08E8 0000 0022             		bset	#0,$22(a0)
0001BF98                            
0001BF98                            loc_19F2E:
0001BF98 323C 002B                  		move.w	#$2B,d1
0001BF9C 343C 0014                  		move.w	#$14,d2
0001BFA0 363C 0014                  		move.w	#$14,d3
0001BFA4 3828 0008                  		move.w	8(a0),d4
0001BFA8 4EB9 0001 14A8             		jsr	SolidObject
0001BFAE 4A44                       		tst.w	d4
0001BFB0 6E00                       		bgt.s	loc_19F50
0001BFB2                            
0001BFB2                            loc_19F48:
0001BFB2 4A28 0035                  		tst.b	$35(a0)
0001BFB6 6600                       		bne.s	loc_19F88
0001BFB8 6000                       		bra.s	loc_19F96
0001BFBA                            ; ===========================================================================
0001BFBA                            
0001BFBA                            loc_19F50:
0001BFBA 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BFBE 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BFC4 66EC                       		bne.s	loc_19F48
0001BFC6 303C 0300                  		move.w	#$300,d0
0001BFCA 0828 0000 0022             		btst	#0,$22(a0)
0001BFD0 6600                       		bne.s	loc_19F6A
0001BFD2 4440                       		neg.w	d0
0001BFD4                            
0001BFD4                            loc_19F6A:
0001BFD4 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BFD8 4A28 0035                  		tst.b	$35(a0)
0001BFDC 6600                       		bne.s	loc_19F88
0001BFDE 5328 0021                  		subq.b	#1,$21(a0)
0001BFE2 117C 0064 0035             		move.b	#$64,$35(a0)
0001BFE8 303C 00AC                  		move.w	#$AC,d0
0001BFEC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BFF2                            
0001BFF2                            loc_19F88:
0001BFF2 5328 0035                  		subq.b	#1,$35(a0)
0001BFF6 6700                       		beq.s	loc_19F96
0001BFF8 117C 0003 001C             		move.b	#3,$1C(a0)
0001BFFE 6000                       		bra.s	loc_19F9C
0001C000                            ; ===========================================================================
0001C000                            
0001C000                            loc_19F96:
0001C000 117C 0001 001C             		move.b	#1,$1C(a0)
0001C006                            
0001C006                            loc_19F9C:
0001C006 43FA FA64                  		lea	Ani_obj82(pc),a1
0001C00A 4EF9 0000 C20C             		jmp	AnimateSprite
0001C010                            ; ===========================================================================
0001C010                            
0001C010                            loc_19FA6:
0001C010 4A28 0021                  		tst.b	$21(a0)
0001C014 6700                       		beq.s	loc_19FBC
0001C016 5428 0034                  		addq.b	#2,$34(a0)
0001C01A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C020 4268 0032                  		clr.w	$32(a0)
0001C024 4E75                       		rts	
0001C026                            ; ===========================================================================
0001C026                            
0001C026                            loc_19FBC:
0001C026 117C 0006 0034             		move.b	#6,$34(a0)
0001C02C 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C032 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C038 117C 0014 0016             		move.b	#$14,$16(a0)
0001C03E 4E75                       		rts	
0001C040                            ; ===========================================================================
0001C040 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C050                            ; ===========================================================================
0001C050                            
0001C050                            loc_19FE6:				; XREF: off_19E80
0001C050 70FF                       		moveq	#-1,d0
0001C052 3028 0036                  		move.w	$36(a0),d0
0001C056 2240                       		movea.l	d0,a1
0001C058 4A68 0030                  		tst.w	$30(a0)
0001C05C 6A00                       		bpl.s	loc_1A000
0001C05E 4268 0030                  		clr.w	$30(a0)
0001C062 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C068 6100                       		bsr.s	loc_1A020
0001C06A                            
0001C06A                            loc_1A000:
0001C06A 700F                       		moveq	#$F,d0
0001C06C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C070 6600                       		bne.s	loc_1A00A
0001C072 6100                       		bsr.s	loc_1A020
0001C074                            
0001C074                            loc_1A00A:
0001C074 4A68 0032                  		tst.w	$32(a0)
0001C078 6700                       		beq.s	locret_1A01E
0001C07A 5528 0034                  		subq.b	#2,$34(a0)
0001C07E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C084 4268 0032                  		clr.w	$32(a0)
0001C088                            
0001C088                            locret_1A01E:
0001C088 4E75                       		rts	
0001C08A                            ; ===========================================================================
0001C08A                            
0001C08A                            loc_1A020:
0001C08A 303C 00B1                  		move.w	#$B1,d0
0001C08E 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C094                            ; ===========================================================================
0001C094                            
0001C094                            loc_1A02A:				; XREF: off_19E80
0001C094 117C 0030 0017             		move.b	#$30,$17(a0)
0001C09A 08E8 0000 0022             		bset	#0,$22(a0)
0001C0A0 4EB9 0000 F0B0             		jsr	SpeedToPos
0001C0A6 117C 0006 001A             		move.b	#6,$1A(a0)
0001C0AC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C0B2 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C0B8 6500                       		bcs.s	loc_1A070
0001C0BA 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C0C0 5428 0034                  		addq.b	#2,$34(a0)
0001C0C4 117C 0020 0017             		move.b	#$20,$17(a0)
0001C0CA 317C 0100 0010             		move.w	#$100,$10(a0)
0001C0D0 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C0D6 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C0DA                            
0001C0DA                            loc_1A070:
0001C0DA 6000 0000                  		bra.w	loc_1A166
0001C0DE                            ; ===========================================================================
0001C0DE                            
0001C0DE                            loc_1A074:				; XREF: off_19E80
0001C0DE 08E8 0000 0022             		bset	#0,$22(a0)
0001C0E4 117C 0004 001C             		move.b	#4,$1C(a0)
0001C0EA 4EB9 0000 F0B0             		jsr	SpeedToPos
0001C0F0 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C0F6 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C0FC 6500                       		bcs.s	loc_1A09A
0001C0FE 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C104                            
0001C104                            loc_1A09A:
0001C104 317C 0400 0010             		move.w	#$400,$10(a0)
0001C10A 3028 0008                  		move.w	8(a0),d0
0001C10E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C112 6A00                       		bpl.s	loc_1A0B4
0001C114 317C 0500 0010             		move.w	#$500,$10(a0)
0001C11A 6000 0000                  		bra.w	loc_1A0F2
0001C11E                            ; ===========================================================================
0001C11E                            
0001C11E                            loc_1A0B4:
0001C11E 0440 0070                  		subi.w	#$70,d0
0001C122 6500                       		bcs.s	loc_1A0F2
0001C124 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C12A 5140                       		subq.w	#8,d0
0001C12C 6500                       		bcs.s	loc_1A0F2
0001C12E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C134 5140                       		subq.w	#8,d0
0001C136 6500                       		bcs.s	loc_1A0F2
0001C138 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C13E 5140                       		subq.w	#8,d0
0001C140 6500                       		bcs.s	loc_1A0F2
0001C142 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C148 5140                       		subq.w	#8,d0
0001C14A 6500                       		bcs.s	loc_1A0F2
0001C14C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C152 0440 0038                  		subi.w	#$38,d0
0001C156 6500                       		bcs.s	loc_1A0F2
0001C158 4268 0010                  		clr.w	$10(a0)
0001C15C                            
0001C15C                            loc_1A0F2:
0001C15C 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C162 6500                       		bcs.s	loc_1A110
0001C164 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C16A 317C 0240 0010             		move.w	#$240,$10(a0)
0001C170 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C176 5428 0034                  		addq.b	#2,$34(a0)
0001C17A                            
0001C17A                            loc_1A110:
0001C17A 6000                       		bra.s	loc_1A15C
0001C17C                            ; ===========================================================================
0001C17C                            
0001C17C                            loc_1A112:				; XREF: off_19E80
0001C17C 4EB9 0000 F0B0             		jsr	SpeedToPos
0001C182 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C188 6500                       		bcs.s	loc_1A124
0001C18A 4268 0010                  		clr.w	$10(a0)
0001C18E                            
0001C18E                            loc_1A124:
0001C18E 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C194 4A68 0012                  		tst.w	$12(a0)
0001C198 6B00                       		bmi.s	loc_1A142
0001C19A 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C1A0 6500                       		bcs.s	loc_1A142
0001C1A2 317C 0592 000C             		move.w	#$592,$C(a0)
0001C1A8 4268 0012                  		clr.w	$12(a0)
0001C1AC                            
0001C1AC                            loc_1A142:
0001C1AC 3028 0010                  		move.w	$10(a0),d0
0001C1B0 8068 0012                  		or.w	$12(a0),d0
0001C1B4 6600                       		bne.s	loc_1A15C
0001C1B6 5428 0034                  		addq.b	#2,$34(a0)
0001C1BA 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C1C0 117C 0001 0021             		move.b	#1,$21(a0)
0001C1C6                            
0001C1C6                            loc_1A15C:
0001C1C6 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001C1CA 4EB9 0000 C20C             		jsr	AnimateSprite
0001C1D0                            
0001C1D0                            loc_1A166:
0001C1D0 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C1D6 6C00                       		bge.s	loc_1A172
0001C1D8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C1DC                            
0001C1DC                            loc_1A172:
0001C1DC 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C1E2 6C00                       		bge.s	locret_1A190
0001C1E4 323C 001B                  		move.w	#$1B,d1
0001C1E8 343C 0070                  		move.w	#$70,d2
0001C1EC 363C 0071                  		move.w	#$71,d3
0001C1F0 3828 0008                  		move.w	8(a0),d4
0001C1F4 4EF9 0001 14A8             		jmp	SolidObject
0001C1FA                            ; ===========================================================================
0001C1FA                            
0001C1FA                            locret_1A190:
0001C1FA 4E75                       		rts	
0001C1FC                            ; ===========================================================================
0001C1FC                            
0001C1FC                            loc_1A192:				; XREF: off_19E80
0001C1FC 217C 0001 9D96 0004        		move.l	#Map_Eggman,4(a0)
0001C204 317C 0400 0002             		move.w	#$400,2(a0)
0001C20A 117C 0000 001C             		move.b	#0,$1C(a0)
0001C210 08E8 0000 0022             		bset	#0,$22(a0)
0001C216 4EB9 0000 F0B0             		jsr	SpeedToPos
0001C21C 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C222 6400                       		bcc.s	loc_1A1D0
0001C224 317C 0180 0010             		move.w	#$180,$10(a0)
0001C22A 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C230 117C 000F 0020             		move.b	#$F,$20(a0)
0001C236 5428 0034                  		addq.b	#2,$34(a0)
0001C23A                            
0001C23A                            loc_1A1D0:
0001C23A 6000 FF8A                  		bra.w	loc_1A15C
0001C23E                            ; ===========================================================================
0001C23E                            
0001C23E                            loc_1A1D4:				; XREF: off_19E80
0001C23E 08E8 0000 0022             		bset	#0,$22(a0)
0001C244 4EB9 0000 F0B0             		jsr	SpeedToPos
0001C24A 4A68 0030                  		tst.w	$30(a0)
0001C24E 6600                       		bne.s	loc_1A1FC
0001C250 4A28 0020                  		tst.b	$20(a0)
0001C254 6600                       		bne.s	loc_1A216
0001C256 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C25C 303C 00AC                  		move.w	#$AC,d0
0001C260 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C266                            
0001C266                            loc_1A1FC:
0001C266 5368 0030                  		subq.w	#1,$30(a0)
0001C26A 6600                       		bne.s	loc_1A216
0001C26C 4A28 0022                  		tst.b	$22(a0)
0001C270 6A00                       		bpl.s	loc_1A210
0001C272 317C 0060 0012             		move.w	#$60,$12(a0)
0001C278 6000                       		bra.s	loc_1A216
0001C27A                            ; ===========================================================================
0001C27A                            
0001C27A                            loc_1A210:
0001C27A 117C 000F 0020             		move.b	#$F,$20(a0)
0001C280                            
0001C280                            loc_1A216:
0001C280 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C286 6D00                       		blt.s	loc_1A23A
0001C288 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C28E 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C294 4278 D014                  		clr.w	($FFFFD014).w
0001C298 4A68 0012                  		tst.w	$12(a0)
0001C29C 6A00                       		bpl.s	loc_1A248
0001C29E 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C2A4                            
0001C2A4                            loc_1A23A:
0001C2A4 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C2AA 6D00                       		blt.s	loc_1A248
0001C2AC 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C2B2                            
0001C2B2                            loc_1A248:
0001C2B2 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C2B8 6500                       		bcs.s	loc_1A260
0001C2BA 4A28 0001                  		tst.b	1(a0)
0001C2BE 6B00                       		bmi.s	loc_1A260
0001C2C0 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C2C6 6000 FAF4                  		bra.w	Obj85_Delete
0001C2CA                            ; ===========================================================================
0001C2CA                            
0001C2CA                            loc_1A260:
0001C2CA 6000 FEFA                  		bra.w	loc_1A15C
0001C2CE                            ; ===========================================================================
0001C2CE                            
0001C2CE                            loc_1A264:				; XREF: Obj85_Index
0001C2CE 2268 0034                  		movea.l	$34(a0),a1
0001C2D2 1011                       		move.b	(a1),d0
0001C2D4 B010                       		cmp.b	(a0),d0
0001C2D6 6600 FAE4                  		bne.w	Obj85_Delete
0001C2DA 117C 0007 001C             		move.b	#7,$1C(a0)
0001C2E0 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C2E6 6C00                       		bge.s	loc_1A280
0001C2E8 6000                       		bra.s	loc_1A2A6
0001C2EA                            ; ===========================================================================
0001C2EA                            
0001C2EA                            loc_1A280:
0001C2EA 4A69 0010                  		tst.w	$10(a1)
0001C2EE 6700                       		beq.s	loc_1A28C
0001C2F0 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C2F6                            
0001C2F6                            loc_1A28C:
0001C2F6 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001C2FA 4EB9 0000 C20C             		jsr	AnimateSprite
0001C300                            
0001C300                            loc_1A296:
0001C300 2268 0034                  		movea.l	$34(a0),a1
0001C304 3169 0008 0008             		move.w	8(a1),8(a0)
0001C30A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C310                            
0001C310                            loc_1A2A6:
0001C310 2268 0034                  		movea.l	$34(a0),a1
0001C314 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C31A 7003                       		moveq	#3,d0
0001C31C C028 0022                  		and.b	$22(a0),d0
0001C320 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C326 8128 0001                  		or.b	d0,1(a0)
0001C32A 4EF9 0000 F0CA             		jmp	DisplaySprite
0001C330                            ; ===========================================================================
0001C330                            
0001C330                            loc_1A2C6:				; XREF: Obj85_Index
0001C330 2268 0034                  		movea.l	$34(a0),a1
0001C334 1011                       		move.b	(a1),d0
0001C336 B010                       		cmp.b	(a0),d0
0001C338 6600 FA82                  		bne.w	Obj85_Delete
0001C33C 0CA9 0001 9D96 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C344 6700                       		beq.s	loc_1A2E4
0001C346 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C34C 60C2                       		bra.s	loc_1A2A6
0001C34E                            ; ===========================================================================
0001C34E                            
0001C34E                            loc_1A2E4:
0001C34E 117C 0001 001C             		move.b	#1,$1C(a0)
0001C354 4A29 0021                  		tst.b	$21(a1)
0001C358 6F00                       		ble.s	loc_1A312
0001C35A 117C 0006 001C             		move.b	#6,$1C(a0)
0001C360 217C 0001 9D96 0004        		move.l	#Map_Eggman,4(a0)
0001C368 317C 0400 0002             		move.w	#$400,2(a0)
0001C36E 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001C372 4EB9 0000 C20C             		jsr	AnimateSprite
0001C378 6000 FF86                  		bra.w	loc_1A296
0001C37C                            ; ===========================================================================
0001C37C                            
0001C37C                            loc_1A312:
0001C37C 4A28 0001                  		tst.b	1(a0)
0001C380 6A00 FA3A                  		bpl.w	Obj85_Delete
0001C384 6100 D512                  		bsr.w	BossDefeated
0001C388 117C 0002 0018             		move.b	#2,$18(a0)
0001C38E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C394 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C39C 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C3A2 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C3A6 4EB9 0000 C20C             		jsr	AnimateSprite
0001C3AC 6000 FF52                  		bra.w	loc_1A296
0001C3B0                            ; ===========================================================================
0001C3B0                            
0001C3B0                            loc_1A346:				; XREF: Obj85_Index
0001C3B0 08E8 0000 0022             		bset	#0,$22(a0)
0001C3B6 2268 0034                  		movea.l	$34(a0),a1
0001C3BA 0CA9 0001 9D96 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C3C2 6700                       		beq.s	loc_1A35E
0001C3C4 6000 FF4A                  		bra.w	loc_1A2A6
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            loc_1A35E:
0001C3C8 3169 0008 0008             		move.w	8(a1),8(a0)
0001C3CE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C3D4 4A28 001E                  		tst.b	$1E(a0)
0001C3D8 6600                       		bne.s	loc_1A376
0001C3DA 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C3E0                            
0001C3E0                            loc_1A376:
0001C3E0 5328 001E                  		subq.b	#1,$1E(a0)
0001C3E4 6E00                       		bgt.s	loc_1A38A
0001C3E6 5228 001A                  		addq.b	#1,$1A(a0)
0001C3EA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C3F0 6E00 F9CA                  		bgt.w	Obj85_Delete
0001C3F4                            
0001C3F4                            loc_1A38A:
0001C3F4 6000 FF0A                  		bra.w	loc_1A296
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            loc_1A38E:				; XREF: Obj85_Index
0001C3F8 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C3FE 3038 D008                  		move.w	($FFFFD008).w,d0
0001C402 9068 0008                  		sub.w	8(a0),d0
0001C406 6500                       		bcs.s	loc_1A3A6
0001C408 4A28 0001                  		tst.b	1(a0)
0001C40C 6A00 F9AE                  		bpl.w	Obj85_Delete
0001C410                            
0001C410                            loc_1A3A6:
0001C410 4EF9 0000 F0CA             		jmp	DisplaySprite
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            loc_1A3AC:				; XREF: Obj85_Index
0001C416 117C 0000 001A             		move.b	#0,$1A(a0)
0001C41C 08E8 0000 0022             		bset	#0,$22(a0)
0001C422 2268 0034                  		movea.l	$34(a0),a1
0001C426 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C42C 6600                       		bne.s	loc_1A3D0
0001C42E 0CA9 0001 9D96 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C436 6700 F984                  		beq.w	Obj85_Delete
0001C43A                            
0001C43A                            loc_1A3D0:
0001C43A 6000 FED4                  		bra.w	loc_1A2A6
0001C43E                            ; ===========================================================================
0001C43E                            Ani_obj85:
0001C43E                            	include "_anim\obj85.asm"
0001C43E                            ; ---------------------------------------------------------------------------
0001C43E                            ; Animation script - Eggman (FZ)
0001C43E                            ; ---------------------------------------------------------------------------
0001C43E 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C440 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C444                            		even
0001C444                            		even
0001C444                            
0001C444                            Map_Eggman2:
0001C444                            	include "_maps\Eggman2.asm"
0001C444                            ; ---------------------------------------------------------------------------
0001C444                            ; Sprite mappings - Eggman (FZ)
0001C444                            ; ---------------------------------------------------------------------------
0001C444 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C446 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C448 06                         byte_1A3DE:	dc.b 6
0001C449 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C44E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C453 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C458 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C45D FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C462 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C467 06                         byte_1A3FD:	dc.b 6
0001C468 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C46D EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C472 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C477 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C47C FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C481 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C486                            		even
0001C486                            		even
0001C486                            
0001C486                            Map_FZBoss:
0001C486                            	include "_maps\FZ boss.asm"
0001C486                            ; ---------------------------------------------------------------------------
0001C486                            ; Sprite mappings - boss (FZ)
0001C486                            ; ---------------------------------------------------------------------------
0001C486 0000                       		dc.w byte_1A422-Map_FZBoss
0001C488 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C48A 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C48C 02                         byte_1A422:	dc.b 2
0001C48D 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C492 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C497 03                         byte_1A42D:	dc.b 3
0001C498 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C49D 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C4A2 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C4A7 02                         byte_1A43D:	dc.b 2
0001C4A8 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C4AD 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C4B2                            		even
0001C4B2                            		even
0001C4B2                            
0001C4B2                            ; ===========================================================================
0001C4B2                            
0001C4B2                            Obj84_Delete:
0001C4B2 4EF9 0000 F106             		jmp	DeleteObject
0001C4B8                            ; ===========================================================================
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            
0001C4B8                            Obj84:					; XREF: Obj_Index
0001C4B8 7000                       		moveq	#0,d0
0001C4BA 1028 0024                  		move.b	$24(a0),d0
0001C4BE 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C4C2 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C4C6                            ; ===========================================================================
0001C4C6 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C4C8 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C4CA 0000                       		dc.w loc_1A57E-Obj84_Index
0001C4CC                            
0001C4CC 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C4D0 2550 0620                  		dc.w $2550, $620
0001C4D4 2490 04C0                  		dc.w $2490, $4C0
0001C4D8 2510 04C0                  		dc.w $2510, $4C0
0001C4DC                            ; ===========================================================================
0001C4DC                            
0001C4DC                            Obj84_Main:				; XREF: Obj84_Index
0001C4DC 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C4E0 7000                       		moveq	#0,d0
0001C4E2 1028 0028                  		move.b	$28(a0),d0
0001C4E6 D040                       		add.w	d0,d0
0001C4E8 D2C0                       		adda.w	d0,a1
0001C4EA 117C 0004 0001             		move.b	#4,1(a0)
0001C4F0 08E8 0007 0001             		bset	#7,1(a0)
0001C4F6 08E8 0004 0001             		bset	#4,1(a0)
0001C4FC 317C 0300 0002             		move.w	#$300,2(a0)
0001C502 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C50A 3159 0008                  		move.w	(a1)+,8(a0)
0001C50E 3151 000C                  		move.w	(a1),$C(a0)
0001C512 3159 0038                  		move.w	(a1)+,$38(a0)
0001C516 117C 0020 0016             		move.b	#$20,$16(a0)
0001C51C 117C 0060 0017             		move.b	#$60,$17(a0)
0001C522 117C 0020 0019             		move.b	#$20,$19(a0)
0001C528 117C 0060 0016             		move.b	#$60,$16(a0)
0001C52E 117C 0003 0018             		move.b	#3,$18(a0)
0001C534 5428 0024                  		addq.b	#2,$24(a0)
0001C538                            
0001C538                            loc_1A4CE:				; XREF: Obj84_Index
0001C538 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C53E 6F00                       		ble.s	loc_1A4DC
0001C540 08E8 0001 0001             		bset	#1,1(a0)
0001C546                            
0001C546                            loc_1A4DC:
0001C546 42A8 003C                  		clr.l	$3C(a0)
0001C54A 4A28 0029                  		tst.b	$29(a0)
0001C54E 6700                       		beq.s	loc_1A4EA
0001C550 5428 0024                  		addq.b	#2,$24(a0)
0001C554                            
0001C554                            loc_1A4EA:
0001C554 2028 003C                  		move.l	$3C(a0),d0
0001C558 2228 0038                  		move.l	$38(a0),d1
0001C55C D280                       		add.l	d0,d1
0001C55E 4841                       		swap	d1
0001C560 3141 000C                  		move.w	d1,$C(a0)
0001C564 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C56A 6600                       		bne.s	loc_1A524
0001C56C 4A68 0030                  		tst.w	$30(a0)
0001C570 6A00                       		bpl.s	loc_1A524
0001C572 70F6                       		moveq	#-$A,d0
0001C574 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C57A 6F00                       		ble.s	loc_1A514
0001C57C 700E                       		moveq	#$E,d0
0001C57E                            
0001C57E                            loc_1A514:
0001C57E D240                       		add.w	d0,d1
0001C580 2268 0034                  		movea.l	$34(a0),a1
0001C584 3341 000C                  		move.w	d1,$C(a1)
0001C588 3368 0008 0008             		move.w	8(a0),8(a1)
0001C58E                            
0001C58E                            loc_1A524:
0001C58E 323C 002B                  		move.w	#$2B,d1
0001C592 343C 0060                  		move.w	#$60,d2
0001C596 363C 0061                  		move.w	#$61,d3
0001C59A 3828 0008                  		move.w	8(a0),d4
0001C59E 4EB9 0001 14A8             		jsr	SolidObject
0001C5A4 7000                       		moveq	#0,d0
0001C5A6 3228 003C                  		move.w	$3C(a0),d1
0001C5AA 6A00                       		bpl.s	loc_1A550
0001C5AC 4441                       		neg.w	d1
0001C5AE 5141                       		subq.w	#8,d1
0001C5B0 6500                       		bcs.s	loc_1A55C
0001C5B2 5200                       		addq.b	#1,d0
0001C5B4 E841                       		asr.w	#4,d1
0001C5B6 D041                       		add.w	d1,d0
0001C5B8 6000                       		bra.s	loc_1A55C
0001C5BA                            ; ===========================================================================
0001C5BA                            
0001C5BA                            loc_1A550:
0001C5BA 0441 0027                  		subi.w	#$27,d1
0001C5BE 6500                       		bcs.s	loc_1A55C
0001C5C0 5200                       		addq.b	#1,d0
0001C5C2 E841                       		asr.w	#4,d1
0001C5C4 D041                       		add.w	d1,d0
0001C5C6                            
0001C5C6                            loc_1A55C:
0001C5C6 1140 001A                  		move.b	d0,$1A(a0)
0001C5CA 3038 D008                  		move.w	($FFFFD008).w,d0
0001C5CE 9068 0008                  		sub.w	8(a0),d0
0001C5D2 6B00                       		bmi.s	loc_1A578
0001C5D4 0440 0140                  		subi.w	#$140,d0
0001C5D8 6B00                       		bmi.s	loc_1A578
0001C5DA 4A28 0001                  		tst.b	1(a0)
0001C5DE 6A00 FED2                  		bpl.w	Obj84_Delete
0001C5E2                            
0001C5E2                            loc_1A578:
0001C5E2 4EF9 0000 F0CA             		jmp	DisplaySprite
0001C5E8                            ; ===========================================================================
0001C5E8                            
0001C5E8                            loc_1A57E:				; XREF: Obj84_Index
0001C5E8 7000                       		moveq	#0,d0
0001C5EA 1028 0028                  		move.b	$28(a0),d0
0001C5EE 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C5F2 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C5F6 6000 FF5C                  		bra.w	loc_1A4EA
0001C5FA                            ; ===========================================================================
0001C5FA 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C5FC 0000                       		dc.w loc_1A598-off_1A590
0001C5FE 0000                       		dc.w loc_1A604-off_1A590
0001C600 0000                       		dc.w loc_1A604-off_1A590
0001C602                            ; ===========================================================================
0001C602                            
0001C602                            loc_1A598:				; XREF: off_1A590
0001C602 4A28 0029                  		tst.b	$29(a0)
0001C606 6600                       		bne.s	loc_1A5D4
0001C608 2268 0034                  		movea.l	$34(a0),a1
0001C60C 4A29 0021                  		tst.b	$21(a1)
0001C610 6600                       		bne.s	loc_1A5B4
0001C612 6100 D284                  		bsr.w	BossDefeated
0001C616 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C61E                            
0001C61E                            loc_1A5B4:
0001C61E 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C626 6400                       		bcc.s	locret_1A602
0001C628 42A8 003C                  		clr.l	$3C(a0)
0001C62C 2268 0034                  		movea.l	$34(a0),a1
0001C630 5369 0032                  		subq.w	#1,$32(a1)
0001C634 4269 0030                  		clr.w	$30(a1)
0001C638 5528 0024                  		subq.b	#2,$24(a0)
0001C63C 4E75                       		rts	
0001C63E                            ; ===========================================================================
0001C63E                            
0001C63E                            loc_1A5D4:
0001C63E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C644 6C00                       		bge.s	loc_1A5E4
0001C646 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C64E                            
0001C64E                            loc_1A5E4:
0001C64E 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C656 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C65C 6E00                       		bgt.s	locret_1A602
0001C65E 4268 003E                  		clr.w	$3E(a0)
0001C662 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C668 4228 0029                  		clr.b	$29(a0)
0001C66C                            
0001C66C                            locret_1A602:
0001C66C 4E75                       		rts	
0001C66E                            ; ===========================================================================
0001C66E                            
0001C66E                            loc_1A604:				; XREF: off_1A590
0001C66E 08E8 0001 0001             		bset	#1,1(a0)
0001C674 4A28 0029                  		tst.b	$29(a0)
0001C678 6600                       		bne.s	loc_1A646
0001C67A 2268 0034                  		movea.l	$34(a0),a1
0001C67E 4A29 0021                  		tst.b	$21(a1)
0001C682 6600                       		bne.s	loc_1A626
0001C684 6100 D212                  		bsr.w	BossDefeated
0001C688 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C690                            
0001C690                            loc_1A626:
0001C690 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C698 6400                       		bcc.s	locret_1A674
0001C69A 42A8 003C                  		clr.l	$3C(a0)
0001C69E 2268 0034                  		movea.l	$34(a0),a1
0001C6A2 5369 0032                  		subq.w	#1,$32(a1)
0001C6A6 4269 0030                  		clr.w	$30(a1)
0001C6AA 5528 0024                  		subq.b	#2,$24(a0)
0001C6AE 4E75                       		rts	
0001C6B0                            ; ===========================================================================
0001C6B0                            
0001C6B0                            loc_1A646:
0001C6B0 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C6B6 6D00                       		blt.s	loc_1A656
0001C6B8 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C6C0                            
0001C6C0                            loc_1A656:
0001C6C0 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C6C8 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C6CE 6D00                       		blt.s	locret_1A674
0001C6D0 4268 003E                  		clr.w	$3E(a0)
0001C6D4 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C6DA 4228 0029                  		clr.b	$29(a0)
0001C6DE                            
0001C6DE                            locret_1A674:
0001C6DE 4E75                       		rts	
0001C6E0                            ; ===========================================================================
0001C6E0                            ; ---------------------------------------------------------------------------
0001C6E0                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C6E0                            ; ---------------------------------------------------------------------------
0001C6E0                            Map_obj84:
0001C6E0                            	include "_maps\obj84.asm"
0001C6E0                            ; ---------------------------------------------------------------------------
0001C6E0                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C6E0                            ; ---------------------------------------------------------------------------
0001C6E0 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C6E4 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C6E8 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C6EC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C6F0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C6F4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C6F8 06                         byte_1A68E:	dc.b 6
0001C6F9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C6FE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C703 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C708 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C70D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C712 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C717 08                         byte_1A6AD:	dc.b 8
0001C718 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C71D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C722 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C727 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C72C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C731 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C736 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C73B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C740 0A                         byte_1A6D6:	dc.b $A
0001C741 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C746 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C74B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C750 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C755 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C75A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C75F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C764 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C769 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C76E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C773 0C                         byte_1A709:	dc.b $C
0001C774 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C779 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C77E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C783 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C788 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C78D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C792 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C797 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C79C F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C7A1 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C7A6 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C7AB 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C7B0 0D                         byte_1A746:	dc.b $D
0001C7B1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7B6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7BB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7C0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7C5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7CA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C7CF D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C7D4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C7D9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C7DE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C7E3 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C7E8 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C7ED 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C7F2 0E                         byte_1A788:	dc.b $E
0001C7F3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7F8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7FD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C802 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C807 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C80C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C811 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C816 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C81B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C820 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C825 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C82A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C82F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C834 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C839 02                         byte_1A7CF:	dc.b 2
0001C83A F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C83F 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C844                            		even
0001C844                            		even
0001C844                            
0001C844                            ; ===========================================================================
0001C844                            ; ---------------------------------------------------------------------------
0001C844                            ; Object 86 - energy balls (FZ)
0001C844                            ; ---------------------------------------------------------------------------
0001C844                            
0001C844                            Obj86:					; XREF: Obj_Index
0001C844 7000                       		moveq	#0,d0
0001C846 1028 0024                  		move.b	$24(a0),d0
0001C84A 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C84E 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C852                            ; ===========================================================================
0001C852 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C854 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C856 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C858 0000                       		dc.w loc_1A962-Obj86_Index
0001C85A 0000                       		dc.w loc_1A982-Obj86_Index
0001C85C                            ; ===========================================================================
0001C85C                            
0001C85C                            Obj86_Main:				; XREF: Obj86_Index
0001C85C 317C 2588 0008             		move.w	#$2588,8(a0)
0001C862 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C868 317C 0300 0002             		move.w	#$300,2(a0)
0001C86E 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C876 117C 0000 001C             		move.b	#0,$1C(a0)
0001C87C 117C 0003 0018             		move.b	#3,$18(a0)
0001C882 117C 0008 0017             		move.b	#8,$17(a0)
0001C888 117C 0008 0016             		move.b	#8,$16(a0)
0001C88E 117C 0004 0001             		move.b	#4,1(a0)
0001C894 08E8 0007 0001             		bset	#7,1(a0)
0001C89A 5428 0024                  		addq.b	#2,$24(a0)
0001C89E                            
0001C89E                            Obj86_Generator:			; XREF: Obj86_Index
0001C89E 2268 0034                  		movea.l	$34(a0),a1
0001C8A2 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C8A8 6600                       		bne.s	loc_1A850
0001C8AA 10BC 003F                  		move.b	#$3F,(a0)
0001C8AE 117C 0000 0024             		move.b	#0,$24(a0)
0001C8B4 4EF9 0000 F0CA             		jmp	DisplaySprite
0001C8BA                            ; ===========================================================================
0001C8BA                            
0001C8BA                            loc_1A850:
0001C8BA 117C 0000 001C             		move.b	#0,$1C(a0)
0001C8C0 4A28 0029                  		tst.b	$29(a0)
0001C8C4 6700                       		beq.s	loc_1A86C
0001C8C6 5428 0024                  		addq.b	#2,$24(a0)
0001C8CA 117C 0001 001C             		move.b	#1,$1C(a0)
0001C8D0 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C8D6                            
0001C8D6                            loc_1A86C:
0001C8D6 323C 0013                  		move.w	#$13,d1
0001C8DA 343C 0008                  		move.w	#8,d2
0001C8DE 363C 0011                  		move.w	#$11,d3
0001C8E2 3828 0008                  		move.w	8(a0),d4
0001C8E6 4EB9 0001 14A8             		jsr	SolidObject
0001C8EC 3038 D008                  		move.w	($FFFFD008).w,d0
0001C8F0 9068 0008                  		sub.w	8(a0),d0
0001C8F4 6B00                       		bmi.s	loc_1A89A
0001C8F6 0440 0140                  		subi.w	#$140,d0
0001C8FA 6B00                       		bmi.s	loc_1A89A
0001C8FC 4A28 0001                  		tst.b	1(a0)
0001C900 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C904                            
0001C904                            loc_1A89A:
0001C904 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C908 4EB9 0000 C20C             		jsr	AnimateSprite
0001C90E 4EF9 0000 F0CA             		jmp	DisplaySprite
0001C914                            ; ===========================================================================
0001C914                            
0001C914                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C914 4A28 0029                  		tst.b	$29(a0)
0001C918 6700 0000                  		beq.w	loc_1A954
0001C91C 4228 0029                  		clr.b	$29(a0)
0001C920 D068 0030                  		add.w	$30(a0),d0
0001C924 0240 001E                  		andi.w	#$1E,d0
0001C928 D4C0                       		adda.w	d0,a2
0001C92A 5868 0030                  		addq.w	#4,$30(a0)
0001C92E 4268 0032                  		clr.w	$32(a0)
0001C932 7403                       		moveq	#3,d2
0001C934                            
0001C934                            Obj86_Loop:
0001C934 4EB9 0000 F574             		jsr	SingleObjLoad2
0001C93A 6600 0000                  		bne.w	loc_1A954
0001C93E 12BC 0086                  		move.b	#$86,(a1)
0001C942 3368 0008 0008             		move.w	8(a0),8(a1)
0001C948 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C94E 137C 0008 0024             		move.b	#8,$24(a1)
0001C954 337C 2300 0002             		move.w	#$2300,2(a1)
0001C95A 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C962 137C 000C 0016             		move.b	#$C,$16(a1)
0001C968 137C 000C 0017             		move.b	#$C,$17(a1)
0001C96E 137C 0000 0020             		move.b	#0,$20(a1)
0001C974 137C 0003 0018             		move.b	#3,$18(a1)
0001C97A 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C980 137C 0004 0001             		move.b	#4,1(a1)
0001C986 08E9 0007 0001             		bset	#7,1(a1)
0001C98C 2348 0034                  		move.l	a0,$34(a1)
0001C990 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001C996 3228 0032                  		move.w	$32(a0),d1
0001C99A C3FC FFB1                  		muls.w	#-$4F,d1
0001C99E 0641 2578                  		addi.w	#$2578,d1
0001C9A2 0240 001F                  		andi.w	#$1F,d0
0001C9A6 0440 0010                  		subi.w	#$10,d0
0001C9AA D041                       		add.w	d1,d0
0001C9AC 3340 0030                  		move.w	d0,$30(a1)
0001C9B0 5268 0032                  		addq.w	#1,$32(a0)
0001C9B4 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C9BA 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C9BE                            
0001C9BE                            loc_1A954:
0001C9BE 4A68 0032                  		tst.w	$32(a0)
0001C9C2 6600                       		bne.s	loc_1A95E
0001C9C4 5428 0024                  		addq.b	#2,$24(a0)
0001C9C8                            
0001C9C8                            loc_1A95E:
0001C9C8 6000 FF0C                  		bra.w	loc_1A86C
0001C9CC                            ; ===========================================================================
0001C9CC                            
0001C9CC                            loc_1A962:				; XREF: Obj86_Index
0001C9CC 117C 0002 001C             		move.b	#2,$1C(a0)
0001C9D2 4A68 0038                  		tst.w	$38(a0)
0001C9D6 6600                       		bne.s	loc_1A97E
0001C9D8 117C 0002 0024             		move.b	#2,$24(a0)
0001C9DE 2268 0034                  		movea.l	$34(a0),a1
0001C9E2 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C9E8                            
0001C9E8                            loc_1A97E:
0001C9E8 6000 FEEC                  		bra.w	loc_1A86C
0001C9EC                            ; ===========================================================================
0001C9EC                            
0001C9EC                            loc_1A982:				; XREF: Obj86_Index
0001C9EC 7000                       		moveq	#0,d0
0001C9EE 1028 0025                  		move.b	$25(a0),d0
0001C9F2 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C9F6 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C9FA 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C9FE 4EB9 0000 C20C             		jsr	AnimateSprite
0001CA04 4EF9 0000 F0CA             		jmp	DisplaySprite
0001CA0A                            ; ===========================================================================
0001CA0A 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CA0C 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CA0E 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CA10                            ; ===========================================================================
0001CA10                            
0001CA10                            loc_1A9A6:				; XREF: Obj86_Index2
0001CA10 3028 0030                  		move.w	$30(a0),d0
0001CA14 9068 0008                  		sub.w	8(a0),d0
0001CA18 E940                       		asl.w	#4,d0
0001CA1A 3140 0010                  		move.w	d0,$10(a0)
0001CA1E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CA24 5428 0025                  		addq.b	#2,$25(a0)
0001CA28 4E75                       		rts	
0001CA2A                            ; ===========================================================================
0001CA2A                            
0001CA2A                            loc_1A9C0:				; XREF: Obj86_Index2
0001CA2A 4A68 0010                  		tst.w	$10(a0)
0001CA2E 6700                       		beq.s	loc_1A9E6
0001CA30 4EB9 0000 F0B0             		jsr	SpeedToPos
0001CA36 3028 0008                  		move.w	8(a0),d0
0001CA3A 9068 0030                  		sub.w	$30(a0),d0
0001CA3E 6400                       		bcc.s	loc_1A9E6
0001CA40 4268 0010                  		clr.w	$10(a0)
0001CA44 D168 0008                  		add.w	d0,8(a0)
0001CA48 2268 0034                  		movea.l	$34(a0),a1
0001CA4C 5369 0032                  		subq.w	#1,$32(a1)
0001CA50                            
0001CA50                            loc_1A9E6:
0001CA50 117C 0000 001C             		move.b	#0,$1C(a0)
0001CA56 5368 0028                  		subq.w	#1,$28(a0)
0001CA5A 6600                       		bne.s	locret_1AA1C
0001CA5C 5428 0025                  		addq.b	#2,$25(a0)
0001CA60 117C 0001 001C             		move.b	#1,$1C(a0)
0001CA66 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CA6C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CA72 7000                       		moveq	#0,d0
0001CA74 3038 D008                  		move.w	($FFFFD008).w,d0
0001CA78 9068 0008                  		sub.w	8(a0),d0
0001CA7C 3140 0010                  		move.w	d0,$10(a0)
0001CA80 317C 0140 0012             		move.w	#$140,$12(a0)
0001CA86                            
0001CA86                            locret_1AA1C:
0001CA86 4E75                       		rts	
0001CA88                            ; ===========================================================================
0001CA88                            
0001CA88                            loc_1AA1E:				; XREF: Obj86_Index2
0001CA88 4EB9 0000 F0B0             		jsr	SpeedToPos
0001CA8E 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CA94 6400                       		bcc.s	loc_1AA34
0001CA96 5368 0028                  		subq.w	#1,$28(a0)
0001CA9A 6700                       		beq.s	loc_1AA34
0001CA9C 4E75                       		rts	
0001CA9E                            ; ===========================================================================
0001CA9E                            
0001CA9E                            loc_1AA34:
0001CA9E 2268 0034                  		movea.l	$34(a0),a1
0001CAA2 5369 0038                  		subq.w	#1,$38(a1)
0001CAA6 6000 FA0A                  		bra.w	Obj84_Delete
0001CAAA                            ; ===========================================================================
0001CAAA                            Ani_obj86:
0001CAAA                            	include "_anim\obj86.asm"
0001CAAA                            ; ---------------------------------------------------------------------------
0001CAAA                            ; Animation script - energy ball launcher (FZ)
0001CAAA                            ; ---------------------------------------------------------------------------
0001CAAA 0000                       		dc.w byte_1AA46-Ani_obj86
0001CAAC 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CAAE 0000                       		dc.w byte_1AA50-Ani_obj86
0001CAB0 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CAB4 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CABA 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CAC0                            		even
0001CAC0                            		even
0001CAC0                            
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0                            ; Sprite mappings - energy ball	launcher (FZ)
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0                            Map_obj86:
0001CAC0                            	include "_maps\obj86.asm"
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0                            ; Sprite mappings - energy ball	launcher (FZ)
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CAC4 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CAC8 01                         byte_1AA5E:	dc.b 1
0001CAC9 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CACE 01                         byte_1AA64:	dc.b 1
0001CACF F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CAD4 01                         byte_1AA6A:	dc.b 1
0001CAD5 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CADA 01                         byte_1AA70:	dc.b 1
0001CADB F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CAE0                            		even
0001CAE0                            		even
0001CAE0                            
0001CAE0                            Ani_obj86a:
0001CAE0                            	include "_anim\obj86a.asm"
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0                            ; Animation script - energy balls (FZ)
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CAE2 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CAE4 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CAF3 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CB02 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CB06 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CB10                            		even
0001CB10                            		even
0001CB10                            
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            ; Sprite mappings - energy balls (FZ)
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            Map_obj86a:
0001CB10                            	include "_maps\obj86a.asm"
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            ; Sprite mappings - energy balls (FZ)
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CB14 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CB18 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CB1C 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CB20 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CB24 0000                       		dc.w byte_1AB20-Map_obj86a
0001CB26 02                         byte_1AABC:	dc.b 2
0001CB27 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CB2C 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CB31 02                         byte_1AAC7:	dc.b 2
0001CB32 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CB37 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CB3C 02                         byte_1AAD2:	dc.b 2
0001CB3D F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CB42 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CB47 02                         byte_1AADD:	dc.b 2
0001CB48 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CB4D 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CB52 02                         byte_1AAE8:	dc.b 2
0001CB53 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CB58 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CB5D 02                         byte_1AAF3:	dc.b 2
0001CB5E F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CB63 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CB68 01                         byte_1AAFE:	dc.b 1
0001CB69 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CB6E 01                         byte_1AB04:	dc.b 1
0001CB6F F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CB74 02                         byte_1AB0A:	dc.b 2
0001CB75 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CB7A 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CB7F 02                         byte_1AB15:	dc.b 2
0001CB80 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CB85 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CB8A 00                         byte_1AB20:	dc.b 0
0001CB8C 00                         		even
0001CB8C 00                         		even
0001CB8C                            
0001CB8C                            ; ===========================================================================
0001CB8C                            ; ---------------------------------------------------------------------------
0001CB8C                            ; Object 3E - prison capsule
0001CB8C                            ; ---------------------------------------------------------------------------
0001CB8C                            
0001CB8C                            Obj3E:					; XREF: Obj_Index
0001CB8C 7000                       		moveq	#0,d0
0001CB8E 1028 0024                  		move.b	$24(a0),d0
0001CB92 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CB96 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CB9A 3028 0008                  		move.w	8(a0),d0
0001CB9E 0240 FF80                  		andi.w	#$FF80,d0
0001CBA2 3238 F700                  		move.w	($FFFFF700).w,d1
0001CBA6 0441 0080                  		subi.w	#$80,d1
0001CBAA 0241 FF80                  		andi.w	#$FF80,d1
0001CBAE 9041                       		sub.w	d1,d0
0001CBB0 0C40 0280                  		cmpi.w	#$280,d0
0001CBB4 6200                       		bhi.s	Obj3E_Delete
0001CBB6 4EF9 0000 F0CA             		jmp	DisplaySprite
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            Obj3E_Delete:
0001CBBC 4EF9 0000 F106             		jmp	DeleteObject
0001CBC2                            ; ===========================================================================
0001CBC2 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CBC4 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CBC6 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CBC8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CBCA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CBCC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CBCE 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CBD0 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CBD2                            
0001CBD2 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CBD6 040C 0501                  		dc.b 4,	$C, 5, 1
0001CBDA 0610 0403                  		dc.b 6,	$10, 4,	3
0001CBDE 0810 0305                  		dc.b 8,	$10, 3,	5
0001CBE2                            ; ===========================================================================
0001CBE2                            
0001CBE2                            Obj3E_Main:				; XREF: Obj3E_Index
0001CBE2 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CBEA 317C 049D 0002             		move.w	#$49D,2(a0)
0001CBF0 117C 0004 0001             		move.b	#4,1(a0)
0001CBF6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CBFC 7000                       		moveq	#0,d0
0001CBFE 1028 0028                  		move.b	$28(a0),d0
0001CC02 E548                       		lsl.w	#2,d0
0001CC04 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CC08 1159 0024                  		move.b	(a1)+,$24(a0)
0001CC0C 1159 0019                  		move.b	(a1)+,$19(a0)
0001CC10 1159 0018                  		move.b	(a1)+,$18(a0)
0001CC14 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CC18 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CC1C 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CC1E 117C 0006 0020             		move.b	#6,$20(a0)
0001CC24 117C 0008 0021             		move.b	#8,$21(a0)
0001CC2A                            
0001CC2A                            Obj3E_Not02:
0001CC2A 4E75                       		rts	
0001CC2C                            ; ===========================================================================
0001CC2C                            
0001CC2C                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CC2C 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CC32 6700                       		beq.s	Obj3E_ChkOpened
0001CC34 323C 002B                  		move.w	#$2B,d1
0001CC38 343C 0018                  		move.w	#$18,d2
0001CC3C 363C 0018                  		move.w	#$18,d3
0001CC40 3828 0008                  		move.w	8(a0),d4
0001CC44 4EF9 0001 14A8             		jmp	SolidObject
0001CC4A                            ; ===========================================================================
0001CC4A                            
0001CC4A                            Obj3E_ChkOpened:
0001CC4A 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CC4E 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CC50 4228 0025                  		clr.b	$25(a0)
0001CC54 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CC5A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CC60                            
0001CC60                            Obj3E_DoOpen:
0001CC60 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CC66 4E75                       		rts	
0001CC68                            ; ===========================================================================
0001CC68                            
0001CC68                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CC68 323C 0017                  		move.w	#$17,d1
0001CC6C 343C 0008                  		move.w	#8,d2
0001CC70 363C 0008                  		move.w	#8,d3
0001CC74 3828 0008                  		move.w	8(a0),d4
0001CC78 4EB9 0001 14A8             		jsr	SolidObject
0001CC7E 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CC84 4EB9 0000 C20C             		jsr	AnimateSprite
0001CC8A 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CC90 4A28 0025                  		tst.b	$25(a0)
0001CC94 6700                       		beq.s	locret_1AC60
0001CC96 5068 000C                  		addq.w	#8,$C(a0)
0001CC9A 117C 000A 0024             		move.b	#$A,$24(a0)
0001CCA0 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CCA6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CCAA 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CCAE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CCB4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CCBA 4228 0025                  		clr.b	$25(a0)
0001CCBE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CCC4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CCCA                            
0001CCCA                            locret_1AC60:
0001CCCA 4E75                       		rts	
0001CCCC                            ; ===========================================================================
0001CCCC                            
0001CCCC                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CCCC 7007                       		moveq	#7,d0
0001CCCE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CCD2 6600                       		bne.s	loc_1ACA0
0001CCD4 4EB9 0000 F55E             		jsr	SingleObjLoad
0001CCDA 6600                       		bne.s	loc_1ACA0
0001CCDC 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CCE0 3368 0008 0008             		move.w	8(a0),8(a1)
0001CCE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CCEC 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001CCF2 7200                       		moveq	#0,d1
0001CCF4 1200                       		move.b	d0,d1
0001CCF6 E409                       		lsr.b	#2,d1
0001CCF8 0441 0020                  		subi.w	#$20,d1
0001CCFC D369 0008                  		add.w	d1,8(a1)
0001CD00 E048                       		lsr.w	#8,d0
0001CD02 E608                       		lsr.b	#3,d0
0001CD04 D169 000C                  		add.w	d0,$C(a1)
0001CD08                            
0001CD08                            loc_1ACA0:
0001CD08 5368 001E                  		subq.w	#1,$1E(a0)
0001CD0C 6700                       		beq.s	Obj3E_MakeAnimal
0001CD0E 4E75                       		rts	
0001CD10                            ; ===========================================================================
0001CD10                            
0001CD10                            Obj3E_MakeAnimal:
0001CD10 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CD16 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CD1C 117C 0006 001A             		move.b	#6,$1A(a0)
0001CD22 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CD28 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CD2E 7C07                       		moveq	#7,d6
0001CD30 3A3C 009A                  		move.w	#$9A,d5
0001CD34 78E4                       		moveq	#-$1C,d4
0001CD36                            
0001CD36                            Obj3E_Loop:
0001CD36 4EB9 0000 F55E             		jsr	SingleObjLoad
0001CD3C 6600                       		bne.s	locret_1ACF8
0001CD3E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CD42 3368 0008 0008             		move.w	8(a0),8(a1)
0001CD48 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CD4E D969 0008                  		add.w	d4,8(a1)
0001CD52 5E44                       		addq.w	#7,d4
0001CD54 3345 0036                  		move.w	d5,$36(a1)
0001CD58 5145                       		subq.w	#8,d5
0001CD5A 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CD5E                            
0001CD5E                            locret_1ACF8:
0001CD5E 4E75                       		rts	
0001CD60                            ; ===========================================================================
0001CD60                            
0001CD60                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CD60 7007                       		moveq	#7,d0
0001CD62 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CD66 6600                       		bne.s	loc_1AD38
0001CD68 4EB9 0000 F55E             		jsr	SingleObjLoad
0001CD6E 6600                       		bne.s	loc_1AD38
0001CD70 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CD74 3368 0008 0008             		move.w	8(a0),8(a1)
0001CD7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CD80 4EB9 0000 2B56             		jsr	(RandomNumber).l
0001CD86 0240 001F                  		andi.w	#$1F,d0
0001CD8A 5D40                       		subq.w	#6,d0
0001CD8C 4A41                       		tst.w	d1
0001CD8E 6A00                       		bpl.s	loc_1AD2E
0001CD90 4440                       		neg.w	d0
0001CD92                            
0001CD92                            loc_1AD2E:
0001CD92 D169 0008                  		add.w	d0,8(a1)
0001CD96 337C 000C 0036             		move.w	#$C,$36(a1)
0001CD9C                            
0001CD9C                            loc_1AD38:
0001CD9C 5368 001E                  		subq.w	#1,$1E(a0)
0001CDA0 6600                       		bne.s	locret_1AD48
0001CDA2 5428 0024                  		addq.b	#2,$24(a0)
0001CDA6 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CDAC                            
0001CDAC                            locret_1AD48:
0001CDAC 4E75                       		rts	
0001CDAE                            ; ===========================================================================
0001CDAE                            
0001CDAE                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CDAE 703E                       		moveq	#$3E,d0
0001CDB0 7228                       		moveq	#$28,d1
0001CDB2 7440                       		moveq	#$40,d2
0001CDB4 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CDB8                            
0001CDB8                            Obj3E_FindObj28:
0001CDB8 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CDBA 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CDBC D2C2                       		adda.w	d2,a1		; next object RAM
0001CDBE 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CDC2                            
0001CDC2 4EB9 0001 0764             		jsr	GotThroughAct
0001CDC8 4EF9 0000 F106             		jmp	DeleteObject
0001CDCE                            ; ===========================================================================
0001CDCE                            
0001CDCE                            Obj3E_Obj28Found:
0001CDCE 4E75                       		rts	
0001CDD0                            ; ===========================================================================
0001CDD0                            Ani_obj3E:
0001CDD0                            	include "_anim\obj3E.asm"
0001CDD0                            ; ---------------------------------------------------------------------------
0001CDD0                            ; Animation script - prison capsule
0001CDD0                            ; ---------------------------------------------------------------------------
0001CDD0 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CDD2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CDD4 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CDD8                            		even
0001CDD8                            		even
0001CDD8                            
0001CDD8                            ; ---------------------------------------------------------------------------
0001CDD8                            ; Sprite mappings - prison capsule
0001CDD8                            ; ---------------------------------------------------------------------------
0001CDD8                            Map_obj3E:
0001CDD8                            	include "_maps\obj3E.asm"
0001CDD8                            ; ---------------------------------------------------------------------------
0001CDD8                            ; Sprite mappings - prison capsule
0001CDD8                            ; ---------------------------------------------------------------------------
0001CDD8 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CDDC 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CDE0 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CDE4 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CDE6 07                         byte_1AD82:	dc.b 7
0001CDE7 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CDEC E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CDF1 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CDF6 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CDFB F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CE00 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CE05 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CE0A 01                         byte_1ADA6:	dc.b 1
0001CE0B F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CE10 06                         byte_1ADAC:	dc.b 6
0001CE11 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CE16 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CE1B 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CE20 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CE25 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CE2A 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CE2F 01                         byte_1ADCB:	dc.b 1
0001CE30 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CE35 02                         byte_1ADD1:	dc.b 2
0001CE36 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CE3B 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CE40 01                         byte_1ADDC:	dc.b 1
0001CE41 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CE46 00                         byte_1ADE2:	dc.b 0
0001CE48 00                         		even
0001CE48 00                         		even
0001CE48                            
0001CE48                            ; ---------------------------------------------------------------------------
0001CE48                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CE48                            ; ---------------------------------------------------------------------------
0001CE48                            
0001CE48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE48                            
0001CE48                            
0001CE48                            TouchResponse:				; XREF: Obj01
0001CE48 4E71                       		nop	
0001CE4A 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CE4E 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CE52 5142                       		subq.w	#8,d2
0001CE54 7A00                       		moveq	#0,d5
0001CE56 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CE5A 5705                       		subq.b	#3,d5
0001CE5C 9645                       		sub.w	d5,d3
0001CE5E 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CE64 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CE66 0643 000C                  		addi.w	#$C,d3
0001CE6A 7A0A                       		moveq	#$A,d5
0001CE6C                            
0001CE6C                            Touch_NoDuck:
0001CE6C 383C 0010                  		move.w	#$10,d4
0001CE70 DA45                       		add.w	d5,d5
0001CE72 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CE76 3C3C 005F                  		move.w	#$5F,d6
0001CE7A                            
0001CE7A                            Touch_Loop:
0001CE7A 4A29 0001                  		tst.b	1(a1)
0001CE7E 6A00                       		bpl.s	Touch_NextObj
0001CE80 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CE84 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CE86                            
0001CE86                            Touch_NextObj:
0001CE86 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CE8A 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CE8E                            
0001CE8E 7000                       		moveq	#0,d0
0001CE90 4E75                       		rts	
0001CE92                            ; ===========================================================================
0001CE92 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CE94 0C14                       		dc.b   $C, $14
0001CE96 140C                       		dc.b  $14,  $C
0001CE98 0410                       		dc.b	4, $10
0001CE9A 0C12                       		dc.b   $C, $12
0001CE9C 1010                       		dc.b  $10, $10
0001CE9E 0606                       		dc.b	6,   6
0001CEA0 180C                       		dc.b  $18,  $C
0001CEA2 0C10                       		dc.b   $C, $10
0001CEA4 100C                       		dc.b  $10,  $C
0001CEA6 0808                       		dc.b	8,   8
0001CEA8 1410                       		dc.b  $14, $10
0001CEAA 1408                       		dc.b  $14,   8
0001CEAC 0E0E                       		dc.b   $E,  $E
0001CEAE 1818                       		dc.b  $18, $18
0001CEB0 2810                       		dc.b  $28, $10
0001CEB2 1018                       		dc.b  $10, $18
0001CEB4 0810                       		dc.b	8, $10
0001CEB6 2070                       		dc.b  $20, $70
0001CEB8 4020                       		dc.b  $40, $20
0001CEBA 8020                       		dc.b  $80, $20
0001CEBC 2020                       		dc.b  $20, $20
0001CEBE 0808                       		dc.b	8,   8
0001CEC0 0404                       		dc.b	4,   4
0001CEC2 2008                       		dc.b  $20,   8
0001CEC4 0C0C                       		dc.b   $C,  $C
0001CEC6 0804                       		dc.b	8,   4
0001CEC8 1804                       		dc.b  $18,   4
0001CECA 2804                       		dc.b  $28,   4
0001CECC 0408                       		dc.b	4,   8
0001CECE 0418                       		dc.b	4, $18
0001CED0 0428                       		dc.b	4, $28
0001CED2 0420                       		dc.b	4, $20
0001CED4 1818                       		dc.b  $18, $18
0001CED6 0C18                       		dc.b   $C, $18
0001CED8 4808                       		dc.b  $48,   8
0001CEDA                            ; ===========================================================================
0001CEDA                            
0001CEDA                            Touch_Height:				; XREF: TouchResponse
0001CEDA 0240 003F                  		andi.w	#$3F,d0
0001CEDE D040                       		add.w	d0,d0
0001CEE0 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CEE4 7200                       		moveq	#0,d1
0001CEE6 121A                       		move.b	(a2)+,d1
0001CEE8 4A28 003A                  		tst.b	biting(a0)
0001CEEC 6700                       		beq.s	@not_biting
0001CEEE 5801                       		addq.b	#4,d1
0001CEF0                            		
0001CEF0                            @not_biting:
0001CEF0 3029 0008                  		move.w	8(a1),d0
0001CEF4 9041                       		sub.w	d1,d0
0001CEF6 9042                       		sub.w	d2,d0
0001CEF8 6400                       		bcc.s	loc_1AE98
0001CEFA D241                       		add.w	d1,d1
0001CEFC D041                       		add.w	d1,d0
0001CEFE 6500                       		bcs.s	Touch_Width
0001CF00 6000 FF84                  		bra.w	Touch_NextObj
0001CF04                            ; ===========================================================================
0001CF04                            
0001CF04                            loc_1AE98:
0001CF04 B044                       		cmp.w	d4,d0
0001CF06 6200 FF7E                  		bhi.w	Touch_NextObj
0001CF0A                            
0001CF0A                            Touch_Width:
0001CF0A 7200                       		moveq	#0,d1
0001CF0C 121A                       		move.b	(a2)+,d1
0001CF0E 3029 000C                  		move.w	$C(a1),d0
0001CF12 9041                       		sub.w	d1,d0
0001CF14 9043                       		sub.w	d3,d0
0001CF16 6400                       		bcc.s	loc_1AEB6
0001CF18 D241                       		add.w	d1,d1
0001CF1A D240                       		add.w	d0,d1
0001CF1C 6500                       		bcs.s	Touch_ChkValue
0001CF1E 6000 FF66                  		bra.w	Touch_NextObj
0001CF22                            ; ===========================================================================
0001CF22                            
0001CF22                            loc_1AEB6:
0001CF22 B045                       		cmp.w	d5,d0
0001CF24 6200 FF60                  		bhi.w	Touch_NextObj
0001CF28                            
0001CF28                            Touch_ChkValue:
0001CF28 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CF2C 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CF30 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CF34 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CF38 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CF3C 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CF3E 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CF42                            
0001CF42                            ; touch	response is $40-$7F
0001CF42                            
0001CF42 1029 0020                  		move.b	$20(a1),d0
0001CF46 0200 003F                  		andi.b	#$3F,d0
0001CF4A 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CF4E 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CF50 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CF56 6400 0000                  		bcc.w	locret_1AEF2
0001CF5A 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CF5E                            
0001CF5E                            locret_1AEF2:
0001CF5E 4E75                       		rts	
0001CF60                            ; ===========================================================================
0001CF60                            
0001CF60                            Touch_Monitor:
0001CF60 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CF64 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CF66 3028 000C                  		move.w	$C(a0),d0
0001CF6A 0440 0010                  		subi.w	#$10,d0
0001CF6E B069 000C                  		cmp.w	$C(a1),d0
0001CF72 6500                       		bcs.s	locret_1AF2E
0001CF74 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CF78 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CF7E 4A29 0025                  		tst.b	$25(a1)
0001CF82 6600                       		bne.s	locret_1AF2E
0001CF84 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CF88 4E75                       		rts
0001CF8A                            ; ===========================================================================
0001CF8A                            
0001CF8A                            loc_1AF1E:
0001CF8A 4A28 003A                  		tst.b	biting(a0)
0001CF8E 6700 0000                  		beq.w	locret_1AF2E
0001CF92 3029 0008                  		move.w	8(a1),d0
0001CF96 3228 0008                  		move.w	8(a0),d1
0001CF9A 0828 0000 0022             		btst	#0,$22(a0)
0001CFA0 6600                       		bne.s	@left
0001CFA2 B240                       		cmp.w	d0,d1
0001CFA4 6F00                       		ble.s	@do
0001CFA6 4E75                       		rts
0001CFA8                            		
0001CFA8                            	@left:
0001CFA8 B240                       		cmp.w	d0,d1
0001CFAA 6C00                       		bge.s	@do
0001CFAC 4E75                       		rts
0001CFAE                            		
0001CFAE                            	@do:
0001CFAE 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CFB2                            
0001CFB2                            locret_1AF2E:
0001CFB2 4E75                       		rts	
0001CFB4                            ; ===========================================================================
0001CFB4                            
0001CFB4                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CFB4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CFB8 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CFBA 4A28 003A                  		tst.b	biting(a0)
0001CFBE 6700 0000                  		beq.w	Touch_ChkHurt
0001CFC2 3029 0008                  		move.w	8(a1),d0
0001CFC6 3228 0008                  		move.w	8(a0),d1
0001CFCA 0828 0000 0022             		btst	#0,$22(a0)
0001CFD0 6600                       		bne.s	@left
0001CFD2 B240                       		cmp.w	d0,d1
0001CFD4 6F00                       		ble.s	loc_1AF40
0001CFD6 6000 0000                  		bra.w	Touch_ChkHurt
0001CFDA                            		
0001CFDA                            	@left:
0001CFDA B240                       		cmp.w	d0,d1
0001CFDC 6C00                       		bge.s	loc_1AF40
0001CFDE 6000 0000                  		bra.w	Touch_ChkHurt
0001CFE2                            
0001CFE2                            loc_1AF40:
0001CFE2 4A29 0021                  		tst.b	$21(a1)
0001CFE6 6700                       		beq.s	Touch_KillEnemy
0001CFE8 137C 0000 0020             		move.b	#0,$20(a1)
0001CFEE 5329 0021                  		subq.b	#1,$21(a1)
0001CFF2 6600                       		bne.s	locret_1AF68
0001CFF4 08E9 0007 0022             		bset	#7,$22(a1)
0001CFFA                            
0001CFFA                            locret_1AF68:
0001CFFA 4E75                       		rts	
0001CFFC                            ; ===========================================================================
0001CFFC                            
0001CFFC                            Touch_KillEnemy:
0001CFFC 08E9 0007 0022             		bset	#7,$22(a1)
0001D002 7000                       		moveq	#0,d0
0001D004 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D008 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D00C 0C40 0006                  		cmpi.w	#6,d0
0001D010 6500                       		bcs.s	loc_1AF82
0001D012 7006                       		moveq	#6,d0
0001D014                            
0001D014                            loc_1AF82:
0001D014 3340 003E                  		move.w	d0,$3E(a1)
0001D018 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D01C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D022 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D024 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D028 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D02E                            
0001D02E                            loc_1AF9C:
0001D02E 6100 0000                  		bsr.w	AddPoints
0001D032 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D036 137C 0000 0024             		move.b	#0,$24(a1)
0001D03C 4E75                       		rts	
0001D03E                            ; ===========================================================================
0001D03E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D046                            ; ===========================================================================
0001D046                            
0001D046                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D046 08E9 0007 0022             		bset	#7,$22(a1)
0001D04C                            
0001D04C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D04C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D050 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D052                            
0001D052                            loc_1AFE6:				; XREF: Touch_Hurt
0001D052 70FF                       		moveq	#-1,d0
0001D054 4E75                       		rts	
0001D056                            ; ===========================================================================
0001D056                            
0001D056                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D056 4E71                       		nop	
0001D058 4A68 0030                  		tst.w	$30(a0)
0001D05C 66F4                       		bne.s	loc_1AFE6
0001D05E 2449                       		movea.l	a1,a2
0001D060                            
0001D060                            ; End of function TouchResponse
0001D060                            ; continue straight to HurtSonic
0001D060                            
0001D060                            ; ---------------------------------------------------------------------------
0001D060                            ; Hurting Sonic	subroutine
0001D060                            ; ---------------------------------------------------------------------------
0001D060                            
0001D060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D060                            
0001D060                            
0001D060                            HurtSonic:
0001D060 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D064 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D066 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D06A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D06E 4EB9 0000 F55E             		jsr	SingleObjLoad
0001D074 6600                       		bne.s	Hurt_Shield
0001D076 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D07A 3368 0008 0008             		move.w	8(a0),8(a1)
0001D080 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D086                            
0001D086                            Hurt_Shield:
0001D086 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D08C 117C 0004 0024             		move.b	#4,$24(a0)
0001D092 6100 8596                  		bsr.w	Sonic_ResetOnFloor
0001D096 08E8 0001 0022             		bset	#1,$22(a0)
0001D09C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D0A2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D0A8 0828 0006 0022             		btst	#6,$22(a0)
0001D0AE 6700                       		beq.s	Hurt_Reverse
0001D0B0 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D0B6 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D0BC                            
0001D0BC                            Hurt_Reverse:
0001D0BC 3028 0008                  		move.w	8(a0),d0
0001D0C0 B06A 0008                  		cmp.w	8(a2),d0
0001D0C4 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D0C6 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D0CA                            
0001D0CA                            Hurt_ChkSpikes:
0001D0CA 317C 0000 0014             		move.w	#0,$14(a0)
0001D0D0 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D0D6 317C 0078 0030             		move.w	#$78,$30(a0)
0001D0DC 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D0E0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D0E4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D0E6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D0EA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D0EC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D0F0                            
0001D0F0                            Hurt_Sound:
0001D0F0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D0F6 70FF                       		moveq	#-1,d0
0001D0F8 4E75                       		rts	
0001D0FA                            ; ===========================================================================
0001D0FA                            
0001D0FA                            Hurt_NoRings:
0001D0FA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D0FE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D102                            ; End of function HurtSonic
0001D102                            
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            ; Subroutine to	kill Sonic
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            
0001D102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D102                            
0001D102                            
0001D102                            KillSonic:
0001D102 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D106 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001D108 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D10E 117C 0006 0024             		move.b	#6,$24(a0)
0001D114 6100 8514                  		bsr.w	Sonic_ResetOnFloor
0001D118 08E8 0001 0022             		bset	#1,$22(a0)
0001D11E 317C F900 0012             		move.w	#-$700,$12(a0)
0001D124 317C 0000 0010             		move.w	#0,$10(a0)
0001D12A 317C 0000 0014             		move.w	#0,$14(a0)
0001D130 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D136 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D13C 08E8 0007 0002             		bset	#7,2(a0)
0001D142 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D146 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D14A 6600                       		bne.s	Kill_Sound
0001D14C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D150                            
0001D150                            Kill_Sound:
0001D150 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D156                            
0001D156                            Kill_NoDeath:
0001D156 70FF                       		moveq	#-1,d0
0001D158 4E75                       		rts	
0001D15A                            ; End of function KillSonic
0001D15A                            
0001D15A                            
0001D15A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D15A                            
0001D15A                            
0001D15A                            Touch_Special:				; XREF: Touch_ChkValue
0001D15A 1229 0020                  		move.b	$20(a1),d1
0001D15E 0201 003F                  		andi.b	#$3F,d1
0001D162 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D166 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D168 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D16C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D16E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D172 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D174 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D178 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D17A 4E75                       		rts	
0001D17C                            ; ===========================================================================
0001D17C                            
0001D17C                            Touch_CatKiller:			; XREF: Touch_Special
0001D17C 6000 FEC8                  		bra.w	loc_1AFDA
0001D180                            ; ===========================================================================
0001D180                            
0001D180                            Touch_Yadrin:				; XREF: Touch_Special
0001D180 9A40                       		sub.w	d0,d5
0001D182 0C45 0008                  		cmpi.w	#8,d5
0001D186 6400                       		bcc.s	loc_1B144
0001D188 3029 0008                  		move.w	8(a1),d0
0001D18C 5940                       		subq.w	#4,d0
0001D18E 0829 0000 0022             		btst	#0,$22(a1)
0001D194 6700                       		beq.s	loc_1B130
0001D196 0440 0010                  		subi.w	#$10,d0
0001D19A                            
0001D19A                            loc_1B130:
0001D19A 9042                       		sub.w	d2,d0
0001D19C 6400                       		bcc.s	loc_1B13C
0001D19E 0640 0018                  		addi.w	#$18,d0
0001D1A2 6500                       		bcs.s	loc_1B140
0001D1A4 6000                       		bra.s	loc_1B144
0001D1A6                            ; ===========================================================================
0001D1A6                            
0001D1A6                            loc_1B13C:
0001D1A6 B044                       		cmp.w	d4,d0
0001D1A8 6200                       		bhi.s	loc_1B144
0001D1AA                            
0001D1AA                            loc_1B140:
0001D1AA 6000 FEA0                  		bra.w	Touch_ChkHurt
0001D1AE                            ; ===========================================================================
0001D1AE                            
0001D1AE                            loc_1B144:
0001D1AE 6000 FE04                  		bra.w	Touch_Enemy
0001D1B2                            ; ===========================================================================
0001D1B2                            
0001D1B2                            Touch_D7orE1:				; XREF: Touch_Special
0001D1B2 5229 0021                  		addq.b	#1,$21(a1)
0001D1B6 4E75                       		rts	
0001D1B8                            ; End of function Touch_Special
0001D1B8                            
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            ; Subroutine to	show the special stage layout
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            
0001D1B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1B8                            
0001D1B8                            
0001D1B8                            SS_ShowLayout:				; XREF: SpecialStage
0001D1B8 6100 0000                  		bsr.w	SS_AniWallsRings
0001D1BC 6100 0000                  		bsr.w	SS_AniItems
0001D1C0 3F05                       		move.w	d5,-(sp)
0001D1C2 43F8 8000                  		lea	($FFFF8000).w,a1
0001D1C6 1038 F780                  		move.b	($FFFFF780).w,d0
0001D1CA 0200 00FC                  		andi.b	#$FC,d0
0001D1CE 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001D1D4 3800                       		move.w	d0,d4
0001D1D6 3A01                       		move.w	d1,d5
0001D1D8 C9FC 0018                  		muls.w	#$18,d4
0001D1DC CBFC 0018                  		muls.w	#$18,d5
0001D1E0 7400                       		moveq	#0,d2
0001D1E2 3438 F700                  		move.w	($FFFFF700).w,d2
0001D1E6 84FC 0018                  		divu.w	#$18,d2
0001D1EA 4842                       		swap	d2
0001D1EC 4442                       		neg.w	d2
0001D1EE 0642 FF4C                  		addi.w	#-$B4,d2
0001D1F2 7600                       		moveq	#0,d3
0001D1F4 3638 F704                  		move.w	($FFFFF704).w,d3
0001D1F8 86FC 0018                  		divu.w	#$18,d3
0001D1FC 4843                       		swap	d3
0001D1FE 4443                       		neg.w	d3
0001D200 0643 FF4C                  		addi.w	#-$B4,d3
0001D204 3E3C 000F                  		move.w	#$F,d7
0001D208                            
0001D208                            loc_1B19E:
0001D208 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D20C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D210 4440                       		neg.w	d0
0001D212 C3C2                       		muls.w	d2,d1
0001D214 C1C3                       		muls.w	d3,d0
0001D216 2C00                       		move.l	d0,d6
0001D218 DC81                       		add.l	d1,d6
0001D21A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D21E C1C2                       		muls.w	d2,d0
0001D220 C3C3                       		muls.w	d3,d1
0001D222 D280                       		add.l	d0,d1
0001D224 2406                       		move.l	d6,d2
0001D226 3C3C 000F                  		move.w	#$F,d6
0001D22A                            
0001D22A                            loc_1B1C0:
0001D22A 2002                       		move.l	d2,d0
0001D22C E080                       		asr.l	#8,d0
0001D22E 32C0                       		move.w	d0,(a1)+
0001D230 2001                       		move.l	d1,d0
0001D232 E080                       		asr.l	#8,d0
0001D234 32C0                       		move.w	d0,(a1)+
0001D236 D485                       		add.l	d5,d2
0001D238 D284                       		add.l	d4,d1
0001D23A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D23E                            
0001D23E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D242 0643 0018                  		addi.w	#$18,d3
0001D246 51CF FFC0                  		dbf	d7,loc_1B19E
0001D24A                            
0001D24A 3A1F                       		move.w	(sp)+,d5
0001D24C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D252 7000                       		moveq	#0,d0
0001D254 3038 F704                  		move.w	($FFFFF704).w,d0
0001D258 80FC 0018                  		divu.w	#$18,d0
0001D25C C0FC 0080                  		mulu.w	#$80,d0
0001D260 D1C0                       		adda.l	d0,a0
0001D262 7000                       		moveq	#0,d0
0001D264 3038 F700                  		move.w	($FFFFF700).w,d0
0001D268 80FC 0018                  		divu.w	#$18,d0
0001D26C D0C0                       		adda.w	d0,a0
0001D26E 49F8 8000                  		lea	($FFFF8000).w,a4
0001D272 3E3C 000F                  		move.w	#$F,d7
0001D276                            
0001D276                            loc_1B20C:
0001D276 3C3C 000F                  		move.w	#$F,d6
0001D27A                            
0001D27A                            loc_1B210:
0001D27A 7000                       		moveq	#0,d0
0001D27C 1018                       		move.b	(a0)+,d0
0001D27E 6700                       		beq.s	loc_1B268
0001D280 0C00 004E                  		cmpi.b	#$4E,d0
0001D284 6200                       		bhi.s	loc_1B268
0001D286 3614                       		move.w	(a4),d3
0001D288 0643 0120                  		addi.w	#$120,d3
0001D28C 0C43 0070                  		cmpi.w	#$70,d3
0001D290 6500                       		bcs.s	loc_1B268
0001D292 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D296 6400                       		bcc.s	loc_1B268
0001D298 342C 0002                  		move.w	2(a4),d2
0001D29C 0642 00F0                  		addi.w	#$F0,d2
0001D2A0 0C42 0070                  		cmpi.w	#$70,d2
0001D2A4 6500                       		bcs.s	loc_1B268
0001D2A6 0C42 0170                  		cmpi.w	#$170,d2
0001D2AA 6400                       		bcc.s	loc_1B268
0001D2AC 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D2B2 E748                       		lsl.w	#3,d0
0001D2B4 4BF5 0000                  		lea	(a5,d0.w),a5
0001D2B8 225D                       		movea.l	(a5)+,a1
0001D2BA 321D                       		move.w	(a5)+,d1
0001D2BC D241                       		add.w	d1,d1
0001D2BE D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D2C2 365D                       		movea.w	(a5)+,a3
0001D2C4 7200                       		moveq	#0,d1
0001D2C6 1219                       		move.b	(a1)+,d1
0001D2C8 5301                       		subq.b	#1,d1
0001D2CA 6B00                       		bmi.s	loc_1B268
0001D2CC 4EB9 0000 F228             		jsr	sub_D762
0001D2D2                            
0001D2D2                            loc_1B268:
0001D2D2 584C                       		addq.w	#4,a4
0001D2D4 51CE FFA4                  		dbf	d6,loc_1B210
0001D2D8                            
0001D2D8 41E8 0070                  		lea	$70(a0),a0
0001D2DC 51CF FF98                  		dbf	d7,loc_1B20C
0001D2E0                            
0001D2E0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D2E4 0C05 0050                  		cmpi.b	#$50,d5
0001D2E8 6700                       		beq.s	loc_1B288
0001D2EA 24BC 0000 0000             		move.l	#0,(a2)
0001D2F0 4E75                       		rts	
0001D2F2                            ; ===========================================================================
0001D2F2                            
0001D2F2                            loc_1B288:
0001D2F2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D2F8 4E75                       		rts	
0001D2FA                            ; End of function SS_ShowLayout
0001D2FA                            
0001D2FA                            ; ---------------------------------------------------------------------------
0001D2FA                            ; Subroutine to	animate	walls and rings	in the special stage
0001D2FA                            ; ---------------------------------------------------------------------------
0001D2FA                            
0001D2FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2FA                            
0001D2FA                            
0001D2FA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D2FA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001D300 7000                       		moveq	#0,d0
0001D302 1038 F780                  		move.b	($FFFFF780).w,d0
0001D306 E408                       		lsr.b	#2,d0
0001D308 0240 000F                  		andi.w	#$F,d0
0001D30C 7223                       		moveq	#$23,d1
0001D30E                            
0001D30E                            loc_1B2A4:
0001D30E 3280                       		move.w	d0,(a1)
0001D310 5049                       		addq.w	#8,a1
0001D312 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001D316                            
0001D316 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D31C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D320 6A00                       		bpl.s	loc_1B2C8
0001D322 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D328 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D32C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D332                            
0001D332                            loc_1B2C8:
0001D332 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D338 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D33C 6A00                       		bpl.s	loc_1B2E4
0001D33E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D344 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D348 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D34E                            
0001D34E                            loc_1B2E4:
0001D34E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D352 1340 0138                  		move.b	d0,$138(a1)
0001D356 1340 0160                  		move.b	d0,$160(a1)
0001D35A 1340 0148                  		move.b	d0,$148(a1)
0001D35E 1340 0150                  		move.b	d0,$150(a1)
0001D362 1340 01D8                  		move.b	d0,$1D8(a1)
0001D366 1340 01E0                  		move.b	d0,$1E0(a1)
0001D36A 1340 01E8                  		move.b	d0,$1E8(a1)
0001D36E 1340 01F0                  		move.b	d0,$1F0(a1)
0001D372 1340 01F8                  		move.b	d0,$1F8(a1)
0001D376 1340 0200                  		move.b	d0,$200(a1)
0001D37A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D37E 6A00                       		bpl.s	loc_1B326
0001D380 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D386 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D38A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D390                            
0001D390                            loc_1B326:
0001D390 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D394 1340 0168                  		move.b	d0,$168(a1)
0001D398 1340 0170                  		move.b	d0,$170(a1)
0001D39C 1340 0178                  		move.b	d0,$178(a1)
0001D3A0 1340 0180                  		move.b	d0,$180(a1)
0001D3A4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D3A8 6A00                       		bpl.s	loc_1B350
0001D3AA 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D3B0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D3B4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D3BA                            
0001D3BA                            loc_1B350:
0001D3BA 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D3C0 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D3C6 7000                       		moveq	#0,d0
0001D3C8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D3CC D040                       		add.w	d0,d0
0001D3CE 41F0 0000                  		lea	(a0,d0.w),a0
0001D3D2 3290                       		move.w	(a0),(a1)
0001D3D4 3368 0002 0008             		move.w	2(a0),8(a1)
0001D3DA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D3E0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D3E6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D3EC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D3F2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D3F8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D3FE D0FC 0020                  		adda.w	#$20,a0
0001D402 D2FC 0048                  		adda.w	#$48,a1
0001D406 3290                       		move.w	(a0),(a1)
0001D408 3368 0002 0008             		move.w	2(a0),8(a1)
0001D40E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D414 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D41A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D420 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D426 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D42C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D432 D0FC 0020                  		adda.w	#$20,a0
0001D436 D2FC 0048                  		adda.w	#$48,a1
0001D43A 3290                       		move.w	(a0),(a1)
0001D43C 3368 0002 0008             		move.w	2(a0),8(a1)
0001D442 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D448 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D44E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D454 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D45A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D460 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D466 D0FC 0020                  		adda.w	#$20,a0
0001D46A D2FC 0048                  		adda.w	#$48,a1
0001D46E 3290                       		move.w	(a0),(a1)
0001D470 3368 0002 0008             		move.w	2(a0),8(a1)
0001D476 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D47C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D482 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D488 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D48E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D494 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D49A D0FC 0020                  		adda.w	#$20,a0
0001D49E D2FC 0048                  		adda.w	#$48,a1
0001D4A2 4E75                       		rts	
0001D4A4                            ; End of function SS_AniWallsRings
0001D4A4                            
0001D4A4                            ; ===========================================================================
0001D4A4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D4B4 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D4C4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D4D4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D4E4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D4F4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D504 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D514 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D524                            ; ---------------------------------------------------------------------------
0001D524                            ; Subroutine to	remove items when you collect them in the special stage
0001D524                            ; ---------------------------------------------------------------------------
0001D524                            
0001D524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D524                            
0001D524                            
0001D524                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D524 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D52A 303C 001F                  		move.w	#$1F,d0
0001D52E                            
0001D52E                            loc_1B4C4:
0001D52E 4A12                       		tst.b	(a2)
0001D530 6700                       		beq.s	locret_1B4CE
0001D532 504A                       		addq.w	#8,a2
0001D534 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D538                            
0001D538                            locret_1B4CE:
0001D538 4E75                       		rts	
0001D53A                            ; End of function SS_RemoveCollectedItem
0001D53A                            
0001D53A                            ; ---------------------------------------------------------------------------
0001D53A                            ; Subroutine to	animate	special	stage items when you touch them
0001D53A                            ; ---------------------------------------------------------------------------
0001D53A                            
0001D53A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D53A                            
0001D53A                            
0001D53A                            SS_AniItems:				; XREF: SS_ShowLayout
0001D53A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D540 3E3C 001F                  		move.w	#$1F,d7
0001D544                            
0001D544                            loc_1B4DA:
0001D544 7000                       		moveq	#0,d0
0001D546 1010                       		move.b	(a0),d0
0001D548 6700                       		beq.s	loc_1B4E8
0001D54A E548                       		lsl.w	#2,d0
0001D54C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D550 4E91                       		jsr	(a1)
0001D552                            
0001D552                            loc_1B4E8:
0001D552 5048                       		addq.w	#8,a0
0001D554                            
0001D554                            loc_1B4EA:
0001D554 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D558                            
0001D558 4E75                       		rts	
0001D55A                            ; End of function SS_AniItems
0001D55A                            
0001D55A                            ; ===========================================================================
0001D55A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D55E 0000 0000                  		dc.l SS_AniBumper
0001D562 0000 0000                  		dc.l SS_Ani1Up
0001D566 0000 0000                  		dc.l SS_AniReverse
0001D56A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D56E 0000 0000                  		dc.l SS_AniGlassBlock
0001D572                            ; ===========================================================================
0001D572                            
0001D572                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D572 5328 0002                  		subq.b	#1,2(a0)
0001D576 6A00                       		bpl.s	locret_1B530
0001D578 117C 0005 0002             		move.b	#5,2(a0)
0001D57E 7000                       		moveq	#0,d0
0001D580 1028 0003                  		move.b	3(a0),d0
0001D584 5228 0003                  		addq.b	#1,3(a0)
0001D588 2268 0004                  		movea.l	4(a0),a1
0001D58C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D590 1280                       		move.b	d0,(a1)
0001D592 6600                       		bne.s	locret_1B530
0001D594 4290                       		clr.l	(a0)
0001D596 42A8 0004                  		clr.l	4(a0)
0001D59A                            
0001D59A                            locret_1B530:
0001D59A 4E75                       		rts	
0001D59C                            ; ===========================================================================
0001D59C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D5A2                            ; ===========================================================================
0001D5A2                            
0001D5A2                            SS_AniBumper:				; XREF: SS_AniIndex
0001D5A2 5328 0002                  		subq.b	#1,2(a0)
0001D5A6 6A00                       		bpl.s	locret_1B566
0001D5A8 117C 0007 0002             		move.b	#7,2(a0)
0001D5AE 7000                       		moveq	#0,d0
0001D5B0 1028 0003                  		move.b	3(a0),d0
0001D5B4 5228 0003                  		addq.b	#1,3(a0)
0001D5B8 2268 0004                  		movea.l	4(a0),a1
0001D5BC 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D5C0 6600                       		bne.s	loc_1B564
0001D5C2 4290                       		clr.l	(a0)
0001D5C4 42A8 0004                  		clr.l	4(a0)
0001D5C8 12BC 0025                  		move.b	#$25,(a1)
0001D5CC 4E75                       		rts	
0001D5CE                            ; ===========================================================================
0001D5CE                            
0001D5CE                            loc_1B564:
0001D5CE 1280                       		move.b	d0,(a1)
0001D5D0                            
0001D5D0                            locret_1B566:
0001D5D0 4E75                       		rts	
0001D5D2                            ; ===========================================================================
0001D5D2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D5D8                            ; ===========================================================================
0001D5D8                            
0001D5D8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D5D8 5328 0002                  		subq.b	#1,2(a0)
0001D5DC 6A00                       		bpl.s	locret_1B596
0001D5DE 117C 0005 0002             		move.b	#5,2(a0)
0001D5E4 7000                       		moveq	#0,d0
0001D5E6 1028 0003                  		move.b	3(a0),d0
0001D5EA 5228 0003                  		addq.b	#1,3(a0)
0001D5EE 2268 0004                  		movea.l	4(a0),a1
0001D5F2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D5F6 1280                       		move.b	d0,(a1)
0001D5F8 6600                       		bne.s	locret_1B596
0001D5FA 4290                       		clr.l	(a0)
0001D5FC 42A8 0004                  		clr.l	4(a0)
0001D600                            
0001D600                            locret_1B596:
0001D600 4E75                       		rts	
0001D602                            ; ===========================================================================
0001D602 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D608                            ; ===========================================================================
0001D608                            
0001D608                            SS_AniReverse:				; XREF: SS_AniIndex
0001D608 5328 0002                  		subq.b	#1,2(a0)
0001D60C 6A00                       		bpl.s	locret_1B5CC
0001D60E 117C 0007 0002             		move.b	#7,2(a0)
0001D614 7000                       		moveq	#0,d0
0001D616 1028 0003                  		move.b	3(a0),d0
0001D61A 5228 0003                  		addq.b	#1,3(a0)
0001D61E 2268 0004                  		movea.l	4(a0),a1
0001D622 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D626 6600                       		bne.s	loc_1B5CA
0001D628 4290                       		clr.l	(a0)
0001D62A 42A8 0004                  		clr.l	4(a0)
0001D62E 12BC 002B                  		move.b	#$2B,(a1)
0001D632 4E75                       		rts	
0001D634                            ; ===========================================================================
0001D634                            
0001D634                            loc_1B5CA:
0001D634 1280                       		move.b	d0,(a1)
0001D636                            
0001D636                            locret_1B5CC:
0001D636 4E75                       		rts	
0001D638                            ; ===========================================================================
0001D638 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D63E                            ; ===========================================================================
0001D63E                            
0001D63E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D63E 5328 0002                  		subq.b	#1,2(a0)
0001D642 6A00                       		bpl.s	locret_1B60C
0001D644 117C 0005 0002             		move.b	#5,2(a0)
0001D64A 7000                       		moveq	#0,d0
0001D64C 1028 0003                  		move.b	3(a0),d0
0001D650 5228 0003                  		addq.b	#1,3(a0)
0001D654 2268 0004                  		movea.l	4(a0),a1
0001D658 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D65C 1280                       		move.b	d0,(a1)
0001D65E 6600                       		bne.s	locret_1B60C
0001D660 4290                       		clr.l	(a0)
0001D662 42A8 0004                  		clr.l	4(a0)
0001D666 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D66C 303C 00A8                  		move.w	#$A8,d0
0001D670 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D676                            
0001D676                            locret_1B60C:
0001D676 4E75                       		rts	
0001D678                            ; ===========================================================================
0001D678 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D67E                            ; ===========================================================================
0001D67E                            
0001D67E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D67E 5328 0002                  		subq.b	#1,2(a0)
0001D682 6A00                       		bpl.s	locret_1B640
0001D684 117C 0001 0002             		move.b	#1,2(a0)
0001D68A 7000                       		moveq	#0,d0
0001D68C 1028 0003                  		move.b	3(a0),d0
0001D690 5228 0003                  		addq.b	#1,3(a0)
0001D694 2268 0004                  		movea.l	4(a0),a1
0001D698 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D69C 1280                       		move.b	d0,(a1)
0001D69E 6600                       		bne.s	locret_1B640
0001D6A0 12A8 0004                  		move.b	4(a0),(a1)
0001D6A4 4290                       		clr.l	(a0)
0001D6A6 42A8 0004                  		clr.l	4(a0)
0001D6AA                            
0001D6AA                            locret_1B640:
0001D6AA 4E75                       		rts	
0001D6AC                            ; ===========================================================================
0001D6AC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D6B6                            ; ---------------------------------------------------------------------------
0001D6B6                            ; Special stage	layout pointers
0001D6B6                            ; ---------------------------------------------------------------------------
0001D6B6                            SS_LayoutIndex:
0001D6B6                            	include "_inc\Special stage layout pointers.asm"
0001D6B6                            ; ---------------------------------------------------------------------------
0001D6B6                            ; Special stage	layout pointers
0001D6B6                            ; ---------------------------------------------------------------------------
0001D6B6 0000 0000                  	dc.l SS_1
0001D6BA 0000 0000                  	dc.l SS_2
0001D6BE 0000 0000                  	dc.l SS_3
0001D6C2 0000 0000                  	dc.l SS_4
0001D6C6 0000 0000                  	dc.l SS_5
0001D6CA 0000 0000                  	dc.l SS_6
0001D6CE                            	even
0001D6CE                            	even
0001D6CE                            
0001D6CE                            ; ---------------------------------------------------------------------------
0001D6CE                            ; Special stage	start locations
0001D6CE                            ; ---------------------------------------------------------------------------
0001D6CE                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D6E6                            		even
0001D6E6                            
0001D6E6                            ; ---------------------------------------------------------------------------
0001D6E6                            ; Subroutine to	load special stage layout
0001D6E6                            ; ---------------------------------------------------------------------------
0001D6E6                            
0001D6E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6E6                            
0001D6E6                            
0001D6E6                            SS_Load:				; XREF: SpecialStage
0001D6E6 7000                       		moveq	#0,d0
0001D6E8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D6EC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D6F0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D6F6 6500                       		bcs.s	SS_ChkEmldNum
0001D6F8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D6FE                            
0001D6FE                            SS_ChkEmldNum:
0001D6FE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D704 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D706 7200                       		moveq	#0,d1
0001D708 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D70C 5301                       		subq.b	#1,d1
0001D70E 6500                       		bcs.s	SS_LoadData
0001D710 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D714                            
0001D714                            SS_ChkEmldLoop:	
0001D714 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D718 6600                       		bne.s	SS_ChkEmldRepeat
0001D71A 60CA                       		bra.s	SS_Load
0001D71C                            ; ===========================================================================
0001D71C                            
0001D71C                            SS_ChkEmldRepeat:
0001D71C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D720                            
0001D720                            SS_LoadData:
0001D720 E548                       		lsl.w	#2,d0
0001D722 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D726 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D72A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D72E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D732 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D738 303C 0000                  		move.w	#0,d0
0001D73C 4EB9 0000 1724             		jsr	(EniDec).l
0001D742 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D748 303C 0FFF                  		move.w	#$FFF,d0
0001D74C                            
0001D74C                            SS_ClrRAM3:
0001D74C 4299                       		clr.l	(a1)+
0001D74E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D752                            
0001D752 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D758 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D75E 723F                       		moveq	#$3F,d1
0001D760                            
0001D760                            loc_1B6F6:
0001D760 743F                       		moveq	#$3F,d2
0001D762                            
0001D762                            loc_1B6F8:
0001D762 12D8                       		move.b	(a0)+,(a1)+
0001D764 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D768                            
0001D768 43E9 0040                  		lea	$40(a1),a1
0001D76C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D770                            
0001D770 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D776 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D77C 724D                       		moveq	#$4D,d1
0001D77E                            
0001D77E                            loc_1B714:
0001D77E 22D8                       		move.l	(a0)+,(a1)+
0001D780 32FC 0000                  		move.w	#0,(a1)+
0001D784 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D78A 32D8                       		move.w	(a0)+,(a1)+
0001D78C 51C9 FFF0                  		dbf	d1,loc_1B714
0001D790                            
0001D790 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D796 323C 003F                  		move.w	#$3F,d1
0001D79A                            
0001D79A                            loc_1B730:
0001D79A                            
0001D79A 4299                       		clr.l	(a1)+
0001D79C 51C9 FFFC                  		dbf	d1,loc_1B730
0001D7A0                            
0001D7A0 4E75                       		rts	
0001D7A2                            ; End of function SS_Load
0001D7A2                            
0001D7A2                            ; ===========================================================================
0001D7A2                            ; ---------------------------------------------------------------------------
0001D7A2                            ; Special stage	mappings and VRAM pointers
0001D7A2                            ; ---------------------------------------------------------------------------
0001D7A2                            SS_MapIndex:
0001D7A2                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D7A2                            ; ---------------------------------------------------------------------------
0001D7A2                            ; Special stage	mappings and VRAM pointers
0001D7A2                            ; ---------------------------------------------------------------------------
0001D7A2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D7A6 0142                       	dc.w $142		; VRAM setting
0001D7A8 0000 0000                  	dc.l Map_SSWalls
0001D7AC 0142                       	dc.w $142
0001D7AE 0000 0000                  	dc.l Map_SSWalls
0001D7B2 0142                       	dc.w $142
0001D7B4 0000 0000                  	dc.l Map_SSWalls
0001D7B8 0142                       	dc.w $142
0001D7BA 0000 0000                  	dc.l Map_SSWalls
0001D7BE 0142                       	dc.w $142
0001D7C0 0000 0000                  	dc.l Map_SSWalls
0001D7C4 0142                       	dc.w $142
0001D7C6 0000 0000                  	dc.l Map_SSWalls
0001D7CA 0142                       	dc.w $142
0001D7CC 0000 0000                  	dc.l Map_SSWalls
0001D7D0 0142                       	dc.w $142
0001D7D2 0000 0000                  	dc.l Map_SSWalls
0001D7D6 0142                       	dc.w $142
0001D7D8 0000 0000                  	dc.l Map_SSWalls
0001D7DC 2142                       	dc.w $2142
0001D7DE 0000 0000                  	dc.l Map_SSWalls
0001D7E2 2142                       	dc.w $2142
0001D7E4 0000 0000                  	dc.l Map_SSWalls
0001D7E8 2142                       	dc.w $2142
0001D7EA 0000 0000                  	dc.l Map_SSWalls
0001D7EE 2142                       	dc.w $2142
0001D7F0 0000 0000                  	dc.l Map_SSWalls
0001D7F4 2142                       	dc.w $2142
0001D7F6 0000 0000                  	dc.l Map_SSWalls
0001D7FA 2142                       	dc.w $2142
0001D7FC 0000 0000                  	dc.l Map_SSWalls
0001D800 2142                       	dc.w $2142
0001D802 0000 0000                  	dc.l Map_SSWalls
0001D806 2142                       	dc.w $2142
0001D808 0000 0000                  	dc.l Map_SSWalls
0001D80C 2142                       	dc.w $2142
0001D80E 0000 0000                  	dc.l Map_SSWalls
0001D812 4142                       	dc.w $4142
0001D814 0000 0000                  	dc.l Map_SSWalls
0001D818 4142                       	dc.w $4142
0001D81A 0000 0000                  	dc.l Map_SSWalls
0001D81E 4142                       	dc.w $4142
0001D820 0000 0000                  	dc.l Map_SSWalls
0001D824 4142                       	dc.w $4142
0001D826 0000 0000                  	dc.l Map_SSWalls
0001D82A 4142                       	dc.w $4142
0001D82C 0000 0000                  	dc.l Map_SSWalls
0001D830 4142                       	dc.w $4142
0001D832 0000 0000                  	dc.l Map_SSWalls
0001D836 4142                       	dc.w $4142
0001D838 0000 0000                  	dc.l Map_SSWalls
0001D83C 4142                       	dc.w $4142
0001D83E 0000 0000                  	dc.l Map_SSWalls
0001D842 4142                       	dc.w $4142
0001D844 0000 0000                  	dc.l Map_SSWalls
0001D848 6142                       	dc.w $6142
0001D84A 0000 0000                  	dc.l Map_SSWalls
0001D84E 6142                       	dc.w $6142
0001D850 0000 0000                  	dc.l Map_SSWalls
0001D854 6142                       	dc.w $6142
0001D856 0000 0000                  	dc.l Map_SSWalls
0001D85A 6142                       	dc.w $6142
0001D85C 0000 0000                  	dc.l Map_SSWalls
0001D860 6142                       	dc.w $6142
0001D862 0000 0000                  	dc.l Map_SSWalls
0001D866 6142                       	dc.w $6142
0001D868 0000 0000                  	dc.l Map_SSWalls
0001D86C 6142                       	dc.w $6142
0001D86E 0000 0000                  	dc.l Map_SSWalls
0001D872 6142                       	dc.w $6142
0001D874 0000 0000                  	dc.l Map_SSWalls
0001D878 6142                       	dc.w $6142
0001D87A 0001 05DC                  	dc.l Map_obj47
0001D87E 023B                       	dc.w $23B
0001D880 0000 0000                  	dc.l Map_SS_R
0001D884 0570                       	dc.w $570
0001D886 0000 0000                  	dc.l Map_SS_R
0001D88A 0251                       	dc.w $251
0001D88C 0000 0000                  	dc.l Map_SS_R
0001D890 0370                       	dc.w $370
0001D892 0000 0000                  	dc.l Map_SS_Up
0001D896 0263                       	dc.w $263
0001D898 0000 0000                  	dc.l Map_SS_Down
0001D89C 0263                       	dc.w $263
0001D89E 0000 0000                  	dc.l Map_SS_R
0001D8A2 22F0                       	dc.w $22F0
0001D8A4 0000 0000                  	dc.l Map_SS_Glass
0001D8A8 0470                       	dc.w $470
0001D8AA 0000 0000                  	dc.l Map_SS_Glass
0001D8AE 05F0                       	dc.w $5F0
0001D8B0 0000 0000                  	dc.l Map_SS_Glass
0001D8B4 65F0                       	dc.w $65F0
0001D8B6 0000 0000                  	dc.l Map_SS_Glass
0001D8BA 25F0                       	dc.w $25F0
0001D8BC 0000 0000                  	dc.l Map_SS_Glass
0001D8C0 45F0                       	dc.w $45F0
0001D8C2 0000 0000                  	dc.l Map_SS_R
0001D8C6 02F0                       	dc.w $2F0
0001D8C8 0101 05DC                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D8CC 023B                       	dc.w $23B
0001D8CE 0201 05DC                  	dc.l Map_obj47+$2000000
0001D8D2 023B                       	dc.w $23B
0001D8D4 0000 0000                  	dc.l Map_SS_R
0001D8D8 0797                       	dc.w $797
0001D8DA 0000 0000                  	dc.l Map_SS_R
0001D8DE 07A0                       	dc.w $7A0
0001D8E0 0000 0000                  	dc.l Map_SS_R
0001D8E4 07A9                       	dc.w $7A9
0001D8E6 0000 0000                  	dc.l Map_SS_R
0001D8EA 0797                       	dc.w $797
0001D8EC 0000 0000                  	dc.l Map_SS_R
0001D8F0 07A0                       	dc.w $7A0
0001D8F2 0000 0000                  	dc.l Map_SS_R
0001D8F6 07A9                       	dc.w $7A9
0001D8F8 0000 BA82                  	dc.l Map_obj25
0001D8FC 27B2                       	dc.w $27B2
0001D8FE 0000 0000                  	dc.l Map_SS_Chaos3
0001D902 0770                       	dc.w $770
0001D904 0000 0000                  	dc.l Map_SS_Chaos3
0001D908 2770                       	dc.w $2770
0001D90A 0000 0000                  	dc.l Map_SS_Chaos3
0001D90E 4770                       	dc.w $4770
0001D910 0000 0000                  	dc.l Map_SS_Chaos3
0001D914 6770                       	dc.w $6770
0001D916 0000 0000                  	dc.l Map_SS_Chaos1
0001D91A 0770                       	dc.w $770
0001D91C 0000 0000                  	dc.l Map_SS_Chaos2
0001D920 0770                       	dc.w $770
0001D922 0000 0000                  	dc.l Map_SS_R
0001D926 04F0                       	dc.w $4F0
0001D928 0400 BA82                  	dc.l Map_obj25+$4000000
0001D92C 27B2                       	dc.w $27B2
0001D92E 0500 BA82                  	dc.l Map_obj25+$5000000
0001D932 27B2                       	dc.w $27B2
0001D934 0600 BA82                  	dc.l Map_obj25+$6000000
0001D938 27B2                       	dc.w $27B2
0001D93A 0700 BA82                  	dc.l Map_obj25+$7000000
0001D93E 27B2                       	dc.w $27B2
0001D940 0000 0000                  	dc.l Map_SS_Glass
0001D944 23F0                       	dc.w $23F0
0001D946 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D94A 23F0                       	dc.w $23F0
0001D94C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D950 23F0                       	dc.w $23F0
0001D952 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D956 23F0                       	dc.w $23F0
0001D958 0000 0000                  	dc.l Map_SS_R+$2000000
0001D95C 04F0                       	dc.w $4F0
0001D95E 0000 0000                  	dc.l Map_SS_Glass
0001D962 05F0                       	dc.w $5F0
0001D964 0000 0000                  	dc.l Map_SS_Glass
0001D968 65F0                       	dc.w $65F0
0001D96A 0000 0000                  	dc.l Map_SS_Glass
0001D96E 25F0                       	dc.w $25F0
0001D970 0000 0000                  	dc.l Map_SS_Glass
0001D974 45F0                       	dc.w $45F0
0001D974 45F0                       	dc.w $45F0
0001D976                            
0001D976                            ; ---------------------------------------------------------------------------
0001D976                            ; Sprite mappings - special stage "R" block
0001D976                            ; ---------------------------------------------------------------------------
0001D976                            Map_SS_R:
0001D976                            	include "_maps\SSRblock.asm"
0001D976                            ; ---------------------------------------------------------------------------
0001D976                            ; Sprite mappings - special stage "R" block
0001D976                            ; ---------------------------------------------------------------------------
0001D976 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D97A 0000                       		dc.w byte_1B91E-Map_SS_R
0001D97C 01                         byte_1B912:	dc.b 1
0001D97D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D982 01                         byte_1B918:	dc.b 1
0001D983 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D988 00                         byte_1B91E:	dc.b 0
0001D98A 00                         		even
0001D98A 00                         		even
0001D98A                            
0001D98A                            ; ---------------------------------------------------------------------------
0001D98A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D98A                            ; ---------------------------------------------------------------------------
0001D98A                            Map_SS_Glass:
0001D98A                            	include "_maps\SSglassblock.asm"
0001D98A                            ; ---------------------------------------------------------------------------
0001D98A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D98A                            ; ---------------------------------------------------------------------------
0001D98A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D98E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D992 01                         byte_1B928:	dc.b 1
0001D993 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D998 01                         byte_1B92E:	dc.b 1
0001D999 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D99E 01                         byte_1B934:	dc.b 1
0001D99F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D9A4 01                         byte_1B93A:	dc.b 1
0001D9A5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D9AA                            		even
0001D9AA                            		even
0001D9AA                            
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Sprite mappings - special stage "UP" block
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            Map_SS_Up:
0001D9AA                            	include "_maps\SSUPblock.asm"
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Sprite mappings - special stage "UP" block
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA 0000                       		dc.w byte_1B944-Map_SS_Up
0001D9AC 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D9AE 01                         byte_1B944:	dc.b 1
0001D9AF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D9B4 01                         byte_1B94A:	dc.b 1
0001D9B5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D9BA                            		even
0001D9BA                            		even
0001D9BA                            
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA                            ; Sprite mappings - special stage "DOWN" block
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA                            Map_SS_Down:
0001D9BA                            	include "_maps\SSDOWNblock.asm"
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA                            ; Sprite mappings - special stage "DOWN" block
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA 0000                       		dc.w byte_1B954-Map_SS_Down
0001D9BC 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D9BE 01                         byte_1B954:	dc.b 1
0001D9BF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D9C4 01                         byte_1B95A:	dc.b 1
0001D9C5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D9CA                            		even
0001D9CA                            		even
0001D9CA                            
0001D9CA                            ; ---------------------------------------------------------------------------
0001D9CA                            ; Sprite mappings - special stage chaos	emeralds
0001D9CA                            ; ---------------------------------------------------------------------------
0001D9CA 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D9CC 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D9CE 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D9D0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D9D2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D9D4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D9D6 01                         byte_1B96C:	dc.b 1
0001D9D7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D9DC 01                         byte_1B972:	dc.b 1
0001D9DD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D9E2 01                         byte_1B978:	dc.b 1
0001D9E3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D9E8 01                         byte_1B97E:	dc.b 1
0001D9E9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D9EE                            		even
0001D9EE                            ; ===========================================================================
0001D9EE                            ; ---------------------------------------------------------------------------
0001D9EE                            ; Object 09 - Sonic (special stage)
0001D9EE                            ; ---------------------------------------------------------------------------
0001D9EE                            
0001D9EE                            Obj09:					; XREF: Obj_Index
0001D9EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D9F2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D9F4 6100 0000                  		bsr.w	SS_FixCamera
0001D9F8 6000 0000                  		bra.w	DebugMode
0001D9FC                            ; ===========================================================================
0001D9FC                            
0001D9FC                            Obj09_Normal:
0001D9FC 7000                       		moveq	#0,d0
0001D9FE 1028 0024                  		move.b	$24(a0),d0
0001DA02 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DA06 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DA0A                            ; ===========================================================================
0001DA0A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DA0C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DA0E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DA10 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DA12                            ; ===========================================================================
0001DA12                            
0001DA12                            Obj09_Main:				; XREF: Obj09_Index
0001DA12 5428 0024                  		addq.b	#2,$24(a0)
0001DA16 117C 000E 0016             		move.b	#$E,$16(a0)
0001DA1C 117C 0007 0017             		move.b	#7,$17(a0)
0001DA22 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DA2A 317C 0780 0002             		move.w	#$780,2(a0)
0001DA30 117C 0004 0001             		move.b	#4,1(a0)
0001DA36 117C 0000 0018             		move.b	#0,$18(a0)
0001DA3C 117C 0018 001C             		move.b	#$18,$1C(a0)
0001DA42 08E8 0002 0022             		bset	#2,$22(a0)
0001DA48 08E8 0001 0022             		bset	#1,$22(a0)
0001DA4E                            
0001DA4E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DA4E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DA52 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DA54 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA5A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DA5C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DA62                            
0001DA62                            Obj09_NoDebug:
0001DA62 117C 0000 0030             		move.b	#0,$30(a0)
0001DA68 7000                       		moveq	#0,d0
0001DA6A 1028 0022                  		move.b	$22(a0),d0
0001DA6E 0240 0002                  		andi.w	#2,d0
0001DA72 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DA76 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DA7A 4EB9 0001 59F4             		jsr	LoadSonicDynPLC
0001DA80 4EF9 0000 F0CA             		jmp	DisplaySprite
0001DA86                            ; ===========================================================================
0001DA86 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DA88 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DA8A                            ; ===========================================================================
0001DA8A                            
0001DA8A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DA8A 6100 0000                  		bsr.w	Obj09_Jump
0001DA8E 6100 0000                  		bsr.w	Obj09_Move
0001DA92 6100 0000                  		bsr.w	Obj09_Fall
0001DA96 6000                       		bra.s	Obj09_Display
0001DA98                            ; ===========================================================================
0001DA98                            
0001DA98                            Obj09_InAir:				; XREF: Obj09_Modes
0001DA98 6100 0000                  		bsr.w	nullsub_2
0001DA9C 6100 0000                  		bsr.w	Obj09_Move
0001DAA0 6100 0000                  		bsr.w	Obj09_Fall
0001DAA4                            
0001DAA4                            Obj09_Display:				; XREF: Obj09_OnWall
0001DAA4 6100 0000                  		bsr.w	Obj09_ChkItems
0001DAA8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DAAC 4EB9 0000 F0B0             		jsr	SpeedToPos
0001DAB2 6100 0000                  		bsr.w	SS_FixCamera
0001DAB6 3038 F780                  		move.w	($FFFFF780).w,d0
0001DABA D078 F782                  		add.w	($FFFFF782).w,d0
0001DABE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DAC2 4EB9 0001 57B0             		jsr	Sonic_Animate
0001DAC8 4E75                       		rts	
0001DACA                            
0001DACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DACA                            
0001DACA                            
0001DACA                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DACA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DAD0 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DAD2 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DAD6                            
0001DAD6                            Obj09_ChkRight:
0001DAD6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DADC 6700                       		beq.s	loc_1BA78	; if not, branch
0001DADE 6100 0000                  		bsr.w	Obj09_MoveRight
0001DAE2                            
0001DAE2                            loc_1BA78:
0001DAE2 1038 F602                  		move.b	($FFFFF602).w,d0
0001DAE6 0200 000C                  		andi.b	#$C,d0
0001DAEA 6600                       		bne.s	loc_1BAA8
0001DAEC 3028 0014                  		move.w	$14(a0),d0
0001DAF0 6700                       		beq.s	loc_1BAA8
0001DAF2 6B00                       		bmi.s	loc_1BA9A
0001DAF4 0440 000C                  		subi.w	#$C,d0
0001DAF8 6400                       		bcc.s	loc_1BA94
0001DAFA 303C 0000                  		move.w	#0,d0
0001DAFE                            
0001DAFE                            loc_1BA94:
0001DAFE 3140 0014                  		move.w	d0,$14(a0)
0001DB02 6000                       		bra.s	loc_1BAA8
0001DB04                            ; ===========================================================================
0001DB04                            
0001DB04                            loc_1BA9A:
0001DB04 0640 000C                  		addi.w	#$C,d0
0001DB08 6400                       		bcc.s	loc_1BAA4
0001DB0A 303C 0000                  		move.w	#0,d0
0001DB0E                            
0001DB0E                            loc_1BAA4:
0001DB0E 3140 0014                  		move.w	d0,$14(a0)
0001DB12                            
0001DB12                            loc_1BAA8:
0001DB12 1038 F780                  		move.b	($FFFFF780).w,d0
0001DB16 0600 0020                  		addi.b	#$20,d0
0001DB1A 0200 00C0                  		andi.b	#$C0,d0
0001DB1E 4400                       		neg.b	d0
0001DB20 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001DB26 C3E8 0014                  		muls.w	$14(a0),d1
0001DB2A D3A8 0008                  		add.l	d1,8(a0)
0001DB2E C1E8 0014                  		muls.w	$14(a0),d0
0001DB32 D1A8 000C                  		add.l	d0,$C(a0)
0001DB36 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DB3A 2428 000C                  		move.l	$C(a0),d2
0001DB3E 2628 0008                  		move.l	8(a0),d3
0001DB42 6100 0000                  		bsr.w	sub_1BCE8
0001DB46 6700                       		beq.s	loc_1BAF2
0001DB48 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DB4C 93A8 0008                  		sub.l	d1,8(a0)
0001DB50 91A8 000C                  		sub.l	d0,$C(a0)
0001DB54 317C 0000 0014             		move.w	#0,$14(a0)
0001DB5A 4E75                       		rts	
0001DB5C                            ; ===========================================================================
0001DB5C                            
0001DB5C                            loc_1BAF2:
0001DB5C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DB60 4E75                       		rts	
0001DB62                            ; End of function Obj09_Move
0001DB62                            
0001DB62                            
0001DB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB62                            
0001DB62                            
0001DB62                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DB62 08E8 0000 0022             		bset	#0,$22(a0)
0001DB68 3028 0014                  		move.w	$14(a0),d0
0001DB6C 6700                       		beq.s	loc_1BB06
0001DB6E 6A00                       		bpl.s	loc_1BB1A
0001DB70                            
0001DB70                            loc_1BB06:
0001DB70 0440 000C                  		subi.w	#$C,d0
0001DB74 0C40 F800                  		cmpi.w	#-$800,d0
0001DB78 6E00                       		bgt.s	loc_1BB14
0001DB7A 303C F800                  		move.w	#-$800,d0
0001DB7E                            
0001DB7E                            loc_1BB14:
0001DB7E 3140 0014                  		move.w	d0,$14(a0)
0001DB82 4E75                       		rts	
0001DB84                            ; ===========================================================================
0001DB84                            
0001DB84                            loc_1BB1A:
0001DB84 0440 0040                  		subi.w	#$40,d0
0001DB88 6400                       		bcc.s	loc_1BB22
0001DB8A 4E71                       		nop	
0001DB8C                            
0001DB8C                            loc_1BB22:
0001DB8C 3140 0014                  		move.w	d0,$14(a0)
0001DB90 4E75                       		rts	
0001DB92                            ; End of function Obj09_MoveLeft
0001DB92                            
0001DB92                            
0001DB92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB92                            
0001DB92                            
0001DB92                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DB92 08A8 0000 0022             		bclr	#0,$22(a0)
0001DB98 3028 0014                  		move.w	$14(a0),d0
0001DB9C 6B00                       		bmi.s	loc_1BB48
0001DB9E 0640 000C                  		addi.w	#$C,d0
0001DBA2 0C40 0800                  		cmpi.w	#$800,d0
0001DBA6 6D00                       		blt.s	loc_1BB42
0001DBA8 303C 0800                  		move.w	#$800,d0
0001DBAC                            
0001DBAC                            loc_1BB42:
0001DBAC 3140 0014                  		move.w	d0,$14(a0)
0001DBB0 6000                       		bra.s	locret_1BB54
0001DBB2                            ; ===========================================================================
0001DBB2                            
0001DBB2                            loc_1BB48:
0001DBB2 0640 0040                  		addi.w	#$40,d0
0001DBB6 6400                       		bcc.s	loc_1BB50
0001DBB8 4E71                       		nop	
0001DBBA                            
0001DBBA                            loc_1BB50:
0001DBBA 3140 0014                  		move.w	d0,$14(a0)
0001DBBE                            
0001DBBE                            locret_1BB54:
0001DBBE 4E75                       		rts	
0001DBC0                            ; End of function Obj09_MoveRight
0001DBC0                            
0001DBC0                            
0001DBC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBC0                            
0001DBC0                            
0001DBC0                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DBC0 1038 F603                  		move.b	($FFFFF603).w,d0
0001DBC4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DBC8 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DBCA 1038 F780                  		move.b	($FFFFF780).w,d0
0001DBCE 0200 00FC                  		andi.b	#$FC,d0
0001DBD2 4400                       		neg.b	d0
0001DBD4 0400 0040                  		subi.b	#$40,d0
0001DBD8 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001DBDE C3FC 0680                  		muls.w	#$680,d1
0001DBE2 E081                       		asr.l	#8,d1
0001DBE4 3141 0010                  		move.w	d1,$10(a0)
0001DBE8 C1FC 0680                  		muls.w	#$680,d0
0001DBEC E080                       		asr.l	#8,d0
0001DBEE 3140 0012                  		move.w	d0,$12(a0)
0001DBF2 08E8 0001 0022             		bset	#1,$22(a0)
0001DBF8 303C 00A0                  		move.w	#$A0,d0
0001DBFC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DC02                            
0001DC02                            Obj09_NoJump:
0001DC02 4E75                       		rts	
0001DC04                            ; End of function Obj09_Jump
0001DC04                            
0001DC04                            
0001DC04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC04                            
0001DC04                            
0001DC04                            nullsub_2:				; XREF: Obj09_InAir
0001DC04 4E75                       		rts	
0001DC06                            ; End of function nullsub_2
0001DC06                            
0001DC06                            ; ===========================================================================
0001DC06                            ; ---------------------------------------------------------------------------
0001DC06                            ; unused subroutine to limit Sonic's upward vertical speed
0001DC06                            ; ---------------------------------------------------------------------------
0001DC06 323C FC00                  		move.w	#-$400,d1
0001DC0A B268 0012                  		cmp.w	$12(a0),d1
0001DC0E 6F00                       		ble.s	locret_1BBB4
0001DC10 1038 F602                  		move.b	($FFFFF602).w,d0
0001DC14 0200 0070                  		andi.b	#$70,d0
0001DC18 6600                       		bne.s	locret_1BBB4
0001DC1A 3141 0012                  		move.w	d1,$12(a0)
0001DC1E                            
0001DC1E                            locret_1BBB4:
0001DC1E 4E75                       		rts	
0001DC20                            ; ---------------------------------------------------------------------------
0001DC20                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DC20                            ; ---------------------------------------------------------------------------
0001DC20                            
0001DC20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC20                            
0001DC20                            
0001DC20                            SS_FixCamera:				; XREF: Obj09
0001DC20 3428 000C                  		move.w	$C(a0),d2
0001DC24 3628 0008                  		move.w	8(a0),d3
0001DC28 3038 F700                  		move.w	($FFFFF700).w,d0
0001DC2C 0443 00A0                  		subi.w	#$A0,d3
0001DC30 6500                       		bcs.s	loc_1BBCE
0001DC32 9043                       		sub.w	d3,d0
0001DC34 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DC38                            
0001DC38                            loc_1BBCE:
0001DC38 3038 F704                  		move.w	($FFFFF704).w,d0
0001DC3C 0442 0070                  		subi.w	#$70,d2
0001DC40 6500                       		bcs.s	locret_1BBDE
0001DC42 9042                       		sub.w	d2,d0
0001DC44 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DC48                            
0001DC48                            locret_1BBDE:
0001DC48 4E75                       		rts	
0001DC4A                            ; End of function SS_FixCamera
0001DC4A                            
0001DC4A                            ; ===========================================================================
0001DC4A                            
0001DC4A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DC4A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DC50 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DC56 6600                       		bne.s	loc_1BBF4
0001DC58 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DC5E                            
0001DC5E                            loc_1BBF4:
0001DC5E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DC64 6D00                       		blt.s	loc_1BC12
0001DC66 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DC6C 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DC72 5428 0024                  		addq.b	#2,$24(a0)
0001DC76 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DC7C                            
0001DC7C                            loc_1BC12:
0001DC7C 3038 F780                  		move.w	($FFFFF780).w,d0
0001DC80 D078 F782                  		add.w	($FFFFF782).w,d0
0001DC84 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DC88 4EB9 0001 57B0             		jsr	Sonic_Animate
0001DC8E 4EB9 0001 59F4             		jsr	LoadSonicDynPLC
0001DC94 6100 FF8A                  		bsr.w	SS_FixCamera
0001DC98 4EF9 0000 F0CA             		jmp	DisplaySprite
0001DC9E                            ; ===========================================================================
0001DC9E                            
0001DC9E                            Obj09_Exit2:				; XREF: Obj09_Index
0001DC9E 5368 0038                  		subq.w	#1,$38(a0)
0001DCA2 6600                       		bne.s	loc_1BC40
0001DCA4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DCAA                            
0001DCAA                            loc_1BC40:
0001DCAA 4EB9 0001 57B0             		jsr	Sonic_Animate
0001DCB0 4EB9 0001 59F4             		jsr	LoadSonicDynPLC
0001DCB6 6100 FF68                  		bsr.w	SS_FixCamera
0001DCBA 4EF9 0000 F0CA             		jmp	DisplaySprite
0001DCC0                            
0001DCC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCC0                            
0001DCC0                            
0001DCC0                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DCC0 2428 000C                  		move.l	$C(a0),d2
0001DCC4 2628 0008                  		move.l	8(a0),d3
0001DCC8 1038 F780                  		move.b	($FFFFF780).w,d0
0001DCCC 0200 00FC                  		andi.b	#$FC,d0
0001DCD0 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001DCD6 3828 0010                  		move.w	$10(a0),d4
0001DCDA 48C4                       		ext.l	d4
0001DCDC E184                       		asl.l	#8,d4
0001DCDE C1FC 002A                  		muls.w	#$2A,d0
0001DCE2 D084                       		add.l	d4,d0
0001DCE4 3828 0012                  		move.w	$12(a0),d4
0001DCE8 48C4                       		ext.l	d4
0001DCEA E184                       		asl.l	#8,d4
0001DCEC C3FC 002A                  		muls.w	#$2A,d1
0001DCF0 D284                       		add.l	d4,d1
0001DCF2 D680                       		add.l	d0,d3
0001DCF4 6100 0000                  		bsr.w	sub_1BCE8
0001DCF8 6700                       		beq.s	loc_1BCB0
0001DCFA 9680                       		sub.l	d0,d3
0001DCFC 7000                       		moveq	#0,d0
0001DCFE 3140 0010                  		move.w	d0,$10(a0)
0001DD02 08A8 0001 0022             		bclr	#1,$22(a0)
0001DD08 D481                       		add.l	d1,d2
0001DD0A 6100 0000                  		bsr.w	sub_1BCE8
0001DD0E 6700                       		beq.s	loc_1BCC6
0001DD10 9481                       		sub.l	d1,d2
0001DD12 7200                       		moveq	#0,d1
0001DD14 3141 0012                  		move.w	d1,$12(a0)
0001DD18 4E75                       		rts	
0001DD1A                            ; ===========================================================================
0001DD1A                            
0001DD1A                            loc_1BCB0:
0001DD1A D481                       		add.l	d1,d2
0001DD1C 6100 0000                  		bsr.w	sub_1BCE8
0001DD20 6700                       		beq.s	loc_1BCD4
0001DD22 9481                       		sub.l	d1,d2
0001DD24 7200                       		moveq	#0,d1
0001DD26 3141 0012                  		move.w	d1,$12(a0)
0001DD2A 08A8 0001 0022             		bclr	#1,$22(a0)
0001DD30                            
0001DD30                            loc_1BCC6:
0001DD30 E080                       		asr.l	#8,d0
0001DD32 E081                       		asr.l	#8,d1
0001DD34 3140 0010                  		move.w	d0,$10(a0)
0001DD38 3141 0012                  		move.w	d1,$12(a0)
0001DD3C 4E75                       		rts	
0001DD3E                            ; ===========================================================================
0001DD3E                            
0001DD3E                            loc_1BCD4:
0001DD3E E080                       		asr.l	#8,d0
0001DD40 E081                       		asr.l	#8,d1
0001DD42 3140 0010                  		move.w	d0,$10(a0)
0001DD46 3141 0012                  		move.w	d1,$12(a0)
0001DD4A 08E8 0001 0022             		bset	#1,$22(a0)
0001DD50 4E75                       		rts	
0001DD52                            ; End of function Obj09_Fall
0001DD52                            
0001DD52                            
0001DD52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD52                            
0001DD52                            
0001DD52                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DD52 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DD58 7800                       		moveq	#0,d4
0001DD5A 4842                       		swap	d2
0001DD5C 3802                       		move.w	d2,d4
0001DD5E 4842                       		swap	d2
0001DD60 0644 0044                  		addi.w	#$44,d4
0001DD64 88FC 0018                  		divu.w	#$18,d4
0001DD68 C8FC 0080                  		mulu.w	#$80,d4
0001DD6C D3C4                       		adda.l	d4,a1
0001DD6E 7800                       		moveq	#0,d4
0001DD70 4843                       		swap	d3
0001DD72 3803                       		move.w	d3,d4
0001DD74 4843                       		swap	d3
0001DD76 0644 0014                  		addi.w	#$14,d4
0001DD7A 88FC 0018                  		divu.w	#$18,d4
0001DD7E D2C4                       		adda.w	d4,a1
0001DD80 7A00                       		moveq	#0,d5
0001DD82 1819                       		move.b	(a1)+,d4
0001DD84 6100                       		bsr.s	sub_1BD30
0001DD86 1819                       		move.b	(a1)+,d4
0001DD88 6100                       		bsr.s	sub_1BD30
0001DD8A D2FC 007E                  		adda.w	#$7E,a1
0001DD8E 1819                       		move.b	(a1)+,d4
0001DD90 6100                       		bsr.s	sub_1BD30
0001DD92 1819                       		move.b	(a1)+,d4
0001DD94 6100                       		bsr.s	sub_1BD30
0001DD96 4A05                       		tst.b	d5
0001DD98 4E75                       		rts	
0001DD9A                            ; End of function sub_1BCE8
0001DD9A                            
0001DD9A                            
0001DD9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD9A                            
0001DD9A                            
0001DD9A                            sub_1BD30:				; XREF: sub_1BCE8
0001DD9A 6700                       		beq.s	locret_1BD44
0001DD9C 0C04 0028                  		cmpi.b	#$28,d4
0001DDA0 6700                       		beq.s	locret_1BD44
0001DDA2 0C04 003A                  		cmpi.b	#$3A,d4
0001DDA6 6500                       		bcs.s	loc_1BD46
0001DDA8 0C04 004B                  		cmpi.b	#$4B,d4
0001DDAC 6400                       		bcc.s	loc_1BD46
0001DDAE                            
0001DDAE                            locret_1BD44:
0001DDAE 4E75                       		rts	
0001DDB0                            ; ===========================================================================
0001DDB0                            
0001DDB0                            loc_1BD46:
0001DDB0 1144 0030                  		move.b	d4,$30(a0)
0001DDB4 2149 0032                  		move.l	a1,$32(a0)
0001DDB8 7AFF                       		moveq	#-1,d5
0001DDBA 4E75                       		rts	
0001DDBC                            ; End of function sub_1BD30
0001DDBC                            
0001DDBC                            
0001DDBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDBC                            
0001DDBC                            
0001DDBC                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DDBC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DDC2 7800                       		moveq	#0,d4
0001DDC4 3828 000C                  		move.w	$C(a0),d4
0001DDC8 0644 0050                  		addi.w	#$50,d4
0001DDCC 88FC 0018                  		divu.w	#$18,d4
0001DDD0 C8FC 0080                  		mulu.w	#$80,d4
0001DDD4 D3C4                       		adda.l	d4,a1
0001DDD6 7800                       		moveq	#0,d4
0001DDD8 3828 0008                  		move.w	8(a0),d4
0001DDDC 0644 0020                  		addi.w	#$20,d4
0001DDE0 88FC 0018                  		divu.w	#$18,d4
0001DDE4 D2C4                       		adda.w	d4,a1
0001DDE6 1811                       		move.b	(a1),d4
0001DDE8 6600                       		bne.s	Obj09_ChkCont
0001DDEA 4A28 003A                  		tst.b	$3A(a0)
0001DDEE 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DDF2 7800                       		moveq	#0,d4
0001DDF4 4E75                       		rts	
0001DDF6                            ; ===========================================================================
0001DDF6                            
0001DDF6                            Obj09_ChkCont:
0001DDF6 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DDFA 6600                       		bne.s	Obj09_Chk1Up
0001DDFC 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DE00 6600                       		bne.s	Obj09_GetCont
0001DE02 14BC 0001                  		move.b	#1,(a2)
0001DE06 2549 0004                  		move.l	a1,4(a2)
0001DE0A                            
0001DE0A                            Obj09_GetCont:
0001DE0A 4EB9 0000 B71E             		jsr	CollectRing
0001DE10 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DE16 6500                       		bcs.s	Obj09_NoCont
0001DE18 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DE1E 6600                       		bne.s	Obj09_NoCont
0001DE20 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DE24 303C 00BF                  		move.w	#$BF,d0
0001DE28 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra continue sound
0001DE2E                            
0001DE2E                            Obj09_NoCont:
0001DE2E 7800                       		moveq	#0,d4
0001DE30 4E75                       		rts	
0001DE32                            ; ===========================================================================
0001DE32                            
0001DE32                            Obj09_Chk1Up:
0001DE32 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DE36 6600                       		bne.s	Obj09_ChkEmer
0001DE38 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001DE3C 6600                       		bne.s	Obj09_Get1Up
0001DE3E 14BC 0003                  		move.b	#3,(a2)
0001DE42 2549 0004                  		move.l	a1,4(a2)
0001DE46                            
0001DE46                            Obj09_Get1Up:
0001DE46 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DE4A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DE4E 303C 0088                  		move.w	#$88,d0
0001DE52 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra life music
0001DE58 7800                       		moveq	#0,d4
0001DE5A 4E75                       		rts	
0001DE5C                            ; ===========================================================================
0001DE5C                            
0001DE5C                            Obj09_ChkEmer:
0001DE5C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DE60 6500                       		bcs.s	Obj09_ChkGhost
0001DE62 0C04 0040                  		cmpi.b	#$40,d4
0001DE66 6200                       		bhi.s	Obj09_ChkGhost
0001DE68 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001DE6C 6600                       		bne.s	Obj09_GetEmer
0001DE6E 14BC 0005                  		move.b	#5,(a2)
0001DE72 2549 0004                  		move.l	a1,4(a2)
0001DE76                            
0001DE76                            Obj09_GetEmer:
0001DE76 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DE7C 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DE7E 0404 003B                  		subi.b	#$3B,d4
0001DE82 7000                       		moveq	#0,d0
0001DE84 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DE88 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DE8C 1584 0000                  		move.b	d4,(a2,d0.w)
0001DE90 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DE94                            
0001DE94                            Obj09_NoEmer:
0001DE94 303C 0093                  		move.w	#$93,d0
0001DE98 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play emerald music
0001DE9E 7800                       		moveq	#0,d4
0001DEA0 4E75                       		rts	
0001DEA2                            ; ===========================================================================
0001DEA2                            
0001DEA2                            Obj09_ChkGhost:
0001DEA2 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DEA6 6600                       		bne.s	Obj09_ChkGhostTag
0001DEA8 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DEAE                            
0001DEAE                            Obj09_ChkGhostTag:
0001DEAE 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DEB2 6600                       		bne.s	Obj09_NoGhost
0001DEB4 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DEBA 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DEBC 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DEC2                            
0001DEC2                            Obj09_NoGhost:
0001DEC2 78FF                       		moveq	#-1,d4
0001DEC4 4E75                       		rts	
0001DEC6                            ; ===========================================================================
0001DEC6                            
0001DEC6                            Obj09_MakeGhostSolid:
0001DEC6 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DECC 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DECE 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DED4 723F                       		moveq	#$3F,d1
0001DED6                            
0001DED6                            Obj09_GhostLoop2:
0001DED6 743F                       		moveq	#$3F,d2
0001DED8                            
0001DED8                            Obj09_GhostLoop:
0001DED8 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DEDC 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DEDE 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DEE2                            
0001DEE2                            Obj09_NoReplace:
0001DEE2 5249                       		addq.w	#1,a1
0001DEE4 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DEE8 43E9 0040                  		lea	$40(a1),a1
0001DEEC 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DEF0                            
0001DEF0                            Obj09_GhostNotSolid:
0001DEF0 4228 003A                  		clr.b	$3A(a0)
0001DEF4 7800                       		moveq	#0,d4
0001DEF6 4E75                       		rts	
0001DEF8                            ; End of function Obj09_ChkItems
0001DEF8                            
0001DEF8                            
0001DEF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEF8                            
0001DEF8                            
0001DEF8                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DEF8 1028 0030                  		move.b	$30(a0),d0
0001DEFC 6600                       		bne.s	Obj09_ChkBumper
0001DEFE 5328 0036                  		subq.b	#1,$36(a0)
0001DF02 6A00                       		bpl.s	loc_1BEA0
0001DF04 117C 0000 0036             		move.b	#0,$36(a0)
0001DF0A                            
0001DF0A                            loc_1BEA0:
0001DF0A 5328 0037                  		subq.b	#1,$37(a0)
0001DF0E 6A00                       		bpl.s	locret_1BEAC
0001DF10 117C 0000 0037             		move.b	#0,$37(a0)
0001DF16                            
0001DF16                            locret_1BEAC:
0001DF16 4E75                       		rts	
0001DF18                            ; ===========================================================================
0001DF18                            
0001DF18                            Obj09_ChkBumper:
0001DF18 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DF1C 6600                       		bne.s	Obj09_GOAL
0001DF1E 2228 0032                  		move.l	$32(a0),d1
0001DF22 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DF28 3401                       		move.w	d1,d2
0001DF2A 0241 007F                  		andi.w	#$7F,d1
0001DF2E C2FC 0018                  		mulu.w	#$18,d1
0001DF32 0441 0014                  		subi.w	#$14,d1
0001DF36 EE4A                       		lsr.w	#7,d2
0001DF38 0242 007F                  		andi.w	#$7F,d2
0001DF3C C4FC 0018                  		mulu.w	#$18,d2
0001DF40 0442 0044                  		subi.w	#$44,d2
0001DF44 9268 0008                  		sub.w	8(a0),d1
0001DF48 9468 000C                  		sub.w	$C(a0),d2
0001DF4C 4EB9 0000 2E4A             		jsr	(CalcAngle).l
0001DF52 4EB9 0000 2B7C             		jsr	(CalcSine).l
0001DF58 C3FC F900                  		muls.w	#-$700,d1
0001DF5C E081                       		asr.l	#8,d1
0001DF5E 3141 0010                  		move.w	d1,$10(a0)
0001DF62 C1FC F900                  		muls.w	#-$700,d0
0001DF66 E080                       		asr.l	#8,d0
0001DF68 3140 0012                  		move.w	d0,$12(a0)
0001DF6C 08E8 0001 0022             		bset	#1,$22(a0)
0001DF72 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001DF76 6600                       		bne.s	Obj09_BumpSnd
0001DF78 14BC 0002                  		move.b	#2,(a2)
0001DF7C 2028 0032                  		move.l	$32(a0),d0
0001DF80 5380                       		subq.l	#1,d0
0001DF82 2540 0004                  		move.l	d0,4(a2)
0001DF86                            
0001DF86                            Obj09_BumpSnd:
0001DF86 303C 00B4                  		move.w	#$B4,d0
0001DF8A 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play bumper sound
0001DF90                            ; ===========================================================================
0001DF90                            
0001DF90                            Obj09_GOAL:
0001DF90 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001DF94 6600                       		bne.s	Obj09_UPblock
0001DF96 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001DF9A 303C 00A8                  		move.w	#$A8,d0		; change item
0001DF9E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001DFA4 4E75                       		rts	
0001DFA6                            ; ===========================================================================
0001DFA6                            
0001DFA6                            Obj09_UPblock:
0001DFA6 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001DFAA 6600                       		bne.s	Obj09_DOWNblock
0001DFAC 4A28 0036                  		tst.b	$36(a0)
0001DFB0 6600 0000                  		bne.w	Obj09_NoGlass
0001DFB4 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DFBA 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DFC0 6700                       		beq.s	Obj09_UPsnd
0001DFC2 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001DFC6 2268 0032                  		movea.l	$32(a0),a1
0001DFCA 5389                       		subq.l	#1,a1
0001DFCC 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001DFD0                            
0001DFD0                            Obj09_UPsnd:
0001DFD0 303C 00A9                  		move.w	#$A9,d0
0001DFD4 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DFDA                            ; ===========================================================================
0001DFDA                            
0001DFDA                            Obj09_DOWNblock:
0001DFDA 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001DFDE 6600                       		bne.s	Obj09_Rblock
0001DFE0 4A28 0036                  		tst.b	$36(a0)
0001DFE4 6600 0000                  		bne.w	Obj09_NoGlass
0001DFE8 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DFEE 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DFF4 6600                       		bne.s	Obj09_DOWNsnd
0001DFF6 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001DFFA 2268 0032                  		movea.l	$32(a0),a1
0001DFFE 5389                       		subq.l	#1,a1
0001E000 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E004                            
0001E004                            Obj09_DOWNsnd:
0001E004 303C 00A9                  		move.w	#$A9,d0
0001E008 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E00E                            ; ===========================================================================
0001E00E                            
0001E00E                            Obj09_Rblock:
0001E00E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E012 6600                       		bne.s	Obj09_ChkGlass
0001E014 4A28 0037                  		tst.b	$37(a0)
0001E018 6600 0000                  		bne.w	Obj09_NoGlass
0001E01C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E022 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001E026 6600                       		bne.s	Obj09_RevStage
0001E028 14BC 0004                  		move.b	#4,(a2)
0001E02C 2028 0032                  		move.l	$32(a0),d0
0001E030 5380                       		subq.l	#1,d0
0001E032 2540 0004                  		move.l	d0,4(a2)
0001E036                            
0001E036                            Obj09_RevStage:
0001E036 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E03A 303C 00A9                  		move.w	#$A9,d0
0001E03E 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play sound
0001E044                            ; ===========================================================================
0001E044                            
0001E044                            Obj09_ChkGlass:
0001E044 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E048 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E04A 0C00 002E                  		cmpi.b	#$2E,d0
0001E04E 6700                       		beq.s	Obj09_Glass
0001E050 0C00 002F                  		cmpi.b	#$2F,d0
0001E054 6700                       		beq.s	Obj09_Glass
0001E056 0C00 0030                  		cmpi.b	#$30,d0
0001E05A 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001E05C                            
0001E05C                            Obj09_Glass:
0001E05C 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001E060 6600                       		bne.s	Obj09_GlassSnd
0001E062 14BC 0006                  		move.b	#6,(a2)
0001E066 2268 0032                  		movea.l	$32(a0),a1
0001E06A 5389                       		subq.l	#1,a1
0001E06C 2549 0004                  		move.l	a1,4(a2)
0001E070 1011                       		move.b	(a1),d0
0001E072 5200                       		addq.b	#1,d0		; change glass type when touched
0001E074 0C00 0030                  		cmpi.b	#$30,d0
0001E078 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E07A 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E07C                            
0001E07C                            Obj09_GlassUpdate:
0001E07C 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E080                            
0001E080                            Obj09_GlassSnd:
0001E080 303C 00BA                  		move.w	#$BA,d0
0001E084 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E08A                            ; ===========================================================================
0001E08A                            
0001E08A                            Obj09_NoGlass:
0001E08A 4E75                       		rts	
0001E08C                            ; End of function Obj09_ChkItems2
0001E08C                            
0001E08C                            ; ===========================================================================
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            ; Object 10 - blank
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            
0001E08C                            Obj10:					; XREF: Obj_Index
0001E08C 4E75                       		rts	
0001E08E                            
0001E08E                            ; ===========================================================================
0001E08E                            ; ---------------------------------------------------------------------------
0001E08E                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001E08E                            ; ---------------------------------------------------------------------------
0001E08E                            
0001E08E                            Obj03:
0001E08E 7000                       		moveq	#0,d0
0001E090 1028 0024                  		move.b	$24(a0),d0
0001E094 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001E098 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001E09C 3028 0008                  		move.w	8(a0),d0
0001E0A0 0240 FF80                  		andi.w	#$FF80,d0
0001E0A4 3238 F700                  		move.w	($FFFFF700).w,d1
0001E0A8 0441 0080                  		subi.w	#$80,d1
0001E0AC 0241 FF80                  		andi.w	#$FF80,d1
0001E0B0 9041                       		sub.w	d1,d0
0001E0B2 0C40 0280                  		cmpi.w	#$280,d0
0001E0B6 6200                       		bhi.s	Obj03_MarkChkGone
0001E0B8 4E75                       		rts
0001E0BA                            
0001E0BA                            Obj03_MarkChkGone:
0001E0BA 4EF9 0001 11A2             		jmp	Mark_ChkGone
0001E0C0                            ; ===========================================================================
0001E0C0                            ; ---------------------------------------------------------------------------
0001E0C0 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001E0C2 0000                       		dc.w Obj03_MainX-Obj03_Index
0001E0C4 0000                       		dc.w Obj03_MainY-Obj03_Index
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6                            ; ===========================================================================
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6                            ; Initiation
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6                            
0001E0C6                            Obj03_Init:
0001E0C6 5428 0024                  		addq.b	#2,$24(a0)
0001E0CA 217C 0000 0000 0004        		move.l	#$00000000,$04(a0)
0001E0D2 317C 26BC 0002             		move.w	#$26BC,$02(a0)
0001E0D8 0028 0004 0001             		ori.b	#4,$01(a0)
0001E0DE 117C 0010 0019             		move.b	#$10,$19(a0)
0001E0E4 117C 0005 0018             		move.b	#5,$18(a0)
0001E0EA 1028 0028                  		move.b	$28(a0),d0
0001E0EE 0800 0002                  		btst	#2,d0
0001E0F2 6700                       		beq.s	Obj03_Init_CheckX
0001E0F4                            
0001E0F4                            ;Obj03_Init_CheckY:
0001E0F4 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001E0F8 0240 0007                  		andi.w	#7,d0
0001E0FC 1140 001A                  		move.b	d0,$1A(a0)
0001E100 0240 0003                  		andi.w	#3,d0
0001E104 D040                       		add.w	d0,d0
0001E106 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E10C 3228 000C                  		move.w	$0C(a0),d1
0001E110 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E114 B269 000C                  		cmp.w	$0C(a1),d1
0001E118 6400                       		bcc.s	Obj03_Init_Next
0001E11A 117C 0001 0034             		move.b	#1,$34(a0)
0001E120                            Obj03_Init_Next:
0001E120                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E120                            	;	cmp.w	$0C(a1),d1
0001E120                            	;	bcc.s	+
0001E120                            	;	move.b	#1,$35(a0)
0001E120                            ;+
0001E120 6000 0000                  		bra.w	Obj03_MainY
0001E124                            ; ===========================================================================
0001E124                            word_1FD68:
0001E124 0020                       	dc.w  $020
0001E126 0040                       	dc.w  $040	; 1
0001E128 0080                       	dc.w  $080	; 2
0001E12A 0100                       	dc.w  $100	; 3
0001E12C                            ; ===========================================================================
0001E12C                            ; loc_1FD70:
0001E12C                            Obj03_Init_CheckX:
0001E12C 0240 0003                  		andi.w	#3,d0
0001E130 1140 001A                  		move.b	d0,$1A(a0)
0001E134 D040                       		add.w	d0,d0
0001E136 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E13C 3228 0008                  		move.w	$08(a0),d1
0001E140 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E144 B269 0008                  		cmp.w	$08(a1),d1
0001E148 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001E14A 117C 0001 0034             		move.b	#1,$34(a0)
0001E150                            Obj03_Init_CheckX_Next:
0001E150                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E150                            	;	cmp.w	$08(a1),d1
0001E150                            	;	bcc.s	+
0001E150                            	;	move.b	#1,$35(a0)
0001E150                            ;+
0001E150                            
0001E150                            Obj03_MainX:
0001E150 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E154 6600 0000                  		bne.w	return_1FEAC
0001E158 3228 0008                  		move.w	$08(a0),d1
0001E15C 45E8 0034                  		lea	$34(a0),a2
0001E160 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E164                            ;		bsr.s	+
0001E164                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E164                            
0001E164                            ;+
0001E164 4A1A                       		tst.b	(a2)+
0001E166 6600                       		bne.s	Obj03_MainX_Alt
0001E168 B269 0008                  		cmp.w	$08(a1),d1
0001E16C 6200 0000                  		bhi.w	return_1FEAC
0001E170 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E176 3428 000C                  		move.w	$0C(a0),d2
0001E17A 3602                       		move.w	d2,d3
0001E17C 3828 0032                  		move.w	$32(a0),d4
0001E180 9444                       		sub.w	d4,d2
0001E182 D644                       		add.w	d4,d3
0001E184 3829 000C                  		move.w	$0C(a1),d4
0001E188 B842                       		cmp.w	d2,d4
0001E18A 6D00 0000                  		blt.w	return_1FEAC
0001E18E B843                       		cmp.w	d3,d4
0001E190 6C00 0000                  		bge.w	return_1FEAC
0001E194 1028 0028                  		move.b	$28(a0),d0
0001E198 6A00                       		bpl.s	Obj03_ICX_B1
0001E19A 0829 0001 002B             		btst	#1,$2B(a1)
0001E1A0 6600 0000                  		bne.w	return_1FEAC
0001E1A4                            
0001E1A4                            Obj03_ICX_B1:
0001E1A4 0828 0000 0001             		btst	#0,$01(a0)
0001E1AA 6600                       		bne.s	Obj03_ICX_B2
0001E1AC 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E1B2                            	;	move.b	#$C,$3E(a1)
0001E1B2                            	;	move.b	#$D,$3F(a1)
0001E1B2 0800 0003                  		btst	#3,d0
0001E1B6 6700                       		beq.s	Obj03_ICX_B2
0001E1B8 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E1BE                            	;	move.b	#$E,$3E(a1)
0001E1BE                            	;	move.b	#$F,$3F(a1)
0001E1BE                            
0001E1BE                            Obj03_ICX_B2:
0001E1BE 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E1C4 0800 0005                  		btst	#5,d0
0001E1C8 6700                       		beq.s	return_1FEAC
0001E1CA 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E1D0 6000                       		bra.s	return_1FEAC
0001E1D2                            ; ===========================================================================
0001E1D2                            
0001E1D2                            Obj03_MainX_Alt:
0001E1D2 B269 0008                  		cmp.w	$08(a1),d1
0001E1D6 6300 0000                  		bls.w	return_1FEAC
0001E1DA 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E1E0 3428 000C                  		move.w	$0C(a0),d2
0001E1E4 3602                       		move.w	d2,d3
0001E1E6 3828 0032                  		move.w	$32(a0),d4
0001E1EA 9444                       		sub.w	d4,d2
0001E1EC D644                       		add.w	d4,d3
0001E1EE 3829 000C                  		move.w	$0C(a1),d4
0001E1F2 B842                       		cmp.w	d2,d4
0001E1F4 6D00 0000                  		blt.w	return_1FEAC
0001E1F8 B843                       		cmp.w	d3,d4
0001E1FA 6C00 0000                  		bge.w	return_1FEAC
0001E1FE 1028 0028                  		move.b	$28(a0),d0
0001E202 6A00                       		bpl.s	Obj03_MXA_B1
0001E204 0829 0001 002B             		btst	#1,$2B(a1)
0001E20A 6600 0000                  		bne.w	return_1FEAC
0001E20E                            
0001E20E                            Obj03_MXA_B1:
0001E20E 0828 0000 0001             		btst	#0,$01(a0)
0001E214 6600                       		bne.s	Obj03_MXA_B2
0001E216 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E21C                            	;	move.b	#$C,$3E(a1)
0001E21C                            	;	move.b	#$D,$3F(a1)
0001E21C 0800 0004                  		btst	#4,d0
0001E220 6700                       		beq.s	Obj03_MXA_B2
0001E222 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E228                            	;	move.b	#$E,$3E(a1)
0001E228                            	;	move.b	#$F,$3F(a1)
0001E228                            
0001E228                            Obj03_MXA_B2:
0001E228 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E22E 0800 0006                  		btst	#6,d0
0001E232 6700                       		beq.s	return_1FEAC
0001E234 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E23A                            
0001E23A                            return_1FEAC:
0001E23A 4E75                       		rts
0001E23C                            
0001E23C                            ; ===========================================================================
0001E23C                            
0001E23C                            Obj03_MainY:
0001E23C 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E240 6600 0000                  		bne.w	return_1FFB6
0001E244 3228 000C                  		move.w	$0C(a0),d1
0001E248 45E8 0034                  		lea	$34(a0),a2
0001E24C 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E250                            ;		bsr.s	+
0001E250                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E250                            
0001E250                            ;+
0001E250 4A1A                       		tst.b	(a2)+
0001E252 6600                       		bne.s	Obj03_MainY_Alt
0001E254 B269 000C                  		cmp.w	$0C(a1),d1
0001E258 6200 0000                  		bhi.w	return_1FFB6
0001E25C 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E262 3428 0008                  		move.w	$08(a0),d2
0001E266 3602                       		move.w	d2,d3
0001E268 3828 0032                  		move.w	$32(a0),d4
0001E26C 9444                       		sub.w	d4,d2
0001E26E D644                       		add.w	d4,d3
0001E270 3829 0008                  		move.w	$08(a1),d4
0001E274 B842                       		cmp.w	d2,d4
0001E276 6D00 0000                  		blt.w	return_1FFB6
0001E27A B843                       		cmp.w	d3,d4
0001E27C 6C00 0000                  		bge.w	return_1FFB6
0001E280 1028 0028                  		move.b	$28(a0),d0
0001E284 6A00                       		bpl.s	Obj03_MY_B1
0001E286 0829 0001 002B             		btst	#1,$2B(a1)
0001E28C 6600 0000                  		bne.w	return_1FFB6
0001E290                            
0001E290                            Obj03_MY_B1:
0001E290 0828 0000 0001             		btst	#0,$01(a0)
0001E296 6600                       		bne.s	Obj03_MY_B2
0001E298 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E29E                            	;	move.b	#$C,$3E(a1)
0001E29E                            	;	move.b	#$D,$3F(a1)
0001E29E 0800 0003                  		btst	#3,d0
0001E2A2 6700                       		beq.s	Obj03_MY_B2
0001E2A4 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E2AA                            	;	move.b	#$E,$3E(a1)
0001E2AA                            	;	move.b	#$F,$3F(a1)
0001E2AA                            
0001E2AA                            Obj03_MY_B2:
0001E2AA 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E2B0 0800 0005                  		btst	#5,d0
0001E2B4 6700                       		beq.s	return_1FFB6
0001E2B6 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E2BC 6000                       		bra.s	return_1FFB6
0001E2BE                            
0001E2BE                            ; ===========================================================================
0001E2BE                            
0001E2BE                            Obj03_MainY_Alt:
0001E2BE B269 000C                  		cmp.w	$0C(a1),d1
0001E2C2 6300 0000                  		bls.w	return_1FFB6
0001E2C6 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E2CC 3428 0008                  		move.w	$08(a0),d2
0001E2D0 3602                       		move.w	d2,d3
0001E2D2 3828 0032                  		move.w	$32(a0),d4
0001E2D6 9444                       		sub.w	d4,d2
0001E2D8 D644                       		add.w	d4,d3
0001E2DA 3829 0008                  		move.w	$08(a1),d4
0001E2DE B842                       		cmp.w	d2,d4
0001E2E0 6D00 0000                  		blt.w	return_1FFB6
0001E2E4 B843                       		cmp.w	d3,d4
0001E2E6 6C00 0000                  		bge.w	return_1FFB6
0001E2EA 1028 0028                  		move.b	$28(a0),d0
0001E2EE 6A00                       		bpl.s	Obj03_MYA_B1
0001E2F0 0829 0001 002B             		btst	#1,$2B(a1)
0001E2F6 6600 0000                  		bne.w	return_1FFB6
0001E2FA                            
0001E2FA                            Obj03_MYA_B1
0001E2FA 0828 0000 0001             		btst	#0,$01(a0)
0001E300 6600                       		bne.s	Obj03_MYA_B2
0001E302 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E308                            	;	move.b	#$C,$3E(a1)
0001E308                            	;	move.b	#$D,$3F(a1)
0001E308 0800 0004                  		btst	#4,d0
0001E30C 6700                       		beq.s	Obj03_MYA_B2
0001E30E 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E314                            	;	move.b	#$E,$3E(a1)
0001E314                            	;	move.b	#$F,$3F(a1)
0001E314                            
0001E314                            Obj03_MYA_B2:
0001E314 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E31A 0800 0006                  		btst	#6,d0
0001E31E 6700                       		beq.s	return_1FFB6
0001E320 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E326                            
0001E326                            return_1FFB6:
0001E326 4E75                       		rts
0001E328                            
0001E328                            ; ===========================================================================
0001E328                            ; ---------------------------------------------------------------------------
0001E328                            ; Subroutine to	animate	level graphics
0001E328                            ; ---------------------------------------------------------------------------
0001E328                            
0001E328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E328                            
0001E328                            
0001E328                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E328 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E32C 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E32E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E334 6100 0000                  		bsr.w	AniArt_GiantRing
0001E338 7000                       		moveq	#0,d0
0001E33A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E33E D040                       		add.w	d0,d0
0001E340 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E344 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E348                            ; ===========================================================================
0001E348                            
0001E348                            AniArt_Pause:
0001E348 4E75                       		rts	
0001E34A                            ; End of function AniArt_Load
0001E34A                            
0001E34A                            ; ===========================================================================
0001E34A 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E34E 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E352 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E356 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E358                            ; ===========================================================================
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            ; Animated pattern routine - Green Hill
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            
0001E358                            AniArt_GHZ:				; XREF: AniArt_Index
0001E358 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E35C 6A00                       		bpl.s	loc_1C08A
0001E35E 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E364 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E36A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E36E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E372 0240 0001                  		andi.w	#1,d0
0001E376 6700                       		beq.s	loc_1C078
0001E378 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E37C                            
0001E37C                            loc_1C078:
0001E37C 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E386 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E38A 6000 0000                  		bra.w	LoadTiles
0001E38E                            ; ===========================================================================
0001E38E                            
0001E38E                            loc_1C08A:
0001E38E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E392 6A00                       		bpl.s	loc_1C0C0
0001E394 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E39A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E3A0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E3A4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E3A8 0240 0001                  		andi.w	#1,d0
0001E3AC 6700                       		beq.s	loc_1C0AE
0001E3AE 43E9 0200                  		lea	$200(a1),a1
0001E3B2                            
0001E3B2                            loc_1C0AE:
0001E3B2 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E3BC 323C 000F                  		move.w	#$F,d1
0001E3C0 6000 0000                  		bra.w	LoadTiles
0001E3C4                            ; ===========================================================================
0001E3C4                            
0001E3C4                            loc_1C0C0:
0001E3C4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E3C8 6A00                       		bpl.s	locret_1C10C
0001E3CA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E3D0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E3D4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E3D8 0240 0003                  		andi.w	#3,d0
0001E3DC 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E3E0 0800 0000                  		btst	#0,d0
0001E3E4 6600                       		bne.s	loc_1C0E8
0001E3E6 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E3EC                            
0001E3EC                            loc_1C0E8:
0001E3EC EF48                       		lsl.w	#7,d0
0001E3EE 3200                       		move.w	d0,d1
0001E3F0 D040                       		add.w	d0,d0
0001E3F2 D041                       		add.w	d1,d0
0001E3F4 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E3FE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E404 43F1 0000                  		lea	(a1,d0.w),a1
0001E408 323C 000B                  		move.w	#$B,d1
0001E40C 6100 0000                  		bsr.w	LoadTiles
0001E410                            
0001E410                            locret_1C10C:
0001E410 4E75                       		rts	
0001E412                            ; ===========================================================================
0001E412 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E416                            ; ===========================================================================
0001E416                            ; ---------------------------------------------------------------------------
0001E416                            ; Animated pattern routine - Marble
0001E416                            ; ---------------------------------------------------------------------------
0001E416                            
0001E416                            AniArt_MZ:				; XREF: AniArt_Index
0001E416 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E41A 6A00                       		bpl.s	loc_1C150
0001E41C 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E422 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E428 7000                       		moveq	#0,d0
0001E42A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E42E 5200                       		addq.b	#1,d0
0001E430 0C00 0003                  		cmpi.b	#3,d0
0001E434 6600                       		bne.s	loc_1C134
0001E436 7000                       		moveq	#0,d0
0001E438                            
0001E438                            loc_1C134:
0001E438 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E43C C0FC 0100                  		mulu.w	#$100,d0
0001E440 D2C0                       		adda.w	d0,a1
0001E442 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E44C 323C 0007                  		move.w	#7,d1
0001E450 6100 0000                  		bsr.w	LoadTiles
0001E454                            
0001E454                            loc_1C150:
0001E454 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E458 6A00                       		bpl.s	loc_1C1AE
0001E45A 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E460 7000                       		moveq	#0,d0
0001E462 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E466 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E46C EE58                       		ror.w	#7,d0
0001E46E D8C0                       		adda.w	d0,a4
0001E470 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E47A 7600                       		moveq	#0,d3
0001E47C 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E480 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E484 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E488 343C 0003                  		move.w	#3,d2
0001E48C                            
0001E48C                            loc_1C188:
0001E48C 3003                       		move.w	d3,d0
0001E48E D040                       		add.w	d0,d0
0001E490 0240 001E                  		andi.w	#$1E,d0
0001E494 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E49A 3033 0000                  		move.w	(a3,d0.w),d0
0001E49E 47F3 0000                  		lea	(a3,d0.w),a3
0001E4A2 224C                       		movea.l	a4,a1
0001E4A4 323C 001F                  		move.w	#$1F,d1
0001E4A8 4E93                       		jsr	(a3)
0001E4AA 5843                       		addq.w	#4,d3
0001E4AC 51CA FFDE                  		dbf	d2,loc_1C188
0001E4B0 4E75                       		rts	
0001E4B2                            ; ===========================================================================
0001E4B2                            
0001E4B2                            loc_1C1AE:
0001E4B2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E4B6 6A00 0000                  		bpl.w	locret_1C1EA
0001E4BA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E4C0 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E4C6 7000                       		moveq	#0,d0
0001E4C8 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E4CC 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E4D0 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E4D6 C0FC 00C0                  		mulu.w	#$C0,d0
0001E4DA D2C0                       		adda.w	d0,a1
0001E4DC 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E4E6 323C 0005                  		move.w	#5,d1
0001E4EA 6000 0000                  		bra.w	LoadTiles
0001E4EE                            ; ===========================================================================
0001E4EE                            
0001E4EE                            locret_1C1EA:
0001E4EE 4E75                       		rts	
0001E4F0                            ; ===========================================================================
0001E4F0                            ; ---------------------------------------------------------------------------
0001E4F0                            ; Animated pattern routine - Scrap Brain
0001E4F0                            ; ---------------------------------------------------------------------------
0001E4F0                            
0001E4F0                            AniArt_SBZ:				; XREF: AniArt_Index
0001E4F0 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E4F4 6700                       		beq.s	loc_1C1F8
0001E4F6 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E4FA 6000                       		bra.s	loc_1C250
0001E4FC                            ; ===========================================================================
0001E4FC                            
0001E4FC                            loc_1C1F8:
0001E4FC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E500 6A00                       		bpl.s	loc_1C250
0001E502 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E508 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E50E 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E518 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E51C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E520 0240 0007                  		andi.w	#7,d0
0001E524 6700                       		beq.s	loc_1C234
0001E526 5340                       		subq.w	#1,d0
0001E528 C0FC 0180                  		mulu.w	#$180,d0
0001E52C 43F1 0000                  		lea	(a1,d0.w),a1
0001E530 323C 000B                  		move.w	#$B,d1
0001E534 6000 0000                  		bra.w	LoadTiles
0001E538                            ; ===========================================================================
0001E538                            
0001E538                            loc_1C234:
0001E538 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E53E                            
0001E53E                            loc_1C23A:
0001E53E 323C 0005                  		move.w	#5,d1
0001E542 6100 0000                  		bsr.w	LoadTiles
0001E546 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E54C 323C 0005                  		move.w	#5,d1
0001E550 6000 0000                  		bra.w	LoadTiles
0001E554                            ; ===========================================================================
0001E554                            
0001E554                            loc_1C250:
0001E554 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E558 6700                       		beq.s	loc_1C25C
0001E55A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E55E 6000                       		bra.s	locret_1C2A0
0001E560                            ; ===========================================================================
0001E560                            
0001E560                            loc_1C25C:
0001E560 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E564 6A00                       		bpl.s	locret_1C2A0
0001E566 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E56C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E572 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E57C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E580 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E584 0240 0007                  		andi.w	#7,d0
0001E588 6700                       		beq.s	loc_1C298
0001E58A 5340                       		subq.w	#1,d0
0001E58C C0FC 0180                  		mulu.w	#$180,d0
0001E590 43F1 0000                  		lea	(a1,d0.w),a1
0001E594 323C 000B                  		move.w	#$B,d1
0001E598 6000 0000                  		bra.w	LoadTiles
0001E59C                            ; ===========================================================================
0001E59C                            
0001E59C                            loc_1C298:
0001E59C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E5A2 609A                       		bra.s	loc_1C23A
0001E5A4                            ; ===========================================================================
0001E5A4                            
0001E5A4                            locret_1C2A0:
0001E5A4 4E75                       		rts	
0001E5A6                            ; ===========================================================================
0001E5A6                            ; ---------------------------------------------------------------------------
0001E5A6                            ; Animated pattern routine - ending sequence
0001E5A6                            ; ---------------------------------------------------------------------------
0001E5A6                            
0001E5A6                            AniArt_Ending:				; XREF: AniArt_Index
0001E5A6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E5AA 6A00                       		bpl.s	loc_1C2F4
0001E5AC 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E5B2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E5B8 45F8 9400                  		lea	($FFFF9400).w,a2
0001E5BC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E5C0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E5C4 0240 0001                  		andi.w	#1,d0
0001E5C8 6700                       		beq.s	loc_1C2CE
0001E5CA 43E9 0200                  		lea	$200(a1),a1
0001E5CE 45EA 0200                  		lea	$200(a2),a2
0001E5D2                            
0001E5D2                            loc_1C2CE:
0001E5D2 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E5DC 323C 000F                  		move.w	#$F,d1
0001E5E0 6100 0000                  		bsr.w	LoadTiles
0001E5E4 224A                       		movea.l	a2,a1
0001E5E6 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E5F0 323C 000F                  		move.w	#$F,d1
0001E5F4 6000 0000                  		bra.w	LoadTiles
0001E5F8                            ; ===========================================================================
0001E5F8                            
0001E5F8                            loc_1C2F4:
0001E5F8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E5FC 6A00                       		bpl.s	loc_1C33C
0001E5FE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E604 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E608 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E60C 0240 0007                  		andi.w	#7,d0
0001E610 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E614 EF48                       		lsl.w	#7,d0
0001E616 3200                       		move.w	d0,d1
0001E618 D040                       		add.w	d0,d0
0001E61A D041                       		add.w	d1,d0
0001E61C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E626 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E62C 43F1 0000                  		lea	(a1,d0.w),a1
0001E630 323C 000B                  		move.w	#$B,d1
0001E634 6000 0000                  		bra.w	LoadTiles
0001E638                            ; ===========================================================================
0001E638 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E640                            ; ===========================================================================
0001E640                            
0001E640                            loc_1C33C:
0001E640 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E644 6A00                       		bpl.s	loc_1C37A
0001E646 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E64C 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E650 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E654 0240 0003                  		andi.w	#3,d0
0001E658 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E65C E148                       		lsl.w	#8,d0
0001E65E D040                       		add.w	d0,d0
0001E660 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E66A 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E66E 43F1 0000                  		lea	(a1,d0.w),a1
0001E672 323C 000F                  		move.w	#$F,d1
0001E676 6000 0000                  		bra.w	LoadTiles
0001E67A                            ; ===========================================================================
0001E67A 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E67E                            ; ===========================================================================
0001E67E                            
0001E67E                            loc_1C37A:
0001E67E 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E682 6A00                       		bpl.s	locret_1C3B4
0001E684 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E68A 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E68E 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E692 0240 0003                  		andi.w	#3,d0
0001E696 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E69A E148                       		lsl.w	#8,d0
0001E69C D040                       		add.w	d0,d0
0001E69E 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E6A8 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E6AC 43F1 0000                  		lea	(a1,d0.w),a1
0001E6B0 323C 000F                  		move.w	#$F,d1
0001E6B4 6000 0000                  		bra.w	LoadTiles
0001E6B8                            ; ===========================================================================
0001E6B8                            
0001E6B8                            locret_1C3B4:
0001E6B8 4E75                       		rts	
0001E6BA                            ; ===========================================================================
0001E6BA                            
0001E6BA                            AniArt_none:				; XREF: AniArt_Index
0001E6BA 4E75                       		rts	
0001E6BC                            
0001E6BC                            ; ---------------------------------------------------------------------------
0001E6BC                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E6BC                            ; ---------------------------------------------------------------------------
0001E6BC                            
0001E6BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6BC                            
0001E6BC                            
0001E6BC                            LoadTiles:
0001E6BC 2C99                       		move.l	(a1)+,(a6)
0001E6BE 2C99                       		move.l	(a1)+,(a6)
0001E6C0 2C99                       		move.l	(a1)+,(a6)
0001E6C2 2C99                       		move.l	(a1)+,(a6)
0001E6C4 2C99                       		move.l	(a1)+,(a6)
0001E6C6 2C99                       		move.l	(a1)+,(a6)
0001E6C8 2C99                       		move.l	(a1)+,(a6)
0001E6CA 2C99                       		move.l	(a1)+,(a6)
0001E6CC 51C9 FFEE                  		dbf	d1,LoadTiles
0001E6D0 4E75                       		rts	
0001E6D2                            ; End of function LoadTiles
0001E6D2                            
0001E6D2                            ; ===========================================================================
0001E6D2                            ; ---------------------------------------------------------------------------
0001E6D2                            ; Animated pattern routine - more Marble Zone
0001E6D2                            ; ---------------------------------------------------------------------------
0001E6D2 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E6D6 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E6DA 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E6DE 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E6E2 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E6E6 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E6EA 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E6EE 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E6F2                            ; ===========================================================================
0001E6F2                            
0001E6F2                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E6F2 2C91                       		move.l	(a1),(a6)
0001E6F4 43E9 0010                  		lea	$10(a1),a1
0001E6F8 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E6FC 4E75                       		rts	
0001E6FE                            ; ===========================================================================
0001E6FE                            
0001E6FE                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E6FE 2029 0002                  		move.l	2(a1),d0
0001E702 1029 0001                  		move.b	1(a1),d0
0001E706 E098                       		ror.l	#8,d0
0001E708 2C80                       		move.l	d0,(a6)
0001E70A 43E9 0010                  		lea	$10(a1),a1
0001E70E 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E712 4E75                       		rts	
0001E714                            ; ===========================================================================
0001E714                            
0001E714                            loc_1C410:				; XREF: AniArt_MZextra
0001E714 2CA9 0002                  		move.l	2(a1),(a6)
0001E718 43E9 0010                  		lea	$10(a1),a1
0001E71C 51C9 FFF6                  		dbf	d1,loc_1C410
0001E720 4E75                       		rts	
0001E722                            ; ===========================================================================
0001E722                            
0001E722                            loc_1C41E:				; XREF: AniArt_MZextra
0001E722 2029 0004                  		move.l	4(a1),d0
0001E726 1029 0003                  		move.b	3(a1),d0
0001E72A E098                       		ror.l	#8,d0
0001E72C 2C80                       		move.l	d0,(a6)
0001E72E 43E9 0010                  		lea	$10(a1),a1
0001E732 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E736 4E75                       		rts	
0001E738                            ; ===========================================================================
0001E738                            
0001E738                            loc_1C434:				; XREF: AniArt_MZextra
0001E738 2CA9 0004                  		move.l	4(a1),(a6)
0001E73C 43E9 0010                  		lea	$10(a1),a1
0001E740 51C9 FFF6                  		dbf	d1,loc_1C434
0001E744 4E75                       		rts	
0001E746                            ; ===========================================================================
0001E746                            
0001E746                            loc_1C442:				; XREF: AniArt_MZextra
0001E746 2029 0006                  		move.l	6(a1),d0
0001E74A 1029 0005                  		move.b	5(a1),d0
0001E74E E098                       		ror.l	#8,d0
0001E750 2C80                       		move.l	d0,(a6)
0001E752 43E9 0010                  		lea	$10(a1),a1
0001E756 51C9 FFEE                  		dbf	d1,loc_1C442
0001E75A 4E75                       		rts	
0001E75C                            ; ===========================================================================
0001E75C                            
0001E75C                            loc_1C458:				; XREF: AniArt_MZextra
0001E75C 2CA9 0006                  		move.l	6(a1),(a6)
0001E760 43E9 0010                  		lea	$10(a1),a1
0001E764 51C9 FFF6                  		dbf	d1,loc_1C458
0001E768 4E75                       		rts	
0001E76A                            ; ===========================================================================
0001E76A                            
0001E76A                            loc_1C466:				; XREF: AniArt_MZextra
0001E76A 2029 0008                  		move.l	8(a1),d0
0001E76E 1029 0007                  		move.b	7(a1),d0
0001E772 E098                       		ror.l	#8,d0
0001E774 2C80                       		move.l	d0,(a6)
0001E776 43E9 0010                  		lea	$10(a1),a1
0001E77A 51C9 FFEE                  		dbf	d1,loc_1C466
0001E77E 4E75                       		rts	
0001E780                            ; ===========================================================================
0001E780                            
0001E780                            loc_1C47C:				; XREF: AniArt_MZextra
0001E780 2CA9 0008                  		move.l	8(a1),(a6)
0001E784 43E9 0010                  		lea	$10(a1),a1
0001E788 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E78C 4E75                       		rts	
0001E78E                            ; ===========================================================================
0001E78E                            
0001E78E                            loc_1C48A:				; XREF: AniArt_MZextra
0001E78E 2029 000A                  		move.l	$A(a1),d0
0001E792 1029 0009                  		move.b	9(a1),d0
0001E796 E098                       		ror.l	#8,d0
0001E798 2C80                       		move.l	d0,(a6)
0001E79A 43E9 0010                  		lea	$10(a1),a1
0001E79E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E7A2 4E75                       		rts	
0001E7A4                            ; ===========================================================================
0001E7A4                            
0001E7A4                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E7A4 2CA9 000A                  		move.l	$A(a1),(a6)
0001E7A8 43E9 0010                  		lea	$10(a1),a1
0001E7AC 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E7B0 4E75                       		rts	
0001E7B2                            ; ===========================================================================
0001E7B2                            
0001E7B2                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E7B2 2029 000C                  		move.l	$C(a1),d0
0001E7B6 1029 000B                  		move.b	$B(a1),d0
0001E7BA E098                       		ror.l	#8,d0
0001E7BC 2C80                       		move.l	d0,(a6)
0001E7BE 43E9 0010                  		lea	$10(a1),a1
0001E7C2 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E7C6 4E75                       		rts	
0001E7C8                            ; ===========================================================================
0001E7C8                            
0001E7C8                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E7C8 2CA9 000C                  		move.l	$C(a1),(a6)
0001E7CC 43E9 0010                  		lea	$10(a1),a1
0001E7D0 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E7D4 4E75                       		rts	
0001E7D6                            ; ===========================================================================
0001E7D6                            
0001E7D6                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E7D6 2029 000C                  		move.l	$C(a1),d0
0001E7DA E198                       		rol.l	#8,d0
0001E7DC 1011                       		move.b	0(a1),d0
0001E7DE 2C80                       		move.l	d0,(a6)
0001E7E0 43E9 0010                  		lea	$10(a1),a1
0001E7E4 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E7E8 4E75                       		rts	
0001E7EA                            ; ===========================================================================
0001E7EA                            
0001E7EA                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E7EA 3CA9 000E                  		move.w	$E(a1),(a6)
0001E7EE 3C91                       		move.w	0(a1),(a6)
0001E7F0 43E9 0010                  		lea	$10(a1),a1
0001E7F4 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E7F8 4E75                       		rts	
0001E7FA                            ; ===========================================================================
0001E7FA                            
0001E7FA                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E7FA 2011                       		move.l	0(a1),d0
0001E7FC 1029 000F                  		move.b	$F(a1),d0
0001E800 E098                       		ror.l	#8,d0
0001E802 2C80                       		move.l	d0,(a6)
0001E804 43E9 0010                  		lea	$10(a1),a1
0001E808 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E80C 4E75                       		rts	
0001E80E                            
0001E80E                            ; ---------------------------------------------------------------------------
0001E80E                            ; Animated pattern routine - giant ring
0001E80E                            ; ---------------------------------------------------------------------------
0001E80E                            
0001E80E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E80E                            
0001E80E                            
0001E80E                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E80E 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E812 6600                       		bne.s	loc_1C518
0001E814 4E75                       		rts	
0001E816                            ; ===========================================================================
0001E816                            
0001E816                            loc_1C518:
0001E816 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E81C 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E822 7000                       		moveq	#0,d0
0001E824 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E828 43F1 0000                  		lea	(a1,d0.w),a1
0001E82C 0640 8000                  		addi.w	#$8000,d0
0001E830 E588                       		lsl.l	#2,d0
0001E832 E448                       		lsr.w	#2,d0
0001E834 0040 4000                  		ori.w	#$4000,d0
0001E838 4840                       		swap	d0
0001E83A 2D40 0004                  		move.l	d0,4(a6)
0001E83E 323C 000D                  		move.w	#$D,d1
0001E842 6000 FE78                  		bra.w	LoadTiles
0001E846                            ; End of function AniArt_GiantRing
0001E846                            
0001E846                            ; ===========================================================================
0001E846                            ; ---------------------------------------------------------------------------
0001E846                            ; Object 21 - SCORE, TIME, RINGS
0001E846                            ; ---------------------------------------------------------------------------
0001E846                            
0001E846                            Obj21:					; XREF: Obj_Index
0001E846 7000                       		moveq	#0,d0
0001E848 1028 0024                  		move.b	$24(a0),d0
0001E84C 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001E850 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001E854                            ; ===========================================================================
0001E854 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001E856 0000                       		dc.w Obj21_Flash-Obj21_Index
0001E858                            ; ===========================================================================
0001E858                            
0001E858                            Obj21_Main:				; XREF: Obj21_Main
0001E858 5428 0024                  		addq.b	#2,$24(a0)
0001E85C 317C 0090 0008             		move.w	#$90,8(a0)
0001E862 317C 0108 000A             		move.w	#$108,$A(a0)
0001E868 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001E870 317C 86CA 0002             		move.w	#$86CA,2(a0)
0001E876 117C 0000 0001             		move.b	#0,1(a0)
0001E87C 117C 0000 0018             		move.b	#0,$18(a0)
0001E882                            
0001E882                            Obj21_Flash:				; XREF: Obj21_Main
0001E882 7000                       		moveq	#0,d0
0001E884 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001E88A 6600                       		bne.s	Obj21_Display
0001E88C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001E890 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001E892 5240                       		addq.w	#1,d0		; make ring counter flash red
0001E894                            
0001E894                            Obj21_Flash2:
0001E894 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001E89A 6600                       		bne.s	Obj21_Display	; if not, branch
0001E89C 5440                       		addq.w	#2,d0		; make time counter flash red
0001E89E                            
0001E89E                            Obj21_Display:
0001E89E 1140 001A                  		move.b	d0,$1A(a0)
0001E8A2 4EF9 0000 F0CA             		jmp	DisplaySprite
0001E8A8                            ; ===========================================================================
0001E8A8                            ; ---------------------------------------------------------------------------
0001E8A8                            ; Sprite mappings - SCORE, TIME, RINGS
0001E8A8                            ; ---------------------------------------------------------------------------
0001E8A8                            Map_obj21:
0001E8A8                            	include "_maps\obj21.asm"
0001E8A8                            ; --------------------------------------------------------------------------------
0001E8A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E8A8                            ; --------------------------------------------------------------------------------
0001E8A8                            
0001E8A8                            SME_u7N7y:	
0001E8A8 0000 0000                  		dc.w SME_u7N7y_8-SME_u7N7y, SME_u7N7y_36-SME_u7N7y	
0001E8AC 0000 0000                  		dc.w SME_u7N7y_64-SME_u7N7y, SME_u7N7y_92-SME_u7N7y	
0001E8B0 0A                         SME_u7N7y_8:	dc.b $A
0001E8B1 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E8B6 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E8BB 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E8C0 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E8C5 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E8CA A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E8CF A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E8D4 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E8D9 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E8DE 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E8E3 0A                         SME_u7N7y_36:	dc.b $A
0001E8E4 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E8E9 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E8EE 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E8F3 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E8F8 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E8FD A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E902 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E907 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E90C 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E911 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E916 0A                         SME_u7N7y_64:	dc.b $A
0001E917 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E91C 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E921 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E926 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E92B 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E930 A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E935 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E93A 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E93F 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E944 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E949 0A                         SME_u7N7y_92:	dc.b $A
0001E94A 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E94F 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E954 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E959 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E95E 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E963 A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E968 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E96D 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E972 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E977 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E97C                            		even
0001E97C                            		even
0001E97C                            
0001E97C                            ; ---------------------------------------------------------------------------
0001E97C                            ; Add points subroutine
0001E97C                            ; ---------------------------------------------------------------------------
0001E97C                            
0001E97C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E97C                            
0001E97C                            
0001E97C                            AddPoints:
0001E97C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E982 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E986 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E98A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E98C 223C 000F 423F             		move.l	#999999,d1
0001E992 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E994 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E998 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E99A 2481                       		move.l	d1,(a2)
0001E99C                            
0001E99C                            loc_1C6AC:
0001E99C 2013                       		move.l	(a3),d0
0001E99E B092                       		cmp.l	(a2),d0
0001E9A0 6500 0000                  		bcs.w	locret_1C6B6
0001E9A4 2480                       		move.l	d0,(a2)
0001E9A6                            
0001E9A6                            locret_1C6B6:
0001E9A6 4E75                       		rts	
0001E9A8                            ; End of function AddPoints
0001E9A8                            
0001E9A8                            ; ---------------------------------------------------------------------------
0001E9A8                            ; Subroutine to	update the HUD
0001E9A8                            ; ---------------------------------------------------------------------------
0001E9A8                            
0001E9A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9A8                            
0001E9A8                            
0001E9A8                            HudUpdate:
0001E9A8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E9AC 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E9B0 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E9B4 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E9B6 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E9BA 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E9C0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E9C4 6100 0000                  		bsr.w	Hud_Score
0001E9C8                            
0001E9C8                            Hud_ChkRings:
0001E9C8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E9CC 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E9CE 6A00                       		bpl.s	loc_1C6E4
0001E9D0 6100 0000                  		bsr.w	Hud_LoadZero
0001E9D4                            
0001E9D4                            loc_1C6E4:
0001E9D4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E9D8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E9DE 7200                       		moveq	#0,d1
0001E9E0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E9E4 6100 0000                  		bsr.w	Hud_Rings
0001E9E8                            
0001E9E8                            Hud_ChkTime:
0001E9E8 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001E9EC 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001E9EE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E9F2 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E9F4 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001E9F8 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E9FE 6700                       		beq.s	TimeOver	; if yes, branch
0001EA00 5221                       		addq.b	#1,-(a1)
0001EA02 0C11 003C                  		cmpi.b	#60,(a1)
0001EA06 6500                       		bcs.s	Hud_ChkLives
0001EA08 12BC 0000                  		move.b	#0,(a1)
0001EA0C 5221                       		addq.b	#1,-(a1)
0001EA0E 0C11 003C                  		cmpi.b	#60,(a1)
0001EA12 6500                       		bcs.s	loc_1C734
0001EA14 12BC 0000                  		move.b	#0,(a1)
0001EA18 5221                       		addq.b	#1,-(a1)
0001EA1A 0C11 0009                  		cmpi.b	#9,(a1)
0001EA1E 6500                       		bcs.s	loc_1C734
0001EA20 12BC 0009                  		move.b	#9,(a1)
0001EA24                            
0001EA24                            loc_1C734:
0001EA24 203C 5E40 0003             		move.l	#$5E400003,d0
0001EA2A 7200                       		moveq	#0,d1
0001EA2C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EA30 6100 0000                  		bsr.w	Hud_Mins
0001EA34 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EA3A 7200                       		moveq	#0,d1
0001EA3C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EA40 6100 0000                  		bsr.w	Hud_Secs
0001EA44                            
0001EA44                            Hud_ChkLives:
0001EA44 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EA48 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EA4A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EA4E 6100 0000                  		bsr.w	Hud_Lives
0001EA52                            
0001EA52                            Hud_ChkBonus:
0001EA52 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EA56 6700                       		beq.s	Hud_End		; if not, branch
0001EA58 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EA5C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EA66 7200                       		moveq	#0,d1
0001EA68 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EA6C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA70 7200                       		moveq	#0,d1
0001EA72 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EA76 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA7A                            
0001EA7A                            Hud_End:
0001EA7A 4E75                       		rts	
0001EA7C                            ; ===========================================================================
0001EA7C                            
0001EA7C                            TimeOver:				; XREF: Hud_ChkTime
0001EA7C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EA80 41F8 D000                  		lea	($FFFFD000).w,a0
0001EA84 2448                       		movea.l	a0,a2
0001EA86 6100 E67A                  		bsr.w	KillSonic
0001EA8A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EA90 4E75                       		rts	
0001EA92                            ; ===========================================================================
0001EA92                            
0001EA92                            HudDebug:				; XREF: HudUpdate
0001EA92 6100 0000                  		bsr.w	HudDb_XY
0001EA96 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EA9A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EA9C 6A00                       		bpl.s	HudDb_Rings
0001EA9E 6100 0000                  		bsr.w	Hud_LoadZero
0001EAA2                            
0001EAA2                            HudDb_Rings:
0001EAA2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EAA6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EAAC 7200                       		moveq	#0,d1
0001EAAE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EAB2 6100 0000                  		bsr.w	Hud_Rings
0001EAB6                            
0001EAB6                            HudDb_ObjCount:
0001EAB6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EABC 7200                       		moveq	#0,d1
0001EABE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EAC2 6100 0000                  		bsr.w	Hud_Secs
0001EAC6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EACA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EACC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EAD0 6100 0000                  		bsr.w	Hud_Lives
0001EAD4                            
0001EAD4                            HudDb_ChkBonus:
0001EAD4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EAD8 6700                       		beq.s	HudDb_End	; if not, branch
0001EADA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EADE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EAE8 7200                       		moveq	#0,d1
0001EAEA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EAEE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EAF2 7200                       		moveq	#0,d1
0001EAF4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EAF8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EAFC                            
0001EAFC                            HudDb_End:
0001EAFC 4E75                       		rts	
0001EAFE                            ; End of function HudUpdate
0001EAFE                            
0001EAFE                            ; ---------------------------------------------------------------------------
0001EAFE                            ; Subroutine to	load "0" on the	HUD
0001EAFE                            ; ---------------------------------------------------------------------------
0001EAFE                            
0001EAFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAFE                            
0001EAFE                            
0001EAFE                            Hud_LoadZero:				; XREF: HudUpdate
0001EAFE 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EB08 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EB0C 343C 0002                  		move.w	#2,d2
0001EB10 6000                       		bra.s	loc_1C83E
0001EB12                            ; End of function Hud_LoadZero
0001EB12                            
0001EB12                            ; ---------------------------------------------------------------------------
0001EB12                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EB12                            ; ---------------------------------------------------------------------------
0001EB12                            
0001EB12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB12                            
0001EB12                            
0001EB12                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EB12 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EB18 6100 0000                  		bsr.w	Hud_Lives
0001EB1C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EB26 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EB2A 343C 000E                  		move.w	#$E,d2
0001EB2E                            
0001EB2E                            loc_1C83E:				; XREF: Hud_LoadZero
0001EB2E 43FA 0000                  		lea	Art_Hud(pc),a1
0001EB32                            
0001EB32                            loc_1C842:
0001EB32 323C 000F                  		move.w	#$F,d1
0001EB36 101A                       		move.b	(a2)+,d0
0001EB38 6B00                       		bmi.s	loc_1C85E
0001EB3A 4880                       		ext.w	d0
0001EB3C EB48                       		lsl.w	#5,d0
0001EB3E 47F1 0000                  		lea	(a1,d0.w),a3
0001EB42                            
0001EB42                            loc_1C852:
0001EB42 2C9B                       		move.l	(a3)+,(a6)
0001EB44 51C9 FFFC                  		dbf	d1,loc_1C852
0001EB48                            
0001EB48                            loc_1C858:
0001EB48 51CA FFE8                  		dbf	d2,loc_1C842
0001EB4C                            
0001EB4C 4E75                       		rts	
0001EB4E                            ; ===========================================================================
0001EB4E                            
0001EB4E                            loc_1C85E:
0001EB4E 2CBC 0000 0000             		move.l	#0,(a6)
0001EB54 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EB58                            
0001EB58 60EE                       		bra.s	loc_1C858
0001EB5A                            ; End of function Hud_Base
0001EB5A                            
0001EB5A                            ; ===========================================================================
0001EB5A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EB66 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EB6A                            ; ---------------------------------------------------------------------------
0001EB6A                            ; Subroutine to	load debug mode	numbers	patterns
0001EB6A                            ; ---------------------------------------------------------------------------
0001EB6A                            
0001EB6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB6A                            
0001EB6A                            
0001EB6A                            HudDb_XY:				; XREF: HudDebug
0001EB6A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EB74 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EB78 4841                       		swap	d1
0001EB7A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EB7E 6100                       		bsr.s	HudDb_XY2
0001EB80 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EB84 4841                       		swap	d1
0001EB86 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EB8A                            ; End of function HudDb_XY
0001EB8A                            
0001EB8A                            
0001EB8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB8A                            
0001EB8A                            
0001EB8A                            HudDb_XY2:
0001EB8A 7C07                       		moveq	#7,d6
0001EB8C 43F9 0000 058E             		lea	(Art_Text).l,a1
0001EB92                            
0001EB92                            HudDb_XYLoop:
0001EB92 E959                       		rol.w	#4,d1
0001EB94 3401                       		move.w	d1,d2
0001EB96 0242 000F                  		andi.w	#$F,d2
0001EB9A 0C42 000A                  		cmpi.w	#$A,d2
0001EB9E 6500                       		bcs.s	loc_1C8B2
0001EBA0 5E42                       		addq.w	#7,d2
0001EBA2                            
0001EBA2                            loc_1C8B2:
0001EBA2 EB4A                       		lsl.w	#5,d2
0001EBA4 47F1 2000                  		lea	(a1,d2.w),a3
0001EBA8 2C9B                       		move.l	(a3)+,(a6)
0001EBAA 2C9B                       		move.l	(a3)+,(a6)
0001EBAC 2C9B                       		move.l	(a3)+,(a6)
0001EBAE 2C9B                       		move.l	(a3)+,(a6)
0001EBB0 2C9B                       		move.l	(a3)+,(a6)
0001EBB2 2C9B                       		move.l	(a3)+,(a6)
0001EBB4 2C9B                       		move.l	(a3)+,(a6)
0001EBB6 2C9B                       		move.l	(a3)+,(a6)
0001EBB8 4841                       		swap	d1
0001EBBA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EBBE                            
0001EBBE 4E75                       		rts	
0001EBC0                            ; End of function HudDb_XY2
0001EBC0                            
0001EBC0                            ; ---------------------------------------------------------------------------
0001EBC0                            ; Subroutine to	load rings numbers patterns
0001EBC0                            ; ---------------------------------------------------------------------------
0001EBC0                            
0001EBC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBC0                            
0001EBC0                            
0001EBC0                            Hud_Rings:				; XREF: HudUpdate
0001EBC0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EBC6 7C02                       		moveq	#2,d6
0001EBC8 6000                       		bra.s	Hud_LoadArt
0001EBCA                            ; End of function Hud_Rings
0001EBCA                            
0001EBCA                            ; ---------------------------------------------------------------------------
0001EBCA                            ; Subroutine to	load score numbers patterns
0001EBCA                            ; ---------------------------------------------------------------------------
0001EBCA                            
0001EBCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBCA                            
0001EBCA                            
0001EBCA                            Hud_Score:				; XREF: HudUpdate
0001EBCA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EBD0 7C05                       		moveq	#5,d6
0001EBD2                            
0001EBD2                            Hud_LoadArt:
0001EBD2 7800                       		moveq	#0,d4
0001EBD4 43FA 0000                  		lea	Art_Hud(pc),a1
0001EBD8                            
0001EBD8                            Hud_ScoreLoop:
0001EBD8 7400                       		moveq	#0,d2
0001EBDA 261A                       		move.l	(a2)+,d3
0001EBDC                            
0001EBDC                            loc_1C8EC:
0001EBDC 9283                       		sub.l	d3,d1
0001EBDE 6500                       		bcs.s	loc_1C8F4
0001EBE0 5242                       		addq.w	#1,d2
0001EBE2 60F8                       		bra.s	loc_1C8EC
0001EBE4                            ; ===========================================================================
0001EBE4                            
0001EBE4                            loc_1C8F4:
0001EBE4 D283                       		add.l	d3,d1
0001EBE6 4A42                       		tst.w	d2
0001EBE8 6700                       		beq.s	loc_1C8FE
0001EBEA 383C 0001                  		move.w	#1,d4
0001EBEE                            
0001EBEE                            loc_1C8FE:
0001EBEE 4A44                       		tst.w	d4
0001EBF0 6700                       		beq.s	loc_1C92C
0001EBF2 ED4A                       		lsl.w	#6,d2
0001EBF4 2D40 0004                  		move.l	d0,4(a6)
0001EBF8 47F1 2000                  		lea	(a1,d2.w),a3
0001EBFC 2C9B                       		move.l	(a3)+,(a6)
0001EBFE 2C9B                       		move.l	(a3)+,(a6)
0001EC00 2C9B                       		move.l	(a3)+,(a6)
0001EC02 2C9B                       		move.l	(a3)+,(a6)
0001EC04 2C9B                       		move.l	(a3)+,(a6)
0001EC06 2C9B                       		move.l	(a3)+,(a6)
0001EC08 2C9B                       		move.l	(a3)+,(a6)
0001EC0A 2C9B                       		move.l	(a3)+,(a6)
0001EC0C 2C9B                       		move.l	(a3)+,(a6)
0001EC0E 2C9B                       		move.l	(a3)+,(a6)
0001EC10 2C9B                       		move.l	(a3)+,(a6)
0001EC12 2C9B                       		move.l	(a3)+,(a6)
0001EC14 2C9B                       		move.l	(a3)+,(a6)
0001EC16 2C9B                       		move.l	(a3)+,(a6)
0001EC18 2C9B                       		move.l	(a3)+,(a6)
0001EC1A 2C9B                       		move.l	(a3)+,(a6)
0001EC1C                            
0001EC1C                            loc_1C92C:
0001EC1C 0680 0040 0000             		addi.l	#$400000,d0
0001EC22 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EC26                            
0001EC26 4E75                       		rts	
0001EC28                            ; End of function Hud_Score
0001EC28                            
0001EC28                            ; ---------------------------------------------------------------------------
0001EC28                            ; Subroutine to	load countdown numbers on the continue screen
0001EC28                            ; ---------------------------------------------------------------------------
0001EC28                            
0001EC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC28                            
0001EC28                            
0001EC28                            ContScrCounter:				; XREF: ContinueScreen
0001EC28 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EC32 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EC38 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EC3E 7C01                       		moveq	#1,d6
0001EC40 7800                       		moveq	#0,d4
0001EC42 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EC46                            
0001EC46                            ContScr_Loop:
0001EC46 7400                       		moveq	#0,d2
0001EC48 261A                       		move.l	(a2)+,d3
0001EC4A                            
0001EC4A                            loc_1C95A:
0001EC4A 9283                       		sub.l	d3,d1
0001EC4C 6500                       		bcs.s	loc_1C962
0001EC4E 5242                       		addq.w	#1,d2
0001EC50 60F8                       		bra.s	loc_1C95A
0001EC52                            ; ===========================================================================
0001EC52                            
0001EC52                            loc_1C962:
0001EC52 D283                       		add.l	d3,d1
0001EC54 ED4A                       		lsl.w	#6,d2
0001EC56 47F1 2000                  		lea	(a1,d2.w),a3
0001EC5A 2C9B                       		move.l	(a3)+,(a6)
0001EC5C 2C9B                       		move.l	(a3)+,(a6)
0001EC5E 2C9B                       		move.l	(a3)+,(a6)
0001EC60 2C9B                       		move.l	(a3)+,(a6)
0001EC62 2C9B                       		move.l	(a3)+,(a6)
0001EC64 2C9B                       		move.l	(a3)+,(a6)
0001EC66 2C9B                       		move.l	(a3)+,(a6)
0001EC68 2C9B                       		move.l	(a3)+,(a6)
0001EC6A 2C9B                       		move.l	(a3)+,(a6)
0001EC6C 2C9B                       		move.l	(a3)+,(a6)
0001EC6E 2C9B                       		move.l	(a3)+,(a6)
0001EC70 2C9B                       		move.l	(a3)+,(a6)
0001EC72 2C9B                       		move.l	(a3)+,(a6)
0001EC74 2C9B                       		move.l	(a3)+,(a6)
0001EC76 2C9B                       		move.l	(a3)+,(a6)
0001EC78 2C9B                       		move.l	(a3)+,(a6)
0001EC7A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EC7E                            
0001EC7E 4E75                       		rts	
0001EC80                            ; End of function ContScrCounter
0001EC80                            
0001EC80                            ; ===========================================================================
0001EC80                            ; ---------------------------------------------------------------------------
0001EC80                            ; HUD counter sizes
0001EC80                            ; ---------------------------------------------------------------------------
0001EC80 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EC84 0000 2710                  Hud_10000:	dc.l 10000
0001EC88 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EC8C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EC90 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EC94 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EC98                            
0001EC98                            ; ---------------------------------------------------------------------------
0001EC98                            ; Subroutine to	load time numbers patterns
0001EC98                            ; ---------------------------------------------------------------------------
0001EC98                            
0001EC98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC98                            
0001EC98                            
0001EC98                            Hud_Mins:				; XREF: Hud_ChkTime
0001EC98 45F9 0001 EC94             		lea	(Hud_1).l,a2
0001EC9E 7C00                       		moveq	#0,d6
0001ECA0 6000                       		bra.s	loc_1C9BA
0001ECA2                            ; End of function Hud_Mins
0001ECA2                            
0001ECA2                            
0001ECA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECA2                            
0001ECA2                            
0001ECA2                            Hud_Secs:				; XREF: Hud_ChkTime
0001ECA2 45F9 0001 EC90             		lea	(Hud_10).l,a2
0001ECA8 7C01                       		moveq	#1,d6
0001ECAA                            
0001ECAA                            loc_1C9BA:
0001ECAA 7800                       		moveq	#0,d4
0001ECAC 43FA 0000                  		lea	Art_Hud(pc),a1
0001ECB0                            
0001ECB0                            Hud_TimeLoop:
0001ECB0 7400                       		moveq	#0,d2
0001ECB2 261A                       		move.l	(a2)+,d3
0001ECB4                            
0001ECB4                            loc_1C9C4:
0001ECB4 9283                       		sub.l	d3,d1
0001ECB6 6500                       		bcs.s	loc_1C9CC
0001ECB8 5242                       		addq.w	#1,d2
0001ECBA 60F8                       		bra.s	loc_1C9C4
0001ECBC                            ; ===========================================================================
0001ECBC                            
0001ECBC                            loc_1C9CC:
0001ECBC D283                       		add.l	d3,d1
0001ECBE 4A42                       		tst.w	d2
0001ECC0 6700                       		beq.s	loc_1C9D6
0001ECC2 383C 0001                  		move.w	#1,d4
0001ECC6                            
0001ECC6                            loc_1C9D6:
0001ECC6 ED4A                       		lsl.w	#6,d2
0001ECC8 2D40 0004                  		move.l	d0,4(a6)
0001ECCC 47F1 2000                  		lea	(a1,d2.w),a3
0001ECD0 2C9B                       		move.l	(a3)+,(a6)
0001ECD2 2C9B                       		move.l	(a3)+,(a6)
0001ECD4 2C9B                       		move.l	(a3)+,(a6)
0001ECD6 2C9B                       		move.l	(a3)+,(a6)
0001ECD8 2C9B                       		move.l	(a3)+,(a6)
0001ECDA 2C9B                       		move.l	(a3)+,(a6)
0001ECDC 2C9B                       		move.l	(a3)+,(a6)
0001ECDE 2C9B                       		move.l	(a3)+,(a6)
0001ECE0 2C9B                       		move.l	(a3)+,(a6)
0001ECE2 2C9B                       		move.l	(a3)+,(a6)
0001ECE4 2C9B                       		move.l	(a3)+,(a6)
0001ECE6 2C9B                       		move.l	(a3)+,(a6)
0001ECE8 2C9B                       		move.l	(a3)+,(a6)
0001ECEA 2C9B                       		move.l	(a3)+,(a6)
0001ECEC 2C9B                       		move.l	(a3)+,(a6)
0001ECEE 2C9B                       		move.l	(a3)+,(a6)
0001ECF0 0680 0040 0000             		addi.l	#$400000,d0
0001ECF6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001ECFA                            
0001ECFA 4E75                       		rts	
0001ECFC                            ; End of function Hud_Secs
0001ECFC                            
0001ECFC                            ; ---------------------------------------------------------------------------
0001ECFC                            ; Subroutine to	load time/ring bonus numbers patterns
0001ECFC                            ; ---------------------------------------------------------------------------
0001ECFC                            
0001ECFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECFC                            
0001ECFC                            
0001ECFC                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001ECFC 45F9 0001 EC88             		lea	(Hud_1000).l,a2
0001ED02 7C03                       		moveq	#3,d6
0001ED04 7800                       		moveq	#0,d4
0001ED06 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED0A                            
0001ED0A                            Hud_BonusLoop:
0001ED0A 7400                       		moveq	#0,d2
0001ED0C 261A                       		move.l	(a2)+,d3
0001ED0E                            
0001ED0E                            loc_1CA1E:
0001ED0E 9283                       		sub.l	d3,d1
0001ED10 6500                       		bcs.s	loc_1CA26
0001ED12 5242                       		addq.w	#1,d2
0001ED14 60F8                       		bra.s	loc_1CA1E
0001ED16                            ; ===========================================================================
0001ED16                            
0001ED16                            loc_1CA26:
0001ED16 D283                       		add.l	d3,d1
0001ED18 4A42                       		tst.w	d2
0001ED1A 6700                       		beq.s	loc_1CA30
0001ED1C 383C 0001                  		move.w	#1,d4
0001ED20                            
0001ED20                            loc_1CA30:
0001ED20 4A44                       		tst.w	d4
0001ED22 6700                       		beq.s	Hud_ClrBonus
0001ED24 ED4A                       		lsl.w	#6,d2
0001ED26 47F1 2000                  		lea	(a1,d2.w),a3
0001ED2A 2C9B                       		move.l	(a3)+,(a6)
0001ED2C 2C9B                       		move.l	(a3)+,(a6)
0001ED2E 2C9B                       		move.l	(a3)+,(a6)
0001ED30 2C9B                       		move.l	(a3)+,(a6)
0001ED32 2C9B                       		move.l	(a3)+,(a6)
0001ED34 2C9B                       		move.l	(a3)+,(a6)
0001ED36 2C9B                       		move.l	(a3)+,(a6)
0001ED38 2C9B                       		move.l	(a3)+,(a6)
0001ED3A 2C9B                       		move.l	(a3)+,(a6)
0001ED3C 2C9B                       		move.l	(a3)+,(a6)
0001ED3E 2C9B                       		move.l	(a3)+,(a6)
0001ED40 2C9B                       		move.l	(a3)+,(a6)
0001ED42 2C9B                       		move.l	(a3)+,(a6)
0001ED44 2C9B                       		move.l	(a3)+,(a6)
0001ED46 2C9B                       		move.l	(a3)+,(a6)
0001ED48 2C9B                       		move.l	(a3)+,(a6)
0001ED4A                            
0001ED4A                            loc_1CA5A:
0001ED4A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001ED4E                            
0001ED4E 4E75                       		rts	
0001ED50                            ; ===========================================================================
0001ED50                            
0001ED50                            Hud_ClrBonus:
0001ED50 7A0F                       		moveq	#$F,d5
0001ED52                            
0001ED52                            Hud_ClrBonusLoop:
0001ED52 2CBC 0000 0000             		move.l	#0,(a6)
0001ED58 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001ED5C                            
0001ED5C 60EC                       		bra.s	loc_1CA5A
0001ED5E                            ; End of function Hud_TimeRingBonus
0001ED5E                            
0001ED5E                            ; ---------------------------------------------------------------------------
0001ED5E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001ED5E                            ; ---------------------------------------------------------------------------
0001ED5E                            
0001ED5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED5E                            
0001ED5E                            
0001ED5E                            Hud_Lives:				; XREF: Hud_ChkLives
0001ED5E 203C 7B20 0003             		move.l	#$7B200003,d0	; set VRAM address
0001ED64 7200                       		moveq	#0,d1
0001ED66 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001ED6A 45F9 0001 EC90             		lea	(Hud_10).l,a2
0001ED70 7C01                       		moveq	#1,d6
0001ED72 7800                       		moveq	#0,d4
0001ED74 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001ED78 2D40 0004                  		move.l	d0,4(a6)
0001ED7C                            
0001ED7C                            Hud_LivesLoop:
0001ED7C 7400                       		moveq	#0,d2
0001ED7E 261A                       		move.l	(a2)+,d3
0001ED80                            
0001ED80                            loc_1CA90:
0001ED80 9283                       		sub.l	d3,d1
0001ED82 6500                       		bcs.s	loc_1CA98
0001ED84 5242                       		addq.w	#1,d2
0001ED86 60F8                       		bra.s	loc_1CA90
0001ED88                            ; ===========================================================================
0001ED88                            
0001ED88                            loc_1CA98:
0001ED88 D283                       		add.l	d3,d1
0001ED8A 4A42                       		tst.w	d2
0001ED8C 6700                       		beq.s	loc_1CAA2
0001ED8E 383C 0001                  		move.w	#1,d4
0001ED92                            
0001ED92                            loc_1CAA2:
0001ED92 4A44                       		tst.w	d4
0001ED94 6700                       		beq.s	@chk
0001ED96 4A46                       		tst.w	d6
0001ED98 6700                       		beq.s	loc_1CAA6
0001ED9A 0C42 0001                  		cmpi.w	#1,d2
0001ED9E 6700                       		beq.s	Hud_Lives_Draw10
0001EDA0 6000                       		bra.s	loc_1CAA6
0001EDA2                            
0001EDA2                            @chk:
0001EDA2 4A46                       		tst.w	d6
0001EDA4 6700                       		beq.s	Hud_Lives_DrawDigit
0001EDA6 6000                       		bra.s	Hud_Lives_End
0001EDA8                            
0001EDA8                            loc_1CAA6:
0001EDA8 4A46                       		tst.w	d6
0001EDAA 6600                       		bne.s	Hud_Lives_DrawDigit
0001EDAC 7200                       		moveq	#0,d1
0001EDAE 1238 FE12                  		move.b	($FFFFFE12).w,d1
0001EDB2 82FC 000A                  		divu.w	#10,d1
0001EDB6 4841                       		swap	d1
0001EDB8 4A41                       		tst.w	d1
0001EDBA 6700                       		beq.s	Hud_Lives_DrawBlank
0001EDBC                            
0001EDBC                            Hud_Lives_DrawDigit:
0001EDBC EB4A                       		lsl.w	#5,d2
0001EDBE 47F1 2000                  		lea	(a1,d2.w),a3
0001EDC2 2C9B                       		move.l	(a3)+,(a6)
0001EDC4 2C9B                       		move.l	(a3)+,(a6)
0001EDC6 2C9B                       		move.l	(a3)+,(a6)
0001EDC8 2C9B                       		move.l	(a3)+,(a6)
0001EDCA 2C9B                       		move.l	(a3)+,(a6)
0001EDCC 2C9B                       		move.l	(a3)+,(a6)
0001EDCE 2C9B                       		move.l	(a3)+,(a6)
0001EDD0 2C9B                       		move.l	(a3)+,(a6)
0001EDD2 0680 0040 0000             		addi.l	#$400000,d0
0001EDD8 2D40 0004                  		move.l	d0,4(a6)
0001EDDC                            		
0001EDDC                            Hud_Lives_Draw10:
0001EDDC 4A46                       		tst.w	d6
0001EDDE 6700                       		beq.s	Hud_Lives_End
0001EDE0 343C 0140                  		move.w	#10*$20,d2
0001EDE4 47F1 2000                  		lea	(a1,d2.w),a3
0001EDE8 2C9B                       		move.l	(a3)+,(a6)
0001EDEA 2C9B                       		move.l	(a3)+,(a6)
0001EDEC 2C9B                       		move.l	(a3)+,(a6)
0001EDEE 2C9B                       		move.l	(a3)+,(a6)
0001EDF0 2C9B                       		move.l	(a3)+,(a6)
0001EDF2 2C9B                       		move.l	(a3)+,(a6)
0001EDF4 2C9B                       		move.l	(a3)+,(a6)
0001EDF6 2C9B                       		move.l	(a3)+,(a6)
0001EDF8 0680 0040 0000             		addi.l	#$400000,d0
0001EDFE 2D40 0004                  		move.l	d0,4(a6)
0001EE02                            		
0001EE02                            Hud_Lives_End:
0001EE02 51CE FF78                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EE06 4E75                       		rts	
0001EE08                            ; ===========================================================================
0001EE08                            
0001EE08                            Hud_Lives_DrawBlank:
0001EE08 7A07                       		moveq	#7,d5
0001EE0A                            
0001EE0A                            Hud_Lives_DrawBlankLoop:
0001EE0A 2CBC 0000 0000             		move.l	#0,(a6)
0001EE10 51CD FFF8                  		dbf	d5,Hud_Lives_DrawBlankLoop
0001EE14 0680 0040 0000             		addi.l	#$400000,d0
0001EE1A 2D40 0004                  		move.l	d0,4(a6)
0001EE1E 60E2                       		bra.s	Hud_Lives_End
0001EE20                            ; End of function Hud_Lives
0001EE20                            
0001EE20                            ; ===========================================================================
0001EE20                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F120                            		even
0001F120                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F280                            		even
0001F280                            ; ===========================================================================
0001F280                            ; ---------------------------------------------------------------------------
0001F280                            ; When debug mode is currently in use
0001F280                            ; ---------------------------------------------------------------------------
0001F280                            
0001F280                            DebugMode:				; XREF: Obj01; Obj09
0001F280 7000                       		moveq	#0,d0
0001F282 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F286 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F28A 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F28E                            ; ===========================================================================
0001F28E 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F290 0000                       		dc.w Debug_Skip-Debug_Index
0001F292                            ; ===========================================================================
0001F292                            
0001F292                            Debug_Main:				; XREF: Debug_Index
0001F292 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F296 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F29C 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F2A2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F2A8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F2AE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F2B4 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F2BA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F2C0 117C 0000 001A             		move.b	#0,$1A(a0)
0001F2C6 117C 0000 001C             		move.b	#0,$1C(a0)
0001F2CC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F2D2 6600                       		bne.s	Debug_Zone	; if not, branch
0001F2D4 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F2DA 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F2E0 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F2E2 6000                       		bra.s	Debug_UseList
0001F2E4                            ; ===========================================================================
0001F2E4                            
0001F2E4                            Debug_Zone:
0001F2E4 7000                       		moveq	#0,d0
0001F2E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F2EA                            
0001F2EA                            Debug_UseList:
0001F2EA 45F9 0000 0000             		lea	(DebugList).l,a2
0001F2F0 D040                       		add.w	d0,d0
0001F2F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F2F6 3C1A                       		move.w	(a2)+,d6
0001F2F8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F2FC 6200                       		bhi.s	loc_1CF9E
0001F2FE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F304                            
0001F304                            loc_1CF9E:
0001F304 6100 0000                  		bsr.w	Debug_ShowItem
0001F308 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F30E 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F314                            
0001F314                            Debug_Skip:				; XREF: Debug_Index
0001F314 7006                       		moveq	#6,d0
0001F316 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F31C 6700                       		beq.s	loc_1CFBE
0001F31E 7000                       		moveq	#0,d0
0001F320 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F324                            
0001F324                            loc_1CFBE:
0001F324 45F9 0000 0000             		lea	(DebugList).l,a2
0001F32A D040                       		add.w	d0,d0
0001F32C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F330 3C1A                       		move.w	(a2)+,d6
0001F332 6100 0000                  		bsr.w	Debug_Control
0001F336 4EF9 0000 F0CA             		jmp	DisplaySprite
0001F33C                            
0001F33C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F33C                            
0001F33C                            
0001F33C                            Debug_Control:
0001F33C 7800                       		moveq	#0,d4
0001F33E 323C 0001                  		move.w	#1,d1
0001F342 1838 F605                  		move.b	($FFFFF605).w,d4
0001F346 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F34A 6600                       		bne.s	loc_1D018	; if yes, branch
0001F34C 1038 F604                  		move.b	($FFFFF604).w,d0
0001F350 0240 000F                  		andi.w	#$F,d0
0001F354 6600                       		bne.s	loc_1D000
0001F356 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F35C 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F362 6000 0000                  		bra.w	Debug_BackItem
0001F366                            ; ===========================================================================
0001F366                            
0001F366                            loc_1D000:
0001F366 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F36A 6600                       		bne.s	loc_1D01C
0001F36C 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F372 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F376 6600                       		bne.s	loc_1D018
0001F378 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F37E                            
0001F37E                            loc_1D018:
0001F37E 1838 F604                  		move.b	($FFFFF604).w,d4
0001F382                            
0001F382                            loc_1D01C:
0001F382 7200                       		moveq	#0,d1
0001F384 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F388 5241                       		addq.w	#1,d1
0001F38A 4841                       		swap	d1
0001F38C E881                       		asr.l	#4,d1
0001F38E 2428 000C                  		move.l	$C(a0),d2
0001F392 2628 0008                  		move.l	8(a0),d3
0001F396 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F39A 6700                       		beq.s	loc_1D03C	; if not, branch
0001F39C 9481                       		sub.l	d1,d2
0001F39E 6400                       		bcc.s	loc_1D03C
0001F3A0 7400                       		moveq	#0,d2
0001F3A2                            
0001F3A2                            loc_1D03C:
0001F3A2 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F3A6 6700                       		beq.s	loc_1D052	; if not, branch
0001F3A8 D481                       		add.l	d1,d2
0001F3AA 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F3B0 6500                       		bcs.s	loc_1D052
0001F3B2 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F3B8                            
0001F3B8                            loc_1D052:
0001F3B8 0804 0002                  		btst	#2,d4
0001F3BC 6700                       		beq.s	loc_1D05E
0001F3BE 9681                       		sub.l	d1,d3
0001F3C0 6400                       		bcc.s	loc_1D05E
0001F3C2 7600                       		moveq	#0,d3
0001F3C4                            
0001F3C4                            loc_1D05E:
0001F3C4 0804 0003                  		btst	#3,d4
0001F3C8 6700                       		beq.s	loc_1D066
0001F3CA D681                       		add.l	d1,d3
0001F3CC                            
0001F3CC                            loc_1D066:
0001F3CC 2142 000C                  		move.l	d2,$C(a0)
0001F3D0 2143 0008                  		move.l	d3,8(a0)
0001F3D4                            
0001F3D4                            Debug_BackItem:
0001F3D4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F3DA 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F3DC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F3E2 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F3E4 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F3E8 6400                       		bcc.s	Debug_NoLoop
0001F3EA DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F3EE 6000                       		bra.s	Debug_NoLoop
0001F3F0                            ; ===========================================================================
0001F3F0                            
0001F3F0                            Debug_NextItem:
0001F3F0 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F3F6 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F3F8 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F3FC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F400 6200                       		bhi.s	Debug_NoLoop
0001F402 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F408                            
0001F408                            Debug_NoLoop:
0001F408 6000 0000                  		bra.w	Debug_ShowItem
0001F40C                            ; ===========================================================================
0001F40C                            
0001F40C                            Debug_MakeItem:
0001F40C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F412 6700                       		beq.s	Debug_Exit	; if not, branch
0001F414 4EB9 0000 F55E             		jsr	SingleObjLoad
0001F41A 6600                       		bne.s	Debug_Exit
0001F41C 3368 0008 0008             		move.w	8(a0),8(a1)
0001F422 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F428 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F42C 1368 0001 0001             		move.b	1(a0),1(a1)
0001F432 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F438 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F43E 7000                       		moveq	#0,d0
0001F440 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F444 E748                       		lsl.w	#3,d0
0001F446 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F44C 4E75                       		rts	
0001F44E                            ; ===========================================================================
0001F44E                            
0001F44E                            Debug_Exit:
0001F44E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F454 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F456 7000                       		moveq	#0,d0
0001F458 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F45C 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F464 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F46A 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F46E 3140 000A                  		move.w	d0,$A(a0)
0001F472 3140 000E                  		move.w	d0,$E(a0)
0001F476 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F47C 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F482 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F488 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F48A 4278 F780                  		clr.w	($FFFFF780).w
0001F48E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F494 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F49C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F4A2 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F4A8 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F4AE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F4B4                            
0001F4B4                            Debug_DoNothing:
0001F4B4 4E75                       		rts	
0001F4B6                            ; End of function Debug_Control
0001F4B6                            
0001F4B6                            
0001F4B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4B6                            
0001F4B6                            
0001F4B6                            Debug_ShowItem:				; XREF: Debug_Main
0001F4B6 7000                       		moveq	#0,d0
0001F4B8 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F4BC E748                       		lsl.w	#3,d0
0001F4BE 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F4C4 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F4CA 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F4D0 4E75                       		rts	
0001F4D2                            ; End of function Debug_ShowItem
0001F4D2                            
0001F4D2                            ; ===========================================================================
0001F4D2                            ; ---------------------------------------------------------------------------
0001F4D2                            ; Debug	list pointers
0001F4D2                            ; ---------------------------------------------------------------------------
0001F4D2                            DebugList:
0001F4D2                            	include "_inc\Debug list pointers.asm"
0001F4D2                            ; ---------------------------------------------------------------------------
0001F4D2                            ; Debug	list pointers
0001F4D2                            ; ---------------------------------------------------------------------------
0001F4D2 0000                       	dc.w Debug_GHZ-DebugList
0001F4D4 0000                       	dc.w Debug_LZ-DebugList
0001F4D6 0000                       	dc.w Debug_MZ-DebugList
0001F4D8 0000                       	dc.w Debug_SLZ-DebugList
0001F4DA 0000                       	dc.w Debug_SYZ-DebugList
0001F4DC 0000                       	dc.w Debug_SBZ-DebugList
0001F4DE 0000                       	dc.w Debug_Ending-DebugList
0001F4DE 0000                       	dc.w Debug_Ending-DebugList
0001F4E0                            
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0                            ; Debug	list - Green Hill
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0                            Debug_GHZ:
0001F4E0                            	include "_inc\Debug list - GHZ.asm"
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0                            ; Debug	list - Green Hill
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0 0010                       	dc.w $10			; number of items in list
0001F4E2 2500 BA82                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F4E6 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001F4EA 2600 C07E                  	dc.l Map_obj26+$26000000
0001F4EE 0000 0680                  	dc.b 0,	0, 6, $80
0001F4F2 1F00 B200                  	dc.l Map_obj1F+$1F000000
0001F4F6 0000 0400                  	dc.b 0,	0, 4, 0
0001F4FA 2200 B4E0                  	dc.l Map_obj22+$22000000
0001F4FE 0000 0444                  	dc.b 0,	0, 4, $44
0001F502 2B00 C6BE                  	dc.l Map_obj2B+$2B000000
0001F506 0000 047B                  	dc.b 0,	0, 4, $7B
0001F50A 3600 EACA                  	dc.l Map_obj36+$36000000
0001F50E 0000 051B                  	dc.b 0,	0, 5, $1B
0001F512 1800 9BFE                  	dc.l Map_obj18+$18000000
0001F516 0000 4000                  	dc.b 0,	0, $40,	0
0001F51A 3B00 EBF0                  	dc.l Map_obj3B+$3B000000
0001F51E 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F522 4001 1272                  	dc.l Map_obj40+$40000000
0001F526 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F52A 4100 F7FC                  	dc.l Map_obj41+$41000000
0001F52E 0000 0523                  	dc.b 0,	0, 5, $23
0001F532 4200 FA22                  	dc.l Map_obj42+$42000000
0001F536 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F53A 4400 FD30                  	dc.l Map_obj44+$44000000
0001F53E 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F542 1900 9C6C                  	dc.l Map_obj48+$19000000
0001F546 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F54A 7901 9132                  	dc.l Map_obj79+$79000000
0001F54E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F552 4B00 BAC2                  	dc.l Map_obj4B+$4B000000
0001F556 0000 2400                  	dc.b 0,	0, $24,	0
0001F55A 7D01 9282                  	dc.l Map_obj7D+$7D000000
0001F55E 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F562                            	even
0001F562                            	even
0001F562                            
0001F562                            ; ---------------------------------------------------------------------------
0001F562                            ; Debug	list - Labyrinth
0001F562                            ; ---------------------------------------------------------------------------
0001F562                            Debug_LZ:
0001F562                            	include "_inc\Debug list - LZ.asm"
0001F562                            ; ---------------------------------------------------------------------------
0001F562                            ; Debug	list - Labyrinth
0001F562                            ; ---------------------------------------------------------------------------
0001F562 0019                       	dc.w $19
0001F564 2500 BA82                  	dc.l Map_obj25+$25000000
0001F568 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F56C 2600 C07E                  	dc.l Map_obj26+$26000000
0001F570 0000 0680                  	dc.b 0,	0, 6, $80
0001F574 4100 F7FC                  	dc.l Map_obj41+$41000000
0001F578 0000 0523                  	dc.b 0,	0, 5, $23
0001F57C 2C00 C764                  	dc.l Map_obj2C+$2C000000
0001F580 0800 2486                  	dc.b 8,	0, $24,	$86
0001F584 2D00 C950                  	dc.l Map_obj2D+$2D000000
0001F588 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F58C 1601 3A5E                  	dc.l Map_obj16+$16000000
0001F590 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F594 1601 3A5E                  	dc.l Map_obj16+$16000000
0001F598 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F59C 3300 DDCE                  	dc.l Map_obj33+$33000000
0001F5A0 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F5A4 3200 D98E                  	dc.l Map_obj32+$32000000
0001F5A8 0000 0513                  	dc.b 0,	0, 5, $13
0001F5AC 3600 EACA                  	dc.l Map_obj36+$36000000
0001F5B0 0000 051B                  	dc.b 0,	0, 5, $1B
0001F5B4 5201 1B80                  	dc.l Map_obj52a+$52000000
0001F5B8 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F5BC 6101 3C86                  	dc.l Map_obj61+$61000000
0001F5C0 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F5C4 6101 3C86                  	dc.l Map_obj61+$61000000
0001F5C8 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F5CC 6101 3C86                  	dc.l Map_obj61+$61000000
0001F5D0 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F5D4 6201 3DDA                  	dc.l Map_obj62+$62000000
0001F5D8 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F5DC 6101 3C86                  	dc.l Map_obj61+$61000000
0001F5E0 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F5E4 6101 3C86                  	dc.l Map_obj61+$61000000
0001F5E8 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F5EC 6301 413C                  	dc.l Map_obj63+$63000000
0001F5F0 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F5F4 6001 39A8                  	dc.l Map_obj60+$60000000
0001F5F8 0000 0467                  	dc.b 0,	0, 4, $67
0001F5FC 6401 4480                  	dc.l Map_obj64+$64000000
0001F600 8413 8348                  	dc.b $84, $13, $83, $48
0001F604 6501 4608                  	dc.l Map_obj65+$65000000
0001F608 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F60C 6501 4608                  	dc.l Map_obj65+$65000000
0001F610 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F614 0B01 2DF8                  	dc.l Map_obj0B+$B000000
0001F618 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F61C 0C01 2EC8                  	dc.l Map_obj0C+$C000000
0001F620 0200 4328                  	dc.b 2,	0, $43,	$28
0001F624 7901 9132                  	dc.l Map_obj79+$79000000
0001F628 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F62C                            	even
0001F62C                            	even
0001F62C                            
0001F62C                            ; ---------------------------------------------------------------------------
0001F62C                            ; Debug	list - Marble
0001F62C                            ; ---------------------------------------------------------------------------
0001F62C                            Debug_MZ:
0001F62C                            	include "_inc\Debug list - MZ.asm"
0001F62C                            ; ---------------------------------------------------------------------------
0001F62C                            ; Debug	list - Marble
0001F62C                            ; ---------------------------------------------------------------------------
0001F62C 0012                       	dc.w $12
0001F62E 2500 BA82                  	dc.l Map_obj25+$25000000
0001F632 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F636 2600 C07E                  	dc.l Map_obj26+$26000000
0001F63A 0000 0680                  	dc.b 0,	0, 6, $80
0001F63E 2200 B4E0                  	dc.l Map_obj22+$22000000
0001F642 0000 0444                  	dc.b 0,	0, 4, $44
0001F646 3600 EACA                  	dc.l Map_obj36+$36000000
0001F64A 0000 051B                  	dc.b 0,	0, 5, $1B
0001F64E 4100 F7FC                  	dc.l Map_obj41+$41000000
0001F652 0000 0523                  	dc.b 0,	0, 5, $23
0001F656 1300 CE5E                  	dc.l Map_obj14+$13000000
0001F65A 0000 0345                  	dc.b 0,	0, 3, $45
0001F65E 4601 03E2                  	dc.l Map_obj46+$46000000
0001F662 0000 4000                  	dc.b 0,	0, $40,	0
0001F666 4C01 0D1E                  	dc.l Map_obj4C+$4C000000
0001F66A 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F66E 4E01 1002                  	dc.l Map_obj4E+$4E000000
0001F672 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F676 3300 DDCE                  	dc.l Map_obj33+$33000000
0001F67A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F67E 5001 1400                  	dc.l Map_obj50+$50000000
0001F682 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F686 5101 18B4                  	dc.l Map_obj51+$51000000
0001F68A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F68E 5201 1B2A                  	dc.l Map_obj52+$52000000
0001F692 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F696 5300 A204                  	dc.l Map_obj53+$53000000
0001F69A 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F69E 5401 0CE4                  	dc.l Map_obj54+$54000000
0001F6A2 0000 8680                  	dc.b 0,	0, $86,	$80
0001F6A6 5501 1D1E                  	dc.l Map_obj55+$55000000
0001F6AA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F6AE 7801 8DAC                  	dc.l Map_obj78+$78000000
0001F6B2 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F6B6 7901 9132                  	dc.l Map_obj79+$79000000
0001F6BA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F6BE                            	even
0001F6BE                            	even
0001F6BE                            
0001F6BE                            ; ---------------------------------------------------------------------------
0001F6BE                            ; Debug	list - Star Light
0001F6BE                            ; ---------------------------------------------------------------------------
0001F6BE                            Debug_SLZ:
0001F6BE                            	include "_inc\Debug list - SLZ.asm"
0001F6BE                            ; ---------------------------------------------------------------------------
0001F6BE                            ; Debug	list - Star Light
0001F6BE                            ; ---------------------------------------------------------------------------
0001F6BE 000F                       	dc.w $F
0001F6C0 2500 BA82                  	dc.l Map_obj25+$25000000
0001F6C4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F6C8 2600 C07E                  	dc.l Map_obj26+$26000000
0001F6CC 0000 0680                  	dc.b 0,	0, 6, $80
0001F6D0 5901 2820                  	dc.l Map_obj59+$59000000
0001F6D4 0000 4000                  	dc.b 0,	0, $40,	0
0001F6D8 5300 A204                  	dc.l Map_obj53+$53000000
0001F6DC 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F6E0 1800 9C5C                  	dc.l Map_obj18b+$18000000
0001F6E4 0000 4000                  	dc.b 0,	0, $40,	0
0001F6E8 5A01 295A                  	dc.l Map_obj5A+$5A000000
0001F6EC 0000 4000                  	dc.b 0,	0, $40,	0
0001F6F0 5B01 2B12                  	dc.l Map_obj5B+$5B000000
0001F6F4 0000 4000                  	dc.b 0,	0, $40,	0
0001F6F8 5D01 30E2                  	dc.l Map_obj5D+$5D000000
0001F6FC 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F700 5E01 3474                  	dc.l Map_obj5E+$5E000000
0001F704 0000 0374                  	dc.b 0,	0, 3, $74
0001F708 4100 F7FC                  	dc.l Map_obj41+$41000000
0001F70C 0000 0523                  	dc.b 0,	0, 5, $23
0001F710 1300 CE5E                  	dc.l Map_obj14+$13000000
0001F714 0000 0480                  	dc.b 0,	0, 4, $80
0001F718 1C00 A314                  	dc.l Map_obj1C+$1C000000
0001F71C 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F720 5F01 36F2                  	dc.l Map_obj5F+$5F000000
0001F724 0000 0400                  	dc.b 0,	0, 4, 0
0001F728 6001 39A8                  	dc.l Map_obj60+$60000000
0001F72C 0000 2429                  	dc.b 0,	0, $24,	$29
0001F730 7901 9132                  	dc.l Map_obj79+$79000000
0001F734 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F738                            	even
0001F738                            	even
0001F738                            
0001F738                            ; ---------------------------------------------------------------------------
0001F738                            ; Debug	list - Spring Yard
0001F738                            ; ---------------------------------------------------------------------------
0001F738                            Debug_SYZ:
0001F738                            	include "_inc\Debug list - SYZ.asm"
0001F738                            ; ---------------------------------------------------------------------------
0001F738                            ; Debug	list - Spring Yard
0001F738                            ; ---------------------------------------------------------------------------
0001F738 000F                       	dc.w $F
0001F73A 2500 BA82                  	dc.l Map_obj25+$25000000
0001F73E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F742 2600 C07E                  	dc.l Map_obj26+$26000000
0001F746 0000 0680                  	dc.b 0,	0, 6, $80
0001F74A 3600 EACA                  	dc.l Map_obj36+$36000000
0001F74E 0000 051B                  	dc.b 0,	0, 5, $1B
0001F752 4100 F7FC                  	dc.l Map_obj41+$41000000
0001F756 0000 0523                  	dc.b 0,	0, 5, $23
0001F75A 4300 FC82                  	dc.l Map_obj43+$43000000
0001F75E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F762 1201 0460                  	dc.l Map_obj12+$12000000
0001F766 0000 0000                  	dc.b 0,	0, 0, 0
0001F76A 4701 05DC                  	dc.l Map_obj47+$47000000
0001F76E 0000 0380                  	dc.b 0,	0, 3, $80
0001F772 1F00 B200                  	dc.l Map_obj1F+$1F000000
0001F776 0000 0400                  	dc.b 0,	0, 4, 0
0001F77A 2200 B4E0                  	dc.l Map_obj22+$22000000
0001F77E 0000 0444                  	dc.b 0,	0, 4, $44
0001F782 5001 1400                  	dc.l Map_obj50+$50000000
0001F786 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F78A 1800 9C4A                  	dc.l Map_obj18a+$18000000
0001F78E 0000 4000                  	dc.b 0,	0, $40,	0
0001F792 5601 21E0                  	dc.l Map_obj56+$56000000
0001F796 0000 4000                  	dc.b 0,	0, $40,	0
0001F79A 3200 D98E                  	dc.l Map_obj32+$32000000
0001F79E 0000 0513                  	dc.b 0,	0, 5, $13
0001F7A2 7801 8DAC                  	dc.l Map_obj78+$78000000
0001F7A6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F7AA 7901 9132                  	dc.l Map_obj79+$79000000
0001F7AE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F7B2                            	even
0001F7B2                            	even
0001F7B2                            
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2                            ; Debug	list - Scrap Brain
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2                            Debug_SBZ:
0001F7B2                            	include "_inc\Debug list - SBZ.asm"
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2                            ; Debug	list - Scrap Brain
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2 001D                       	dc.w $1D
0001F7B4 2500 BA82                  	dc.l Map_obj25+$25000000
0001F7B8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F7BC 2600 C07E                  	dc.l Map_obj26+$26000000
0001F7C0 0000 0680                  	dc.b 0,	0, 6, $80
0001F7C4 5F01 36F2                  	dc.l Map_obj5F+$5F000000
0001F7C8 0000 0400                  	dc.b 0,	0, 4, 0
0001F7CC 6001 39A8                  	dc.l Map_obj60+$60000000
0001F7D0 0000 0429                  	dc.b 0,	0, 4, $29
0001F7D4 7801 8DAC                  	dc.l Map_obj78+$78000000
0001F7D8 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F7DC 1501 257C                  	dc.l Map_obj15b+$15000000
0001F7E0 0702 4391                  	dc.b 7,	2, $43,	$91
0001F7E4 6701 76CC                  	dc.l Map_obj67+$67000000
0001F7E8 E000 C344                  	dc.b $E0, 0, $C3, $44
0001F7EC 5201 1B2A                  	dc.l Map_obj52+$52000000
0001F7F0 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F7F4 3200 D98E                  	dc.l Map_obj32+$32000000
0001F7F8 0000 0513                  	dc.b 0,	0, 5, $13
0001F7FC 6901 7926                  	dc.l Map_obj69+$69000000
0001F800 0300 4492                  	dc.b 3,	0, $44,	$92
0001F804 6901 7980                  	dc.l Map_obj69a+$69000000
0001F808 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F80C 6A01 7BDE                  	dc.l Map_obj6A+$6A000000
0001F810 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F814 5300 A204                  	dc.l Map_obj53+$53000000
0001F818 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F81C 5201 1B2A                  	dc.l Map_obj52+$52000000
0001F820 3903 4460                  	dc.b $39, 3, $44, $60
0001F824 6B01 7FAE                  	dc.l Map_obj6B+$6B000000
0001F828 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F82C 2A00 A4AA                  	dc.l Map_obj2A+$2A000000
0001F830 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F834 6B01 7FAE                  	dc.l Map_obj6B+$6B000000
0001F838 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F83C 6A01 7BDE                  	dc.l Map_obj6A+$6A000000
0001F840 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F844 6B01 7FAE                  	dc.l Map_obj6B+$6B000000
0001F848 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F84C 6A01 7BDE                  	dc.l Map_obj6A+$6A000000
0001F850 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F854 6B01 7FAE                  	dc.l Map_obj6B+$6B000000
0001F858 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F85C 6C01 8170                  	dc.l Map_obj6C+$6C000000
0001F860 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F864 6D01 00D2                  	dc.l Map_obj6D+$6D000000
0001F868 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F86C 6D01 00D2                  	dc.l Map_obj6D+$6D000000
0001F870 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F874 6E01 8226                  	dc.l Map_obj6E+$6E000000
0001F878 0400 047E                  	dc.b 4,	0, 4, $7E
0001F87C 7001 866C                  	dc.l Map_obj70+$70000000
0001F880 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F884 7101 2F88                  	dc.l Map_obj71+$71000000
0001F888 1100 8680                  	dc.b $11, 0, $86, $80
0001F88C 1E00 A918                  	dc.l Map_obj1E+$1E000000
0001F890 0400 2302                  	dc.b 4,	0, $23,	2
0001F894 7901 9132                  	dc.l Map_obj79+$79000000
0001F898 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F89C                            	even
0001F89C                            	even
0001F89C                            
0001F89C                            ; ---------------------------------------------------------------------------
0001F89C                            ; Debug	list - ending sequence / special stage
0001F89C                            ; ---------------------------------------------------------------------------
0001F89C                            Debug_Ending:
0001F89C                            	include "_inc\Debug list - Ending and SS.asm"
0001F89C                            ; ---------------------------------------------------------------------------
0001F89C                            ; Debug	list - ending sequence / special stage
0001F89C                            ; ---------------------------------------------------------------------------
0001F89C 000D                       	dc.w $D
0001F89E 2500 BA82                  	dc.l Map_obj25+$25000000
0001F8A2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F8A6 4701 05DC                  	dc.l Map_obj47+$47000000
0001F8AA 0000 0380                  	dc.b 0,	0, 3, $80
0001F8AE 2800 AF32                  	dc.l Map_obj28a+$28000000
0001F8B2 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F8B6 2800 AF32                  	dc.l Map_obj28a+$28000000
0001F8BA 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F8BE 2800 AF32                  	dc.l Map_obj28a+$28000000
0001F8C2 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F8C6 2800 AF1A                  	dc.l Map_obj28+$28000000
0001F8CA 0D00 0553                  	dc.b $D, 0, 5, $53
0001F8CE 2800 AF1A                  	dc.l Map_obj28+$28000000
0001F8D2 0E00 0553                  	dc.b $E, 0, 5, $53
0001F8D6 2800 AF1A                  	dc.l Map_obj28+$28000000
0001F8DA 0F00 0573                  	dc.b $F, 0, 5, $73
0001F8DE 2800 AF1A                  	dc.l Map_obj28+$28000000
0001F8E2 1000 0573                  	dc.b $10, 0, 5,	$73
0001F8E6 2800 AF32                  	dc.l Map_obj28a+$28000000
0001F8EA 1100 0585                  	dc.b $11, 0, 5,	$85
0001F8EE 2800 AF4A                  	dc.l Map_obj28b+$28000000
0001F8F2 1200 0593                  	dc.b $12, 0, 5,	$93
0001F8F6 2800 AF32                  	dc.l Map_obj28a+$28000000
0001F8FA 1300 0565                  	dc.b $13, 0, 5,	$65
0001F8FE 2800 AF4A                  	dc.l Map_obj28b+$28000000
0001F902 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F906                            	even
0001F906                            	even
0001F906                            
0001F906                            ; ---------------------------------------------------------------------------
0001F906                            ; Main level load blocks
0001F906                            ; ---------------------------------------------------------------------------
0001F906                            MainLoadBlocks:
0001F906                            	include "_inc\Main level load blocks.asm"
0001F906                            ; ---------------------------------------------------------------------------
0001F906                            ; Main level load blocks
0001F906                            ;
0001F906                            ; ===FORMAT===
0001F906                            ; level	patterns + (1st	PLC num	* 10^6)
0001F906                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F906                            ; 256x256 mappings
0001F906                            ; blank, music (unused), pal index (unused), pal index
0001F906                            ; ---------------------------------------------------------------------------
0001F906 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F90A 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F90E 0000 0000                  	dc.l Blk256_GHZ
0001F912 0081 0404                  	dc.b 0,	$81, 4,	4
0001F916 0000 0000                  	dc.l Nem_LZ+$6000000
0001F91A 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F91E 0000 0000                  	dc.l Blk256_LZ
0001F922 0082 0505                  	dc.b 0,	$82, 5,	5
0001F926 0000 0000                  	dc.l Nem_MZ+$8000000
0001F92A 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F92E 0000 0000                  	dc.l Blk256_MZ
0001F932 0083 0606                  	dc.b 0,	$83, 6,	6
0001F936 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F93A 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F93E 0000 0000                  	dc.l Blk256_SLZ
0001F942 0084 0707                  	dc.b 0,	$84, 7,	7
0001F946 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F94A 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F94E 0000 0000                  	dc.l Blk256_SYZ
0001F952 0085 0808                  	dc.b 0,	$85, 8,	8
0001F956 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F95A 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F95E 0000 0000                  	dc.l Blk256_SBZ
0001F962 0086 0909                  	dc.b 0,	$86, 9,	9
0001F966 0000 0000                  	dc.l Nem_GHZ	; main load block for ending
0001F96A 0000 0000                  	dc.l Blk16_GHZ
0001F96E 0000 0000                  	dc.l Blk256_GHZ
0001F972 0086 1313                  	dc.b 0,	$86, $13, $13
0001F976                            	even
0001F976                            	even
0001F976                            
0001F976                            ; ---------------------------------------------------------------------------
0001F976                            ; Pattern load cues
0001F976                            ; ---------------------------------------------------------------------------
0001F976                            ArtLoadCues:
0001F976                            	include "_inc\Pattern load cues.asm"
0001F976                            ; ---------------------------------------------------------------------------
0001F976                            ; Pattern load cues - index
0001F976                            ; ---------------------------------------------------------------------------
0001F976 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F97A 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F97E 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F982 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F986 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F98A 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F98E 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F992 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F996 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F99A 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F99E 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F9A2 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F9A6 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F9AA 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F9AE 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F9B2 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F9B6 0000 0000 0000             	dc.w PLC_TS-ArtLoadCues, PLC_TS2-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F9BC                            ; ---------------------------------------------------------------------------
0001F9BC                            ; Pattern load cues - standard block 1
0001F9BC                            ; ---------------------------------------------------------------------------
0001F9BC 0005                       PLC_Main:	dc.w 5
0001F9BE 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F9C2 D800                       		dc.w $D800
0001F9C4 0000 0000                  		dc.l Nem_Hud		; HUD
0001F9C8 D940                       		dc.w $D940
0001F9CA 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F9CE FA80                       		dc.w $FA80
0001F9D0 0000 0000                  		dc.l Nem_LivesPic	; lives	counter pic
0001F9D4 ACA0                       		dc.w $ACA0
0001F9D6 0000 0000                  		dc.l Nem_Ring		; rings
0001F9DA F640                       		dc.w $F640
0001F9DC 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F9E0 F2E0                       		dc.w $F2E0
0001F9E2                            ; ---------------------------------------------------------------------------
0001F9E2                            ; Pattern load cues - standard block 2
0001F9E2                            ; ---------------------------------------------------------------------------
0001F9E2 0000                       PLC_Main2:	dc.w 0
0001F9E4 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F9E8 D000                       		dc.w $D000
0001F9EA                            ; ---------------------------------------------------------------------------
0001F9EA                            ; Pattern load cues - explosion
0001F9EA                            ; ---------------------------------------------------------------------------
0001F9EA 0000                       PLC_Explode:	dc.w 0
0001F9EC 0000 0000                  		dc.l Nem_Explode	; explosion
0001F9F0 B400                       		dc.w $B400
0001F9F2                            ; ---------------------------------------------------------------------------
0001F9F2                            ; Pattern load cues - game/time	over
0001F9F2                            ; ---------------------------------------------------------------------------
0001F9F2 0000                       PLC_GameOver:	dc.w 0
0001F9F4 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F9F8 ABC0                       		dc.w $ABC0
0001F9FA                            
0001F9FA                            ; ---------------------------------------------------------------------------
0001F9FA                            ; Pattern load cues - Title
0001F9FA                            ; ---------------------------------------------------------------------------
0001F9FA 0001                       PLC_TS:	dc.w $1
0001F9FC 0000 0000                  		dc.l Nem_TIT_1st		; GHZ main patterns
0001FA00 0000                       		dc.w 0
0001FA02 0000                       PLC_TS2:	dc.w 0
0001FA04                            
0001FA04                            ; ---------------------------------------------------------------------------
0001FA04                            ; Pattern load cues - Green Hill
0001FA04                            ; ---------------------------------------------------------------------------
0001FA04 000A                       PLC_GHZ:	dc.w $A
0001FA06 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001FA0A 0000                       		dc.w 0
0001FA0C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FA10 6B00                       		dc.w $6B00
0001FA12 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FA16 7A00                       		dc.w $7A00
0001FA18 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FA1C 8000                       		dc.w $8000
0001FA1E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FA22 8880                       		dc.w $8880
0001FA24 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FA28 8F60                       		dc.w $8F60
0001FA2A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FA2E 9360                       		dc.w $9360
0001FA30 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FA34 9E00                       		dc.w $9E00
0001FA36 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA3A A360                       		dc.w $A360
0001FA3C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA40 A460                       		dc.w $A460
0001FA42 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA46 A660                       		dc.w $A660
0001FA48 0005                       PLC_GHZ2:	dc.w 5
0001FA4A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FA4E 7000                       		dc.w $7000
0001FA50 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FA54 71C0                       		dc.w $71C0
0001FA56 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FA5A 7300                       		dc.w $7300
0001FA5C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FA60 7540                       		dc.w $7540
0001FA62 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FA66 A1E0                       		dc.w $A1E0
0001FA68 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FA6C 6980                       		dc.w $6980
0001FA6E                            ; ---------------------------------------------------------------------------
0001FA6E                            ; Pattern load cues - Labyrinth
0001FA6E                            ; ---------------------------------------------------------------------------
0001FA6E 000B                       PLC_LZ:		dc.w $B
0001FA70 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001FA74 0000                       		dc.w 0
0001FA76 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FA7A 3C00                       		dc.w $3C00
0001FA7C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FA80 3E00                       		dc.w $3E00
0001FA82 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FA86 4B20                       		dc.w $4B20
0001FA88 0000 0000                  		dc.l Nem_Water		; water	surface
0001FA8C 6000                       		dc.w $6000
0001FA8E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FA92 6200                       		dc.w $6200
0001FA94 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FA98 6500                       		dc.w $6500
0001FA9A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FA9E 6900                       		dc.w $6900
0001FAA0 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FAA4 7780                       		dc.w $7780
0001FAA6 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FAAA 7880                       		dc.w $7880
0001FAAC 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FAB0 7980                       		dc.w $7980
0001FAB2 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FAB6 94C0                       		dc.w $94C0
0001FAB8 000C                       PLC_LZ2:	dc.w $C
0001FABA 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FABE 7BC0                       		dc.w $7BC0
0001FAC0 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FAC4 7CC0                       		dc.w $7CC0
0001FAC6 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FACA 7EC0                       		dc.w $7EC0
0001FACC 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FAD0 5D20                       		dc.w $5D20
0001FAD2 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FAD6 8800                       		dc.w $8800
0001FAD8 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FADC 89E0                       		dc.w $89E0
0001FADE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FAE2 8CE0                       		dc.w $8CE0
0001FAE4 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FAE8 90C0                       		dc.w $90C0
0001FAEA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FAEE A1E0                       		dc.w $A1E0
0001FAF0 0000 0000                  		dc.l Nem_Cork		; cork block
0001FAF4 A000                       		dc.w $A000
0001FAF6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FAFA A360                       		dc.w $A360
0001FAFC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB00 A460                       		dc.w $A460
0001FB02 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB06 A660                       		dc.w $A660
0001FB08                            ; ---------------------------------------------------------------------------
0001FB08                            ; Pattern load cues - Marble
0001FB08                            ; ---------------------------------------------------------------------------
0001FB08 0009                       PLC_MZ:		dc.w 9
0001FB0A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001FB0E 0000                       		dc.w 0
0001FB10 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FB14 6000                       		dc.w $6000
0001FB16 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FB1A 68A0                       		dc.w $68A0
0001FB1C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FB20 7000                       		dc.w $7000
0001FB22 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FB26 71C0                       		dc.w $71C0
0001FB28 0000 0000                  		dc.l Nem_Lava		; lava
0001FB2C 7500                       		dc.w $7500
0001FB2E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FB32 8880                       		dc.w $8880
0001FB34 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FB38 8F60                       		dc.w $8F60
0001FB3A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FB3E 9700                       		dc.w $9700
0001FB40 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FB44 9FE0                       		dc.w $9FE0
0001FB46 0004                       PLC_MZ2:	dc.w 4
0001FB48 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FB4C A260                       		dc.w $A260
0001FB4E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB52 A360                       		dc.w $A360
0001FB54 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB58 A460                       		dc.w $A460
0001FB5A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB5E A660                       		dc.w $A660
0001FB60 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FB64 5700                       		dc.w $5700
0001FB66                            ; ---------------------------------------------------------------------------
0001FB66                            ; Pattern load cues - Star Light
0001FB66                            ; ---------------------------------------------------------------------------
0001FB66 0008                       PLC_SLZ:	dc.w 8
0001FB68 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001FB6C 0000                       		dc.w 0
0001FB6E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FB72 8000                       		dc.w $8000
0001FB74 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FB78 8520                       		dc.w $8520
0001FB7A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FB7E 9000                       		dc.w $9000
0001FB80 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FB84 9C00                       		dc.w $9C00
0001FB86 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FB8A A260                       		dc.w $A260
0001FB8C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB90 A360                       		dc.w $A360
0001FB92 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB96 A460                       		dc.w $A460
0001FB98 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB9C A660                       		dc.w $A660
0001FB9E 0005                       PLC_SLZ2:	dc.w 5
0001FBA0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FBA4 6E80                       		dc.w $6E80
0001FBA6 0000 0000                  		dc.l Nem_Fan		; fan
0001FBAA 7400                       		dc.w $7400
0001FBAC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FBB0 7980                       		dc.w $7980
0001FBB2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FBB6 7B80                       		dc.w $7B80
0001FBB8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FBBC 9B00                       		dc.w $9B00
0001FBBE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FBC2 9E00                       		dc.w $9E00
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4                            ; Pattern load cues - Spring Yard
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4 0004                       PLC_SYZ:	dc.w 4
0001FBC6 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001FBCA 0000                       		dc.w 0
0001FBCC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FBD0 8000                       		dc.w $8000
0001FBD2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FBD6 8880                       		dc.w $8880
0001FBD8 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FBDC 8F60                       		dc.w $8F60
0001FBDE 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FBE2 9700                       		dc.w $9700
0001FBE4 0007                       PLC_SYZ2:	dc.w 7
0001FBE6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FBEA 7000                       		dc.w $7000
0001FBEC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FBF0 72C0                       		dc.w $72C0
0001FBF2 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FBF6 7740                       		dc.w $7740
0001FBF8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FBFC 9FE0                       		dc.w $9FE0
0001FBFE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FC02 A1E0                       		dc.w $A1E0
0001FC04 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC08 A360                       		dc.w $A360
0001FC0A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC0E A460                       		dc.w $A460
0001FC10 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC14 A660                       		dc.w $A660
0001FC16                            ; ---------------------------------------------------------------------------
0001FC16                            ; Pattern load cues - Scrap Brain
0001FC16                            ; ---------------------------------------------------------------------------
0001FC16 000B                       PLC_SBZ:	dc.w $B
0001FC18 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001FC1C 0000                       		dc.w 0
0001FC1E 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FC22 5800                       		dc.w $5800
0001FC24 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FC28 5D00                       		dc.w $5D00
0001FC2A 0000 0000                  		dc.l Nem_Girder		; girder
0001FC2E 5E00                       		dc.w $5E00
0001FC30 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FC34 6040                       		dc.w $6040
0001FC36 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FC3A 6880                       		dc.w $6880
0001FC3C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FC40 6900                       		dc.w $6900
0001FC42 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FC46 7220                       		dc.w $7220
0001FC48 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FC4C 76A0                       		dc.w $76A0
0001FC4E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FC52 7B20                       		dc.w $7B20
0001FC54 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FC58 7EA0                       		dc.w $7EA0
0001FC5A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FC5E 9860                       		dc.w $9860
0001FC60 000C                       PLC_SBZ2:	dc.w $C
0001FC62 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FC66 5600                       		dc.w $5600
0001FC68 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FC6C 8000                       		dc.w $8000
0001FC6E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FC72 8520                       		dc.w $8520
0001FC74 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FC78 8C00                       		dc.w $8C00
0001FC7A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FC7E 8DE0                       		dc.w $8DE0
0001FC80 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FC84 8FC0                       		dc.w $8FC0
0001FC86 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FC8A 9240                       		dc.w $9240
0001FC8C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FC90 7F20                       		dc.w $7F20
0001FC92 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FC96 9BE0                       		dc.w $9BE0
0001FC98 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FC9C A1E0                       		dc.w $A1E0
0001FC9E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCA2 A360                       		dc.w $A360
0001FCA4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCA8 A460                       		dc.w $A460
0001FCAA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCAE A660                       		dc.w $A660
0001FCB0                            ; ---------------------------------------------------------------------------
0001FCB0                            ; Pattern load cues - title card
0001FCB0                            ; ---------------------------------------------------------------------------
0001FCB0 0000                       PLC_TitleCard:	dc.w 0
0001FCB2 0000 0000                  		dc.l Nem_TitleCard
0001FCB6 B000                       		dc.w $B000
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8                            ; Pattern load cues - act 3 boss
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8 0005                       PLC_Boss:	dc.w 5
0001FCBA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FCBE 8000                       		dc.w $8000
0001FCC0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FCC4 8D80                       		dc.w $8D80
0001FCC6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FCCA 93A0                       		dc.w $93A0
0001FCCC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FCD0 A300                       		dc.w $A300
0001FCD2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FCD6 A300                       		dc.w $A300
0001FCD8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FCDC A540                       		dc.w $A540
0001FCDE                            ; ---------------------------------------------------------------------------
0001FCDE                            ; Pattern load cues - act 1/2 signpost
0001FCDE                            ; ---------------------------------------------------------------------------
0001FCDE 0002                       PLC_Signpost:	dc.w 2
0001FCE0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FCE4 D000                       		dc.w $680*$20
0001FCE6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FCEA 96C0                       		dc.w $96C0
0001FCEC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FCF0 8C40                       		dc.w $8C40
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2                            ; Pattern load cues - beta special stage warp effect
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2 0000                       PLC_Warp:	dc.w 0
0001FCF4 0000 0000                  		dc.l Nem_Warp
0001FCF8 A820                       		dc.w $A820
0001FCFA                            ; ---------------------------------------------------------------------------
0001FCFA                            ; Pattern load cues - special stage
0001FCFA                            ; ---------------------------------------------------------------------------
0001FCFA 0010                       PLC_SpeStage:	dc.w $10
0001FCFC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FD00 0000                       		dc.w 0
0001FD02 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FD06 0A20                       		dc.w $A20
0001FD08 0000 0000                  		dc.l Nem_SSWalls	; walls
0001FD0C 2840                       		dc.w $2840
0001FD0E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FD12 4760                       		dc.w $4760
0001FD14 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FD18 4A20                       		dc.w $4A20
0001FD1A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FD1E 4C60                       		dc.w $4C60
0001FD20 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FD24 5E00                       		dc.w $5E00
0001FD26 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FD2A 6E00                       		dc.w $6E00
0001FD2C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FD30 7E00                       		dc.w $7E00
0001FD32 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FD36 8E00                       		dc.w $8E00
0001FD38 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FD3C 9E00                       		dc.w $9E00
0001FD3E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001FD42 AE00                       		dc.w $AE00
0001FD44 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FD48 BE00                       		dc.w $BE00
0001FD4A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FD4E EE00                       		dc.w $EE00
0001FD50 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001FD54 F2E0                       		dc.w $F2E0
0001FD56 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001FD5A F400                       		dc.w $F400
0001FD5C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001FD60 F520                       		dc.w $F520
0001FD62 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001FD66 F2E0                       		dc.w $F2E0
0001FD68 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001FD6C F400                       		dc.w $F400
0001FD6E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001FD72 F520                       		dc.w $F520
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74                            ; Pattern load cues - GHZ animals
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74 0001                       PLC_GHZAnimals:	dc.w 1
0001FD76 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FD7A B000                       		dc.w $B000
0001FD7C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FD80 B240                       		dc.w $B240
0001FD82                            ; ---------------------------------------------------------------------------
0001FD82                            ; Pattern load cues - LZ animals
0001FD82                            ; ---------------------------------------------------------------------------
0001FD82 0001                       PLC_LZAnimals:	dc.w 1
0001FD84 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FD88 B000                       		dc.w $B000
0001FD8A 0000 0000                  		dc.l Nem_Seal		; seal
0001FD8E B240                       		dc.w $B240
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90                            ; Pattern load cues - MZ animals
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90 0001                       PLC_MZAnimals:	dc.w 1
0001FD92 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FD96 B000                       		dc.w $B000
0001FD98 0000 0000                  		dc.l Nem_Seal		; seal
0001FD9C B240                       		dc.w $B240
0001FD9E                            ; ---------------------------------------------------------------------------
0001FD9E                            ; Pattern load cues - SLZ animals
0001FD9E                            ; ---------------------------------------------------------------------------
0001FD9E 0001                       PLC_SLZAnimals:	dc.w 1
0001FDA0 0000 0000                  		dc.l Nem_Pig		; pig
0001FDA4 B000                       		dc.w $B000
0001FDA6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FDAA B240                       		dc.w $B240
0001FDAC                            ; ---------------------------------------------------------------------------
0001FDAC                            ; Pattern load cues - SYZ animals
0001FDAC                            ; ---------------------------------------------------------------------------
0001FDAC 0001                       PLC_SYZAnimals:	dc.w 1
0001FDAE 0000 0000                  		dc.l Nem_Pig		; pig
0001FDB2 B000                       		dc.w $B000
0001FDB4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FDB8 B240                       		dc.w $B240
0001FDBA                            ; ---------------------------------------------------------------------------
0001FDBA                            ; Pattern load cues - SBZ animals
0001FDBA                            ; ---------------------------------------------------------------------------
0001FDBA 0001                       PLC_SBZAnimals:	dc.w 1
0001FDBC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FDC0 B000                       		dc.w $B000
0001FDC2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FDC6 B240                       		dc.w $B240
0001FDC8                            ; ---------------------------------------------------------------------------
0001FDC8                            ; Pattern load cues - special stage results screen
0001FDC8                            ; ---------------------------------------------------------------------------
0001FDC8 0001                       PLC_SpeStResult:dc.w 1
0001FDCA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FDCE A820                       		dc.w $A820
0001FDD0 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FDD4 AA20                       		dc.w $AA20
0001FDD6                            ; ---------------------------------------------------------------------------
0001FDD6                            ; Pattern load cues - ending sequence
0001FDD6                            ; ---------------------------------------------------------------------------
0001FDD6 000E                       PLC_Ending:	dc.w $E
0001FDD8 0000 0000                  		dc.l Nem_TIT_1st	; Title main patterns
0001FDDC 0000                       		dc.w 0
0001FDDE 0000 0000                  		dc.l Nem_TIT_2nd	; Title secondary patterns
0001FDE2 39A0                       		dc.w $39A0
0001FDE4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FDE8 6B00                       		dc.w $6B00
0001FDEA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FDEE 7400                       		dc.w $7400
0001FDF0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FDF4 78A0                       		dc.w $78A0
0001FDF6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FDFA 7C20                       		dc.w $7C20
0001FDFC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FE00 A480                       		dc.w $A480
0001FE02 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE06 AA60                       		dc.w $AA60
0001FE08 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FE0C ACA0                       		dc.w $ACA0
0001FE0E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FE12 AE60                       		dc.w $AE60
0001FE14 0000 0000                  		dc.l Nem_Seal		; seal
0001FE18 B0A0                       		dc.w $B0A0
0001FE1A 0000 0000                  		dc.l Nem_Pig		; pig
0001FE1E B260                       		dc.w $B260
0001FE20 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE24 B4A0                       		dc.w $B4A0
0001FE26 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FE2A B660                       		dc.w $B660
0001FE2C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FE30 B8A0                       		dc.w $B8A0
0001FE32                            ; ---------------------------------------------------------------------------
0001FE32                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FE32                            ; ---------------------------------------------------------------------------
0001FE32 0002                       PLC_TryAgain:	dc.w 2
0001FE34 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FE38 78A0                       		dc.w $78A0
0001FE3A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FE3E 7C20                       		dc.w $7C20
0001FE40 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FE44 B400                       		dc.w $B400
0001FE46                            ; ---------------------------------------------------------------------------
0001FE46                            ; Pattern load cues - Eggman on SBZ 2
0001FE46                            ; ---------------------------------------------------------------------------
0001FE46 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FE48 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FE4C A300                       		dc.w $A300
0001FE4E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FE52 8000                       		dc.w $8000
0001FE54 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FE58 9400                       		dc.w $9400
0001FE5A                            ; ---------------------------------------------------------------------------
0001FE5A                            ; Pattern load cues - final boss
0001FE5A                            ; ---------------------------------------------------------------------------
0001FE5A 0004                       PLC_FZBoss:	dc.w 4
0001FE5C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FE60 7400                       		dc.w $7400
0001FE62 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FE66 6000                       		dc.w $6000
0001FE68 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FE6C 8000                       		dc.w $8000
0001FE6E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FE72 8E00                       		dc.w $8E00
0001FE74 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FE78 A540                       		dc.w $A540
0001FE7A                            		even
0001FE7A                            		even
0001FE7A                            	even
0001FE7A                            
0001FE7A                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000202DC                            		even
000202DC                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000203D4                            		even
000203D4                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000204E8                            		even
000204E8                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000214F4                            		even
000214F4                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022EC2                            		even
00022EC2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022EF6                            		even
00022EF6                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022FB4                            		even
00022FB4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002345C                            		even
0002345C                            ; ---------------------------------------------------------------------------
0002345C                            ; Sprite mappings - Sonic
0002345C                            ; ---------------------------------------------------------------------------
0002345C                            Map_Sonic:
0002345C                            	include "_maps\Sonic.asm"
0002345C                            ; --------------------------------------------------------------------------------
0002345C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002345C                            ; --------------------------------------------------------------------------------
0002345C                            
0002345C                            SME_igx_h:	
0002345C 0000 0000                  		dc.w SME_igx_h_94-SME_igx_h, SME_igx_h_95-SME_igx_h	
00023460 0000 0000                  		dc.w SME_igx_h_AA-SME_igx_h, SME_igx_h_CE-SME_igx_h	
00023464 0000 0000                  		dc.w SME_igx_h_DE-SME_igx_h, SME_igx_h_EE-SME_igx_h	
00023468 0000 0000                  		dc.w SME_igx_h_FE-SME_igx_h, SME_igx_h_113-SME_igx_h	
0002346C 0000 0000                  		dc.w SME_igx_h_11E-SME_igx_h, SME_igx_h_129-SME_igx_h	
00023470 0000 0000                  		dc.w SME_igx_h_13E-SME_igx_h, SME_igx_h_149-SME_igx_h	
00023474 0000 0000                  		dc.w SME_igx_h_159-SME_igx_h, SME_igx_h_173-SME_igx_h	
00023478 0000 0000                  		dc.w SME_igx_h_192-SME_igx_h, SME_igx_h_1A7-SME_igx_h	
0002347C 0000 0000                  		dc.w SME_igx_h_1C1-SME_igx_h, SME_igx_h_1D6-SME_igx_h	
00023480 0000 0000                  		dc.w SME_igx_h_1F0-SME_igx_h, SME_igx_h_205-SME_igx_h	
00023484 0000 0000                  		dc.w SME_igx_h_210-SME_igx_h, SME_igx_h_21B-SME_igx_h	
00023488 0000 0000                  		dc.w SME_igx_h_230-SME_igx_h, SME_igx_h_23B-SME_igx_h	
0002348C 0000 0000                  		dc.w SME_igx_h_24B-SME_igx_h, SME_igx_h_26A-SME_igx_h	
00023490 0000 0000                  		dc.w SME_igx_h_289-SME_igx_h, SME_igx_h_29E-SME_igx_h	
00023494 0000 0000                  		dc.w SME_igx_h_2B8-SME_igx_h, SME_igx_h_2CD-SME_igx_h	
00023498 0000 0000                  		dc.w SME_igx_h_2E7-SME_igx_h, SME_igx_h_2F2-SME_igx_h	
0002349C 0000 0000                  		dc.w SME_igx_h_2FD-SME_igx_h, SME_igx_h_308-SME_igx_h	
000234A0 0000 0000                  		dc.w SME_igx_h_313-SME_igx_h, SME_igx_h_328-SME_igx_h	
000234A4 0000 0000                  		dc.w SME_igx_h_33D-SME_igx_h, SME_igx_h_35C-SME_igx_h	
000234A8 0000 0000                  		dc.w SME_igx_h_37B-SME_igx_h, SME_igx_h_386-SME_igx_h	
000234AC 0000 0000                  		dc.w SME_igx_h_391-SME_igx_h, SME_igx_h_39C-SME_igx_h	
000234B0 0000 0000                  		dc.w SME_igx_h_3A7-SME_igx_h, SME_igx_h_3BC-SME_igx_h	
000234B4 0000 0000                  		dc.w SME_igx_h_3CC-SME_igx_h, SME_igx_h_3E1-SME_igx_h	
000234B8 0000 0000                  		dc.w SME_igx_h_3F1-SME_igx_h, SME_igx_h_3FC-SME_igx_h	
000234BC 0000 0000                  		dc.w SME_igx_h_411-SME_igx_h, SME_igx_h_421-SME_igx_h	
000234C0 0000 0000                  		dc.w SME_igx_h_42C-SME_igx_h, SME_igx_h_441-SME_igx_h	
000234C4 0000 0000                  		dc.w SME_igx_h_456-SME_igx_h, SME_igx_h_466-SME_igx_h	
000234C8 0000 0000                  		dc.w SME_igx_h_476-SME_igx_h, SME_igx_h_486-SME_igx_h	
000234CC 0000 0000                  		dc.w SME_igx_h_491-SME_igx_h, SME_igx_h_4A1-SME_igx_h	
000234D0 0000 0000                  		dc.w SME_igx_h_4B1-SME_igx_h, SME_igx_h_4C6-SME_igx_h	
000234D4 0000 0000                  		dc.w SME_igx_h_4DB-SME_igx_h, SME_igx_h_4E6-SME_igx_h	
000234D8 0000 0000                  		dc.w SME_igx_h_4F6-SME_igx_h, SME_igx_h_501-SME_igx_h	
000234DC 0000 0000                  		dc.w SME_igx_h_511-SME_igx_h, SME_igx_h_52B-SME_igx_h	
000234E0 0000 0000                  		dc.w SME_igx_h_545-SME_igx_h, SME_igx_h_555-SME_igx_h	
000234E4 0000 0000                  		dc.w SME_igx_h_565-SME_igx_h, SME_igx_h_575-SME_igx_h	
000234E8 0000 0000                  		dc.w SME_igx_h_580-SME_igx_h, SME_igx_h_590-SME_igx_h	
000234EC 0000 0000                  		dc.w SME_igx_h_5A5-SME_igx_h, SME_igx_h_5CE-SME_igx_h	
000234F0 00                         SME_igx_h_94:	dc.b 0	
000234F1 04                         SME_igx_h_95:	dc.b 4	
000234F2 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000234F7 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000234FC 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00023501 F409 0009 F0               		dc.b $F4, 9, 0, 9, $F0	
00023506 07                         SME_igx_h_AA:	dc.b 7	
00023507 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002350C EC09 0003 F0               		dc.b $EC, 9, 0, 3, $F0	
00023511 0400 0009 00               		dc.b 4, 0, 0, 9, 0	
00023516 FC00 000A 00               		dc.b $FC, 0, 0, $A, 0	
0002351B FC01 000B F0               		dc.b $FC, 1, 0, $B, $F0	
00023520 0400 000D F8               		dc.b 4, 0, 0, $D, $F8	
00023525 FC00 000E F8               		dc.b $FC, 0, 0, $E, $F8	
0002352A 03                         SME_igx_h_CE:	dc.b 3	
0002352B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00023530 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023535 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002353A 03                         SME_igx_h_DE:	dc.b 3	
0002353B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00023540 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023545 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002354A 03                         SME_igx_h_EE:	dc.b 3	
0002354B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00023550 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00023555 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002355A 04                         SME_igx_h_FE:	dc.b 4	
0002355B EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
00023560 FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
00023565 FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
0002356A 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
0002356F 02                         SME_igx_h_113:	dc.b 2	
00023570 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023575 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
0002357A 02                         SME_igx_h_11E:	dc.b 2	
0002357B ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
00023580 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
00023585 04                         SME_igx_h_129:	dc.b 4	
00023586 EB09 0000 F3               		dc.b $EB, 9, 0, 0, $F3	
0002358B FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
00023590 FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
00023595 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
0002359A 02                         SME_igx_h_13E:	dc.b 2	
0002359B EC09 0000 F2               		dc.b $EC, 9, 0, 0, $F2	
000235A0 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
000235A5 03                         SME_igx_h_149:	dc.b 3	
000235A6 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
000235AB FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
000235B0 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
000235B5 05                         SME_igx_h_159:	dc.b 5	
000235B6 EB06 0000 03               		dc.b $EB, 6, 0, 0, 3	
000235BB FB08 0006 EB               		dc.b $FB, 8, 0, 6, $EB	
000235C0 0309 0009 F3               		dc.b 3, 9, 0, 9, $F3	
000235C5 1300 000F FB               		dc.b $13, 0, 0, $F, $FB	
000235CA EB09 0010 EB               		dc.b $EB, 9, 0, $10, $EB	
000235CF 06                         SME_igx_h_173:	dc.b 6	
000235D0 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000235D5 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
000235DA FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
000235DF 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
000235E4 FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
000235E9 F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
000235EE 04                         SME_igx_h_192:	dc.b 4	
000235EF ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000235F4 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000235F9 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
000235FE 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
00023603 05                         SME_igx_h_1A7:	dc.b 5	
00023604 EB05 0000 03               		dc.b $EB, 5, 0, 0, 3	
00023609 FB0D 0004 F3               		dc.b $FB, $D, 0, 4, $F3	
0002360E 0B08 000C F3               		dc.b $B, 8, 0, $C, $F3	
00023613 1304 000F FB               		dc.b $13, 4, 0, $F, $FB	
00023618 EB09 0011 EB               		dc.b $EB, 9, 0, $11, $EB	
0002361D 04                         SME_igx_h_1C1:	dc.b 4	
0002361E EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00023623 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00023628 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
0002362D 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
00023632 05                         SME_igx_h_1D6:	dc.b 5	
00023633 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00023638 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002363D FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
00023642 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
00023647 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
0002364C 04                         SME_igx_h_1F0:	dc.b 4	
0002364D F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
00023652 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023657 FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
0002365C 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
00023661 02                         SME_igx_h_205:	dc.b 2	
00023662 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00023667 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
0002366C 02                         SME_igx_h_210:	dc.b 2	
0002366D F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
00023672 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
00023677 04                         SME_igx_h_21B:	dc.b 4	
00023678 F506 0000 EB               		dc.b $F5, 6, 0, 0, $EB	
0002367D EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
00023682 FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
00023687 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
0002368C 02                         SME_igx_h_230:	dc.b 2	
0002368D F506 0000 EC               		dc.b $F5, 6, 0, 0, $EC	
00023692 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
00023697 03                         SME_igx_h_23B:	dc.b 3	
00023698 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
0002369D EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
000236A2 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
000236A7 06                         SME_igx_h_24B:	dc.b 6	
000236A8 ED04 0000 F3               		dc.b $ED, 4, 0, 0, $F3	
000236AD F504 0002 EB               		dc.b $F5, 4, 0, 2, $EB	
000236B2 F50A 0004 FB               		dc.b $F5, $A, 0, 4, $FB	
000236B7 0D00 000D FB               		dc.b $D, 0, 0, $D, $FB	
000236BC FD00 000E 13               		dc.b $FD, 0, 0, $E, $13	
000236C1 FD06 000F EB               		dc.b $FD, 6, 0, $F, $EB	
000236C6 06                         SME_igx_h_26A:	dc.b 6	
000236C7 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
000236CC E408 0006 F4               		dc.b $E4, 8, 0, 6, $F4	
000236D1 EC04 0009 FC               		dc.b $EC, 4, 0, 9, $FC	
000236D6 F404 000B EC               		dc.b $F4, 4, 0, $B, $EC	
000236DB F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC	
000236E0 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC	
000236E5 04                         SME_igx_h_289:	dc.b 4	
000236E6 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
000236EB F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
000236F0 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
000236F5 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000236FA 05                         SME_igx_h_29E:	dc.b 5	
000236FB ED08 0000 F3               		dc.b $ED, 8, 0, 0, $F3	
00023700 F504 0003 EB               		dc.b $F5, 4, 0, 3, $EB	
00023705 F50D 0005 FB               		dc.b $F5, $D, 0, 5, $FB	
0002370A 0508 000D FB               		dc.b 5, 8, 0, $D, $FB	
0002370F FD06 0010 EB               		dc.b $FD, 6, 0, $10, $EB	
00023714 04                         SME_igx_h_2B8:	dc.b 4	
00023715 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
0002371A F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
0002371F EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
00023724 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
00023729 05                         SME_igx_h_2CD:	dc.b 5	
0002372A FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002372F EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
00023734 F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
00023739 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0002373E 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
00023743 02                         SME_igx_h_2E7:	dc.b 2	
00023744 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023749 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002374E 02                         SME_igx_h_2F2:	dc.b 2	
0002374F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023754 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00023759 02                         SME_igx_h_2FD:	dc.b 2	
0002375A EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002375F FE0E 0006 ED               		dc.b $FE, $E, 0, 6, $ED	
00023764 02                         SME_igx_h_308:	dc.b 2	
00023765 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002376A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002376F 04                         SME_igx_h_313:	dc.b 4	
00023770 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00023775 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002377A FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002377F FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023784 04                         SME_igx_h_328:	dc.b 4	
00023785 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002378A EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002378F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00023794 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023799 06                         SME_igx_h_33D:	dc.b 6	
0002379A EE01 0000 06               		dc.b $EE, 1, 0, 0, 6	
0002379F FE0E 0002 F6               		dc.b $FE, $E, 0, 2, $F6	
000237A4 EE01 000E FE               		dc.b $EE, 1, 0, $E, $FE	
000237A9 FE00 0010 EE               		dc.b $FE, 0, 0, $10, $EE	
000237AE EE01 0011 F6               		dc.b $EE, 1, 0, $11, $F6	
000237B3 EE01 0013 EE               		dc.b $EE, 1, 0, $13, $EE	
000237B8 06                         SME_igx_h_35C:	dc.b 6	
000237B9 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000237BE F604 000C F6               		dc.b $F6, 4, 0, $C, $F6	
000237C3 EE04 000E F6               		dc.b $EE, 4, 0, $E, $F6	
000237C8 EE01 0010 EE               		dc.b $EE, 1, 0, $10, $EE	
000237CD EE01 0012 06               		dc.b $EE, 1, 0, $12, 6	
000237D2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000237D7 02                         SME_igx_h_37B:	dc.b 2	
000237D8 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000237DD F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000237E2 02                         SME_igx_h_386:	dc.b 2	
000237E3 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000237E8 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000237ED 02                         SME_igx_h_391:	dc.b 2	
000237EE F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000237F3 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000237F8 02                         SME_igx_h_39C:	dc.b 2	
000237F9 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000237FE F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023803 04                         SME_igx_h_3A7:	dc.b 4	
00023804 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00023809 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002380E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023813 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023818 03                         SME_igx_h_3BC:	dc.b 3	
00023819 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002381E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023823 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023828 04                         SME_igx_h_3CC:	dc.b 4	
00023829 F204 0000 EE               		dc.b $F2, 4, 0, 0, $EE	
0002382E EA0B 0002 FE               		dc.b $EA, $B, 0, 2, $FE	
00023833 0A00 000E FE               		dc.b $A, 0, 0, $E, $FE	
00023838 FA06 000F EE               		dc.b $FA, 6, 0, $F, $EE	
0002383D 03                         SME_igx_h_3E1:	dc.b 3	
0002383E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00023843 0A00 000C FE               		dc.b $A, 0, 0, $C, $FE	
00023848 F207 000D EE               		dc.b $F2, 7, 0, $D, $EE	
0002384D 02                         SME_igx_h_3F1:	dc.b 2	
0002384E 100C 0000 F4               		dc.b $10, $C, 0, 0, $F4	
00023853 F00B 0004 F4               		dc.b $F0, $B, 0, 4, $F4	
00023858 04                         SME_igx_h_3FC:	dc.b 4	
00023859 0F0C 0000 F3               		dc.b $F, $C, 0, 0, $F3	
0002385E EF07 0004 F3               		dc.b $EF, 7, 0, 4, $F3	
00023863 EF03 000C 03               		dc.b $EF, 3, 0, $C, 3	
00023868 EF02 0010 0B               		dc.b $EF, 2, 0, $10, $B	
0002386D 03                         SME_igx_h_411:	dc.b 3	
0002386E 0D0C 0000 F3               		dc.b $D, $C, 0, 0, $F3	
00023873 ED0B 0004 F3               		dc.b $ED, $B, 0, 4, $F3	
00023878 ED02 0010 0B               		dc.b $ED, 2, 0, $10, $B	
0002387D 02                         SME_igx_h_421:	dc.b 2	
0002387E ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00023883 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00023888 04                         SME_igx_h_42C:	dc.b 4	
00023889 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002388E FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00023893 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00023898 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
0002389D 04                         SME_igx_h_441:	dc.b 4	
0002389E F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
000238A3 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
000238A8 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
000238AD 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
000238B2 03                         SME_igx_h_456:	dc.b 3	
000238B3 EC08 0800 E0               		dc.b $EC, 8, 8, 0, $E0	
000238B8 F402 0803 F8               		dc.b $F4, 2, 8, 3, $F8	
000238BD F40F 0806 D8               		dc.b $F4, $F, 8, 6, $D8	
000238C2 03                         SME_igx_h_466:	dc.b 3	
000238C3 EC0E 0800 E0               		dc.b $EC, $E, 8, 0, $E0	
000238C8 040D 080C D8               		dc.b 4, $D, 8, $C, $D8	
000238CD 0C00 1814 F8               		dc.b $C, 0, $18, $14, $F8	
000238D2 03                         SME_igx_h_476:	dc.b 3	
000238D3 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000238D8 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000238DD 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000238E2 02                         SME_igx_h_486:	dc.b 2	
000238E3 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
000238E8 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
000238ED 03                         SME_igx_h_491:	dc.b 3	
000238EE F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
000238F3 FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
000238F8 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
000238FD 03                         SME_igx_h_4A1:	dc.b 3	
000238FE E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
00023903 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
00023908 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
0002390D 04                         SME_igx_h_4B1:	dc.b 4	
0002390E F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023913 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00023918 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
0002391D F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023922 04                         SME_igx_h_4C6:	dc.b 4	
00023923 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023928 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
0002392D F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00023932 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023937 02                         SME_igx_h_4DB:	dc.b 2	
00023938 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
0002393D 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00023942 03                         SME_igx_h_4E6:	dc.b 3	
00023943 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023948 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002394D 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00023952 02                         SME_igx_h_4F6:	dc.b 2	
00023953 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00023958 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002395D 03                         SME_igx_h_501:	dc.b 3	
0002395E EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023963 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00023968 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002396D 05                         SME_igx_h_511:	dc.b 5	
0002396E E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00023973 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023978 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
0002397D 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00023982 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00023987 05                         SME_igx_h_52B:	dc.b 5	
00023988 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002398D E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023992 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00023997 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
0002399C 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
000239A1 03                         SME_igx_h_545:	dc.b 3	
000239A2 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
000239A7 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
000239AC 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
000239B1 03                         SME_igx_h_555:	dc.b 3	
000239B2 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000239B7 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000239BC 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000239C1 03                         SME_igx_h_565:	dc.b 3	
000239C2 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
000239C7 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
000239CC 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
000239D1 02                         SME_igx_h_575:	dc.b 2	
000239D2 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
000239D7 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
000239DC 03                         SME_igx_h_580:	dc.b 3	
000239DD EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000239E2 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000239E7 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
000239EC 04                         SME_igx_h_590:	dc.b 4	
000239ED F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
000239F2 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
000239F7 F800 0012 0C               		dc.b $F8, 0, 0, $12, $C	
000239FC 0801 0013 0C               		dc.b 8, 1, 0, $13, $C	
00023A01 08                         SME_igx_h_5A5:	dc.b 8	
00023A02 1100 0000 F4               		dc.b $11, 0, 0, 0, $F4	
00023A07 0908 0001 F4               		dc.b 9, 8, 0, 1, $F4	
00023A0C F901 0004 0C               		dc.b $F9, 1, 0, 4, $C	
00023A11 F101 0006 EC               		dc.b $F1, 1, 0, 6, $EC	
00023A16 F102 0008 F4               		dc.b $F1, 2, 0, 8, $F4	
00023A1B E903 000B FC               		dc.b $E9, 3, 0, $B, $FC	
00023A20 F102 000F 04               		dc.b $F1, 2, 0, $F, 4	
00023A25 E900 0012 04               		dc.b $E9, 0, 0, $12, 4	
00023A2A 01                         SME_igx_h_5CE:	dc.b 1	
00023A2B EA0B 0000 F3               		dc.b $EA, $B, 0, 0, $F3	
00023A30                            		even
00023A30                            		even
00023A30                            
00023A30                            ; ---------------------------------------------------------------------------
00023A30                            ; Uncompressed graphics	loading	array for Sonic
00023A30                            ; ---------------------------------------------------------------------------
00023A30                            SonicDynPLC:
00023A30                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023A30                            ; --------------------------------------------------------------------------------
00023A30                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023A30                            
00023A30                            SME_Z3Iyr:	
00023A30 0000 0000                  		dc.w SME_Z3Iyr_94-SME_Z3Iyr, SME_Z3Iyr_95-SME_Z3Iyr	
00023A34 0000 0000                  		dc.w SME_Z3Iyr_9E-SME_Z3Iyr, SME_Z3Iyr_AD-SME_Z3Iyr	
00023A38 0000 0000                  		dc.w SME_Z3Iyr_B4-SME_Z3Iyr, SME_Z3Iyr_BB-SME_Z3Iyr	
00023A3C 0000 0000                  		dc.w SME_Z3Iyr_C2-SME_Z3Iyr, SME_Z3Iyr_CB-SME_Z3Iyr	
00023A40 0000 0000                  		dc.w SME_Z3Iyr_D0-SME_Z3Iyr, SME_Z3Iyr_D5-SME_Z3Iyr	
00023A44 0000 0000                  		dc.w SME_Z3Iyr_DE-SME_Z3Iyr, SME_Z3Iyr_E3-SME_Z3Iyr	
00023A48 0000 0000                  		dc.w SME_Z3Iyr_EA-SME_Z3Iyr, SME_Z3Iyr_F5-SME_Z3Iyr	
00023A4C 0000 0000                  		dc.w SME_Z3Iyr_102-SME_Z3Iyr, SME_Z3Iyr_10B-SME_Z3Iyr	
00023A50 0000 0000                  		dc.w SME_Z3Iyr_116-SME_Z3Iyr, SME_Z3Iyr_11F-SME_Z3Iyr	
00023A54 0000 0000                  		dc.w SME_Z3Iyr_12A-SME_Z3Iyr, SME_Z3Iyr_133-SME_Z3Iyr	
00023A58 0000 0000                  		dc.w SME_Z3Iyr_138-SME_Z3Iyr, SME_Z3Iyr_13D-SME_Z3Iyr	
00023A5C 0000 0000                  		dc.w SME_Z3Iyr_146-SME_Z3Iyr, SME_Z3Iyr_14B-SME_Z3Iyr	
00023A60 0000 0000                  		dc.w SME_Z3Iyr_152-SME_Z3Iyr, SME_Z3Iyr_15F-SME_Z3Iyr	
00023A64 0000 0000                  		dc.w SME_Z3Iyr_16C-SME_Z3Iyr, SME_Z3Iyr_175-SME_Z3Iyr	
00023A68 0000 0000                  		dc.w SME_Z3Iyr_180-SME_Z3Iyr, SME_Z3Iyr_189-SME_Z3Iyr	
00023A6C 0000 0000                  		dc.w SME_Z3Iyr_194-SME_Z3Iyr, SME_Z3Iyr_199-SME_Z3Iyr	
00023A70 0000 0000                  		dc.w SME_Z3Iyr_19E-SME_Z3Iyr, SME_Z3Iyr_1A3-SME_Z3Iyr	
00023A74 0000 0000                  		dc.w SME_Z3Iyr_1A8-SME_Z3Iyr, SME_Z3Iyr_1B1-SME_Z3Iyr	
00023A78 0000 0000                  		dc.w SME_Z3Iyr_1BA-SME_Z3Iyr, SME_Z3Iyr_1C7-SME_Z3Iyr	
00023A7C 0000 0000                  		dc.w SME_Z3Iyr_1D4-SME_Z3Iyr, SME_Z3Iyr_1D9-SME_Z3Iyr	
00023A80 0000 0000                  		dc.w SME_Z3Iyr_1DE-SME_Z3Iyr, SME_Z3Iyr_1E3-SME_Z3Iyr	
00023A84 0000 0000                  		dc.w SME_Z3Iyr_1E8-SME_Z3Iyr, SME_Z3Iyr_1F1-SME_Z3Iyr	
00023A88 0000 0000                  		dc.w SME_Z3Iyr_1F8-SME_Z3Iyr, SME_Z3Iyr_201-SME_Z3Iyr	
00023A8C 0000 0000                  		dc.w SME_Z3Iyr_208-SME_Z3Iyr, SME_Z3Iyr_20D-SME_Z3Iyr	
00023A90 0000 0000                  		dc.w SME_Z3Iyr_216-SME_Z3Iyr, SME_Z3Iyr_21D-SME_Z3Iyr	
00023A94 0000 0000                  		dc.w SME_Z3Iyr_222-SME_Z3Iyr, SME_Z3Iyr_22B-SME_Z3Iyr	
00023A98 0000 0000                  		dc.w SME_Z3Iyr_234-SME_Z3Iyr, SME_Z3Iyr_23B-SME_Z3Iyr	
00023A9C 0000 0000                  		dc.w SME_Z3Iyr_242-SME_Z3Iyr, SME_Z3Iyr_249-SME_Z3Iyr	
00023AA0 0000 0000                  		dc.w SME_Z3Iyr_24C-SME_Z3Iyr, SME_Z3Iyr_253-SME_Z3Iyr	
00023AA4 0000 0000                  		dc.w SME_Z3Iyr_25A-SME_Z3Iyr, SME_Z3Iyr_263-SME_Z3Iyr	
00023AA8 0000 0000                  		dc.w SME_Z3Iyr_26C-SME_Z3Iyr, SME_Z3Iyr_271-SME_Z3Iyr	
00023AAC 0000 0000                  		dc.w SME_Z3Iyr_278-SME_Z3Iyr, SME_Z3Iyr_27D-SME_Z3Iyr	
00023AB0 0000 0000                  		dc.w SME_Z3Iyr_284-SME_Z3Iyr, SME_Z3Iyr_28F-SME_Z3Iyr	
00023AB4 0000 0000                  		dc.w SME_Z3Iyr_29A-SME_Z3Iyr, SME_Z3Iyr_2A1-SME_Z3Iyr	
00023AB8 0000 0000                  		dc.w SME_Z3Iyr_2A8-SME_Z3Iyr, SME_Z3Iyr_2AF-SME_Z3Iyr	
00023ABC 0000 0000                  		dc.w SME_Z3Iyr_2B4-SME_Z3Iyr, SME_Z3Iyr_2BB-SME_Z3Iyr	
00023AC0 0000 0000                  		dc.w SME_Z3Iyr_2C4-SME_Z3Iyr, SME_Z3Iyr_2D5-SME_Z3Iyr	
00023AC4 00                         SME_Z3Iyr_94:	dc.b 0	
00023AC5 0420 0020 0920 0C50 03     SME_Z3Iyr_95:	dc.b 4, $20, 0, $20, 9, $20, $C, $50, 3	
00023ACE 0720 1B50 0F00 1A03 9110+  SME_Z3Iyr_9E:	dc.b 7, $20, $1B, $50, $F, 0, $1A, 3, $91, $10, $15, 0, $18, 4, $81	
00023ADD 0350 1E50 1520 1B          SME_Z3Iyr_AD:	dc.b 3, $50, $1E, $50, $15, $20, $1B	
00023AE4 0350 1E50 1520 24          SME_Z3Iyr_B4:	dc.b 3, $50, $1E, $50, $15, $20, $24	
00023AEB 0380 2720 0920 0C          SME_Z3Iyr_BB:	dc.b 3, $80, $27, $20, 9, $20, $C	
00023AF2 0470 3050 3850 3E10 44     SME_Z3Iyr_C2:	dc.b 4, $70, $30, $50, $38, $50, $3E, $10, $44	
00023AFB 0270 30B0 46               SME_Z3Iyr_CB:	dc.b 2, $70, $30, $B0, $46	
00023B00 0250 5280 58               SME_Z3Iyr_D0:	dc.b 2, $50, $52, $80, $58	
00023B05 0450 5250 6150 6710 6D     SME_Z3Iyr_D5:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00023B0E 0250 52B0 6F               SME_Z3Iyr_DE:	dc.b 2, $50, $52, $B0, $6F	
00023B13 0370 3030 7B50 7F          SME_Z3Iyr_E3:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00023B1A 0550 8B20 9150 9400 9A53+  SME_Z3Iyr_EA:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
00023B25 0650 8510 9B30 9D50 A130+  SME_Z3Iyr_F5:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
00023B32 0450 AC10 B270 B420 BC     SME_Z3Iyr_102:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00023B3B 0530 C570 C920 D110 D453+  SME_Z3Iyr_10B:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
00023B46 0450 BF10 D670 D820 E0     SME_Z3Iyr_116:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00023B4F 0550 8510 9B00 9170 E320+  SME_Z3Iyr_11F:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00023B5A 0470 EE50 F610 FC50 FE     SME_Z3Iyr_12A:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00023B63 0270 EEB1 04               SME_Z3Iyr_133:	dc.b 2, $70, $EE, $B1, 4	
00023B68 0251 1081 16               SME_Z3Iyr_138:	dc.b 2, $51, $10, $81, $16	
00023B6D 0451 1051 1F11 2551 27     SME_Z3Iyr_13D:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
00023B76 0251 10B1 2D               SME_Z3Iyr_146:	dc.b 2, $51, $10, $B1, $2D	
00023B7B 0370 EE01 0481 39          SME_Z3Iyr_14B:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00023B82 0611 4811 4A81 4C01 5501+  SME_Z3Iyr_152:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00023B8F 0651 4221 5711 5A11 5C81+  SME_Z3Iyr_15F:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00023B9C 0451 6711 6D81 6F11 78     SME_Z3Iyr_16C:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
00023BA5 0521 8011 8371 8521 8D53+  SME_Z3Iyr_175:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00023BB0 0451 7A11 9081 9211 9B     SME_Z3Iyr_180:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00023BB9 0551 4281 9D11 5C11 A603+  SME_Z3Iyr_189:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
00023BC4 0251 A8B1 AE               SME_Z3Iyr_194:	dc.b 2, $51, $A8, $B1, $AE	
00023BC9 0250 52B1 BA               SME_Z3Iyr_199:	dc.b 2, $50, $52, $B1, $BA	
00023BCE 0251 A8B1 C6               SME_Z3Iyr_19E:	dc.b 2, $51, $A8, $B1, $C6	
00023BD3 0250 52B1 D2               SME_Z3Iyr_1A3:	dc.b 2, $50, $52, $B1, $D2	
00023BD8 0451 DE11 E4B1 E601 F2     SME_Z3Iyr_1A8:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00023BE1 0451 F311 F9B1 FB03 26     SME_Z3Iyr_1B1:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00023BEA 0612 07B2 0913 9803 9A13+  SME_Z3Iyr_1BA:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00023BF7 06B2 1513 2713 A313 C913+  SME_Z3Iyr_1C7:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
00023C04 0252 21B2 27               SME_Z3Iyr_1D4:	dc.b 2, $52, $21, $B2, $27	
00023C09 0251 10B2 33               SME_Z3Iyr_1D9:	dc.b 2, $51, $10, $B2, $33	
00023C0E 0252 21B2 3F               SME_Z3Iyr_1DE:	dc.b 2, $52, $21, $B2, $3F	
00023C13 0251 10B2 4B               SME_Z3Iyr_1E3:	dc.b 2, $51, $10, $B2, $4B	
00023C18 0452 5712 5DB2 5F02 6B     SME_Z3Iyr_1E8:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00023C21 0372 6CB2 7403 DF          SME_Z3Iyr_1F1:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00023C28 0412 80B2 8202 6B53 D9     SME_Z3Iyr_1F8:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
00023C31 03B2 8E03 D073 D1          SME_Z3Iyr_201:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
00023C38 0234 57B4 4B               SME_Z3Iyr_208:	dc.b 2, $34, $57, $B4, $4B	
00023C3D 0434 6A74 5B34 6324 67     SME_Z3Iyr_20D:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
00023C46 0334 7DB4 6E24 7A          SME_Z3Iyr_216:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00023C4D 0252 9AB2 A0               SME_Z3Iyr_21D:	dc.b 2, $52, $9A, $B2, $A0	
00023C52 0452 AC72 B212 BA02 BC     SME_Z3Iyr_222:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00023C5B 0412 BD72 BF22 C702 CA     SME_Z3Iyr_22B:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023C64 0322 CB22 CEF2 D1          SME_Z3Iyr_234:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00023C6B 03B2 E172 ED00 6F          SME_Z3Iyr_23B:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00023C72 0372 F532 FD23 01          SME_Z3Iyr_242:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023C79 0183 04                    SME_Z3Iyr_249:	dc.b 1, $83, 4	
00023C7C 0373 0D03 1533 16          SME_Z3Iyr_24C:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023C83 03B3 2913 3503 37          SME_Z3Iyr_253:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00023C8A 04B3 3833 4403 4803 49     SME_Z3Iyr_25A:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00023C93 04B3 4A33 5603 5A03 5B     SME_Z3Iyr_263:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00023C9C 0283 5C73 65               SME_Z3Iyr_26C:	dc.b 2, $83, $5C, $73, $65	
00023CA1 0383 6D23 7613 79          SME_Z3Iyr_271:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00023CA8 0283 7B73 84               SME_Z3Iyr_278:	dc.b 2, $83, $7B, $73, $84	
00023CAD 0383 6D23 8C13 8F          SME_Z3Iyr_27D:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
00023CB4 0573 A613 AE53 B033 B603+  SME_Z3Iyr_284:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00023CBF 0573 BB13 AE53 C333 B603+  SME_Z3Iyr_28F:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00023CCA 0372 F532 FD23 01          SME_Z3Iyr_29A:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023CD1 0373 0D03 1533 16          SME_Z3Iyr_2A1:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023CD8 03B3 E013 EC33 EE          SME_Z3Iyr_2A8:	dc.b 3, $B3, $E0, $13, $EC, $33, $EE	
00023CDF 02F4 0424 14               SME_Z3Iyr_2AF:	dc.b 2, $F4, 4, $24, $14	
00023CE4 0353 F2B3 F810 6B          SME_Z3Iyr_2B4:	dc.b 3, $53, $F2, $B3, $F8, $10, $6B	
00023CEB 04F4 1714 2704 2914 2A     SME_Z3Iyr_2BB:	dc.b 4, $F4, $17, $14, $27, 4, $29, $14, $2A	
00023CF4 0804 3E24 3914 3C14 2C24+  SME_Z3Iyr_2C4:	dc.b 8, 4, $3E, $24, $39, $14, $3C, $14, $2C, $24, $2E, $34, $31, $24, $36, 4, $35	
00023D05 01B4 3F                    SME_Z3Iyr_2D5:	dc.b 1, $B4, $3F	
00023D08                            		even
00023D08                            		even
00023D08                            
00023D08                            ; ---------------------------------------------------------------------------
00023D08                            ; Uncompressed graphics	- Sonic
00023D08                            ; ---------------------------------------------------------------------------
00023D08                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002CD48                            		even
0002CD48                            ; ---------------------------------------------------------------------------
0002CD48                            ; Compressed graphics - various
0002CD48                            ; ---------------------------------------------------------------------------
0002CD48                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002CE4C                            		even
0002CE4C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002CE86                            		even
0002CE86                            Art_Shield:	incbin	artunc\shield.bin	; shield
0002D1E6                            		even
0002D1E6                            Art_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002D666                            		even
0002D666                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002D770                            		even
0002D770                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002D7C2                            		even
0002D7C2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002DA0A                            		even
0002DA0A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002DB90                            		even
0002DB90                            ; ---------------------------------------------------------------------------
0002DB90                            ; Sprite mappings - walls of the special stage
0002DB90                            ; ---------------------------------------------------------------------------
0002DB90                            Map_SSWalls:
0002DB90                            	include "_maps\SSwalls.asm"
0002DB90                            ; ---------------------------------------------------------------------------
0002DB90                            ; Sprite mappings - walls of the special stage
0002DB90                            ; ---------------------------------------------------------------------------
0002DB90 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002DB94 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002DB98 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002DB9C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002DBA0 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002DBA4 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002DBA8 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002DBAC 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002DBB0 01                         byte_2C584:	dc.b 1
0002DBB1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002DBB6 01                         byte_2C58A:	dc.b 1
0002DBB7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002DBBC 01                         byte_2C590:	dc.b 1
0002DBBD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002DBC2 01                         byte_2C596:	dc.b 1
0002DBC3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002DBC8 01                         byte_2C59C:	dc.b 1
0002DBC9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002DBCE 01                         byte_2C5A2:	dc.b 1
0002DBCF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002DBD4 01                         byte_2C5A8:	dc.b 1
0002DBD5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002DBDA 01                         byte_2C5AE:	dc.b 1
0002DBDB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002DBE0 01                         byte_2C5B4:	dc.b 1
0002DBE1 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002DBE6 01                         byte_2C5BA:	dc.b 1
0002DBE7 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002DBEC 01                         byte_2C5C0:	dc.b 1
0002DBED F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002DBF2 01                         byte_2C5C6:	dc.b 1
0002DBF3 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002DBF8 01                         byte_2C5CC:	dc.b 1
0002DBF9 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002DBFE 01                         byte_2C5D2:	dc.b 1
0002DBFF F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002DC04 01                         byte_2C5D8:	dc.b 1
0002DC05 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002DC0A 01                         byte_2C5DE:	dc.b 1
0002DC0B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002DC10                            		even
0002DC10                            		even
0002DC10                            ; ---------------------------------------------------------------------------
0002DC10                            ; Compressed graphics - special stage
0002DC10                            ; ---------------------------------------------------------------------------
0002DC10                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002E548                            		even
0002E548                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002E67C                            		even
0002E67C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002F30C                            		even
0002F30C                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002F60C                            		even
0002F60C                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002FB00                            		even
0002FB00                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002FBEE                            		even
0002FBEE                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002FCBE                            		even
0002FCBE                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002FDB4                            		even
0002FDB4                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002FE12                            		even
0002FE12                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002FEA4                            		even
0002FEA4                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002FF66                            		even
0002FF66                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00030034                            		even
00030034                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00030100                            		even
00030100                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000301C8                            		even
000301C8                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030292                            		even
00030292                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030362                            		even
00030362                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030556                            		even
00030556                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000306BE                            		even
000306BE                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003076E                            		even
0003076E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00030848                            		even
00030848                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000308CC                            		even
000308CC                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00030A4A                            		even
00030A4A                            ; ---------------------------------------------------------------------------
00030A4A                            ; Compressed graphics - GHZ stuff
00030A4A                            ; ---------------------------------------------------------------------------
00030A4A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00030A94                            		even
00030A94                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00030BAE                            		even
00030BAE                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00030C9A                            		even
00030C9A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00030CE2                            		even
00030CE2                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00030E80                            		even
00030E80                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00030EFC                            		even
00030EFC                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00031110                            		even
00031110                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003123C                            		even
0003123C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003136A                            		even
0003136A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00031408                            		even
00031408                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031468                            		even
00031468                            ; ---------------------------------------------------------------------------
00031468                            ; Compressed graphics - LZ stuff
00031468                            ; ---------------------------------------------------------------------------
00031468                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003158C                            		even
0003158C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00031D80                            		even
00031D80                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00031F00                            		even
00031F00                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003206A                            		even
0003206A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000326C0                            		even
000326C0                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00032776                            		even
00032776                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00032818                            		even
00032818                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00032974                            		even
00032974                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000329D8                            		even
000329D8                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00032B2A                            		even
00032B2A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003300C                            		even
0003300C                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003317C                            		even
0003317C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00033434                            		even
00033434                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003356C                            		even
0003356C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00033696                            		even
00033696                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000337A6                            		even
000337A6                            ; ---------------------------------------------------------------------------
000337A6                            ; Compressed graphics - MZ stuff
000337A6                            ; ---------------------------------------------------------------------------
000337A6                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00033A34                            		even
00033A34                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00033AF2                            		even
00033AF2                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00033BAA                            		even
00033BAA                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00033BFE                            		even
00033BFE                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00033EDC                            		even
00033EDC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000347F2                            		even
000347F2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00034956                            		even
00034956                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000349DE                            		even
000349DE                            ; ---------------------------------------------------------------------------
000349DE                            ; Compressed graphics - SLZ stuff
000349DE                            ; ---------------------------------------------------------------------------
000349DE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00034C1A                            		even
00034C1A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00034D60                            		even
00034D60                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00034FA4                            		even
00034FA4                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00035006                            		even
00035006                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000350E8                            		even
000350E8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000352CA                            		even
000352CA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000353D6                            		even
000353D6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003547A                            		even
0003547A                            ; ---------------------------------------------------------------------------
0003547A                            ; Compressed graphics - SYZ stuff
0003547A                            ; ---------------------------------------------------------------------------
0003547A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000355E4                            		even
000355E4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00035646                            		even
00035646                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00035728                            		even
00035728                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000359B6                            		even
000359B6                            ; ---------------------------------------------------------------------------
000359B6                            ; Compressed graphics - SBZ stuff
000359B6                            ; ---------------------------------------------------------------------------
000359B6                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00035A0A                            		even
00035A0A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00035CA6                            		even
00035CA6                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00035EAA                            		even
00035EAA                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00036048                            		even
00036048                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00036378                            		even
00036378                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036556                            		even
00036556                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000365AE                            		even
000365AE                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003672E                            		even
0003672E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003682C                            		even
0003682C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000369B8                            		even
000369B8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00036A08                            		even
00036A08                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00036A60                            		even
00036A60                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00036B5C                            		even
00036B5C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00036C72                            		even
00036C72                            ; ---------------------------------------------------------------------------
00036C72                            ; Compressed graphics - enemies
00036C72                            ; ---------------------------------------------------------------------------
00036C72                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00037032                            		even
00037032                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00037520                            		even
00037520                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000378C6                            		even
000378C6                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00037AAE                            		even
00037AAE                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00038198                            		even
00038198                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00038400                            		even
00038400                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003868A                            		even
0003868A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00038BAE                            		even
00038BAE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00038E38                            		even
00038E38                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039456                            		even
00039456                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003983E                            		even
0003983E                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00039B3A                            		even
00039B3A                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00039D82                            		even
00039D82                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A01A                            		even
0003A01A                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003A1F8                            		even
0003A1F8                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003A386                            		even
0003A386                            ; ---------------------------------------------------------------------------
0003A386                            ; Compressed graphics - various
0003A386                            ; ---------------------------------------------------------------------------
0003A386                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003A994 00                         		even
0003A994                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003AAE4                            		even
0003AAE4                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003AB66                            		even
0003AB66                            Nem_LivesPic:	incbin	artnem\lifeiconpic.bin	; life counter icon picture
0003ABD6                            		even
0003ABD6                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003ACE2 00                         		even
0003ACE2                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B13C                            		even
0003B13C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003B7A2                            		even
0003B7A2                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003B852                            		even
0003B852                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003B9E4                            		even
0003B9E4                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003BAE6                            		even
0003BAE6                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003BBC2                            		even
0003BBC2                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C03E                            		even
0003C03E                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C0FE                            		even
0003C0FE                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C272                            		even
0003C272                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003C574                            		even
0003C574                            ; ---------------------------------------------------------------------------
0003C574                            ; Compressed graphics - continue screen
0003C574                            ; ---------------------------------------------------------------------------
0003C574                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003C824                            		even
0003C824                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003CA5E                            		even
0003CA5E                            ; ---------------------------------------------------------------------------
0003CA5E                            ; Compressed graphics - animals
0003CA5E                            ; ---------------------------------------------------------------------------
0003CA5E                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003CBB6                            		even
0003CBB6                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003CD12                            		even
0003CD12                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003CE8E                            		even
0003CE8E                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003CFAA                            		even
0003CFAA                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D0E0                            		even
0003D0E0                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D21A                            		even
0003D21A                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003D376                            		even
0003D376                            ; ---------------------------------------------------------------------------
0003D376                            ; Compressed graphics - primary patterns and block mappings
0003D376                            ; ---------------------------------------------------------------------------
0003D376                            
0003D376                            Nem_TIT_1st:	incbin	artnem\8x8tit1.bin	; Title primary patterns
0003E9D6                            		even
0003E9D6                            Nem_TIT_2nd:	incbin	artnem\8x8tit2.bin	; Title secondary patterns
0003FD7E                            		even
0003FD7E                            Blk16_TS:	incbin	map16\ts.bin
0004069C                            		even
0004069C                            Blk256_TS:	incbin	map256\ts.bin
00042794                            		even
00042794                            Blk16_GHZ:	incbin	map16\ghz.bin
000430B2                            		even
000430B2                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
00045A54                            		even
00045A54                            Blk256_GHZ:	incbin	map256\ghz.bin
00047B4C                            		even
00047B4C                            Blk16_LZ:	incbin	map16\lz.bin
00047E4C 00                         		even
00047E4C                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
000498D2                            		even
000498D2                            Blk256_LZ:	incbin	map256\lz.bin
0004BD5A                            		even
0004BD5A                            Blk16_MZ:	incbin	map16\mz.bin
0004C4D0 00                         		even
0004C4D0                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EC24                            		even
0004EC24                            Blk256_MZ:	incbin	map256\mz.bin
0005035C                            		even
0005035C                            Blk16_SLZ:	incbin	map16\slz.bin
00050AEE 00                         		even
00050AEE                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000544DE 00                         		even
000544DE                            Blk256_SLZ:	incbin	map256\slz.bin
0005645A                            		even
0005645A                            Blk16_SYZ:	incbin	map16\syz.bin
00056D08 00                         		even
00056D08                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005A2EE                            		even
0005A2EE                            Blk256_SYZ:	incbin	map256\syz.bin
0005C5D8                            		even
0005C5D8                            Blk16_SBZ:	incbin	map16\sbz.bin
0005D386                            		even
0005D386                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005FA54                            		even
0005FA54                            Blk256_SBZ:	incbin	map256\sbz.bin
000625D8 00                         		even
000625D8                            ; ---------------------------------------------------------------------------
000625D8                            ; Compressed graphics - bosses and ending sequence
000625D8                            ; ---------------------------------------------------------------------------
000625D8                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00062E3C                            		even
00062E3C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00063126                            		even
00063126                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000639AA                            		even
000639AA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000641D6                            		even
000641D6                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006493E                            		even
0006493E                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00064EBE                            		even
00064EBE                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00064FDE                            		even
00064FDE                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000651DC                            		even
000651DC                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000663BA                            		even
000663BA                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00066CFE                            		even
00066CFE                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000670D4                            		even
000670D4                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00067664                            		even
00067664                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000678EC                            		even
000678EC                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00067EEA                            		even
00067EEA                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00068172                            		even
00068172                            ; ---------------------------------------------------------------------------
00068172                            ; Collision data
00068172                            ; ---------------------------------------------------------------------------
00068172                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00068272                            		even
00068272                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00069272                            		even
00069272                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006A272                            		even
0006A272                            Col_GHZ_1:	incbin	collide\ghz1.bin	; GHZ index 1
0006A42C 00                         		even
0006A42C                            Col_GHZ_2:	incbin	collide\ghz2.bin	; GHZ index 2
0006A5E4                            		even
0006A5E4                            Col_LZ_1:	incbin	collide\lz1.bin		; LZ index 1
0006A6A8                            		even
0006A6A8                            Col_LZ_2:	incbin	collide\lz2.bin		; LZ index 2
0006A76C                            		even
0006A76C                            Col_MZ_1:	incbin	collide\mz1.bin		; MZ index 1
0006A8FC                            		even
0006A8FC                            Col_MZ_2:	incbin	collide\mz2.bin		; MZ index 2
0006AA8C                            		even
0006AA8C                            Col_SLZ_1:	incbin	collide\slz1.bin	; SLZ index 1
0006AC2A                            		even
0006AC2A                            Col_SLZ_2:	incbin	collide\slz2.bin	; SLZ index 2
0006ADC8                            		even
0006ADC8                            Col_SYZ_1:	incbin	collide\syz1.bin	; SYZ index 1
0006AFBC                            		even
0006AFBC                            Col_SYZ_2:	incbin	collide\syz2.bin	; SYZ index 2
0006B1B0                            		even
0006B1B0                            Col_SBZ_1:	incbin	collide\sbz1.bin	; SBZ index 1
0006B408                            		even
0006B408                            Col_SBZ_2:	incbin	collide\sbz2.bin	; SBZ index 2
0006B660                            		even
0006B660                            ; ---------------------------------------------------------------------------
0006B660                            ; Special layouts
0006B660                            ; ---------------------------------------------------------------------------
0006B660                            SS_1:		incbin	sslayout\1.bin
0006B8DA                            		even
0006B8DA                            SS_2:		incbin	sslayout\2.bin
0006BCEC                            		even
0006BCEC                            SS_3:		incbin	sslayout\3.bin
0006C048                            		even
0006C048                            SS_4:		incbin	sslayout\4.bin
0006C522                            		even
0006C522                            SS_5:		incbin	sslayout\5.bin
0006C9F4                            		even
0006C9F4                            SS_6:		incbin	sslayout\6.bin
0006CD04                            		even
0006CD04                            ; ---------------------------------------------------------------------------
0006CD04                            ; Animated uncompressed graphics
0006CD04                            ; ---------------------------------------------------------------------------
0006CD04                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006CF04                            		even
0006CF04                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006D304                            		even
0006D304                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006D784                            		even
0006D784                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006DA84                            		even
0006DA84                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006E084                            		even
0006E084                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006E384                            		even
0006E384                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006EE04                            		even
0006EE04                            
0006EE04                            ; ---------------------------------------------------------------------------
0006EE04                            ; Level	layout index
0006EE04                            ; ---------------------------------------------------------------------------
0006EE04                            Level_Index:
0006EE04 0000 0000 0000 0000 0000+  		dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
0006EE10 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
0006EE1C 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
0006EE28 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
0006EE34 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
0006EE40 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
0006EE4C 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
0006EE58 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
0006EE64 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
0006EE70 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
0006EE7C 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
0006EE88 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
0006EE94 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
0006EEA0 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
0006EEAC 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
0006EEB8 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
0006EEC4 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
0006EED0 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
0006EEDC 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
0006EEE8 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
0006EEF4 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
0006EF00 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
0006EF0C 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
0006EF18 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
0006EF24 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006EF30 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006EF3C 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006EF48 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006EF54 0000 0000 0000 0000 0000+  		dc.l Level_TS, Level_TSbg, byte_68D70
0006EF60 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_TSbg, byte_68E3C
0006EF6C 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_TSbg, byte_68F84
0006EF78                            Level_TS:	incbin	levels\ts.bin
0006FF78                            		even
0006FF78                            Level_TSbg:	incbin	levels\tsbg.bin
0006FF9A                            		even
0006FF9A                            Level_GHZ1:	incbin	levels\ghz1.bin
00070F9A                            		even
00070F9A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00070F9E                            Level_GHZ2:	incbin	levels\ghz2.bin
00071F9E                            		even
00071F9E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00071FA2                            Level_GHZ3:	incbin	levels\ghz3.bin
00072FA2                            		even
00072FA2                            Level_GHZbg:	incbin	levels\ghzbg.bin
00072FC4                            		even
00072FC4 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072FC8 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072FCC                            
00072FCC                            Level_LZ1:	incbin	levels\lz1.bin
00073FCC                            		even
00073FCC                            Level_LZbg:	incbin	levels\lzbg.bin
000740CE                            		even
000740CE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000740D2                            Level_LZ2:	incbin	levels\lz2.bin
000750D2                            		even
000750D2 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000750D6                            Level_LZ3:	incbin	levels\lz3.bin
000760D6                            		even
000760D6                            Level_LZ3_WALL:	incbin	levels\lz3_wall.bin	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
000770D6                            		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
000770D6 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000770DA                            Level_SBZ3:	incbin	levels\sbz3.bin
000780DA                            		even
000780DA 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000780DE                            
000780DE                            Level_MZ1:	incbin	levels\mz1.bin
000790DE                            		even
000790DE                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00079158                            		even
00079158                            Level_MZ2:	incbin	levels\mz2.bin
0007A158                            		even
0007A158                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A1EA                            		even
0007A1EA 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A1EE                            Level_MZ3:	incbin	levels\mz3.bin
0007B1EE                            		even
0007B1EE                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007B292                            		even
0007B292 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007B296 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007B29A                            
0007B29A                            Level_SLZ1:	incbin	levels\slz1.bin
0007C29A                            		even
0007C29A                            Level_SLZbg:	incbin	levels\slzbg.bin
0007C314                            		even
0007C314                            Level_SLZ2:	incbin	levels\slz2.bin
0007D314                            		even
0007D314                            Level_SLZ3:	incbin	levels\slz3.bin
0007E314                            		even
0007E314 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007E318                            
0007E318                            Level_SYZ1:	incbin	levels\syz1.bin
0007F318                            		even
0007F318                            Level_SYZbg:	incbin	levels\syzbg.bin
0007F352                            		even
0007F352 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F356                            Level_SYZ2:	incbin	levels\syz2.bin
00080356                            		even
00080356 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0008035A                            Level_SYZ3:	incbin	levels\syz3.bin
0008135A                            		even
0008135A 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0008135E 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00081362                            
00081362                            Level_SBZ1:	incbin	levels\sbz1.bin
00082362                            		even
00082362                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000823A0                            		even
000823A0                            Level_SBZ2:	incbin	levels\sbz2.bin
000833A0                            		even
000833A0                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0008350A                            		even
0008350A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0008350E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00083512                            Level_End:	incbin	levels\ending.bin
00084512                            		even
00084512 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00084516                            
00084516                            ; ---------------------------------------------------------------------------
00084516                            ; Animated uncompressed giant ring graphics
00084516                            ; ---------------------------------------------------------------------------
00084516                            Art_BigRing:	incbin	artunc\bigring.bin
00085156                            		even
00085156                            ; ---------------------------------------------------------------------------
00085156                            ; Sprite locations index
00085156                            ; ---------------------------------------------------------------------------
00085156 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008515A 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008515E 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085162 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085166 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008516A 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008516E 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085172 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085176 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008517A 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008517E 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085182 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085186 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008518A 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008518E 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085192 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00085196 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008519A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008519E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851A2 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851A6 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851AA 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851AE 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851B2 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851B6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851BA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851BE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851C2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000851C6 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000851CA 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
000851CE 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
000851D2 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000851D6 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000851DA 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000851DE 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000851E2 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000851E6 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000851EC                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0008523A                            		even
0008523A                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0008580A                            		even
0008580A                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00085ED6                            		even
00085ED6                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00086344                            		even
00086344                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00086686                            		even
00086686                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00086C68                            		even
00086C68                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00087100                            		even
00087100                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00087132                            		even
00087132                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00087164                            		even
00087164                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00087196                            		even
00087196                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000871C8                            		even
000871C8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00087212                            		even
00087212                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00087250                            		even
00087250                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000875BC                            		even
000875BC                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00087A66                            		even
00087A66                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00087FDC                            		even
00087FDC                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00088534                            		even
00088534                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000889F0                            		even
000889F0                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0008901A                            		even
0008901A                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000894A6                            		even
000894A6                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00089A10                            		even
00089A10                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0008A016                            		even
0008A016                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0008A754                            		even
0008A754                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0008AE32                            		even
0008AE32                            ObjPos_FZ:	incbin	objpos\fz.bin
0008AE44                            		even
0008AE44                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0008AE76                            		even
0008AE76                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0008AEA8                            		even
0008AEA8                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0008AEDA                            		even
0008AEDA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0008AF0C                            		even
0008AF0C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0008AF3E                            		even
0008AF3E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0008AF76                            		even
0008AF76                            ObjPos_End:	incbin	objpos\ending.bin
0008B0D2                            		even
0008B0D2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008B0D8                            ; ---------------------------------------------------------------------------
0008B0D8 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0008B0DC 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0008B0E0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0008B0E4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0008B0E8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0008B0EC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0008B0F0                            ; ---------------------------------------------------------------------------
0008B0F0                            ; PSG instruments used in music
0008B0F0                            ; ---------------------------------------------------------------------------
0008B0F0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0008B0FC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008B108 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0008B114                            PSG1:		incbin	sound\psg1.bin
0008B12B                            PSG2:		incbin	sound\psg2.bin
0008B132                            PSG3:		incbin	sound\psg3.bin
0008B143                            PSG4:		incbin	sound\psg4.bin
0008B14E                            PSG6:		incbin	sound\psg6.bin
0008B15D                            PSG5:		incbin	sound\psg5.bin
0008B187                            PSG7:		incbin	sound\psg7.bin
0008B1A3                            PSG8:		incbin	sound\psg8.bin
0008B1CB                            PSG9:		incbin	sound\psg9.bin
0008B1DC                            
0008B1DC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0008B1E4                            ; ---------------------------------------------------------------------------
0008B1E4                            ; Music	Pointers
0008B1E4                            ; ---------------------------------------------------------------------------
0008B1E4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0008B1EC 0000 0000 0000 0000        		dc.l Music83, Music84
0008B1F4 0000 0000 0000 0000        		dc.l Music85, Music86
0008B1FC 0000 0000 0000 0000        		dc.l Music87, Music88
0008B204 0000 0000 0000 0000        		dc.l Music89, Music8A
0008B20C 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008B214 0000 0000 0000 0000        		dc.l Music8D, Music8E
0008B21C 0000 0000 0000 0000        		dc.l Music8F, Music90
0008B224 0000 0000 0000 0000        		dc.l Music91, Music92
0008B22C 0000 0000 0000 0000        		dc.l Music93, Music94
0008B234 0000 0000 0000 0000        		dc.l Music95, Music96
0008B23C 0000 0000                  		dc.l Music97
0008B240                            ; ---------------------------------------------------------------------------
0008B240                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0008B240                            ; ---------------------------------------------------------------------------
0008B240 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0008B250 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0008B260 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0008B270 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0008B280 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0008B290 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0008B2A0 9090 9090 90               		dc.b $90, $90, $90, $90, $90
0008B2A6 00                         		even
0008B2A6                            
0008B2A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B2A6                            
0008B2A6                            
0008B2A6                            sub_71B4C:				; XREF: V_Int; H_Int
0008B2A6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0008B2AE 4E71                       		nop	
0008B2B0 4E71                       		nop	
0008B2B2 4E71                       		nop	
0008B2B4                            
0008B2B4                            loc_71B5A:
0008B2B4 4DF9 00FF F000             		lea	($FFF000).l,a6
0008B2BA 422E 000E                  		clr.b	$E(a6)
0008B2BE 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0008B2C2 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0008B2C6 532E 0001                  		subq.b	#1,1(a6)
0008B2CA 6600                       		bne.s	loc_71B9E
0008B2CC 4EBA 0000                  		jsr	sub_7260C(pc)
0008B2D0                            
0008B2D0                            loc_71B9E:
0008B2D0 102E 0004                  		move.b	4(a6),d0
0008B2D4 6700                       		beq.s	loc_71BA8
0008B2D6 4EBA 0000                  		jsr	sub_72504(pc)
0008B2DA                            
0008B2DA                            loc_71BA8:
0008B2DA 4A2E 0024                  		tst.b	$24(a6)
0008B2DE 6700                       		beq.s	loc_71BB2
0008B2E0 4EBA 0000                  		jsr	sub_7267C(pc)
0008B2E4                            
0008B2E4                            loc_71BB2:
0008B2E4 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008B2E8 6700                       		beq.s	loc_71BBC	; if not, branch
0008B2EA 4EBA 0000                  		jsr	Sound_Play(pc)
0008B2EE                            
0008B2EE                            loc_71BBC:
0008B2EE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008B2F4 6700                       		beq.s	loc_71BC8
0008B2F6 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0008B2FA                            
0008B2FA                            loc_71BC8:
0008B2FA 4BEE 0040                  		lea	$40(a6),a5
0008B2FE 4A15                       		tst.b	(a5)
0008B300 6A00                       		bpl.s	loc_71BD4
0008B302 4EBA 0000                  		jsr	sub_71C4E(pc)
0008B306                            
0008B306                            loc_71BD4:
0008B306 422E 0008                  		clr.b	8(a6)
0008B30A 7E05                       		moveq	#5,d7
0008B30C                            
0008B30C                            loc_71BDA:
0008B30C DAFC 0030                  		adda.w	#$30,a5
0008B310 4A15                       		tst.b	(a5)
0008B312 6A00                       		bpl.s	loc_71BE6
0008B314 4EBA 0000                  		jsr	sub_71CCA(pc)
0008B318                            
0008B318                            loc_71BE6:
0008B318 51CF FFF2                  		dbf	d7,loc_71BDA
0008B31C                            
0008B31C 7E02                       		moveq	#2,d7
0008B31E                            
0008B31E                            loc_71BEC:
0008B31E DAFC 0030                  		adda.w	#$30,a5
0008B322 4A15                       		tst.b	(a5)
0008B324 6A00                       		bpl.s	loc_71BF8
0008B326 4EBA 0000                  		jsr	sub_72850(pc)
0008B32A                            
0008B32A                            loc_71BF8:
0008B32A 51CF FFF2                  		dbf	d7,loc_71BEC
0008B32E                            
0008B32E 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008B334 7E02                       		moveq	#2,d7
0008B336                            
0008B336                            loc_71C04:
0008B336 DAFC 0030                  		adda.w	#$30,a5
0008B33A 4A15                       		tst.b	(a5)
0008B33C 6A00                       		bpl.s	loc_71C10
0008B33E 4EBA 0000                  		jsr	sub_71CCA(pc)
0008B342                            
0008B342                            loc_71C10:
0008B342 51CF FFF2                  		dbf	d7,loc_71C04
0008B346                            
0008B346 7E02                       		moveq	#2,d7
0008B348                            
0008B348                            loc_71C16:
0008B348 DAFC 0030                  		adda.w	#$30,a5
0008B34C 4A15                       		tst.b	(a5)
0008B34E 6A00                       		bpl.s	loc_71C22
0008B350 4EBA 0000                  		jsr	sub_72850(pc)
0008B354                            
0008B354                            loc_71C22:
0008B354 51CF FFF2                  		dbf	d7,loc_71C16
0008B358 1D7C 0040 000E             		move.b	#$40,$E(a6)
0008B35E DAFC 0030                  		adda.w	#$30,a5
0008B362 4A15                       		tst.b	(a5)
0008B364 6A00                       		bpl.s	loc_71C38
0008B366 4EBA 0000                  		jsr	sub_71CCA(pc)
0008B36A                            
0008B36A                            loc_71C38:
0008B36A DAFC 0030                  		adda.w	#$30,a5
0008B36E 4A15                       		tst.b	(a5)
0008B370 6A00                       		bpl.s	loc_71C44
0008B372 4EBA 0000                  		jsr	sub_72850(pc)
0008B376                            
0008B376                            loc_71C44:
0008B376 1439 00A0 4000             		move.b	($A04000).l,d2
0008B37C 0802 0007                  		btst	#7,d2
0008B380 66F4                       		bne.s	loc_71C44
0008B382 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
0008B38A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0008B392 4E75                       		rts	
0008B394                            ; End of function sub_71B4C
0008B394                            
0008B394                            
0008B394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B394                            
0008B394                            
0008B394                            sub_71C4E:				; XREF: sub_71B4C
0008B394 532D 000E                  		subq.b	#1,$E(a5)
0008B398 6600                       		bne.s	locret_71CAA
0008B39A 1D7C 0080 0008             		move.b	#$80,8(a6)
0008B3A0 286D 0004                  		movea.l	4(a5),a4
0008B3A4                            
0008B3A4                            loc_71C5E:
0008B3A4 7A00                       		moveq	#0,d5
0008B3A6 1A1C                       		move.b	(a4)+,d5
0008B3A8 0C05 00E0                  		cmpi.b	#-$20,d5
0008B3AC 6500                       		bcs.s	loc_71C6E
0008B3AE 4EBA 0000                  		jsr	sub_72A5A(pc)
0008B3B2 60F0                       		bra.s	loc_71C5E
0008B3B4                            ; ===========================================================================
0008B3B4                            
0008B3B4                            loc_71C6E:
0008B3B4 4A05                       		tst.b	d5
0008B3B6 6A00                       		bpl.s	loc_71C84
0008B3B8 1B45 0010                  		move.b	d5,$10(a5)
0008B3BC 1A1C                       		move.b	(a4)+,d5
0008B3BE 6A00                       		bpl.s	loc_71C84
0008B3C0 534C                       		subq.w	#1,a4
0008B3C2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008B3C8 6000                       		bra.s	loc_71C88
0008B3CA                            ; ===========================================================================
0008B3CA                            
0008B3CA                            loc_71C84:
0008B3CA 4EBA 0000                  		jsr	sub_71D40(pc)
0008B3CE                            
0008B3CE                            loc_71C88:
0008B3CE 2B4C 0004                  		move.l	a4,4(a5)
0008B3D2 0815 0002                  		btst	#2,(a5)
0008B3D6 6600                       		bne.s	locret_71CAA
0008B3D8 7000                       		moveq	#0,d0
0008B3DA 102D 0010                  		move.b	$10(a5),d0
0008B3DE 0C00 0080                  		cmpi.b	#$80,d0
0008B3E2 6700                       		beq.s	locret_71CAA
0008B3E4 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0008B3EA                            
0008B3EA                            locret_71CAA:
0008B3EA 4E75                       		rts	
0008B3EC                            ; ===========================================================================
0008B3EC                            
0008B3EC                            loc_71CAC:
0008B3EC 0400 0088                  		subi.b	#$88,d0
0008B3F0 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0008B3F4 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0008B3FA 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0008B402 4E75                       		rts	
0008B404                            ; End of function sub_71C4E
0008B404                            
0008B404                            ; ===========================================================================
0008B404 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0008B40A                            
0008B40A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B40A                            
0008B40A                            
0008B40A                            sub_71CCA:				; XREF: sub_71B4C
0008B40A 532D 000E                  		subq.b	#1,$E(a5)
0008B40E 6600                       		bne.s	loc_71CE0
0008B410 0895 0004                  		bclr	#4,(a5)
0008B414 4EBA 0000                  		jsr	sub_71CEC(pc)
0008B418 4EBA 0000                  		jsr	sub_71E18(pc)
0008B41C 6000 0000                  		bra.w	loc_726E2
0008B420                            ; ===========================================================================
0008B420                            
0008B420                            loc_71CE0:
0008B420 4EBA 0000                  		jsr	sub_71D9E(pc)
0008B424 4EBA 0000                  		jsr	sub_71DC6(pc)
0008B428 6000 0000                  		bra.w	loc_71E24
0008B42C                            ; End of function sub_71CCA
0008B42C                            
0008B42C                            
0008B42C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B42C                            
0008B42C                            
0008B42C                            sub_71CEC:				; XREF: sub_71CCA
0008B42C 286D 0004                  		movea.l	4(a5),a4
0008B430 0895 0001                  		bclr	#1,(a5)
0008B434                            
0008B434                            loc_71CF4:
0008B434 7A00                       		moveq	#0,d5
0008B436 1A1C                       		move.b	(a4)+,d5
0008B438 0C05 00E0                  		cmpi.b	#-$20,d5
0008B43C 6500                       		bcs.s	loc_71D04
0008B43E 4EBA 0000                  		jsr	sub_72A5A(pc)
0008B442 60F0                       		bra.s	loc_71CF4
0008B444                            ; ===========================================================================
0008B444                            
0008B444                            loc_71D04:
0008B444 4EBA 0000                  		jsr	sub_726FE(pc)
0008B448 4A05                       		tst.b	d5
0008B44A 6A00                       		bpl.s	loc_71D1A
0008B44C 4EBA 0000                  		jsr	sub_71D22(pc)
0008B450 1A1C                       		move.b	(a4)+,d5
0008B452 6A00                       		bpl.s	loc_71D1A
0008B454 534C                       		subq.w	#1,a4
0008B456 6000 0000                  		bra.w	sub_71D60
0008B45A                            ; ===========================================================================
0008B45A                            
0008B45A                            loc_71D1A:
0008B45A 4EBA 0000                  		jsr	sub_71D40(pc)
0008B45E 6000 0000                  		bra.w	sub_71D60
0008B462                            ; End of function sub_71CEC
0008B462                            
0008B462                            
0008B462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B462                            
0008B462                            
0008B462                            sub_71D22:				; XREF: sub_71CEC
0008B462 0405 0080                  		subi.b	#$80,d5
0008B466 6700                       		beq.s	loc_71D58
0008B468 DA2D 0008                  		add.b	8(a5),d5
0008B46C 0245 007F                  		andi.w	#$7F,d5
0008B470 E34D                       		lsl.w	#1,d5
0008B472 41FA 0000                  		lea	word_72790(pc),a0
0008B476 3C30 5000                  		move.w	(a0,d5.w),d6
0008B47A 3B46 0010                  		move.w	d6,$10(a5)
0008B47E 4E75                       		rts	
0008B480                            ; End of function sub_71D22
0008B480                            
0008B480                            
0008B480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B480                            
0008B480                            
0008B480                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008B480 1005                       		move.b	d5,d0
0008B482 122D 0002                  		move.b	2(a5),d1
0008B486                            
0008B486                            loc_71D46:
0008B486 5301                       		subq.b	#1,d1
0008B488 6700                       		beq.s	loc_71D4E
0008B48A D005                       		add.b	d5,d0
0008B48C 60F8                       		bra.s	loc_71D46
0008B48E                            ; ===========================================================================
0008B48E                            
0008B48E                            loc_71D4E:
0008B48E 1B40 000F                  		move.b	d0,$F(a5)
0008B492 1B40 000E                  		move.b	d0,$E(a5)
0008B496 4E75                       		rts	
0008B498                            ; End of function sub_71D40
0008B498                            
0008B498                            ; ===========================================================================
0008B498                            
0008B498                            loc_71D58:				; XREF: sub_71D22
0008B498 08D5 0001                  		bset	#1,(a5)
0008B49C 426D 0010                  		clr.w	$10(a5)
0008B4A0                            
0008B4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B4A0                            
0008B4A0                            
0008B4A0                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008B4A0 2B4C 0004                  		move.l	a4,4(a5)
0008B4A4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008B4AA 0815 0004                  		btst	#4,(a5)
0008B4AE 6600                       		bne.s	locret_71D9C
0008B4B0 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0008B4B6 422D 000C                  		clr.b	$C(a5)
0008B4BA 0815 0003                  		btst	#3,(a5)
0008B4BE 6700                       		beq.s	locret_71D9C
0008B4C0 206D 0014                  		movea.l	$14(a5),a0
0008B4C4 1B58 0018                  		move.b	(a0)+,$18(a5)
0008B4C8 1B58 0019                  		move.b	(a0)+,$19(a5)
0008B4CC 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008B4D0 1018                       		move.b	(a0)+,d0
0008B4D2 E208                       		lsr.b	#1,d0
0008B4D4 1B40 001B                  		move.b	d0,$1B(a5)
0008B4D8 426D 001C                  		clr.w	$1C(a5)
0008B4DC                            
0008B4DC                            locret_71D9C:
0008B4DC 4E75                       		rts	
0008B4DE                            ; End of function sub_71D60
0008B4DE                            
0008B4DE                            
0008B4DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B4DE                            
0008B4DE                            
0008B4DE                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0008B4DE 4A2D 0012                  		tst.b	$12(a5)
0008B4E2 6700                       		beq.s	locret_71DC4
0008B4E4 532D 0012                  		subq.b	#1,$12(a5)
0008B4E8 6600                       		bne.s	locret_71DC4
0008B4EA 08D5 0001                  		bset	#1,(a5)
0008B4EE 4A2D 0001                  		tst.b	1(a5)
0008B4F2 6B00 0000                  		bmi.w	loc_71DBE
0008B4F6 4EBA 0000                  		jsr	sub_726FE(pc)
0008B4FA 584F                       		addq.w	#4,sp
0008B4FC 4E75                       		rts	
0008B4FE                            ; ===========================================================================
0008B4FE                            
0008B4FE                            loc_71DBE:
0008B4FE 4EBA 0000                  		jsr	sub_729A0(pc)
0008B502 584F                       		addq.w	#4,sp
0008B504                            
0008B504                            locret_71DC4:
0008B504 4E75                       		rts	
0008B506                            ; End of function sub_71D9E
0008B506                            
0008B506                            
0008B506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B506                            
0008B506                            
0008B506                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0008B506 584F                       		addq.w	#4,sp
0008B508 0815 0003                  		btst	#3,(a5)
0008B50C 6700                       		beq.s	locret_71E16
0008B50E 4A2D 0018                  		tst.b	$18(a5)
0008B512 6700                       		beq.s	loc_71DDA
0008B514 532D 0018                  		subq.b	#1,$18(a5)
0008B518 4E75                       		rts	
0008B51A                            ; ===========================================================================
0008B51A                            
0008B51A                            loc_71DDA:
0008B51A 532D 0019                  		subq.b	#1,$19(a5)
0008B51E 6700                       		beq.s	loc_71DE2
0008B520 4E75                       		rts	
0008B522                            ; ===========================================================================
0008B522                            
0008B522                            loc_71DE2:
0008B522 206D 0014                  		movea.l	$14(a5),a0
0008B526 1B68 0001 0019             		move.b	1(a0),$19(a5)
0008B52C 4A2D 001B                  		tst.b	$1B(a5)
0008B530 6600                       		bne.s	loc_71DFE
0008B532 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0008B538 442D 001A                  		neg.b	$1A(a5)
0008B53C 4E75                       		rts	
0008B53E                            ; ===========================================================================
0008B53E                            
0008B53E                            loc_71DFE:
0008B53E 532D 001B                  		subq.b	#1,$1B(a5)
0008B542 1C2D 001A                  		move.b	$1A(a5),d6
0008B546 4886                       		ext.w	d6
0008B548 DC6D 001C                  		add.w	$1C(a5),d6
0008B54C 3B46 001C                  		move.w	d6,$1C(a5)
0008B550 DC6D 0010                  		add.w	$10(a5),d6
0008B554 594F                       		subq.w	#4,sp
0008B556                            
0008B556                            locret_71E16:
0008B556 4E75                       		rts	
0008B558                            ; End of function sub_71DC6
0008B558                            
0008B558                            
0008B558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B558                            
0008B558                            
0008B558                            sub_71E18:				; XREF: sub_71CCA
0008B558 0815 0001                  		btst	#1,(a5)
0008B55C 6600                       		bne.s	locret_71E48
0008B55E 3C2D 0010                  		move.w	$10(a5),d6
0008B562 6700                       		beq.s	loc_71E4A
0008B564                            
0008B564                            loc_71E24:				; XREF: sub_71CCA
0008B564 102D 001E                  		move.b	$1E(a5),d0
0008B568 4880                       		ext.w	d0
0008B56A DC40                       		add.w	d0,d6
0008B56C 0815 0002                  		btst	#2,(a5)
0008B570 6600                       		bne.s	locret_71E48
0008B572 3206                       		move.w	d6,d1
0008B574 E049                       		lsr.w	#8,d1
0008B576 103C 00A4                  		move.b	#-$5C,d0
0008B57A 4EBA 0000                  		jsr	sub_72722(pc)
0008B57E 1206                       		move.b	d6,d1
0008B580 103C 00A0                  		move.b	#-$60,d0
0008B584 4EBA 0000                  		jsr	sub_72722(pc)
0008B588                            
0008B588                            locret_71E48:
0008B588 4E75                       		rts	
0008B58A                            ; ===========================================================================
0008B58A                            
0008B58A                            loc_71E4A:
0008B58A 08D5 0001                  		bset	#1,(a5)
0008B58E 4E75                       		rts	
0008B590                            ; End of function sub_71E18
0008B590                            
0008B590                            ; ===========================================================================
0008B590                            
0008B590                            loc_71E50:				; XREF: sub_71B4C
0008B590 6B00                       		bmi.s	loc_71E94
0008B592 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0008B598 6700 0000                  		beq.w	loc_71EFE
0008B59C 1D7C 0002 0003             		move.b	#2,3(a6)
0008B5A2 7602                       		moveq	#2,d3
0008B5A4 103C 00B4                  		move.b	#-$4C,d0
0008B5A8 7200                       		moveq	#0,d1
0008B5AA                            
0008B5AA                            loc_71E6A:
0008B5AA 4EBA 0000                  		jsr	sub_7272E(pc)
0008B5AE 4EBA 0000                  		jsr	sub_72764(pc)
0008B5B2 5200                       		addq.b	#1,d0
0008B5B4 51CB FFF4                  		dbf	d3,loc_71E6A
0008B5B8                            
0008B5B8 7602                       		moveq	#2,d3
0008B5BA 7028                       		moveq	#$28,d0
0008B5BC                            
0008B5BC                            loc_71E7C:
0008B5BC 1203                       		move.b	d3,d1
0008B5BE 4EBA 0000                  		jsr	sub_7272E(pc)
0008B5C2 5801                       		addq.b	#4,d1
0008B5C4 4EBA 0000                  		jsr	sub_7272E(pc)
0008B5C8 51CB FFF2                  		dbf	d3,loc_71E7C
0008B5CC                            
0008B5CC 4EBA 0000                  		jsr	sub_729B6(pc)
0008B5D0 13FC 007F 00A0 1FFF        		move.b	#$7F,($A01FFF).l; pause DAC
0008B5D8 6000 FD9C                  		bra.w	loc_71C44
0008B5DC                            ; ===========================================================================
0008B5DC                            
0008B5DC                            loc_71E94:				; XREF: loc_71E50
0008B5DC 422E 0003                  		clr.b	3(a6)
0008B5E0 7630                       		moveq	#$30,d3
0008B5E2 4BEE 0040                  		lea	$40(a6),a5
0008B5E6 7806                       		moveq	#6,d4
0008B5E8                            
0008B5E8                            loc_71EA0:
0008B5E8 0815 0007                  		btst	#7,(a5)
0008B5EC 6700                       		beq.s	loc_71EB8
0008B5EE 0815 0002                  		btst	#2,(a5)
0008B5F2 6600                       		bne.s	loc_71EB8
0008B5F4 103C 00B4                  		move.b	#-$4C,d0
0008B5F8 122D 000A                  		move.b	$A(a5),d1
0008B5FC 4EBA 0000                  		jsr	sub_72722(pc)
0008B600                            
0008B600                            loc_71EB8:
0008B600 DAC3                       		adda.w	d3,a5
0008B602 51CC FFE4                  		dbf	d4,loc_71EA0
0008B606                            
0008B606 4BEE 0220                  		lea	$220(a6),a5
0008B60A 7802                       		moveq	#2,d4
0008B60C                            
0008B60C                            loc_71EC4:
0008B60C 0815 0007                  		btst	#7,(a5)
0008B610 6700                       		beq.s	loc_71EDC
0008B612 0815 0002                  		btst	#2,(a5)
0008B616 6600                       		bne.s	loc_71EDC
0008B618 103C 00B4                  		move.b	#-$4C,d0
0008B61C 122D 000A                  		move.b	$A(a5),d1
0008B620 4EBA 0000                  		jsr	sub_72722(pc)
0008B624                            
0008B624                            loc_71EDC:
0008B624 DAC3                       		adda.w	d3,a5
0008B626 51CC FFE4                  		dbf	d4,loc_71EC4
0008B62A                            
0008B62A 4BEE 0340                  		lea	$340(a6),a5
0008B62E 0815 0007                  		btst	#7,(a5)
0008B632 6700                       		beq.s	@UnpauseDAC
0008B634 0815 0002                  		btst	#2,(a5)
0008B638 6600                       		bne.s	@UnpauseDAC
0008B63A 103C 00B4                  		move.b	#-$4C,d0
0008B63E 122D 000A                  		move.b	$A(a5),d1
0008B642 4EBA 0000                  		jsr	sub_72722(pc)
0008B646                            
0008B646                            @UnpauseDAC:
0008B646 13FC 0000 00A0 1FFF        		move.b	#0,($A01FFF).l	; unpause DAC
0008B64E                            
0008B64E                            loc_71EFE:
0008B64E 6000 FD26                  		bra.w	loc_71C44
0008B652                            
0008B652                            ; ---------------------------------------------------------------------------
0008B652                            ; Subroutine to	play a sound or	music track
0008B652                            ; ---------------------------------------------------------------------------
0008B652                            
0008B652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B652                            
0008B652                            
0008B652                            Sound_Play:				; XREF: sub_71B4C
0008B652 2079 0008 B0D8             		movea.l	(Go_SoundTypes).l,a0
0008B658 43EE 000A                  		lea	$A(a6),a1	; load music track number
0008B65C 1616                       		move.b	0(a6),d3
0008B65E 7802                       		moveq	#2,d4
0008B660                            
0008B660                            loc_71F12:
0008B660 1011                       		move.b	(a1),d0		; move track number to d0
0008B662 1200                       		move.b	d0,d1
0008B664 4219                       		clr.b	(a1)+
0008B666 0400 0081                  		subi.b	#$81,d0
0008B66A 6500                       		bcs.s	loc_71F3E
0008B66C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008B672 6700                       		beq.s	loc_71F2C
0008B674 1D41 000A                  		move.b	d1,$A(a6)
0008B678 6000                       		bra.s	loc_71F3E
0008B67A                            ; ===========================================================================
0008B67A                            
0008B67A                            loc_71F2C:
0008B67A 0240 007F                  		andi.w	#$7F,d0
0008B67E 1430 0000                  		move.b	(a0,d0.w),d2
0008B682 B403                       		cmp.b	d3,d2
0008B684 6500                       		bcs.s	loc_71F3E
0008B686 1602                       		move.b	d2,d3
0008B688 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008B68C                            
0008B68C                            loc_71F3E:
0008B68C 51CC FFD2                  		dbf	d4,loc_71F12
0008B690                            
0008B690 4A03                       		tst.b	d3
0008B692 6B00                       		bmi.s	locret_71F4A
0008B694 1C83                       		move.b	d3,0(a6)
0008B696                            
0008B696                            locret_71F4A:
0008B696 4E75                       		rts	
0008B698                            ; End of function Sound_Play
0008B698                            
0008B698                            
0008B698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B698                            
0008B698                            
0008B698                            Sound_ChkValue:				; XREF: sub_71B4C
0008B698 7E00                       		moveq	#0,d7
0008B69A 1E2E 0009                  		move.b	9(a6),d7
0008B69E 6700 0000                  		beq.w	Sound_E4
0008B6A2 6A00                       		bpl.s	locret_71F8C
0008B6A4 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008B6AA 0C07 009F                  		cmpi.b	#$9F,d7
0008B6AE 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0008B6B2 0C07 00A0                  		cmpi.b	#$A0,d7
0008B6B6 6500 0000                  		bcs.w	locret_71F8C
0008B6BA 0C07 00CF                  		cmpi.b	#$CF,d7
0008B6BE 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0008B6C2 0C07 00D0                  		cmpi.b	#$D0,d7
0008B6C6 6500 0000                  		bcs.w	locret_71F8C
0008B6CA 0C07 00D1                  		cmpi.b	#$D1,d7
0008B6CE 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
0008B6D2 0C07 00DF                  		cmpi.b	#$DF,d7
0008B6D6 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
0008B6DA 0C07 00E4                  		cmpi.b	#$E4,d7
0008B6DE 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0008B6E0                            
0008B6E0                            locret_71F8C:
0008B6E0 4E75                       		rts	
0008B6E2                            ; ===========================================================================
0008B6E2                            
0008B6E2                            Sound_E0toE4:				; XREF: Sound_ChkValue
0008B6E2 0407 00E0                  		subi.b	#$E0,d7
0008B6E6 E54F                       		lsl.w	#2,d7
0008B6E8 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008B6EC                            ; ===========================================================================
0008B6EC                            
0008B6EC                            Sound_ExIndex:
0008B6EC 6000 0000                  		bra.w	Sound_E0
0008B6F0                            ; ===========================================================================
0008B6F0 6000 0000                  		bra.w	Sound_E1
0008B6F4                            ; ===========================================================================
0008B6F4 6000 0000                  		bra.w	Sound_E2
0008B6F8                            ; ===========================================================================
0008B6F8 6000 0000                  		bra.w	Sound_E3
0008B6FC                            ; ===========================================================================
0008B6FC 6000 0000                  		bra.w	Sound_E4
0008B700                            ; ===========================================================================
0008B700                            ; ---------------------------------------------------------------------------
0008B700                            ; Play "Say-gaa" PCM sound
0008B700                            ; ---------------------------------------------------------------------------
0008B700                            
0008B700                            Sound_E1:				  
0008B700 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0008B706 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0008B70C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0008B714                            PlayPCM_Loop:	  
0008B714 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0008B71A 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0008B71E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0008B722 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0008B724 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0008B726 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0008B72A 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0008B730 4EB8 10F0                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0008B734 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0008B73A 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0008B73C 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0008B73E                            return_PlayPCM: 
0008B73E 584F                       		addq.w	#4,sp 
0008B740 4E75                       		rts
0008B742                            
0008B742                            ; ===========================================================================
0008B742                            ; ---------------------------------------------------------------------------
0008B742                            ; Play music track $81-$9F
0008B742                            ; ---------------------------------------------------------------------------
0008B742                            
0008B742                            Sound_81to9F:				; XREF: Sound_ChkValue
0008B742 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008B746 6600                       		bne.s	loc_72024	; if not, branch
0008B748 4A2E 0027                  		tst.b	$27(a6)
0008B74C 6600 0000                  		bne.w	loc_721B6
0008B750 4BEE 0040                  		lea	$40(a6),a5
0008B754 7009                       		moveq	#9,d0
0008B756                            
0008B756                            loc_71FE6:
0008B756 0895 0002                  		bclr	#2,(a5)
0008B75A DAFC 0030                  		adda.w	#$30,a5
0008B75E 51C8 FFF6                  		dbf	d0,loc_71FE6
0008B762                            
0008B762 4BEE 0220                  		lea	$220(a6),a5
0008B766 7005                       		moveq	#5,d0
0008B768                            
0008B768                            loc_71FF8:
0008B768 0895 0007                  		bclr	#7,(a5)
0008B76C DAFC 0030                  		adda.w	#$30,a5
0008B770 51C8 FFF6                  		dbf	d0,loc_71FF8
0008B774 4216                       		clr.b	0(a6)
0008B776 204E                       		movea.l	a6,a0
0008B778 43EE 03A0                  		lea	$3A0(a6),a1
0008B77C 303C 0087                  		move.w	#$87,d0
0008B780                            
0008B780                            loc_72012:
0008B780 22D8                       		move.l	(a0)+,(a1)+
0008B782 51C8 FFFC                  		dbf	d0,loc_72012
0008B786                            
0008B786 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008B78C 4216                       		clr.b	0(a6)
0008B78E 6000                       		bra.s	loc_7202C
0008B790                            ; ===========================================================================
0008B790                            
0008B790                            loc_72024:
0008B790 422E 0027                  		clr.b	$27(a6)
0008B794 422E 0026                  		clr.b	$26(a6)
0008B798                            
0008B798                            loc_7202C:
0008B798 4EBA 0000                  		jsr	sub_725CA(pc)
0008B79C 2879 0008 B0E8             		movea.l	(off_719A0).l,a4
0008B7A2 0407 0081                  		subi.b	#$81,d7
0008B7A6 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0008B7AC 2879 0008 B0E0             		movea.l	(Go_MusicIndex).l,a4
0008B7B2 E54F                       		lsl.w	#2,d7
0008B7B4 2874 7000                  		movea.l	(a4,d7.w),a4
0008B7B8 7000                       		moveq	#0,d0
0008B7BA 3014                       		move.w	(a4),d0
0008B7BC D08C                       		add.l	a4,d0
0008B7BE 2D40 0018                  		move.l	d0,$18(a6)
0008B7C2 102C 0005                  		move.b	5(a4),d0
0008B7C6 1D40 0028                  		move.b	d0,$28(a6)
0008B7CA 4A2E 002A                  		tst.b	$2A(a6)
0008B7CE 6700                       		beq.s	loc_72068
0008B7D0 102E 0029                  		move.b	$29(a6),d0
0008B7D4                            
0008B7D4                            loc_72068:
0008B7D4 1D40 0002                  		move.b	d0,2(a6)
0008B7D8 1D40 0001                  		move.b	d0,1(a6)
0008B7DC 7200                       		moveq	#0,d1
0008B7DE 264C                       		movea.l	a4,a3
0008B7E0 5C4C                       		addq.w	#6,a4
0008B7E2 7E00                       		moveq	#0,d7
0008B7E4 1E2B 0002                  		move.b	2(a3),d7
0008B7E8 6700 0000                  		beq.w	loc_72114
0008B7EC 5307                       		subq.b	#1,d7
0008B7EE 123C 00C0                  		move.b	#-$40,d1
0008B7F2 182B 0004                  		move.b	4(a3),d4
0008B7F6 7C30                       		moveq	#$30,d6
0008B7F8 1A3C 0001                  		move.b	#1,d5
0008B7FC 43EE 0040                  		lea	$40(a6),a1
0008B800 45FA 0000                  		lea	byte_721BA(pc),a2
0008B804                            
0008B804                            loc_72098:
0008B804 08D1 0007                  		bset	#7,(a1)
0008B808 135A 0001                  		move.b	(a2)+,1(a1)
0008B80C 1344 0002                  		move.b	d4,2(a1)
0008B810 1346 000D                  		move.b	d6,$D(a1)
0008B814 1341 000A                  		move.b	d1,$A(a1)
0008B818 1345 000E                  		move.b	d5,$E(a1)
0008B81C 7000                       		moveq	#0,d0
0008B81E 301C                       		move.w	(a4)+,d0
0008B820 D08B                       		add.l	a3,d0
0008B822 2340 0004                  		move.l	d0,4(a1)
0008B826 335C 0008                  		move.w	(a4)+,8(a1)
0008B82A D2C6                       		adda.w	d6,a1
0008B82C 51CF FFD6                  		dbf	d7,loc_72098
0008B830 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0008B836 6600                       		bne.s	loc_720D8
0008B838 702B                       		moveq	#$2B,d0
0008B83A 7200                       		moveq	#0,d1
0008B83C 4EBA 0000                  		jsr	sub_7272E(pc)
0008B840 6000 0000                  		bra.w	loc_72114
0008B844                            ; ===========================================================================
0008B844                            
0008B844                            loc_720D8:
0008B844 7028                       		moveq	#$28,d0
0008B846 7206                       		moveq	#6,d1
0008B848 4EBA 0000                  		jsr	sub_7272E(pc)
0008B84C 103C 0042                  		move.b	#$42,d0
0008B850 727F                       		moveq	#$7F,d1
0008B852 4EBA 0000                  		jsr	sub_72764(pc)
0008B856 103C 004A                  		move.b	#$4A,d0
0008B85A 727F                       		moveq	#$7F,d1
0008B85C 4EBA 0000                  		jsr	sub_72764(pc)
0008B860 103C 0046                  		move.b	#$46,d0
0008B864 727F                       		moveq	#$7F,d1
0008B866 4EBA 0000                  		jsr	sub_72764(pc)
0008B86A 103C 004E                  		move.b	#$4E,d0
0008B86E 727F                       		moveq	#$7F,d1
0008B870 4EBA 0000                  		jsr	sub_72764(pc)
0008B874 103C 00B6                  		move.b	#-$4A,d0
0008B878 123C 00C0                  		move.b	#-$40,d1
0008B87C 4EBA 0000                  		jsr	sub_72764(pc)
0008B880                            
0008B880                            loc_72114:
0008B880 7E00                       		moveq	#0,d7
0008B882 1E2B 0003                  		move.b	3(a3),d7
0008B886 6700                       		beq.s	loc_72154
0008B888 5307                       		subq.b	#1,d7
0008B88A 43EE 0190                  		lea	$190(a6),a1
0008B88E 45FA 0000                  		lea	byte_721C2(pc),a2
0008B892                            
0008B892                            loc_72126:
0008B892 08D1 0007                  		bset	#7,(a1)
0008B896 135A 0001                  		move.b	(a2)+,1(a1)
0008B89A 1344 0002                  		move.b	d4,2(a1)
0008B89E 1346 000D                  		move.b	d6,$D(a1)
0008B8A2 1345 000E                  		move.b	d5,$E(a1)
0008B8A6 7000                       		moveq	#0,d0
0008B8A8 301C                       		move.w	(a4)+,d0
0008B8AA D08B                       		add.l	a3,d0
0008B8AC 2340 0004                  		move.l	d0,4(a1)
0008B8B0 335C 0008                  		move.w	(a4)+,8(a1)
0008B8B4 101C                       		move.b	(a4)+,d0
0008B8B6 135C 000B                  		move.b	(a4)+,$B(a1)
0008B8BA D2C6                       		adda.w	d6,a1
0008B8BC 51CF FFD4                  		dbf	d7,loc_72126
0008B8C0                            
0008B8C0                            loc_72154:
0008B8C0 43EE 0220                  		lea	$220(a6),a1
0008B8C4 7E05                       		moveq	#5,d7
0008B8C6                            
0008B8C6                            loc_7215A:
0008B8C6 4A11                       		tst.b	(a1)
0008B8C8 6A00 0000                  		bpl.w	loc_7217C
0008B8CC 7000                       		moveq	#0,d0
0008B8CE 1029 0001                  		move.b	1(a1),d0
0008B8D2 6B00                       		bmi.s	loc_7216E
0008B8D4 5500                       		subq.b	#2,d0
0008B8D6 E508                       		lsl.b	#2,d0
0008B8D8 6000                       		bra.s	loc_72170
0008B8DA                            ; ===========================================================================
0008B8DA                            
0008B8DA                            loc_7216E:
0008B8DA E608                       		lsr.b	#3,d0
0008B8DC                            
0008B8DC                            loc_72170:
0008B8DC 41FA 0000                  		lea	dword_722CC(pc),a0
0008B8E0 2070 0000                  		movea.l	(a0,d0.w),a0
0008B8E4 08D0 0002                  		bset	#2,(a0)
0008B8E8                            
0008B8E8                            loc_7217C:
0008B8E8 D2C6                       		adda.w	d6,a1
0008B8EA 51CF FFDA                  		dbf	d7,loc_7215A
0008B8EE                            
0008B8EE 4A6E 0340                  		tst.w	$340(a6)
0008B8F2 6A00                       		bpl.s	loc_7218E
0008B8F4 08EE 0002 0100             		bset	#2,$100(a6)
0008B8FA                            
0008B8FA                            loc_7218E:
0008B8FA 4A6E 0370                  		tst.w	$370(a6)
0008B8FE 6A00                       		bpl.s	loc_7219A
0008B900 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008B906                            
0008B906                            loc_7219A:
0008B906 4BEE 0070                  		lea	$70(a6),a5
0008B90A 7805                       		moveq	#5,d4
0008B90C                            
0008B90C                            loc_721A0:
0008B90C 4EBA 0000                  		jsr	sub_726FE(pc)
0008B910 DAC6                       		adda.w	d6,a5
0008B912 51CC FFF8                  		dbf	d4,loc_721A0
0008B916 7802                       		moveq	#2,d4
0008B918                            
0008B918                            loc_721AC:
0008B918 4EBA 0000                  		jsr	sub_729A0(pc)
0008B91C DAC6                       		adda.w	d6,a5
0008B91E 51CC FFF8                  		dbf	d4,loc_721AC
0008B922                            
0008B922                            loc_721B6:
0008B922 584F                       		addq.w	#4,sp
0008B924 4E75                       		rts	
0008B926                            ; ===========================================================================
0008B926 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0008B92E                            		even
0008B92E 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008B932                            		even
0008B932                            ; ===========================================================================
0008B932                            ; ---------------------------------------------------------------------------
0008B932                            ; Play normal sound effect
0008B932                            ; ---------------------------------------------------------------------------
0008B932                            
0008B932                            Sound_D1toDF:
0008B932 4A2E 0027                  		tst.b	$27(a6)
0008B936 6600 0000                  		bne.w	loc_722C6
0008B93A 4A2E 0004                  		tst.b	4(a6)
0008B93E 6600 0000                  		bne.w	loc_722C6
0008B942 4A2E 0024                  		tst.b	$24(a6)
0008B946 6600 0000                  		bne.w	loc_722C6
0008B94A 2079 0008 B0E4             		movea.l	(Go_SoundIndex).l,a0
0008B950 0407 00A1                  		sub.b	#$A1,d7
0008B954 6000 0000                  		bra	SoundEffects_Common
0008B958                            
0008B958                            Sound_A0toCF:				; XREF: Sound_ChkValue
0008B958 4A2E 0027                  		tst.b	$27(a6)
0008B95C 6600 0000                  		bne.w	loc_722C6
0008B960 4A2E 0004                  		tst.b	4(a6)
0008B964 6600 0000                  		bne.w	loc_722C6
0008B968 4A2E 0024                  		tst.b	$24(a6)
0008B96C 6600 0000                  		bne.w	loc_722C6
0008B970 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0008B974 6600                       		bne.s	Sound_notB5	; if not, branch
0008B976 4A2E 002B                  		tst.b	$2B(a6)
0008B97A 6600                       		bne.s	loc_721EE
0008B97C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008B980                            
0008B980                            loc_721EE:
0008B980 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0008B986                            
0008B986                            Sound_notB5:
0008B986 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0008B98A 6600                       		bne.s	Sound_notA7	; if not, branch
0008B98C 4A2E 002C                  		tst.b	$2C(a6)
0008B990 6600 0000                  		bne.w	locret_722C4
0008B994 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0008B99A                            
0008B99A                            Sound_notA7:
0008B99A 2079 0008 B0E4             		movea.l	(Go_SoundIndex).l,a0
0008B9A0 0407 00A0                  		subi.b	#$A0,d7
0008B9A4                            
0008B9A4                            SoundEffects_Common:
0008B9A4 E54F                       		lsl.w	#2,d7
0008B9A6 2670 7000                  		movea.l	(a0,d7.w),a3
0008B9AA 224B                       		movea.l	a3,a1
0008B9AC 7200                       		moveq	#0,d1
0008B9AE 3219                       		move.w	(a1)+,d1
0008B9B0 D28B                       		add.l	a3,d1
0008B9B2 1A19                       		move.b	(a1)+,d5
0008B9B4 1E19                       		move.b	(a1)+,d7
0008B9B6 5307                       		subq.b	#1,d7
0008B9B8 7C30                       		moveq	#$30,d6
0008B9BA                            
0008B9BA                            loc_72228:
0008B9BA 7600                       		moveq	#0,d3
0008B9BC 1629 0001                  		move.b	1(a1),d3
0008B9C0 1803                       		move.b	d3,d4
0008B9C2 6B00                       		bmi.s	loc_72244
0008B9C4 5543                       		subq.w	#2,d3
0008B9C6 E54B                       		lsl.w	#2,d3
0008B9C8 4BFA 0000                  		lea	dword_722CC(pc),a5
0008B9CC 2A75 3000                  		movea.l	(a5,d3.w),a5
0008B9D0 08D5 0002                  		bset	#2,(a5)
0008B9D4 6000                       		bra.s	loc_7226E
0008B9D6                            ; ===========================================================================
0008B9D6                            
0008B9D6                            loc_72244:
0008B9D6 E64B                       		lsr.w	#3,d3
0008B9D8 4BFA 0000                  		lea	dword_722CC(pc),a5
0008B9DC 2A75 3000                  		movea.l	(a5,d3.w),a5
0008B9E0 08D5 0002                  		bset	#2,(a5)
0008B9E4 0C04 00C0                  		cmpi.b	#$C0,d4
0008B9E8 6600                       		bne.s	loc_7226E
0008B9EA 1004                       		move.b	d4,d0
0008B9EC 0000 001F                  		ori.b	#$1F,d0
0008B9F0 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B9F6 0840 0005                  		bchg	#5,d0
0008B9FA 13C0 00C0 0011             		move.b	d0,($C00011).l
0008BA00                            
0008BA00                            loc_7226E:
0008BA00 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0008BA04 244D                       		movea.l	a5,a2
0008BA06 700B                       		moveq	#$B,d0
0008BA08                            
0008BA08                            loc_72276:
0008BA08 429A                       		clr.l	(a2)+
0008BA0A 51C8 FFFC                  		dbf	d0,loc_72276
0008BA0E                            
0008BA0E 3A99                       		move.w	(a1)+,(a5)
0008BA10 1B45 0002                  		move.b	d5,2(a5)
0008BA14 7000                       		moveq	#0,d0
0008BA16 3019                       		move.w	(a1)+,d0
0008BA18 D08B                       		add.l	a3,d0
0008BA1A 2B40 0004                  		move.l	d0,4(a5)
0008BA1E 3B59 0008                  		move.w	(a1)+,8(a5)
0008BA22 1B7C 0001 000E             		move.b	#1,$E(a5)
0008BA28 1B46 000D                  		move.b	d6,$D(a5)
0008BA2C 4A04                       		tst.b	d4
0008BA2E 6B00                       		bmi.s	loc_722A8
0008BA30 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008BA36 2B41 0020                  		move.l	d1,$20(a5)
0008BA3A                            
0008BA3A                            loc_722A8:
0008BA3A 51CF FF7E                  		dbf	d7,loc_72228
0008BA3E                            
0008BA3E 4A2E 0250                  		tst.b	$250(a6)
0008BA42 6A00                       		bpl.s	loc_722B8
0008BA44 08EE 0002 0340             		bset	#2,$340(a6)
0008BA4A                            
0008BA4A                            loc_722B8:
0008BA4A 4A2E 0310                  		tst.b	$310(a6)
0008BA4E 6A00                       		bpl.s	locret_722C4
0008BA50 08EE 0002 0370             		bset	#2,$370(a6)
0008BA56                            
0008BA56                            locret_722C4:
0008BA56 4E75                       		rts	
0008BA58                            ; ===========================================================================
0008BA58                            
0008BA58                            loc_722C6:
0008BA58 4216                       		clr.b	0(a6)
0008BA5A 4E75                       		rts	
0008BA5C                            ; ===========================================================================
0008BA5C 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008BA60 0000 0000                  		dc.l 0
0008BA64 00FF F100                  		dc.l $FFF100
0008BA68 00FF F130                  		dc.l $FFF130
0008BA6C 00FF F190                  		dc.l $FFF190
0008BA70 00FF F1C0                  		dc.l $FFF1C0
0008BA74 00FF F1F0                  		dc.l $FFF1F0
0008BA78 00FF F1F0                  		dc.l $FFF1F0
0008BA7C 00FF F220                  dword_722EC:	dc.l $FFF220
0008BA80 0000 0000                  		dc.l 0
0008BA84 00FF F250                  		dc.l $FFF250
0008BA88 00FF F280                  		dc.l $FFF280
0008BA8C 00FF F2B0                  		dc.l $FFF2B0
0008BA90 00FF F2E0                  		dc.l $FFF2E0
0008BA94 00FF F310                  		dc.l $FFF310
0008BA98 00FF F310                  		dc.l $FFF310
0008BA9C                            ; ===========================================================================
0008BA9C                            ; ---------------------------------------------------------------------------
0008BA9C                            ; Play GHZ waterfall sound
0008BA9C                            ; ---------------------------------------------------------------------------
0008BA9C                            
0008BA9C                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008BA9C 4A2E 0027                  		tst.b	$27(a6)
0008BAA0 6600 0000                  		bne.w	locret_723C6
0008BAA4 4A2E 0004                  		tst.b	4(a6)
0008BAA8 6600 0000                  		bne.w	locret_723C6
0008BAAC 4A2E 0024                  		tst.b	$24(a6)
0008BAB0 6600 0000                  		bne.w	locret_723C6
0008BAB4 2079 0008 B0DC             		movea.l	(Go_SoundD0).l,a0
0008BABA 0407 00D0                  		subi.b	#$D0,d7
0008BABE E54F                       		lsl.w	#2,d7
0008BAC0 2670 7000                  		movea.l	(a0,d7.w),a3
0008BAC4 224B                       		movea.l	a3,a1
0008BAC6 7000                       		moveq	#0,d0
0008BAC8 3019                       		move.w	(a1)+,d0
0008BACA D08B                       		add.l	a3,d0
0008BACC 2D40 0020                  		move.l	d0,$20(a6)
0008BAD0 1A19                       		move.b	(a1)+,d5
0008BAD2 1E19                       		move.b	(a1)+,d7
0008BAD4 5307                       		subq.b	#1,d7
0008BAD6 7C30                       		moveq	#$30,d6
0008BAD8                            
0008BAD8                            loc_72348:
0008BAD8 1829 0001                  		move.b	1(a1),d4
0008BADC 6B00                       		bmi.s	loc_7235A
0008BADE 08EE 0002 0100             		bset	#2,$100(a6)
0008BAE4 4BEE 0340                  		lea	$340(a6),a5
0008BAE8 6000                       		bra.s	loc_72364
0008BAEA                            ; ===========================================================================
0008BAEA                            
0008BAEA                            loc_7235A:
0008BAEA 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008BAF0 4BEE 0370                  		lea	$370(a6),a5
0008BAF4                            
0008BAF4                            loc_72364:
0008BAF4 244D                       		movea.l	a5,a2
0008BAF6 700B                       		moveq	#$B,d0
0008BAF8                            
0008BAF8                            loc_72368:
0008BAF8 429A                       		clr.l	(a2)+
0008BAFA 51C8 FFFC                  		dbf	d0,loc_72368
0008BAFE                            
0008BAFE 3A99                       		move.w	(a1)+,(a5)
0008BB00 1B45 0002                  		move.b	d5,2(a5)
0008BB04 7000                       		moveq	#0,d0
0008BB06 3019                       		move.w	(a1)+,d0
0008BB08 D08B                       		add.l	a3,d0
0008BB0A 2B40 0004                  		move.l	d0,4(a5)
0008BB0E 3B59 0008                  		move.w	(a1)+,8(a5)
0008BB12 1B7C 0001 000E             		move.b	#1,$E(a5)
0008BB18 1B46 000D                  		move.b	d6,$D(a5)
0008BB1C 4A04                       		tst.b	d4
0008BB1E 6B00                       		bmi.s	loc_72396
0008BB20 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008BB26                            
0008BB26                            loc_72396:
0008BB26 51CF FFB0                  		dbf	d7,loc_72348
0008BB2A                            
0008BB2A 4A2E 0250                  		tst.b	$250(a6)
0008BB2E 6A00                       		bpl.s	loc_723A6
0008BB30 08EE 0002 0340             		bset	#2,$340(a6)
0008BB36                            
0008BB36                            loc_723A6:
0008BB36 4A2E 0310                  		tst.b	$310(a6)
0008BB3A 6A00                       		bpl.s	locret_723C6
0008BB3C 08EE 0002 0370             		bset	#2,$370(a6)
0008BB42 0004 001F                  		ori.b	#$1F,d4
0008BB46 13C4 00C0 0011             		move.b	d4,($C00011).l
0008BB4C 0844 0005                  		bchg	#5,d4
0008BB50 13C4 00C0 0011             		move.b	d4,($C00011).l
0008BB56                            
0008BB56                            locret_723C6:
0008BB56 4E75                       		rts	
0008BB58                            ; End of function Sound_ChkValue
0008BB58                            
0008BB58                            ; ===========================================================================
0008BB58 00FF F100                  		dc.l $FFF100
0008BB5C 00FF F1F0                  		dc.l $FFF1F0
0008BB60 00FF F250                  		dc.l $FFF250
0008BB64 00FF F310                  		dc.l $FFF310
0008BB68 00FF F340                  		dc.l $FFF340
0008BB6C 00FF F370                  		dc.l $FFF370
0008BB70                            
0008BB70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BB70                            
0008BB70                            
0008BB70                            Snd_FadeOut1:				; XREF: Sound_E0
0008BB70 4216                       		clr.b	0(a6)
0008BB72 4BEE 0220                  		lea	$220(a6),a5
0008BB76 7E05                       		moveq	#5,d7
0008BB78                            
0008BB78                            loc_723EA:
0008BB78 4A15                       		tst.b	(a5)
0008BB7A 6A00 0000                  		bpl.w	loc_72472
0008BB7E 0895 0007                  		bclr	#7,(a5)
0008BB82 7600                       		moveq	#0,d3
0008BB84 162D 0001                  		move.b	1(a5),d3
0008BB88 6B00                       		bmi.s	loc_7243C
0008BB8A 4EBA 0000                  		jsr	sub_726FE(pc)
0008BB8E 0C03 0004                  		cmpi.b	#4,d3
0008BB92 6600                       		bne.s	loc_72416
0008BB94 4A2E 0340                  		tst.b	$340(a6)
0008BB98 6A00                       		bpl.s	loc_72416
0008BB9A 4BEE 0340                  		lea	$340(a6),a5
0008BB9E 226E 0020                  		movea.l	$20(a6),a1
0008BBA2 6000                       		bra.s	loc_72428
0008BBA4                            ; ===========================================================================
0008BBA4                            
0008BBA4                            loc_72416:
0008BBA4 5503                       		subq.b	#2,d3
0008BBA6 E50B                       		lsl.b	#2,d3
0008BBA8 41FA FEB2                  		lea	dword_722CC(pc),a0
0008BBAC 264D                       		movea.l	a5,a3
0008BBAE 2A70 3000                  		movea.l	(a0,d3.w),a5
0008BBB2 226E 0018                  		movea.l	$18(a6),a1
0008BBB6                            
0008BBB6                            loc_72428:
0008BBB6 0895 0002                  		bclr	#2,(a5)
0008BBBA 08D5 0001                  		bset	#1,(a5)
0008BBBE 102D 000B                  		move.b	$B(a5),d0
0008BBC2 4EBA 0000                  		jsr	sub_72C4E(pc)
0008BBC6 2A4B                       		movea.l	a3,a5
0008BBC8 6000                       		bra.s	loc_72472
0008BBCA                            ; ===========================================================================
0008BBCA                            
0008BBCA                            loc_7243C:
0008BBCA 4EBA 0000                  		jsr	sub_729A0(pc)
0008BBCE 41EE 0370                  		lea	$370(a6),a0
0008BBD2 0C03 00E0                  		cmpi.b	#$E0,d3
0008BBD6 6700                       		beq.s	loc_7245A
0008BBD8 0C03 00C0                  		cmpi.b	#$C0,d3
0008BBDC 6700                       		beq.s	loc_7245A
0008BBDE E60B                       		lsr.b	#3,d3
0008BBE0 41FA FE7A                  		lea	dword_722CC(pc),a0
0008BBE4 2070 3000                  		movea.l	(a0,d3.w),a0
0008BBE8                            
0008BBE8                            loc_7245A:
0008BBE8 0890 0002                  		bclr	#2,(a0)
0008BBEC 08D0 0001                  		bset	#1,(a0)
0008BBF0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008BBF6 6600                       		bne.s	loc_72472
0008BBF8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008BC00                            
0008BC00                            loc_72472:
0008BC00 DAFC 0030                  		adda.w	#$30,a5
0008BC04 51CF FF72                  		dbf	d7,loc_723EA
0008BC08                            
0008BC08 4E75                       		rts	
0008BC0A                            ; End of function Snd_FadeOut1
0008BC0A                            
0008BC0A                            
0008BC0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BC0A                            
0008BC0A                            
0008BC0A                            Snd_FadeOut2:				; XREF: Sound_E0
0008BC0A 4BEE 0340                  		lea	$340(a6),a5
0008BC0E 4A15                       		tst.b	(a5)
0008BC10 6A00                       		bpl.s	loc_724AE
0008BC12 0895 0007                  		bclr	#7,(a5)
0008BC16 0815 0002                  		btst	#2,(a5)
0008BC1A 6600                       		bne.s	loc_724AE
0008BC1C 4EBA 0000                  		jsr	loc_7270A(pc)
0008BC20 4BEE 0100                  		lea	$100(a6),a5
0008BC24 0895 0002                  		bclr	#2,(a5)
0008BC28 08D5 0001                  		bset	#1,(a5)
0008BC2C 4A15                       		tst.b	(a5)
0008BC2E 6A00                       		bpl.s	loc_724AE
0008BC30 226E 0018                  		movea.l	$18(a6),a1
0008BC34 102D 000B                  		move.b	$B(a5),d0
0008BC38 4EBA 0000                  		jsr	sub_72C4E(pc)
0008BC3C                            
0008BC3C                            loc_724AE:
0008BC3C 4BEE 0370                  		lea	$370(a6),a5
0008BC40 4A15                       		tst.b	(a5)
0008BC42 6A00                       		bpl.s	locret_724E4
0008BC44 0895 0007                  		bclr	#7,(a5)
0008BC48 0815 0002                  		btst	#2,(a5)
0008BC4C 6600                       		bne.s	locret_724E4
0008BC4E 4EBA 0000                  		jsr	loc_729A6(pc)
0008BC52 4BEE 01F0                  		lea	$1F0(a6),a5
0008BC56 0895 0002                  		bclr	#2,(a5)
0008BC5A 08D5 0001                  		bset	#1,(a5)
0008BC5E 4A15                       		tst.b	(a5)
0008BC60 6A00                       		bpl.s	locret_724E4
0008BC62 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0008BC68 6600                       		bne.s	locret_724E4
0008BC6A 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0008BC72                            
0008BC72                            locret_724E4:
0008BC72 4E75                       		rts	
0008BC74                            ; End of function Snd_FadeOut2
0008BC74                            
0008BC74                            ; ===========================================================================
0008BC74                            ; ---------------------------------------------------------------------------
0008BC74                            ; Fade out music
0008BC74                            ; ---------------------------------------------------------------------------
0008BC74                            
0008BC74                            Sound_E0:				; XREF: Sound_ExIndex
0008BC74 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0008BC78 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008BC7C 1D7C 0003 0006             		move.b	#3,6(a6)
0008BC82 1D7C 0028 0004             		move.b	#$28,4(a6)
0008BC88 422E 0040                  		clr.b	$40(a6)
0008BC8C 422E 002A                  		clr.b	$2A(a6)
0008BC90 4E75                       		rts	
0008BC92                            
0008BC92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BC92                            
0008BC92                            
0008BC92                            sub_72504:				; XREF: sub_71B4C
0008BC92 102E 0006                  		move.b	6(a6),d0
0008BC96 6700                       		beq.s	loc_72510
0008BC98 532E 0006                  		subq.b	#1,6(a6)
0008BC9C 4E75                       		rts	
0008BC9E                            ; ===========================================================================
0008BC9E                            
0008BC9E                            loc_72510:
0008BC9E 532E 0004                  		subq.b	#1,4(a6)
0008BCA2 6700 0000                  		beq.w	Sound_E4
0008BCA6 1D7C 0003 0006             		move.b	#3,6(a6)
0008BCAC 4BEE 0070                  		lea	$70(a6),a5
0008BCB0 7E05                       		moveq	#5,d7
0008BCB2                            
0008BCB2                            loc_72524:
0008BCB2 4A15                       		tst.b	(a5)
0008BCB4 6A00                       		bpl.s	loc_72538
0008BCB6 522D 0009                  		addq.b	#1,9(a5)
0008BCBA 6A00                       		bpl.s	loc_72534
0008BCBC 0895 0007                  		bclr	#7,(a5)
0008BCC0 6000                       		bra.s	loc_72538
0008BCC2                            ; ===========================================================================
0008BCC2                            
0008BCC2                            loc_72534:
0008BCC2 4EBA 0000                  		jsr	sub_72CB4(pc)
0008BCC6                            
0008BCC6                            loc_72538:
0008BCC6 DAFC 0030                  		adda.w	#$30,a5
0008BCCA 51CF FFE6                  		dbf	d7,loc_72524
0008BCCE                            
0008BCCE 7E02                       		moveq	#2,d7
0008BCD0                            
0008BCD0                            loc_72542:
0008BCD0 4A15                       		tst.b	(a5)
0008BCD2 6A00                       		bpl.s	loc_72560
0008BCD4 522D 0009                  		addq.b	#1,9(a5)
0008BCD8 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0008BCDE 6500                       		bcs.s	loc_72558
0008BCE0 0895 0007                  		bclr	#7,(a5)
0008BCE4 6000                       		bra.s	loc_72560
0008BCE6                            ; ===========================================================================
0008BCE6                            
0008BCE6                            loc_72558:
0008BCE6 1C2D 0009                  		move.b	9(a5),d6
0008BCEA 4EBA 0000                  		jsr	sub_7296A(pc)
0008BCEE                            
0008BCEE                            loc_72560:
0008BCEE DAFC 0030                  		adda.w	#$30,a5
0008BCF2 51CF FFDC                  		dbf	d7,loc_72542
0008BCF6                            
0008BCF6 4E75                       		rts	
0008BCF8                            ; End of function sub_72504
0008BCF8                            
0008BCF8                            
0008BCF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BCF8                            
0008BCF8                            
0008BCF8                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0008BCF8 7602                       		moveq	#2,d3
0008BCFA 7028                       		moveq	#$28,d0
0008BCFC                            
0008BCFC                            loc_7256E:
0008BCFC 1203                       		move.b	d3,d1
0008BCFE 4EBA 0000                  		jsr	sub_7272E(pc)
0008BD02 5801                       		addq.b	#4,d1
0008BD04 4EBA 0000                  		jsr	sub_7272E(pc)
0008BD08 51CB FFF2                  		dbf	d3,loc_7256E
0008BD0C                            
0008BD0C 7040                       		moveq	#$40,d0
0008BD0E 727F                       		moveq	#$7F,d1
0008BD10 7802                       		moveq	#2,d4
0008BD12                            
0008BD12                            loc_72584:
0008BD12 7603                       		moveq	#3,d3
0008BD14                            
0008BD14                            loc_72586:
0008BD14 4EBA 0000                  		jsr	sub_7272E(pc)
0008BD18 4EBA 0000                  		jsr	sub_72764(pc)
0008BD1C 5840                       		addq.w	#4,d0
0008BD1E 51CB FFF4                  		dbf	d3,loc_72586
0008BD22                            
0008BD22 0400 000F                  		subi.b	#$F,d0
0008BD26 51CC FFEA                  		dbf	d4,loc_72584
0008BD2A                            
0008BD2A 4E75                       		rts	
0008BD2C                            ; End of function sub_7256A
0008BD2C                            
0008BD2C                            ; ===========================================================================
0008BD2C                            ; ---------------------------------------------------------------------------
0008BD2C                            ; Stop music
0008BD2C                            ; ---------------------------------------------------------------------------
0008BD2C                            
0008BD2C                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0008BD2C 702B                       		moveq	#$2B,d0
0008BD2E 123C 0080                  		move.b	#$80,d1
0008BD32 4EBA 0000                  		jsr	sub_7272E(pc)
0008BD36 7027                       		moveq	#$27,d0
0008BD38 7200                       		moveq	#0,d1
0008BD3A 4EBA 0000                  		jsr	sub_7272E(pc)
0008BD3E 204E                       		movea.l	a6,a0
0008BD40 303C 00E3                  		move.w	#$E3,d0
0008BD44                            
0008BD44                            loc_725B6:
0008BD44 4298                       		clr.l	(a0)+
0008BD46 51C8 FFFC                  		dbf	d0,loc_725B6
0008BD4A                            
0008BD4A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0008BD50 4EBA FFA6                  		jsr	sub_7256A(pc)
0008BD54 13FC 0080 00A0 1FFF        		move.b	#$80,($A01FFF).l ; stop DAC playback
0008BD5C 6000 0000                  		bra.w	sub_729B6
0008BD60                            
0008BD60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BD60                            
0008BD60                            
0008BD60                            sub_725CA:				; XREF: Sound_ChkValue
0008BD60 204E                       		movea.l	a6,a0
0008BD62 1216                       		move.b	0(a6),d1
0008BD64 142E 0027                  		move.b	$27(a6),d2
0008BD68 162E 002A                  		move.b	$2A(a6),d3
0008BD6C 182E 0026                  		move.b	$26(a6),d4
0008BD70 3A2E 000A                  		move.w	$A(a6),d5
0008BD74 303C 0087                  		move.w	#$87,d0
0008BD78                            
0008BD78                            loc_725E4:
0008BD78 4298                       		clr.l	(a0)+
0008BD7A 51C8 FFFC                  		dbf	d0,loc_725E4
0008BD7E                            
0008BD7E 1C81                       		move.b	d1,0(a6)
0008BD80 1D42 0027                  		move.b	d2,$27(a6)
0008BD84 1D43 002A                  		move.b	d3,$2A(a6)
0008BD88 1D44 0026                  		move.b	d4,$26(a6)
0008BD8C 3D45 000A                  		move.w	d5,$A(a6)
0008BD90 1D7C 0080 0009             		move.b	#$80,9(a6)
0008BD96 4EBA FF60                  		jsr	sub_7256A(pc)
0008BD9A 6000 0000                  		bra.w	sub_729B6
0008BD9E                            ; End of function sub_725CA
0008BD9E                            
0008BD9E                            
0008BD9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BD9E                            
0008BD9E                            
0008BD9E                            sub_7260C:				; XREF: sub_71B4C
0008BD9E 1D6E 0002 0001             		move.b	2(a6),1(a6)
0008BDA4 41EE 004E                  		lea	$4E(a6),a0
0008BDA8 7030                       		moveq	#$30,d0
0008BDAA 7209                       		moveq	#9,d1
0008BDAC                            
0008BDAC                            loc_7261A:
0008BDAC 5210                       		addq.b	#1,(a0)
0008BDAE D0C0                       		adda.w	d0,a0
0008BDB0 51C9 FFFA                  		dbf	d1,loc_7261A
0008BDB4                            
0008BDB4 4E75                       		rts	
0008BDB6                            ; End of function sub_7260C
0008BDB6                            
0008BDB6                            ; ===========================================================================
0008BDB6                            ; ---------------------------------------------------------------------------
0008BDB6                            ; Speed	up music
0008BDB6                            ; ---------------------------------------------------------------------------
0008BDB6                            
0008BDB6                            Sound_E2:				; XREF: Sound_ExIndex
0008BDB6 4A2E 0027                  		tst.b	$27(a6)
0008BDBA 6600                       		bne.s	loc_7263E
0008BDBC 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0008BDC2 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0008BDC8 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0008BDCE 4E75                       		rts	
0008BDD0                            ; ===========================================================================
0008BDD0                            
0008BDD0                            loc_7263E:
0008BDD0 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0008BDD6 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0008BDDC 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0008BDE2 4E75                       		rts	
0008BDE4                            ; ===========================================================================
0008BDE4                            ; ---------------------------------------------------------------------------
0008BDE4                            ; Change music back to normal speed
0008BDE4                            ; ---------------------------------------------------------------------------
0008BDE4                            
0008BDE4                            Sound_E3:				; XREF: Sound_ExIndex
0008BDE4 4A2E 0027                  		tst.b	$27(a6)
0008BDE8 6600                       		bne.s	loc_7266A
0008BDEA 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0008BDF0 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0008BDF6 422E 002A                  		clr.b	$2A(a6)
0008BDFA 4E75                       		rts	
0008BDFC                            ; ===========================================================================
0008BDFC                            
0008BDFC                            loc_7266A:
0008BDFC 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0008BE02 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0008BE08 422E 03CA                  		clr.b	$3CA(a6)
0008BE0C 4E75                       		rts	
0008BE0E                            
0008BE0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BE0E                            
0008BE0E                            
0008BE0E                            sub_7267C:				; XREF: sub_71B4C
0008BE0E 4A2E 0025                  		tst.b	$25(a6)
0008BE12 6700                       		beq.s	loc_72688
0008BE14 532E 0025                  		subq.b	#1,$25(a6)
0008BE18 4E75                       		rts	
0008BE1A                            ; ===========================================================================
0008BE1A                            
0008BE1A                            loc_72688:
0008BE1A 4A2E 0026                  		tst.b	$26(a6)
0008BE1E 6700                       		beq.s	loc_726D6
0008BE20 532E 0026                  		subq.b	#1,$26(a6)
0008BE24 1D7C 0002 0025             		move.b	#2,$25(a6)
0008BE2A 4BEE 0070                  		lea	$70(a6),a5
0008BE2E 7E05                       		moveq	#5,d7
0008BE30                            
0008BE30                            loc_7269E:
0008BE30 4A15                       		tst.b	(a5)
0008BE32 6A00                       		bpl.s	loc_726AA
0008BE34 532D 0009                  		subq.b	#1,9(a5)
0008BE38 4EBA 0000                  		jsr	sub_72CB4(pc)
0008BE3C                            
0008BE3C                            loc_726AA:
0008BE3C DAFC 0030                  		adda.w	#$30,a5
0008BE40 51CF FFEE                  		dbf	d7,loc_7269E
0008BE44 7E02                       		moveq	#2,d7
0008BE46                            
0008BE46                            loc_726B4:
0008BE46 4A15                       		tst.b	(a5)
0008BE48 6A00                       		bpl.s	loc_726CC
0008BE4A 532D 0009                  		subq.b	#1,9(a5)
0008BE4E 1C2D 0009                  		move.b	9(a5),d6
0008BE52 0C06 0010                  		cmpi.b	#$10,d6
0008BE56 6500                       		bcs.s	loc_726C8
0008BE58 7C0F                       		moveq	#$F,d6
0008BE5A                            
0008BE5A                            loc_726C8:
0008BE5A 4EBA 0000                  		jsr	sub_7296A(pc)
0008BE5E                            
0008BE5E                            loc_726CC:
0008BE5E DAFC 0030                  		adda.w	#$30,a5
0008BE62 51CF FFE2                  		dbf	d7,loc_726B4
0008BE66 4E75                       		rts	
0008BE68                            ; ===========================================================================
0008BE68                            
0008BE68                            loc_726D6:
0008BE68 08AE 0002 0040             		bclr	#2,$40(a6)
0008BE6E 422E 0024                  		clr.b	$24(a6)
0008BE72                            
0008BE72 4A2E 0040                  		tst.b	$40(a6)					; is the DAC channel running?
0008BE76 6A00                       		bpl.s	Resume_NoDAC				; if not, branch
0008BE78                            
0008BE78 70B6                       		moveq	#$FFFFFFB6,d0				; prepare FM channel 3/6 L/R/AMS/FMS address
0008BE7A 122E 004A                  		move.b	$4A(a6),d1				; load DAC channel's L/R/AMS/FMS value
0008BE7E 4EFA 0000                  		jmp	sub_72764(pc)				; write to FM 6
0008BE82                            
0008BE82                            Resume_NoDAC:
0008BE82 4E75                       		rts
0008BE84                            
0008BE84                            ; ===========================================================================
0008BE84                            
0008BE84                            loc_726E2:				; XREF: sub_71CCA
0008BE84 0815 0001                  		btst	#1,(a5)
0008BE88 6600                       		bne.s	locret_726FC
0008BE8A 0815 0002                  		btst	#2,(a5)
0008BE8E 6600                       		bne.s	locret_726FC
0008BE90 7028                       		moveq	#$28,d0
0008BE92 122D 0001                  		move.b	1(a5),d1
0008BE96 0001 00F0                  		ori.b	#-$10,d1
0008BE9A 6000 0000                  		bra.w	sub_7272E
0008BE9E                            ; ===========================================================================
0008BE9E                            
0008BE9E                            locret_726FC:
0008BE9E 4E75                       		rts	
0008BEA0                            
0008BEA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BEA0                            
0008BEA0                            
0008BEA0                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0008BEA0 0815 0004                  		btst	#4,(a5)
0008BEA4 6600                       		bne.s	locret_72714
0008BEA6 0815 0002                  		btst	#2,(a5)
0008BEAA 6600                       		bne.s	locret_72714
0008BEAC                            
0008BEAC                            loc_7270A:				; XREF: Snd_FadeOut2
0008BEAC 7028                       		moveq	#$28,d0
0008BEAE 122D 0001                  		move.b	1(a5),d1
0008BEB2 6000 0000                  		bra.w	sub_7272E
0008BEB6                            ; ===========================================================================
0008BEB6                            
0008BEB6                            locret_72714:
0008BEB6 4E75                       		rts	
0008BEB8                            ; End of function sub_726FE
0008BEB8                            
0008BEB8                            ; ===========================================================================
0008BEB8                            
0008BEB8                            loc_72716:				; XREF: sub_72A5A
0008BEB8 0815 0002                  		btst	#2,(a5)
0008BEBC 6600                       		bne.s	locret_72720
0008BEBE 6000 0000                  		bra.w	sub_72722
0008BEC2                            ; ===========================================================================
0008BEC2                            
0008BEC2                            locret_72720:
0008BEC2 4E75                       		rts	
0008BEC4                            
0008BEC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BEC4                            
0008BEC4                            
0008BEC4                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008BEC4 082D 0002 0001             		btst	#2,1(a5)
0008BECA 6600                       		bne.s	loc_7275A
0008BECC D02D 0001                  		add.b	1(a5),d0
0008BED0                            ; End of function sub_72722
0008BED0                            
0008BED0                            
0008BED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BED0                            
0008BED0                            
0008BED0                            sub_7272E:				; XREF: loc_71E6A
0008BED0 1439 00A0 4000             		move.b	($A04000).l,d2
0008BED6 0802 0007                  		btst	#7,d2
0008BEDA 66F4                       		bne.s	sub_7272E
0008BEDC 13C0 00A0 4000             		move.b	d0,($A04000).l
0008BEE2 4E71                       		nop	
0008BEE4 4E71                       		nop	
0008BEE6 4E71                       		nop	
0008BEE8                            
0008BEE8                            loc_72746:
0008BEE8 1439 00A0 4000             		move.b	($A04000).l,d2
0008BEEE 0802 0007                  		btst	#7,d2
0008BEF2 66F4                       		bne.s	loc_72746
0008BEF4                            
0008BEF4 13C1 00A0 4001             		move.b	d1,($A04001).l
0008BEFA 4E75                       		rts	
0008BEFC                            ; End of function sub_7272E
0008BEFC                            
0008BEFC                            ; ===========================================================================
0008BEFC                            
0008BEFC                            loc_7275A:				; XREF: sub_72722
0008BEFC 142D 0001                  		move.b	1(a5),d2
0008BF00 0882 0002                  		bclr	#2,d2
0008BF04 D002                       		add.b	d2,d0
0008BF06                            
0008BF06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BF06                            
0008BF06                            
0008BF06                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0008BF06 1439 00A0 4000             		move.b	($A04000).l,d2
0008BF0C 0802 0007                  		btst	#7,d2
0008BF10 66F4                       		bne.s	sub_72764
0008BF12 13C0 00A0 4002             		move.b	d0,($A04002).l
0008BF18 4E71                       		nop	
0008BF1A 4E71                       		nop	
0008BF1C 4E71                       		nop	
0008BF1E                            
0008BF1E                            loc_7277C:
0008BF1E 1439 00A0 4000             		move.b	($A04000).l,d2
0008BF24 0802 0007                  		btst	#7,d2
0008BF28 66F4                       		bne.s	loc_7277C
0008BF2A                            
0008BF2A 13C1 00A0 4003             		move.b	d1,($A04003).l
0008BF30 4E75                       		rts	
0008BF32                            ; End of function sub_72764
0008BF32                            
0008BF32                            ; ===========================================================================
0008BF32 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008BF44 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008BF56 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008BF66 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008BF76 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008BF86 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008BF96 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008BFA6 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008BFB6 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0008BFC6 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0008BFD6 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0008BFE6 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0008BFF2                            
0008BFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BFF2                            
0008BFF2                            
0008BFF2                            sub_72850:				; XREF: sub_71B4C
0008BFF2 532D 000E                  		subq.b	#1,$E(a5)
0008BFF6 6600                       		bne.s	loc_72866
0008BFF8 0895 0004                  		bclr	#4,(a5)
0008BFFC 4EBA 0000                  		jsr	sub_72878(pc)
0008C000 4EBA 0000                  		jsr	sub_728DC(pc)
0008C004 6000 0000                  		bra.w	loc_7292E
0008C008                            ; ===========================================================================
0008C008                            
0008C008                            loc_72866:
0008C008 4EBA F4D4                  		jsr	sub_71D9E(pc)
0008C00C 4EBA 0000                  		jsr	sub_72926(pc)
0008C010 4EBA F4F4                  		jsr	sub_71DC6(pc)
0008C014 4EBA 0000                  		jsr	sub_728E2(pc)
0008C018 4E75                       		rts	
0008C01A                            ; End of function sub_72850
0008C01A                            
0008C01A                            
0008C01A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C01A                            
0008C01A                            
0008C01A                            sub_72878:				; XREF: sub_72850
0008C01A 0895 0001                  		bclr	#1,(a5)
0008C01E 286D 0004                  		movea.l	4(a5),a4
0008C022                            
0008C022                            loc_72880:
0008C022 7A00                       		moveq	#0,d5
0008C024 1A1C                       		move.b	(a4)+,d5
0008C026 0C05 00E0                  		cmpi.b	#$E0,d5
0008C02A 6500                       		bcs.s	loc_72890
0008C02C 4EBA 0000                  		jsr	sub_72A5A(pc)
0008C030 60F0                       		bra.s	loc_72880
0008C032                            ; ===========================================================================
0008C032                            
0008C032                            loc_72890:
0008C032 4A05                       		tst.b	d5
0008C034 6A00                       		bpl.s	loc_728A4
0008C036 4EBA 0000                  		jsr	sub_728AC(pc)
0008C03A 1A1C                       		move.b	(a4)+,d5
0008C03C 4A05                       		tst.b	d5
0008C03E 6A00                       		bpl.s	loc_728A4
0008C040 534C                       		subq.w	#1,a4
0008C042 6000 F45C                  		bra.w	sub_71D60
0008C046                            ; ===========================================================================
0008C046                            
0008C046                            loc_728A4:
0008C046 4EBA F438                  		jsr	sub_71D40(pc)
0008C04A 6000 F454                  		bra.w	sub_71D60
0008C04E                            ; End of function sub_72878
0008C04E                            
0008C04E                            
0008C04E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C04E                            
0008C04E                            
0008C04E                            sub_728AC:				; XREF: sub_72878
0008C04E 0405 0081                  		subi.b	#$81,d5
0008C052 6500                       		bcs.s	loc_728CA
0008C054 DA2D 0008                  		add.b	8(a5),d5
0008C058 0245 007F                  		andi.w	#$7F,d5
0008C05C E34D                       		lsl.w	#1,d5
0008C05E 41FA 0000                  		lea	word_729CE(pc),a0
0008C062 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008C068 6000 F436                  		bra.w	sub_71D60
0008C06C                            ; ===========================================================================
0008C06C                            
0008C06C                            loc_728CA:
0008C06C 08D5 0001                  		bset	#1,(a5)
0008C070 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008C076 4EBA F428                  		jsr	sub_71D60(pc)
0008C07A 6000 0000                  		bra.w	sub_729A0
0008C07E                            ; End of function sub_728AC
0008C07E                            
0008C07E                            
0008C07E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C07E                            
0008C07E                            
0008C07E                            sub_728DC:				; XREF: sub_72850
0008C07E 3C2D 0010                  		move.w	$10(a5),d6
0008C082 6B00                       		bmi.s	loc_72920
0008C084                            ; End of function sub_728DC
0008C084                            
0008C084                            
0008C084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C084                            
0008C084                            
0008C084                            sub_728E2:				; XREF: sub_72850
0008C084 102D 001E                  		move.b	$1E(a5),d0
0008C088 4880                       		ext.w	d0
0008C08A DC40                       		add.w	d0,d6
0008C08C 0815 0002                  		btst	#2,(a5)
0008C090 6600                       		bne.s	locret_7291E
0008C092 0815 0001                  		btst	#1,(a5)
0008C096 6600                       		bne.s	locret_7291E
0008C098 102D 0001                  		move.b	1(a5),d0
0008C09C 0C00 00E0                  		cmpi.b	#$E0,d0
0008C0A0 6600                       		bne.s	loc_72904
0008C0A2 103C 00C0                  		move.b	#$C0,d0
0008C0A6                            
0008C0A6                            loc_72904:
0008C0A6 3206                       		move.w	d6,d1
0008C0A8 0201 000F                  		andi.b	#$F,d1
0008C0AC 8001                       		or.b	d1,d0
0008C0AE E84E                       		lsr.w	#4,d6
0008C0B0 0206 003F                  		andi.b	#$3F,d6
0008C0B4 13C0 00C0 0011             		move.b	d0,($C00011).l
0008C0BA 13C6 00C0 0011             		move.b	d6,($C00011).l
0008C0C0                            
0008C0C0                            locret_7291E:
0008C0C0 4E75                       		rts	
0008C0C2                            ; End of function sub_728E2
0008C0C2                            
0008C0C2                            ; ===========================================================================
0008C0C2                            
0008C0C2                            loc_72920:				; XREF: sub_728DC
0008C0C2 08D5 0001                  		bset	#1,(a5)
0008C0C6 4E75                       		rts	
0008C0C8                            
0008C0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C0C8                            
0008C0C8                            
0008C0C8                            sub_72926:				; XREF: sub_72850
0008C0C8 4A2D 000B                  		tst.b	$B(a5)
0008C0CC 6700 0000                  		beq.w	locret_7298A
0008C0D0                            
0008C0D0                            loc_7292E:				; XREF: sub_72850
0008C0D0 1C2D 0009                  		move.b	9(a5),d6
0008C0D4 7000                       		moveq	#0,d0
0008C0D6 102D 000B                  		move.b	$B(a5),d0
0008C0DA 6700                       		beq.s	sub_7296A
0008C0DC 2079 0008 B0EC             		movea.l	(Go_PSGIndex).l,a0
0008C0E2 5340                       		subq.w	#1,d0
0008C0E4 E548                       		lsl.w	#2,d0
0008C0E6 2070 0000                  		movea.l	(a0,d0.w),a0
0008C0EA 102D 000C                  		move.b	$C(a5),d0
0008C0EE 1030 0000                  		move.b	(a0,d0.w),d0
0008C0F2 522D 000C                  		addq.b	#1,$C(a5)
0008C0F6 0800 0007                  		btst	#7,d0
0008C0FA 6700                       		beq.s	loc_72960
0008C0FC 0C00 0080                  		cmpi.b	#$80,d0
0008C100 6700                       		beq.s	loc_7299A
0008C102                            
0008C102                            loc_72960:
0008C102 DC40                       		add.w	d0,d6
0008C104 0C06 0010                  		cmpi.b	#$10,d6
0008C108 6500                       		bcs.s	sub_7296A
0008C10A 7C0F                       		moveq	#$F,d6
0008C10C                            ; End of function sub_72926
0008C10C                            
0008C10C                            
0008C10C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C10C                            
0008C10C                            
0008C10C                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0008C10C 0815 0001                  		btst	#1,(a5)
0008C110 6600                       		bne.s	locret_7298A
0008C112 0815 0002                  		btst	#2,(a5)
0008C116 6600                       		bne.s	locret_7298A
0008C118 0815 0004                  		btst	#4,(a5)
0008C11C 6600                       		bne.s	loc_7298C
0008C11E                            
0008C11E                            loc_7297C:
0008C11E 8C2D 0001                  		or.b	1(a5),d6
0008C122 0606 0010                  		addi.b	#$10,d6
0008C126 13C6 00C0 0011             		move.b	d6,($C00011).l
0008C12C                            
0008C12C                            locret_7298A:
0008C12C 4E75                       		rts	
0008C12E                            ; ===========================================================================
0008C12E                            
0008C12E                            loc_7298C:
0008C12E 4A2D 0013                  		tst.b	$13(a5)
0008C132 67EA                       		beq.s	loc_7297C
0008C134 4A2D 0012                  		tst.b	$12(a5)
0008C138 66E4                       		bne.s	loc_7297C
0008C13A 4E75                       		rts	
0008C13C                            ; End of function sub_7296A
0008C13C                            
0008C13C                            ; ===========================================================================
0008C13C                            
0008C13C                            loc_7299A:				; XREF: sub_72926
0008C13C 532D 000C                  		subq.b	#1,$C(a5)
0008C140 4E75                       		rts	
0008C142                            
0008C142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C142                            
0008C142                            
0008C142                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0008C142 0815 0002                  		btst	#2,(a5)
0008C146 6600                       		bne.s	locret_729B4
0008C148                            
0008C148                            loc_729A6:				; XREF: Snd_FadeOut2
0008C148 102D 0001                  		move.b	1(a5),d0
0008C14C 0000 001F                  		ori.b	#$1F,d0
0008C150 13C0 00C0 0011             		move.b	d0,($C00011).l
0008C156                            
0008C156                            locret_729B4:
0008C156 4E75                       		rts	
0008C158                            ; End of function sub_729A0
0008C158                            
0008C158                            
0008C158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C158                            
0008C158                            
0008C158                            sub_729B6:				; XREF: loc_71E7C
0008C158 41F9 00C0 0011             		lea	($C00011).l,a0
0008C15E 10BC 009F                  		move.b	#$9F,(a0)
0008C162 10BC 00BF                  		move.b	#$BF,(a0)
0008C166 10BC 00DF                  		move.b	#$DF,(a0)
0008C16A 10BC 00FF                  		move.b	#$FF,(a0)
0008C16E 4E75                       		rts	
0008C170                            ; End of function sub_729B6
0008C170                            
0008C170                            ; ===========================================================================
0008C170 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0008C182 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008C194 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008C1A8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0008C1BC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0008C1D0 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0008C1E4 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0008C1F8 0011 0000                  		dc.w $11, 0
0008C1FC                            
0008C1FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C1FC                            
0008C1FC                            
0008C1FC                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008C1FC 0445 00E0                  		subi.w	#$E0,d5
0008C200 E54D                       		lsl.w	#2,d5
0008C202 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008C206                            ; End of function sub_72A5A
0008C206                            
0008C206                            ; ===========================================================================
0008C206                            
0008C206                            loc_72A64:
0008C206 6000 0000                  		bra.w	loc_72ACC
0008C20A                            ; ===========================================================================
0008C20A 6000 0000                  		bra.w	loc_72AEC
0008C20E                            ; ===========================================================================
0008C20E 6000 0000                  		bra.w	loc_72AF2
0008C212                            ; ===========================================================================
0008C212 6000 0000                  		bra.w	loc_72AF8
0008C216                            ; ===========================================================================
0008C216 6000 0000                  		bra.w	loc_72B14
0008C21A                            ; ===========================================================================
0008C21A 6000 0000                  		bra.w	loc_72B9E
0008C21E                            ; ===========================================================================
0008C21E 6000 0000                  		bra.w	loc_72BA4
0008C222                            ; ===========================================================================
0008C222 6000 0000                  		bra.w	loc_72BAE
0008C226                            ; ===========================================================================
0008C226 6000 0000                  		bra.w	loc_72BB4
0008C22A                            ; ===========================================================================
0008C22A 6000 0000                  		bra.w	loc_72BBE
0008C22E                            ; ===========================================================================
0008C22E 6000 0000                  		bra.w	loc_72BC6
0008C232                            ; ===========================================================================
0008C232 6000 0000                  		bra.w	loc_72BD0
0008C236                            ; ===========================================================================
0008C236 6000 0000                  		bra.w	loc_72BE6
0008C23A                            ; ===========================================================================
0008C23A 6000 0000                  		bra.w	loc_72BEE
0008C23E                            ; ===========================================================================
0008C23E 6000 0000                  		bra.w	loc_72BF4
0008C242                            ; ===========================================================================
0008C242 6000 0000                  		bra.w	loc_72C26
0008C246                            ; ===========================================================================
0008C246 6000 0000                  		bra.w	loc_72D30
0008C24A                            ; ===========================================================================
0008C24A 6000 0000                  		bra.w	loc_72D52
0008C24E                            ; ===========================================================================
0008C24E 6000 0000                  		bra.w	loc_72D58
0008C252                            ; ===========================================================================
0008C252 6000 0000                  		bra.w	loc_72E06
0008C256                            ; ===========================================================================
0008C256 6000 0000                  		bra.w	loc_72E20
0008C25A                            ; ===========================================================================
0008C25A 6000 0000                  		bra.w	loc_72E26
0008C25E                            ; ===========================================================================
0008C25E 6000 0000                  		bra.w	loc_72E2C
0008C262                            ; ===========================================================================
0008C262 6000 0000                  		bra.w	loc_72E38
0008C266                            ; ===========================================================================
0008C266 6000 0000                  		bra.w	loc_72E52
0008C26A                            ; ===========================================================================
0008C26A 6000 0000                  		bra.w	loc_72E64
0008C26E                            ; ===========================================================================
0008C26E                            
0008C26E                            loc_72ACC:				; XREF: loc_72A64
0008C26E 121C                       		move.b	(a4)+,d1
0008C270 4A2D 0001                  		tst.b	1(a5)
0008C274 6B00                       		bmi.s	locret_72AEA
0008C276 102D 000A                  		move.b	$A(a5),d0
0008C27A 0200 0037                  		andi.b	#$37,d0
0008C27E 8200                       		or.b	d0,d1
0008C280 1B41 000A                  		move.b	d1,$A(a5)
0008C284 103C 00B4                  		move.b	#$B4,d0
0008C288 6000 FC2E                  		bra.w	loc_72716
0008C28C                            ; ===========================================================================
0008C28C                            
0008C28C                            locret_72AEA:
0008C28C 4E75                       		rts	
0008C28E                            ; ===========================================================================
0008C28E                            
0008C28E                            loc_72AEC:				; XREF: loc_72A64
0008C28E 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0008C292 4E75                       		rts	
0008C294                            ; ===========================================================================
0008C294                            
0008C294                            loc_72AF2:				; XREF: loc_72A64
0008C294 1D5C 0007                  		move.b	(a4)+,7(a6)
0008C298 4E75                       		rts	
0008C29A                            ; ===========================================================================
0008C29A                            
0008C29A                            loc_72AF8:				; XREF: loc_72A64
0008C29A 7000                       		moveq	#0,d0
0008C29C 102D 000D                  		move.b	$D(a5),d0
0008C2A0 2875 0000                  		movea.l	(a5,d0.w),a4
0008C2A4 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0008C2AC 544C                       		addq.w	#2,a4
0008C2AE 5800                       		addq.b	#4,d0
0008C2B0 1B40 000D                  		move.b	d0,$D(a5)
0008C2B4 4E75                       		rts	
0008C2B6                            ; ===========================================================================
0008C2B6                            
0008C2B6                            loc_72B14:				; XREF: loc_72A64
0008C2B6 204E                       		movea.l	a6,a0
0008C2B8 43EE 03A0                  		lea	$3A0(a6),a1
0008C2BC 303C 0087                  		move.w	#$87,d0
0008C2C0                            
0008C2C0                            loc_72B1E:
0008C2C0 20D9                       		move.l	(a1)+,(a0)+
0008C2C2 51C8 FFFC                  		dbf	d0,loc_72B1E
0008C2C6                            
0008C2C6 08EE 0002 0040             		bset	#2,$40(a6)
0008C2CC 264D                       		movea.l	a5,a3
0008C2CE 1C3C 0028                  		move.b	#$28,d6
0008C2D2 9C2E 0026                  		sub.b	$26(a6),d6
0008C2D6 7E05                       		moveq	#5,d7
0008C2D8 4BEE 0070                  		lea	$70(a6),a5
0008C2DC                            
0008C2DC                            loc_72B3A:
0008C2DC 0815 0007                  		btst	#7,(a5)
0008C2E0 6700                       		beq.s	loc_72B5C
0008C2E2 08D5 0001                  		bset	#1,(a5)
0008C2E6 DD2D 0009                  		add.b	d6,9(a5)
0008C2EA 0815 0002                  		btst	#2,(a5)
0008C2EE 6600                       		bne.s	loc_72B5C
0008C2F0 7000                       		moveq	#0,d0
0008C2F2 102D 000B                  		move.b	$B(a5),d0
0008C2F6 226E 0018                  		movea.l	$18(a6),a1
0008C2FA 4EBA 0000                  		jsr	sub_72C4E(pc)
0008C2FE                            
0008C2FE                            loc_72B5C:
0008C2FE DAFC 0030                  		adda.w	#$30,a5
0008C302 51CF FFD8                  		dbf	d7,loc_72B3A
0008C306                            
0008C306 7E02                       		moveq	#2,d7
0008C308                            
0008C308                            loc_72B66:
0008C308 0815 0007                  		btst	#7,(a5)
0008C30C 6700                       		beq.s	loc_72B78
0008C30E 08D5 0001                  		bset	#1,(a5)
0008C312 4EBA FE2E                  		jsr	sub_729A0(pc)
0008C316 DD2D 0009                  		add.b	d6,9(a5)
0008C31A                            
0008C31A                            loc_72B78:
0008C31A DAFC 0030                  		adda.w	#$30,a5
0008C31E 51CF FFE8                  		dbf	d7,loc_72B66
0008C322 2A4B                       		movea.l	a3,a5
0008C324 4A2E 0040                  		tst.b	$40(a6)			; is the DAC channel running?
0008C328 6B00                       		bmi.s	Restore_NoFM6		; if it is, branch
0008C32A                            
0008C32A 702B                       		moveq	#$2B,d0			; DAC enable/disable register
0008C32C 7200                       		moveq	#0,d1			; Disable DAC
0008C32E 4EBA FBA0                  		jsr	sub_7272E(pc)
0008C332                            
0008C332                            Restore_NoFM6
0008C332 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008C338 1D7C 0028 0026             		move.b	#$28,$26(a6)
0008C33E 422E 0027                  		clr.b	$27(a6)
0008C342 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0008C34A 504F                       		addq.w	#8,sp
0008C34C 4E75                       		rts	
0008C34E                            ; ===========================================================================
0008C34E                            
0008C34E                            loc_72B9E:				; XREF: loc_72A64
0008C34E 1B5C 0002                  		move.b	(a4)+,2(a5)
0008C352 4E75                       		rts	
0008C354                            ; ===========================================================================
0008C354                            
0008C354                            loc_72BA4:				; XREF: loc_72A64
0008C354 101C                       		move.b	(a4)+,d0
0008C356 D12D 0009                  		add.b	d0,9(a5)
0008C35A 6000 0000                  		bra.w	sub_72CB4
0008C35E                            ; ===========================================================================
0008C35E                            
0008C35E                            loc_72BAE:				; XREF: loc_72A64
0008C35E 08D5 0004                  		bset	#4,(a5)
0008C362 4E75                       		rts	
0008C364                            ; ===========================================================================
0008C364                            
0008C364                            loc_72BB4:				; XREF: loc_72A64
0008C364 1B54 0012                  		move.b	(a4),$12(a5)
0008C368 1B5C 0013                  		move.b	(a4)+,$13(a5)
0008C36C 4E75                       		rts	
0008C36E                            ; ===========================================================================
0008C36E                            
0008C36E                            loc_72BBE:				; XREF: loc_72A64
0008C36E 101C                       		move.b	(a4)+,d0
0008C370 D12D 0008                  		add.b	d0,8(a5)
0008C374 4E75                       		rts	
0008C376                            ; ===========================================================================
0008C376                            
0008C376                            loc_72BC6:				; XREF: loc_72A64
0008C376 1D54 0002                  		move.b	(a4),2(a6)
0008C37A 1D5C 0001                  		move.b	(a4)+,1(a6)
0008C37E 4E75                       		rts	
0008C380                            ; ===========================================================================
0008C380                            
0008C380                            loc_72BD0:				; XREF: loc_72A64
0008C380 41EE 0040                  		lea	$40(a6),a0
0008C384 101C                       		move.b	(a4)+,d0
0008C386 7230                       		moveq	#$30,d1
0008C388 7409                       		moveq	#9,d2
0008C38A                            
0008C38A                            loc_72BDA:
0008C38A 1140 0002                  		move.b	d0,2(a0)
0008C38E D0C1                       		adda.w	d1,a0
0008C390 51CA FFF8                  		dbf	d2,loc_72BDA
0008C394                            
0008C394 4E75                       		rts	
0008C396                            ; ===========================================================================
0008C396                            
0008C396                            loc_72BE6:				; XREF: loc_72A64
0008C396 101C                       		move.b	(a4)+,d0
0008C398 D12D 0009                  		add.b	d0,9(a5)
0008C39C 4E75                       		rts	
0008C39E                            ; ===========================================================================
0008C39E                            
0008C39E                            loc_72BEE:				; XREF: loc_72A64
0008C39E 422E 002C                  		clr.b	$2C(a6)
0008C3A2 4E75                       		rts	
0008C3A4                            ; ===========================================================================
0008C3A4                            
0008C3A4                            loc_72BF4:				; XREF: loc_72A64
0008C3A4 0895 0007                  		bclr	#7,(a5)
0008C3A8 0895 0004                  		bclr	#4,(a5)
0008C3AC 4EBA FAF2                  		jsr	sub_726FE(pc)
0008C3B0 4A2E 0250                  		tst.b	$250(a6)
0008C3B4 6B00                       		bmi.s	loc_72C22
0008C3B6 264D                       		movea.l	a5,a3
0008C3B8 4BEE 0100                  		lea	$100(a6),a5
0008C3BC 226E 0018                  		movea.l	$18(a6),a1
0008C3C0 0895 0002                  		bclr	#2,(a5)
0008C3C4 08D5 0001                  		bset	#1,(a5)
0008C3C8 102D 000B                  		move.b	$B(a5),d0
0008C3CC 4EBA 0000                  		jsr	sub_72C4E(pc)
0008C3D0 2A4B                       		movea.l	a3,a5
0008C3D2                            
0008C3D2                            loc_72C22:
0008C3D2 504F                       		addq.w	#8,sp
0008C3D4 4E75                       		rts	
0008C3D6                            ; ===========================================================================
0008C3D6                            
0008C3D6                            loc_72C26:				; XREF: loc_72A64
0008C3D6 7000                       		moveq	#0,d0
0008C3D8 101C                       		move.b	(a4)+,d0
0008C3DA 1B40 000B                  		move.b	d0,$B(a5)
0008C3DE 0815 0002                  		btst	#2,(a5)
0008C3E2 6600 0000                  		bne.w	locret_72CAA
0008C3E6 226E 0018                  		movea.l	$18(a6),a1
0008C3EA 4A2E 000E                  		tst.b	$E(a6)
0008C3EE 6700                       		beq.s	sub_72C4E
0008C3F0 226D 0020                  		movea.l	$20(a5),a1
0008C3F4 4A2E 000E                  		tst.b	$E(a6)
0008C3F8 6B00                       		bmi.s	sub_72C4E
0008C3FA 226E 0020                  		movea.l	$20(a6),a1
0008C3FE                            
0008C3FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C3FE                            
0008C3FE                            
0008C3FE                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0008C3FE 5340                       		subq.w	#1,d0
0008C400 6B00                       		bmi.s	loc_72C5C
0008C402 323C 0019                  		move.w	#$19,d1
0008C406                            
0008C406                            loc_72C56:
0008C406 D2C1                       		adda.w	d1,a1
0008C408 51C8 FFFC                  		dbf	d0,loc_72C56
0008C40C                            
0008C40C                            loc_72C5C:
0008C40C 1219                       		move.b	(a1)+,d1
0008C40E 1B41 001F                  		move.b	d1,$1F(a5)
0008C412 1801                       		move.b	d1,d4
0008C414 103C 00B0                  		move.b	#$B0,d0
0008C418 4EBA FAAA                  		jsr	sub_72722(pc)
0008C41C 45FA 0000                  		lea	byte_72D18(pc),a2
0008C420 7613                       		moveq	#$13,d3
0008C422                            
0008C422                            loc_72C72:
0008C422 101A                       		move.b	(a2)+,d0
0008C424 1219                       		move.b	(a1)+,d1
0008C426 4EBA FA9C                  		jsr	sub_72722(pc)
0008C42A 51CB FFF6                  		dbf	d3,loc_72C72
0008C42E 7A03                       		moveq	#3,d5
0008C430 0244 0007                  		andi.w	#7,d4
0008C434 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0008C438 162D 0009                  		move.b	9(a5),d3
0008C43C                            
0008C43C                            loc_72C8C:
0008C43C 101A                       		move.b	(a2)+,d0
0008C43E 1219                       		move.b	(a1)+,d1
0008C440 E20C                       		lsr.b	#1,d4
0008C442 6400                       		bcc.s	loc_72C96
0008C444 D203                       		add.b	d3,d1
0008C446                            
0008C446                            loc_72C96:
0008C446 4EBA FA7C                  		jsr	sub_72722(pc)
0008C44A 51CD FFF0                  		dbf	d5,loc_72C8C
0008C44E 103C 00B4                  		move.b	#$B4,d0
0008C452 122D 000A                  		move.b	$A(a5),d1
0008C456 4EBA FA6C                  		jsr	sub_72722(pc)
0008C45A                            
0008C45A                            locret_72CAA:
0008C45A 4E75                       		rts	
0008C45C                            ; End of function sub_72C4E
0008C45C                            
0008C45C                            ; ===========================================================================
0008C45C 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008C464                            
0008C464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008C464                            
0008C464                            
0008C464                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008C464 0815 0002                  		btst	#2,(a5)
0008C468 6600                       		bne.s	locret_72D16
0008C46A 7000                       		moveq	#0,d0
0008C46C 102D 000B                  		move.b	$B(a5),d0
0008C470 226E 0018                  		movea.l	$18(a6),a1
0008C474 4A2E 000E                  		tst.b	$E(a6)
0008C478 6700                       		beq.s	loc_72CD8
0008C47A 226E 0020                  		movea.l	$20(a6),a1
0008C47E 4A2E 000E                  		tst.b	$E(a6)
0008C482 6B00                       		bmi.s	loc_72CD8
0008C484 226E 0020                  		movea.l	$20(a6),a1
0008C488                            
0008C488                            loc_72CD8:
0008C488 5340                       		subq.w	#1,d0
0008C48A 6B00                       		bmi.s	loc_72CE6
0008C48C 323C 0019                  		move.w	#$19,d1
0008C490                            
0008C490                            loc_72CE0:
0008C490 D2C1                       		adda.w	d1,a1
0008C492 51C8 FFFC                  		dbf	d0,loc_72CE0
0008C496                            
0008C496                            loc_72CE6:
0008C496 D2FC 0015                  		adda.w	#$15,a1
0008C49A 45FA 0000                  		lea	byte_72D2C(pc),a2
0008C49E 102D 001F                  		move.b	$1F(a5),d0
0008C4A2 0240 0007                  		andi.w	#7,d0
0008C4A6 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0008C4AA 162D 0009                  		move.b	9(a5),d3
0008C4AE 6B00                       		bmi.s	locret_72D16
0008C4B0 7A03                       		moveq	#3,d5
0008C4B2                            
0008C4B2                            loc_72D02:
0008C4B2 101A                       		move.b	(a2)+,d0
0008C4B4 1219                       		move.b	(a1)+,d1
0008C4B6 E20C                       		lsr.b	#1,d4
0008C4B8 6400                       		bcc.s	loc_72D12
0008C4BA D203                       		add.b	d3,d1
0008C4BC 6500                       		bcs.s	loc_72D12
0008C4BE 4EBA FA04                  		jsr	sub_72722(pc)
0008C4C2                            
0008C4C2                            loc_72D12:
0008C4C2 51CD FFEE                  		dbf	d5,loc_72D02
0008C4C6                            
0008C4C6                            locret_72D16:
0008C4C6 4E75                       		rts	
0008C4C8                            ; End of function sub_72CB4
0008C4C8                            
0008C4C8                            ; ===========================================================================
0008C4C8 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0008C4D2 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0008C4DC 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0008C4E0                            ; ===========================================================================
0008C4E0                            
0008C4E0                            loc_72D30:				; XREF: loc_72A64
0008C4E0 08D5 0003                  		bset	#3,(a5)
0008C4E4 2B4C 0014                  		move.l	a4,$14(a5)
0008C4E8 1B5C 0018                  		move.b	(a4)+,$18(a5)
0008C4EC 1B5C 0019                  		move.b	(a4)+,$19(a5)
0008C4F0 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0008C4F4 101C                       		move.b	(a4)+,d0
0008C4F6 E208                       		lsr.b	#1,d0
0008C4F8 1B40 001B                  		move.b	d0,$1B(a5)
0008C4FC 426D 001C                  		clr.w	$1C(a5)
0008C500 4E75                       		rts	
0008C502                            ; ===========================================================================
0008C502                            
0008C502                            loc_72D52:				; XREF: loc_72A64
0008C502 08D5 0003                  		bset	#3,(a5)
0008C506 4E75                       		rts	
0008C508                            ; ===========================================================================
0008C508                            
0008C508                            loc_72D58:				; XREF: loc_72A64
0008C508 0895 0007                  		bclr	#7,(a5)
0008C50C 0895 0004                  		bclr	#4,(a5)
0008C510 4A2D 0001                  		tst.b	1(a5)
0008C514 6B00                       		bmi.s	loc_72D74
0008C516 4A2E 0008                  		tst.b	8(a6)
0008C51A 6B00 0000                  		bmi.w	loc_72E02
0008C51E 4EBA F980                  		jsr	sub_726FE(pc)
0008C522 6000                       		bra.s	loc_72D78
0008C524                            ; ===========================================================================
0008C524                            
0008C524                            loc_72D74:
0008C524 4EBA FC1C                  		jsr	sub_729A0(pc)
0008C528                            
0008C528                            loc_72D78:
0008C528 4A2E 000E                  		tst.b	$E(a6)
0008C52C 6A00 0000                  		bpl.w	loc_72E02
0008C530 4216                       		clr.b	0(a6)
0008C532 7000                       		moveq	#0,d0
0008C534 102D 0001                  		move.b	1(a5),d0
0008C538 6B00                       		bmi.s	loc_72DCC
0008C53A 41FA F520                  		lea	dword_722CC(pc),a0
0008C53E 264D                       		movea.l	a5,a3
0008C540 0C00 0004                  		cmpi.b	#4,d0
0008C544 6600                       		bne.s	loc_72DA8
0008C546 4A2E 0340                  		tst.b	$340(a6)
0008C54A 6A00                       		bpl.s	loc_72DA8
0008C54C 4BEE 0340                  		lea	$340(a6),a5
0008C550 226E 0020                  		movea.l	$20(a6),a1
0008C554 6000                       		bra.s	loc_72DB8
0008C556                            ; ===========================================================================
0008C556                            
0008C556                            loc_72DA8:
0008C556 5500                       		subq.b	#2,d0
0008C558 E508                       		lsl.b	#2,d0
0008C55A 2A70 0000                  		movea.l	(a0,d0.w),a5
0008C55E 4A15                       		tst.b	(a5)
0008C560 6A00                       		bpl.s	loc_72DC8
0008C562 226E 0018                  		movea.l	$18(a6),a1
0008C566                            
0008C566                            loc_72DB8:
0008C566 0895 0002                  		bclr	#2,(a5)
0008C56A 08D5 0001                  		bset	#1,(a5)
0008C56E 102D 000B                  		move.b	$B(a5),d0
0008C572 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008C576                            
0008C576                            loc_72DC8:
0008C576 2A4B                       		movea.l	a3,a5
0008C578 6000                       		bra.s	loc_72E02
0008C57A                            ; ===========================================================================
0008C57A                            
0008C57A                            loc_72DCC:
0008C57A 41EE 0370                  		lea	$370(a6),a0
0008C57E 4A10                       		tst.b	(a0)
0008C580 6A00                       		bpl.s	loc_72DE0
0008C582 0C00 00E0                  		cmpi.b	#$E0,d0
0008C586 6700                       		beq.s	loc_72DEA
0008C588 0C00 00C0                  		cmpi.b	#$C0,d0
0008C58C 6700                       		beq.s	loc_72DEA
0008C58E                            
0008C58E                            loc_72DE0:
0008C58E 41FA F4CC                  		lea	dword_722CC(pc),a0
0008C592 E608                       		lsr.b	#3,d0
0008C594 2070 0000                  		movea.l	(a0,d0.w),a0
0008C598                            
0008C598                            loc_72DEA:
0008C598 0890 0002                  		bclr	#2,(a0)
0008C59C 08D0 0001                  		bset	#1,(a0)
0008C5A0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008C5A6 6600                       		bne.s	loc_72E02
0008C5A8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008C5B0                            
0008C5B0                            loc_72E02:
0008C5B0 504F                       		addq.w	#8,sp
0008C5B2 4E75                       		rts	
0008C5B4                            ; ===========================================================================
0008C5B4                            
0008C5B4                            loc_72E06:				; XREF: loc_72A64
0008C5B4 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0008C5BA 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0008C5BE 0815 0002                  		btst	#2,(a5)
0008C5C2 6600                       		bne.s	locret_72E1E
0008C5C4 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0008C5CC                            
0008C5CC                            locret_72E1E:
0008C5CC 4E75                       		rts	
0008C5CE                            ; ===========================================================================
0008C5CE                            
0008C5CE                            loc_72E20:				; XREF: loc_72A64
0008C5CE 0895 0003                  		bclr	#3,(a5)
0008C5D2 4E75                       		rts	
0008C5D4                            ; ===========================================================================
0008C5D4                            
0008C5D4                            loc_72E26:				; XREF: loc_72A64
0008C5D4 1B5C 000B                  		move.b	(a4)+,$B(a5)
0008C5D8 4E75                       		rts	
0008C5DA                            ; ===========================================================================
0008C5DA                            
0008C5DA                            loc_72E2C:				; XREF: loc_72A64
0008C5DA 101C                       		move.b	(a4)+,d0
0008C5DC E148                       		lsl.w	#8,d0
0008C5DE 101C                       		move.b	(a4)+,d0
0008C5E0 D8C0                       		adda.w	d0,a4
0008C5E2 534C                       		subq.w	#1,a4
0008C5E4 4E75                       		rts	
0008C5E6                            ; ===========================================================================
0008C5E6                            
0008C5E6                            loc_72E38:				; XREF: loc_72A64
0008C5E6 7000                       		moveq	#0,d0
0008C5E8 101C                       		move.b	(a4)+,d0
0008C5EA 121C                       		move.b	(a4)+,d1
0008C5EC 4A35 0024                  		tst.b	$24(a5,d0.w)
0008C5F0 6600                       		bne.s	loc_72E48
0008C5F2 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0008C5F6                            
0008C5F6                            loc_72E48:
0008C5F6 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0008C5FA 66DE                       		bne.s	loc_72E2C
0008C5FC 544C                       		addq.w	#2,a4
0008C5FE 4E75                       		rts	
0008C600                            ; ===========================================================================
0008C600                            
0008C600                            loc_72E52:				; XREF: loc_72A64
0008C600 7000                       		moveq	#0,d0
0008C602 102D 000D                  		move.b	$D(a5),d0
0008C606 5900                       		subq.b	#4,d0
0008C608 2B8C 0000                  		move.l	a4,(a5,d0.w)
0008C60C 1B40 000D                  		move.b	d0,$D(a5)
0008C610 60C8                       		bra.s	loc_72E2C
0008C612                            ; ===========================================================================
0008C612                            
0008C612                            loc_72E64:				; XREF: loc_72A64
0008C612 103C 0088                  		move.b	#$88,d0
0008C616 123C 000F                  		move.b	#$F,d1
0008C61A 4EBA F8B4                  		jsr	sub_7272E(pc)
0008C61E 103C 008C                  		move.b	#$8C,d0
0008C622 123C 000F                  		move.b	#$F,d1
0008C626 6000 F8A8                  		bra.w	sub_7272E
0008C62A                            ; ===========================================================================
0008C62A                            Kos_Z80:	include    'MegaPCM.asm'
0008C62A                            
0008C62A                            ; ===============================================================
0008C62A                            ; Mega PCM Driver Include File
0008C62A                            ; (c) 2012, Vladikcomper
0008C62A                            ; ===============================================================
0008C62A                            
0008C62A                            ; ---------------------------------------------------------------
0008C62A                            ; Variables used in DAC table
0008C62A                            ; ---------------------------------------------------------------
0008C62A                            
0008C62A                            ; flags
0008C62A =000000C0                  panLR	= $C0
0008C62A =00000080                  panL	= $80
0008C62A =00000040                  panR	= $40
0008C62A =00000000                  pcm	= 0
0008C62A =00000004                  dpcm	= 4
0008C62A =00000002                  loop	= 2
0008C62A =00000001                  pri	= 1
0008C62A                            
0008C62A                            ; ---------------------------------------------------------------
0008C62A                            ; Macros
0008C62A                            ; ---------------------------------------------------------------
0008C62A                            
0008C62A                            z80word macro Value
0008C62A                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
0008C62A                            	endm
0008C62A                            
0008C62A                            DAC_Entry macro Pitch,Offset,Flags
0008C62A                            	dc.b	\Flags			; 00h	- Flags
0008C62A                            	dc.b	\Pitch			; 01h	- Pitch
0008C62A                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
0008C62A                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
0008C62A                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
0008C62A                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
0008C62A                            	endm
0008C62A                            	
0008C62A                            IncludeDAC macro Name,Extension
0008C62A                            \Name:
0008C62A                            	if strcmp('\extension','wav')
0008C62A                            		incbin	'dac/\Name\.\Extension\',$3A
0008C62A                            	else
0008C62A                            		incbin	'dac/\Name\.\Extension\'
0008C62A                            	endc
0008C62A                            \Name\_End:
0008C62A                            	endm
0008C62A                            
0008C62A                            ; ---------------------------------------------------------------
0008C62A                            ; Driver's code
0008C62A                            ; ---------------------------------------------------------------
0008C62A                            
0008C62A                            MegaPCM:
0008C62A                            	incbin	'MegaPCM.z80'
0008C83A                            
0008C83A                            ; ---------------------------------------------------------------
0008C83A                            ; DAC Samples Table
0008C83A                            ; ---------------------------------------------------------------
0008C83A                            
0008C83A 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
0008C842 0408 0000 0000 0000        	DAC_Entry	$08, Snare, dpcm		; $82	- Snare
0008C84A 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
0008C852 0000 0000 0000 0000        	dc.l	0,0					; $84	- <Free>
0008C85A 0000 0000 0000 0000        	dc.l	0,0					; $85	- <Free>
0008C862 0000 0000 0000 0000        	dc.l	0,0					; $86	- <Free>
0008C86A 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
0008C872 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
0008C87A 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
0008C882 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
0008C88A 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
0008C892                            
0008C892                            MegaPCM_End:
0008C892                            
0008C892                            ; ---------------------------------------------------------------
0008C892                            ; DAC Samples Files
0008C892                            ; ---------------------------------------------------------------
0008C892                            
0008DE94                            	even
0008DE94                            
0008DE94                            
0008DE94                            
0008DE94                            Music81:	incbin	"sound\Mind In The Gutter I.bin"
0008F242                            		even
0008F242                            Music82:	incbin	"sound\I Died On Jeopardy.bin"
0008FDE0                            		even
0008FDE0                            Music83:	incbin	"sound\Tutorial With Attitude.bin"
00090904 00                         		even
00090904                            Music84:	incbin	sound\music84.bin
00090D72                            		even
00090D72                            Music85:	incbin	sound\music85.bin
000911BE                            		even
000911BE                            Music86:	incbin	sound\music86.bin
0009170E                            		even
0009170E                            Music87:	incbin	sound\Jeopardyinv.bin
00091BE8                            		even
00091BE8                            Music88:	incbin	sound\music88.bin
00091CD6                            		even
00091CD6                            Music89:	incbin	sound\music89.bin
00092002                            		even
00092002                            Music8A:	incbin	sound\Jeopardy.bin
0009250A 00                         		even
0009250A                            Music8B:	incbin	sound\music8B.bin
000927A4                            		even
000927A4                            Music8C:	incbin	sound\music8C.bin
00093356 00                         		even
00093356                            Music8D:	incbin	sound\music8D.bin
00093572                            		even
00093572                            Music8E:	incbin	sound\music8E.bin
000936C8                            		even
000936C8                            Music8F:	incbin	sound\music8F.bin
00093BD2 00                         		even
00093BD2                            Music90:	incbin	sound\music90.bin
00093D30                            		even
00093D30                            Music91:	incbin	sound\music91.bin
00094FFE                            		even
00094FFE                            Music92:	incbin	sound\music92.bin
00095128                            		even
00095128                            Music93:	incbin	sound\music93.bin
000951F6                            		even
000951F6                            Music94:	incbin	"#Owarisoft\owarisoft logo Sound.bin"
00095334                            		even
00095334                            Music95:	incbin	sound\SpeedShoes.bin
0009551A                            		even
0009551A                            Music96:	incbin	sound\SpeedShoesInv.bin
00095700                            		even
00095700                            Music97:	incbin	"sound\Mind In The Gutter II.bin"
0009662A                            		even
0009662A                            		
0009662A                            ; ---------------------------------------------------------------------------
0009662A                            ; Sound	effect pointers
0009662A                            ; ---------------------------------------------------------------------------
0009662A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00096636 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00096642 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009664E 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009665A 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00096666 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00096672 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009667E 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009668A 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00096696 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000966A2 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000966AE 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000966BA 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000966C6 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000966D2 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000966DE 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000966EA 0000 0000                  SoundD0Index:	dc.l SoundD0
000966EE                            SoundA0:	incbin	sound\soundA0.bin
00096704                            		even
00096704                            SoundA1:	incbin	sound\soundA1.bin
0009672E                            		even
0009672E                            SoundA2:	incbin	sound\soundA2.bin
0009674E                            		even
0009674E                            SoundA3:	incbin	sound\soundA3.bin
00096780                            		even
00096780                            SoundA4:	incbin	sound\soundA4.bin
000967B6                            		even
000967B6                            SoundA5:	incbin	sound\soundA5.bin
000967E2                            		even
000967E2                            SoundA6:	incbin	sound\soundA6.bin
00096812                            		even
00096812                            SoundA7:	incbin	sound\soundA7.bin
00096842                            		even
00096842                            SoundA8:	incbin	sound\soundA8.bin
00096876                            		even
00096876                            SoundA9:	incbin	sound\soundA9.bin
00096888                            		even
00096888                            SoundAA:	incbin	sound\soundAA.bin
000968CA                            		even
000968CA                            SoundAB:	incbin	sound\soundAB.bin
000968EA                            		even
000968EA                            SoundAC:	incbin	sound\soundAC.bin
0009691E                            		even
0009691E                            SoundAD:	incbin	sound\soundAD.bin
00096954                            		even
00096954                            SoundAE:	incbin	sound\soundAE.bin
0009699E                            		even
0009699E                            SoundAF:	incbin	sound\soundAF.bin
000969CC                            		even
000969CC                            SoundB0:	incbin	sound\soundB0.bin
000969FE                            		even
000969FE                            SoundB1:	incbin	sound\soundB1.bin
00096A2A                            		even
00096A2A                            SoundB2:	incbin	sound\soundB2.bin
00096A7A                            		even
00096A7A                            SoundB3:	incbin	sound\soundB3.bin
00096AC4                            		even
00096AC4                            SoundB4:	incbin	sound\soundB4.bin
00096B20                            		even
00096B20                            SoundB5:	incbin	sound\soundB5.bin
00096B4E                            		even
00096B4E                            SoundB6:	incbin	sound\soundB6.bin
00096B6C                            		even
00096B6C                            SoundB7:	incbin	sound\soundB7.bin
00096BA8                            		even
00096BA8                            SoundB8:	incbin	sound\soundB8.bin
00096BC6                            		even
00096BC6                            SoundB9:	incbin	sound\soundB9.bin
00096C2A                            		even
00096C2A                            SoundBA:	incbin	sound\soundBA.bin
00096C52                            		even
00096C52                            SoundBB:	incbin	sound\soundBB.bin
00096C7E                            		even
00096C7E                            SoundBC:	incbin	sound\soundBC.bin
00096CC0                            		even
00096CC0                            SoundBD:	incbin	sound\soundBD.bin
00096D14                            		even
00096D14                            SoundBE:	incbin	sound\soundBE.bin
00096D4E                            		even
00096D4E                            SoundBF:	incbin	sound\soundBF.bin
00096DC0                            		even
00096DC0                            SoundC0:	incbin	sound\soundC0.bin
00096DEE                            		even
00096DEE                            SoundC1:	incbin	sound\soundC1.bin
00096E28                            		even
00096E28                            SoundC2:	incbin	sound\soundC2.bin
00096E52                            		even
00096E52                            SoundC3:	incbin	sound\soundC3.bin
00096ECC                            		even
00096ECC                            SoundC4:	incbin	sound\soundC4.bin
00096EF4                            		even
00096EF4                            SoundC5:	incbin	sound\soundC5.bin
00096F5C                            		even
00096F5C                            SoundC6:	incbin	sound\soundC6.bin
00096F9E                            		even
00096F9E                            SoundC7:	incbin	sound\soundC7.bin
00096FCC                            		even
00096FCC                            SoundC8:	incbin	sound\soundC8.bin
00096FDE                            		even
00096FDE                            SoundC9:	incbin	sound\soundC9.bin
0009700C                            		even
0009700C                            SoundCA:	incbin	sound\soundCA.bin
0009703A                            		even
0009703A                            SoundCB:	incbin	sound\soundCB.bin
00097086                            		even
00097086                            SoundCC:	incbin	sound\soundCC.bin
000970C0                            		even
000970C0                            SoundCD:	incbin	sound\soundCD.bin
000970CE                            		even
000970CE                            SoundCE:	incbin	sound\soundCE.bin
000970FC                            		even
000970FC                            SoundCF:	incbin	sound\soundCF.bin
00097134                            		even
00097134                            SoundD0:	incbin	sound\soundD0.bin
0009716E                            		even
0009716E                            SegaPCM:	incbin	sound\segapcm.bin
0009DAE6                            SegaPCM_End	even
0009DAE6                            ; ===========================================================================
0009DAE6                            Art_Dust	incbin	artunc\spindust.bin
0009F426                            ; ===========================================================================
0009F426                            
0009F426                            LoadDPLC:
0009F426 7000                       		moveq	#0,d0
0009F428 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0009F42C D040                       		add.w	d0,d0
0009F42E D4F2 0000                  		adda.w	(a2,d0.w),a2
0009F432 7A00                       		moveq	#0,d5
0009F434 1A1A                       		move.b	(a2)+,d5
0009F436 5345                       		subq.w	#1,d5
0009F438 6B00                       		bmi.s	DPLC_End
0009F43A                            
0009F43A                            DPLC_ReadEntry:
0009F43A 7200                       		moveq	#0,d1
0009F43C 121A                       		move.b	(a2)+,d1
0009F43E E149                       		lsl.w	#8,d1
0009F440 121A                       		move.b	(a2)+,d1
0009F442 3601                       		move.w	d1,d3
0009F444 E04B                       		lsr.w	#8,d3
0009F446 0243 00F0                  		andi.w	#$F0,d3
0009F44A 0643 0010                  		addi.w	#$10,d3
0009F44E 0241 0FFF                  		andi.w	#$FFF,d1
0009F452 EB89                       		lsl.l	#5,d1
0009F454 D286                       		add.l	d6,d1
0009F456 3404                       		move.w	d4,d2
0009F458 D843                       		add.w	d3,d4
0009F45A D843                       		add.w	d3,d4
0009F45C 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
0009F462 51CD FFD6                  		dbf	d5,DPLC_ReadEntry	; repeat for number of entries
0009F466                            
0009F466                            DPLC_End:
0009F466 4E75                       		rts	
0009F468                            ; End of function LoadSonicDynPLC
0009F468                            
0009F468                            ; ===========================================================================
0009F468                            
0009F468                            		include "#Owarisoft/main.asm"
0009F468                            ; ===========================================================================
0009F468                            owsf_txPal:	EQUR a6
0009F468                            owsf_VDP:	EQUR a5
0009F468                            
0009F468                            owsf_PalOff:	EQUR d7
0009F468                            owsf_Timer:	EQUR d6
0009F468                            owsf_Fades:	EQUR d4
0009F468                            
0009F468 =00000001                  owsf_TimerDef:	EQU 2-1
0009F468 =00000001                  owsf_FadeDef:	EQU 2-1
0009F468 =00000001                  owsf_url:	EQU 1	; if set to 0, Owarisoft url will not be shown
0009F468                            ; ===========================================================================
0009F468 =00C00000                  VDP_Data_Port		equ $C00000
0009F468 =00C00004                  VDP_Control_Port	equ $C00004
0009F468 =00C00008                  VDP_Counter		equ $C00008
0009F468                            
0009F468                            ; ===========================================================================
0009F468                            owsf_dma68kToVDP macro source,dest,length,type
0009F468                            	move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(owsf_VDP)
0009F468                            	move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(owsf_VDP)
0009F468                            	move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(owsf_VDP)
0009F468                            	move.w	#((dest)&$3FFF)|((type&1)<<15)|$4000,(owsf_VDP)
0009F468                            	move.w	#$80|(((dest)&$C000)>>14)|((type&2)<<3),(owsf_VDP)
0009F468                                endm
0009F468                            
0009F468                            ; values for the type argument
0009F468 =00000000                  VRAM =	$0
0009F468 =00000001                  CRAM =	$1
0009F468 =00000002                  VSRAM =	$2
0009F468                            
0009F468                            ; ===========================================================================
0009F468 4EF9 0000 0000             Owari_ints:	jmp	OwariVBlank
0009F46E 4EF9 0000 0000             Owari_ints2:	jmp	OwariVBlank2
0009F474                            ; ===========================================================================
0009F474                            Owarisoft:
0009F474 4EB8 1FE8                  		jsr	Pal_FadeFrom		; fadeout palette
0009F478 4EB8 11C0                  		jsr	ClearScreen		; clear screen data
0009F47C                            
0009F47C 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP
0009F482 3ABC 8004                  		move.w	#$8004,(owsf_VDP)	; $8004 - Disable HInt, HV Counter
0009F486 3ABC 8230                  		move.w	#$8230,(owsf_VDP)	; $8230 - Nametable A at $C000
0009F48A 3ABC 8407                  		move.w	#$8407,(owsf_VDP)	; $8407 - Nametable B at $E000
0009F48E 3ABC 9001                  		move.w	#$9001,(owsf_VDP)	; $9001 - 64x32 cell nametable area
0009F492 3ABC 9200                  		move.w	#$9200,(owsf_VDP)	; $9200 - Window V position at default
0009F496 3ABC 8B03                  		move.w	#$8B03,(owsf_VDP)	; $8B02 - Vscroll full, HScroll 8px
0009F49A 3ABC 8700                  		move.w	#$8700,(owsf_VDP)	; $8700 - BG color is Pal 0 Color 0
0009F49E                            
0009F49E                            	; load FG mappings
0009F49E 43F9 00FF 0000             		lea	$FF0000,a1
0009F4A4 41F9 0000 0000             		lea	Owari_mapFG,a0
0009F4AA 303C 0001                  		move.w	#1,d0
0009F4AE 4EB8 1724                  		jsr	EniDec
0009F4B2 43F9 00FF 0000             		lea	$FF0000,a1
0009F4B8 203C 4604 0003             		move.l	#$46040003,d0
0009F4BE 7222                       		moveq	#35-1,d1
0009F4C0 7404                       		moveq	#5-1,d2
0009F4C2 4EB8 136A                  		jsr	ShowVDPGraphics
0009F4C6                            
0009F4C6                            	; load BG mappings
0009F4C6 43F9 00FF 0000             		lea	$FF0000,a1
0009F4CC 41F9 0000 0000             		lea	Owari_mapBG,a0
0009F4D2 303C 005B                  		move.w	#$5B,d0
0009F4D6 4EB8 1724                  		jsr	EniDec
0009F4DA 43F9 00FF 0000             		lea	$FF0000,a1
0009F4E0 203C 659A 0003             		move.l	#$659A0003,d0
0009F4E6 720F                       		moveq	#16-1,d1
0009F4E8 7407                       		moveq	#8-1,d2
0009F4EA 4EB8 136A                  		jsr	ShowVDPGraphics
0009F4EE                            
0009F4EE                            	; decompress art
0009F4EE 41F9 0000 0000             		lea	Owari_tiles,a0
0009F4F4 43F9 00FF 0200             		lea	$FF0200,a1
0009F4FA 4EB8 18A2                  		jsr	KosDec
0009F4FE                            
0009F4FE                            	; load tiles, HScroll and initial palette
0009F4FE 2ABC 940A 9370 2ABC 9681+  	owsf_dma68kToVDP $FF0200, $20, $14E0, VRAM
0009F516 2ABC 9400 9380 2ABC 0000+  	owsf_dma68kToVDP Owari_HScroll,$FD5C,$100,VRAM
0009F52E 2ABC 9400 9340 2ABC 0000+  	owsf_dma68kToVDP Owari_Blank, 0, $80, CRAM
0009F546                            
0009F546                            	; clear url palette
0009F546                            
0009F546 7094                       		moveq 	#$FFFFFF94,d0 ; play music 94
0009F548 4EB8 12C6                  		jsr	PlaySound			; play music
0009F54C                            
0009F54C 41F8 FFC4 43FA FF16 20D9+  	loadJumps Owari_ints				; load the HBI and VBI jumps
0009F55A 7E00                       		moveq	#0,owsf_PalOff			; clear palette offset
0009F55C 7801                       		moveq	#owsf_FadeDef,owsf_Fades	; set the fades count
0009F55E 4DF9 0000 0000             		lea	Owari_txPalette,owsf_txPal
0009F564                            
0009F564                            ; ===========================================================================
0009F564 4E72 2300                  .mainloop	STOP	#$2300				; stop CPU
0009F568 1038 F604                  		move.b	$FFFFF604.w,d0			; get player 1's held buttons
0009F56C 8038 F606                  		or.b	$FFFFF606.w,d0			; get player 2's held buttons
0009F570 6AF2                       		bpl.s	.mainloop			; if start is not pressed, branch
0009F572                            
0009F572 6100 0000                  		bsr	OwariOutFade
0009F576 7E00                       		moveq	#0,owsf_PalOff			; clear palette offset
0009F578                            
0009F578 41F8 FFC4 43FA FEF0 20D9+  	loadJumps Owari_ints2				; load the HBI and VBI jumps
0009F586 51F8 F604                  		sf	$FFFFF604.w			; force start button press
0009F58A 4DF9 0000 0000             		lea	Owari_txPalette_end,owsf_txPal
0009F590                            
0009F590 4E72 2300                  .mainloop2	STOP	#$2300				; stop CPU
0009F594 4A38 F604                  		tst.b	$FFFFF604.w			; get player 1's held buttons
0009F598 6AF6                       		bpl.s	.mainloop2			; if start is not pressed, branch
0009F59A                            
0009F59A 41F8 FFC4 43F8 00F4 20D9+  	loadJumps IntMain				; load VBlank and HBlank interrupts
0009F5A8 4E75                       		rts
0009F5AA                            
0009F5AA                            ; ===========================================================================
0009F5AA                            OwariOutFade:
0009F5AA 43F9 00FF 0000             		lea	$FF0000,a1		; get fadeout pal
0009F5B0 41F9 0000 0000             		lea	Owari_Palette,a0	; get palette
0009F5B6 D0C7                       		add.w	owsf_PalOff,a0		;
0009F5B8 D0C7                       		add.w	owsf_PalOff,a0		; add palette offset twice
0009F5BA 7015                       		moveq	#($2D/2)-1,d0		; get repeat times
0009F5BC                            
0009F5BC 22D8                       .loadPal	move.l	(a0)+,(a1)+		; load 2 palettes
0009F5BE 51C8 FFFC                  		dbf	d0,.loadPal		; loop
0009F5C2                            
0009F5C2 3029 FFFE                  		move.w	-2(a1),d0		; get last color
0009F5C6 1200                       		move.b	d0,d1			;
0009F5C8 1400                       		move.b	d0,d2			; copy it over
0009F5CA                            
0009F5CA 0240 0F00                  		and.w	#$F00,d0		; get bleu
0009F5CE 0241 00F0                  		and.w	#$F0,d1			; get green
0009F5D2 0242 000F                  		and.w	#$F,d2			; get red
0009F5D6 7607                       		moveq	#8-1,d3			; 8 different shades
0009F5D8                            
0009F5D8                            ; d0 = blue, d1 = green, d2 = red
0009F5D8 4A40                       .loadfade	tst.w	d0			;
0009F5DA 6700                       		beq.s	.notBleu		; bleu is 0, dont decrement
0009F5DC 0440 0200                  		sub.w	#$200,d0		; decrement to next shade
0009F5E0                            
0009F5E0 4A01                       .notBleu	tst.b	d1			;
0009F5E2 6700                       		beq.s	.notGreen		; green is 0, dont decrement
0009F5E4 0401 0020                  		sub.b	#$20,d1			; decrement to next shade
0009F5E8                            
0009F5E8 4A02                       .notGreen	tst.b	d2			;
0009F5EA 6700                       		beq.s	.notRed			; red is 0, dont decrement
0009F5EC 5502                       		subq.b	#2,d2			; decrement to next shade
0009F5EE                            
0009F5EE 3800                       .notRed		move.w	d0,d4			; get bleu to d4
0009F5F0 D841                       		add.w	d1,d4			; add green to d4
0009F5F2 D842                       		add.w	d2,d4			; add red to d4
0009F5F4                            
0009F5F4 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009F5F6 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009F5F8 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009F5FA 51CB FFDC                  		dbf	d3,.loadfade		; load next fade
0009F5FE                            
0009F5FE 700E                       		moveq	#(10*3/2)-1,d0		; repeat times
0009F600 7200                       		moveq	#0,d1			; black
0009F602                            
0009F602 22C1                       .loadBlack	move.l	d1,(a1)+		; transfer color
0009F604 51C8 FFFC                  		dbf	d0,.loadBlack		; loopdeloop
0009F608 4E75                       		rts
0009F60A                            
0009F60A                            ; ===========================================================================
0009F60A                            OwariVBlank2:
0009F60A 48E7 0F02                  		movem.l	owsf_Fades-owsf_PalOff/owsf_txPal,-(sp)	; store vars
0009F60E 4EB9 0008 B2A6             		jsr	sub_71B4C			; sound driver code
0009F614 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP	; get vdp port
0009F61A 4CDF 40F0                  		movem.l	(sp)+,owsf_Fades-owsf_PalOff/owsf_txPal	; pop variables
0009F61E                            
0009F61E 5306                       		subq.b	#1,owsf_Timer			; sub 1 from timer
0009F620 6A00                       		bpl.s	.end2				; if positive, skip
0009F622 7C01                       		moveq	#owsf_TimerDef,owsf_Timer	; set timer
0009F624 5647                       		add.w	#3,owsf_PalOff			; add 3 to advance to next row
0009F626                            
0009F626 0C47 0000                  		cmp.w	#Owari_po_3,owsf_PalOff		; is the limit reached,
0009F62A 5EF8 F604                  		sgt	$FFFFF604.w			; force start button press
0009F62E                            
0009F62E 2ABC C062 0000             		move.l	#$C0620000,(owsf_VDP)		; set CRAM write
0009F634 3B66 FFFC                  		move.w	-(owsf_txPal),-4(owsf_VDP)	; write next palette
0009F638                            
0009F638 303C 9500                  		move.w	#$9500|((($FF0000)>>1)&$FF),d0; get DMA offset
0009F63C D007                       		add.b	owsf_PalOff,d0			; add low byte of palette offset
0009F63E 3A80                       		move.w	d0,(owsf_VDP)			; move to VDP
0009F640                            
0009F640 303C 9680                  		move.w	#$9600|(((($FF0000)>>1)&$FF00)>>8),d0
0009F644 3207                       		move.w	owsf_PalOff,d1			; get palette offset
0009F646 E049                       		lsr.w	#8,d1				; get high byte
0009F648 D001                       		add.b	d1,d0				; add to VDP command
0009F64A 3A80                       		move.w	d0,(owsf_VDP)			; move to vDP
0009F64C                            
0009F64C 3ABC 977F                  		move.w	#$9700|((((($FF0000)>>1)&$FF0000)>>16)&$7F),(owsf_VDP); set DMA source to RAM
0009F650 203C 9400 930F             		move.l	#(($9400|((((15*2)>>1)&$FF00)>>8))<<16)|($9300|(((15*2)>>1)&$FF)),d0; set DMA lenght
0009F656 2A80                       		move.l	d0,(owsf_VDP)		; line 0
0009F658 2ABC C002 0080             		move.l	#$C0020080,(owsf_VDP)	; DMA!
0009F65E 2A80                       		move.l	d0,(owsf_VDP)		; line 1
0009F660 2ABC C022 0080             		move.l	#$C0220080,(owsf_VDP)	; DMA!
0009F666 2A80                       		move.l	d0,(owsf_VDP)		; line 2
0009F668 2ABC C042 0080             		move.l	#$C0420080,(owsf_VDP)	; DMA!
0009F66E 4E73                       .end2		rte
0009F670                            ; ===========================================================================
0009F670                            OwariVBlank:
0009F670 48E7 0F02                  		movem.l	owsf_Fades-owsf_PalOff/owsf_txPal,-(sp)	; store vars
0009F674 4EB8 10E2                  		jsr	ReadJoypads			; get button presses
0009F678 4EB9 0008 B2A6             		jsr	sub_71B4C			; sound driver code
0009F67E 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP	; get vdp port
0009F684 4CDF 40F0                  		movem.l	(sp)+,owsf_Fades-owsf_PalOff/owsf_txPal	; pop variables
0009F688                            
0009F688 0C47 0000                  		cmp.w	#Owari_po_0,owsf_PalOff		; is the limit reached
0009F68C 6C00 0000                  		bge	.st				; if not, skip
0009F690 51F8 F606                  		sf	$FFFFF606.w			; force start button press
0009F694 51F8 F604                  		sf	$FFFFF604.w			; force start button press
0009F698                            
0009F698 5306                       .st		subq.b	#1,owsf_Timer			; sub 1 from timer
0009F69A 6A00                       		bpl.s	.end				; if positive, skip
0009F69C 7C01                       		moveq	#owsf_TimerDef,owsf_Timer	; set timer
0009F69E 5647                       		add.w	#3,owsf_PalOff			; add 3 to advance to next row
0009F6A0                            
0009F6A0 0C47 0000                  		cmp.w	#Owari_po_2,owsf_PalOff		; is the limit reached
0009F6A4 6F00 0000                  		ble	.skp				; if not, skip
0009F6A8 3E3C 0000                  		move.w	#Owari_po_1,owsf_PalOff		; reset to start of the fade
0009F6AC                            
0009F6AC 5304                       		subq.b	#1,owsf_Fades			; sub 1 from the fade times counter
0009F6AE 6A00                       		bpl.s	.skp				; if negative, branch
0009F6B0 50F8 F606                  		st	$FFFFF606.w			; force start button press
0009F6B4                            
0009F6B4 BDFC 0000 0000             		cmpa.l	#Owari_txPalette_end-2,owsf_txPal; is text fadein done?
0009F6BA 6C00                       		bge.s	.noin				; if is, branch
0009F6BC 2ABC C062 0000             		move.l	#$C0620000,(owsf_VDP)		; set CRAM write
0009F6C2 3B5E FFFC                  		move.w	(owsf_txPal)+,-4(owsf_VDP)	; write next palette
0009F6C6                            
0009F6C6 303C 0000                  .noin		move.w	#$9500|(((Owari_Palette)>>1)&$FF),d0; get DMA offset
0009F6CA D007                       		add.b	owsf_PalOff,d0			; add low byte of palette offset
0009F6CC 3A80                       		move.w	d0,(owsf_VDP)			; move to VDP
0009F6CE                            
0009F6CE 303C 0000                  		move.w	#$9600|((((Owari_Palette)>>1)&$FF00)>>8),d0
0009F6D2 3207                       		move.w	owsf_PalOff,d1			; get palette offset
0009F6D4 E049                       		lsr.w	#8,d1				; get high byte
0009F6D6 D001                       		add.b	d1,d0				; add to VDP command
0009F6D8 3A80                       		move.w	d0,(owsf_VDP)			; move to vDP
0009F6DA                            
0009F6DA 3ABC 0000                  		move.w	#$9700|(((((Owari_Palette)>>1)&$FF0000)>>16)&$7F),(owsf_VDP); set DMA source to RAM
0009F6DE 203C 9400 930F             		move.l	#(($9400|((((15*2)>>1)&$FF00)>>8))<<16)|($9300|(((15*2)>>1)&$FF)),d0; set DMA lenght
0009F6E4 2A80                       		move.l	d0,(owsf_VDP)		; line 0
0009F6E6 2ABC C002 0080             		move.l	#$C0020080,(owsf_VDP)	; DMA!
0009F6EC 2A80                       		move.l	d0,(owsf_VDP)		; line 1
0009F6EE 2ABC C022 0080             		move.l	#$C0220080,(owsf_VDP)	; DMA!
0009F6F4 2A80                       		move.l	d0,(owsf_VDP)		; line 2
0009F6F6 2ABC C042 0080             		move.l	#$C0420080,(owsf_VDP)	; DMA!
0009F6FC                            
0009F6FC 4E73                       .end		rte
0009F6FE                            ; ===========================================================================
0009F6FE                            Owari_tiles:	incbin "#Owarisoft/art.kos"		; Kosinski compressed tiles
0009FE46                            		even
0009FE46                            Owari_mapFG:	incbin "#Owarisoft/fgmap.eni"		; Enigma compressed foreground mappings
0009FE96                            		even
0009FE96                            Owari_mapBG:	incbin "#Owarisoft/bgmap.eni"		; Enigma compressed background mappings
0009FEC8                            		even
0009FEC8                            ; ===========================================================================
0009FEC8                            
0009FEC8 FFAC FFAC FFAC FFAC FFAC+  Owari_HScroll:	dcb.l 8,$FFACFFAC
0009FEE8 0000 0000 0000 0000 0000+  		dcb.l 6,0
0009FF00                            ; ===========================================================================
0009FF00 0000 0000 0000 0000 0000+  Owari_Blank:	dcb.w $80/2,0
0009FF80                            
0009FF80                            ; ===========================================================================
0009FF80 =0009FF50                  Owari_txPalette: equ *-$30
0009FF80 0222 0222 0444 0444 0666+  		dc.w $0222, $0222, $0444, $0444, $0666, $0666, $0888
0009FF8E 0888 0AAA 0AAA 0CCC 0CCC+  		dc.w $0888, $0AAA, $0AAA, $0CCC, $0CCC, $0EEE, $0EEE
0009FF9C                            Owari_txPalette_end:
0009FF9C                            ; ===========================================================================
0009FF9C =00000038                  Owari_po_3	equ $70/2
0009FF9C                            
0009FF9C                            Owari_PadStart
0009FF9C                            	align $200000
00200000                            Owari_Palette:
00200000                            	rept (16*2*3)
00200000                            		dc.w 0		; black before fade to white
00200000 0000 0000 0000 0000 0000+  	endr
002000C0                            
002000C0 0444 0222 0000             	dc.w $0444, $0222, $0000
002000C6 0666 0444 0222             	dc.w $0666, $0444, $0222
002000CC 0888 0666 0444             	dc.w $0888, $0666, $0444
002000D2 0AAA 0888 0444             	dc.w $0AAA, $0888, $0444
002000D8 0CCC 0888 0666             	dc.w $0CCC, $0888, $0666
002000DE 0EEE 0AAA 0666             	dc.w $0EEE, $0AAA, $0666		; fade from black
002000E4                            
002000E4 =00000072                  Owari_po_0	equ (*-Owari_Palette)/2
002000E4                            	rept 4
002000E4                            		rept 15/3
002000E4                            			dc.w $EEE, $AAA, $666	; white frame
002000E4                            		endr
002000E4 0EEE 0AAA 0666 0EEE 0AAA+  	endr
0020015C                            
0020015C 0CCC 0AAA 0888                 	dc.w $0CCC, $0AAA, $0888
00200162 0AAC 088A 0668                 	dc.w $0AAC, $088A, $0668
00200168 088C 066A 0448                 	dc.w $088C, $066A, $0448
0020016E 066C 044A 0228                 	dc.w $066C, $044A, $0228
00200174 044C 022A 0008                 	dc.w $044C, $022A, $0008
0020017A 022C 000A 0008                 	dc.w $022C, $000A, $0008		; fade to red
00200180                            
00200180 =000000C0                  Owari_po_1	equ (*-Owari_Palette)/2
00200180                                	incbin	"#Owarisoft/rainbow.bin"	; rainbow effect
002003D8                            
002003D8 =000001EC                  Owari_po_2	equ (*-Owari_Palette)/2
002003D8                                	incbin	"#Owarisoft/rainbow.bin"	; more rainbow effect for reset counter
00200630                            
00200630 =00160064                  Owari_pad	equ Owari_Palette-Owari_PadStart
00200630                            	inform 0,"OwariSoft Splash: Padded $\$Owari_pad bytes"
00200630                            ; ===========================================================================
00200630                            ; ===========================================================================
00200630                            		inform 0,""
00200630                            
00200630                            EndOfRom:
