00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            stopZ80		macro
00000000                            		move.w    #$100,($A11100).l
00000000                            		nop
00000000                            		nop
00000000                            		nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            startZ80    macro
00000000                            		move.w    #0,($A11100).l    ; start the Z80
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            waitYM		macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                            		btst    #7,d2
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000 =FFFFFFC4                  VBlankJump	equ $FFFFFFC4
00000000 =FFFFFFCA                  HBlankJump	equ VBlankJump+6
00000000                            ; ===========================================================================
00000000                            
00000000                            loadJumps	macro fromloc
00000000                            
00000000                            		lea	VBlankJump,a0
00000000                            		lea	fromloc,a1
00000000                            	rept 3
00000000                            		move.l	(a1)+,(a0)+
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000        Vectors:	dc.l $FFFE00, EntryPoint
00000008 6000 FFFE                  ErrorTrap:	bra.w	*
0000000C                            
0000000C 0000 0000 0000 0000 0000+  		dc.l AddressError, IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0008 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 FFFF FFCA 0000 0008 FFFF+  		dc.l HBlankJump, ErrorTrap, VBlankJump, ErrorTrap
00000080 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F4                            
000000F4                            ; ===========================================================================
000000F4 4EF9 0000 0000             IntMain:	jmp	V_Int
000000FA 4EF9 0000 0000             			jmp	H_Int
00000100                            ; ===========================================================================
00000100 5345 4741 204D 4547 4120+  Console:		dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 4F57 4152 4920 2020 3230+  Date:			dc.b 'OWARI   2016.NOV' ; Release date
00000120 5975 6E64 6F6E 6720 5A69+  Title_Local:	dc.b 'Yundong Zixingche                               ' ; Domestic name
00000150 5975 6E67 646F 6E67 205A+  Title_Int:		dc.b 'Yungdong Zixingche                              ' ; International name
00000180 474D 2031 3331 3331 3331+  Serial:			dc.b 'GM 13131313-13'   ; Serial/version number
0000018E 0000                       Checksum:		dc.w 0
00000190 4A20 2020 2020 2020 2020+  				dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom			; ROM start
000001A4 0000 0000                  RomEndLoc:		dc.l EndOfRom-1			; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000			; RAM start
000001AC 00FF FFFF                  RamEndLoc:		dc.l $FFFFFF			; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020			; change to $5241E020 to create	SRAM
000001B4 2020 2020                  				dc.l $20202020			; SRAM start
000001B8 2020 2020                  				dc.l $20202020			; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:			dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:			dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            EntryPoint:
00000200 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
00000206 6600                       		bne.s	PortA_Ok
00000208 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
0000020E                            
0000020E                            PortA_Ok:
0000020E 6600                       		bne.s	PortC_Ok
00000210 4BFA 0000                  		lea	SetupValues(pc),a5
00000214 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000218 4CDD 1F00                  		movem.l	(a5)+,a0-a4
0000021C 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000220 0200 000F                  		andi.b	#$F,d0
00000224 6700                       		beq.s	SkipSecurity
00000226 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
0000022E                            
0000022E                            SkipSecurity:
0000022E 3014                       		move.w	(a4),d0		; check	if VDP works
00000230 7000                       		moveq	#0,d0
00000232 2C40                       		movea.l	d0,a6
00000234 4E66                       		move.l	a6,usp		; set usp to $0
00000236 7217                       		moveq	#$17,d1
00000238                            
00000238                            VDPInitLoop:
00000238 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000023A 3885                       		move.w	d5,(a4)		; move value to	VDP register
0000023C DA47                       		add.w	d7,d5		; next register
0000023E 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000242 289D                       		move.l	(a5)+,(a4)
00000244 3680                       		move.w	d0,(a3)		; clear	the screen
00000246 3287                       		move.w	d7,(a1)		; stop the Z80
00000248 3487                       		move.w	d7,(a2)		; reset	the Z80
0000024A                            
0000024A                            WaitForZ80:
0000024A 0111                       		btst	d0,(a1)		; has the Z80 stopped?
0000024C 66FC                       		bne.s	WaitForZ80	; if not, branch
0000024E 7425                       		moveq	#$25,d2
00000250                            
00000250                            Z80InitLoop:
00000250 10DD                       		move.b	(a5)+,(a0)+
00000252 51CA FFFC                  		dbf	d2,Z80InitLoop
00000256 3480                       		move.w	d0,(a2)
00000258 3280                       		move.w	d0,(a1)		; start	the Z80
0000025A 3487                       		move.w	d7,(a2)		; reset	the Z80
0000025C                            
0000025C                            ClrRAMLoop:
0000025C 2D00                       		move.l	d0,-(a6)
0000025E 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000262 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000264 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
00000266 761F                       		moveq	#$1F,d3
00000268                            
00000268                            ClrCRAMLoop:
00000268 2680                       		move.l	d0,(a3)
0000026A 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
0000026E 289D                       		move.l	(a5)+,(a4)
00000270 7813                       		moveq	#$13,d4
00000272                            
00000272                            ClrVDPStuff:
00000272 2680                       		move.l	d0,(a3)
00000274 51CC FFFC                  		dbf	d4,ClrVDPStuff
00000278 7A03                       		moveq	#3,d5
0000027A                            
0000027A                            PSGInitLoop:
0000027A 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
0000027E 51CD FFFA                  		dbf	d5,PSGInitLoop
00000282 3480                       		move.w	d0,(a2)
00000284 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
00000288 46FC 2700                  		move	#$2700,sr	; set the sr
0000028C                            
0000028C                            PortC_Ok:
0000028C 6000                       		bra.s	GameProgram
0000028E                            ; ===========================================================================
0000028E 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000290 3FFF                       		dc.w $3FFF
00000292 0100                       		dc.w $100
00000294                            
00000294 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
00000298 00A1 1100                  		dc.l $A11100		; Z80 bus request
0000029C 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A0 00C0 0000                  		dc.l $C00000
000002A4 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002A8                            
000002A8 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002AC 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B0 0000 FF00                  		dc.b 0,	0, $FF,	0
000002B4 8137 0001                  		dc.b $81, $37, 0, 1
000002B8 0100 00FF                  		dc.b 1,	0, 0, $FF
000002BC FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C0                            
000002C0 4000 0080                  		dc.l $40000080
000002C4                            
000002C4 AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D0 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002DA D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002E5 ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002EA                            
000002EA 8104                       		dc.w $8104		; value	for VDP	display	mode
000002EC 8F02                       		dc.w $8F02		; value	for VDP	increment
000002EE C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F2 4000 0010                  		dc.l $40000010
000002F6                            
000002F6 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000002FA                            ; ===========================================================================
000002FA                            
000002FA                            GameProgram:
000002FA 4A79 00C0 0004             		tst.w	($C00004).l
00000300 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000306 7E00                       		moveq	#0,d7
00000308 3C3C 3FFF                  		move.w	#$3FFF,d6
0000030C                            
0000030C                            GameClrRAM:
0000030C 2CC7                       		move.l	d7,(a6)+
0000030E 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000312                            
00000312 1039 00A1 0001             		move.b	($A10001).l,d0
00000318 0200 00C0                  		andi.b	#$C0,d0
0000031C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000320                            
00000320 41F8 FFC4 43F8 00F4 20D9+  		loadJumps IntMain
0000032E                            		
0000032E 6100 0000                  		bsr.w	VDPSetupGame
00000332 6100 0000                  		bsr.w	InitMegaPCM
00000336 6100 0000                  		bsr.w	JoypadInit
0000033A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Notice Screen
00000340                            
00000340                            MainGameLoop:
00000340 1038 F600                  		move.b	($FFFFF600).w,d0
00000344 0240 007C                  		andi.w	#$7C,d0
00000348 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0
0000034C 4E90                       		jsr	(a0)
0000034E 60F0                       		bra.s	MainGameLoop
00000350                            ; ===========================================================================
00000350                            ; ---------------------------------------------------------------------------
00000350                            ; Main game mode array
00000350                            ; ---------------------------------------------------------------------------
00000350                            
00000350                            GameModeArray:
00000350 0000 0000                  		dc.l	NoticeScreen	; Notice Screen ($00)
00000354 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
00000358 0000 0000                  		dc.l	Level		; Demo Mode ($08)
0000035C 0000 0000                  		dc.l	Level		; Normal Level ($0C)
00000360 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
00000364 0000 0000                  		dc.l	ContinueScreen	; Continue Screen ($14)
00000368 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
0000036C 0000 0000                  		dc.l	Credits		; Credits ($1C)
00000370 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($20)
00000374                            ; ===========================================================================
00000374                            
00000374                            BusError:
00000374 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
0000037A 6000                       		bra.s	loc_43A
0000037C                            ; ===========================================================================
0000037C                            
0000037C                            AddressError:
0000037C 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000382 6000                       		bra.s	loc_43A
00000384                            ; ===========================================================================
00000384                            
00000384                            IllegalInstr:
00000384 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000038A 54AF 0002                  		addq.l	#2,2(sp)
0000038E 6000                       		bra.s	loc_462
00000390                            ; ===========================================================================
00000390                            
00000390                            ZeroDivide:
00000390 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000396 6000                       		bra.s	loc_462
00000398                            ; ===========================================================================
00000398                            
00000398                            ChkInstr:
00000398 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000039E 6000                       		bra.s	loc_462
000003A0                            ; ===========================================================================
000003A0                            
000003A0                            TrapvInstr:
000003A0 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003A6 6000                       		bra.s	loc_462
000003A8                            ; ===========================================================================
000003A8                            
000003A8                            PrivilegeViol:
000003A8 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000003AE 6000                       		bra.s	loc_462
000003B0                            ; ===========================================================================
000003B0                            
000003B0                            Trace:
000003B0 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000003B6 6000                       		bra.s	loc_462
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            Line1010Emu:
000003B8 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
000003BE 54AF 0002                  		addq.l	#2,2(sp)
000003C2 6000                       		bra.s	loc_462
000003C4                            ; ===========================================================================
000003C4                            
000003C4                            Line1111Emu:
000003C4 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
000003CA 54AF 0002                  		addq.l	#2,2(sp)
000003CE 6000                       		bra.s	loc_462
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            ErrorExcept:
000003D0 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_462
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            loc_43A:
000003D8 46FC 2700                  		move	#$2700,sr
000003DC 544F                       		addq.w	#2,sp
000003DE 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E2 544F                       		addq.w	#2,sp
000003E4 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003EA 6100 0000                  		bsr.w	ShowErrorMsg
000003EE 202F 0002                  		move.l	2(sp),d0
000003F2 6100 0000                  		bsr.w	sub_5BA
000003F6 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003FA 6100 0000                  		bsr.w	sub_5BA
000003FE 6000                       		bra.s	loc_478
00000400                            ; ===========================================================================
00000400                            
00000400                            loc_462:
00000400 46FC 2700                  		move	#$2700,sr
00000404 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000040A 6100 0000                  		bsr.w	ShowErrorMsg
0000040E 202F 0002                  		move.l	2(sp),d0
00000412 6100 0000                  		bsr.w	sub_5BA
00000416                            
00000416                            loc_478:
00000416 6100 0000                  		bsr.w	ErrorWaitForC
0000041A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000420 46FC 2300                  		move	#$2300,sr
00000424 4E73                       		rte	
00000426                            
00000426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000426                            
00000426                            
00000426                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000426 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042C 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000436 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043C 323C 027F                  		move.w	#$27F,d1
00000440                            
00000440                            Error_LoadGfx:
00000440 3C98                       		move.w	(a0)+,(a6)
00000442 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000446 7000                       		moveq	#0,d0		; clear	d0
00000448 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000450 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000454 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045E 7212                       		moveq	#$12,d1		; number of characters
00000460                            
00000460                            Error_LoopChars:
00000460 7000                       		moveq	#0,d0
00000462 1018                       		move.b	(a0)+,d0
00000464 0640 0790                  		addi.w	#$790,d0
00000468 3C80                       		move.w	d0,(a6)
0000046A 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046E 4E75                       		rts	
00000470                            ; End of function ShowErrorMsg
00000470                            
00000470                            ; ===========================================================================
00000470 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000474 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000478 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047C 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000480 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000484 0000                       		dc.w asc_5A6-ErrorText
00000486 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000499 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AC 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BF 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D2 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E5 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F8 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000050B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000531 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000544 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000558 00                         		even
00000558                            
00000558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000558                            
00000558                            
00000558                            sub_5BA:				; XREF: loc_43A; loc_462
00000558 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055C 7407                       		moveq	#7,d2
0000055E                            
0000055E                            loc_5C0:
0000055E E998                       		rol.l	#4,d0
00000560 6100                       		bsr.s	sub_5CA
00000562 51CA FFFA                  		dbf	d2,loc_5C0
00000566 4E75                       		rts	
00000568                            ; End of function sub_5BA
00000568                            
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            sub_5CA:				; XREF: sub_5BA
00000568 3200                       		move.w	d0,d1
0000056A 0241 000F                  		andi.w	#$F,d1
0000056E 0C41 000A                  		cmpi.w	#$A,d1
00000572 6500                       		bcs.s	loc_5D8
00000574 5E41                       		addq.w	#7,d1
00000576                            
00000576                            loc_5D8:
00000576 0641 07C0                  		addi.w	#$7C0,d1
0000057A 3C81                       		move.w	d1,(a6)
0000057C 4E75                       		rts	
0000057E                            ; End of function sub_5CA
0000057E                            
0000057E                            
0000057E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057E                            
0000057E                            
0000057E                            ErrorWaitForC:				; XREF: loc_478
0000057E 6100 0000                  		bsr.w	ReadJoypads
00000582 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000588 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058C 4E75                       		rts	
0000058E                            ; End of function ErrorWaitForC
0000058E                            
0000058E                            ; ===========================================================================
0000058E                            
0000058E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAE                            		even
00000AAE                            
00000AAE                            ; ===========================================================================
00000AAE                            
00000AAE                            V_Int:				; XREF: Vectors
00000AAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB2 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB6 6700                       		beq.s	loc_B88
00000AB8 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000AD0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD6 6700                       		beq.s	loc_B42
00000AD8 303C 0700                  		move.w	#$700,d0
00000ADC                            
00000ADC                            loc_B3E:
00000ADC 51C8 FFFE                  		dbf	d0,loc_B3E
00000AE0                            
00000AE0                            loc_B42:
00000AE0 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE4 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AEA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AF0 0240 003E                  		andi.w	#$3E,d0
00000AF4 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF8 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFC                            
00000AFC                            loc_B5E:				; XREF: loc_B88
00000AFC 4EB9 0000 0000             		jsr	sub_71B4C
00000B02                            
00000B02                            loc_B64:				; XREF: loc_D50
00000B02 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B06 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0A 4E73                       		rte	
00000B0C                            ; ===========================================================================
00000B0C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B10 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B14 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B18 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B20 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B24 0000                       		dc.w loc_E72-off_B6E
00000B26                            ; ===========================================================================
00000B26                            
00000B26                            loc_B88:				; XREF: V_Int; off_B6E
00000B26 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2C 6700                       		beq.s	loc_B9A
00000B2E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B34 6600 FFC6                  		bne.w	loc_B5E
00000B38                            
00000B38                            loc_B9A:
00000B38 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3E 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B42 3039 00C0 0004             		move.w	($C00004).l,d0
00000B48 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4E 6700                       		beq.s	loc_BBA
00000B50 303C 0700                  		move.w	#$700,d0
00000B54                            
00000B54                            loc_BB6:
00000B54 51C8 FFFE                  		dbf	d0,loc_BB6
00000B58                            
00000B58                            loc_BBA:
00000B58 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B66                            
00000B66                            loc_BC8:
00000B66 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000B6E 66F6                       		bne.s	loc_BC8
00000B70 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B74 6600                       		bne.s	loc_BFE
00000B76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B7C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B82 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B88 3ABC 977F                  		move.w	#$977F,(a5)
00000B8C 3ABC C000                  		move.w	#$C000,(a5)
00000B90 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B9A 6000                       		bra.s	loc_C22
00000B9C                            ; ===========================================================================
00000B9C                            
00000B9C                            loc_BFE:				; XREF: loc_BC8
00000B9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BA2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BA8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BAE 3ABC 977F                  		move.w	#$977F,(a5)
00000BB2 3ABC C000                  		move.w	#$C000,(a5)
00000BB6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BC0                            
00000BC0                            loc_C22:				; XREF: loc_BC8
00000BC0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000BCC 6000 FF2E                  		bra.w	loc_B5E
00000BD0                            ; ===========================================================================
00000BD0                            
00000BD0                            loc_C32:				; XREF: off_B6E
00000BD0 6100 0000                  		bsr.w	sub_106E
00000BD4                            
00000BD4                            loc_C36:				; XREF: off_B6E
00000BD4 4A78 F614                  		tst.w	($FFFFF614).w
00000BD8 6700 0000                  		beq.w	locret_C42
00000BDC 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BE0                            
00000BE0                            locret_C42:
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C44:				; XREF: off_B6E
00000BE2 6100 0000                  		bsr.w	sub_106E
00000BE6 6100 0000                  		bsr.w	sub_6886
00000BEA 6100 0000                  		bsr.w	sub_1642
00000BEE 4A78 F614                  		tst.w	($FFFFF614).w
00000BF2 6700 0000                  		beq.w	locret_C5C
00000BF6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BFA                            
00000BFA                            locret_C5C:
00000BFA 4E75                       		rts	
00000BFC                            ; ===========================================================================
00000BFC                            
00000BFC                            loc_C5E:				; XREF: off_B6E
00000BFC 6100 0000                  		bsr.w	sub_106E
00000C00 4E75                       		rts	
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            loc_C64:				; XREF: off_B6E
00000C02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C08 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C0C                            
00000C0C                            loc_C6E:				; XREF: off_B6E
00000C0C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C14                            
00000C14                            loc_C76:
00000C14 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C1C 66F6                       		bne.s	loc_C76		; if not, branch
00000C1E 6100 0000                  		bsr.w	ReadJoypads
00000C22 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C26 6600                       		bne.s	loc_CB0
00000C28 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C2E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C34 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C3A 3ABC 977F                  		move.w	#$977F,(a5)
00000C3E 3ABC C000                  		move.w	#$C000,(a5)
00000C42 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C48 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C4C 6000                       		bra.s	loc_CD4
00000C4E                            ; ===========================================================================
00000C4E                            
00000C4E                            loc_CB0:				; XREF: loc_C76
00000C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C54 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C5A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C60 3ABC 977F                  		move.w	#$977F,(a5)
00000C64 3ABC C000                  		move.w	#$C000,(a5)
00000C68 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C72                            
00000C72                            loc_CD4:				; XREF: loc_C76
00000C72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C7C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C82 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C88 3ABC 977F                  		move.w	#$977F,(a5)
00000C8C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C90 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CA0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CA6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CAC 3ABC 977F                  		move.w	#$977F,(a5)
00000CB0 3ABC 7800                  		move.w	#$7800,(a5)
00000CB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC4                            
00000CC4                            loc_D50:
00000CC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000CCC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CD2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CD8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CDE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CE4 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CEA 6400                       		bcc.s	Demo_Time
00000CEC 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF2 588F                       		addq.l	#4,sp
00000CF4 6000 FE0C                  		bra.w	loc_B64
00000CF8                            
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            ; Subroutine to	run a demo for an amount of time
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            
00000CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CF8                            
00000CF8                            
00000CF8                            Demo_Time:				; XREF: loc_D50; H_Int
00000CF8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CFC 4EB9 0000 0000             		jsr	AniArt_Load
00000D02 4EB9 0000 0000             		jsr	HudUpdate
00000D08 6100 0000                  		bsr.w	sub_165E
00000D0C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D10 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D14 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D18                            
00000D18                            Demo_TimeEnd:
00000D18 4E75                       		rts	
00000D1A                            ; End of function Demo_Time
00000D1A                            
00000D1A                            ; ===========================================================================
00000D1A                            
00000D1A                            loc_DA6:				; XREF: off_B6E
00000D1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D22                            
00000D22                            loc_DAE:
00000D22 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D2A 66F6                       		bne.s	loc_DAE		; if not, branch
00000D2C 6100 0000                  		bsr.w	ReadJoypads
00000D30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D36 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D3C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D42 3ABC 977F                  		move.w	#$977F,(a5)
00000D46 3ABC C000                  		move.w	#$C000,(a5)
00000D4A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D5A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D60 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D66 3ABC 977F                  		move.w	#$977F,(a5)
00000D6A 3ABC 7800                  		move.w	#$7800,(a5)
00000D6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D7E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D84 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D8A 3ABC 977F                  		move.w	#$977F,(a5)
00000D8E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D9C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DA4 6100 0000                  		bsr.w	PalCycle_SS
00000DA8 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DAE                            
00000DAE                            loc_E64:
00000DAE 4A78 F614                  		tst.w	($FFFFF614).w
00000DB2 6700 0000                  		beq.w	locret_E70
00000DB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DBA                            
00000DBA                            locret_E70:
00000DBA 4E75                       		rts	
00000DBC                            ; ===========================================================================
00000DBC                            
00000DBC                            loc_E72:				; XREF: off_B6E
00000DBC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DC4                            
00000DC4                            loc_E7A:
00000DC4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DCC 66F6                       		bne.s	loc_E7A		; if not, branch
00000DCE 6100 0000                  		bsr.w	ReadJoypads
00000DD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DD6 6600                       		bne.s	loc_EB4
00000DD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DEA 3ABC 977F                  		move.w	#$977F,(a5)
00000DEE 3ABC C000                  		move.w	#$C000,(a5)
00000DF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DFC 6000                       		bra.s	loc_ED8
00000DFE                            ; ===========================================================================
00000DFE                            
00000DFE                            loc_EB4:				; XREF: loc_E7A
00000DFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E10 3ABC 977F                  		move.w	#$977F,(a5)
00000E14 3ABC C000                  		move.w	#$C000,(a5)
00000E18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E22                            
00000E22                            loc_ED8:				; XREF: loc_E7A
00000E22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E2C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E32 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E38                            
00000E38                            loc_EEE:
00000E38 3ABC 977F                  		move.w	#$977F,(a5)
00000E3C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E50 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E56 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E5C 3ABC 977F                  		move.w	#$977F,(a5)
00000E60 3ABC 7800                  		move.w	#$7800,(a5)
00000E64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E6E 4A38 F767                  		tst.b	($FFFFF767).w
00000E72 6700                       		beq.s	loc_F54
00000E74 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E7A                            
00000E7A                            loc_F54:
00000E7A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E82 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E88 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E8E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E94 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E9A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9E 4EB9 0000 0000             		jsr	AniArt_Load
00000EA4 4EB9 0000 0000             		jsr	HudUpdate
00000EAA 6100 0000                  		bsr.w	sub_1642
00000EAE 4E75                       		rts	
00000EB0                            ; ===========================================================================
00000EB0                            
00000EB0                            loc_F8A:				; XREF: off_B6E
00000EB0 6100 0000                  		bsr.w	sub_106E
00000EB4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            loc_F9A:				; XREF: off_B6E
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EC8 6000 0000                  		bra.w	sub_1642
00000ECC                            ; ===========================================================================
00000ECC                            
00000ECC                            loc_FA6:				; XREF: off_B6E
00000ECC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000ED4                            
00000ED4                            loc_FAE:
00000ED4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EDC 66F6                       		bne.s	loc_FAE		; if not, branch
00000EDE 6100 0000                  		bsr.w	ReadJoypads
00000EE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F18 3ABC 977F                  		move.w	#$977F,(a5)
00000F1C 3ABC 7800                  		move.w	#$7800,(a5)
00000F20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F36 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F56 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F5C                            
00000F5C                            loc_1060:
00000F5C 4A78 F614                  		tst.w	($FFFFF614).w
00000F60 6700 0000                  		beq.w	locret_106C
00000F64 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F68                            
00000F68                            locret_106C:
00000F68 4E75                       		rts	
00000F6A                            
00000F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F6A                            
00000F6A                            
00000F6A                            sub_106E:				; XREF: loc_C32; et al
00000F6A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F72                            
00000F72                            loc_1076:
00000F72 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F7A 66F6                       		bne.s	loc_1076	; if not, branch
00000F7C 6100 0000                  		bsr.w	ReadJoypads
00000F80 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F84 6600                       		bne.s	loc_10B0
00000F86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F92 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F98 3ABC 977F                  		move.w	#$977F,(a5)
00000F9C 3ABC C000                  		move.w	#$C000,(a5)
00000FA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FAA 6000                       		bra.s	loc_10D4
00000FAC                            ; ===========================================================================
00000FAC                            
00000FAC                            loc_10B0:				; XREF: sub_106E
00000FAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FB8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FBE 3ABC 977F                  		move.w	#$977F,(a5)
00000FC2 3ABC C000                  		move.w	#$C000,(a5)
00000FC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD0                            
00000FD0                            loc_10D4:				; XREF: sub_106E
00000FD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE2 3ABC 977F                  		move.w	#$977F,(a5)
00000FE6 3ABC 7800                  		move.w	#$7800,(a5)
00000FEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001000 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001006 3ABC 977F                  		move.w	#$977F,(a5)
0000100A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000100E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001014 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001018 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001020 4E75                       		rts	
00001022                            ; End of function sub_106E
00001022                            
00001022                            ; ---------------------------------------------------------------------------
00001022                            ; Subroutine to	move Palettes from the RAM to CRAM
00001022                            ; ---------------------------------------------------------------------------
00001022                            
00001022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001022                            
00001022                            
00001022                            H_Int:
00001022 46FC 2700                  		move	#$2700,sr
00001026 4A78 F644                  		tst.w	($FFFFF644).w
0000102A 6700                       		beq.s	locret_119C
0000102C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001032 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001036 43F9 00C0 0000             		lea	($C00000).l,a1
0000103C 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	Palette from RAM
00001040 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001048 2298                       		move.l	(a0)+,(a1)	; move Palette to CRAM
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 2298                       		move.l	(a0)+,(a1)
0000104E 2298                       		move.l	(a0)+,(a1)
00001050 2298                       		move.l	(a0)+,(a1)
00001052 2298                       		move.l	(a0)+,(a1)
00001054 2298                       		move.l	(a0)+,(a1)
00001056 2298                       		move.l	(a0)+,(a1)
00001058 2298                       		move.l	(a0)+,(a1)
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000108E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001092 4A38 F64F                  		tst.b	($FFFFF64F).w
00001096 6600                       		bne.s	loc_119E
00001098                            
00001098                            locret_119C:
00001098 4E73                       		rte	
0000109A                            ; ===========================================================================
0000109A                            
0000109A                            loc_119E:				; XREF: H_Int
0000109A 4238 F64F                  		clr.b	($FFFFF64F).w
0000109E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010A2 6100 FC54                  		bsr.w	Demo_Time
000010A6 4EB9 0000 0000             		jsr	sub_71B4C
000010AC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010B0 4E73                       		rte	
000010B2                            ; End of function H_Int
000010B2                            
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            ; Subroutine to	initialise joypads
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            
000010B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010B2                            
000010B2                            
000010B2                            JoypadInit:				; XREF: GameClrRAM
000010B2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010BA                            
000010BA                            Joypad_WaitZ80:
000010BA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010C2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010C4 7040                       		moveq	#$40,d0
000010C6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010CC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010D2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000010D8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000010E0 4E75                       		rts	
000010E2                            ; End of function JoypadInit
000010E2                            
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            ; Subroutine to	read joypad input, and send it to the RAM
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            ReadJoypads:
000010E2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000010E6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010EC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000010EE 5449                       		addq.w	#2,a1		; do the second	joypad
000010F0                            
000010F0                            Joypad_Read:
000010F0 12BC 0000                  		move.b	#0,(a1)
000010F4 4E71                       		nop	
000010F6 4E71                       		nop	
000010F8 1011                       		move.b	(a1),d0
000010FA E508                       		lsl.b	#2,d0
000010FC 0200 00C0                  		andi.b	#$C0,d0
00001100 12BC 0040                  		move.b	#$40,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1211                       		move.b	(a1),d1
0000110A 0201 003F                  		andi.b	#$3F,d1
0000110E 8001                       		or.b	d1,d0
00001110 4600                       		not.b	d0
00001112 1210                       		move.b	(a0),d1
00001114 B101                       		eor.b	d0,d1
00001116 10C0                       		move.b	d0,(a0)+
00001118 C200                       		and.b	d0,d1
0000111A 10C1                       		move.b	d1,(a0)+
0000111C 4E75                       		rts	
0000111E                            ; End of function ReadJoypads
0000111E                            
0000111E                            
0000111E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000111E                            
0000111E                            
0000111E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000111E 41F9 00C0 0004             		lea	($C00004).l,a0
00001124 43F9 00C0 0000             		lea	($C00000).l,a1
0000112A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001130 7E12                       		moveq	#$12,d7
00001132                            
00001132                            VDP_Loop:
00001132 309A                       		move.w	(a2)+,(a0)
00001134 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001138                            
00001138 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000113E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001142 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001148 7000                       		moveq	#0,d0
0000114A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001154 3E3C 003F                  		move.w	#$3F,d7
00001158                            
00001158                            VDP_ClrCRAM:
00001158 3280                       		move.w	d0,(a1)
0000115A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000115E                            
0000115E 42B8 F616                  		clr.l	($FFFFF616).w
00001162 42B8 F61A                  		clr.l	($FFFFF61A).w
00001166 2F01                       		move.l	d1,-(sp)
00001168 4BF9 00C0 0004             		lea	($C00004).l,a5
0000116E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001172 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001178 3ABC 9780                  		move.w	#$9780,(a5)
0000117C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001182 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000118A                            
0000118A                            loc_128E:
0000118A 3215                       		move.w	(a5),d1
0000118C 0801 0001                  		btst	#1,d1
00001190 66F8                       		bne.s	loc_128E
00001192                            
00001192 3ABC 8F02                  		move.w	#$8F02,(a5)
00001196 221F                       		move.l	(sp)+,d1
00001198 4E75                       		rts	
0000119A                            ; End of function VDPSetupGame
0000119A                            
0000119A                            ; ===========================================================================
0000119A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011A2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011AA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011B2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011BA 9001 9100 9200             		dc.w $9001, $9100, $9200
000011C0                            
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            ; Subroutine to	clear the screen
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            
000011C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C0                            
000011C0                            
000011C0                            ClearScreen:
000011C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011C6 3ABC 8F01                  		move.w	#$8F01,(a5)
000011CA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011D0 3ABC 9780                  		move.w	#$9780,(a5)
000011D4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000011DA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011E2                            
000011E2                            loc_12E6:
000011E2 3215                       		move.w	(a5),d1
000011E4 0801 0001                  		btst	#1,d1
000011E8 66F8                       		bne.s	loc_12E6
000011EA                            
000011EA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F4 3ABC 8F01                  		move.w	#$8F01,(a5)
000011F8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011FE 3ABC 9780                  		move.w	#$9780,(a5)
00001202 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001208 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001210                            
00001210                            loc_1314:
00001210 3215                       		move.w	(a5),d1
00001212 0801 0001                  		btst	#1,d1
00001216 66F8                       		bne.s	loc_1314
00001218                            
00001218 3ABC 8F02                  		move.w	#$8F02,(a5)
0000121C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001224 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000122C 43F8 F800                  		lea	($FFFFF800).w,a1
00001230 7000                       		moveq	#0,d0
00001232 323C 00A0                  		move.w	#$A0,d1
00001236                            
00001236                            loc_133A:
00001236 22C0                       		move.l	d0,(a1)+
00001238 51C9 FFFC                  		dbf	d1,loc_133A
0000123C                            
0000123C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001240 7000                       		moveq	#0,d0
00001242 323C 0100                  		move.w	#$100,d1
00001246                            
00001246                            loc_134A:
00001246 22C0                       		move.l	d0,(a1)+
00001248 51C9 FFFC                  		dbf	d1,loc_134A
0000124C 4E75                       		rts	
0000124E                            ; End of function ClearScreen
0000124E                            
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	load the sound driver
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            InitMegaPCM:			; XREF: GameClrRAM; TitleScreen
0000124E 4E71                       		nop
00001250 303C 0100                  		move.w	#$100,d0
00001254 33C0 00A1 1100             		move.w	d0,($A11100).l
0000125A 33C0 00A1 1200             		move.w	d0,($A11200).l
00001260 41F9 0000 0000             		lea	(MegaPCM).l,a0
00001266 43F9 00A0 0000             		lea	($A00000).l,a1
0000126C 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
00001270                            
00001270 12D8                       	@Load:	move.b	(a0)+,(a1)+
00001272 51C9 FFFC                  		dbf	d1,@Load
00001276 7200                       		moveq	#0,d1
00001278 33C1 00A1 1200             		move.w	d1,($A11200).l
0000127E 4E71                       		nop
00001280 4E71                       		nop
00001282 4E71                       		nop
00001284 4E71                       		nop
00001286 33C0 00A1 1200             		move.w	d0,($A11200).l
0000128C 33C1 00A1 1100             		move.w	d1,($A11100).l
00001292 4E75                       		rts
00001294                            ; End of function InitMegaPCM
00001294                            
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; Subroutine to	play a DAC sample
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; To use this: 
00001294                            ;		moveq	#$FFFFFFXX,d0
00001294                            ;		jsr	PlaySample
00001294                            ; XX = Sample Number
00001294                            ; ---------------------------------------------------------------------------
00001294                            
00001294                            PlaySample:
00001294 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
0000129C 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000012A4 66F6                       	bne.s	@0
000012A6 13C0 00A0 1FFF             	move.b	d0,$A01FFF
000012AC 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000012B4 4E75                       	rts
000012B6                            ; ===========================================================================
000012B6                            
000012B6                            PlayMusic:
000012B6 0C00 0088                  		cmpi.b	#$88,d0
000012BA 6700                       		beq.s	PlaySound
000012BC 0C00 00A0                  		cmpi.b	#$A0,d0
000012C0 6C00                       		bge.s	PlaySound
000012C2 11C0 FFFC                  		move.b	d0,($FFFFFFFC).w
000012C6                            ; ===========================================================================
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            ; Subroutine to	play a sound or	music track
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            
000012C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C6                            
000012C6                            
000012C6                            PlaySound:
000012C6 6100                       		bsr.s	Snd_ChkStop
000012C8 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012CC 4E75                       		rts	
000012CE                            ; End of function PlaySound
000012CE                            
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            ; Subroutine to	play a special sound/music (E0-E4)
000012CE                            ;
000012CE                            ; E0 - Fade out
000012CE                            ; E1 - Sega
000012CE                            ; E2 - Speed up
000012CE                            ; E3 - Normal speed
000012CE                            ; E4 - Stop
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            
000012CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CE                            
000012CE                            
000012CE                            PlaySound_Special:
000012CE 6100                       		bsr.s	Snd_ChkStop
000012D0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012D4 4E75                       		rts	
000012D6                            ; End of function PlaySound_Special
000012D6                            ; ===========================================================================
000012D6                            
000012D6                            Snd_ChkStop:
000012D6 0C00 00E0                  		cmpi.b	#$E0,d0
000012DA 6700                       		beq.s	@clr
000012DC 0C00 00E4                  		cmpi.b	#$E4,d0
000012E0 6700                       		beq.s	@clr
000012E2 4E75                       		rts
000012E4                            		
000012E4                            @clr:
000012E4 11FC 0000 FFFC             		move.b	#0,($FFFFFFFC).w
000012EA 4E75                       		rts
000012EC                            ; ===========================================================================
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            ; Unused sound/music subroutine
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            
000012EC                            PlaySound_Unk:
000012EC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000012F0 4E75                       		rts	
000012F2                            
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            ; Subroutine to	pause the game
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            
000012F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012F2                            
000012F2                            
000012F2                            PauseGame:				; XREF: Level_MainLoop; et al
000012F2 4E71                       		nop	
000012F4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012F8 6700                       		beq.s	Unpause		; if not, branch
000012FA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012FE 6600                       		bne.s	loc_13BE	; if yes, branch
00001300 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001306 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001308                            
00001308                            loc_13BE:
00001308 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000130E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001314                            
00001314                            loc_13CA:
00001314 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000131A 6100 0000                  		bsr.w	DelayProgram
0000131E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001322 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001324 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000132A 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000132C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001332 4E71                       		nop	
00001334 6000                       		bra.s	loc_1404
00001336                            ; ===========================================================================
00001336                            
00001336                            Pause_ChkBC:				; XREF: PauseGame
00001336 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000133C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000133E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001344 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001346                            
00001346                            Pause_ChkStart:				; XREF: PauseGame
00001346 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000134C 67C6                       		beq.s	loc_13CA	; if not, branch
0000134E                            
0000134E                            loc_1404:				; XREF: PauseGame
0000134E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001354                            
00001354                            Unpause:				; XREF: PauseGame
00001354 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000135A                            
0000135A                            Pause_DoNothing:			; XREF: PauseGame
0000135A 4E75                       		rts	
0000135C                            ; ===========================================================================
0000135C                            
0000135C                            Pause_SlowMo:				; XREF: PauseGame
0000135C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001362 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001368 4E75                       		rts	
0000136A                            ; End of function PauseGame
0000136A                            
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            ; Subroutine to	display	patterns via the VDP
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            
0000136A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136A                            
0000136A                            
0000136A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000136A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001370 283C 0080 0000             		move.l	#$800000,d4
00001376                            
00001376                            loc_142C:
00001376 2D40 0004                  		move.l	d0,4(a6)
0000137A 3601                       		move.w	d1,d3
0000137C                            
0000137C                            loc_1432:
0000137C 3C99                       		move.w	(a1)+,(a6)
0000137E 51CB FFFC                  		dbf	d3,loc_1432
00001382 D084                       		add.l	d4,d0
00001384 51CA FFF0                  		dbf	d2,loc_142C
00001388 4E75                       		rts	
0000138A                            ; End of function ShowVDPGraphics
0000138A                            
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000138A                            ; to be issued the next time ProcessDMAQueue is called.
0000138A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000138A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000138A                            ; registers in which it expects data in:
0000138A                            ; d1.l: Address to data (In 68k address space)
0000138A                            ; d2.w: Destination in VRAM
0000138A                            ; d3.w: Length of data
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000138A                             
0000138A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000138A                            
0000138A                            ; VDP addressses
0000138A =00C00000                  vdp_data_port:		equ $C00000
0000138A =00C00004                  vdp_control_port:	equ $C00004
0000138A =00C00008                  vdp_counter:		equ $C00008
0000138A                            ; Buffer Size Natsumi Credits
0000138A                            ;DMA_Buffer_Start	equ $FFFFA512-2	; the start address of DMA buffer for uncompressed art
0000138A                            ;DMA_Buffer_End		equ $FFFFA912-4	; the end address of DMA buffer for uncompressed art
0000138A                            ; Buffer Size S1 Default
0000138A =FFFFC800                  DMA_Buffer_Start	equ $FFFFC800	; the start address of DMA buffer for uncompressed art
0000138A =FFFFC8FC                  DMA_Buffer_End		equ $FFFFC8FC	; the end address of DMA buffer for uncompressed art
0000138A                            
0000138A                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000138A                            ProcessDMAQueue:
0000138A 4BF9 00C0 0004             		lea	VDP_Control_Port,a5
00001390 43F8 C800                  		lea	DMA_Buffer_Start.w,a1
00001394                            ; loc_14B6:
00001394                            ProcessDMAQueue_Loop:
00001394 3019                       		move.w	(a1)+,d0
00001396 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001398                            		; issue a set of VDP commands...
00001398 3A80                       		move.w	d0,(a5)		; transfer length
0000139A 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000139C 3A99                       		move.w	(a1)+,(a5)	; source address
0000139E 3A99                       		move.w	(a1)+,(a5)	; source address
000013A0 3A99                       		move.w	(a1)+,(a5)	; source address
000013A2 3A99                       		move.w	(a1)+,(a5)	; destination
000013A4 3A99                       		move.w	(a1)+,(a5)	; destination
000013A6 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013AA 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013AC                            ; loc_14CE:
000013AC                            ProcessDMAQueue_Done:
000013AC 31FC 0000 C800             		move.w	#0,DMA_Buffer_Start.w
000013B2 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End.w
000013BA 4E75                       		rts
000013BC                            		
000013BC                            QueueDMATransfer:
000013BC 2278 C8FC                  		movea.l	DMA_Buffer_End.w,a1
000013C0 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013C4 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013C6                             
000013C6                            		; piece together some VDP commands and store them for later...
000013C6 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000013CA 1003                       		move.b	d3,d0
000013CC 32C0                       		move.w	d0,(a1)+ ; store command
000013CE                             
000013CE 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000013D2 E04B                       		lsr.w	#8,d3
000013D4 1003                       		move.b	d3,d0
000013D6 32C0                       		move.w	d0,(a1)+ ; store command
000013D8                             
000013D8 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
000013DC E289                       		lsr.l	#1,d1
000013DE 1001                       		move.b	d1,d0
000013E0 32C0                       		move.w	d0,(a1)+ ; store command
000013E2                             
000013E2 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
000013E6 E089                       		lsr.l	#8,d1
000013E8 1001                       		move.b	d1,d0
000013EA 32C0                       		move.w	d0,(a1)+ ; store command
000013EC                             
000013EC 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $01FE0000
000013F0 E089                       		lsr.l	#8,d1
000013F2 1001                       		move.b	d1,d0
000013F4 32C0                       		move.w	d0,(a1)+ ; store command
000013F6                             
000013F6 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013FC E58A                       		lsl.l	#2,d2
000013FE E44A                       		lsr.w	#2,d2
00001400 4842                       		swap	d2
00001402 0082 4000 0080             		or.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001408 22C2                       		move.l	d2,(a1)+ ; store command
0000140A                             
0000140A 21C9 C8FC                  		move.l	a1,DMA_Buffer_End.w ; set the next free slot address
0000140E B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
00001412 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001414 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001418                            ; return_14AA:
00001418                            QueueDMATransfer_Done:
00001418 4E75                       		rts
0000141A                            		
0000141A                            
0000141A 4278 C800                  		clr.w	DMA_Buffer_Start			; clear start of the DMA queue
0000141E 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End	; reset address pointer of DMA queue
00001426                            ; End of function ProcessDMAQueue
00001426                            
00001426                            ; ===============================================================
00001426                            ; ---------------------------------------------------------------
00001426                            ; COMPER Decompressor
00001426                            ; ---------------------------------------------------------------
00001426                            ; INPUT:
00001426                            ;       a0      - Source Offset
00001426                            ;       a1      - Destination Offset
00001426                            ; ---------------------------------------------------------------
00001426                             
00001426                            CompDec
00001426                             
00001426                            @newblock
00001426 3018                               move.w  (a0)+,d0                ; fetch description field
00001428 760F                               moveq   #15,d3                  ; set bits counter to 16
0000142A                             
0000142A                            @mainloop
0000142A D040                               add.w   d0,d0                   ; roll description field
0000142C 6500                               bcs.s   @flag                   ; if a flag issued, branch
0000142E 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
00001430 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001434 60F0                               bra.s   @newblock               ; start a new block
00001436                             
00001436                            ; ---------------------------------------------------------------
00001436 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001438 1218                               move.b  (a0)+,d1                ; load displacement
0000143A D241                               add.w   d1,d1
0000143C 7400                               moveq   #0,d2                   ; init copy count
0000143E 1418                               move.b  (a0)+,d2                ; load copy length
00001440 6700                               beq.s   @end                    ; if zero, branch
00001442 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001446                             
00001446 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001448 51CA FFFC                          dbf     d2,@loop                ; repeat
0000144C 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001450 60D4                               bra.s   @newblock               ; start a new block
00001452                             
00001452 4E75                       @end    rts
00001454                            
00001454                            ; ==============================================================================
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Nemesis decompression routine
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Optimized by vladikcomper
00001454                            ; ------------------------------------------------------------------------------
00001454                             
00001454                            NemDec_RAM:
00001454 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001458 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
0000145C 6000                               bra.s   NemDec_Main
0000145E                             
0000145E                            ; ------------------------------------------------------------------------------
0000145E                            NemDec:
0000145E 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001462 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
00001468 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
0000146C                             
0000146C                            NemDec_Main:
0000146C 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
00001470 3418                               move.w  (a0)+,d2                ; get number of patterns
00001472 6A00                               bpl.s   @0                      ; are we in Mode 0?
00001474 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
00001478 E74A                       @0      lsl.w   #3,d2
0000147A 3A42                               movea.w d2,a5
0000147C 7607                               moveq   #7,d3
0000147E 7400                               moveq   #0,d2
00001480 7800                               moveq   #0,d4
00001482 6100 0000                          bsr.w   NemDec4
00001486 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
00001488 E145                               asl.w   #8,d5                   ; shift up by a byte
0000148A 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
0000148C 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
00001490 6100                               bsr.s   NemDec2
00001492 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
00001496 4E75                               rts
00001498                             
00001498                            ; ---------------------------------------------------------------------------
00001498                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001498                            ; ---------------------------------------------------------------------------
00001498                             
00001498                            NemDec2:
00001498 3E06                               move.w  d6,d7
0000149A 5147                               subq.w  #8,d7                   ; get shift value
0000149C 3205                               move.w  d5,d1
0000149E EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000014A0 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000014A4 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000014A6 0241 00FF                          andi.w  #$FF,d1
000014AA D241                               add.w   d1,d1
000014AC 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000014B0 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000014B4 6400                               bcc.s   @0                      ; if not, branch
000014B6 5046                               addq.w  #8,d6
000014B8 E145                               asl.w   #8,d5
000014BA 1A18                               move.b  (a0)+,d5                ; read next byte
000014BC 1231 1001                  @0      move.b  1(a1,d1.w),d1
000014C0 3001                               move.w  d1,d0
000014C2 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014C6 0240 00F0                          andi.w  #$F0,d0
000014CA                             
000014CA                            NemDec_GetRepeatCount:
000014CA E848                               lsr.w   #4,d0                   ; get repeat count
000014CC                             
000014CC                            NemDec_WritePixel:
000014CC E98C                               lsl.l   #4,d4                   ; shift up by a nybble
000014CE 8801                               or.b    d1,d4                   ; write pixel
000014D0 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
000014D4 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
000014D6                            ; ---------------------------------------------------------------------------
000014D6                             
000014D6                            NemDec3:
000014D6 7800                               moveq   #0,d4                   ; reset row
000014D8 7607                               moveq   #7,d3                   ; reset nybble counter
000014DA                             
000014DA                            NemDec_WritePixelLoop:
000014DA 51C8 FFF0                          dbf     d0,NemDec_WritePixel
000014DE 60B8                               bra.s   NemDec2
000014E0                            ; ---------------------------------------------------------------------------
000014E0                             
000014E0                            NemDec_InlineData:
000014E0 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
000014E2 0C46 0009                          cmpi.w  #9,d6
000014E6 6400                               bcc.s   @0
000014E8 5046                               addq.w  #8,d6
000014EA E145                               asl.w   #8,d5
000014EC 1A18                               move.b  (a0)+,d5
000014EE 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
000014F0 3205                               move.w  d5,d1
000014F2 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
000014F4 3001                               move.w  d1,d0
000014F6 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014FA 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
000014FE 0C46 0009                          cmpi.w  #9,d6
00001502 64C6                               bcc.s   NemDec_GetRepeatCount
00001504 5046                               addq.w  #8,d6
00001506 E145                               asl.w   #8,d5
00001508 1A18                               move.b  (a0)+,d5
0000150A 60BE                               bra.s   NemDec_GetRepeatCount
0000150C                             
0000150C                            ; ---------------------------------------------------------------------------
0000150C                            ; Subroutines to output decompressed entry
0000150C                            ; Selected depending on current decompression mode
0000150C                            ; ---------------------------------------------------------------------------
0000150C                             
0000150C                            NemDec_WriteRowToVDP:
0000150C                            loc_1502:
0000150C 2884                               move.l  d4,(a4)                 ; write 8-pixel row
0000150E 534D                               subq.w  #1,a5
00001510 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001512 66C2                               bne.s   NemDec3                 ; if not, branch
00001514 4E75                               rts
00001516                            ; ---------------------------------------------------------------------------
00001516                             
00001516                            NemDec_WriteRowToVDP_XOR:
00001516 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001518 2882                               move.l  d2,(a4)                 ; and write the result
0000151A 534D                               subq.w  #1,a5
0000151C 380D                               move.w  a5,d4
0000151E 66B6                               bne.s   NemDec3
00001520 4E75                               rts
00001522                            ; ---------------------------------------------------------------------------
00001522                             
00001522                            NemDec_WriteRowToRAM:
00001522 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
00001524 534D                               subq.w  #1,a5
00001526 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001528 66AC                               bne.s   NemDec3                 ; if not, branch
0000152A 4E75                               rts
0000152C                            ; ---------------------------------------------------------------------------
0000152C                             
0000152C                            NemDec_WriteRowToRAM_XOR:
0000152C B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
0000152E 28C2                               move.l  d2,(a4)+                ; and write the result
00001530 534D                               subq.w  #1,a5
00001532 380D                               move.w  a5,d4
00001534 66A0                               bne.s   NemDec3
00001536 4E75                               rts
00001538                             
00001538                            ; ---------------------------------------------------------------------------
00001538                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001538                            ; ---------------------------------------------------------------------------
00001538                             
00001538                            NemDec4:
00001538 1018                               move.b  (a0)+,d0                ; read first byte
0000153A                             
0000153A                            @ChkEnd:
0000153A 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
0000153E 6600                               bne.s   @NewPalIndex            ; if not, branch
00001540 4E75                               rts
00001542                            ; ---------------------------------------------------------------------------
00001542                             
00001542                            @NewPalIndex:
00001542 3E00                               move.w  d0,d7
00001544                             
00001544                            @ItemLoop:
00001544 1018                               move.b  (a0)+,d0                ; read next byte
00001546 6BF2                               bmi.s   @ChkEnd                 ; ~~
00001548 1200                               move.b  d0,d1
0000154A 0247 000F                          andi.w  #$F,d7                  ; get palette index
0000154E 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
00001552 8E41                               or.w    d1,d7                   ; combine the two
00001554 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00001558 1200                               move.b  d0,d1
0000155A E149                               lsl.w   #8,d1
0000155C 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
0000155E 7208                               moveq   #8,d1
00001560 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
00001562 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
00001564 1018                               move.b  (a0)+,d0                ; get code
00001566 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
00001568 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
0000156C 60D6                               bra.s   @ItemLoop               ; repeat
0000156E                            ; ---------------------------------------------------------------------------
0000156E                             
0000156E                            @ItemShortCode:
0000156E 1018                               move.b  (a0)+,d0                ; get code
00001570 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
00001572 D040                               add.w   d0,d0                   ; get index into code table
00001574 7A01                               moveq   #1,d5
00001576 E36D                               lsl.w   d1,d5
00001578 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
0000157A 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
0000157E                             
0000157E                            @ItemShortCodeLoop:
0000157E 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
00001580 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001584 60BE                               bra.s   @ItemLoop
00001586                            
00001586                            ; ---------------------------------------------------------------------------
00001586                            ; Subroutine to	load pattern load cues
00001586                            ; ---------------------------------------------------------------------------
00001586                            
00001586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001586                            
00001586                            
00001586                            LoadPLC:
00001586 48E7 0060                  		movem.l	a1-a2,-(sp)
0000158A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001590 D040                       		add.w	d0,d0
00001592 3031 0000                  		move.w	(a1,d0.w),d0
00001596 43F1 0000                  		lea	(a1,d0.w),a1
0000159A 45F8 F680                  		lea	($FFFFF680).w,a2
0000159E                            
0000159E                            loc_1598:
0000159E 4A92                       		tst.l	(a2)
000015A0 6700                       		beq.s	loc_15A0
000015A2 5C4A                       		addq.w	#6,a2
000015A4 60F8                       		bra.s	loc_1598
000015A6                            ; ===========================================================================
000015A6                            
000015A6                            loc_15A0:				; XREF: LoadPLC
000015A6 3019                       		move.w	(a1)+,d0
000015A8 6B00                       		bmi.s	loc_15AC
000015AA                            
000015AA                            loc_15A4:
000015AA 24D9                       		move.l	(a1)+,(a2)+
000015AC 34D9                       		move.w	(a1)+,(a2)+
000015AE 51C8 FFFA                  		dbf	d0,loc_15A4
000015B2                            
000015B2                            loc_15AC:
000015B2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B6 4E75                       		rts	
000015B8                            ; End of function LoadPLC
000015B8                            
000015B8                            
000015B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B8                            
000015B8                            
000015B8                            LoadPLC2:
000015B8 48E7 0060                  		movem.l	a1-a2,-(sp)
000015BC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015C2 D040                       		add.w	d0,d0
000015C4 3031 0000                  		move.w	(a1,d0.w),d0
000015C8 43F1 0000                  		lea	(a1,d0.w),a1
000015CC 6100                       		bsr.s	ClearPLC
000015CE 45F8 F680                  		lea	($FFFFF680).w,a2
000015D2 3019                       		move.w	(a1)+,d0
000015D4 6B00                       		bmi.s	loc_15D8
000015D6                            
000015D6                            loc_15D0:
000015D6 24D9                       		move.l	(a1)+,(a2)+
000015D8 34D9                       		move.w	(a1)+,(a2)+
000015DA 51C8 FFFA                  		dbf	d0,loc_15D0
000015DE                            
000015DE                            loc_15D8:
000015DE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015E2 4E75                       		rts	
000015E4                            ; End of function LoadPLC2
000015E4                            
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            ; Subroutine to	clear the pattern load cues
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            
000015E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E4                            
000015E4                            
000015E4                            ClearPLC:				; XREF: LoadPLC2
000015E4 45F8 F680                  		lea	($FFFFF680).w,a2
000015E8 701F                       		moveq	#$1F,d0
000015EA                            
000015EA                            ClearPLC_Loop:
000015EA 429A                       		clr.l	(a2)+
000015EC 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015F0 4E75                       		rts	
000015F2                            ; End of function ClearPLC
000015F2                            
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Subroutine to	use graphics listed in a pattern load cue
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            
000015F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F2                            
000015F2                            
000015F2                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015F2 4AB8 F680                  		tst.l	($FFFFF680).w
000015F6 6700                       		beq.s	locret_1640
000015F8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015FC 6600                       		bne.s	locret_1640
000015FE 2078 F680                  		movea.l	($FFFFF680).w,a0
00001602 47F9 0000 150C             		lea	(loc_1502).l,a3
00001608 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000160C 3418                       		move.w	(a0)+,d2
0000160E 6A00                       		bpl.s	loc_160E
00001610 D6FC 000A                  		adda.w	#$A,a3
00001614                            
00001614                            loc_160E:
00001614 0242 7FFF                  		andi.w	#$7FFF,d2
00001618 6100 FF1E                  		bsr.w	NemDec4
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622 7C10                       		moveq	#$10,d6
00001624 7000                       		moveq	#0,d0
00001626 21C8 F680                  		move.l	a0,($FFFFF680).w
0000162A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001632 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001636 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000163A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001642 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001646                            
00001646                            locret_1640:
00001646 4E75                       		rts	
00001648                            ; End of function RunPLC_RAM
00001648                            
00001648                            
00001648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            
00001648                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001648 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000164C 6700 0000                  		beq.w	locret_16DA
00001650 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001656 7000                       		moveq	#0,d0
00001658 3038 F684                  		move.w	($FFFFF684).w,d0
0000165C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001662 6000                       		bra.s	loc_1676
00001664                            ; End of function sub_1642
00001664                            
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            sub_165E:				; XREF: Demo_Time
00001664 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001668 6700                       		beq.s	locret_16DA
0000166A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001670 7000                       		moveq	#0,d0
00001672 3038 F684                  		move.w	($FFFFF684).w,d0
00001676 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000167C                            
0000167C                            loc_1676:				; XREF: sub_1642
0000167C 49F9 00C0 0004             		lea	($C00004).l,a4
00001682 E588                       		lsl.l	#2,d0
00001684 E448                       		lsr.w	#2,d0
00001686 0040 4000                  		ori.w	#$4000,d0
0000168A 4840                       		swap	d0
0000168C 2880                       		move.l	d0,(a4)
0000168E 594C                       		subq.w	#4,a4
00001690 2078 F680                  		movea.l	($FFFFF680).w,a0
00001694 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001698 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000169C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000016A0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016A4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016AC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016B0                            
000016B0                            loc_16AA:				; XREF: sub_165E
000016B0 3A7C 0008                  		movea.w	#8,a5
000016B4 6100 FE20                  		bsr.w	NemDec3
000016B8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016BC 6700                       		beq.s	loc_16DC
000016BE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016C2 66EC                       		bne.s	loc_16AA
000016C4 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016CC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016D0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016D4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016DC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016E0                            
000016E0                            locret_16DA:				; XREF: sub_1642
000016E0 4E75                       		rts	
000016E2                            ; ===========================================================================
000016E2                            
000016E2                            loc_16DC:				; XREF: sub_165E
000016E2 41F8 F680                  		lea	($FFFFF680).w,a0
000016E6 7015                       		moveq	#$15,d0
000016E8                            
000016E8                            loc_16E2:				; XREF: sub_165E
000016E8 20E8 0006                  		move.l	6(a0),(a0)+
000016EC 51C8 FFFA                  		dbf	d0,loc_16E2
000016F0 4E75                       		rts	
000016F2                            ; End of function sub_165E
000016F2                            
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            ; Subroutine to	execute	the pattern load cue
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            
000016F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F2                            
000016F2                            
000016F2                            RunPLC_ROM:
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1
00001702 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001704                            
00001704                            RunPLC_Loop:
00001704 2059                       		movea.l	(a1)+,a0	; get art pointer
00001706 7000                       		moveq	#0,d0
00001708 3019                       		move.w	(a1)+,d0	; get VRAM address
0000170A E588                       		lsl.l	#2,d0		; divide address by $20
0000170C E448                       		lsr.w	#2,d0
0000170E 0040 4000                  		ori.w	#$4000,d0
00001712 4840                       		swap	d0
00001714 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000171A 6100 FD42                  		bsr.w	NemDec		; decompress
0000171E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001722 4E75                       		rts	
00001724                            ; End of function RunPLC_ROM
00001724                            
00001724                            ; ---------------------------------------------------------------------------
00001724                            ; Enigma decompression algorithm
00001724                            ; ---------------------------------------------------------------------------
00001724                            
00001724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001724                            
00001724                            
00001724                            EniDec:
00001724 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001728 3640                       		movea.w	d0,a3
0000172A 1018                       		move.b	(a0)+,d0
0000172C 4880                       		ext.w	d0
0000172E 3A40                       		movea.w	d0,a5
00001730 1818                       		move.b	(a0)+,d4
00001732 E70C                       		lsl.b	#3,d4
00001734 3458                       		movea.w	(a0)+,a2
00001736 D4CB                       		adda.w	a3,a2
00001738 3858                       		movea.w	(a0)+,a4
0000173A D8CB                       		adda.w	a3,a4
0000173C 1A18                       		move.b	(a0)+,d5
0000173E E145                       		asl.w	#8,d5
00001740 1A18                       		move.b	(a0)+,d5
00001742 7C10                       		moveq	#$10,d6
00001744                            
00001744                            loc_173E:				; XREF: loc_1768
00001744 7007                       		moveq	#7,d0
00001746 3E06                       		move.w	d6,d7
00001748 9E40                       		sub.w	d0,d7
0000174A 3205                       		move.w	d5,d1
0000174C EE69                       		lsr.w	d7,d1
0000174E 0241 007F                  		andi.w	#$7F,d1
00001752 3401                       		move.w	d1,d2
00001754 0C41 0040                  		cmpi.w	#$40,d1
00001758 6400                       		bcc.s	loc_1758
0000175A 7006                       		moveq	#6,d0
0000175C E24A                       		lsr.w	#1,d2
0000175E                            
0000175E                            loc_1758:
0000175E 6100 0000                  		bsr.w	sub_188C
00001762 0242 000F                  		andi.w	#$F,d2
00001766 E849                       		lsr.w	#4,d1
00001768 D241                       		add.w	d1,d1
0000176A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000176E                            ; End of function EniDec
0000176E                            
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1768:				; XREF: loc_17B4
0000176E 32CA                       		move.w	a2,(a1)+
00001770 524A                       		addq.w	#1,a2
00001772 51CA FFFA                  		dbf	d2,loc_1768
00001776 60CC                       		bra.s	loc_173E
00001778                            ; ===========================================================================
00001778                            
00001778                            loc_1772:				; XREF: loc_17B4
00001778 32CC                       		move.w	a4,(a1)+
0000177A 51CA FFFC                  		dbf	d2,loc_1772
0000177E 60C4                       		bra.s	loc_173E
00001780                            ; ===========================================================================
00001780                            
00001780                            loc_177A:				; XREF: loc_17B4
00001780 6100 0000                  		bsr.w	loc_17DC
00001784                            
00001784                            loc_177E:
00001784 32C1                       		move.w	d1,(a1)+
00001786 51CA FFFC                  		dbf	d2,loc_177E
0000178A 60B8                       		bra.s	loc_173E
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1786:				; XREF: loc_17B4
0000178C 6100 0000                  		bsr.w	loc_17DC
00001790                            
00001790                            loc_178A:
00001790 32C1                       		move.w	d1,(a1)+
00001792 5241                       		addq.w	#1,d1
00001794 51CA FFFA                  		dbf	d2,loc_178A
00001798 60AA                       		bra.s	loc_173E
0000179A                            ; ===========================================================================
0000179A                            
0000179A                            loc_1794:				; XREF: loc_17B4
0000179A 6100 0000                  		bsr.w	loc_17DC
0000179E                            
0000179E                            loc_1798:
0000179E 32C1                       		move.w	d1,(a1)+
000017A0 5341                       		subq.w	#1,d1
000017A2 51CA FFFA                  		dbf	d2,loc_1798
000017A6 609C                       		bra.s	loc_173E
000017A8                            ; ===========================================================================
000017A8                            
000017A8                            loc_17A2:				; XREF: loc_17B4
000017A8 0C42 000F                  		cmpi.w	#$F,d2
000017AC 6700                       		beq.s	loc_17C4
000017AE                            
000017AE                            loc_17A8:
000017AE 6100 0000                  		bsr.w	loc_17DC
000017B2 32C1                       		move.w	d1,(a1)+
000017B4 51CA FFF8                  		dbf	d2,loc_17A8
000017B8 608A                       		bra.s	loc_173E
000017BA                            ; ===========================================================================
000017BA                            
000017BA                            loc_17B4:				; XREF: EniDec
000017BA 60B2                       		bra.s	loc_1768
000017BC                            ; ===========================================================================
000017BC 60B0                       		bra.s	loc_1768
000017BE                            ; ===========================================================================
000017BE 60B8                       		bra.s	loc_1772
000017C0                            ; ===========================================================================
000017C0 60B6                       		bra.s	loc_1772
000017C2                            ; ===========================================================================
000017C2 60BC                       		bra.s	loc_177A
000017C4                            ; ===========================================================================
000017C4 60C6                       		bra.s	loc_1786
000017C6                            ; ===========================================================================
000017C6 60D2                       		bra.s	loc_1794
000017C8                            ; ===========================================================================
000017C8 60DE                       		bra.s	loc_17A2
000017CA                            ; ===========================================================================
000017CA                            
000017CA                            loc_17C4:				; XREF: loc_17A2
000017CA 5348                       		subq.w	#1,a0
000017CC 0C46 0010                  		cmpi.w	#$10,d6
000017D0 6600                       		bne.s	loc_17CE
000017D2 5348                       		subq.w	#1,a0
000017D4                            
000017D4                            loc_17CE:
000017D4 3008                       		move.w	a0,d0
000017D6 E248                       		lsr.w	#1,d0
000017D8 6400                       		bcc.s	loc_17D6
000017DA 5248                       		addq.w	#1,a0
000017DC                            
000017DC                            loc_17D6:
000017DC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017E0 4E75                       		rts	
000017E2                            ; ===========================================================================
000017E2                            
000017E2                            loc_17DC:				; XREF: loc_17A2
000017E2 360B                       		move.w	a3,d3
000017E4 1204                       		move.b	d4,d1
000017E6 D201                       		add.b	d1,d1
000017E8 6400                       		bcc.s	loc_17EE
000017EA 5346                       		subq.w	#1,d6
000017EC 0D05                       		btst	d6,d5
000017EE 6700                       		beq.s	loc_17EE
000017F0 0043 8000                  		ori.w	#-$8000,d3
000017F4                            
000017F4                            loc_17EE:
000017F4 D201                       		add.b	d1,d1
000017F6 6400                       		bcc.s	loc_17FC
000017F8 5346                       		subq.w	#1,d6
000017FA 0D05                       		btst	d6,d5
000017FC 6700                       		beq.s	loc_17FC
000017FE 0643 4000                  		addi.w	#$4000,d3
00001802                            
00001802                            loc_17FC:
00001802 D201                       		add.b	d1,d1
00001804 6400                       		bcc.s	loc_180A
00001806 5346                       		subq.w	#1,d6
00001808 0D05                       		btst	d6,d5
0000180A 6700                       		beq.s	loc_180A
0000180C 0643 2000                  		addi.w	#$2000,d3
00001810                            
00001810                            loc_180A:
00001810 D201                       		add.b	d1,d1
00001812 6400                       		bcc.s	loc_1818
00001814 5346                       		subq.w	#1,d6
00001816 0D05                       		btst	d6,d5
00001818 6700                       		beq.s	loc_1818
0000181A 0043 1000                  		ori.w	#$1000,d3
0000181E                            
0000181E                            loc_1818:
0000181E D201                       		add.b	d1,d1
00001820 6400                       		bcc.s	loc_1826
00001822 5346                       		subq.w	#1,d6
00001824 0D05                       		btst	d6,d5
00001826 6700                       		beq.s	loc_1826
00001828 0043 0800                  		ori.w	#$800,d3
0000182C                            
0000182C                            loc_1826:
0000182C 3205                       		move.w	d5,d1
0000182E 3E06                       		move.w	d6,d7
00001830 9E4D                       		sub.w	a5,d7
00001832 6400                       		bcc.s	loc_1856
00001834 3C07                       		move.w	d7,d6
00001836 0646 0010                  		addi.w	#$10,d6
0000183A 4447                       		neg.w	d7
0000183C EF69                       		lsl.w	d7,d1
0000183E 1A10                       		move.b	(a0),d5
00001840 EF3D                       		rol.b	d7,d5
00001842 DE47                       		add.w	d7,d7
00001844 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001848 D245                       		add.w	d5,d1
0000184A                            
0000184A                            loc_1844:				; XREF: loc_1868
0000184A 300D                       		move.w	a5,d0
0000184C D040                       		add.w	d0,d0
0000184E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001852 D243                       		add.w	d3,d1
00001854 1A18                       		move.b	(a0)+,d5
00001856 E14D                       		lsl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5
0000185A 4E75                       		rts	
0000185C                            ; ===========================================================================
0000185C                            
0000185C                            loc_1856:				; XREF: loc_1826
0000185C 6700                       		beq.s	loc_1868
0000185E EE69                       		lsr.w	d7,d1
00001860 300D                       		move.w	a5,d0
00001862 D040                       		add.w	d0,d0
00001864 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001868 D243                       		add.w	d3,d1
0000186A 300D                       		move.w	a5,d0
0000186C 6000                       		bra.s	sub_188C
0000186E                            ; ===========================================================================
0000186E                            
0000186E                            loc_1868:				; XREF: loc_1856
0000186E 7C10                       		moveq	#$10,d6
00001870                            
00001870                            loc_186A:
00001870 60D8                       		bra.s	loc_1844
00001872                            ; ===========================================================================
00001872 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001888 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001892                            
00001892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001892                            
00001892                            
00001892                            sub_188C:				; XREF: EniDec
00001892 9C40                       		sub.w	d0,d6
00001894 0C46 0009                  		cmpi.w	#9,d6
00001898 6400                       		bcc.s	locret_189A
0000189A 5046                       		addq.w	#8,d6
0000189C E145                       		asl.w	#8,d5
0000189E 1A18                       		move.b	(a0)+,d5
000018A0                            
000018A0                            locret_189A:
000018A0 4E75                       		rts	
000018A2                            ; End of function sub_188C
000018A2                            
000018A2                            ; ===========================================================================
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            ; Kosinski decompression routine
000018A2                            ;
000018A2                            ; Created by vladikcomper
000018A2                            ; Special thanks to flamewing and MarkeyJester
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            _Kos_RunBitStream macro
000018A2                                    dbf     d2,@skip\@
000018A2                                    moveq   #7,d2
000018A2                                    move.b  d1,d0
000018A2                                    swap    d3
000018A2                                    bpl.s   @skip\@
000018A2                                    move.b  (a0)+,d0                        ; get desc. bitfield
000018A2                                    move.b  (a0)+,d1                        ;
000018A2                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018A2                                    move.b  (a4,d1.w),d1                    ;
000018A2                            @skip\@
000018A2                                    endm
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            KosDec:
000018A2 7E07                               moveq   #7,d7
000018A4 7000                               moveq   #0,d0
000018A6 7200                               moveq   #0,d1
000018A8 49FA 0000                          lea     KosDec_ByteMap(pc),a4
000018AC 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
000018AE 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
000018B0 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018B4 1234 1000                          move.b  (a4,d1.w),d1                    ;
000018B8 7407                               moveq   #7,d2                           ; set repeat count to 8
000018BA 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
000018BC 4243                               clr.w   d3                              ;
000018BE 6000                               bra.s   KosDec_FetchNewCode
000018C0                             
000018C0                            KosDec_FetchCodeLoop:
000018C0                                    ; code 1 (Uncompressed byte)
000018C0 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018D8 12D8                               move.b  (a0)+,(a1)+
000018DA                             
000018DA                            KosDec_FetchNewCode:
000018DA D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018DC 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
000018DE                             
000018DE                                    ; codes 00 and 01
000018DE 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018F6 7800                               moveq   #0,d4                           ; d4 will contain copy count
000018F8 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018FA 6500                               bcs.s   KosDec_Code_01
000018FC                             
000018FC                                    ; code 00 (Dictionary ref. short)
000018FC 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001914 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001916 D944                               addx.w  d4,d4
00001918 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001930 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001932 D944                               addx.w  d4,d4
00001934 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000194C 7AFF                               moveq   #-1,d5
0000194E 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00001950                             
00001950                            KosDec_StreamCopy:
00001950 47F1 5000                          lea     (a1,d5),a3
00001954 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001956                             
00001956                            KosDec_copy:
00001956 12DB                               move.b  (a3)+,(a1)+
00001958 51CC FFFC                          dbf     d4,KosDec_copy
0000195C 6000 FF7C                          bra.w   KosDec_FetchNewCode
00001960                            ; ---------------------------------------------------------------------------
00001960                            KosDec_Code_01:
00001960                                    ; code 01 (Dictionary ref. long / special)
00001960 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001978 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
0000197A 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
0000197C 7AFF                               moveq   #-1,d5
0000197E 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00001980 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00001982 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00001984 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00001986 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00001988                             
00001988                                    ; special mode (extended counter)
00001988 1818                               move.b  (a0)+,d4                        ; read cnt
0000198A 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
0000198C 5304                               subq.b  #1,d4
0000198E 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00001992                             
00001992 47F1 5000                          lea     (a1,d5),a3
00001996 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001998 3C04                               move.w  d4,d6
0000199A 4646                               not.w   d6
0000199C CC47                               and.w   d7,d6
0000199E DC46                               add.w   d6,d6
000019A0 E64C                               lsr.w   #3,d4
000019A2 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
000019A6                             
000019A6                            KosDec_largecopy:
000019A6                                    rept 8
000019A6                                    move.b  (a3)+,(a1)+
000019A6 12DB 12DB 12DB 12DB 12DB+          endr
000019B6 51CC FFEE                          dbf     d4,KosDec_largecopy
000019BA 6000 FF1E                          bra.w   KosDec_FetchNewCode
000019BE                             
000019BE                            KosDec_Quit:
000019BE 4E75                               rts
000019C0                             
000019C0                            ; ---------------------------------------------------------------------------
000019C0                            ; A look-up table to invert bits order in desc. field bytes
000019C0                            ; ---------------------------------------------------------------------------
000019C0                             
000019C0                            KosDec_ByteMap:
000019C0 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000019D0 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000019E0 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000019F0 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001A00 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001A10 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001A20 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001A30 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001A40 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001A50 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001A60 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001A70 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A80 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A90 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001AA0 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001AB0 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001AC0                             
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Palette cycling routine loading subroutine
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AC0 7400                       		moveq	#0,d2
00001AC2 7000                       		moveq	#0,d0
00001AC4 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AC8 D040                       		add.w	d0,d0		; multiply by 2
00001ACA 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated Palettes offset index into d0
00001ACE 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001AD2                            ; End of function PalCycle_Load
00001AD2                            
00001AD2                            ; ===========================================================================
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Palette cycling routines
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AD4 0000                       		dc.w PalCycle_LZ-PalCycle
00001AD6 0000                       		dc.w PalCycle_MZ-PalCycle
00001AD8 0000                       		dc.w PalCycle_SLZ-PalCycle
00001ADA 0000                       		dc.w PalCycle_SYZ-PalCycle
00001ADC 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ADE 0000                       		dc.w PalCycle_GHZ-PalCycle
00001AE0                            
00001AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AE0                            
00001AE0                            
00001AE0                            PalCycle_Title:				; XREF: TitleScreen
00001AE0 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AE6 6000                       		bra.s	loc_196A
00001AE8                            ; ===========================================================================
00001AE8                            
00001AE8                            PalCycle_GHZ:				; XREF: PalCycle
00001AE8 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001AEE                            
00001AEE                            loc_196A:				; XREF: PalCycle_Title
00001AEE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AF2 6A00                       		bpl.s	locret_1990
00001AF4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AFA 3038 F632                  		move.w	($FFFFF632).w,d0
00001AFE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B02 0240 0003                  		andi.w	#3,d0
00001B06 E748                       		lsl.w	#3,d0
00001B08 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B0C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B10 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B14                            
00001B14                            locret_1990:
00001B14 4E75                       		rts	
00001B16                            ; End of function PalCycle_Title
00001B16                            
00001B16                            
00001B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B16                            
00001B16                            
00001B16                            PalCycle_LZ:				; XREF: PalCycle
00001B16 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B1A 6A00                       		bpl.s	loc_19D8
00001B1C 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B22 3038 F632                  		move.w	($FFFFF632).w,d0
00001B26 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B2A 0240 0003                  		andi.w	#3,d0
00001B2E E748                       		lsl.w	#3,d0
00001B30 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B36 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B3C 6600                       		bne.s	loc_19C0
00001B3E 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	Palette instead
00001B44                            
00001B44                            loc_19C0:
00001B44 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B48 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B50 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B54 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B58 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5C                            
00001B5C                            loc_19D8:
00001B5C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B60 0240 0007                  		andi.w	#7,d0
00001B64 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B68 6700                       		beq.s	locret_1A3A
00001B6A 7201                       		moveq	#1,d1
00001B6C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B70 6700                       		beq.s	loc_19F0
00001B72 4441                       		neg.w	d1
00001B74                            
00001B74                            loc_19F0:
00001B74 3038 F650                  		move.w	($FFFFF650).w,d0
00001B78 0240 0003                  		andi.w	#3,d0
00001B7C D041                       		add.w	d1,d0
00001B7E 0C40 0003                  		cmpi.w	#3,d0
00001B82 6500                       		bcs.s	loc_1A0A
00001B84 3200                       		move.w	d0,d1
00001B86 7000                       		moveq	#0,d0
00001B88 4A41                       		tst.w	d1
00001B8A 6A00                       		bpl.s	loc_1A0A
00001B8C 7002                       		moveq	#2,d0
00001B8E                            
00001B8E                            loc_1A0A:
00001B8E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B92 D040                       		add.w	d0,d0
00001B94 3200                       		move.w	d0,d1
00001B96 D040                       		add.w	d0,d0
00001B98 D041                       		add.w	d1,d0
00001B9A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001BA0 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001BA4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA8 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAC 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001BB2 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBA 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BBE                            
00001BBE                            locret_1A3A:
00001BBE 4E75                       		rts	
00001BC0                            ; End of function PalCycle_LZ
00001BC0                            
00001BC0                            ; ===========================================================================
00001BC0 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BC8                            ; ===========================================================================
00001BC8                            
00001BC8                            PalCycle_MZ:				; XREF: PalCycle
00001BC8 4E75                       		rts	
00001BCA                            
00001BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCA                            
00001BCA                            
00001BCA                            PalCycle_SLZ:				; XREF: PalCycle
00001BCA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCE 6A00                       		bpl.s	locret_1A80
00001BD0 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BD6 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDA 5240                       		addq.w	#1,d0
00001BDC 0C40 0006                  		cmpi.w	#6,d0
00001BE0 6500                       		bcs.s	loc_1A60
00001BE2 7000                       		moveq	#0,d0
00001BE4                            
00001BE4                            loc_1A60:
00001BE4 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BE8 3200                       		move.w	d0,d1
00001BEA D241                       		add.w	d1,d1
00001BEC D041                       		add.w	d1,d0
00001BEE D040                       		add.w	d0,d0
00001BF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001C04                            
00001C04                            locret_1A80:
00001C04 4E75                       		rts	
00001C06                            ; End of function PalCycle_SLZ
00001C06                            
00001C06                            
00001C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C06                            
00001C06                            
00001C06                            PalCycle_SYZ:				; XREF: PalCycle
00001C06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C0A 6A00                       		bpl.s	locret_1AC6
00001C0C 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C12 3038 F632                  		move.w	($FFFFF632).w,d0
00001C16 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C1A 0240 0003                  		andi.w	#3,d0
00001C1E E548                       		lsl.w	#2,d0
00001C20 3200                       		move.w	d0,d1
00001C22 D040                       		add.w	d0,d0
00001C24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C2A 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C4A                            
00001C4A                            locret_1AC6:
00001C4A 4E75                       		rts	
00001C4C                            ; End of function PalCycle_SYZ
00001C4C                            
00001C4C                            
00001C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C4C                            
00001C4C                            
00001C4C                            PalCycle_SBZ:				; XREF: PalCycle
00001C4C 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C52 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C56 6700                       		beq.s	loc_1ADA
00001C58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C5E                            
00001C5E                            loc_1ADA:
00001C5E 43F8 F650                  		lea	($FFFFF650).w,a1
00001C62 321A                       		move.w	(a2)+,d1
00001C64                            
00001C64                            loc_1AE0:
00001C64 5311                       		subq.b	#1,(a1)
00001C66 6B00                       		bmi.s	loc_1AEA
00001C68 5489                       		addq.l	#2,a1
00001C6A 5C8A                       		addq.l	#6,a2
00001C6C 6000                       		bra.s	loc_1B06
00001C6E                            ; ===========================================================================
00001C6E                            
00001C6E                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C6E 12DA                       		move.b	(a2)+,(a1)+
00001C70 1011                       		move.b	(a1),d0
00001C72 5200                       		addq.b	#1,d0
00001C74 B01A                       		cmp.b	(a2)+,d0
00001C76 6500                       		bcs.s	loc_1AF6
00001C78 7000                       		moveq	#0,d0
00001C7A                            
00001C7A                            loc_1AF6:
00001C7A 12C0                       		move.b	d0,(a1)+
00001C7C 0240 000F                  		andi.w	#$F,d0
00001C80 D040                       		add.w	d0,d0
00001C82 305A                       		movea.w	(a2)+,a0
00001C84 365A                       		movea.w	(a2)+,a3
00001C86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C8A                            
00001C8A                            loc_1B06:				; XREF: PalCycle_SBZ
00001C8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C92 6A00                       		bpl.s	locret_1B64
00001C94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C9A 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CA0 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CA4 6700                       		beq.s	loc_1B2E
00001CA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CAC 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CB2                            
00001CB2                            loc_1B2E:
00001CB2 72FF                       		moveq	#-1,d1
00001CB4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CB8 6700                       		beq.s	loc_1B38
00001CBA 4441                       		neg.w	d1
00001CBC                            
00001CBC                            loc_1B38:
00001CBC 3038 F632                  		move.w	($FFFFF632).w,d0
00001CC0 0240 0003                  		andi.w	#3,d0
00001CC4 D041                       		add.w	d1,d0
00001CC6 0C40 0003                  		cmpi.w	#3,d0
00001CCA 6500                       		bcs.s	loc_1B52
00001CCC 3200                       		move.w	d0,d1
00001CCE 7000                       		moveq	#0,d0
00001CD0 4A41                       		tst.w	d1
00001CD2 6A00                       		bpl.s	loc_1B52
00001CD4 7002                       		moveq	#2,d0
00001CD6                            
00001CD6                            loc_1B52:
00001CD6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CDA D040                       		add.w	d0,d0
00001CDC 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CE8                            
00001CE8                            locret_1B64:
00001CE8 4E75                       		rts	
00001CEA                            ; End of function PalCycle_SBZ
00001CEA                            
00001CEA                            ; ===========================================================================
00001CEA                            Pal_TitleCyc:	incbin	Palette\c_title.bin
00001D0A                            Pal_GHZCyc:	incbin	Palette\c_ghz.bin
00001D2A                            Pal_LZCyc1:	incbin	Palette\c_lz_wat.bin	; waterfalls Palette
00001D4A                            Pal_LZCyc2:	incbin	Palette\c_lz_bel.bin	; conveyor belt Palette
00001D5C                            Pal_LZCyc3:	incbin	Palette\c_lz_buw.bin	; conveyor belt (underwater) Palette
00001D6E                            Pal_SBZ3Cyc1:	incbin	Palette\c_sbz3_w.bin	; waterfalls Palette
00001DD6                            Pal_SLZCyc:	incbin	Palette\c_slz.bin
00001DFA                            Pal_SYZCyc1:	incbin	Palette\c_syz_1.bin
00001E1A                            Pal_SYZCyc2:	incbin	Palette\c_syz_2.bin
00001E2A                            
00001E2A                            Pal_SBZCycList:
00001E2A                            	include "_inc\SBZ Palette script 1.asm"
00001E2A                            ; ---------------------------------------------------------------------------
00001E2A                            ; Scrap Brain Zone 1 pallet cycling script
00001E2A                            ; ---------------------------------------------------------------------------
00001E2A 0008                       	dc.w 8			; number of entries - 1
00001E2C 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E2E 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E30 FB50                       	dc.w $FB50		; RAM address
00001E32 0D08                       	dc.b $D, 8
00001E34 0000                       	dc.w Pal_SBZCyc2
00001E36 FB52                       	dc.w $FB52
00001E38 0E08                       	dc.b $E, 8
00001E3A 0000                       	dc.w Pal_SBZCyc3
00001E3C FB6E                       	dc.w $FB6E
00001E3E 0B08                       	dc.b $B, 8
00001E40 0000                       	dc.w Pal_SBZCyc5
00001E42 FB70                       	dc.w $FB70
00001E44 0708                       	dc.b 7,	8
00001E46 0000                       	dc.w Pal_SBZCyc6
00001E48 FB72                       	dc.w $FB72
00001E4A 1C10                       	dc.b $1C, $10
00001E4C 0000                       	dc.w Pal_SBZCyc7
00001E4E FB7E                       	dc.w $FB7E
00001E50 0303                       	dc.b 3,	3
00001E52 0000                       	dc.w Pal_SBZCyc8
00001E54 FB78                       	dc.w $FB78
00001E56 0303                       	dc.b 3,	3
00001E58 0000                       	dc.w Pal_SBZCyc8+2
00001E5A FB7A                       	dc.w $FB7A
00001E5C 0303                       	dc.b 3,	3
00001E5E 0000                       	dc.w Pal_SBZCyc8+4
00001E60 FB7C                       	dc.w $FB7C
00001E62                            	even
00001E62                            	even
00001E62                            
00001E62                            Pal_SBZCycList2:
00001E62                            	include "_inc\SBZ Palette script 2.asm"
00001E62                            ; ---------------------------------------------------------------------------
00001E62                            ; Scrap Brain Zone 2 pallet cycling script
00001E62                            ; ---------------------------------------------------------------------------
00001E62 0006                       	dc.w 6
00001E64 0708                       	dc.b 7,	8
00001E66 0000                       	dc.w Pal_SBZCyc1
00001E68 FB50                       	dc.w $FB50
00001E6A 0D08                       	dc.b $D, 8
00001E6C 0000                       	dc.w Pal_SBZCyc2
00001E6E FB52                       	dc.w $FB52
00001E70 0908                       	dc.b 9,	8
00001E72 0000                       	dc.w Pal_SBZCyc9
00001E74 FB70                       	dc.w $FB70
00001E76 0708                       	dc.b 7,	8
00001E78 0000                       	dc.w Pal_SBZCyc6
00001E7A FB72                       	dc.w $FB72
00001E7C 0303                       	dc.b 3,	3
00001E7E 0000                       	dc.w Pal_SBZCyc8
00001E80 FB78                       	dc.w $FB78
00001E82 0303                       	dc.b 3,	3
00001E84 0000                       	dc.w Pal_SBZCyc8+2
00001E86 FB7A                       	dc.w $FB7A
00001E88 0303                       	dc.b 3,	3
00001E8A 0000                       	dc.w Pal_SBZCyc8+4
00001E8C FB7C                       	dc.w $FB7C
00001E8E                            	even
00001E8E                            	even
00001E8E                            
00001E8E                            Pal_SBZCyc1:	incbin	Palette\c_sbz_1.bin
00001E9E                            Pal_SBZCyc2:	incbin	Palette\c_sbz_2.bin
00001EAE                            Pal_SBZCyc3:	incbin	Palette\c_sbz_3.bin
00001EBE                            Pal_SBZCyc4:	incbin	Palette\c_sbz_4.bin
00001ECA                            Pal_SBZCyc5:	incbin	Palette\c_sbz_5.bin
00001EDA                            Pal_SBZCyc6:	incbin	Palette\c_sbz_6.bin
00001EEA                            Pal_SBZCyc7:	incbin	Palette\c_sbz_7.bin
00001F0A                            Pal_SBZCyc8:	incbin	Palette\c_sbz_8.bin
00001F14                            Pal_SBZCyc9:	incbin	Palette\c_sbz_9.bin
00001F24                            Pal_SBZCyc10:	incbin	Palette\c_sbz_10.bin
00001F30                            ; ---------------------------------------------------------------------------
00001F30                            ; Subroutine to	fade out and fade in
00001F30                            ; ---------------------------------------------------------------------------
00001F30                            
00001F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F30                            
00001F30                            
00001F30                            Pal_FadeTo:
00001F30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F36                            
00001F36                            Pal_FadeTo2:
00001F36 7000                       		moveq	#0,d0
00001F38 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F3C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F40 D0C0                       		adda.w	d0,a0
00001F42 7200                       		moveq	#0,d1
00001F44 1038 F627                  		move.b	($FFFFF627).w,d0
00001F48                            
00001F48                            Pal_ToBlack:
00001F48 30C1                       		move.w	d1,(a0)+
00001F4A 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill Palette with $000	(black)
00001F4E 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001F50 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001F52                            
00001F52                            loc_1DCE:
00001F52 6100 F69E                  		bsr.w	RunPLC_RAM
00001F56 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F5C 6100 0000                  		bsr.w	DelayProgram
00001F60 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001F64 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00001F66 6100                       		bsr.s	Pal_FadeIn
00001F68 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001F6A 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001F6C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001F72 6000 0000                  		bra	DelayProgram				; MJ: ''
00001F76                            
00001F76                            ; End of function Pal_FadeTo
00001F76                            
00001F76                            ; ---------------------------------------------------------------------------
00001F76                            ; Palette fade-in subroutine
00001F76                            ; ---------------------------------------------------------------------------
00001F76                            
00001F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F76                            
00001F76                            
00001F76                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001F76 7000                       		moveq	#0,d0
00001F78 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F80 1038 F626                  		move.b	($FFFFF626).w,d0
00001F84 D0C0                       		adda.w	d0,a0
00001F86 D2C0                       		adda.w	d0,a1
00001F88 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8C                            
00001F8C                            loc_1DFA:
00001F8C 6100                       		bsr.s	Pal_AddColor
00001F8E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001F92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F98 6600                       		bne.s	locret_1E24
00001F9A 7000                       		moveq	#0,d0
00001F9C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA0 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FA4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA8 D0C0                       		adda.w	d0,a0
00001FAA D2C0                       		adda.w	d0,a1
00001FAC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB0                            
00001FB0                            loc_1E1E:
00001FB0 6100                       		bsr.s	Pal_AddColor
00001FB2 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FB6                            
00001FB6                            locret_1E24:
00001FB6 4E75                       		rts	
00001FB8                            ; End of function Pal_FadeIn
00001FB8                            
00001FB8                            
00001FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB8                            
00001FB8                            
00001FB8                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FB8 1A11                       		move.b	(a1),d5					; MJ: load blue
00001FBA 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001FBC 1401                       		move.b	d1,d2					; MJ: load red
00001FBE E809                       		lsr.b	#$04,d1					; MJ: get only green
00001FC0 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001FC4 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001FC6 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001FC8 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001FCC 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001FD0                            
00001FD0                            FCI_NoBlue:
00001FD0 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001FD2 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001FD6 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001FDA                            
00001FDA                            FCI_NoGreen:
00001FDA B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001FDC 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001FE0 5403                       		addq.b	#$02,d3					; MJ: increase red
00001FE2                            
00001FE2                            FCI_NoRed:
00001FE2 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001FE4 4E75                       		rts						; MJ: return
00001FE6                            
00001FE6                            ; End of function Pal_AddColor
00001FE6                            
00001FE6                            
00001FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE6                            
00001FE6                            
00001FE6                            Pal_FadeFrom:
00001FE6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FEC 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001FEE 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001FF0                            
00001FF0                            loc_1E5C:
00001FF0 6100 F600                  		bsr.w	RunPLC_RAM
00001FF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FFA 6100 0000                  		bsr.w	DelayProgram
00001FFE 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002002 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
00002004 6100                       		bsr.s	Pal_FadeOut
00002006 51CC FFE8                  		dbf	d4,loc_1E5C
0000200A 4E75                       		rts	
0000200C                            ; End of function Pal_FadeFrom
0000200C                            
0000200C                            ; ---------------------------------------------------------------------------
0000200C                            ; Palette fade-out subroutine
0000200C                            ; ---------------------------------------------------------------------------
0000200C                            
0000200C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200C                            
0000200C                            
0000200C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000200C 7000                       		moveq	#0,d0
0000200E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002012 1038 F626                  		move.b	($FFFFF626).w,d0
00002016 D0C0                       		adda.w	d0,a0
00002018 1038 F627                  		move.b	($FFFFF627).w,d0
0000201C                            
0000201C                            loc_1E82:
0000201C 6100                       		bsr.s	Pal_DecColor
0000201E 51C8 FFFC                  		dbf	d0,loc_1E82
00002022                            
00002022 7000                       		moveq	#0,d0
00002024 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002028 1038 F626                  		move.b	($FFFFF626).w,d0
0000202C D0C0                       		adda.w	d0,a0
0000202E 1038 F627                  		move.b	($FFFFF627).w,d0
00002032                            
00002032                            loc_1E98:
00002032 6100                       		bsr.s	Pal_DecColor
00002034 51C8 FFFC                  		dbf	d0,loc_1E98
00002038 4E75                       		rts	
0000203A                            ; End of function Pal_FadeOut
0000203A                            
0000203A                            
0000203A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203A                            
0000203A                            
0000203A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000203A 3A10                       		move.w	(a0),d5					; MJ: load colour
0000203C 3205                       		move.w	d5,d1					; MJ: copy to d1
0000203E 1401                       		move.b	d1,d2					; MJ: load green and red
00002040 1601                       		move.b	d1,d3					; MJ: load red
00002042 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00002046 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000204A 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
0000204E                            
0000204E                            FCO_NoBlue:
0000204E 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00002052 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00002056 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000205A                            
0000205A                            FCO_NoGreen:
0000205A 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
0000205E 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002062 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002064                            
00002064                            FCO_NoRed:
00002064 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002066 4E75                       		rts						; MJ: return
00002068                            
00002068                            ; End of function Pal_DecColor
00002068                            
00002068                            ; ---------------------------------------------------------------------------
00002068                            ; Subroutine to	fill the Palette	with white (special stage)
00002068                            ; ---------------------------------------------------------------------------
00002068                            
00002068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002068                            
00002068                            
00002068                            Pal_MakeWhite:				; XREF: SpecialStage
00002068 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000206E 7000                       		moveq	#0,d0
00002070 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002074 1038 F626                  		move.b	($FFFFF626).w,d0
00002078 D0C0                       		adda.w	d0,a0
0000207A 323C 0EEE                  		move.w	#$EEE,d1
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            PalWhite_Loop:
00002082 30C1                       		move.w	d1,(a0)+
00002084 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002088 383C 0015                  		move.w	#$15,d4
0000208C                            
0000208C                            loc_1EF4:
0000208C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002092 6100 0000                  		bsr.w	DelayProgram
00002096 6100                       		bsr.s	Pal_WhiteToBlack
00002098 6100 F558                  		bsr.w	RunPLC_RAM
0000209C 51CC FFEE                  		dbf	d4,loc_1EF4
000020A0 4E75                       		rts	
000020A2                            ; End of function Pal_MakeWhite
000020A2                            
000020A2                            
000020A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A2                            
000020A2                            
000020A2                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020A2 7000                       		moveq	#0,d0
000020A4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020A8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020AC 1038 F626                  		move.b	($FFFFF626).w,d0
000020B0 D0C0                       		adda.w	d0,a0
000020B2 D2C0                       		adda.w	d0,a1
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1F20:
000020B8 6100                       		bsr.s	Pal_DecColor2
000020BA 51C8 FFFC                  		dbf	d0,loc_1F20
000020BE                            
000020BE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020C4 6600                       		bne.s	locret_1F4A
000020C6 7000                       		moveq	#0,d0
000020C8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020CC 43F8 FA00                  		lea	($FFFFFA00).w,a1
000020D0 1038 F626                  		move.b	($FFFFF626).w,d0
000020D4 D0C0                       		adda.w	d0,a0
000020D6 D2C0                       		adda.w	d0,a1
000020D8 1038 F627                  		move.b	($FFFFF627).w,d0
000020DC                            
000020DC                            loc_1F44:
000020DC 6100                       		bsr.s	Pal_DecColor2
000020DE 51C8 FFFC                  		dbf	d0,loc_1F44
000020E2                            
000020E2                            locret_1F4A:
000020E2 4E75                       		rts	
000020E4                            ; End of function Pal_WhiteToBlack
000020E4                            
000020E4                            
000020E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E4                            
000020E4                            
000020E4                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000020E4 3419                       		move.w	(a1)+,d2
000020E6 3610                       		move.w	(a0),d3
000020E8 B642                       		cmp.w	d2,d3
000020EA 6700                       		beq.s	loc_1F78
000020EC 3203                       		move.w	d3,d1
000020EE 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000020F2 6500                       		bcs.s	loc_1F64
000020F4 B242                       		cmp.w	d2,d1
000020F6 6500                       		bcs.s	loc_1F64
000020F8 30C1                       		move.w	d1,(a0)+
000020FA 4E75                       		rts	
000020FC                            ; ===========================================================================
000020FC                            
000020FC                            loc_1F64:				; XREF: Pal_DecColor2
000020FC 3203                       		move.w	d3,d1
000020FE 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002102 6500                       		bcs.s	loc_1F74
00002104 B242                       		cmp.w	d2,d1
00002106 6500                       		bcs.s	loc_1F74
00002108 30C1                       		move.w	d1,(a0)+
0000210A 4E75                       		rts	
0000210C                            ; ===========================================================================
0000210C                            
0000210C                            loc_1F74:				; XREF: loc_1F64
0000210C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000210E 4E75                       		rts	
00002110                            ; ===========================================================================
00002110                            
00002110                            loc_1F78:				; XREF: Pal_DecColor2
00002110 5448                       		addq.w	#2,a0
00002112 4E75                       		rts	
00002114                            ; End of function Pal_DecColor2
00002114                            
00002114                            ; ---------------------------------------------------------------------------
00002114                            ; Subroutine to	make a white flash when	you enter a special stage
00002114                            ; ---------------------------------------------------------------------------
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            Pal_MakeFlash:				; XREF: SpecialStage
00002114 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000211A 383C 0015                  		move.w	#$15,d4
0000211E                            
0000211E                            loc_1F86:
0000211E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002124 6100 0000                  		bsr.w	DelayProgram
00002128 6100                       		bsr.s	Pal_ToWhite
0000212A 6100 F4C6                  		bsr.w	RunPLC_RAM
0000212E 51CC FFEE                  		dbf	d4,loc_1F86
00002132 4E75                       		rts	
00002134                            ; End of function Pal_MakeFlash
00002134                            
00002134                            
00002134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002134                            
00002134                            
00002134                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002134 7000                       		moveq	#0,d0
00002136 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 1038 F627                  		move.b	($FFFFF627).w,d0
00002144                            
00002144                            loc_1FAC:
00002144 6100                       		bsr.s	Pal_AddColor2
00002146 51C8 FFFC                  		dbf	d0,loc_1FAC
0000214A 7000                       		moveq	#0,d0
0000214C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002150 1038 F626                  		move.b	($FFFFF626).w,d0
00002154 D0C0                       		adda.w	d0,a0
00002156 1038 F627                  		move.b	($FFFFF627).w,d0
0000215A                            
0000215A                            loc_1FC2:
0000215A 6100                       		bsr.s	Pal_AddColor2
0000215C 51C8 FFFC                  		dbf	d0,loc_1FC2
00002160 4E75                       		rts	
00002162                            ; End of function Pal_ToWhite
00002162                            
00002162                            
00002162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002162                            
00002162                            
00002162                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002162 3410                       		move.w	(a0),d2
00002164 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002168 6700                       		beq.s	loc_2006
0000216A 3202                       		move.w	d2,d1
0000216C 0241 000E                  		andi.w	#$E,d1
00002170 0C41 000E                  		cmpi.w	#$E,d1
00002174 6700                       		beq.s	loc_1FE2
00002176 5458                       		addq.w	#2,(a0)+	; increase red value
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1FE2:				; XREF: Pal_AddColor2
0000217A 3202                       		move.w	d2,d1
0000217C 0241 00E0                  		andi.w	#$E0,d1
00002180 0C41 00E0                  		cmpi.w	#$E0,d1
00002184 6700                       		beq.s	loc_1FF4
00002186 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000218A 4E75                       		rts	
0000218C                            ; ===========================================================================
0000218C                            
0000218C                            loc_1FF4:				; XREF: loc_1FE2
0000218C 3202                       		move.w	d2,d1
0000218E 0241 0E00                  		andi.w	#$E00,d1
00002192 0C41 0E00                  		cmpi.w	#$E00,d1
00002196 6700                       		beq.s	loc_2006
00002198 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000219C 4E75                       		rts	
0000219E                            ; ===========================================================================
0000219E                            
0000219E                            loc_2006:				; XREF: Pal_AddColor2
0000219E 5448                       		addq.w	#2,a0
000021A0 4E75                       		rts	
000021A2                            ; End of function Pal_AddColor2
000021A2                            
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            ; Palette cycling routine - Sega	logo
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            PalCycle_Sega:				; XREF: SegaScreen
000021A2 4A38 F635                  		tst.b	($FFFFF635).w
000021A6 6600                       		bne.s	loc_206A
000021A8 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021AC 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021B2 7205                       		moveq	#5,d1
000021B4 3038 F632                  		move.w	($FFFFF632).w,d0
000021B8                            
000021B8                            loc_2020:
000021B8 6A00                       		bpl.s	loc_202A
000021BA 5448                       		addq.w	#2,a0
000021BC 5341                       		subq.w	#1,d1
000021BE 5440                       		addq.w	#2,d0
000021C0 60F6                       		bra.s	loc_2020
000021C2                            ; ===========================================================================
000021C2                            
000021C2                            loc_202A:				; XREF: PalCycle_Sega
000021C2 3400                       		move.w	d0,d2
000021C4 0242 001E                  		andi.w	#$1E,d2
000021C8 6600                       		bne.s	loc_2034
000021CA 5440                       		addq.w	#2,d0
000021CC                            
000021CC                            loc_2034:
000021CC 0C40 0060                  		cmpi.w	#$60,d0
000021D0 6400                       		bcc.s	loc_203E
000021D2 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000021D6                            
000021D6                            loc_203E:
000021D6 5440                       		addq.w	#2,d0
000021D8 51C9 FFE8                  		dbf	d1,loc_202A
000021DC 3038 F632                  		move.w	($FFFFF632).w,d0
000021E0 5440                       		addq.w	#2,d0
000021E2 3400                       		move.w	d0,d2
000021E4 0242 001E                  		andi.w	#$1E,d2
000021E8 6600                       		bne.s	loc_2054
000021EA 5440                       		addq.w	#2,d0
000021EC                            
000021EC                            loc_2054:
000021EC 0C40 0064                  		cmpi.w	#$64,d0
000021F0 6D00                       		blt.s	loc_2062
000021F2 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000021F8 70F4                       		moveq	#-$C,d0
000021FA                            
000021FA                            loc_2062:
000021FA 31C0 F632                  		move.w	d0,($FFFFF632).w
000021FE 7001                       		moveq	#1,d0
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_206A:				; XREF: loc_202A
00002202 5338 F634                  		subq.b	#1,($FFFFF634).w
00002206 6A00                       		bpl.s	loc_20BC
00002208 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000220E 3038 F632                  		move.w	($FFFFF632).w,d0
00002212 0640 000C                  		addi.w	#$C,d0
00002216 0C40 0030                  		cmpi.w	#$30,d0
0000221A 6500                       		bcs.s	loc_2088
0000221C 7000                       		moveq	#0,d0
0000221E 4E75                       		rts	
00002220                            ; ===========================================================================
00002220                            
00002220                            loc_2088:				; XREF: loc_206A
00002220 31C0 F632                  		move.w	d0,($FFFFF632).w
00002224 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000222A 41F0 0000                  		lea	(a0,d0.w),a0
0000222E 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002232 22D8                       		move.l	(a0)+,(a1)+
00002234 22D8                       		move.l	(a0)+,(a1)+
00002236 3298                       		move.w	(a0)+,(a1)
00002238 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000223C 7000                       		moveq	#0,d0
0000223E 722C                       		moveq	#$2C,d1
00002240                            
00002240                            loc_20A8:
00002240 3400                       		move.w	d0,d2
00002242 0242 001E                  		andi.w	#$1E,d2
00002246 6600                       		bne.s	loc_20B2
00002248 5440                       		addq.w	#2,d0
0000224A                            
0000224A                            loc_20B2:
0000224A 3390 0000                  		move.w	(a0),(a1,d0.w)
0000224E 5440                       		addq.w	#2,d0
00002250 51C9 FFEE                  		dbf	d1,loc_20A8
00002254                            
00002254                            loc_20BC:
00002254 7001                       		moveq	#1,d0
00002256 4E75                       		rts	
00002258                            ; End of function PalCycle_Sega
00002258                            
00002258                            ; ===========================================================================
00002258                            
00002258                            Pal_Sega1:	incbin	Palette\sega1.bin
00002264                            Pal_Sega2:	incbin	Palette\sega2.bin
00002294                            
00002294                            ; ---------------------------------------------------------------------------
00002294                            ; Subroutines to load Palettes
00002294                            ; ---------------------------------------------------------------------------
00002294                            
00002294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002294                            
00002294                            
00002294                            PalLoad1:
00002294 43F9 0000 0000             		lea	(PalPointers).l,a1
0000229A E748                       		lsl.w	#3,d0
0000229C D2C0                       		adda.w	d0,a1
0000229E 2459                       		movea.l	(a1)+,a2
000022A0 3659                       		movea.w	(a1)+,a3
000022A2 D6FC 0080                  		adda.w	#$80,a3
000022A6 3E19                       		move.w	(a1)+,d7
000022A8                            
000022A8                            loc_2110:
000022A8 26DA                       		move.l	(a2)+,(a3)+
000022AA 51CF FFFC                  		dbf	d7,loc_2110
000022AE 4E75                       		rts	
000022B0                            ; End of function PalLoad1
000022B0                            
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PalLoad2:
000022B0 43F9 0000 0000             		lea	(PalPointers).l,a1
000022B6 E748                       		lsl.w	#3,d0
000022B8 D2C0                       		adda.w	d0,a1
000022BA 2459                       		movea.l	(a1)+,a2
000022BC 3659                       		movea.w	(a1)+,a3
000022BE 3E19                       		move.w	(a1)+,d7
000022C0                            
000022C0                            loc_2128:
000022C0 26DA                       		move.l	(a2)+,(a3)+
000022C2 51CF FFFC                  		dbf	d7,loc_2128
000022C6 4E75                       		rts	
000022C8                            ; End of function PalLoad2
000022C8                            
000022C8                            ; ---------------------------------------------------------------------------
000022C8                            ; Underwater Palette loading subroutine
000022C8                            ; ---------------------------------------------------------------------------
000022C8                            
000022C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022C8                            
000022C8                            
000022C8                            PalLoad3_Water:
000022C8 43F9 0000 0000             		lea	(PalPointers).l,a1
000022CE E748                       		lsl.w	#3,d0
000022D0 D2C0                       		adda.w	d0,a1
000022D2 2459                       		movea.l	(a1)+,a2
000022D4 3659                       		movea.w	(a1)+,a3
000022D6 96FC 0080                  		suba.w	#$80,a3
000022DA 3E19                       		move.w	(a1)+,d7
000022DC                            
000022DC                            loc_2144:
000022DC 26DA                       		move.l	(a2)+,(a3)+
000022DE 51CF FFFC                  		dbf	d7,loc_2144
000022E2 4E75                       		rts	
000022E4                            ; End of function PalLoad3_Water
000022E4                            
000022E4                            
000022E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E4                            
000022E4                            
000022E4                            PalLoad4_Water:
000022E4 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EA E748                       		lsl.w	#3,d0
000022EC D2C0                       		adda.w	d0,a1
000022EE 2459                       		movea.l	(a1)+,a2
000022F0 3659                       		movea.w	(a1)+,a3
000022F2 96FC 0100                  		suba.w	#$100,a3
000022F6 3E19                       		move.w	(a1)+,d7
000022F8                            
000022F8                            loc_2160:
000022F8 26DA                       		move.l	(a2)+,(a3)+
000022FA 51CF FFFC                  		dbf	d7,loc_2160
000022FE 4E75                       		rts	
00002300                            ; End of function PalLoad4_Water
00002300                            
00002300                            ; ===========================================================================
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Palette pointers
00002300                            ; ---------------------------------------------------------------------------
00002300                            PalPointers:
00002300                            	include "_inc\Palette pointers.asm"
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Pallet pointers
00002300                            ; ---------------------------------------------------------------------------
00002300 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002304 FB00                       	dc.w $FB00		; RAM address
00002306 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002308 0000 0000                  	dc.l Pal_Title
0000230C FB00                       	dc.w $FB00
0000230E 001F                       	dc.w $1F
00002310 0000 0000                  	dc.l Pal_LevelSel
00002314 FB00                       	dc.w $FB00
00002316 001F                       	dc.w $1F
00002318 0000 0000                  	dc.l Pal_Sonic
0000231C FB00                       	dc.w $FB00
0000231E 0007                       	dc.w 7
00002320 0000 0000                  	dc.l Pal_GHZ
00002324 FB20                       	dc.w $FB20
00002326 0017                       	dc.w $17
00002328 0000 0000                  	dc.l Pal_LZ
0000232C FB20                       	dc.w $FB20
0000232E 0017                       	dc.w $17
00002330 0000 0000                  	dc.l Pal_MZ
00002334 FB20                       	dc.w $FB20
00002336 0017                       	dc.w $17
00002338 0000 0000                  	dc.l Pal_SLZ
0000233C FB20                       	dc.w $FB20
0000233E 0017                       	dc.w $17
00002340 0000 0000                  	dc.l Pal_SYZ
00002344 FB20                       	dc.w $FB20
00002346 0017                       	dc.w $17
00002348 0000 0000                  	dc.l Pal_SBZ1
0000234C FB20                       	dc.w $FB20
0000234E 0017                       	dc.w $17
00002350 0000 0000                  	dc.l Pal_Special
00002354 FB00                       	dc.w $FB00
00002356 001F                       	dc.w $1F
00002358 0000 0000                  	dc.l Pal_LZWater
0000235C FB00                       	dc.w $FB00
0000235E 001F                       	dc.w $1F
00002360 0000 0000                  	dc.l Pal_SBZ3
00002364 FB20                       	dc.w $FB20
00002366 0017                       	dc.w $17
00002368 0000 0000                  	dc.l Pal_SBZ3Water
0000236C FB00                       	dc.w $FB00
0000236E 001F                       	dc.w $1F
00002370 0000 0000                  	dc.l Pal_SBZ2
00002374 FB20                       	dc.w $FB20
00002376 0017                       	dc.w $17
00002378 0000 0000                  	dc.l Pal_LZSonWater
0000237C FB00                       	dc.w $FB00
0000237E 0007                       	dc.w 7
00002380 0000 0000                  	dc.l Pal_SBZ3SonWat
00002384 FB00                       	dc.w $FB00
00002386 0007                       	dc.w 7
00002388 0000 0000                  	dc.l Pal_SpeResult
0000238C FB00                       	dc.w $FB00
0000238E 001F                       	dc.w $1F
00002390 0000 0000                  	dc.l Pal_SpeContinue
00002394 FB00                       	dc.w $FB00
00002396 000F                       	dc.w $F
00002398 0000 0000                  	dc.l Pal_Ending
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Notice
000023A4 FB20                       	dc.w $FB20
000023A6 0017                       	dc.w $17
000023A6 0017                       	dc.w $17
000023A8                            
000023A8                            ; ---------------------------------------------------------------------------
000023A8                            ; Palette data
000023A8                            ; ---------------------------------------------------------------------------
000023A8                            Pal_SegaBG:	incbin	Palette\sega_bg.bin
00002428                            Pal_Title:	incbin	Palette\title.bin
000024A8                            Pal_LevelSel:	incbin	Palette\levelsel.bin
00002528                            Pal_Sonic:	incbin	Palette\sonic.bin
00002548                            Pal_GHZ:	incbin	Palette\ghz.bin
000025A8                            Pal_LZ:		incbin	Palette\lz.bin
00002608                            Pal_LZWater:	incbin	Palette\lz_uw.bin	; LZ underwater Palettes
00002688                            Pal_MZ:		incbin	Palette\mz.bin
000026E8                            Pal_SLZ:	incbin	Palette\slz.bin
00002748                            Pal_SYZ:	incbin	Palette\syz.bin
000027A8                            Pal_SBZ1:	incbin	Palette\sbz_act1.bin	; SBZ act 1 Palettes
00002808                            Pal_SBZ2:	incbin	Palette\sbz_act2.bin	; SBZ act 2 & Final Zone Palettes
00002868                            Pal_Special:	incbin	Palette\special.bin	; special stage Palettes
000028E8                            Pal_SBZ3:	incbin	Palette\sbz_act3.bin	; SBZ act 3 Palettes
00002948                            Pal_SBZ3Water:	incbin	Palette\sbz_a3uw.bin	; SBZ act 3 (underwater) Palettes
000029C8                            Pal_LZSonWater:	incbin	Palette\son_lzuw.bin	; Sonic (underwater in LZ) Palette
000029E8                            Pal_SBZ3SonWat:	incbin	Palette\son_sbzu.bin	; Sonic (underwater in SBZ act 3) Palette
00002A08                            Pal_SpeResult:	incbin	Palette\ssresult.bin	; special stage results screen Palettes
00002A88                            Pal_SpeContinue:incbin	Palette\sscontin.bin	; special stage results screen continue Palette
00002AC8                            Pal_Ending:	incbin	Palette\ending.bin	; ending sequence Palettes
00002B48                            
00002B48                            ; ---------------------------------------------------------------------------
00002B48                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002B48                            ; ---------------------------------------------------------------------------
00002B48                            
00002B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B48                            
00002B48                            
00002B48                            DelayProgram:				; XREF: PauseGame
00002B48 46FC 2300                  		move	#$2300,sr
00002B4C                            
00002B4C                            loc_29AC:
00002B4C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002B50 66FA                       		bne.s	loc_29AC
00002B52 4E75                       		rts	
00002B54                            ; End of function DelayProgram
00002B54                            
00002B54                            ; ---------------------------------------------------------------------------
00002B54                            ; Subroutine to	generate a pseudo-random number	in d0
00002B54                            ; ---------------------------------------------------------------------------
00002B54                            
00002B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B54                            
00002B54                            
00002B54                            RandomNumber:
00002B54 2238 F636                  		move.l	($FFFFF636).w,d1
00002B58 6600                       		bne.s	loc_29C0
00002B5A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002B60                            
00002B60                            loc_29C0:
00002B60 2001                       		move.l	d1,d0
00002B62 E581                       		asl.l	#2,d1
00002B64 D280                       		add.l	d0,d1
00002B66 E781                       		asl.l	#3,d1
00002B68 D280                       		add.l	d0,d1
00002B6A 3001                       		move.w	d1,d0
00002B6C 4841                       		swap	d1
00002B6E D041                       		add.w	d1,d0
00002B70 3200                       		move.w	d0,d1
00002B72 4841                       		swap	d1
00002B74 21C1 F636                  		move.l	d1,($FFFFF636).w
00002B78 4E75                       		rts	
00002B7A                            ; End of function RandomNumber
00002B7A                            
00002B7A                            
00002B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B7A                            
00002B7A                            
00002B7A                            CalcSine:				; XREF: SS_BGAnimate; et al
00002B7A 0240 00FF                  		andi.w	#$FF,d0
00002B7E D040                       		add.w	d0,d0
00002B80 0640 0080                  		addi.w	#$80,d0
00002B84 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002B88 0440 0080                  		subi.w	#$80,d0
00002B8C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002B90 4E75                       		rts	
00002B92                            ; End of function CalcSine
00002B92                            
00002B92                            ; ===========================================================================
00002B92                            
00002B92                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002E12                            
00002E12                            ; ===========================================================================
00002E12 48E7 6000                  		movem.l	d1-d2,-(sp)
00002E16 3200                       		move.w	d0,d1
00002E18 4841                       		swap	d1
00002E1A 7000                       		moveq	#0,d0
00002E1C 3200                       		move.w	d0,d1
00002E1E 7407                       		moveq	#7,d2
00002E20                            
00002E20                            loc_2C80:
00002E20 E599                       		rol.l	#2,d1
00002E22 D040                       		add.w	d0,d0
00002E24 5240                       		addq.w	#1,d0
00002E26 9240                       		sub.w	d0,d1
00002E28 6400                       		bcc.s	loc_2C9A
00002E2A D240                       		add.w	d0,d1
00002E2C 5340                       		subq.w	#1,d0
00002E2E 51CA FFF0                  		dbf	d2,loc_2C80
00002E32 E248                       		lsr.w	#1,d0
00002E34 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E38 4E75                       		rts	
00002E3A                            ; ===========================================================================
00002E3A                            
00002E3A                            loc_2C9A:
00002E3A 5240                       		addq.w	#1,d0
00002E3C 51CA FFE2                  		dbf	d2,loc_2C80
00002E40 E248                       		lsr.w	#1,d0
00002E42 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E46 4E75                       		rts	
00002E48                            
00002E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E48                            
00002E48                            
00002E48                            CalcAngle:
00002E48 48E7 1800                  		movem.l	d3-d4,-(sp)
00002E4C 7600                       		moveq	#0,d3
00002E4E 7800                       		moveq	#0,d4
00002E50 3601                       		move.w	d1,d3
00002E52 3802                       		move.w	d2,d4
00002E54 8843                       		or.w	d3,d4
00002E56 6700                       		beq.s	loc_2D04
00002E58 3802                       		move.w	d2,d4
00002E5A 4A43                       		tst.w	d3
00002E5C 6A00 0000                  		bpl.w	loc_2CC2
00002E60 4443                       		neg.w	d3
00002E62                            
00002E62                            loc_2CC2:
00002E62 4A44                       		tst.w	d4
00002E64 6A00 0000                  		bpl.w	loc_2CCA
00002E68 4444                       		neg.w	d4
00002E6A                            
00002E6A                            loc_2CCA:
00002E6A B843                       		cmp.w	d3,d4
00002E6C 6400 0000                  		bcc.w	loc_2CDC
00002E70 E18C                       		lsl.l	#8,d4
00002E72 88C3                       		divu.w	d3,d4
00002E74 7000                       		moveq	#0,d0
00002E76 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002E7A 6000                       		bra.s	loc_2CE6
00002E7C                            ; ===========================================================================
00002E7C                            
00002E7C                            loc_2CDC:				; XREF: CalcAngle
00002E7C E18B                       		lsl.l	#8,d3
00002E7E 86C4                       		divu.w	d4,d3
00002E80 7040                       		moveq	#$40,d0
00002E82 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002E86                            
00002E86                            loc_2CE6:
00002E86 4A41                       		tst.w	d1
00002E88 6A00 0000                  		bpl.w	loc_2CF2
00002E8C 4440                       		neg.w	d0
00002E8E 0640 0080                  		addi.w	#$80,d0
00002E92                            
00002E92                            loc_2CF2:
00002E92 4A42                       		tst.w	d2
00002E94 6A00 0000                  		bpl.w	loc_2CFE
00002E98 4440                       		neg.w	d0
00002E9A 0640 0100                  		addi.w	#$100,d0
00002E9E                            
00002E9E                            loc_2CFE:
00002E9E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EA2 4E75                       		rts	
00002EA4                            ; ===========================================================================
00002EA4                            
00002EA4                            loc_2D04:				; XREF: CalcAngle
00002EA4 303C 0040                  		move.w	#$40,d0
00002EA8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EAC 4E75                       		rts	
00002EAE                            ; End of function CalcAngle
00002EAE                            
00002EAE                            ; ===========================================================================
00002EAE                            
00002EAE                            Angle_Data:	incbin	misc\angles.bin
00002FB0                            
00002FB0                            NoticeScreen: include	"_notice\code.asm"
00002FB0                            
00002FB0                            ;NoticeScreen:				; XREF: GameModeArray
00002FB0 103C 00E4                      move.b  #$E4,d0                 ; set music ID to stop
00002FB4 4EB8 12CE                      jsr    PlaySound_Special.w      ; play music ID
00002FB8 4EB8 1FE6                      jsr    Pal_FadeFrom.w           ; fade palette out
00002FBC 46FC 2700                      move   #$2700,sr                ; disable interrupts
00002FC0 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00002FC4 0200 00BF                      andi.b #%10111111,d0            ; set display to "disable"
00002FC8 33C0 FFC0 0004                 move.w d0,($FFC00004).l         ; save to VDP
00002FCE 4EB8 15E4                      jsr    ClearPLC.w               ; clear pattern load cues
00002FD2 4EB8 11C0                      jsr    ClearScreen.w            ; clear VRAM planes, sprite buffer and scroll buffer
00002FD6 43F9 00FF 0000                 lea    ($FF0000).l,a1           ; load dump location
00002FDC 41F9 0000 0000                 lea    Map_Notice.l,a0           ; load compressed mappings address
00002FE2 303C 0140                      move.w #320,d0                  ; prepare pattern index value to patch to mappings
00002FE6 4EB8 1724                      jsr    EniDec.w                 ; decompress and dump
00002FEA 203C 6000 0003                 move.l #$60000003,d0            ; prepare VRAM write mode address (Plane B E000)
00002FF0 7227                           moveq  #$28-$01,d1              ; set map box draw width
00002FF2 741D                           moveq  #$1E-$01,d2              ; set map box draw height
00002FF4 6100 E374                      bsr.w  ShowVDPGraphics          ; flush mappings to VRAM
00002FF8 4DF9 FFC0 0004                 lea    ($FFC00004).l,a6         ; load VDP control port
00002FFE 2CBC 6800 0000                 move.l #$68000000,(a6)          ; set VDP to VRAM write mode (Address 2800)
00003004 41F9 0000 0000                 lea    Art_Notice.l,a0            ; load compressed art address
0000300A 4EB8 145E                      jsr    NemDec.w                 ; decompress and dump to VDP memory
0000300E 41F9 0000 0000                 lea    Pal_Notice.l,a0         ; load palette address
00003014 43F8 FB80                      lea    ($FFFFFB80).w,a1         ; load palette buffer address
00003018 700F                           moveq  #$F,d0                   ; set repeat times
0000301A                            
0000301A                            
0000301A                            NoticeScreen_PalLoop:
0000301A 22D8                           move.l (a0)+,(a1)+              ; copy colours to buffer
0000301C 22D8                           move.l (a0)+,(a1)+              ; ''
0000301E 51C8 FFFA                      dbf    d0,NoticeScreen_PalLoop    ; repeat until done
00003022 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00003026 0000 0040                      ori.b  #%01000000,d0            ; set display to "enable"
0000302A 3C80                           move.w d0,(a6)                  ; save to VDP
0000302C 4EB8 1F30                      jsr    Pal_FadeTo               ; fade palette in
00003030                            ;	move.b	#$E1,d0
00003030                            ;	bsr.w	PlaySound_Special ; play "Notice"	sound
00003030                            
00003030                            Notice_MainLoop:
00003030 11FC 0002 F62A                 move.b #2,($FFFFF62A).w         ; set V-blank routine to run
00003036 4EB8 2B48                      jsr    DelayProgram.w           ; wait for V-blank (decreases "Demo_Time_left")
0000303A 4A38 F605                      tst.b  ($FFFFF605).w            ; has player 1 pressed start button?
0000303E 6B00                           bmi.s  Notice_GotoTitle           ; if so, branch
00003040 31FC 003C F614                 move.w #1*60,($FFFFF614).w      ; set delay time (3 seconds on a 60hz system)
00003046 4A78 F614                      tst.w  ($FFFFF614).w            ; has the delay time finished?
0000304A 66E4                           bne.s  Notice_MainLoop            ; if not, branch
0000304C                            
0000304C                            Notice_GotoTitle:
0000304C 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to title screen
00003052 4E75                       		rts	
00003054                            ; ---------------------------------------------------------------------------
00003054                            Art_Notice:		incbin	"_notice\Art.bin"		; rename to your needs
0000460C                            			even
0000460C                            Map_Notice:		incbin	"_notice\Map.bin"		; rename to your needs
000046AE 00                         			even
000046AE                            Pal_Notice:		incbin	"_notice\Palette.bin"		; rename to your needs
0000472E                            			even
0000472E                            			even
0000472E                            
0000472E                            ; ===========================================================================
0000472E                            ; ---------------------------------------------------------------------------
0000472E                            ; Sega screen
0000472E                            ; ---------------------------------------------------------------------------
0000472E                            
0000472E                            SegaScreen:				; XREF: GameModeArray
0000472E 103C 00E4                  		move.b	#$E4,d0
00004732 6100 CB9A                  		bsr.w	PlaySound_Special ; stop music
00004736 6100 CEAC                  		bsr.w	ClearPLC
0000473A 6100 D8AA                  		bsr.w	Pal_FadeFrom
0000473E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004744 3CBC 8004                  		move.w	#$8004,(a6)
00004748 3CBC 8230                  		move.w	#$8230,(a6)
0000474C 3CBC 8407                  		move.w	#$8407,(a6)
00004750 3CBC 8700                  		move.w	#$8700,(a6)
00004754 3CBC 8B00                  		move.w	#$8B00,(a6)
00004758 4238 F64E                  		clr.b	($FFFFF64E).w
0000475C 46FC 2700                  		move	#$2700,sr
00004760 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004764 0200 00BF                  		andi.b	#$BF,d0
00004768 33C0 00C0 0004             		move.w	d0,($C00004).l
0000476E 6100 CA50                  		bsr.w	ClearScreen
00004772 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000477C 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004782 6100 CCDA                  		bsr.w	NemDec
00004786 43F9 00FF 0000             		lea	($FF0000).l,a1
0000478C 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004792 303C 0000                  		move.w	#0,d0
00004796 6100 CF8C                  		bsr.w	EniDec
0000479A 43F9 00FF 0000             		lea	($FF0000).l,a1
000047A0 203C 6510 0003             		move.l	#$65100003,d0
000047A6 7217                       		moveq	#$17,d1
000047A8 7407                       		moveq	#7,d2
000047AA 6100 CBBE                  		bsr.w	ShowVDPGraphics
000047AE 43F9 00FF 0180             		lea	($FF0180).l,a1
000047B4 203C 4000 0003             		move.l	#$40000003,d0
000047BA 7227                       		moveq	#$27,d1
000047BC 741B                       		moveq	#$1B,d2
000047BE 6100 CBAA                  		bsr.w	ShowVDPGraphics
000047C2 7000                       		moveq	#0,d0
000047C4 6100 DAEA                  		bsr.w	PalLoad2	; load Sega logo Palette
000047C8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000047CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000047D4 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000047DA 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000047E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000047E4 0000 0040                  		ori.b	#$40,d0
000047E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000047EE                            
000047EE                            Sega_WaitPalette:
000047EE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000047F4 6100 E352                  		bsr.w	DelayProgram
000047F8 6100 D9A8                  		bsr.w	PalCycle_Sega
000047FC 66F0                       		bne.s	Sega_WaitPalette
000047FE                            
000047FE 103C 00E1                  		move.b	#$E1,d0
00004802 6100 CACA                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00004806 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000480C 6100 E33A                  		bsr.w	DelayProgram
00004810 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004816                            
00004816                            Sega_WaitEnd:
00004816 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000481C 6100 E32A                  		bsr.w	DelayProgram
00004820 4A78 F614                  		tst.w	($FFFFF614).w
00004824 6700                       		beq.s	Sega_GotoTitle
00004826 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000482C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000482E                            
0000482E                            Sega_GotoTitle:
0000482E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00004834                            	;	rts	
00004834 4EF9 0000 0000             		jmp	Owarisoft
0000483A                            ; ===========================================================================
0000483A                            
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            ; Title	screen
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            
0000483A                            TitleScreen:				; XREF: GameModeArray
0000483A 103C 00E4                  		move.b	#$E4,d0
0000483E 6100 CA8E                  		bsr.w	PlaySound_Special ; stop music
00004842 6100 CDA0                  		bsr.w	ClearPLC
00004846 6100 D79E                  		bsr.w	Pal_FadeFrom
0000484A 46FC 2700                  		move	#$2700,sr
0000484E 6100 C9FE                  		bsr.w	InitMegaPCM
00004852 4DF9 00C0 0004             		lea	($C00004).l,a6
00004858 3CBC 8004                  		move.w	#$8004,(a6)
0000485C 3CBC 8230                  		move.w	#$8230,(a6)
00004860 3CBC 8407                  		move.w	#$8407,(a6)
00004864 3CBC 9001                  		move.w	#$9001,(a6)
00004868 3CBC 9200                  		move.w	#$9200,(a6)
0000486C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004870 3CBC 8720                  		move.w	#$8720,(a6)
00004874 4238 F64E                  		clr.b	($FFFFF64E).w
00004878 6100 C946                  		bsr.w	ClearScreen
0000487C 43F8 D000                  		lea	($FFFFD000).w,a1
00004880 7000                       		moveq	#0,d0
00004882 323C 07FF                  		move.w	#$7FF,d1
00004886                            
00004886                            Title_ClrObjRam:
00004886 22C0                       		move.l	d0,(a1)+
00004888 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000488C                            
0000488C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004896 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000489C 6100 CBC0                  		bsr.w	NemDec
000048A0 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000048AA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000048B0 6100 CBAC                  		bsr.w	NemDec
000048B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000048BA 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000048C0 303C 0000                  		move.w	#0,d0
000048C4 6100 CE5E                  		bsr.w	EniDec
000048C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000048CE 203C 4000 0003             		move.l	#$40000003,d0
000048D4 7227                       		moveq	#$27,d1
000048D6 741B                       		moveq	#$1B,d2
000048D8 6100 CA90                  		bsr.w	ShowVDPGraphics
000048DC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000048E0 7000                       		moveq	#0,d0
000048E2 323C 001F                  		move.w	#$1F,d1
000048E6                            
000048E6                            Title_ClrPalette:
000048E6 22C0                       		move.l	d0,(a1)+
000048E8 51C9 FFFC                  		dbf	d1,Title_ClrPalette ; fill Palette with 0	(black)
000048EC                            
000048EC 7003                       		moveq	#3,d0		; load Sonic's Palette
000048EE 6100 D9A4                  		bsr.w	PalLoad1
000048F2 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000048F8 4EB9 0000 0000             		jsr	ObjectsLoad
000048FE 4EB9 0000 0000             		jsr	BuildSprites
00004904 6100 D62A                  		bsr.w	Pal_FadeTo
00004908 46FC 2700                  		move	#$2700,sr
0000490C 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00004916 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000491C 6100 CB40                  		bsr.w	NemDec
00004920 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000492A 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004930 6100 CB2C                  		bsr.w	NemDec
00004934 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000493E 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00004944 6100 CB18                  		bsr.w	NemDec
00004948 4DF9 00C0 0000             		lea	($C00000).l,a6
0000494E 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00004956 4BF9 0000 058E             		lea	(Art_Text).l,a5
0000495C 323C 028F                  		move.w	#$28F,d1
00004960                            
00004960                            Title_LoadText:
00004960 3C9D                       		move.w	(a5)+,(a6)
00004962 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00004966                            
00004966 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000496C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00004972 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00004978 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000497E 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00004984 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable Palette cycling
0000498A 6100 0000                  		bsr.w	LevelSizeLoad
0000498E 6100 0000                  		bsr.w	DeformBgLayer
00004992 43F8 B000                  		lea	($FFFFB000).w,a1
00004996 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	TS 16x16 mappings
0000499C 303C 0000                  		move.w	#0,d0
000049A0 6100 CD82                  		bsr.w	EniDec
000049A4 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
000049AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000049B0 6100 CEF0                  		bsr.w	KosDec
000049B4 6100 0000                  		bsr.w	LevelLayoutLoad
000049B8 6100 D62C                  		bsr.w	Pal_FadeFrom
000049BC 46FC 2700                  		move	#$2700,sr
000049C0 6100 C7FE                  		bsr.w	ClearScreen
000049C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000049CA 4DF9 00C0 0000             		lea	($C00000).l,a6
000049D0 47F8 F708                  		lea	($FFFFF708).w,a3
000049D4 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000049D8 343C 6000                  		move.w	#$6000,d2
000049DC 6100 0000                  		bsr.w	LoadTilesFromStart2
000049E0 43F9 00FF 0000             		lea	($FF0000).l,a1
000049E6 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000049EC 303C 0000                  		move.w	#0,d0
000049F0 6100 CD32                  		bsr.w	EniDec
000049F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000049FA 203C 4206 0003             		move.l	#$42060003,d0
00004A00 7221                       		moveq	#$21,d1
00004A02 7415                       		moveq	#$15,d2
00004A04 6100 C964                  		bsr.w	ShowVDPGraphics
00004A08 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004A12 41F9 0000 0000             		lea	(Nem_TIT_1st).l,a0 ; load TZ patterns
00004A18 6100 CA44                  		bsr.w	NemDec
00004A1C 7001                       		moveq	#1,d0		; load title screen Palette
00004A1E 6100 D874                  		bsr.w	PalLoad1
00004A22 103C 008A                  		move.b	#$8A,d0		; play title screen music
00004A26 6100 C8A6                  		bsr.w	PlaySound_Special
00004A2A 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00004A30 31FC 0654 F614             		move.w	#$654,($FFFFF614).w ; run title	screen for $178	frames
00004A36 43F8 D080                  		lea	($FFFFD080).w,a1
00004A3A 7000                       		moveq	#0,d0
00004A3C 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00004A40                            
00004A40                            Title_ClrObjRam2:
00004A40 22C0                       		move.l	d0,(a1)+
00004A42 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00004A46                            
00004A46 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A4C                            
00004A4C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A52 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00004A58 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00004A5E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00004A64 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00004A6A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00004A70 4EB9 0000 0000             		jsr	ObjectsLoad
00004A76 6100 0000                  		bsr.w	DeformBgLayer
00004A7A 4EB9 0000 0000             		jsr	BuildSprites
00004A80 7000                       		moveq	#0,d0
00004A82 6100 CB34                  		bsr.w	LoadPLC2
00004A86 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004A8C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00004A92 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A96 0000 0040                  		ori.b	#$40,d0
00004A9A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AA0 6100 D48E                  		bsr.w	Pal_FadeTo
00004AA4                            
00004AA4                            loc_317C:
00004AA4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004AAA 6100 E09C                  		bsr.w	DelayProgram
00004AAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004AB4 6100 0000                  		bsr.w	DeformBgLayer
00004AB8 4EB9 0000 0000             		jsr	BuildSprites
00004ABE 6100 D020                  		bsr.w	PalCycle_Title
00004AC2 6100 CB2E                  		bsr.w	RunPLC_RAM
00004AC6 3038 D008                  		move.w	($FFFFD008).w,d0
00004ACA 5440                       		addq.w	#2,d0
00004ACC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00004AD0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00004AD4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00004AD6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00004ADC 4E75                       		rts	
00004ADE                            ; ===========================================================================
00004ADE                            
00004ADE                            Title_ChkRegion:
00004ADE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00004AE2 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00004AE4 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00004AEA 6000                       		bra.s	Title_EnterCheat
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            Title_RegionJ:				; XREF: Title_ChkRegion
00004AEC 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00004AF2                            
00004AF2                            Title_EnterCheat:			; XREF: Title_ChkRegion
00004AF2 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00004AF6 D0C0                       		adda.w	d0,a0
00004AF8 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00004AFC 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00004B00 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004B02 6600                       		bne.s	loc_3210	; if not, branch
00004B04 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00004B08 4A00                       		tst.b	d0
00004B0A 6600                       		bne.s	Title_CountC
00004B0C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00004B10 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00004B14 E249                       		lsr.w	#1,d1
00004B16 0241 0003                  		andi.w	#3,d1
00004B1A 6700                       		beq.s	Title_PlayRing
00004B1C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00004B20 6A00                       		bpl.s	Title_PlayRing
00004B22 7201                       		moveq	#1,d1
00004B24 1181 1001                  		move.b	d1,1(a0,d1.w)
00004B28                            
00004B28                            Title_PlayRing:
00004B28 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004B2E 21FC 0101 0101 FFE0        		move.l	#$01010101,($FFFFFFE0).w	; activate all cheats
00004B36 103C 00BF                  		move.b	#$BF,d0		; play continue sound when code is entered
00004B3A 6100 C792                  		bsr.w	PlaySound_Special
00004B3E 6000                       		bra.s	Title_CountC
00004B40                            ; ===========================================================================
00004B40                            
00004B40                            loc_3210:				; XREF: Title_EnterCheat
00004B40 4A00                       		tst.b	d0
00004B42 6700                       		beq.s	Title_CountC
00004B44 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00004B4A 6700                       		beq.s	Title_CountC
00004B4C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004B52                            
00004B52                            Title_CountC:
00004B52 1038 F605                  		move.b	($FFFFF605).w,d0
00004B56 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00004B5A 6700                       		beq.s	loc_3230	; if not, branch
00004B5C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00004B60                            
00004B60                            loc_3230:
00004B60 4A78 F614                  		tst.w	($FFFFF614).w
00004B64 6700 0000                  		beq.w	Demo
00004B68 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00004B6E 6700 FF34                  		beq.w	loc_317C	; if not, branch
00004B72                            
00004B72                            Title_ChkLevSel:
00004B72 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00004B76 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B7A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00004B80 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B84 7000                       		moveq	#$00,d0				; clear d0
00004B86 11C0 FF32                  		move.b	d0,($FFFFFF32).w		; clear background strip 1 draw flags
00004B8A 11C0 FF34                  		move.b	d0,($FFFFFF34).w		; clear background strip 2 draw flags
00004B8E 11C0 FF30                  		move.b	d0,($FFFFFF30).w		; clear foreground strip draw flag
00004B92 7002                       		moveq	#2,d0
00004B94 6100 D71A                  		bsr.w	PalLoad2	; load level select Palette
00004B98 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004B9C 7000                       		moveq	#0,d0
00004B9E 323C 00DF                  		move.w	#$DF,d1
00004BA2                            
00004BA2                            Title_ClrScroll:
00004BA2 22C0                       		move.l	d0,(a1)+
00004BA4 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00004BA8                            
00004BA8 21C0 F616                  		move.l	d0,($FFFFF616).w
00004BAC 46FC 2700                  		move	#$2700,sr
00004BB0 4DF9 00C0 0000             		lea	($C00000).l,a6
00004BB6 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00004BC0 323C 03FF                  		move.w	#$3FF,d1
00004BC4                            
00004BC4                            Title_ClrVram:
00004BC4 2C80                       		move.l	d0,(a6)
00004BC6 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00004BCA                            
00004BCA 6100 0000                  		bsr.w	LevSelTextLoad
00004BCE                            
00004BCE                            ; ---------------------------------------------------------------------------
00004BCE                            ; Level	Select
00004BCE                            ; ---------------------------------------------------------------------------
00004BCE                            
00004BCE                            LevelSelect:
00004BCE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004BD4 6100 DF72                  		bsr.w	DelayProgram
00004BD8 6100 0000                  		bsr.w	LevSelControls
00004BDC 6100 CA14                  		bsr.w	RunPLC_RAM
00004BE0 4AB8 F680                  		tst.l	($FFFFF680).w
00004BE4 66E8                       		bne.s	LevelSelect
00004BE6 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004BEC 67E0                       		beq.s	LevelSelect	; if not, branch
00004BEE 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004BF2 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004BF6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004BF8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004BFC 0640 0080                  		addi.w	#$80,d0
00004C00 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00004C04 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00004C06 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004C0A 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004C0C 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004C10 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004C12                            
00004C12                            LevSel_NoCheat:
00004C12 0C40 0097                  		cmpi.w	#$97,d0		; is sound $80-$94 being played?
00004C16 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00004C18 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00004C1C 65B0                       		bcs.s	LevelSelect	; if yes, branch
00004C1E                            
00004C1E                            LevSel_PlaySnd:
00004C1E 6100 C6AE                  		bsr.w	PlaySound_Special
00004C22 60AA                       		bra.s	LevelSelect
00004C24                            ; ===========================================================================
00004C24                            
00004C24                            LevSel_Ending:				; XREF: LevelSelect
00004C24 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00004C2A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00004C30 4E75                       		rts	
00004C32                            ; ===========================================================================
00004C32                            
00004C32                            LevSel_Credits:				; XREF: LevelSelect
00004C32 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00004C38 103C 0091                  		move.b	#$91,d0
00004C3C 6100 C690                  		bsr.w	PlaySound_Special ; play credits music
00004C40 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00004C46 4E75                       		rts	
00004C48                            ; ===========================================================================
00004C48                            
00004C48                            LevSel_Level_SS:			; XREF: LevelSelect
00004C48 D040                       		add.w	d0,d0
00004C4A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00004C4E 6B00 FF7E                  		bmi.w	LevelSelect
00004C52 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00004C56 6600                       		bne.s	LevSel_Level	; if not, branch
00004C58 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004C5E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00004C62 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C68 7000                       		moveq	#0,d0
00004C6A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C6E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C72 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C76 4E75                       		rts	
00004C78                            ; ===========================================================================
00004C78                            
00004C78                            LevSel_Level:				; XREF: LevSel_Level_SS
00004C78 0240 3FFF                  		andi.w	#$3FFF,d0
00004C7C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00004C80                            
00004C80                            PlayLevel:				; XREF: ROM:00003246j ...
00004C80 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C86 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C8C 7000                       		moveq	#0,d0
00004C8E 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004C92 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C96 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C9A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C9E 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00004CA2 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00004CA6 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00004CAA 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00004CAE 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00004CB2 103C 00E0                  		move.b	#$E0,d0
00004CB6 6100 C616                  		bsr.w	PlaySound_Special ; fade out music
00004CBA 4E75                       		rts	
00004CBC                            ; ===========================================================================
00004CBC                            ; ---------------------------------------------------------------------------
00004CBC                            ; Level	select - level pointers
00004CBC                            ; ---------------------------------------------------------------------------
00004CBC                            LSelectPointers:
00004CBC                            		incbin	misc\ls_point.bin
00004CE6                            		even
00004CE6                            ; ---------------------------------------------------------------------------
00004CE6                            ; Level	select codes
00004CE6                            ; ---------------------------------------------------------------------------
00004CE6                            LevelSelectCode_J:
00004CE6                            		incbin	misc\ls_jcode.bin
00004CEC                            		even
00004CEC                            
00004CEC                            LevelSelectCode_US:
00004CEC                            		incbin	misc\ls_ucode.bin
00004CF2                            		even
00004CF2                            ; ===========================================================================
00004CF2                            
00004CF2                            ; ---------------------------------------------------------------------------
00004CF2                            ; Demo mode
00004CF2                            ; ---------------------------------------------------------------------------
00004CF2                            
00004CF2                            Demo:					; XREF: TitleScreen
00004CF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004CF8                            
00004CF8                            loc_33B6:				; XREF: loc_33E4
00004CF8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004CFE 6100 DE48                  		bsr.w	DelayProgram
00004D02 6100 0000                  		bsr.w	DeformBgLayer
00004D06 6100 CDB8                  		bsr.w	PalCycle_Load
00004D0A 6100 C8E6                  		bsr.w	RunPLC_RAM
00004D0E 3038 D008                  		move.w	($FFFFD008).w,d0
00004D12 5440                       		addq.w	#2,d0
00004D14 31C0 D008                  		move.w	d0,($FFFFD008).w
00004D18 0C40 1C00                  		cmpi.w	#$1C00,d0
00004D1C 6500                       		bcs.s	loc_33E4
00004D1E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00004D24 4E75                       		rts	
00004D26                            ; ===========================================================================
00004D26                            
00004D26                            loc_33E4:				; XREF: Demo
00004D26 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00004D2C 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
00004D30 4A78 F614                  		tst.w	($FFFFF614).w
00004D34 6600 FFC2                  		bne.w	loc_33B6
00004D38 103C 00E0                  		move.b	#$E0,d0
00004D3C 6100 C590                  		bsr.w	PlaySound_Special ; fade out music
00004D40 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00004D44 0240 0007                  		andi.w	#7,d0
00004D48 D040                       		add.w	d0,d0
00004D4A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004D4E 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004D52 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004D56 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00004D5C 6500                       		bcs.s	loc_3422	; if yes, branch
00004D5E 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004D64                            
00004D64                            loc_3422:
00004D64 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00004D6A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00004D70 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004D74 6600                       		bne.s	Demo_Level	; if not, branch
00004D76 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004D7C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004D80 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004D84                            
00004D84                            Demo_Level:
00004D84 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004D8A 7000                       		moveq	#0,d0
00004D8C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004D90 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004D94 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004D98 4E75                       		rts	
00004D9A                            ; ===========================================================================
00004D9A                            ; ---------------------------------------------------------------------------
00004D9A                            ; Levels used in demos
00004D9A                            ; ---------------------------------------------------------------------------
00004D9A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004DA2                            		even
00004DA2                            
00004DA2                            ; ---------------------------------------------------------------------------
00004DA2                            ; Subroutine to	change what you're selecting in the level select
00004DA2                            ; ---------------------------------------------------------------------------
00004DA2                            
00004DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DA2                            
00004DA2                            
00004DA2                            LevSelControls:				; XREF: LevelSelect
00004DA2 1238 F605                  		move.b	($FFFFF605).w,d1
00004DA6 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004DAA 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004DAC 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004DB0 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004DB2                            
00004DB2                            LevSel_UpDown:
00004DB2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004DB8 1238 F604                  		move.b	($FFFFF604).w,d1
00004DBC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00004DC0 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004DC2 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004DC6 0801 0000                  		btst	#0,d1		; is up	pressed?
00004DCA 6700                       		beq.s	LevSel_Down	; if not, branch
00004DCC 5340                       		subq.w	#1,d0		; move up 1 selection
00004DCE 6400                       		bcc.s	LevSel_Down
00004DD0 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004DD2                            
00004DD2                            LevSel_Down:
00004DD2 0801 0001                  		btst	#1,d1		; is down pressed?
00004DD6 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004DD8 5240                       		addq.w	#1,d0		; move down 1 selection
00004DDA 0C40 0015                  		cmpi.w	#$15,d0
00004DDE 6500                       		bcs.s	LevSel_Refresh
00004DE0 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004DE2                            
00004DE2                            LevSel_Refresh:
00004DE2 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00004DE6 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004DEA 4E75                       		rts	
00004DEC                            ; ===========================================================================
00004DEC                            
00004DEC                            LevSel_SndTest:				; XREF: LevSelControls
00004DEC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00004DF2 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004DF4 1238 F605                  		move.b	($FFFFF605).w,d1
00004DF8 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00004DFC 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004DFE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004E02 0801 0002                  		btst	#2,d1		; is left pressed?
00004E06 6700                       		beq.s	LevSel_Right	; if not, branch
00004E08 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004E0A 6400                       		bcc.s	LevSel_Right
00004E0C 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004E0E                            
00004E0E                            LevSel_Right:
00004E0E 0801 0003                  		btst	#3,d1		; is right pressed?
00004E12 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004E14 5240                       		addq.w	#1,d0		; add 1	to sound test
00004E16 0C40 0050                  		cmpi.w	#$50,d0
00004E1A 6500                       		bcs.s	LevSel_Refresh2
00004E1C 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004E1E                            
00004E1E                            LevSel_Refresh2:
00004E1E 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00004E22 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004E26                            
00004E26                            LevSel_NoMove:
00004E26 4E75                       		rts	
00004E28                            ; End of function LevSelControls
00004E28                            
00004E28                            ; ---------------------------------------------------------------------------
00004E28                            ; Subroutine to load level select text
00004E28                            ; ---------------------------------------------------------------------------
00004E28                            
00004E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E28                            
00004E28                            
00004E28                            LevSelTextLoad:				; XREF: TitleScreen
00004E28 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E2E 4DF9 00C0 0000             		lea	($C00000).l,a6
00004E34 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00004E3A 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004E3E 7214                       		moveq	#$14,d1		; number of lines of text
00004E40                            
00004E40                            loc_34FE:				; XREF: LevSelTextLoad+26j
00004E40 2D44 0004                  		move.l	d4,4(a6)
00004E44 6100 0000                  		bsr.w	LevSel_ChgLine
00004E48 0684 0080 0000             		addi.l	#$800000,d4
00004E4E 51C9 FFF0                  		dbf	d1,loc_34FE
00004E52 7000                       		moveq	#0,d0
00004E54 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004E58 3200                       		move.w	d0,d1
00004E5A 283C 6210 0003             		move.l	#$62100003,d4
00004E60 EF48                       		lsl.w	#7,d0
00004E62 4840                       		swap	d0
00004E64 D880                       		add.l	d0,d4
00004E66 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E6C E749                       		lsl.w	#3,d1
00004E6E 3001                       		move.w	d1,d0
00004E70 D241                       		add.w	d1,d1
00004E72 D240                       		add.w	d0,d1
00004E74 D2C1                       		adda.w	d1,a1
00004E76 363C C680                  		move.w	#$C680,d3
00004E7A 2D44 0004                  		move.l	d4,4(a6)
00004E7E 6100 0000                  		bsr.w	LevSel_ChgLine
00004E82 363C E680                  		move.w	#$E680,d3
00004E86 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004E8C 6600                       		bne.s	loc_3550
00004E8E 363C C680                  		move.w	#$C680,d3
00004E92                            
00004E92                            loc_3550:
00004E92 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00004E9C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004EA0 0640 0080                  		addi.w	#$80,d0
00004EA4 1400                       		move.b	d0,d2
00004EA6 E808                       		lsr.b	#4,d0
00004EA8 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EAC 1002                       		move.b	d2,d0
00004EAE 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EB2 4E75                       		rts	
00004EB4                            ; End of function LevSelTextLoad
00004EB4                            
00004EB4                            
00004EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EB4                            
00004EB4                            
00004EB4                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004EB4 0240 000F                  		andi.w	#$F,d0
00004EB8 0C00 000A                  		cmpi.b	#$A,d0
00004EBC 6500                       		bcs.s	loc_3580
00004EBE 5E00                       		addi.b	#7,d0
00004EC0                            
00004EC0                            loc_3580:
00004EC0 D043                       		add.w	d3,d0
00004EC2 3C80                       		move.w	d0,(a6)
00004EC4 4E75                       		rts	
00004EC6                            ; End of function LevSel_ChgSnd
00004EC6                            
00004EC6                            
00004EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EC6                            
00004EC6                            
00004EC6                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004EC6 7417                       		moveq	#$17,d2		; number of characters per line
00004EC8                            
00004EC8                            loc_3588:
00004EC8 7000                       		moveq	#0,d0
00004ECA 1019                       		move.b	(a1)+,d0
00004ECC 6A00                       		bpl.s	loc_3598
00004ECE 3CBC 0000                  		move.w	#0,(a6)
00004ED2 51CA FFF4                  		dbf	d2,loc_3588
00004ED6 4E75                       		rts	
00004ED8                            ; ===========================================================================
00004ED8                            
00004ED8                            loc_3598:				; XREF: LevSel_ChgLine
00004ED8 D043                       		add.w	d3,d0
00004EDA 3C80                       		move.w	d0,(a6)
00004EDC 51CA FFEA                  		dbf	d2,loc_3588
00004EE0 4E75                       		rts	
00004EE2                            ; End of function LevSel_ChgLine
00004EE2                            
00004EE2                            ; ===========================================================================
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            ; Level	select menu text
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            LevelMenuText:	incbin	misc\menutext.bin
000050DA                            		even
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            ; Music	playlist
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            MusicList_Levels:
000050DA 8383 8383                  		dc.b $83, $83, $83, $83
000050DE 8282 8286                  		dc.b $82, $82, $82, $86
000050E2 8197 8197                  		dc.b $81, $97, $81, $97
000050E6 8484 8484                  		dc.b $84, $84, $84, $84
000050EA 8585 8585                  		dc.b $85, $85, $85, $85
000050EE 8686 8D86                  		dc.b $86, $86, $8D, $86
000050F2                            		even
000050F2                            MusicList_SpecialStages:
000050F2 8989 8989 8989             		dc.b $89, $89, $89, $89, $89, $89
000050F8                            		even
000050F8                            MusicList_Credits:
000050F8 9191                       		dc.b $91, $91
000050FA                            		even
000050FA                            MusicList_Endings:
000050FA 8B8B                       		dc.b $8B, $8B
000050FC                            		even
000050FC                            MusicList_Bosses:
000050FC 8C8C 8C8C 8C8C             		dc.b $8C, $8C, $8C, $8C, $8C, $8C
00005102                            		even
00005102                            ; ===========================================================================
00005102                            
00005102                            ; ---------------------------------------------------------------------------
00005102                            ; Level
00005102                            ; ---------------------------------------------------------------------------
00005102                            
00005102                            Level:					; XREF: GameModeArray
00005102 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005108 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000510C 6B00                       		bmi.s	loc_37B6
0000510E 103C 00E0                  		move.b	#$E0,d0
00005112 6100 C1BA                  		bsr.w	PlaySound_Special ; fade out music
00005116                            
00005116                            loc_37B6:
00005116 6100 C4CC                  		bsr.w	ClearPLC
0000511A 6100 CECA                  		bsr.w	Pal_FadeFrom
0000511E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005122 6B00                       		bmi.s	Level_ClrRam
00005124 46FC 2700                  		move	#$2700,sr
00005128 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005132 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005138 6100 C324                  		bsr.w	NemDec
0000513C 46FC 2300                  		move	#$2300,sr
00005140 7000                       		moveq	#0,d0
00005142 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005146 E948                       		lsl.w	#4,d0
00005148 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000514E 45F2 0000                  		lea	(a2,d0.w),a2
00005152 7000                       		moveq	#0,d0
00005154 1012                       		move.b	(a2),d0
00005156 6700                       		beq.s	loc_37FC
00005158 6100 C42C                  		bsr.w	LoadPLC		; load level patterns
0000515C                            
0000515C                            loc_37FC:
0000515C 7001                       		moveq	#1,d0
0000515E 6100 C426                  		bsr.w	LoadPLC		; load standard	patterns
00005162                            
00005162                            Level_ClrRam:
00005162 43F8 D000                  		lea	($FFFFD000).w,a1
00005166 7000                       		moveq	#0,d0
00005168 323C 07FF                  		move.w	#$7FF,d1
0000516C                            
0000516C                            Level_ClrObjRam:
0000516C 22C0                       		move.l	d0,(a1)+
0000516E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00005172                            
00005172 43F8 F628                  		lea	($FFFFF628).w,a1
00005176 7000                       		moveq	#0,d0
00005178 323C 0015                  		move.w	#$15,d1
0000517C                            
0000517C                            Level_ClrVars:
0000517C 22C0                       		move.l	d0,(a1)+
0000517E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00005182                            
00005182 43F8 F700                  		lea	($FFFFF700).w,a1
00005186 7000                       		moveq	#0,d0
00005188 323C 003F                  		move.w	#$3F,d1
0000518C                            
0000518C                            Level_ClrVars2:
0000518C 22C0                       		move.l	d0,(a1)+
0000518E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00005192                            
00005192 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005196 7000                       		moveq	#0,d0
00005198 323C 0047                  		move.w	#$47,d1
0000519C                            
0000519C                            Level_ClrVars3:
0000519C 22C0                       		move.l	d0,(a1)+
0000519E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000051A2                            
000051A2 46FC 2700                  		move	#$2700,sr
000051A6 6100 C018                  		bsr.w	ClearScreen
000051AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000051B0 3CBC 8B03                  		move.w	#$8B03,(a6)
000051B4 3CBC 8230                  		move.w	#$8230,(a6)
000051B8 3CBC 8407                  		move.w	#$8407,(a6)
000051BC 3CBC 857C                  		move.w	#$857C,(a6)
000051C0 3CBC 9001                  		move.w	#$9001,(a6)
000051C4 3CBC 8004                  		move.w	#$8004,(a6)
000051C8 3CBC 8720                  		move.w	#$8720,(a6)
000051CC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000051D2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051D6                            		
000051D6 4278 C800                  		clr.w	($FFFFC800).w
000051DA 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000051E2                            		
000051E2 11FC 0000 FFBC             		move.b	#0,($FFFFFFBC).w				; Clear sonic drowned flag
000051E8                            		
000051E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000051EE 6600                       		bne.s	Level_LoadPal	; if not, branch
000051F0 3CBC 8014                  		move.w	#$8014,(a6)
000051F4 7000                       		moveq	#0,d0
000051F6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000051FA D040                       		add.w	d0,d0
000051FC 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00005202 3031 0000                  		move.w	(a1,d0.w),d0
00005206 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000520A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000520E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00005212 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00005216 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000521A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00005220                            
00005220                            Level_LoadPal:
00005220 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005226 46FC 2300                  		move	#$2300,sr
0000522A 7003                       		moveq	#3,d0
0000522C 6100 D082                  		bsr.w	PalLoad2	; load Sonic's Palette line
00005230 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005236 6600                       		bne.s	Level_GetBgm	; if not, branch
00005238 700F                       		moveq	#$F,d0		; Palette number	$0F (LZ)
0000523A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00005240 6600                       		bne.s	Level_WaterPal	; if not, branch
00005242 7010                       		moveq	#$10,d0		; Palette number	$10 (SBZ3)
00005244                            
00005244                            Level_WaterPal:
00005244 6100 D082                  		bsr.w	PalLoad3_Water	; load underwater Palette (see d0)
00005248 4A38 FE30                  		tst.b	($FFFFFE30).w
0000524C 6700                       		beq.s	Level_GetBgm
0000524E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00005254                            
00005254                            Level_GetBgm:
00005254 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005258 6B00 0000                  		bmi.w	loc_3946
0000525C                            		
0000525C 7000                       		moveq	#0,d0
0000525E 3238 FE10                  		move.w	($FFFFFE10).w,d1
00005262 E419                       		ror.b	#2,d1
00005264 EC49                       		lsr.w	#6,d1
00005266 43F9 0000 50DA             		lea	(MusicList_Levels).l,a1
0000526C 1031 1000                  		move.b	(a1,d1.w),d0		; get d0-th entry from the playlist
00005270 11C0 FFFE                  		move.b	d0,($FFFFFFFE).w	; put music number in RAM for later use
00005274 4EB9 0000 0000             		jsr	CtrlLevelMusic
0000527A                            		
0000527A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w 	; load title	card object
00005280                            
00005280                            Level_TtlCard:
00005280 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005286 6100 D8C0                  		bsr.w	DelayProgram
0000528A 4EB9 0000 0000             		jsr	ObjectsLoad
00005290 4EB9 0000 0000             		jsr	BuildSprites
00005296 6100 C35A                  		bsr.w	RunPLC_RAM
0000529A 3038 D108                  		move.w	($FFFFD108).w,d0
0000529E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000052A2 66DC                       		bne.s	Level_TtlCard	; if not, branch
000052A4 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000052A8 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000052AA 4EB9 0000 0000             		jsr	Hud_Base
000052B0                            
000052B0                            loc_3946:
000052B0 7003                       		moveq	#3,d0
000052B2 6100 CFE0                  		bsr.w	PalLoad1	; load Sonic's Palette line
000052B6 6100 0000                  		bsr.w	LevelSizeLoad
000052BA 6100 0000                  		bsr.w	DeformBgLayer
000052BE 08F8 0002 F754             		bset	#2,($FFFFF754).w
000052C4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and Palettes
000052C8 6100 0000                  		bsr.w	LoadTilesFromStart
000052CC 4EB9 0000 0000             		jsr	FloorLog_Unk
000052D2 6100 0000                  		bsr.w	ColIndexLoad
000052D6 6100 0000                  		bsr.w	LZWaterEffects
000052DA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000052E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000052E4 6B00                       		bmi.s	Level_ChkDebug
000052E6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000052EC                            
000052EC                            Level_ChkDebug:
000052EC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000052F0 6700                       		beq.s	Level_ChkWater	; if not, branch
000052F2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000052F8 6700                       		beq.s	Level_ChkWater	; if not, branch
000052FA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005300                            
00005300                            Level_ChkWater:
00005300 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00005306 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000530C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005312 6600                       		bne.s	Level_LoadObj	; if not, branch
00005314 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000531A 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00005320 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00005326 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000532C                            
0000532C                            Level_LoadObj:
0000532C 4EB9 0000 0000             		jsr	ObjPosLoad
00005332 4EB9 0000 0000             		jsr	ObjectsLoad
00005338 4EB9 0000 0000             		jsr	BuildSprites
0000533E 7000                       		moveq	#0,d0
00005340 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00005344 6600                       		bne.s	loc_39E8	; if yes, branch
00005346 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000534A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000534E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00005352                            
00005352                            loc_39E8:
00005352 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00005356 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000535A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000535E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00005362 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005366 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000536A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000536E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005372 6100 0000                  		bsr.w	OscillateNumInit
00005376 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000537C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00005382 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00005388 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000538E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00005394 7000                       		moveq	#0,d0
00005396 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000539A E548                       		lsl.w	#2,d0
0000539C 2271 0000                  		movea.l	(a1,d0.w),a1
000053A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000053A4 6A00                       		bpl.s	Level_Demo	; if yes, branch
000053A6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000053AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000053B0 5340                       		subq.w	#1,d0
000053B2 E548                       		lsl.w	#2,d0
000053B4 2271 0000                  		movea.l	(a1,d0.w),a1
000053B8                            
000053B8                            Level_Demo:
000053B8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000053BE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000053C2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000053C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000053CC 6A00                       		bpl.s	Level_ChkWaterPal
000053CE 31FC 021C F614             		move.w	#540,($FFFFF614).w
000053D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000053DA 6600                       		bne.s	Level_ChkWaterPal
000053DC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000053E2                            
000053E2                            Level_ChkWaterPal:
000053E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000053E8 6600                       		bne.s	Level_Delay	; if not, branch
000053EA 700B                       		moveq	#$B,d0		; Palette $0B (LZ underwater)
000053EC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000053F2 6600                       		bne.s	Level_WaterPal2	; if not, branch
000053F4 700D                       		moveq	#$D,d0		; Palette $0D (SBZ3 underwater)
000053F6                            
000053F6                            Level_WaterPal2:
000053F6 6100 CEEC                  		bsr.w	PalLoad4_Water
000053FA                            
000053FA                            Level_Delay:
000053FA 323C 0003                  		move.w	#3,d1
000053FE                            
000053FE                            Level_DelayLoop:
000053FE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005404 6100 D742                  		bsr.w	DelayProgram
00005408 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000540C                            
0000540C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00005412 6100 CB22                  		bsr.w	Pal_FadeTo2
00005416 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000541A 6B00                       		bmi.s	Level_ClrCardArt
0000541C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00005420 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00005424 5838 D124                  		addq.b	#4,($FFFFD124).w
00005428 5838 D164                  		addq.b	#4,($FFFFD164).w
0000542C 6000                       		bra.s	Level_StartGame
0000542E                            ; ===========================================================================
0000542E                            
0000542E                            Level_ClrCardArt:
0000542E 7002                       		moveq	#2,d0
00005430 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
00005436 7000                       		moveq	#0,d0
00005438 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000543C 0640 0015                  		addi.w	#$15,d0
00005440 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00005446                            
00005446                            Level_StartGame:
00005446 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000544C                            
0000544C                            ; ---------------------------------------------------------------------------
0000544C                            ; Main level loop (when	all title card and loading sequences are finished)
0000544C                            ; ---------------------------------------------------------------------------
0000544C                            
0000544C                            Level_MainLoop:
0000544C 6100 BEA4                  		bsr.w	PauseGame
00005450 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005456 6100 D6F0                  		bsr.w	DelayProgram
0000545A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000545E 6100 0000                  		bsr.w	MoveSonicInDemo
00005462 6100 0000                  		bsr.w	LZWaterEffects
00005466 4EB9 0000 0000             		jsr	ObjectsLoad
0000546C 4A78 FE08                  		tst.w	($FFFFFE08).w
00005470 6600                       		bne.s	loc_3B10
00005472 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005478 6400                       		bcc.s	loc_3B14
0000547A                            
0000547A                            loc_3B10:
0000547A 6100 0000                  		bsr.w	DeformBgLayer
0000547E                            
0000547E                            loc_3B14:
0000547E 4EB9 0000 0000             		jsr	BuildSprites
00005484 4EB9 0000 0000             		jsr	ObjPosLoad
0000548A 6100 C634                  		bsr.w	PalCycle_Load
0000548E 6100 C162                  		bsr.w	RunPLC_RAM
00005492 6100 0000                  		bsr.w	OscillateNumDo
00005496 6100 0000                  		bsr.w	ChangeRingFrame
0000549A 6100 0000                  		bsr.w	SignpostArtLoad
0000549E 4EB9 0000 0000             		jsr	CtrlLevelMusic
000054A4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054AA 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000054AC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000054B0 6600 FC50                  		bne.w	Level		; if yes, branch
000054B4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000054BA 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000054BE 4E75                       		rts	
000054C0                            ; ===========================================================================
000054C0                            
000054C0                            Level_ChkDemo:				; XREF: Level_MainLoop
000054C0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054C4 6600                       		bne.s	Level_EndDemo	; if yes, branch
000054C6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000054CA 6700                       		beq.s	Level_EndDemo	; if not, branch
000054CC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054D2 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000054D6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054DC 4E75                       		rts	
000054DE                            ; ===========================================================================
000054DE                            
000054DE                            Level_EndDemo:				; XREF: Level_ChkDemo
000054DE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000054E4 6600                       		bne.s	loc_3B88	; if not, branch
000054E6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054EC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054F0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000054F2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000054F8                            
000054F8                            loc_3B88:
000054F8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000054FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005504 4278 F794                  		clr.w	($FFFFF794).w
00005508                            
00005508                            loc_3B98:
00005508 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000550E 6100 D638                  		bsr.w	DelayProgram
00005512 6100 0000                  		bsr.w	MoveSonicInDemo
00005516 4EB9 0000 0000             		jsr	ObjectsLoad
0000551C 4EB9 0000 0000             		jsr	BuildSprites
00005522 4EB9 0000 0000             		jsr	ObjPosLoad
00005528 5378 F794                  		subq.w	#1,($FFFFF794).w
0000552C 6A00                       		bpl.s	loc_3BC8
0000552E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005534 6100 CAD6                  		bsr.w	Pal_FadeOut
00005538                            
00005538                            loc_3BC8:
00005538 4A78 F614                  		tst.w	($FFFFF614).w
0000553C 66CA                       		bne.s	loc_3B98
0000553E 4E75                       		rts	
00005540                            ; ===========================================================================
00005540                            ; ---------------------------------------------------------------------------
00005540                            ; Subroutine to	do special water effects in Labyrinth Zone
00005540                            ; ---------------------------------------------------------------------------
00005540                            
00005540                            LZWaterEffects:				; XREF: Level
00005540 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00005546 6600                       		bne.s	locret_3C28	; if not, branch
00005548 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000554E 6400                       		bcc.s	LZMoveWater
00005550 6100 0000                  		bsr.w	LZWindTunnels
00005554 6100 0000                  		bsr.w	LZWaterSlides
00005558 6100 0000                  		bsr.w	LZDynamicWater
0000555C                            
0000555C                            LZMoveWater:
0000555C 4238 F64E                  		clr.b	($FFFFF64E).w
00005560 7000                       		moveq	#0,d0
00005562 1038 FE60                  		move.b	($FFFFFE60).w,d0
00005566 E248                       		lsr.w	#1,d0
00005568 D078 F648                  		add.w	($FFFFF648).w,d0
0000556C 31C0 F646                  		move.w	d0,($FFFFF646).w
00005570 3038 F646                  		move.w	($FFFFF646).w,d0
00005574 9078 F704                  		sub.w	($FFFFF704).w,d0
00005578 6400                       		bcc.s	loc_3C1A
0000557A 4A40                       		tst.w	d0
0000557C 6A00                       		bpl.s	loc_3C1A
0000557E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00005584 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000558A                            
0000558A                            loc_3C1A:
0000558A 0C40 00DF                  		cmpi.w	#$DF,d0
0000558E 6500                       		bcs.s	loc_3C24
00005590 303C 00DF                  		move.w	#$DF,d0
00005594                            
00005594                            loc_3C24:
00005594 11C0 F625                  		move.b	d0,($FFFFF625).w
00005598                            
00005598                            locret_3C28:
00005598 4E75                       		rts	
0000559A                            ; ===========================================================================
0000559A                            ; ---------------------------------------------------------------------------
0000559A                            ; Labyrinth default water heights
0000559A                            ; ---------------------------------------------------------------------------
0000559A                            WaterHeight:	incbin	misc\lz_heigh.bin
000055A2                            		even
000055A2                            ; ===========================================================================
000055A2                            
000055A2                            ; ---------------------------------------------------------------------------
000055A2                            ; Labyrinth dynamic water routines
000055A2                            ; ---------------------------------------------------------------------------
000055A2                            
000055A2                            LZDynamicWater:				; XREF: LZWaterEffects
000055A2 7000                       		moveq	#0,d0
000055A4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000055A8 D040                       		add.w	d0,d0
000055AA 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000055AE 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000055B2 7200                       		moveq	#0,d1
000055B4 1238 F64C                  		move.b	($FFFFF64C).w,d1
000055B8 3038 F64A                  		move.w	($FFFFF64A).w,d0
000055BC 9078 F648                  		sub.w	($FFFFF648).w,d0
000055C0 6700                       		beq.s	locret_3C5A
000055C2 6400                       		bcc.s	loc_3C56
000055C4 4441                       		neg.w	d1
000055C6                            
000055C6                            loc_3C56:
000055C6 D378 F648                  		add.w	d1,($FFFFF648).w
000055CA                            
000055CA                            locret_3C5A:
000055CA 4E75                       		rts	
000055CC                            ; ===========================================================================
000055CC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000055CE 0000                       		dc.w DynWater_LZ2-DynWater_Index
000055D0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000055D2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000055D4                            ; ===========================================================================
000055D4                            
000055D4                            DynWater_LZ1:				; XREF: DynWater_Index
000055D4 3038 F700                  		move.w	($FFFFF700).w,d0
000055D8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000055DC 6600                       		bne.s	loc_3CD0
000055DE 323C 00B8                  		move.w	#$B8,d1
000055E2 0C40 0600                  		cmpi.w	#$600,d0
000055E6 6500                       		bcs.s	loc_3CB4
000055E8 323C 0108                  		move.w	#$108,d1
000055EC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000055F2 6500                       		bcs.s	loc_3CBA
000055F4 0C40 0C00                  		cmpi.w	#$C00,d0
000055F8 6500                       		bcs.s	loc_3CB4
000055FA 323C 0318                  		move.w	#$318,d1
000055FE 0C40 1080                  		cmpi.w	#$1080,d0
00005602 6500                       		bcs.s	loc_3CB4
00005604 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000560A 323C 05C8                  		move.w	#$5C8,d1
0000560E 0C40 1380                  		cmpi.w	#$1380,d0
00005612 6500                       		bcs.s	loc_3CB4
00005614 323C 03A8                  		move.w	#$3A8,d1
00005618 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000561C 6600                       		bne.s	loc_3CB4
0000561E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00005624                            
00005624                            loc_3CB4:
00005624 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005628 4E75                       		rts	
0000562A                            ; ===========================================================================
0000562A                            
0000562A                            loc_3CBA:				; XREF: DynWater_LZ1
0000562A 0C40 0C80                  		cmpi.w	#$C80,d0
0000562E 65F4                       		bcs.s	loc_3CB4
00005630 323C 00E8                  		move.w	#$E8,d1
00005634 0C40 1500                  		cmpi.w	#$1500,d0
00005638 65EA                       		bcs.s	loc_3CB4
0000563A 323C 0108                  		move.w	#$108,d1
0000563E 60E4                       		bra.s	loc_3CB4
00005640                            ; ===========================================================================
00005640                            
00005640                            loc_3CD0:				; XREF: DynWater_LZ1
00005640 5302                       		subq.b	#1,d2
00005642 6600                       		bne.s	locret_3CF4
00005644 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000564A 6400                       		bcc.s	locret_3CF4
0000564C 323C 03A8                  		move.w	#$3A8,d1
00005650 0C40 1300                  		cmpi.w	#$1300,d0
00005654 6500                       		bcs.s	loc_3CF0
00005656 323C 0108                  		move.w	#$108,d1
0000565A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00005660                            
00005660                            loc_3CF0:
00005660 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005664                            
00005664                            locret_3CF4:
00005664 4E75                       		rts	
00005666                            ; ===========================================================================
00005666                            
00005666                            DynWater_LZ2:				; XREF: DynWater_Index
00005666 3038 F700                  		move.w	($FFFFF700).w,d0
0000566A 323C 0328                  		move.w	#$328,d1
0000566E 0C40 0500                  		cmpi.w	#$500,d0
00005672 6500                       		bcs.s	loc_3D12
00005674 323C 03C8                  		move.w	#$3C8,d1
00005678 0C40 0B00                  		cmpi.w	#$B00,d0
0000567C 6500                       		bcs.s	loc_3D12
0000567E 323C 0428                  		move.w	#$428,d1
00005682                            
00005682                            loc_3D12:
00005682 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005686 4E75                       		rts	
00005688                            ; ===========================================================================
00005688                            
00005688                            DynWater_LZ3:				; XREF: DynWater_Index
00005688 3038 F700                  		move.w	($FFFFF700).w,d0
0000568C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00005690 6600                       		bne.s	loc_3D5E
00005692 323C 0900                  		move.w	#$900,d1
00005696 0C40 0600                  		cmpi.w	#$600,d0
0000569A 6500                       		bcs.s	loc_3D54
0000569C 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000056A2 6500                       		bcs.s	loc_3D54
000056A4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056AA 6400                       		bcc.s	loc_3D54
000056AC 323C 04C8                  		move.w	#$4C8,d1
000056B0 21FC 0000 0000 A400        		move.l	#Level_LZ3,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
000056B8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000056BE 303C 00B7                  		move.w	#$B7,d0
000056C2 6100 BC0A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000056C6                            
000056C6                            loc_3D54:
000056C6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000056CA 31C1 F648                  		move.w	d1,($FFFFF648).w
000056CE 4E75                       		rts	
000056D0                            ; ===========================================================================
000056D0                            
000056D0                            loc_3D5E:				; XREF: DynWater_LZ3
000056D0 5302                       		subq.b	#1,d2
000056D2 6600                       		bne.s	loc_3DA8
000056D4 323C 04C8                  		move.w	#$4C8,d1
000056D8 0C40 0770                  		cmpi.w	#$770,d0
000056DC 6500                       		bcs.s	loc_3DA2
000056DE 323C 0308                  		move.w	#$308,d1
000056E2 0C40 1400                  		cmpi.w	#$1400,d0
000056E6 6500                       		bcs.s	loc_3DA2
000056E8 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000056EE 6700                       		beq.s	loc_3D8E
000056F0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056F6 6400                       		bcc.s	loc_3D8E
000056F8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000056FE 6400                       		bcc.s	loc_3DA2
00005700                            
00005700                            loc_3D8E:
00005700 323C 0508                  		move.w	#$508,d1
00005704 31C1 F648                  		move.w	d1,($FFFFF648).w
00005708 0C40 1770                  		cmpi.w	#$1770,d0
0000570C 6500                       		bcs.s	loc_3DA2
0000570E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00005714                            
00005714                            loc_3DA2:
00005714 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005718 4E75                       		rts	
0000571A                            ; ===========================================================================
0000571A                            
0000571A                            loc_3DA8:
0000571A 5302                       		subq.b	#1,d2
0000571C 6600                       		bne.s	loc_3DD2
0000571E 323C 0508                  		move.w	#$508,d1
00005722 0C40 1860                  		cmpi.w	#$1860,d0
00005726 6500                       		bcs.s	loc_3DCC
00005728 323C 0188                  		move.w	#$188,d1
0000572C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005730 6400                       		bcc.s	loc_3DC6
00005732 B278 F648                  		cmp.w	($FFFFF648).w,d1
00005736 6600                       		bne.s	loc_3DCC
00005738                            
00005738                            loc_3DC6:
00005738 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000573E                            
0000573E                            loc_3DCC:
0000573E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005742 4E75                       		rts	
00005744                            ; ===========================================================================
00005744                            
00005744                            loc_3DD2:
00005744 5302                       		subq.b	#1,d2
00005746 6600                       		bne.s	loc_3E0E
00005748 323C 0188                  		move.w	#$188,d1
0000574C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005750 6500                       		bcs.s	loc_3E04
00005752 323C 0900                  		move.w	#$900,d1
00005756 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000575A 6500                       		bcs.s	loc_3E04
0000575C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00005762 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00005768 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000576E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00005774 4E75                       		rts	
00005776                            ; ===========================================================================
00005776                            
00005776                            loc_3E04:
00005776 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000577A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000577E 4E75                       		rts	
00005780                            ; ===========================================================================
00005780                            
00005780                            loc_3E0E:
00005780 0C40 1E00                  		cmpi.w	#$1E00,d0
00005784 6500                       		bcs.s	locret_3E1A
00005786 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000578C                            
0000578C                            locret_3E1A:
0000578C 4E75                       		rts	
0000578E                            ; ===========================================================================
0000578E                            
0000578E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000578E 323C 0228                  		move.w	#$228,d1
00005792 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00005798 6500                       		bcs.s	loc_3E2C
0000579A 323C 04C8                  		move.w	#$4C8,d1
0000579E                            
0000579E                            loc_3E2C:
0000579E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000057A2 4E75                       		rts
000057A4                            
000057A4                            ; ---------------------------------------------------------------------------
000057A4                            ; Labyrinth Zone "wind tunnels"	subroutine
000057A4                            ; ---------------------------------------------------------------------------
000057A4                            
000057A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057A4                            
000057A4                            
000057A4                            LZWindTunnels:				; XREF: LZWaterEffects
000057A4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000057A8 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000057AC 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000057B2 7000                       		moveq	#0,d0
000057B4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000057B8 E748                       		lsl.w	#3,d0
000057BA D4C0                       		adda.w	d0,a2
000057BC 7200                       		moveq	#0,d1
000057BE 4A38 FE11                  		tst.b	($FFFFFE11).w
000057C2 6600                       		bne.s	loc_3E56
000057C4 7201                       		moveq	#1,d1
000057C6 514A                       		subq.w	#8,a2
000057C8                            
000057C8                            loc_3E56:
000057C8 43F8 D000                  		lea	($FFFFD000).w,a1
000057CC                            
000057CC                            LZWind_Loop:
000057CC 3029 0008                  		move.w	8(a1),d0
000057D0 B052                       		cmp.w	(a2),d0
000057D2 6500 0000                  		bcs.w	loc_3EF4
000057D6 B06A 0004                  		cmp.w	4(a2),d0
000057DA 6400 0000                  		bcc.w	loc_3EF4
000057DE 3429 000C                  		move.w	$C(a1),d2
000057E2 B46A 0002                  		cmp.w	2(a2),d2
000057E6 6500                       		bcs.s	loc_3EF4
000057E8 B46A 0006                  		cmp.w	6(a2),d2
000057EC 6400                       		bcc.s	loc_3EF4
000057EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000057F2 0200 003F                  		andi.b	#$3F,d0
000057F6 6600                       		bne.s	loc_3E90
000057F8 303C 00D0                  		move.w	#$D0,d0
000057FC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rushing water sound
00005802                            
00005802                            loc_3E90:
00005802 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00005806 6600 0000                  		bne.w	locret_3F0A
0000580A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00005810 6400                       		bcc.s	loc_3F06
00005812 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00005818 0440 0080                  		subi.w	#$80,d0
0000581C B052                       		cmp.w	(a2),d0
0000581E 6400                       		bcc.s	LZWind_Move
00005820 7002                       		moveq	#2,d0
00005822 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00005828 6600                       		bne.s	loc_3EBA
0000582A 4440                       		neg.w	d0
0000582C                            
0000582C                            loc_3EBA:
0000582C D169 000C                  		add.w	d0,$C(a1)
00005830                            
00005830                            LZWind_Move:
00005830 5869 0008                  		addq.w	#4,8(a1)
00005834 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000583A 337C 0000 0012             		move.w	#0,$12(a1)
00005840 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00005846 08E9 0001 0022             		bset	#1,$22(a1)
0000584C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00005852 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00005854 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00005858                            
00005858                            LZWind_MoveDown:
00005858 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000585E 6700                       		beq.s	locret_3EF2	; if not, branch
00005860 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00005864                            
00005864                            locret_3EF2:
00005864 4E75                       		rts	
00005866                            ; ===========================================================================
00005866                            
00005866                            loc_3EF4:				; XREF: LZWindTunnels
00005866 504A                       		addq.w	#8,a2
00005868 51C9 FF62                  		dbf	d1,LZWind_Loop
0000586C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00005870 6700                       		beq.s	locret_3F0A
00005872 137C 0000 001C             		move.b	#0,$1C(a1)
00005878                            
00005878                            loc_3F06:
00005878 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000587C                            
0000587C                            locret_3F0A:
0000587C 4E75                       		rts	
0000587E                            ; End of function LZWindTunnels
0000587E                            
0000587E                            ; ===========================================================================
0000587E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00005886 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00005898 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000058A6                            					; XREF: LZWindTunnels
000058A6                            		even
000058A6                            
000058A6                            ; ---------------------------------------------------------------------------
000058A6                            ; Labyrinth Zone water slide subroutine
000058A6                            ; ---------------------------------------------------------------------------
000058A6                            
000058A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058A6                            
000058A6                            
000058A6                            LZWaterSlides:				; XREF: LZWaterEffects
000058A6 43F8 D000                  		lea	($FFFFD000).w,a1
000058AA 0829 0001 0022             		btst	#1,$22(a1)
000058B0 6600                       		bne.s	loc_3F6A
000058B2 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
000058B6 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
000058BA 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
000058BE E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
000058C0 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
000058C2 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
000058C6 D041                       		add.w	d1,d0					; MJ: add together
000058C8 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
000058CC 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
000058D0 45FA 0000                  		lea	Slide_Chunks(pc),a2
000058D4 7200                       		moveq	#$00,d1					; MJ: clear d2
000058D6 6000 0000                  		bra	LZLoadChunk				; MJ: continue
000058DA                            
000058DA                            LZFindChunk:
000058DA B002                       		cmp.b	d2,d0					; MJ: does the chunk match?
000058DC 6700 0000                  		beq	LZSlide_Move				; MJ: if so, branch
000058E0 5241                       		addq.w	#$01,d1					; MJ: increase counter
000058E2                            
000058E2                            LZLoadChunk:
000058E2 141A                       		move.b	(a2)+,d2				; MJ: load chunk ID
000058E4 66F4                       		bne	LZFindChunk				; MJ: if it's not null, branch
000058E6                            
000058E6                            loc_3F6A:
000058E6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000058EA 6700                       		beq.s	locret_3F7A
000058EC 337C 0005 003E             		move.w	#5,$3E(a1)
000058F2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000058F6                            
000058F6                            locret_3F7A:
000058F6 4E75                       		rts	
000058F8                            ; ===========================================================================
000058F8                            
000058F8                            LZSlide_Move:				; XREF: LZWaterSlides
000058F8 0C41 0003                  		cmpi.w	#3,d1
000058FC 6400                       		bcc.s	loc_3F84
000058FE 4E71                       		nop	
00005900                            
00005900                            loc_3F84:
00005900 08A9 0000 0022             		bclr	#0,$22(a1)
00005906 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
0000590A 1340 0014                  		move.b	d0,$14(a1)
0000590E 6A00                       		bpl.s	loc_3F9A
00005910 08E9 0000 0022             		bset	#0,$22(a1)
00005916                            
00005916                            loc_3F9A:
00005916 4229 0015                  		clr.b	$15(a1)
0000591A 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00005920 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00005926 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000592A 0200 001F                  		andi.b	#$1F,d0
0000592E 6600                       		bne.s	locret_3FBE
00005930 303C 00D0                  		move.w	#$D0,d0
00005934 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play water sound
0000593A                            
0000593A                            locret_3FBE:
0000593A 4E75                       		rts	
0000593C                            ; End of function LZWaterSlides
0000593C                            
0000593C                            ; ===========================================================================
0000593C                            ; ---------------------------------------------------------------------------
0000593C 0506 090A                  Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
00005940 FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
00005944 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
00005948 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
0000594C 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
00005950 17                         		dc.b	$17
00005951 00                         		dc.b	$00					; MJ: End marker
00005952                            		even
00005952                            ; ---------------------------------------------------------------------------
00005952 0A0A 0A0A                  Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
00005956 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
0000595A 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
0000595E F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
00005962 F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
00005966 F5                         		dc.b	$F5
00005968 00                         		even
00005968                            ; ---------------------------------------------------------------------------
00005968                            ; ===========================================================================
00005968                            ; ---------------------------------------------------------------------------
00005968                            ; Subroutine to	move Sonic in demo mode
00005968                            ; ---------------------------------------------------------------------------
00005968                            
00005968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005968                            
00005968                            
00005968                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00005968 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000596C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000596E 4E75                       		rts	
00005970                            ; ===========================================================================
00005970                            
00005970                            ; This is an unused subroutine for recording a demo
00005970                            
00005970                            MoveDemo_Record:
00005970 43F9 0008 0000             		lea	($80000).l,a1
00005976 3038 F790                  		move.w	($FFFFF790).w,d0
0000597A D2C0                       		adda.w	d0,a1
0000597C 1038 F604                  		move.b	($FFFFF604).w,d0
00005980 B011                       		cmp.b	(a1),d0
00005982 6600                       		bne.s	loc_3FFA
00005984 5229 0001                  		addq.b	#1,1(a1)
00005988 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000598E 6700                       		beq.s	loc_3FFA
00005990 4E75                       		rts	
00005992                            ; ===========================================================================
00005992                            
00005992                            loc_3FFA:				; XREF: MoveDemo_Record
00005992 1340 0002                  		move.b	d0,2(a1)
00005996 137C 0000 0003             		move.b	#0,3(a1)
0000599C 5478 F790                  		addq.w	#2,($FFFFF790).w
000059A0 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000059A6 4E75                       		rts	
000059A8                            ; ===========================================================================
000059A8                            
000059A8                            MoveDemo_On:				; XREF: MoveSonicInDemo
000059A8 4A38 F604                  		tst.b	($FFFFF604).w
000059AC 6A00                       		bpl.s	loc_4022
000059AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059B2 6B00                       		bmi.s	loc_4022
000059B4 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000059BA                            
000059BA                            loc_4022:
000059BA 43F9 0000 0000             		lea	(Demo_Index).l,a1
000059C0 7000                       		moveq	#0,d0
000059C2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000059C6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000059CC 6600                       		bne.s	loc_4038
000059CE 7006                       		moveq	#6,d0
000059D0                            
000059D0                            loc_4038:
000059D0 E548                       		lsl.w	#2,d0
000059D2 2271 0000                  		movea.l	(a1,d0.w),a1
000059D6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059DA 6A00                       		bpl.s	loc_4056
000059DC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000059E2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000059E6 5340                       		subq.w	#1,d0
000059E8 E548                       		lsl.w	#2,d0
000059EA 2271 0000                  		movea.l	(a1,d0.w),a1
000059EE                            
000059EE                            loc_4056:
000059EE 3038 F790                  		move.w	($FFFFF790).w,d0
000059F2 D2C0                       		adda.w	d0,a1
000059F4 1011                       		move.b	(a1),d0
000059F6 41F8 F604                  		lea	($FFFFF604).w,a0
000059FA 1200                       		move.b	d0,d1
000059FC 1428 FFFE                  		move.b	-2(a0),d2
00005A00 B500                       		eor.b	d2,d0
00005A02 10C1                       		move.b	d1,(a0)+
00005A04 C001                       		and.b	d1,d0
00005A06 10C0                       		move.b	d0,(a0)+
00005A08 5338 F792                  		subq.b	#1,($FFFFF792).w
00005A0C 6400                       		bcc.s	locret_407E
00005A0E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00005A14 5478 F790                  		addq.w	#2,($FFFFF790).w
00005A18                            
00005A18                            locret_407E:
00005A18 4E75                       		rts	
00005A1A                            ; End of function MoveSonicInDemo
00005A1A                            
00005A1A                            ; ===========================================================================
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            ; Demo sequence	pointers
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            Demo_Index:
00005A1A                            	include "_inc\Demo pointers for intro.asm"
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            ; Demo sequence	pointers
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A 0000 0000                  	dc.l Demo_GHZ
00005A1E 0000 0000                  	dc.l Demo_GHZ
00005A22 0000 0000                  	dc.l Demo_MZ
00005A26 0000 0000                  	dc.l Demo_MZ
00005A2A 0000 0000                  	dc.l Demo_SYZ
00005A2E 0000 0000                  	dc.l Demo_SYZ
00005A32 0000 0000                  	dc.l Demo_SS
00005A36 0000 0000                  	dc.l Demo_SS
00005A36 0000 0000                  	dc.l Demo_SS
00005A3A                            
00005A3A                            Demo_EndIndex:
00005A3A                            	include "_inc\Demo pointers for ending.asm"
00005A3A                            ; ---------------------------------------------------------------------------
00005A3A                            ; Demo (ending) sequence pointers
00005A3A                            ; ---------------------------------------------------------------------------
00005A3A 0000 0000                  	dc.l Demo_EndGHZ1
00005A3E 0000 0000                  	dc.l Demo_EndMZ
00005A42 0000 0000                  	dc.l Demo_EndSYZ
00005A46 0000 0000                  	dc.l Demo_EndLZ
00005A4A 0000 0000                  	dc.l Demo_EndSLZ
00005A4E 0000 0000                  	dc.l Demo_EndSBZ1
00005A52 0000 0000                  	dc.l Demo_EndSBZ2
00005A56 0000 0000                  	dc.l Demo_EndGHZ2
00005A56 0000 0000                  	dc.l Demo_EndGHZ2
00005A5A                            
00005A5A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005A6A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005A7A 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005A8A                            		even
00005A8A                            
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            ; Collision index loading subroutine
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            
00005A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A8A                            
00005A8A                            
00005A8A                            ColIndexLoad:				; XREF: Level
00005A8A 7000                       		moveq	#0,d0
00005A8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A90 E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
00005A92 21FB 0000 FFD0             		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
00005A98 5840                       		add.w	#$04,d0					; MJ: increase to next location
00005A9A 21FB 0000 FFD4             		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
00005AA0 4E75                       		rts	
00005AA2                            ; End of function ColIndexLoad
00005AA2                            
00005AA2                            ; ===========================================================================
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Collision index pointers
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ColPointers:
00005AA2                            	include "_inc\Collision index pointers.asm"
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Collision index pointers
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2 0000 0000                  	dc.l Col_GHZ_1
00005AA6 0000 0000                  	dc.l Col_GHZ_2
00005AAA 0000 0000                  	dc.l Col_LZ_1
00005AAE 0000 0000                  	dc.l Col_LZ_2
00005AB2 0000 0000                  	dc.l Col_MZ_1
00005AB6 0000 0000                  	dc.l Col_MZ_2
00005ABA 0000 0000                  	dc.l Col_SLZ_1
00005ABE 0000 0000                  	dc.l Col_SLZ_2
00005AC2 0000 0000                  	dc.l Col_SYZ_1
00005AC6 0000 0000                  	dc.l Col_SYZ_2
00005ACA 0000 0000                  	dc.l Col_SBZ_1
00005ACE 0000 0000                  	dc.l Col_SBZ_2
00005ACE 0000 0000                  	dc.l Col_SBZ_2
00005AD2                            
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            ; Oscillating number subroutine
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            
00005AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AD2                            
00005AD2                            
00005AD2                            OscillateNumInit:			; XREF: Level
00005AD2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005AD6 45F9 0000 0000             		lea	(Osc_Data).l,a2
00005ADC 7220                       		moveq	#$20,d1
00005ADE                            
00005ADE                            Osc_Loop:
00005ADE 32DA                       		move.w	(a2)+,(a1)+
00005AE0 51C9 FFFC                  		dbf	d1,Osc_Loop
00005AE4 4E75                       		rts	
00005AE6                            ; End of function OscillateNumInit
00005AE6                            
00005AE6                            ; ===========================================================================
00005AE6 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00005AEA 0000 0080                  		dc.w 0,	$80
00005AEE 0000 0080                  		dc.w 0,	$80
00005AF2 0000 0080                  		dc.w 0,	$80
00005AF6 0000 0080                  		dc.w 0,	$80
00005AFA 0000 0080                  		dc.w 0,	$80
00005AFE 0000 0080                  		dc.w 0,	$80
00005B02 0000 0080                  		dc.w 0,	$80
00005B06 0000 0080                  		dc.w 0,	$80
00005B0A 0000 50F0                  		dc.w 0,	$50F0
00005B0E 011E 2080                  		dc.w $11E, $2080
00005B12 00B4 3080                  		dc.w $B4, $3080
00005B16 010E 5080                  		dc.w $10E, $5080
00005B1A 01C2 7080                  		dc.w $1C2, $7080
00005B1E 0276 0080                  		dc.w $276, $80
00005B22 0000 0080                  		dc.w 0,	$80
00005B26 0000                       		dc.w 0
00005B28                            		even
00005B28                            
00005B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B28                            
00005B28                            
00005B28                            OscillateNumDo:				; XREF: Level
00005B28 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B2E 6400                       		bcc.s	locret_41C4
00005B30 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005B34 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00005B3A 3619                       		move.w	(a1)+,d3
00005B3C 720F                       		moveq	#$F,d1
00005B3E                            
00005B3E                            loc_4184:
00005B3E 341A                       		move.w	(a2)+,d2
00005B40 381A                       		move.w	(a2)+,d4
00005B42 0303                       		btst	d1,d3
00005B44 6600                       		bne.s	loc_41A4
00005B46 3029 0002                  		move.w	2(a1),d0
00005B4A D042                       		add.w	d2,d0
00005B4C 3340 0002                  		move.w	d0,2(a1)
00005B50 D151                       		add.w	d0,0(a1)
00005B52 B811                       		cmp.b	0(a1),d4
00005B54 6200                       		bhi.s	loc_41BA
00005B56 03C3                       		bset	d1,d3
00005B58 6000                       		bra.s	loc_41BA
00005B5A                            ; ===========================================================================
00005B5A                            
00005B5A                            loc_41A4:				; XREF: OscillateNumDo
00005B5A 3029 0002                  		move.w	2(a1),d0
00005B5E 9042                       		sub.w	d2,d0
00005B60 3340 0002                  		move.w	d0,2(a1)
00005B64 D151                       		add.w	d0,0(a1)
00005B66 B811                       		cmp.b	0(a1),d4
00005B68 6300                       		bls.s	loc_41BA
00005B6A 0383                       		bclr	d1,d3
00005B6C                            
00005B6C                            loc_41BA:
00005B6C 5849                       		addq.w	#4,a1
00005B6E 51C9 FFCE                  		dbf	d1,loc_4184
00005B72 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00005B76                            
00005B76                            locret_41C4:
00005B76 4E75                       		rts	
00005B78                            ; End of function OscillateNumDo
00005B78                            
00005B78                            ; ===========================================================================
00005B78 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00005B7C 0002 0018                  		dc.w 2,	$18
00005B80 0002 0020                  		dc.w 2,	$20
00005B84 0002 0030                  		dc.w 2,	$30
00005B88 0004 0020                  		dc.w 4,	$20
00005B8C 0008 0008                  		dc.w 8,	8
00005B90 0008 0040                  		dc.w 8,	$40
00005B94 0004 0040                  		dc.w 4,	$40
00005B98 0002 0050                  		dc.w 2,	$50
00005B9C 0002 0050                  		dc.w 2,	$50
00005BA0 0002 0020                  		dc.w 2,	$20
00005BA4 0003 0030                  		dc.w 3,	$30
00005BA8 0005 0050                  		dc.w 5,	$50
00005BAC 0007 0070                  		dc.w 7,	$70
00005BB0 0002 0010                  		dc.w 2,	$10
00005BB4 0002 0010                  		dc.w 2,	$10
00005BB8                            		even
00005BB8                            
00005BB8                            ; ---------------------------------------------------------------------------
00005BB8                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00005BB8                            ; ---------------------------------------------------------------------------
00005BB8                            
00005BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BB8                            
00005BB8                            
00005BB8                            ChangeRingFrame:			; XREF: Level
00005BB8 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00005BBC 6A00                       		bpl.s	loc_421C
00005BBE 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00005BC4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00005BC8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00005BCE                            
00005BCE                            loc_421C:
00005BCE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00005BD2 6A00                       		bpl.s	loc_4232
00005BD4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005BDA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00005BDE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00005BE4                            
00005BE4                            loc_4232:
00005BE4 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00005BE8 6A00                       		bpl.s	loc_4250
00005BEA 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00005BF0 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00005BF4 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005BFA 6500                       		bcs.s	loc_4250
00005BFC 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00005C02                            
00005C02                            loc_4250:
00005C02 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00005C06 6700                       		beq.s	locret_4272
00005C08 7000                       		moveq	#0,d0
00005C0A 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00005C0E D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00005C12 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00005C16 EF58                       		rol.w	#7,d0
00005C18 0240 0003                  		andi.w	#3,d0
00005C1C 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00005C20 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00005C24                            
00005C24                            locret_4272:
00005C24 4E75                       		rts	
00005C26                            ; End of function ChangeRingFrame
00005C26                            
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            ; End-of-act signpost pattern loading subroutine
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            
00005C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C26                            
00005C26                            
00005C26                            SignpostArtLoad:			; XREF: Level
00005C26 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005C2A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00005C2E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00005C34 6700                       		beq.s	Signpost_Exit	; if yes, branch
00005C36 3038 F700                  		move.w	($FFFFF700).w,d0
00005C3A 3238 F72A                  		move.w	($FFFFF72A).w,d1
00005C3E 0441 0100                  		subi.w	#$100,d1
00005C42 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005C44 6D00                       		blt.s	Signpost_Exit	; if not, branch
00005C46 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005C4A 6700                       		beq.s	Signpost_Exit
00005C4C B278 F728                  		cmp.w	($FFFFF728).w,d1
00005C50 6700                       		beq.s	Signpost_Exit
00005C52 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00005C56 7012                       		moveq	#$12,d0
00005C58 6000 B95E                  		bra.w	LoadPLC2	; load signpost	patterns
00005C5C                            ; ===========================================================================
00005C5C                            
00005C5C                            Signpost_Exit:
00005C5C 4E75                       		rts	
00005C5E                            ; End of function SignpostArtLoad
00005C5E                            
00005C5E                            ; ===========================================================================
00005C5E                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005CDE                            Demo_MZ:	incbin	demodata\i_mz.bin
00005E0E                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005E8E                            Demo_SS:	incbin	demodata\i_ss.bin
00005F8E                            ; ===========================================================================
00005F8E                            
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            ; Special Stage
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            
00005F8E                            SpecialStage:				; XREF: GameModeArray
00005F8E 303C 00CA                  		move.w	#$CA,d0
00005F92 6100 B33A                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005F96 6100 C17C                  		bsr.w	Pal_MakeFlash
00005F9A 46FC 2700                  		move	#$2700,sr
00005F9E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FA4 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FA8 3CBC 8004                  		move.w	#$8004,(a6)
00005FAC 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005FB2 3CBC 9011                  		move.w	#$9011,(a6)
00005FB6 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005FBA 0200 00BF                  		andi.b	#$BF,d0
00005FBE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FC4 6100 B1FA                  		bsr.w	ClearScreen
00005FC8 46FC 2300                  		move	#$2300,sr
00005FCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00005FD2 3ABC 8F01                  		move.w	#$8F01,(a5)
00005FD6 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005FDC 3ABC 9780                  		move.w	#$9780,(a5)
00005FE0 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005FE6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005FEE                            
00005FEE                            loc_463C:
00005FEE 3215                       		move.w	(a5),d1
00005FF0 0801 0001                  		btst	#1,d1
00005FF4 66F8                       		bne.s	loc_463C
00005FF6 3ABC 8F02                  		move.w	#$8F02,(a5)
00005FFA 6100 0000                  		bsr.w	SS_BGLoad
00005FFE 7014                       		moveq	#$14,d0
00006000 6100 B6F0                  		bsr.w	RunPLC_ROM	; load special stage patterns
00006004 43F8 D000                  		lea	($FFFFD000).w,a1
00006008 7000                       		moveq	#0,d0
0000600A 323C 07FF                  		move.w	#$7FF,d1
0000600E                            
0000600E                            SS_ClrObjRam:
0000600E 22C0                       		move.l	d0,(a1)+
00006010 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00006014                            
00006014 43F8 F700                  		lea	($FFFFF700).w,a1
00006018 7000                       		moveq	#0,d0
0000601A 323C 003F                  		move.w	#$3F,d1
0000601E                            
0000601E                            SS_ClrRam:
0000601E 22C0                       		move.l	d0,(a1)+
00006020 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00006024                            
00006024 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006028 7000                       		moveq	#0,d0
0000602A 323C 0027                  		move.w	#$27,d1
0000602E                            
0000602E                            SS_ClrRam2:
0000602E 22C0                       		move.l	d0,(a1)+
00006030 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00006034                            
00006034 43F8 AA00                  		lea	($FFFFAA00).w,a1
00006038 7000                       		moveq	#0,d0
0000603A 323C 007F                  		move.w	#$7F,d1
0000603E                            
0000603E                            SS_ClrNemRam:
0000603E 22C0                       		move.l	d0,(a1)+
00006040 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00006044                            
00006044 4238 F64E                  		clr.b	($FFFFF64E).w
00006048 4278 FE02                  		clr.w	($FFFFFE02).w
0000604C 700A                       		moveq	#$A,d0
0000604E 6100 C244                  		bsr.w	PalLoad1	; load special stage Palette
00006052 4EB9 0000 0000             		jsr	SS_Load
00006058 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00006060 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00006068 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000606E 6100 0000                  		bsr.w	PalCycle_SS
00006072 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00006076 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000607C                            		
0000607C 7000                       		moveq	#0,d0
0000607E 1038 FE16                  		move.b	($FFFFFE16).w,d0
00006082 4A00                       		tst.b	d0
00006084 6700                       		beq.s	SS_Num_Not_Zero
00006086 103C 0006                  		move.b	#6,d0
0000608A                            
0000608A                            SS_Num_Not_Zero:
0000608A 5340                       		subq.w	#1,d0
0000608C                            
0000608C 43F9 0000 50F2             		lea	(MusicList_SpecialStages).l,a1 ; load Music Playlist for Special Stages
00006092 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006096 6100 B22E                  		bsr.w	PlaySound	; play special stage BG	music
0000609A                            		
0000609A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000060A0 43F9 0000 5A1A             		lea	(Demo_Index).l,a1
000060A6 7006                       		moveq	#6,d0
000060A8 E548                       		lsl.w	#2,d0
000060AA 2271 0000                  		movea.l	(a1,d0.w),a1
000060AE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000060B4 5338 F792                  		subq.b	#1,($FFFFF792).w
000060B8 4278 FE20                  		clr.w	($FFFFFE20).w
000060BC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000060C0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000060C6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000060CC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000060D0 6700                       		beq.s	SS_NoDebug	; if not, branch
000060D2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000060D8 6700                       		beq.s	SS_NoDebug	; if not, branch
000060DA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000060E0                            
000060E0                            SS_NoDebug:
000060E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000060E4 0000 0040                  		ori.b	#$40,d0
000060E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000060EE 6100 BF78                  		bsr.w	Pal_MakeWhite
000060F2                            
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            ; Main Special Stage loop
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            
000060F2                            SS_MainLoop:
000060F2 6100 B1FE                  		bsr.w	PauseGame
000060F6 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000060FC 6100 CA4A                  		bsr.w	DelayProgram
00006100 6100 F866                  		bsr.w	MoveSonicInDemo
00006104 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000610A 4EB9 0000 0000             		jsr	ObjectsLoad
00006110 4EB9 0000 0000             		jsr	BuildSprites
00006116 4EB9 0000 0000             		jsr	SS_ShowLayout
0000611C 6100 0000                  		bsr.w	SS_BGAnimate
00006120 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006124 6700                       		beq.s	SS_ChkEnd	; if not, branch
00006126 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000612A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000612E                            
0000612E                            SS_ChkEnd:
0000612E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00006134 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00006138                            
00006138 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000613C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00006140 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006146 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000614C 6500                       		bcs.s	SS_End		; if not, branch
0000614E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00006152                            
00006152                            SS_End:
00006152 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00006158 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000615E 4278 F794                  		clr.w	($FFFFF794).w
00006162                            
00006162                            SS_EndLoop:
00006162 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00006168 6100 C9DE                  		bsr.w	DelayProgram
0000616C 6100 F7FA                  		bsr.w	MoveSonicInDemo
00006170 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006176 4EB9 0000 0000             		jsr	ObjectsLoad
0000617C 4EB9 0000 0000             		jsr	BuildSprites
00006182 4EB9 0000 0000             		jsr	SS_ShowLayout
00006188 6100 0000                  		bsr.w	SS_BGAnimate
0000618C 5378 F794                  		subq.w	#1,($FFFFF794).w
00006190 6A00                       		bpl.s	loc_47D4
00006192 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006198 6100 BF9A                  		bsr.w	Pal_ToWhite
0000619C                            
0000619C                            loc_47D4:
0000619C 4A78 F614                  		tst.w	($FFFFF614).w
000061A0 66C0                       		bne.s	SS_EndLoop
000061A2                            
000061A2 46FC 2700                  		move	#$2700,sr
000061A6 4DF9 00C0 0004             		lea	($C00004).l,a6
000061AC 3CBC 8230                  		move.w	#$8230,(a6)
000061B0 3CBC 8407                  		move.w	#$8407,(a6)
000061B4 3CBC 9001                  		move.w	#$9001,(a6)
000061B8 6100 B006                  		bsr.w	ClearScreen
000061BC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000061C6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000061CC 6100 B290                  		bsr.w	NemDec
000061D0 4EB9 0000 0000             		jsr	Hud_Base
000061D6 4278 C800                  		clr.w	($FFFFC800).w
000061DA 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000061E2 46FC 2300                  		move	#$2300,sr
000061E6 7011                       		moveq	#$11,d0
000061E8 6100 C0C6                  		bsr.w	PalLoad2	; load results screen Palette
000061EC 7000                       		moveq	#0,d0
000061EE 6100 B3C8                  		bsr.w	LoadPLC2
000061F2 701B                       		moveq	#$1B,d0
000061F4 6100 B390                  		bsr.w	LoadPLC		; load results screen patterns
000061F8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000061FE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00006204 3038 FE20                  		move.w	($FFFFFE20).w,d0
00006208 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000620C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00006210 303C 008E                  		move.w	#$8E,d0
00006214 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000621A 43F8 D000                  		lea	($FFFFD000).w,a1
0000621E 7000                       		moveq	#0,d0
00006220 323C 07FF                  		move.w	#$7FF,d1
00006224                            
00006224                            SS_EndClrObjRam:
00006224 22C0                       		move.l	d0,(a1)+
00006226 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000622A                            
0000622A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00006230                            
00006230                            SS_NormalExit:
00006230 6100 B0C0                  		bsr.w	PauseGame
00006234 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000623A 6100 C90C                  		bsr.w	DelayProgram
0000623E 4EB9 0000 0000             		jsr	ObjectsLoad
00006244 4EB9 0000 0000             		jsr	BuildSprites
0000624A 6100 B3A6                  		bsr.w	RunPLC_RAM
0000624E 4A78 FE02                  		tst.w	($FFFFFE02).w
00006252 67DC                       		beq.s	SS_NormalExit
00006254 4AB8 F680                  		tst.l	($FFFFF680).w
00006258 66D6                       		bne.s	SS_NormalExit
0000625A 303C 00CA                  		move.w	#$CA,d0
0000625E 6100 B06E                  		bsr.w	PlaySound_Special ; play special stage exit sound
00006262 6100 BEB0                  		bsr.w	Pal_MakeFlash
00006266 4E75                       		rts	
00006268                            ; ===========================================================================
00006268                            
00006268                            SS_ToSegaScreen:
00006268 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000626E 4E75                       		rts
00006270                            
00006270                            ; ---------------------------------------------------------------------------
00006270                            ; Special stage	background loading subroutine
00006270                            ; ---------------------------------------------------------------------------
00006270                            
00006270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006270                            
00006270                            
00006270                            SS_BGLoad:				; XREF: SpecialStage
00006270 43F9 00FF 0000             		lea	($FF0000).l,a1
00006276 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000627C 303C 4051                  		move.w	#$4051,d0
00006280 6100 B4A2                  		bsr.w	EniDec
00006284 263C 5000 0001             		move.l	#$50000001,d3
0000628A 45F9 00FF 0080             		lea	($FF0080).l,a2
00006290 7E06                       		moveq	#6,d7
00006292                            
00006292                            loc_48BE:
00006292 2003                       		move.l	d3,d0
00006294 7C03                       		moveq	#3,d6
00006296 7800                       		moveq	#0,d4
00006298 0C47 0003                  		cmpi.w	#3,d7
0000629C 6400                       		bcc.s	loc_48CC
0000629E 7801                       		moveq	#1,d4
000062A0                            
000062A0                            loc_48CC:
000062A0 7A07                       		moveq	#7,d5
000062A2                            
000062A2                            loc_48CE:
000062A2 224A                       		movea.l	a2,a1
000062A4 0A04 0001                  		eori.b	#1,d4
000062A8 6600                       		bne.s	loc_48E2
000062AA 0C47 0006                  		cmpi.w	#6,d7
000062AE 6600                       		bne.s	loc_48F2
000062B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000062B6                            
000062B6                            loc_48E2:
000062B6 48E7 F800                  		movem.l	d0-d4,-(sp)
000062BA 7207                       		moveq	#7,d1
000062BC 7407                       		moveq	#7,d2
000062BE 6100 B0AA                  		bsr.w	ShowVDPGraphics
000062C2 4CDF 001F                  		movem.l	(sp)+,d0-d4
000062C6                            
000062C6                            loc_48F2:
000062C6 0680 0010 0000             		addi.l	#$100000,d0
000062CC 51CD FFD4                  		dbf	d5,loc_48CE
000062D0 0680 0380 0000             		addi.l	#$3800000,d0
000062D6 0A04 0001                  		eori.b	#1,d4
000062DA 51CE FFC4                  		dbf	d6,loc_48CC
000062DE 0683 1000 0000             		addi.l	#$10000000,d3
000062E4 6A00                       		bpl.s	loc_491C
000062E6 4843                       		swap	d3
000062E8 0683 0000 C000             		addi.l	#$C000,d3
000062EE 4843                       		swap	d3
000062F0                            
000062F0                            loc_491C:
000062F0 D4FC 0080                  		adda.w	#$80,a2
000062F4 51CF FF9C                  		dbf	d7,loc_48BE
000062F8 43F9 00FF 0000             		lea	($FF0000).l,a1
000062FE 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00006304 303C 4000                  		move.w	#$4000,d0
00006308 6100 B41A                  		bsr.w	EniDec
0000630C 43F9 00FF 0000             		lea	($FF0000).l,a1
00006312 203C 4000 0003             		move.l	#$40000003,d0
00006318 723F                       		moveq	#$3F,d1
0000631A 741F                       		moveq	#$1F,d2
0000631C 6100 B04C                  		bsr.w	ShowVDPGraphics
00006320 43F9 00FF 0000             		lea	($FF0000).l,a1
00006326 203C 5000 0003             		move.l	#$50000003,d0
0000632C 723F                       		moveq	#$3F,d1
0000632E 743F                       		moveq	#$3F,d2
00006330 6100 B038                  		bsr.w	ShowVDPGraphics
00006334 4E75                       		rts	
00006336                            ; End of function SS_BGLoad
00006336                            
00006336                            ; ---------------------------------------------------------------------------
00006336                            ; Palette cycling routine - special stage
00006336                            ; ---------------------------------------------------------------------------
00006336                            
00006336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006336                            
00006336                            
00006336                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00006336 4A78 F63A                  		tst.w	($FFFFF63A).w
0000633A 6600                       		bne.s	locret_49E6
0000633C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00006340 6A00                       		bpl.s	locret_49E6
00006342 4DF9 00C0 0004             		lea	($C00004).l,a6
00006348 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000634C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00006350 0240 001F                  		andi.w	#$1F,d0
00006354 E548                       		lsl.w	#2,d0
00006356 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000635C D0C0                       		adda.w	d0,a0
0000635E 1018                       		move.b	(a0)+,d0
00006360 6A00                       		bpl.s	loc_4992
00006362 303C 01FF                  		move.w	#$1FF,d0
00006366                            
00006366                            loc_4992:
00006366 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000636A 7000                       		moveq	#0,d0
0000636C 1018                       		move.b	(a0)+,d0
0000636E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00006372 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00006378 43F1 0000                  		lea	(a1,d0.w),a1
0000637C 303C 8200                  		move.w	#-$7E00,d0
00006380 1019                       		move.b	(a1)+,d0
00006382 3C80                       		move.w	d0,(a6)
00006384 11D1 F616                  		move.b	(a1),($FFFFF616).w
00006388 303C 8400                  		move.w	#-$7C00,d0
0000638C 1018                       		move.b	(a0)+,d0
0000638E 3C80                       		move.w	d0,(a6)
00006390 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000639A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000063A2 7000                       		moveq	#0,d0
000063A4 1018                       		move.b	(a0)+,d0
000063A6 6B00                       		bmi.s	loc_49E8
000063A8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000063AE D2C0                       		adda.w	d0,a1
000063B0 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000063B4 24D9                       		move.l	(a1)+,(a2)+
000063B6 24D9                       		move.l	(a1)+,(a2)+
000063B8 24D9                       		move.l	(a1)+,(a2)+
000063BA                            
000063BA                            locret_49E6:
000063BA 4E75                       		rts	
000063BC                            ; ===========================================================================
000063BC                            
000063BC                            loc_49E8:				; XREF: PalCycle_SS
000063BC 3238 F79E                  		move.w	($FFFFF79E).w,d1
000063C0 0C40 008A                  		cmpi.w	#$8A,d0
000063C4 6500                       		bcs.s	loc_49F4
000063C6 5241                       		addq.w	#1,d1
000063C8                            
000063C8                            loc_49F4:
000063C8 C2FC 002A                  		mulu.w	#$2A,d1
000063CC 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000063D2 D2C1                       		adda.w	d1,a1
000063D4 0240 007F                  		andi.w	#$7F,d0
000063D8 0880 0000                  		bclr	#0,d0
000063DC 6700                       		beq.s	loc_4A18
000063DE 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000063E2 24D1                       		move.l	(a1),(a2)+
000063E4 24E9 0004                  		move.l	4(a1),(a2)+
000063E8 24E9 0008                  		move.l	8(a1),(a2)+
000063EC                            
000063EC                            loc_4A18:
000063EC D2FC 000C                  		adda.w	#$C,a1
000063F0 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000063F4 0C40 000A                  		cmpi.w	#$A,d0
000063F8 6500                       		bcs.s	loc_4A2E
000063FA 0440 000A                  		subi.w	#$A,d0
000063FE 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00006402                            
00006402                            loc_4A2E:
00006402 3200                       		move.w	d0,d1
00006404 D040                       		add.w	d0,d0
00006406 D041                       		add.w	d1,d0
00006408 D2C0                       		adda.w	d0,a1
0000640A 24D9                       		move.l	(a1)+,(a2)+
0000640C 34D9                       		move.w	(a1)+,(a2)+
0000640E 4E75                       		rts	
00006410                            ; End of function PalCycle_SS
00006410                            
00006410                            ; ===========================================================================
00006410 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00006420                            					; XREF: PalCycle_SS
00006420 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00006430 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00006440 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00006450 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00006460 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00006470 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00006480 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00006490                            		even
00006490 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000649E                            					; XREF: PalCycle_SS
0000649E                            		even
0000649E                            
0000649E                            Pal_SSCyc1:	incbin	Palette\c_ss_1.bin
000064E6                            		even
000064E6                            Pal_SSCyc2:	incbin	Palette\c_ss_2.bin
000065B8                            		even
000065B8                            
000065B8                            ; ---------------------------------------------------------------------------
000065B8                            ; Subroutine to	make the special stage background animated
000065B8                            ; ---------------------------------------------------------------------------
000065B8                            
000065B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B8                            
000065B8                            
000065B8                            SS_BGAnimate:				; XREF: SpecialStage
000065B8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000065BC 6600                       		bne.s	loc_4BF6
000065BE 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000065C4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065CA                            
000065CA                            loc_4BF6:
000065CA 0C40 0008                  		cmpi.w	#8,d0
000065CE 6400                       		bcc.s	loc_4C4E
000065D0 0C40 0006                  		cmpi.w	#6,d0
000065D4 6600                       		bne.s	loc_4C10
000065D6 5278 F718                  		addq.w	#1,($FFFFF718).w
000065DA 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000065DE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065E4                            
000065E4                            loc_4C10:
000065E4 7000                       		moveq	#0,d0
000065E6 3038 F708                  		move.w	($FFFFF708).w,d0
000065EA 4440                       		neg.w	d0
000065EC 4840                       		swap	d0
000065EE 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000065F4 47F8 AA00                  		lea	($FFFFAA00).w,a3
000065F8 7609                       		moveq	#9,d3
000065FA                            
000065FA                            loc_4C26:
000065FA 302B 0002                  		move.w	2(a3),d0
000065FE 6100 C57A                  		bsr.w	CalcSine
00006602 7400                       		moveq	#0,d2
00006604 1419                       		move.b	(a1)+,d2
00006606 C1C2                       		muls.w	d2,d0
00006608 E080                       		asr.l	#8,d0
0000660A 36C0                       		move.w	d0,(a3)+
0000660C 1419                       		move.b	(a1)+,d2
0000660E 4882                       		ext.w	d2
00006610 D55B                       		add.w	d2,(a3)+
00006612 51CB FFE6                  		dbf	d3,loc_4C26
00006616 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000661A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00006620 6000                       		bra.s	loc_4C7E
00006622                            ; ===========================================================================
00006622                            
00006622                            loc_4C4E:				; XREF: SS_BGAnimate
00006622 0C40 000C                  		cmpi.w	#$C,d0
00006626 6600                       		bne.s	loc_4C74
00006628 5378 F718                  		subq.w	#1,($FFFFF718).w
0000662C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006630 243C 0001 8000             		move.l	#$18000,d2
00006636 7206                       		moveq	#6,d1
00006638                            
00006638                            loc_4C64:
00006638 2013                       		move.l	(a3),d0
0000663A 9082                       		sub.l	d2,d0
0000663C 26C0                       		move.l	d0,(a3)+
0000663E 0482 0000 2000             		subi.l	#$2000,d2
00006644 51C9 FFF2                  		dbf	d1,loc_4C64
00006648                            
00006648                            loc_4C74:
00006648 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000664C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00006652                            
00006652                            loc_4C7E:
00006652 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006656 3038 F718                  		move.w	($FFFFF718).w,d0
0000665A 4440                       		neg.w	d0
0000665C 4840                       		swap	d0
0000665E 7600                       		moveq	#0,d3
00006660 161A                       		move.b	(a2)+,d3
00006662 3438 F70C                  		move.w	($FFFFF70C).w,d2
00006666 4442                       		neg.w	d2
00006668 0242 00FF                  		andi.w	#$FF,d2
0000666C E54A                       		lsl.w	#2,d2
0000666E                            
0000666E                            loc_4C9A:
0000666E 301B                       		move.w	(a3)+,d0
00006670 544B                       		addq.w	#2,a3
00006672 7200                       		moveq	#0,d1
00006674 121A                       		move.b	(a2)+,d1
00006676 5341                       		subq.w	#1,d1
00006678                            
00006678                            loc_4CA4:
00006678 2380 2000                  		move.l	d0,(a1,d2.w)
0000667C 5842                       		addq.w	#4,d2
0000667E 0242 03FC                  		andi.w	#$3FC,d2
00006682 51C9 FFF4                  		dbf	d1,loc_4CA4
00006686 51CB FFE6                  		dbf	d3,loc_4C9A
0000668A 4E75                       		rts	
0000668C                            ; End of function SS_BGAnimate
0000668C                            
0000668C                            ; ===========================================================================
0000668C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00006698                            		even
00006698 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000066A0                            		even
000066A0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000066B4                            		even
000066B4                            					; XREF: SS_BGAnimate
000066B4                            ; ===========================================================================
000066B4                            
000066B4                            ; ---------------------------------------------------------------------------
000066B4                            ; Continue screen
000066B4                            ; ---------------------------------------------------------------------------
000066B4                            
000066B4                            ContinueScreen:				; XREF: GameModeArray
000066B4 6100 B930                  		bsr.w	Pal_FadeFrom
000066B8 46FC 2700                  		move	#$2700,sr
000066BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000066C0 0200 00BF                  		andi.b	#$BF,d0
000066C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000066CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000066D0 3CBC 8004                  		move.w	#$8004,(a6)
000066D4 3CBC 8700                  		move.w	#$8700,(a6)
000066D8 6100 AAE6                  		bsr.w	ClearScreen
000066DC 43F8 D000                  		lea	($FFFFD000).w,a1
000066E0 7000                       		moveq	#0,d0
000066E2 323C 07FF                  		move.w	#$7FF,d1
000066E6                            
000066E6                            Cont_ClrObjRam:
000066E6 22C0                       		move.l	d0,(a1)+
000066E8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000066EC                            
000066EC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000066F6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000066FC 6100 AD60                  		bsr.w	NemDec
00006700 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000670A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00006710 6100 AD4C                  		bsr.w	NemDec
00006714 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000671E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00006724 6100 AD38                  		bsr.w	NemDec
00006728 720A                       		moveq	#10,d1
0000672A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00006730 7012                       		moveq	#$12,d0
00006732 6100 BB60                  		bsr.w	PalLoad1	; load continue	screen Palette
00006736 103C 0090                  		move.b	#$90,d0
0000673A 6100 AB8A                  		bsr.w	PlaySound	; play continue	music
0000673E 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00006744 42B8 F700                  		clr.l	($FFFFF700).w
00006748 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00006750 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00006756 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000675C 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00006762 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00006768 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000676E 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00006774 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000677A 4EB9 0000 0000             		jsr	ObjectsLoad
00006780 4EB9 0000 0000             		jsr	BuildSprites
00006786 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000678A 0000 0040                  		ori.b	#$40,d0
0000678E 33C0 00C0 0004             		move.w	d0,($C00004).l
00006794 6100 B79A                  		bsr.w	Pal_FadeTo
00006798                            
00006798                            ; ---------------------------------------------------------------------------
00006798                            ; Continue screen main loop
00006798                            ; ---------------------------------------------------------------------------
00006798                            
00006798                            Cont_MainLoop:
00006798 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000679E 6100 C3A8                  		bsr.w	DelayProgram
000067A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067A8 6400                       		bcc.s	loc_4DF2
000067AA 46FC 2700                  		move	#$2700,sr
000067AE 3238 F614                  		move.w	($FFFFF614).w,d1
000067B2 82FC 003C                  		divu.w	#$3C,d1
000067B6 0281 0000 000F             		andi.l	#$F,d1
000067BC 4EB9 0000 0000             		jsr	ContScrCounter
000067C2 46FC 2300                  		move	#$2300,sr
000067C6                            
000067C6                            loc_4DF2:
000067C6 4EB9 0000 0000             		jsr	ObjectsLoad
000067CC 4EB9 0000 0000             		jsr	BuildSprites
000067D2 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000067D8 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000067DA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067E0 64B6                       		bcc.s	Cont_MainLoop
000067E2 4A78 F614                  		tst.w	($FFFFF614).w
000067E6 6600 FFB0                  		bne.w	Cont_MainLoop
000067EA 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000067F0 4E75                       		rts	
000067F2                            ; ===========================================================================
000067F2                            
000067F2                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000067F2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000067F8 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000067FE 7000                       		moveq	#0,d0
00006800 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006804 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006808 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000680C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00006810 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00006814 4E75                       		rts	
00006816                            ; ===========================================================================
00006816                            
00006816                            ; ---------------------------------------------------------------------------
00006816                            ; Object 80 - Continue screen elements
00006816                            ; ---------------------------------------------------------------------------
00006816                            
00006816                            Obj80:					; XREF: Obj_Index
00006816 7000                       		moveq	#0,d0
00006818 1028 0024                  		move.b	$24(a0),d0
0000681C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00006820 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00006824                            ; ===========================================================================
00006824 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00006826 0000                       		dc.w Obj80_Display-Obj80_Index
00006828 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000682A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000682C                            ; ===========================================================================
0000682C                            
0000682C                            Obj80_Main:				; XREF: Obj80_Index
0000682C 5428 0024                  		addq.b	#2,$24(a0)
00006830 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006838 317C 8500 0002             		move.w	#$8500,2(a0)
0000683E 117C 0000 0001             		move.b	#0,1(a0)
00006844 117C 003C 0019             		move.b	#$3C,$19(a0)
0000684A 317C 0120 0008             		move.w	#$120,8(a0)
00006850 317C 00C0 000A             		move.w	#$C0,$A(a0)
00006856 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000685C                            
0000685C                            Obj80_Display:				; XREF: Obj80_Index
0000685C 4EF9 0000 0000             		jmp	DisplaySprite
00006862                            ; ===========================================================================
00006862                            Obj80_MiniSonicPos:
00006862 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00006874 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00006880                            ; ===========================================================================
00006880                            
00006880                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00006880 2248                       		movea.l	a0,a1
00006882 45F9 0000 6862             		lea	(Obj80_MiniSonicPos).l,a2
00006888 7200                       		moveq	#0,d1
0000688A 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000688E 5501                       		subq.b	#2,d1
00006890 6400                       		bcc.s	loc_4EC4
00006892 4EF9 0000 0000             		jmp	DeleteObject
00006898                            ; ===========================================================================
00006898                            
00006898                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00006898 7601                       		moveq	#1,d3
0000689A 0C01 000E                  		cmpi.b	#$E,d1
0000689E 6500                       		bcs.s	loc_4ED0
000068A0 7600                       		moveq	#0,d3
000068A2 720E                       		moveq	#$E,d1
000068A4                            
000068A4                            loc_4ED0:
000068A4 1401                       		move.b	d1,d2
000068A6 0202 0001                  		andi.b	#1,d2
000068AA                            
000068AA                            Obj80_MiniSonLoop:
000068AA 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000068AE 335A 0008                  		move.w	(a2)+,8(a1)
000068B2 4A02                       		tst.b	d2
000068B4 6700                       		beq.s	loc_4EEA
000068B6 0469 000A 0008             		subi.w	#$A,8(a1)
000068BC                            
000068BC                            loc_4EEA:
000068BC 337C 00D0 000A             		move.w	#$D0,$A(a1)
000068C2 137C 0006 001A             		move.b	#6,$1A(a1)
000068C8 137C 0006 0024             		move.b	#6,$24(a1)
000068CE 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000068D6 337C 8551 0002             		move.w	#$8551,2(a1)
000068DC 137C 0000 0001             		move.b	#0,1(a1)
000068E2 43E9 0040                  		lea	$40(a1),a1
000068E6 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000068EA 43E9 FFC0                  		lea	-$40(a1),a1
000068EE 1343 0028                  		move.b	d3,$28(a1)
000068F2                            
000068F2                            Obj80_ChkType:				; XREF: Obj80_Index
000068F2 4A28 0028                  		tst.b	$28(a0)
000068F6 6700                       		beq.s	loc_4F40
000068F8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000068FE 6500                       		bcs.s	loc_4F40
00006900 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006904 0200 0001                  		andi.b	#1,d0
00006908 6600                       		bne.s	loc_4F40
0000690A 4A78 D010                  		tst.w	($FFFFD010).w
0000690E 6600                       		bne.s	Obj80_Delete
00006910 4E75                       		rts	
00006912                            ; ===========================================================================
00006912                            
00006912                            loc_4F40:				; XREF: Obj80_ChkType
00006912 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006916 0200 000F                  		andi.b	#$F,d0
0000691A 6600                       		bne.s	Obj80_Display2
0000691C 0868 0000 001A             		bchg	#0,$1A(a0)
00006922                            
00006922                            Obj80_Display2:
00006922 4EF9 0000 0000             		jmp	DisplaySprite
00006928                            ; ===========================================================================
00006928                            
00006928                            Obj80_Delete:				; XREF: Obj80_ChkType
00006928 4EF9 0000 0000             		jmp	DeleteObject
0000692E                            ; ===========================================================================
0000692E                            
0000692E                            ; ---------------------------------------------------------------------------
0000692E                            ; Object 81 - Sonic on the continue screen
0000692E                            ; ---------------------------------------------------------------------------
0000692E                            
0000692E                            Obj81:					; XREF: Obj_Index
0000692E 7000                       		moveq	#0,d0
00006930 1028 0024                  		move.b	$24(a0),d0
00006934 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00006938 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000693C 4EF9 0000 0000             		jmp	DisplaySprite
00006942                            ; ===========================================================================
00006942 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00006944 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00006946 0000                       		dc.w Obj81_Animate-Obj81_Index
00006948 0000                       		dc.w Obj81_Run-Obj81_Index
0000694A                            ; ===========================================================================
0000694A                            
0000694A                            Obj81_Main:				; XREF: Obj81_Index
0000694A 5428 0024                  		addq.b	#2,$24(a0)
0000694E 317C 00A0 0008             		move.w	#$A0,8(a0)
00006954 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000695A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00006962 317C 0780 0002             		move.w	#$780,2(a0)
00006968 117C 0004 0001             		move.b	#4,1(a0)
0000696E 117C 0002 0018             		move.b	#2,$18(a0)
00006974 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000697A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00006980                            
00006980                            Obj81_ChkLand:				; XREF: Obj81_Index
00006980 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00006986 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00006988 5428 0024                  		addq.b	#2,$24(a0)
0000698C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00006990 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006998 317C 8500 0002             		move.w	#$8500,2(a0)
0000699E 117C 0000 001C             		move.b	#0,$1C(a0)
000069A4 6000                       		bra.s	Obj81_Animate
000069A6                            ; ===========================================================================
000069A6                            
000069A6                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000069A6 4EB9 0000 0000             		jsr	SpeedToPos
000069AC 4EB9 0000 0000             		jsr	Sonic_Animate
000069B2 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000069B8                            ; ===========================================================================
000069B8                            
000069B8                            Obj81_Animate:				; XREF: Obj81_Index
000069B8 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000069BC 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000069BE 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000069C4 4EF9 0000 0000             		jmp	AnimateSprite
000069CA                            ; ===========================================================================
000069CA                            
000069CA                            Obj81_GetUp:				; XREF: Obj81_Animate
000069CA 5428 0024                  		addq.b	#2,$24(a0)
000069CE 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000069D6 317C 0780 0002             		move.w	#$780,2(a0)
000069DC 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000069E2 4268 0014                  		clr.w	$14(a0)
000069E6 5168 000C                  		subq.w	#8,$C(a0)
000069EA 103C 00E0                  		move.b	#$E0,d0
000069EE 6100 A8DE                  		bsr.w	PlaySound_Special ; fade out music
000069F2                            
000069F2                            Obj81_Run:				; XREF: Obj81_Index
000069F2 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000069F8 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000069FA 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00006A00 6000                       		bra.s	Obj81_ShowRun
00006A02                            ; ===========================================================================
00006A02                            
00006A02                            Obj81_AddSpeed:				; XREF: Obj81_Run
00006A02 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00006A08                            
00006A08                            Obj81_ShowRun:				; XREF: Obj81_Run
00006A08 4EB9 0000 0000             		jsr	SpeedToPos
00006A0E 4EB9 0000 0000             		jsr	Sonic_Animate
00006A14 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00006A1A                            ; ===========================================================================
00006A1A                            Ani_obj81:
00006A1A                            	include "_anim\obj81.asm"
00006A1A                            ; ---------------------------------------------------------------------------
00006A1A                            ; Animation script - Sonic on the continue screen
00006A1A                            ; ---------------------------------------------------------------------------
00006A1A 0000                       		dc.w byte_504A-Ani_obj81
00006A1C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00006A28 00                         		even
00006A28 00                         		even
00006A28                            
00006A28                            ; ---------------------------------------------------------------------------
00006A28                            ; Sprite mappings - Continue screen
00006A28                            ; ---------------------------------------------------------------------------
00006A28                            Map_obj80:
00006A28                            	include "_maps\obj80.asm"
00006A28                            ; ---------------------------------------------------------------------------
00006A28                            ; Sprite mappings - Continue screen
00006A28                            ; ---------------------------------------------------------------------------
00006A28 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00006A2C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00006A30 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00006A34 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00006A38 0B                         byte_5066:	dc.b $B
00006A39 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006A3E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006A43 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006A48 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006A4D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006A52 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006A57 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006A5C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006A61 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00006A66 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00006A6B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006A70 03                         byte_509E:	dc.b 3
00006A71 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006A76 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A7B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A80 03                         byte_50AE:	dc.b 3
00006A81 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006A86 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A8B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A90 03                         byte_50BE:	dc.b 3
00006A91 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00006A96 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A9B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006AA0 02                         byte_50CE:	dc.b 2
00006AA1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00006AA6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00006AAB 01                         byte_50D9:	dc.b 1
00006AAC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00006AB1 01                         byte_50DF:	dc.b 1
00006AB2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006AB8 00                         		even
00006AB8 00                         		even
00006AB8                            
00006AB8                            ; ===========================================================================
00006AB8                            ; ---------------------------------------------------------------------------
00006AB8                            ; Ending sequence in Green Hill	Zone
00006AB8                            ; ---------------------------------------------------------------------------
00006AB8                            
00006AB8                            EndingSequence:				; XREF: GameModeArray
00006AB8 103C 00E4                  		move.b	#$E4,d0
00006ABC 6100 A810                  		bsr.w	PlaySound_Special ; stop music
00006AC0 6100 B524                  		bsr.w	Pal_FadeFrom
00006AC4 43F8 D000                  		lea	($FFFFD000).w,a1
00006AC8 7000                       		moveq	#0,d0
00006ACA 323C 07FF                  		move.w	#$7FF,d1
00006ACE                            
00006ACE                            End_ClrObjRam:
00006ACE 22C0                       		move.l	d0,(a1)+
00006AD0 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006AD4                            
00006AD4 43F8 F628                  		lea	($FFFFF628).w,a1
00006AD8 7000                       		moveq	#0,d0
00006ADA 323C 0015                  		move.w	#$15,d1
00006ADE                            
00006ADE                            End_ClrRam:
00006ADE 22C0                       		move.l	d0,(a1)+
00006AE0 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00006AE4                            
00006AE4 43F8 F700                  		lea	($FFFFF700).w,a1
00006AE8 7000                       		moveq	#0,d0
00006AEA 323C 003F                  		move.w	#$3F,d1
00006AEE                            
00006AEE                            End_ClrRam2:
00006AEE 22C0                       		move.l	d0,(a1)+
00006AF0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006AF4                            
00006AF4 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006AF8 7000                       		moveq	#0,d0
00006AFA 323C 0047                  		move.w	#$47,d1
00006AFE                            
00006AFE                            End_ClrRam3:
00006AFE 22C0                       		move.l	d0,(a1)+
00006B00 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006B04                            
00006B04 46FC 2700                  		move	#$2700,sr
00006B08 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006B0C 0200 00BF                  		andi.b	#$BF,d0
00006B10 33C0 00C0 0004             		move.w	d0,($C00004).l
00006B16 6100 A6A8                  		bsr.w	ClearScreen
00006B1A 4DF9 00C0 0004             		lea	($C00004).l,a6
00006B20 3CBC 8B03                  		move.w	#$8B03,(a6)
00006B24 3CBC 8230                  		move.w	#$8230,(a6)
00006B28 3CBC 8407                  		move.w	#$8407,(a6)
00006B2C 3CBC 857C                  		move.w	#$857C,(a6)
00006B30 3CBC 9001                  		move.w	#$9001,(a6)
00006B34 3CBC 8004                  		move.w	#$8004,(a6)
00006B38 3CBC 8720                  		move.w	#$8720,(a6)
00006B3C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006B42 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00006B46 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00006B4C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00006B52 11FC 0000 FFFD             		move.b	#0,($FFFFFFFD).w	; puts a 0 in this flag
00006B58 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006B5E 6700                       		beq.s	End_LoadData	; if yes, branch
00006B60 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00006B66 11FC 0001 FFFD             		move.b	#1,($FFFFFFFD).w	; puts a 1 in this flag
00006B6C                            
00006B6C                            End_LoadData:
00006B6C 701C                       		moveq	#$1C,d0
00006B6E 6100 AB82                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00006B72 4EB9 0000 0000             		jsr	Hud_Base
00006B78 6100 0000                  		bsr.w	LevelSizeLoad
00006B7C 6100 0000                  		bsr.w	DeformBgLayer
00006B80 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B86 6100 0000                  		bsr.w	MainLoadBlockLoad
00006B8A 6100 0000                  		bsr.w	LoadTilesFromStart
00006B8E                            	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00006B8E 21FC 0000 0000 FFD0        		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
00006B96 21FC 0000 0000 FFD4        		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
00006B9E 46FC 2300                  		move	#$2300,sr
00006BA2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006BA8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006BAC 6100 ACF4                  		bsr.w	KosDec
00006BB0 7003                       		moveq	#3,d0
00006BB2 6100 B6E0                  		bsr.w	PalLoad1	; load Sonic's Palette
00006BB6 1038 FFFD                  		move.b	($FFFFFFFD).w,d0
00006BBA 43F9 0000 50FA             		lea	(MusicList_Endings).l,a1 ; load Music Playlist for Endings
00006BC0 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006BC4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00006BCA 6700                       		beq.s	End_LoadSonic	; if not, branch
00006BCC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006BD2                            
00006BD2                            End_LoadSonic:
00006BD2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00006BD8 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00006BDE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00006BE4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00006BEA 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00006BF0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00006BF6 4EB9 0000 0000             		jsr	ObjPosLoad
00006BFC 4EB9 0000 0000             		jsr	ObjectsLoad
00006C02 4EB9 0000 0000             		jsr	BuildSprites
00006C08 7000                       		moveq	#0,d0
00006C0A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00006C0E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00006C12 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006C16 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00006C1A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00006C1E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006C22 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006C26 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00006C2A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00006C2E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00006C32 6100 EE9E                  		bsr.w	OscillateNumInit
00006C36 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006C3C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00006C42 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00006C48 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006C4E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C54 6100 BEF2                  		bsr.w	DelayProgram
00006C58 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006C5C 0000 0040                  		ori.b	#$40,d0
00006C60 33C0 00C0 0004             		move.w	d0,($C00004).l
00006C66 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006C6C 6100 B2C2                  		bsr.w	Pal_FadeTo
00006C70                            
00006C70                            ; ---------------------------------------------------------------------------
00006C70                            ; Main ending sequence loop
00006C70                            ; ---------------------------------------------------------------------------
00006C70                            
00006C70                            End_MainLoop:
00006C70 6100 A680                  		bsr.w	PauseGame
00006C74 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C7A 6100 BECC                  		bsr.w	DelayProgram
00006C7E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006C82 6100 0000                  		bsr.w	End_MoveSonic
00006C86 4EB9 0000 0000             		jsr	ObjectsLoad
00006C8C 6100 0000                  		bsr.w	DeformBgLayer
00006C90 4EB9 0000 0000             		jsr	BuildSprites
00006C96 4EB9 0000 0000             		jsr	ObjPosLoad
00006C9C 6100 AE22                  		bsr.w	PalCycle_Load
00006CA0 6100 EE86                  		bsr.w	OscillateNumDo
00006CA4 6100 EF12                  		bsr.w	ChangeRingFrame
00006CA8 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00006CAE 6700                       		beq.s	loc_52DA	; if yes, branch
00006CB0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00006CB6 4240                       		clr.w	d0
00006CB8 1038 FFFD                  		move.b	($FFFFFFFD).w,d0	; get kind of ending (0 = good, 1 = bad)
00006CBC 43F9 0000 50F8             		lea	(MusicList_Credits).l,a1	; load Music Playlist for credits
00006CC2 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00006CC6                            
00006CC6 6100 A606                  		bsr.w	PlaySound_Special ; play credits music
00006CCA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006CD0 4E75                       		rts
00006CD2                            ; ===========================================================================
00006CD2                            
00006CD2                            loc_52DA:
00006CD2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006CD6 6700 FF98                  		beq.w	End_MainLoop	; if not, branch
00006CDA                            
00006CDA 4278 FE02                  		clr.w	($FFFFFE02).w
00006CDE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006CE4 4278 F794                  		clr.w	($FFFFF794).w
00006CE8                            
00006CE8                            End_AllEmlds:				; XREF: loc_5334
00006CE8 6100 A608                  		bsr.w	PauseGame
00006CEC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006CF2 6100 BE54                  		bsr.w	DelayProgram
00006CF6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006CFA 6100 0000                  		bsr.w	End_MoveSonic
00006CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00006D04 6100 0000                  		bsr.w	DeformBgLayer
00006D08 4EB9 0000 0000             		jsr	BuildSprites
00006D0E 4EB9 0000 0000             		jsr	ObjPosLoad
00006D14 6100 EE12                  		bsr.w	OscillateNumDo
00006D18 6100 EE9E                  		bsr.w	ChangeRingFrame
00006D1C 5378 F794                  		subq.w	#1,($FFFFF794).w
00006D20 6A00                       		bpl.s	loc_5334
00006D22 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006D28 6100 B40A                  		bsr.w	Pal_ToWhite
00006D2C                            
00006D2C                            loc_5334:
00006D2C 4A78 FE02                  		tst.w	($FFFFFE02).w
00006D30 6700 FFB6                  		beq.w	End_AllEmlds
00006D34 4278 FE02                  		clr.w	($FFFFFE02).w
00006D38 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006D3E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D44 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D4A 47F8 F700                  		lea	($FFFFF700).w,a3
00006D4E 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00006D52 343C 4000                  		move.w	#$4000,d2
00006D56 6100 0000                  		bsr.w	LoadTilesFromStart2
00006D5A 7013                       		moveq	#$13,d0
00006D5C 6100 B536                  		bsr.w	PalLoad1	; load ending Palette
00006D60 6100 B306                  		bsr.w	Pal_MakeWhite
00006D64 6000 FF0A                  		bra.w	End_MainLoop
00006D68                            
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Subroutine controlling Sonic on the ending sequence
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            End_MoveSonic:				; XREF: End_MainLoop
00006D68 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006D6C 6600                       		bne.s	End_MoveSonic2
00006D6E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00006D74 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00006D76 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D7A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00006D80 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00006D86 4E75                       		rts	
00006D88                            ; ===========================================================================
00006D88                            
00006D88                            End_MoveSonic2:				; XREF: End_MoveSonic
00006D88 5500                       		subq.b	#2,d0
00006D8A 6600                       		bne.s	End_MoveSonic3
00006D8C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00006D92 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00006D94 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D98 7000                       		moveq	#0,d0
00006D9A 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006D9E 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00006DA2 31C0 D014                  		move.w	d0,($FFFFD014).w
00006DA6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006DAC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006DB2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00006DB8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006DBE 4E75                       		rts	
00006DC0                            ; ===========================================================================
00006DC0                            
00006DC0                            End_MoveSonic3:				; XREF: End_MoveSonic
00006DC0 5500                       		subq.b	#2,d0
00006DC2 6600                       		bne.s	End_MoveSonExit
00006DC4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DC8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006DCE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006DD4 4278 D024                  		clr.w	($FFFFD024).w
00006DD8                            
00006DD8                            End_MoveSonExit:
00006DD8 4E75                       		rts	
00006DDA                            ; End of function End_MoveSonic
00006DDA                            
00006DDA                            ; ===========================================================================
00006DDA                            ; ---------------------------------------------------------------------------
00006DDA                            ; Object 87 - Sonic on ending sequence
00006DDA                            ; ---------------------------------------------------------------------------
00006DDA                            
00006DDA                            Obj87:					; XREF: Obj_Index
00006DDA 7000                       		moveq	#0,d0
00006DDC 1028 0025                  		move.b	$25(a0),d0
00006DE0 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006DE4 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00006DE8 4EF9 0000 0000             		jmp	DisplaySprite
00006DEE                            ; ===========================================================================
00006DEE 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006DF2 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00006DF6 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006DFA 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006DFE 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006E02                            ; ===========================================================================
00006E02                            
00006E02                            Obj87_Main:				; XREF: Obj87_Index
00006E02 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006E08 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006E0A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006E10 317C 00D8 0030             		move.w	#$D8,$30(a0)
00006E16 4E75                       		rts	
00006E18                            ; ===========================================================================
00006E18                            
00006E18                            Obj87_Main2:				; XREF: Obj87_Main
00006E18 5428 0025                  		addq.b	#2,$25(a0)
00006E1C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006E24 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006E2A 117C 0004 0001             		move.b	#4,1(a0)
00006E30 4228 0022                  		clr.b	$22(a0)
00006E34 117C 0002 0018             		move.b	#2,$18(a0)
00006E3A 117C 0000 001A             		move.b	#0,$1A(a0)
00006E40 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00006E46                            
00006E46                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00006E46 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006E4A 6600                       		bne.s	Obj87_Wait
00006E4C 5428 0025                  		addq.b	#2,$25(a0)
00006E50 317C 0001 001C             		move.w	#1,$1C(a0)
00006E56 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006E5C                            
00006E5C                            Obj87_Wait:
00006E5C 4E75                       		rts	
00006E5E                            ; ===========================================================================
00006E5E                            
00006E5E                            Obj87_LookUp:				; XREF: Obj87_Index
00006E5E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00006E66 6600                       		bne.s	locret_5480
00006E68 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006E6E 317C 005A 0030             		move.w	#$5A,$30(a0)
00006E74 5428 0025                  		addq.b	#2,$25(a0)
00006E78                            
00006E78                            locret_5480:
00006E78 4E75                       		rts	
00006E7A                            ; ===========================================================================
00006E7A                            
00006E7A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006E7A 5368 0030                  		subq.w	#1,$30(a0)
00006E7E 6600                       		bne.s	Obj87_Wait2
00006E80 43F8 D400                  		lea	($FFFFD400).w,a1
00006E84 323C 00FF                  		move.w	#$FF,d1
00006E88                            
00006E88                            Obj87_ClrLoop:
00006E88 4299                       		clr.l	(a1)+
00006E8A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006E8E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00006E94 5428 0025                  		addq.b	#2,$25(a0)
00006E98 117C 0001 001C             		move.b	#1,$1C(a0)
00006E9E 317C 003C 0030             		move.w	#$3C,$30(a0)
00006EA4                            
00006EA4                            Obj87_Wait2:
00006EA4 4E75                       		rts	
00006EA6                            ; ===========================================================================
00006EA6                            
00006EA6                            Obj87_MakeLogo:				; XREF: Obj87_Index
00006EA6 5368 0030                  		subq.w	#1,$30(a0)
00006EAA 6600                       		bne.s	Obj87_Wait3
00006EAC 5428 0025                  		addq.b	#2,$25(a0)
00006EB0 317C 00B4 0030             		move.w	#$B4,$30(a0)
00006EB6 117C 0002 001C             		move.b	#2,$1C(a0)
00006EBC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006EC2                            
00006EC2                            Obj87_Wait3:
00006EC2 4E75                       		rts	
00006EC4                            ; ===========================================================================
00006EC4                            
00006EC4                            Obj87_Animate:				; XREF: Obj87_Index
00006EC4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006ECA 4EF9 0000 0000             		jmp	AnimateSprite
00006ED0                            ; ===========================================================================
00006ED0                            
00006ED0                            Obj87_Leap:				; XREF: Obj87_Index
00006ED0 5368 0030                  		subq.w	#1,$30(a0)
00006ED4 6600                       		bne.s	Obj87_Wait4
00006ED6 5428 0025                  		addq.b	#2,$25(a0)
00006EDA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006EE2 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006EE8 117C 0004 0001             		move.b	#4,1(a0)
00006EEE 4228 0022                  		clr.b	$22(a0)
00006EF2 117C 0002 0018             		move.b	#2,$18(a0)
00006EF8 117C 0005 001A             		move.b	#5,$1A(a0)
00006EFE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006F04 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006F0A 60B8                       		bra.s	Obj87_Animate
00006F0C                            ; ===========================================================================
00006F0C                            
00006F0C                            Obj87_Wait4:				; XREF: Obj87_Leap
00006F0C 4E75                       		rts	
00006F0E                            ; ===========================================================================
00006F0E                            Ani_obj87:
00006F0E                            	include "_anim\obj87.asm"
00006F0E                            ; ---------------------------------------------------------------------------
00006F0E                            ; Animation script - Sonic on the ending sequence
00006F0E                            ; ---------------------------------------------------------------------------
00006F0E 0000                       		dc.w byte_551C-Ani_obj87
00006F10 0000                       		dc.w byte_552A-Ani_obj87
00006F12 0000                       		dc.w byte_5534-Ani_obj87
00006F14 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006F22 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006F2C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006F34                            		even
00006F34                            		even
00006F34                            
00006F34                            ; ===========================================================================
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            ; Object 88 - chaos emeralds on	the ending sequence
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            
00006F34                            Obj88:					; XREF: Obj_Index
00006F34 7000                       		moveq	#0,d0
00006F36 1028 0024                  		move.b	$24(a0),d0
00006F3A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006F3E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006F42 4EF9 0000 0000             		jmp	DisplaySprite
00006F48                            ; ===========================================================================
00006F48 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006F4A 0000                       		dc.w Obj88_Move-Obj88_Index
00006F4C                            ; ===========================================================================
00006F4C                            
00006F4C                            Obj88_Main:				; XREF: Obj88_Index
00006F4C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006F52 6700                       		beq.s	Obj88_Main2
00006F54 588F                       		addq.l	#4,sp
00006F56 4E75                       		rts	
00006F58                            ; ===========================================================================
00006F58                            
00006F58                            Obj88_Main2:				; XREF: Obj88_Main
00006F58 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006F5E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00006F64 2248                       		movea.l	a0,a1
00006F66 7600                       		moveq	#0,d3
00006F68 7401                       		moveq	#1,d2
00006F6A 7205                       		moveq	#5,d1
00006F6C                            
00006F6C                            Obj88_MainLoop:
00006F6C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006F70 5429 0024                  		addq.b	#2,$24(a1)
00006F74 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006F7C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006F82 137C 0004 0001             		move.b	#4,1(a1)
00006F88 137C 0001 0018             		move.b	#1,$18(a1)
00006F8E 3368 0008 0038             		move.w	8(a0),$38(a1)
00006F94 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006F9A 1342 001C                  		move.b	d2,$1C(a1)
00006F9E 1342 001A                  		move.b	d2,$1A(a1)
00006FA2 5202                       		addq.b	#1,d2
00006FA4 1343 0026                  		move.b	d3,$26(a1)
00006FA8 0603 002A                  		addi.b	#$2A,d3
00006FAC 43E9 0040                  		lea	$40(a1),a1
00006FB0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006FB4                            
00006FB4                            Obj88_Move:				; XREF: Obj88_Index
00006FB4 3028 003E                  		move.w	$3E(a0),d0
00006FB8 D168 0026                  		add.w	d0,$26(a0)
00006FBC 1028 0026                  		move.b	$26(a0),d0
00006FC0 4EB9 0000 2B7A             		jsr	(CalcSine).l
00006FC6 7800                       		moveq	#0,d4
00006FC8 1828 003C                  		move.b	$3C(a0),d4
00006FCC C3C4                       		muls.w	d4,d1
00006FCE E081                       		asr.l	#8,d1
00006FD0 C1C4                       		muls.w	d4,d0
00006FD2 E080                       		asr.l	#8,d0
00006FD4 D268 0038                  		add.w	$38(a0),d1
00006FD8 D068 003A                  		add.w	$3A(a0),d0
00006FDC 3141 0008                  		move.w	d1,8(a0)
00006FE0 3140 000C                  		move.w	d0,$C(a0)
00006FE4 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006FEA 6700                       		beq.s	loc_55FA
00006FEC 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006FF2                            
00006FF2                            loc_55FA:
00006FF2 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006FF8 6700                       		beq.s	loc_5608
00006FFA 0668 0020 003E             		addi.w	#$20,$3E(a0)
00007000                            
00007000                            loc_5608:
00007000 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00007006 6700                       		beq.s	locret_5614
00007008 5368 003A                  		subq.w	#1,$3A(a0)
0000700C                            
0000700C                            locret_5614:
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E                            ; ---------------------------------------------------------------------------
0000700E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000700E                            ; ---------------------------------------------------------------------------
0000700E                            
0000700E                            Obj89:					; XREF: Obj_Index
0000700E 7000                       		moveq	#0,d0
00007010 1028 0024                  		move.b	$24(a0),d0
00007014 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00007018 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000701C                            ; ===========================================================================
0000701C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000701E 0000                       		dc.w Obj89_Move-Obj89_Index
00007020 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00007022                            ; ===========================================================================
00007022                            
00007022                            Obj89_Main:				; XREF: Obj89_Index
00007022 5428 0024                  		addq.b	#2,$24(a0)
00007026 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000702C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00007032 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000703A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00007040 117C 0000 0001             		move.b	#0,1(a0)
00007046 117C 0000 0018             		move.b	#0,$18(a0)
0000704C                            
0000704C                            Obj89_Move:				; XREF: Obj89_Index
0000704C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00007052 6700                       		beq.s	Obj89_Delay	; if yes, branch
00007054 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000705A 4EB9 0000 0000             		jsr	DisplaySprite
00007060                            ; ===========================================================================
00007060                            
00007060                            Obj89_Delay:				; XREF: Obj89_Move
00007060 5428 0024                  		addq.b	#2,$24(a0)
00007064 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000706A                            
0000706A                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000706A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000706E 6A00                       		bpl.s	Obj89_Display
00007070 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00007076                            
00007076                            Obj89_Display:
00007076 4EB9 0000 0000             		jsr	DisplaySprite
0000707C                            ; ===========================================================================
0000707C                            ; ---------------------------------------------------------------------------
0000707C                            ; Sprite mappings - Sonic on the ending	sequence
0000707C                            ; ---------------------------------------------------------------------------
0000707C                            Map_obj87:
0000707C                            	include "_maps\obj87.asm"
0000707C                            ; ---------------------------------------------------------------------------
0000707C                            ; Sprite mappings - Sonic on the ending	sequence
0000707C                            ; ---------------------------------------------------------------------------
0000707C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00007080 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00007084 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00007088 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000708C 02                         byte_5690:	dc.b 2
0000708D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00007092 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00007097 03                         byte_569B:	dc.b 3
00007098 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000709D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000070A2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070A7 02                         byte_56AB:	dc.b 2
000070A8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000070AD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000070B2 02                         byte_56B6:	dc.b 2
000070B3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000070B8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000070BD 02                         byte_56C1:	dc.b 2
000070BE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000070C3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000070C8 03                         byte_56CC:	dc.b 3
000070C9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000070CE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000070D3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000070D8 07                         byte_56DC:	dc.b 7
000070D9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000070DE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000070E3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000070E8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000070ED DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000070F2 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000070F7 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000070FC 18                         byte_5700:	dc.b $18
000070FD 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00007102 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00007107 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000710C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00007111 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00007116 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000711B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00007120 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00007125 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000712A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000712F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00007134 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00007139 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000713E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00007143 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00007148 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000714D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00007152 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00007157 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000715C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00007161 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00007166 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000716B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00007170 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00007176 00                         		even
00007176 00                         		even
00007176                            
00007176                            ; ---------------------------------------------------------------------------
00007176                            ; Sprite mappings - chaos emeralds on the ending sequence
00007176                            ; ---------------------------------------------------------------------------
00007176                            Map_obj88:
00007176                            	include "_maps\obj88.asm"
00007176                            ; ---------------------------------------------------------------------------
00007176                            ; Sprite mappings - chaos emeralds on the ending sequence
00007176                            ; ---------------------------------------------------------------------------
00007176 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000717A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000717E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00007182 0000                       		dc.w byte_57AC-Map_obj88
00007184 01                         byte_5788:	dc.b 1
00007185 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000718A 01                         byte_578E:	dc.b 1
0000718B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00007190 01                         byte_5794:	dc.b 1
00007191 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00007196 01                         byte_579A:	dc.b 1
00007197 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000719C 01                         byte_57A0:	dc.b 1
0000719D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000071A2 01                         byte_57A6:	dc.b 1
000071A3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000071A8 01                         byte_57AC:	dc.b 1
000071A9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000071AE                            		even
000071AE                            		even
000071AE                            
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            Map_obj89:
000071AE                            	include "_maps\obj89.asm"
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071AE                            ; ---------------------------------------------------------------------------
000071AE 0000                       		dc.w byte_57B4-Map_obj89
000071B0 03                         byte_57B4:	dc.b 3
000071B1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000071B6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000071BB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000071C0                            		even
000071C0                            		even
000071C0                            
000071C0                            ; ===========================================================================
000071C0                            ; ---------------------------------------------------------------------------
000071C0                            ; Credits ending sequence
000071C0                            ; ---------------------------------------------------------------------------
000071C0                            
000071C0                            Credits:				; XREF: GameModeArray
000071C0 6100 A422                  		bsr.w	ClearPLC
000071C4 6100 AE20                  		bsr.w	Pal_FadeFrom
000071C8 4DF9 00C0 0004             		lea	($C00004).l,a6
000071CE 3CBC 8004                  		move.w	#$8004,(a6)
000071D2 3CBC 8230                  		move.w	#$8230,(a6)
000071D6 3CBC 8407                  		move.w	#$8407,(a6)
000071DA 3CBC 9001                  		move.w	#$9001,(a6)
000071DE 3CBC 9200                  		move.w	#$9200,(a6)
000071E2 3CBC 8B03                  		move.w	#$8B03,(a6)
000071E6 3CBC 8720                  		move.w	#$8720,(a6)
000071EA 4238 F64E                  		clr.b	($FFFFF64E).w
000071EE 6100 9FD0                  		bsr.w	ClearScreen
000071F2 43F8 D000                  		lea	($FFFFD000).w,a1
000071F6 7000                       		moveq	#0,d0
000071F8 323C 07FF                  		move.w	#$7FF,d1
000071FC                            
000071FC                            Cred_ClrObjRam:
000071FC 22C0                       		move.l	d0,(a1)+
000071FE 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00007202                            
00007202 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000720C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00007212 6100 A24A                  		bsr.w	NemDec
00007216 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000721A 7000                       		moveq	#0,d0
0000721C 323C 001F                  		move.w	#$1F,d1
00007220                            
00007220                            Cred_ClrPalette:
00007220 22C0                       		move.l	d0,(a1)+
00007222 51C9 FFFC                  		dbf	d1,Cred_ClrPalette ; fill Palette	with black ($0000)
00007226                            
00007226 7003                       		moveq	#3,d0
00007228 6100 B06A                  		bsr.w	PalLoad1	; load Sonic's Palette
0000722C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00007232 4EB9 0000 0000             		jsr	ObjectsLoad
00007238 4EB9 0000 0000             		jsr	BuildSprites
0000723E 6100 0000                  		bsr.w	EndingDemoLoad
00007242 7000                       		moveq	#0,d0
00007244 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007248 E948                       		lsl.w	#4,d0
0000724A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00007250 45F2 0000                  		lea	(a2,d0.w),a2
00007254 7000                       		moveq	#0,d0
00007256 1012                       		move.b	(a2),d0
00007258 6700                       		beq.s	loc_5862
0000725A 6100 A32A                  		bsr.w	LoadPLC		; load level patterns
0000725E                            
0000725E                            loc_5862:
0000725E 7001                       		moveq	#1,d0
00007260 6100 A324                  		bsr.w	LoadPLC		; load standard	level patterns
00007264 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
0000726A 6100 ACC4                  		bsr.w	Pal_FadeTo
0000726E                            
0000726E                            Cred_WaitLoop:
0000726E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00007274 6100 B8D2                  		bsr.w	DelayProgram
00007278 6100 A378                  		bsr.w	RunPLC_RAM
0000727C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00007280 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00007282 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00007286 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00007288 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000728E 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00007292 4E75                       		rts	
00007294                            
00007294                            ; ---------------------------------------------------------------------------
00007294                            ; Ending sequence demo loading subroutine
00007294                            ; ---------------------------------------------------------------------------
00007294                            
00007294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007294                            
00007294                            
00007294                            EndingDemoLoad:				; XREF: Credits
00007294 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007298 0240 000F                  		andi.w	#$F,d0
0000729C D040                       		add.w	d0,d0
0000729E 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000072A2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000072A6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000072AA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000072B0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000072B2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000072B8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000072BE 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000072C4 7000                       		moveq	#0,d0
000072C6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000072CA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000072CE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000072D2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000072D6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000072DC 6600                       		bne.s	EndDemo_Exit	; if not, branch
000072DE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000072E4 45F8 FE30                  		lea	($FFFFFE30).w,a2
000072E8 303C 0008                  		move.w	#8,d0
000072EC                            
000072EC                            EndDemo_LampLoad:
000072EC 24D9                       		move.l	(a1)+,(a2)+
000072EE 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000072F2                            
000072F2                            EndDemo_Exit:
000072F2 4E75                       		rts	
000072F4                            ; End of function EndingDemoLoad
000072F4                            
000072F4                            ; ===========================================================================
000072F4                            ; ---------------------------------------------------------------------------
000072F4                            ; Levels used in the end sequence demos
000072F4                            ; ---------------------------------------------------------------------------
000072F4                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00007304                            
00007304                            ; ---------------------------------------------------------------------------
00007304                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00007304                            ; ---------------------------------------------------------------------------
00007304                            EndDemo_LampVar:
00007304 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00007306 0A00 062C 000D             		dc.w $A00, $62C, $D
0000730C 0000 0000                  		dc.l 0
00007310 0000                       		dc.b 0,	0
00007312 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00007326 0101                       		dc.b 1,	1
00007328                            ; ===========================================================================
00007328                            ; ---------------------------------------------------------------------------
00007328                            ; "TRY AGAIN" and "END"	screens
00007328                            ; ---------------------------------------------------------------------------
00007328                            
00007328                            TryAgainEnd:				; XREF: Credits
00007328 6100 A2BA                  		bsr.w	ClearPLC
0000732C 6100 ACB8                  		bsr.w	Pal_FadeFrom
00007330 4DF9 00C0 0004             		lea	($C00004).l,a6
00007336 3CBC 8004                  		move.w	#$8004,(a6)
0000733A 3CBC 8230                  		move.w	#$8230,(a6)
0000733E 3CBC 8407                  		move.w	#$8407,(a6)
00007342 3CBC 9001                  		move.w	#$9001,(a6)
00007346 3CBC 9200                  		move.w	#$9200,(a6)
0000734A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000734E 3CBC 8720                  		move.w	#$8720,(a6)
00007352 4238 F64E                  		clr.b	($FFFFF64E).w
00007356 6100 9E68                  		bsr.w	ClearScreen
0000735A 43F8 D000                  		lea	($FFFFD000).w,a1
0000735E 7000                       		moveq	#0,d0
00007360 323C 07FF                  		move.w	#$7FF,d1
00007364                            
00007364                            TryAg_ClrObjRam:
00007364 22C0                       		move.l	d0,(a1)+
00007366 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000736A                            
0000736A 701D                       		moveq	#$1D,d0
0000736C 6100 A384                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00007370 43F8 FB80                  		lea	($FFFFFB80).w,a1
00007374 7000                       		moveq	#0,d0
00007376 323C 001F                  		move.w	#$1F,d1
0000737A                            
0000737A                            TryAg_ClrPalette:
0000737A 22C0                       		move.l	d0,(a1)+
0000737C 51C9 FFFC                  		dbf	d1,TryAg_ClrPalette ; fill Palette with black ($0000)
00007380                            
00007380 7013                       		moveq	#$13,d0
00007382 6100 AF10                  		bsr.w	PalLoad1	; load ending Palette
00007386 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000738A 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00007390 4EB9 0000 0000             		jsr	ObjectsLoad
00007396 4EB9 0000 0000             		jsr	BuildSprites
0000739C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000073A2 6100 AB8C                  		bsr.w	Pal_FadeTo
000073A6                            
000073A6                            ; ---------------------------------------------------------------------------
000073A6                            ; "TRY AGAIN" and "END"	screen main loop
000073A6                            ; ---------------------------------------------------------------------------
000073A6                            TryAg_MainLoop:
000073A6 6100 9F4A                  		bsr.w	PauseGame
000073AA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000073B0 6100 B796                  		bsr.w	DelayProgram
000073B4 4EB9 0000 0000             		jsr	ObjectsLoad
000073BA 4EB9 0000 0000             		jsr	BuildSprites
000073C0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000073C6 6600                       		bne.s	TryAg_Exit	; if yes, branch
000073C8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000073CC 6700                       		beq.s	TryAg_Exit	; if yes, branch
000073CE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000073D4 67D0                       		beq.s	TryAg_MainLoop
000073D6                            
000073D6                            TryAg_Exit:
000073D6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000073DC 4E75                       		rts	
000073DE                            
000073DE                            ; ===========================================================================
000073DE                            ; ---------------------------------------------------------------------------
000073DE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000073DE                            ; ---------------------------------------------------------------------------
000073DE                            
000073DE                            Obj8B:					; XREF: Obj_Index
000073DE 7000                       		moveq	#0,d0
000073E0 1028 0024                  		move.b	$24(a0),d0
000073E4 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000073E8 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000073EC 4EF9 0000 0000             		jmp	DisplaySprite
000073F2                            ; ===========================================================================
000073F2 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000073F4 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000073F6 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000073F8 0000                       		dc.w loc_5A8E-Obj8B_Index
000073FA                            ; ===========================================================================
000073FA                            
000073FA                            Obj8B_Main:				; XREF: Obj8B_Index
000073FA 5428 0024                  		addq.b	#2,$24(a0)
000073FE 317C 0120 0008             		move.w	#$120,8(a0)
00007404 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000740A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00007412 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007418 117C 0000 0001             		move.b	#0,1(a0)
0000741E 117C 0002 0018             		move.b	#2,$18(a0)
00007424 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000742A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007430 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00007432 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00007438 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000743E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00007444 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000744A                            
0000744A                            Obj8B_Animate:				; XREF: Obj8B_Index
0000744A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00007450 4EF9 0000 0000             		jmp	AnimateSprite
00007456                            ; ===========================================================================
00007456                            
00007456                            Obj8B_Juggle:				; XREF: Obj8B_Index
00007456 5428 0024                  		addq.b	#2,$24(a0)
0000745A 7002                       		moveq	#2,d0
0000745C 0828 0000 001C             		btst	#0,$1C(a0)
00007462 6700                       		beq.s	loc_5A6A
00007464 4440                       		neg.w	d0
00007466                            
00007466                            loc_5A6A:
00007466 43F8 D800                  		lea	($FFFFD800).w,a1
0000746A 7205                       		moveq	#5,d1
0000746C                            
0000746C                            loc_5A70:
0000746C 1340 003E                  		move.b	d0,$3E(a1)
00007470 3400                       		move.w	d0,d2
00007472 E742                       		asl.w	#3,d2
00007474 D529 0026                  		add.b	d2,$26(a1)
00007478 43E9 0040                  		lea	$40(a1),a1
0000747C 51C9 FFEE                  		dbf	d1,loc_5A70
00007480 5228 001A                  		addq.b	#1,$1A(a0)
00007484 317C 0070 0030             		move.w	#112,$30(a0)
0000748A                            
0000748A                            loc_5A8E:				; XREF: Obj8B_Index
0000748A 5368 0030                  		subq.w	#1,$30(a0)
0000748E 6A00                       		bpl.s	locret_5AA0
00007490 0868 0000 001C             		bchg	#0,$1C(a0)
00007496 117C 0002 0024             		move.b	#2,$24(a0)
0000749C                            
0000749C                            locret_5AA0:
0000749C 4E75                       		rts	
0000749E                            ; ===========================================================================
0000749E                            Ani_obj8B:
0000749E                            	include "_anim\obj8B.asm"
0000749E                            ; ---------------------------------------------------------------------------
0000749E                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000749E                            ; ---------------------------------------------------------------------------
0000749E 0000                       		dc.w byte_5AA8-Ani_obj8B
000074A0 0000                       		dc.w byte_5AAC-Ani_obj8B
000074A2 0000                       		dc.w byte_5AB0-Ani_obj8B
000074A4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000074A8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000074AC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000074BE                            		even
000074BE                            		even
000074BE                            
000074BE                            ; ===========================================================================
000074BE                            ; ---------------------------------------------------------------------------
000074BE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000074BE                            ; ---------------------------------------------------------------------------
000074BE                            
000074BE                            Obj8C:					; XREF: Obj_Index
000074BE 7000                       		moveq	#0,d0
000074C0 1028 0024                  		move.b	$24(a0),d0
000074C4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000074C8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000074CC 4EF9 0000 0000             		jmp	DisplaySprite
000074D2                            ; ===========================================================================
000074D2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000074D4 0000                       		dc.w Obj8C_Move-Obj8C_Index
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            Obj8C_Main:				; XREF: Obj8C_Index
000074D6 2248                       		movea.l	a0,a1
000074D8 7400                       		moveq	#0,d2
000074DA 7600                       		moveq	#0,d3
000074DC 7205                       		moveq	#5,d1
000074DE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000074E2                            
000074E2                            Obj8C_MakeEms:				; XREF: loc_5B42
000074E2 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000074E6 5429 0024                  		addq.b	#2,$24(a1)
000074EA 237C 0000 7176 0004        		move.l	#Map_obj88,4(a1)
000074F2 337C 03C5 0002             		move.w	#$3C5,2(a1)
000074F8 137C 0000 0001             		move.b	#0,1(a1)
000074FE 137C 0001 0018             		move.b	#1,$18(a1)
00007504 337C 0104 0008             		move.w	#$104,8(a1)
0000750A 337C 0120 0038             		move.w	#$120,$38(a1)
00007510 337C 00EC 000A             		move.w	#$EC,$A(a1)
00007516 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000751C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00007522 47F8 FE58                  		lea	($FFFFFE58).w,a3
00007526                            
00007526                            Obj8C_ChkEms:
00007526 7000                       		moveq	#0,d0
00007528 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000752C 5340                       		subq.w	#1,d0
0000752E 6500                       		bcs.s	loc_5B42
00007530                            
00007530                            Obj8C_ChkEmLoop:
00007530 B433 0000                  		cmp.b	(a3,d0.w),d2
00007534 6600                       		bne.s	loc_5B3E
00007536 5202                       		addq.b	#1,d2
00007538 60EC                       		bra.s	Obj8C_ChkEms
0000753A                            ; ===========================================================================
0000753A                            
0000753A                            loc_5B3E:
0000753A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000753E                            
0000753E                            loc_5B42:
0000753E 1342 001A                  		move.b	d2,$1A(a1)
00007542 5229 001A                  		addq.b	#1,$1A(a1)
00007546 5202                       		addq.b	#1,d2
00007548 137C 0080 0026             		move.b	#$80,$26(a1)
0000754E 1343 001E                  		move.b	d3,$1E(a1)
00007552 1343 001F                  		move.b	d3,$1F(a1)
00007556 0643 000A                  		addi.w	#$A,d3
0000755A 43E9 0040                  		lea	$40(a1),a1
0000755E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00007562                            
00007562                            Obj8C_Move:				; XREF: Obj8C_Index
00007562 4A68 003E                  		tst.w	$3E(a0)
00007566 6700                       		beq.s	locret_5BBA
00007568 4A28 001E                  		tst.b	$1E(a0)
0000756C 6700                       		beq.s	loc_5B78
0000756E 5328 001E                  		subq.b	#1,$1E(a0)
00007572 6600                       		bne.s	loc_5B80
00007574                            
00007574                            loc_5B78:
00007574 3028 003E                  		move.w	$3E(a0),d0
00007578 D168 0026                  		add.w	d0,$26(a0)
0000757C                            
0000757C                            loc_5B80:
0000757C 1028 0026                  		move.b	$26(a0),d0
00007580 6700                       		beq.s	loc_5B8C
00007582 0C00 0080                  		cmpi.b	#$80,d0
00007586 6600                       		bne.s	loc_5B96
00007588                            
00007588                            loc_5B8C:
00007588 4268 003E                  		clr.w	$3E(a0)
0000758C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00007592                            
00007592                            loc_5B96:
00007592 4EB9 0000 2B7A             		jsr	(CalcSine).l
00007598 7800                       		moveq	#0,d4
0000759A 1828 003C                  		move.b	$3C(a0),d4
0000759E C3C4                       		muls.w	d4,d1
000075A0 E081                       		asr.l	#8,d1
000075A2 C1C4                       		muls.w	d4,d0
000075A4 E080                       		asr.l	#8,d0
000075A6 D268 0038                  		add.w	$38(a0),d1
000075AA D068 003A                  		add.w	$3A(a0),d0
000075AE 3141 0008                  		move.w	d1,8(a0)
000075B2 3140 000A                  		move.w	d0,$A(a0)
000075B6                            
000075B6                            locret_5BBA:
000075B6 4E75                       		rts	
000075B8                            ; ===========================================================================
000075B8                            ; ---------------------------------------------------------------------------
000075B8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000075B8                            ; ---------------------------------------------------------------------------
000075B8                            Map_obj8B:
000075B8                            	include "_maps\obj8B.asm"
000075B8                            ; ---------------------------------------------------------------------------
000075B8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000075B8                            ; ---------------------------------------------------------------------------
000075B8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000075BC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000075C0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000075C4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000075C8 08                         byte_5BCC:	dc.b 8
000075C9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000075CE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000075D3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000075D8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000075DD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000075E2 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000075E7 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000075EC 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000075F1 08                         byte_5BF5:	dc.b 8
000075F2 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000075F7 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000075FC E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00007601 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00007606 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000760B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007610 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007615 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000761A 08                         byte_5C1E:	dc.b 8
0000761B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00007620 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00007625 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000762A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000762F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00007634 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00007639 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000763E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007643 08                         byte_5C47:	dc.b 8
00007644 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00007649 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000764E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00007653 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00007658 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000765D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007662 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007667 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000766C 0C                         byte_5C70:	dc.b $C
0000766D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00007672 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00007677 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000767C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00007681 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00007686 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000768B 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00007690 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00007695 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000769A 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000769F 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000076A4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000076A9 0A                         byte_5CAD:	dc.b $A
000076AA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000076AF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000076B4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000076B9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000076BE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000076C3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000076C8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000076CD 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000076D2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000076D7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000076DC 0A                         byte_5CE0:	dc.b $A
000076DD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000076E2 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000076E7 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000076EC C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000076F1 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000076F6 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000076FB 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00007700 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00007705 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000770A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000770F 0C                         byte_5D13:	dc.b $C
00007710 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00007715 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000771A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000771F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00007724 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00007729 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000772E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00007733 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00007738 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000773D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00007742 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00007747 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000774C                            		even
0000774C                            		even
0000774C                            
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            ; Ending sequence demos
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000777A                            		even
0000777A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000077BA                            		even
000077BA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000077EA                            		even
000077EA                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000781A                            		even
0000781A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000783A                            		even
0000783A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000785A                            		even
0000785A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000788A                            		even
0000788A                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000078BA                            		even
000078BA                            
000078BA                            ; ---------------------------------------------------------------------------
000078BA                            ; Subroutine to	load level boundaries and start	locations
000078BA                            ; ---------------------------------------------------------------------------
000078BA                            
000078BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078BA                            
000078BA                            
000078BA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000078BA 7000                       		moveq	#0,d0
000078BC 11C0 F740                  		move.b	d0,($FFFFF740).w
000078C0 11C0 F741                  		move.b	d0,($FFFFF741).w
000078C4 11C0 F746                  		move.b	d0,($FFFFF746).w
000078C8 11C0 F748                  		move.b	d0,($FFFFF748).w
000078CC 11C0 F742                  		move.b	d0,($FFFFF742).w
000078D0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000078D4 ED08                       		lsl.b	#6,d0
000078D6 E848                       		lsr.w	#4,d0
000078D8 3200                       		move.w	d0,d1
000078DA D040                       		add.w	d0,d0
000078DC D041                       		add.w	d1,d0
000078DE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000078E2 3018                       		move.w	(a0)+,d0
000078E4 31C0 F730                  		move.w	d0,($FFFFF730).w
000078E8 2018                       		move.l	(a0)+,d0
000078EA 21C0 F728                  		move.l	d0,($FFFFF728).w
000078EE 21C0 F720                  		move.l	d0,($FFFFF720).w
000078F2 2018                       		move.l	(a0)+,d0
000078F4 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000078F8 21C0 F724                  		move.l	d0,($FFFFF724).w
000078FC 3038 F728                  		move.w	($FFFFF728).w,d0
00007900 0640 0240                  		addi.w	#$240,d0
00007904 31C0 F732                  		move.w	d0,($FFFFF732).w
00007908 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000790E 3018                       		move.w	(a0)+,d0
00007910 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00007914 6000 0000                  		bra.w	LevSz_ChkLamp
00007918                            ; ===========================================================================
00007918                            ; ---------------------------------------------------------------------------
00007918                            ; Level size array and ending start location array
00007918                            ; ---------------------------------------------------------------------------
00007918                            LevelSizeArray:	incbin	misc\lvl_size.bin
00007A68                            		even
00007A68                            
00007A68                            EndingStLocArray:
00007A68                            		incbin	misc\sloc_end.bin
00007A88                            		even
00007A88                            
00007A88                            ; ===========================================================================
00007A88                            
00007A88                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00007A88 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00007A8C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007A8E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00007A94 3238 D008                  		move.w	($FFFFD008).w,d1
00007A98 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007A9C 6000                       		bra.s	loc_60D0
00007A9E                            ; ===========================================================================
00007A9E                            
00007A9E                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00007A9E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007AA2 ED08                       		lsl.b	#6,d0
00007AA4 E848                       		lsr.w	#4,d0
00007AA6 43F9 0000 0000             		lea	(StartLocArray).l,a1			; MJ: load location array
00007AAC 43F1 0000                  		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
00007AB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00007AB4 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007AB6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007ABA 5340                       		subq.w	#1,d0
00007ABC E548                       		lsl.w	#2,d0
00007ABE 43FB 00A8                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007AC2                            
00007AC2                            LevSz_SonicPos:
00007AC2 7200                       		moveq	#0,d1
00007AC4 3219                       		move.w	(a1)+,d1
00007AC6 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00007ACA 7000                       		moveq	#0,d0
00007ACC 3011                       		move.w	(a1),d0
00007ACE 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00007AD2 1438 F600                  		move.b	($FFFFF600).w,d2			; MJ: load game mode
00007AD6 0242 00FC                  		andi.w	#$00FC,d2				; MJ: keep in range
00007ADA 0C02 0004                  		cmpi.b	#$04,d2					; MJ: is screen mode at title?
00007ADE 6600 0000                  		bne	loc_60D0				; MJ: if not, branch
00007AE2 323C 0050                  		move.w	#$0050,d1				; MJ: set positions for title screen
00007AE6 303C 03B0                  		move.w	#$03B0,d0				; MJ: ''
00007AEA 31C1 D008                  		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
00007AEE 31C0 D00C                  		move.w	d0,($FFFFD00C).w			; MJ: ''
00007AF2                            
00007AF2                            loc_60D0:				; XREF: LevSz_ChkLamp
00007AF2 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00007AF6 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00007AFA 743F                       		moveq	#63,d2				; begin a 64-step loop
00007AFC                            @looppoint:
00007AFC 34C1                       		move.w	d1,(a2)+			; fill in X
00007AFE 34C0                       		move.w	d0,(a2)+			; fill in Y
00007B00 51CA FFFA                  		dbf	d2,@looppoint		; loop
00007B04 0441 00A0                  		subi.w	#$A0,d1
00007B08 6400                       		bcc.s	loc_60D8
00007B0A 7200                       		moveq	#0,d1
00007B0C                            
00007B0C                            loc_60D8:
00007B0C 3438 F72A                  		move.w	($FFFFF72A).w,d2
00007B10 B242                       		cmp.w	d2,d1
00007B12 6500                       		bcs.s	loc_60E2
00007B14 3202                       		move.w	d2,d1
00007B16                            
00007B16                            loc_60E2:
00007B16 31C1 F700                  		move.w	d1,($FFFFF700).w
00007B1A 0440 0060                  		subi.w	#$60,d0
00007B1E 6400                       		bcc.s	loc_60EE
00007B20 7000                       		moveq	#0,d0
00007B22                            
00007B22                            loc_60EE:
00007B22 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007B26 6D00                       		blt.s	loc_60F8
00007B28 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007B2C                            
00007B2C                            loc_60F8:
00007B2C 31C0 F704                  		move.w	d0,($FFFFF704).w
00007B30 6100 0000                  		bsr.w	BgScrollSpeed
00007B34 7000                       		moveq	#0,d0
00007B36 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007B3A E508                       		lsl.b	#2,d0
00007B3C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00007B42 6000 0000                  		bra.w	LevSz_Unk
00007B46                            
00007B46                            ; ===========================================================================
00007B46                            ; ---------------------------------------------------------------------------
00007B46                            ; MJ: Sonic start location array
00007B46                            ; ---------------------------------------------------------------------------
00007B46                            
00007B46                            StartLocArray:	incbin	startpos\ghz1.bin
00007B4A                            		incbin	startpos\ghz2.bin
00007B4E                            		incbin	startpos\ghz3.bin
00007B52                            		incbin	startpos\ghz4.bin
00007B56                            		incbin	startpos\lz1.bin
00007B5A                            		incbin	startpos\lz2.bin
00007B5E                            		incbin	startpos\lz3.bin
00007B62                            		incbin	startpos\lz4.bin
00007B66                            		incbin	startpos\mz1.bin
00007B6A                            		incbin	startpos\mz2.bin
00007B6E                            		incbin	startpos\mz3.bin
00007B72                            		incbin	startpos\mz4.bin
00007B76                            		incbin	startpos\slz1.bin
00007B7A                            		incbin	startpos\slz2.bin
00007B7E                            		incbin	startpos\slz3.bin
00007B82                            		incbin	startpos\slz4.bin
00007B86                            		incbin	startpos\syz1.bin
00007B8A                            		incbin	startpos\syz2.bin
00007B8E                            		incbin	startpos\syz3.bin
00007B92                            		incbin	startpos\syz4.bin
00007B96                            		incbin	startpos\sbz1.bin
00007B9A                            		incbin	startpos\sbz2.bin
00007B9E                            		incbin	startpos\sbz3.bin
00007BA2                            		incbin	startpos\sbz4.bin
00007BA6                            		incbin	startpos\end1.bin
00007BAA                            		incbin	startpos\end2.bin
00007BAE                            		incbin	startpos\end3.bin
00007BB2                            		incbin	startpos\end4.bin
00007BB6                            		even
00007BB6                            
00007BB6                            ; ===========================================================================
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            ; Which	256x256	tiles contain loops or roll-tunnels
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00007BB6                            ; loop,	loop, tunnel, tunnel
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            LoopTileNums:	incbin	misc\loopnums.bin
00007BD2                            		even
00007BD2                            
00007BD2                            ; ===========================================================================
00007BD2                            
00007BD2                            LevSz_Unk:				; XREF: LevelSizeLoad
00007BD2 7000                       		moveq	#0,d0
00007BD4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BD8 E748                       		lsl.w	#3,d0
00007BDA 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00007BDE 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00007BE2 24D9                       		move.l	(a1)+,(a2)+
00007BE4 24D9                       		move.l	(a1)+,(a2)+
00007BE6 4E75                       		rts	
00007BE8                            ; End of function LevelSizeLoad
00007BE8                            
00007BE8                            ; ===========================================================================
00007BE8 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00007BF0 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BF8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C00 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C08 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C10 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C18 0070 0100 0100 0100        		dc.l $700100, $1000100
00007C20                            
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            ; Subroutine to	set scroll speed of some backgrounds
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            
00007C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C20                            
00007C20                            
00007C20                            BgScrollSpeed:				; XREF: LevelSizeLoad
00007C20 4A38 FE30                  		tst.b	($FFFFFE30).w
00007C24 6600                       		bne.s	loc_6206
00007C26 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C2A 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C2E 31C1 F708                  		move.w	d1,($FFFFF708).w
00007C32 31C1 F710                  		move.w	d1,($FFFFF710).w
00007C36 31C1 F718                  		move.w	d1,($FFFFF718).w
00007C3A                            
00007C3A                            loc_6206:
00007C3A 7400                       		moveq	#0,d2
00007C3C 1438 FE10                  		move.b	($FFFFFE10).w,d2
00007C40 D442                       		add.w	d2,d2
00007C42 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007C46 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007C4A                            ; End of function BgScrollSpeed
00007C4A                            
00007C4A                            ; ===========================================================================
00007C4A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007C4E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007C52 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007C56 0000                       		dc.w BgScroll_End-BgScroll_Index
00007C58                            ; ===========================================================================
00007C58                            
00007C58                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007C58 6000 0000                  		bra.w	Deform_GHZ
00007C5C                            ; ===========================================================================
00007C5C                            
00007C5C                            BgScroll_LZ:				; XREF: BgScroll_Index
00007C5C E280                       		asr.l	#1,d0
00007C5E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C62 4E75                       		rts	
00007C64                            ; ===========================================================================
00007C64                            
00007C64                            BgScroll_MZ:				; XREF: BgScroll_Index
00007C64 4E75                       		rts	
00007C66                            ; ===========================================================================
00007C66                            
00007C66                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007C66 E280                       		asr.l	#1,d0
00007C68 0640 00C0                  		addi.w	#$C0,d0
00007C6C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C70 4E75                       		rts	
00007C72                            ; ===========================================================================
00007C72                            
00007C72                            BgScroll_SYZ:				; XREF: BgScroll_Index
00007C72 E980                       		asl.l	#4,d0
00007C74 2400                       		move.l	d0,d2
00007C76 E380                       		asl.l	#1,d0
00007C78 D082                       		add.l	d2,d0
00007C7A E080                       		asr.l	#8,d0
00007C7C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C80 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C84 4E75                       		rts	
00007C86                            ; ===========================================================================
00007C86                            
00007C86                            BgScroll_SBZ:				; XREF: BgScroll_Index
00007C86 E980                       		asl.l	#4,d0
00007C88 E380                       		asl.l	#1,d0
00007C8A E080                       		asr.l	#8,d0
00007C8C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C90 4E75                       		rts	
00007C92                            ; ===========================================================================
00007C92                            
00007C92                            BgScroll_End:				; XREF: BgScroll_Index
00007C92 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007C98 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007C9E 4E75                       		rts	
00007CA0                            ; ===========================================================================
00007CA0 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007CA6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007CAC 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00007CB2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007CB8 4E75                       		rts
00007CBA                            
00007CBA                            ; ---------------------------------------------------------------------------
00007CBA                            ; Background layer deformation subroutines
00007CBA                            ; ---------------------------------------------------------------------------
00007CBA                            
00007CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBA                            
00007CBA                            
00007CBA                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007CBA 4A38 F744                  		tst.b	($FFFFF744).w
00007CBE 6700                       		beq.s	loc_628E
00007CC0 4E75                       		rts	
00007CC2                            ; ===========================================================================
00007CC2                            
00007CC2                            loc_628E:
00007CC2 4278 F754                  		clr.w	($FFFFF754).w
00007CC6 4278 F756                  		clr.w	($FFFFF756).w
00007CCA 4278 F758                  		clr.w	($FFFFF758).w
00007CCE 4278 F75A                  		clr.w	($FFFFF75A).w
00007CD2 6100 0000                  		bsr.w	ScrollHoriz
00007CD6 6100 0000                  		bsr.w	ScrollVertical
00007CDA 6100 0000                  		bsr.w	DynScrResizeLoad
00007CDE 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007CE4 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007CEA 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007CF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007CF6 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007CFC 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007D02 7000                       		moveq	#0,d0
00007D04 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D08 D040                       		add.w	d0,d0
00007D0A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007D0E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007D12                            ; End of function DeformBgLayer
00007D12                            
00007D12                            ; ===========================================================================
00007D12                            ; ---------------------------------------------------------------------------
00007D12                            ; Offset index for background layer deformation	code
00007D12                            ; ---------------------------------------------------------------------------
00007D12 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007D16 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007D1A 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007D1E 0000                       		dc.w Deform_GHZ-Deform_Index
00007D20                            ; ---------------------------------------------------------------------------
00007D20                            ; Green	Hill Zone background layer deformation code
00007D20                            ; ---------------------------------------------------------------------------
00007D20                            
00007D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D20                            
00007D20                            
00007D20                            Deform_GHZ:				; XREF: Deform_Index
00007D20 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007D24 48C4                       		ext.l	d4
00007D26 EB84                       		asl.l	#5,d4
00007D28 2204                       		move.l	d4,d1
00007D2A E384                       		asl.l	#1,d4
00007D2C D881                       		add.l	d1,d4
00007D2E 7A00                       		moveq	#0,d5
00007D30 6100 0000                  		bsr.w	ScrollBlock1
00007D34 6100 0000                  		bsr.w	ScrollBlock4
00007D38 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007D3C 3038 F704                  		move.w	($FFFFF704).w,d0
00007D40 0240 07FF                  		andi.w	#$7FF,d0
00007D44 EA48                       		lsr.w	#5,d0
00007D46 4440                       		neg.w	d0
00007D48 0640 0026                  		addi.w	#$26,d0
00007D4C 31C0 F714                  		move.w	d0,($FFFFF714).w
00007D50 3800                       		move.w	d0,d4
00007D52 6100 0000                  		bsr.w	ScrollBlock3
00007D56 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D5C 323C 006F                  		move.w	#$6F,d1
00007D60 9244                       		sub.w	d4,d1
00007D62 3038 F700                  		move.w	($FFFFF700).w,d0
00007D66 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007D6C 6600                       		bne.s	loc_633C
00007D6E 7000                       		moveq	#0,d0
00007D70                            
00007D70                            loc_633C:
00007D70 4440                       		neg.w	d0
00007D72 4840                       		swap	d0
00007D74 3038 F708                  		move.w	($FFFFF708).w,d0
00007D78 4440                       		neg.w	d0
00007D7A                            
00007D7A                            loc_6346:
00007D7A 22C0                       		move.l	d0,(a1)+
00007D7C 51C9 FFFC                  		dbf	d1,loc_6346
00007D80 323C 0027                  		move.w	#$27,d1
00007D84 3038 F710                  		move.w	($FFFFF710).w,d0
00007D88 4440                       		neg.w	d0
00007D8A                            
00007D8A                            loc_6356:
00007D8A 22C0                       		move.l	d0,(a1)+
00007D8C 51C9 FFFC                  		dbf	d1,loc_6356
00007D90 3038 F710                  		move.w	($FFFFF710).w,d0
00007D94 0640 0000                  		addi.w	#0,d0
00007D98 3438 F700                  		move.w	($FFFFF700).w,d2
00007D9C 0642 FE00                  		addi.w	#-$200,d2
00007DA0 9440                       		sub.w	d0,d2
00007DA2 48C2                       		ext.l	d2
00007DA4 E182                       		asl.l	#8,d2
00007DA6 85FC 0068                  		divs.w	#$68,d2
00007DAA 48C2                       		ext.l	d2
00007DAC E182                       		asl.l	#8,d2
00007DAE 7600                       		moveq	#0,d3
00007DB0 3600                       		move.w	d0,d3
00007DB2 323C 0047                  		move.w	#$47,d1
00007DB6 D244                       		add.w	d4,d1
00007DB8                            
00007DB8                            loc_6384:
00007DB8 3003                       		move.w	d3,d0
00007DBA 4440                       		neg.w	d0
00007DBC 22C0                       		move.l	d0,(a1)+
00007DBE 4843                       		swap	d3
00007DC0 D682                       		add.l	d2,d3
00007DC2 4843                       		swap	d3
00007DC4 51C9 FFF2                  		dbf	d1,loc_6384
00007DC8 4E75                       		rts	
00007DCA                            ; End of function Deform_GHZ
00007DCA                            
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            ; Labyrinth Zone background layer deformation code
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            
00007DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCA                            
00007DCA                            
00007DCA                            Deform_LZ:				; XREF: Deform_Index
00007DCA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007DCE 48C4                       		ext.l	d4
00007DD0 EF84                       		asl.l	#7,d4
00007DD2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007DD6 48C5                       		ext.l	d5
00007DD8 EF85                       		asl.l	#7,d5
00007DDA 6100 0000                  		bsr.w	ScrollBlock1
00007DDE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007DE4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007DE8 323C 00DF                  		move.w	#$DF,d1
00007DEC 3038 F700                  		move.w	($FFFFF700).w,d0
00007DF0 4440                       		neg.w	d0
00007DF2 4840                       		swap	d0
00007DF4 3038 F708                  		move.w	($FFFFF708).w,d0
00007DF8 4440                       		neg.w	d0
00007DFA                            
00007DFA                            loc_63C6:
00007DFA 22C0                       		move.l	d0,(a1)+
00007DFC 51C9 FFFC                  		dbf	d1,loc_63C6
00007E00 3038 F646                  		move.w	($FFFFF646).w,d0
00007E04 9078 F704                  		sub.w	($FFFFF704).w,d0
00007E08 4E75                       		rts	
00007E0A                            ; End of function Deform_LZ
00007E0A                            
00007E0A                            ; ---------------------------------------------------------------------------
00007E0A                            ; Marble Zone background layer deformation code
00007E0A                            ; ---------------------------------------------------------------------------
00007E0A                            
00007E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E0A                            
00007E0A                            
00007E0A                            Deform_MZ:				; XREF: Deform_Index
00007E0A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E0E 48C4                       		ext.l	d4
00007E10 ED84                       		asl.l	#6,d4
00007E12 2204                       		move.l	d4,d1
00007E14 E384                       		asl.l	#1,d4
00007E16 D881                       		add.l	d1,d4
00007E18 7A00                       		moveq	#0,d5
00007E1A 6100 0000                  		bsr.w	ScrollBlock1
00007E1E 303C 0200                  		move.w	#$200,d0
00007E22 3238 F704                  		move.w	($FFFFF704).w,d1
00007E26 0441 01C8                  		subi.w	#$1C8,d1
00007E2A 6500                       		bcs.s	loc_6402
00007E2C 3401                       		move.w	d1,d2
00007E2E D241                       		add.w	d1,d1
00007E30 D242                       		add.w	d2,d1
00007E32 E441                       		asr.w	#2,d1
00007E34 D041                       		add.w	d1,d0
00007E36                            
00007E36                            loc_6402:
00007E36 31C0 F714                  		move.w	d0,($FFFFF714).w
00007E3A 6100 0000                  		bsr.w	ScrollBlock3
00007E3E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E44 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E48 323C 00DF                  		move.w	#$DF,d1
00007E4C 3038 F700                  		move.w	($FFFFF700).w,d0
00007E50 4440                       		neg.w	d0
00007E52 4840                       		swap	d0
00007E54 3038 F708                  		move.w	($FFFFF708).w,d0
00007E58 4440                       		neg.w	d0
00007E5A                            
00007E5A                            loc_6426:
00007E5A 22C0                       		move.l	d0,(a1)+
00007E5C 51C9 FFFC                  		dbf	d1,loc_6426
00007E60 4E75                       		rts	
00007E62                            ; End of function Deform_MZ
00007E62                            
00007E62                            ; ---------------------------------------------------------------------------
00007E62                            ; Star Light Zone background layer deformation code
00007E62                            ; ---------------------------------------------------------------------------
00007E62                            
00007E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E62                            
00007E62                            
00007E62                            Deform_SLZ:				; XREF: Deform_Index
00007E62 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E66 48C4                       		ext.l	d4
00007E68 EF84                       		asl.l	#7,d4
00007E6A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007E6E 48C5                       		ext.l	d5
00007E70 EF85                       		asl.l	#7,d5
00007E72 6100 0000                  		bsr.w	ScrollBlock2
00007E76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E7C 6100 0000                  		bsr.w	Deform_SLZ_2
00007E80 45F8 A800                  		lea	($FFFFA800).w,a2
00007E84 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007E88 3400                       		move.w	d0,d2
00007E8A 0440 00C0                  		subi.w	#$C0,d0
00007E8E 0240 03F0                  		andi.w	#$3F0,d0
00007E92 E648                       		lsr.w	#3,d0
00007E94 45F2 0000                  		lea	(a2,d0.w),a2
00007E98 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E9C 323C 000E                  		move.w	#$E,d1
00007EA0 3038 F700                  		move.w	($FFFFF700).w,d0
00007EA4 4440                       		neg.w	d0
00007EA6 4840                       		swap	d0
00007EA8 0242 000F                  		andi.w	#$F,d2
00007EAC D442                       		add.w	d2,d2
00007EAE 301A                       		move.w	(a2)+,d0
00007EB0 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007EB4                            ; ===========================================================================
00007EB4                            
00007EB4                            loc_6480:				; XREF: Deform_SLZ
00007EB4 301A                       		move.w	(a2)+,d0
00007EB6                            
00007EB6                            loc_6482:
00007EB6 22C0                       		move.l	d0,(a1)+
00007EB8 22C0                       		move.l	d0,(a1)+
00007EBA 22C0                       		move.l	d0,(a1)+
00007EBC 22C0                       		move.l	d0,(a1)+
00007EBE 22C0                       		move.l	d0,(a1)+
00007EC0 22C0                       		move.l	d0,(a1)+
00007EC2 22C0                       		move.l	d0,(a1)+
00007EC4 22C0                       		move.l	d0,(a1)+
00007EC6 22C0                       		move.l	d0,(a1)+
00007EC8 22C0                       		move.l	d0,(a1)+
00007ECA 22C0                       		move.l	d0,(a1)+
00007ECC 22C0                       		move.l	d0,(a1)+
00007ECE 22C0                       		move.l	d0,(a1)+
00007ED0 22C0                       		move.l	d0,(a1)+
00007ED2 22C0                       		move.l	d0,(a1)+
00007ED4 22C0                       		move.l	d0,(a1)+
00007ED6 51C9 FFDC                  		dbf	d1,loc_6480
00007EDA 4E75                       		rts	
00007EDC                            ; End of function Deform_SLZ
00007EDC                            
00007EDC                            
00007EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EDC                            
00007EDC                            
00007EDC                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007EDC 43F8 A800                  		lea	($FFFFA800).w,a1
00007EE0 3438 F700                  		move.w	($FFFFF700).w,d2
00007EE4 4442                       		neg.w	d2
00007EE6 3002                       		move.w	d2,d0
00007EE8 E640                       		asr.w	#3,d0
00007EEA 9042                       		sub.w	d2,d0
00007EEC 48C0                       		ext.l	d0
00007EEE E980                       		asl.l	#4,d0
00007EF0 81FC 001C                  		divs.w	#$1C,d0
00007EF4 48C0                       		ext.l	d0
00007EF6 E980                       		asl.l	#4,d0
00007EF8 E180                       		asl.l	#8,d0
00007EFA 7600                       		moveq	#0,d3
00007EFC 3602                       		move.w	d2,d3
00007EFE 323C 001B                  		move.w	#$1B,d1
00007F02                            
00007F02                            loc_64CE:
00007F02 32C3                       		move.w	d3,(a1)+
00007F04 4843                       		swap	d3
00007F06 D680                       		add.l	d0,d3
00007F08 4843                       		swap	d3
00007F0A 51C9 FFF6                  		dbf	d1,loc_64CE
00007F0E 3002                       		move.w	d2,d0
00007F10 E640                       		asr.w	#3,d0
00007F12 323C 0004                  		move.w	#4,d1
00007F16                            
00007F16                            loc_64E2:
00007F16 32C0                       		move.w	d0,(a1)+
00007F18 51C9 FFFC                  		dbf	d1,loc_64E2
00007F1C 3002                       		move.w	d2,d0
00007F1E E440                       		asr.w	#2,d0
00007F20 323C 0004                  		move.w	#4,d1
00007F24                            
00007F24                            loc_64F0:
00007F24 32C0                       		move.w	d0,(a1)+
00007F26 51C9 FFFC                  		dbf	d1,loc_64F0
00007F2A 3002                       		move.w	d2,d0
00007F2C E240                       		asr.w	#1,d0
00007F2E 323C 001D                  		move.w	#$1D,d1
00007F32                            
00007F32                            loc_64FE:
00007F32 32C0                       		move.w	d0,(a1)+
00007F34 51C9 FFFC                  		dbf	d1,loc_64FE
00007F38 4E75                       		rts	
00007F3A                            ; End of function Deform_SLZ_2
00007F3A                            
00007F3A                            ; ---------------------------------------------------------------------------
00007F3A                            ; Spring Yard Zone background layer deformation	code
00007F3A                            ; ---------------------------------------------------------------------------
00007F3A                            
00007F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F3A                            
00007F3A                            
00007F3A                            Deform_SYZ:				; XREF: Deform_Index
00007F3A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F3E 48C4                       		ext.l	d4
00007F40 ED84                       		asl.l	#6,d4
00007F42 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F46 48C5                       		ext.l	d5
00007F48 E985                       		asl.l	#4,d5
00007F4A 2205                       		move.l	d5,d1
00007F4C E385                       		asl.l	#1,d5
00007F4E DA81                       		add.l	d1,d5
00007F50 6100 0000                  		bsr.w	ScrollBlock1
00007F54 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F5A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F5E 323C 00DF                  		move.w	#$DF,d1
00007F62 3038 F700                  		move.w	($FFFFF700).w,d0
00007F66 4440                       		neg.w	d0
00007F68 4840                       		swap	d0
00007F6A 3038 F708                  		move.w	($FFFFF708).w,d0
00007F6E 4440                       		neg.w	d0
00007F70                            
00007F70                            loc_653C:
00007F70 22C0                       		move.l	d0,(a1)+
00007F72 51C9 FFFC                  		dbf	d1,loc_653C
00007F76 4E75                       		rts	
00007F78                            ; End of function Deform_SYZ
00007F78                            
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            ; Scrap	Brain Zone background layer deformation	code
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            
00007F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F78                            
00007F78                            
00007F78                            Deform_SBZ:				; XREF: Deform_Index
00007F78 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F7C 48C4                       		ext.l	d4
00007F7E ED84                       		asl.l	#6,d4
00007F80 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F84 48C5                       		ext.l	d5
00007F86 E985                       		asl.l	#4,d5
00007F88 E385                       		asl.l	#1,d5
00007F8A 6100 0000                  		bsr.w	ScrollBlock1
00007F8E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F94 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F98 323C 00DF                  		move.w	#$DF,d1
00007F9C 3038 F700                  		move.w	($FFFFF700).w,d0
00007FA0 4440                       		neg.w	d0
00007FA2 4840                       		swap	d0
00007FA4 3038 F708                  		move.w	($FFFFF708).w,d0
00007FA8 4440                       		neg.w	d0
00007FAA                            
00007FAA                            loc_6576:
00007FAA 22C0                       		move.l	d0,(a1)+
00007FAC 51C9 FFFC                  		dbf	d1,loc_6576
00007FB0 4E75                       		rts	
00007FB2                            ; End of function Deform_SBZ
00007FB2                            
00007FB2                            ; ---------------------------------------------------------------------------
00007FB2                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007FB2                            ; ---------------------------------------------------------------------------
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            ScrollHoriz:				; XREF: DeformBgLayer
00007FB2 3838 F700                  		move.w	($FFFFF700).w,d4
00007FB6 6100                       		bsr.s	ScrollHoriz2
00007FB8 3038 F700                  		move.w	($FFFFF700).w,d0
00007FBC 0240 0010                  		andi.w	#$10,d0
00007FC0 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007FC4 B300                       		eor.b	d1,d0
00007FC6 6600                       		bne.s	locret_65B0
00007FC8 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007FCE 3038 F700                  		move.w	($FFFFF700).w,d0
00007FD2 9044                       		sub.w	d4,d0
00007FD4 6A00                       		bpl.s	loc_65AA
00007FD6 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007FDC 4E75                       		rts	
00007FDE                            ; ===========================================================================
00007FDE                            
00007FDE                            loc_65AA:
00007FDE 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007FE4                            
00007FE4                            locret_65B0:
00007FE4 4E75                       		rts	
00007FE6                            ; End of function ScrollHoriz
00007FE6                            
00007FE6                            
00007FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE6                            
00007FE6                            
00007FE6                            ScrollHoriz2:				; XREF: ScrollHoriz
00007FE6 3038 D008                  		move.w	($FFFFD008).w,d0
00007FEA 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FEE 0440 0090                  		subi.w	#$90,d0
00007FF2 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007FF4 0440 0010                  		subi.w	#$10,d0
00007FF8 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
00007FFA 4278 F73A                  		clr.w	($FFFFF73A).w
00007FFE 4E75                       		rts
00008000                            ; ===========================================================================
00008000                            
00008000                            loc_65CC:
00008000 0C40 0010                  		cmpi.w	#$10,d0
00008004 6500                       		bcs.s	loc_65D6
00008006 303C 0010                  		move.w	#$10,d0
0000800A                            
0000800A                            loc_65D6:
0000800A D078 F700                  		add.w	($FFFFF700).w,d0
0000800E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00008012 6D00                       		blt.s	loc_65E4
00008014 3038 F72A                  		move.w	($FFFFF72A).w,d0
00008018                            
00008018                            loc_65E4:
00008018 3200                       		move.w	d0,d1
0000801A 9278 F700                  		sub.w	($FFFFF700).w,d1
0000801E E141                       		asl.w	#8,d1
00008020 31C0 F700                  		move.w	d0,($FFFFF700).w
00008024 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00008028 4E75                       		rts	
0000802A                            ; ===========================================================================
0000802A                            
0000802A                            loc_65F6:
0000802A 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
0000802E 6400                       		bcc.s	Left_NoMax				; if not, branch
00008030 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
00008034                            
00008034                            Left_NoMax:
00008034 D078 F700                  		add.w	($FFFFF700).w,d0
00008038 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000803C 6EDA                       		bgt.s	loc_65E4
0000803E 3038 F728                  		move.w	($FFFFF728).w,d0
00008042 60D4                       		bra.s	loc_65E4
00008044                            ; End of function ScrollHoriz2
00008044                            
00008044                            ; ===========================================================================
00008044 4A40                       		tst.w	d0
00008046 6A00                       		bpl.s	loc_6610
00008048 303C FFFE                  		move.w	#-2,d0
0000804C 60DC                       		bra.s	loc_65F6
0000804E                            ; ===========================================================================
0000804E                            
0000804E                            loc_6610:
0000804E 303C 0002                  		move.w	#2,d0
00008052 60AC                       		bra.s	loc_65CC
00008054                            
00008054                            ; ---------------------------------------------------------------------------
00008054                            ; Subroutine to	scroll the level vertically as Sonic moves
00008054                            ; ---------------------------------------------------------------------------
00008054                            
00008054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008054                            
00008054                            
00008054                            ScrollVertical:				; XREF: DeformBgLayer
00008054 7200                       		moveq	#0,d1
00008056 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000805A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000805E 0838 0002 D022             		btst	#2,($FFFFD022).w
00008064 6700                       		beq.s	loc_662A
00008066 5B40                       		subq.w	#5,d0
00008068                            
00008068                            loc_662A:
00008068 0838 0001 D022             		btst	#1,($FFFFD022).w
0000806E 6700                       		beq.s	loc_664A
00008070 0640 0020                  		addi.w	#$20,d0
00008074 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00008078 6500                       		bcs.s	loc_6696
0000807A 0440 0040                  		subi.w	#$40,d0
0000807E 6400                       		bcc.s	loc_6696
00008080 4A38 F75C                  		tst.b	($FFFFF75C).w
00008084 6600                       		bne.s	loc_66A8
00008086 6000                       		bra.s	loc_6656
00008088                            ; ===========================================================================
00008088                            
00008088                            loc_664A:
00008088 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000808C 6600                       		bne.s	loc_665C
0000808E 4A38 F75C                  		tst.b	($FFFFF75C).w
00008092 6600                       		bne.s	loc_66A8
00008094                            
00008094                            loc_6656:
00008094 4278 F73C                  		clr.w	($FFFFF73C).w
00008098 4E75                       		rts	
0000809A                            ; ===========================================================================
0000809A                            
0000809A                            loc_665C:
0000809A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000080A0 6600                       		bne.s	loc_6684
000080A2 3238 D014                  		move.w	($FFFFD014).w,d1
000080A6 6A00                       		bpl.s	loc_666C
000080A8 4441                       		neg.w	d1
000080AA                            
000080AA                            loc_666C:
000080AA 0C41 0800                  		cmpi.w	#$800,d1
000080AE 6400                       		bcc.s	loc_6696
000080B0 323C 0600                  		move.w	#$600,d1
000080B4 0C40 0006                  		cmpi.w	#6,d0
000080B8 6E00                       		bgt.s	loc_66F6
000080BA 0C40 FFFA                  		cmpi.w	#-6,d0
000080BE 6D00                       		blt.s	loc_66C0
000080C0 6000                       		bra.s	loc_66AE
000080C2                            ; ===========================================================================
000080C2                            
000080C2                            loc_6684:
000080C2 323C 0200                  		move.w	#$200,d1
000080C6 0C40 0002                  		cmpi.w	#2,d0
000080CA 6E00                       		bgt.s	loc_66F6
000080CC 0C40 FFFE                  		cmpi.w	#-2,d0
000080D0 6D00                       		blt.s	loc_66C0
000080D2 6000                       		bra.s	loc_66AE
000080D4                            ; ===========================================================================
000080D4                            
000080D4                            loc_6696:
000080D4 323C 1000                  		move.w	#$1000,d1
000080D8 0C40 0010                  		cmpi.w	#$10,d0
000080DC 6E00                       		bgt.s	loc_66F6
000080DE 0C40 FFF0                  		cmpi.w	#-$10,d0
000080E2 6D00                       		blt.s	loc_66C0
000080E4 6000                       		bra.s	loc_66AE
000080E6                            ; ===========================================================================
000080E6                            
000080E6                            loc_66A8:
000080E6 7000                       		moveq	#0,d0
000080E8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000080EC                            
000080EC                            loc_66AE:
000080EC 7200                       		moveq	#0,d1
000080EE 3200                       		move.w	d0,d1
000080F0 D278 F704                  		add.w	($FFFFF704).w,d1
000080F4 4A40                       		tst.w	d0
000080F6 6A00 0000                  		bpl.w	loc_6700
000080FA 6000 0000                  		bra.w	loc_66CC
000080FE                            ; ===========================================================================
000080FE                            
000080FE                            loc_66C0:
000080FE 4441                       		neg.w	d1
00008100 48C1                       		ext.l	d1
00008102 E181                       		asl.l	#8,d1
00008104 D2B8 F704                  		add.l	($FFFFF704).w,d1
00008108 4841                       		swap	d1
0000810A                            
0000810A                            loc_66CC:
0000810A B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000810E 6E00                       		bgt.s	loc_6724
00008110 0C41 FF00                  		cmpi.w	#-$100,d1
00008114 6E00                       		bgt.s	loc_66F0
00008116 0241 07FF                  		andi.w	#$7FF,d1
0000811A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00008120 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00008126 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000812C 6000                       		bra.s	loc_6724
0000812E                            ; ===========================================================================
0000812E                            
0000812E                            loc_66F0:
0000812E 3238 F72C                  		move.w	($FFFFF72C).w,d1
00008132 6000                       		bra.s	loc_6724
00008134                            ; ===========================================================================
00008134                            
00008134                            loc_66F6:
00008134 48C1                       		ext.l	d1
00008136 E181                       		asl.l	#8,d1
00008138 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000813C 4841                       		swap	d1
0000813E                            
0000813E                            loc_6700:
0000813E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00008142 6D00                       		blt.s	loc_6724
00008144 0441 0800                  		subi.w	#$800,d1
00008148 6500                       		bcs.s	loc_6720
0000814A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00008150 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00008156 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000815C 6000                       		bra.s	loc_6724
0000815E                            ; ===========================================================================
0000815E                            
0000815E                            loc_6720:
0000815E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00008162                            
00008162                            loc_6724:
00008162 3838 F704                  		move.w	($FFFFF704).w,d4
00008166 4841                       		swap	d1
00008168 2601                       		move.l	d1,d3
0000816A 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000816E E09B                       		ror.l	#8,d3
00008170 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00008174 21C1 F704                  		move.l	d1,($FFFFF704).w
00008178 3038 F704                  		move.w	($FFFFF704).w,d0
0000817C 0240 0010                  		andi.w	#$10,d0
00008180 1238 F74B                  		move.b	($FFFFF74B).w,d1
00008184 B300                       		eor.b	d1,d0
00008186 6600                       		bne.s	locret_6766
00008188 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000818E 3038 F704                  		move.w	($FFFFF704).w,d0
00008192 9044                       		sub.w	d4,d0
00008194 6A00                       		bpl.s	loc_6760
00008196 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000819C 4E75                       		rts	
0000819E                            ; ===========================================================================
0000819E                            
0000819E                            loc_6760:
0000819E 08F8 0001 F754             		bset	#1,($FFFFF754).w
000081A4                            
000081A4                            locret_6766:
000081A4 4E75                       		rts	
000081A6                            ; End of function ScrollVertical
000081A6                            
000081A6                            
000081A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A6                            
000081A6                            
000081A6                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000081A6 2438 F708                  		move.l	($FFFFF708).w,d2
000081AA 2002                       		move.l	d2,d0
000081AC D084                       		add.l	d4,d0
000081AE 21C0 F708                  		move.l	d0,($FFFFF708).w
000081B2 2200                       		move.l	d0,d1
000081B4 4841                       		swap	d1
000081B6 0241 0010                  		andi.w	#$10,d1
000081BA 1638 F74C                  		move.b	($FFFFF74C).w,d3
000081BE B701                       		eor.b	d3,d1
000081C0 6600                       		bne.s	loc_679C
000081C2 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000081C8 9082                       		sub.l	d2,d0
000081CA 6A00                       		bpl.s	loc_6796
000081CC 08F8 0002 F756             		bset	#2,($FFFFF756).w
000081D2 6000                       		bra.s	loc_679C
000081D4                            ; ===========================================================================
000081D4                            
000081D4                            loc_6796:
000081D4 08F8 0003 F756             		bset	#3,($FFFFF756).w
000081DA                            
000081DA                            loc_679C:
000081DA 2638 F70C                  		move.l	($FFFFF70C).w,d3
000081DE 2003                       		move.l	d3,d0
000081E0 D085                       		add.l	d5,d0
000081E2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000081E6 2200                       		move.l	d0,d1
000081E8 4841                       		swap	d1
000081EA 0241 0010                  		andi.w	#$10,d1
000081EE 1438 F74D                  		move.b	($FFFFF74D).w,d2
000081F2 B501                       		eor.b	d2,d1
000081F4 6600                       		bne.s	locret_67D0
000081F6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000081FC 9083                       		sub.l	d3,d0
000081FE 6A00                       		bpl.s	loc_67CA
00008200 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008206 4E75                       		rts	
00008208                            ; ===========================================================================
00008208                            
00008208                            loc_67CA:
00008208 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000820E                            
0000820E                            locret_67D0:
0000820E 4E75                       		rts	
00008210                            ; End of function ScrollBlock1
00008210                            
00008210                            
00008210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008210                            
00008210                            
00008210                            ScrollBlock2:				; XREF: Deform_SLZ
00008210 2438 F708                  		move.l	($FFFFF708).w,d2
00008214 2002                       		move.l	d2,d0
00008216 D084                       		add.l	d4,d0
00008218 21C0 F708                  		move.l	d0,($FFFFF708).w
0000821C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00008220 2003                       		move.l	d3,d0
00008222 D085                       		add.l	d5,d0
00008224 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00008228 2200                       		move.l	d0,d1
0000822A 4841                       		swap	d1
0000822C 0241 0010                  		andi.w	#$10,d1
00008230 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008234 B501                       		eor.b	d2,d1
00008236 6600                       		bne.s	locret_6812
00008238 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000823E 9083                       		sub.l	d3,d0
00008240 6A00                       		bpl.s	loc_680C
00008242 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008248 4E75                       		rts	
0000824A                            ; ===========================================================================
0000824A                            
0000824A                            loc_680C:
0000824A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008250                            
00008250                            locret_6812:
00008250 4E75                       		rts	
00008252                            ; End of function ScrollBlock2
00008252                            
00008252                            
00008252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008252                            
00008252                            
00008252                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00008252 3638 F70C                  		move.w	($FFFFF70C).w,d3
00008256 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000825A 3200                       		move.w	d0,d1
0000825C 0241 0010                  		andi.w	#$10,d1
00008260 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008264 B501                       		eor.b	d2,d1
00008266 6600                       		bne.s	locret_6842
00008268 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000826E 9043                       		sub.w	d3,d0
00008270 6A00                       		bpl.s	loc_683C
00008272 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008278 4E75                       		rts	
0000827A                            ; ===========================================================================
0000827A                            
0000827A                            loc_683C:
0000827A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008280                            
00008280                            locret_6842:
00008280 4E75                       		rts	
00008282                            ; End of function ScrollBlock3
00008282                            
00008282                            
00008282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008282                            
00008282                            
00008282                            ScrollBlock4:				; XREF: Deform_GHZ
00008282 3438 F710                  		move.w	($FFFFF710).w,d2
00008286 3638 F714                  		move.w	($FFFFF714).w,d3
0000828A 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000828E 48C0                       		ext.l	d0
00008290 EF80                       		asl.l	#7,d0
00008292 D1B8 F710                  		add.l	d0,($FFFFF710).w
00008296 3038 F710                  		move.w	($FFFFF710).w,d0
0000829A 0240 0010                  		andi.w	#$10,d0
0000829E 1238 F74E                  		move.b	($FFFFF74E).w,d1
000082A2 B300                       		eor.b	d1,d0
000082A4 6600                       		bne.s	locret_6884
000082A6 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000082AC 3038 F710                  		move.w	($FFFFF710).w,d0
000082B0 9042                       		sub.w	d2,d0
000082B2 6A00                       		bpl.s	loc_687E
000082B4 08F8 0002 F758             		bset	#2,($FFFFF758).w
000082BA 6000                       		bra.s	locret_6884
000082BC                            ; ===========================================================================
000082BC                            
000082BC                            loc_687E:
000082BC 08F8 0003 F758             		bset	#3,($FFFFF758).w
000082C2                            
000082C2                            locret_6884:
000082C2 4E75                       		rts	
000082C4                            ; End of function ScrollBlock4
000082C4                            
000082C4                            
000082C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C4                            
000082C4                            
000082C4                            sub_6886:				; XREF: loc_C44
000082C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000082CA 4DF9 00C0 0000             		lea	($C00000).l,a6
000082D0 45F8 F756                  		lea	($FFFFF756).w,a2
000082D4 47F8 F708                  		lea	($FFFFF708).w,a3
000082D8 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000082DC 343C 6000                  		move.w	#$6000,d2
000082E0 6100 0000                  		bsr.w	sub_6954
000082E4 45F8 F758                  		lea	($FFFFF758).w,a2
000082E8 47F8 F710                  		lea	($FFFFF710).w,a3
000082EC 6000 0000                  		bra.w	sub_69F4
000082F0                            ; End of function sub_6886
000082F0                            
000082F0                            ; ---------------------------------------------------------------------------
000082F0                            ; Subroutine to	display	correct	tiles as you move
000082F0                            ; ---------------------------------------------------------------------------
000082F0                            
000082F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082F0                            
000082F0                            
000082F0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000082F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000082F6 4DF9 00C0 0000             		lea	($C00000).l,a6
000082FC 45F8 FF32                  		lea	($FFFFFF32).w,a2
00008300 47F8 FF18                  		lea	($FFFFFF18).w,a3
00008304 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00008308 343C 6000                  		move.w	#$6000,d2
0000830C 6100 0000                  		bsr.w	sub_6954
00008310 45F8 FF34                  		lea	($FFFFFF34).w,a2
00008314 47F8 FF20                  		lea	($FFFFFF20).w,a3
00008318 6100 0000                  		bsr.w	sub_69F4
0000831C 45F8 FF30                  		lea	($FFFFFF30).w,a2
00008320 47F8 FF10                  		lea	($FFFFFF10).w,a3
00008324 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00008328 343C 4000                  		move.w	#$4000,d2
0000832C 4A12                       		tst.b	(a2)
0000832E 6700                       		beq.s	locret_6952
00008330 0892 0000                  		bclr	#0,(a2)
00008334 6700                       		beq.s	loc_6908
00008336 78F0                       		moveq	#-$10,d4
00008338 7AF0                       		moveq	#-$10,d5
0000833A 6100 0000                  		bsr.w	sub_6C20
0000833E 78F0                       		moveq	#-$10,d4
00008340 7AF0                       		moveq	#-$10,d5
00008342 6100 0000                  		bsr.w	sub_6AD8
00008346                            
00008346                            loc_6908:
00008346 0892 0001                  		bclr	#1,(a2)
0000834A 6700                       		beq.s	loc_6922
0000834C 383C 00E0                  		move.w	#$E0,d4
00008350 7AF0                       		moveq	#-$10,d5
00008352 6100 0000                  		bsr.w	sub_6C20
00008356 383C 00E0                  		move.w	#$E0,d4
0000835A 7AF0                       		moveq	#-$10,d5
0000835C 6100 0000                  		bsr.w	sub_6AD8
00008360                            
00008360                            loc_6922:
00008360 0892 0002                  		bclr	#2,(a2)
00008364 6700                       		beq.s	loc_6938
00008366 78F0                       		moveq	#-$10,d4
00008368 7AF0                       		moveq	#-$10,d5
0000836A 6100 0000                  		bsr.w	sub_6C20
0000836E 78F0                       		moveq	#-$10,d4
00008370 7AF0                       		moveq	#-$10,d5
00008372 6100 0000                  		bsr.w	sub_6B04
00008376                            
00008376                            loc_6938:
00008376 0892 0003                  		bclr	#3,(a2)
0000837A 6700                       		beq.s	locret_6952
0000837C 78F0                       		moveq	#-$10,d4
0000837E 3A3C 0140                  		move.w	#$140,d5
00008382 6100 0000                  		bsr.w	sub_6C20
00008386 78F0                       		moveq	#-$10,d4
00008388 3A3C 0140                  		move.w	#$140,d5
0000838C 6100 0000                  		bsr.w	sub_6B04
00008390                            
00008390                            locret_6952:
00008390 4E75                       		rts	
00008392                            ; End of function LoadTilesAsYouMove
00008392                            
00008392                            
00008392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008392                            
00008392                            
00008392                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00008392 4A12                       		tst.b	(a2)
00008394 6700 0000                  		beq.w	locret_69F2
00008398 0892 0000                  		bclr	#0,(a2)
0000839C 6700                       		beq.s	loc_6972
0000839E 78F0                       		moveq	#-$10,d4
000083A0 7AF0                       		moveq	#-$10,d5
000083A2 6100 0000                  		bsr.w	sub_6C20
000083A6 78F0                       		moveq	#-$10,d4
000083A8 7AF0                       		moveq	#-$10,d5
000083AA 7C1F                       		moveq	#$1F,d6
000083AC 6100 0000                  		bsr.w	sub_6ADA
000083B0                            
000083B0                            loc_6972:
000083B0 0892 0001                  		bclr	#1,(a2)
000083B4 6700                       		beq.s	loc_698E
000083B6 383C 00E0                  		move.w	#$E0,d4
000083BA 7AF0                       		moveq	#-$10,d5
000083BC 6100 0000                  		bsr.w	sub_6C20
000083C0 383C 00E0                  		move.w	#$E0,d4
000083C4 7AF0                       		moveq	#-$10,d5
000083C6 7C1F                       		moveq	#$1F,d6
000083C8 6100 0000                  		bsr.w	sub_6ADA
000083CC                            
000083CC                            loc_698E:
000083CC 0892 0002                  		bclr	#2,(a2)
000083D0 6700                       		beq.s	loc_69BE
000083D2 78F0                       		moveq	#-$10,d4
000083D4 7AF0                       		moveq	#-$10,d5
000083D6 6100 0000                  		bsr.w	sub_6C20
000083DA 78F0                       		moveq	#-$10,d4
000083DC 7AF0                       		moveq	#-$10,d5
000083DE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000083E2 322B 0004                  		move.w	4(a3),d1
000083E6 0241 FFF0                  		andi.w	#-$10,d1
000083EA 9C41                       		sub.w	d1,d6
000083EC 6D00                       		blt.s	loc_69BE
000083EE E84E                       		lsr.w	#4,d6
000083F0 0C46 000F                  		cmpi.w	#$F,d6
000083F4 6500                       		bcs.s	loc_69BA
000083F6 7C0F                       		moveq	#$F,d6
000083F8                            
000083F8                            loc_69BA:
000083F8 6100 0000                  		bsr.w	sub_6B06
000083FC                            
000083FC                            loc_69BE:
000083FC 0892 0003                  		bclr	#3,(a2)
00008400 6700                       		beq.s	locret_69F2
00008402 78F0                       		moveq	#-$10,d4
00008404 3A3C 0140                  		move.w	#$140,d5
00008408 6100 0000                  		bsr.w	sub_6C20
0000840C 78F0                       		moveq	#-$10,d4
0000840E 3A3C 0140                  		move.w	#$140,d5
00008412 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008416 322B 0004                  		move.w	4(a3),d1
0000841A 0241 FFF0                  		andi.w	#-$10,d1
0000841E 9C41                       		sub.w	d1,d6
00008420 6D00                       		blt.s	locret_69F2
00008422 E84E                       		lsr.w	#4,d6
00008424 0C46 000F                  		cmpi.w	#$F,d6
00008428 6500                       		bcs.s	loc_69EE
0000842A 7C0F                       		moveq	#$F,d6
0000842C                            
0000842C                            loc_69EE:
0000842C 6100 0000                  		bsr.w	sub_6B06
00008430                            
00008430                            locret_69F2:
00008430 4E75                       		rts	
00008432                            ; End of function sub_6954
00008432                            
00008432                            
00008432                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008432                            
00008432                            
00008432                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00008432 4A12                       		tst.b	(a2)
00008434 6700 0000                  		beq.w	locret_6A80
00008438 0892 0002                  		bclr	#2,(a2)
0000843C 6700                       		beq.s	loc_6A3E
0000843E 0C53 0010                  		cmpi.w	#$10,(a3)
00008442 6500                       		bcs.s	loc_6A3E
00008444 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008448 322B 0004                  		move.w	4(a3),d1
0000844C 0241 FFF0                  		andi.w	#-$10,d1
00008450 9841                       		sub.w	d1,d4
00008452 3F04                       		move.w	d4,-(sp)
00008454 7AF0                       		moveq	#-$10,d5
00008456 6100 0000                  		bsr.w	sub_6C20
0000845A 381F                       		move.w	(sp)+,d4
0000845C 7AF0                       		moveq	#-$10,d5
0000845E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008462 322B 0004                  		move.w	4(a3),d1
00008466 0241 FFF0                  		andi.w	#-$10,d1
0000846A 9C41                       		sub.w	d1,d6
0000846C 6D00                       		blt.s	loc_6A3E
0000846E E84E                       		lsr.w	#4,d6
00008470 0446 000E                  		subi.w	#$E,d6
00008474 6400                       		bcc.s	loc_6A3E
00008476 4446                       		neg.w	d6
00008478 6100 0000                  		bsr.w	sub_6B06
0000847C                            
0000847C                            loc_6A3E:
0000847C 0892 0003                  		bclr	#3,(a2)
00008480 6700                       		beq.s	locret_6A80
00008482 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008486 322B 0004                  		move.w	4(a3),d1
0000848A 0241 FFF0                  		andi.w	#-$10,d1
0000848E 9841                       		sub.w	d1,d4
00008490 3F04                       		move.w	d4,-(sp)
00008492 3A3C 0140                  		move.w	#$140,d5
00008496 6100 0000                  		bsr.w	sub_6C20
0000849A 381F                       		move.w	(sp)+,d4
0000849C 3A3C 0140                  		move.w	#$140,d5
000084A0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000084A4 322B 0004                  		move.w	4(a3),d1
000084A8 0241 FFF0                  		andi.w	#-$10,d1
000084AC 9C41                       		sub.w	d1,d6
000084AE 6D00                       		blt.s	locret_6A80
000084B0 E84E                       		lsr.w	#4,d6
000084B2 0446 000E                  		subi.w	#$E,d6
000084B6 6400                       		bcc.s	locret_6A80
000084B8 4446                       		neg.w	d6
000084BA 6100 0000                  		bsr.w	sub_6B06
000084BE                            
000084BE                            locret_6A80:
000084BE 4E75                       		rts	
000084C0                            ; End of function sub_69F4
000084C0                            
000084C0                            ; ===========================================================================
000084C0 4A12                       		tst.b	(a2)
000084C2 6700                       		beq.s	locret_6AD6
000084C4 0892 0002                  		bclr	#2,(a2)
000084C8 6700                       		beq.s	loc_6AAC
000084CA 383C 00D0                  		move.w	#$D0,d4
000084CE 322B 0004                  		move.w	4(a3),d1
000084D2 0241 FFF0                  		andi.w	#-$10,d1
000084D6 9841                       		sub.w	d1,d4
000084D8 3F04                       		move.w	d4,-(sp)
000084DA 7AF0                       		moveq	#-$10,d5
000084DC 6100 0000                  		bsr.w	sub_6C3C
000084E0 381F                       		move.w	(sp)+,d4
000084E2 7AF0                       		moveq	#-$10,d5
000084E4 7C02                       		moveq	#2,d6
000084E6 6100 0000                  		bsr.w	sub_6B06
000084EA                            
000084EA                            loc_6AAC:
000084EA 0892 0003                  		bclr	#3,(a2)
000084EE 6700                       		beq.s	locret_6AD6
000084F0 383C 00D0                  		move.w	#$D0,d4
000084F4 322B 0004                  		move.w	4(a3),d1
000084F8 0241 FFF0                  		andi.w	#-$10,d1
000084FC 9841                       		sub.w	d1,d4
000084FE 3F04                       		move.w	d4,-(sp)
00008500 3A3C 0140                  		move.w	#$140,d5
00008504 6100 0000                  		bsr.w	sub_6C3C
00008508 381F                       		move.w	(sp)+,d4
0000850A 3A3C 0140                  		move.w	#$140,d5
0000850E 7C02                       		moveq	#2,d6
00008510 6100 0000                  		bsr.w	sub_6B06
00008514                            
00008514                            locret_6AD6:
00008514 4E75                       		rts	
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00008516 7C15                       		moveq	#$15,d6
00008518                            ; End of function sub_6AD8
00008518                            
00008518                            
00008518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008518                            
00008518                            
00008518                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00008518 2E3C 0080 0000             		move.l	#$800000,d7
0000851E 2200                       		move.l	d0,d1
00008520                            
00008520                            loc_6AE2:
00008520 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008524 6100 0000                  		bsr.w	sub_6BD6
00008528 2001                       		move.l	d1,d0
0000852A 6100 0000                  		bsr.w	sub_6B32
0000852E 5801                       		addq.b	#4,d1
00008530 0201 007F                  		andi.b	#$7F,d1
00008534 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008538 0645 0010                  		addi.w	#$10,d5
0000853C 51CE FFE2                  		dbf	d6,loc_6AE2
00008540 4E75                       		rts	
00008542                            ; End of function sub_6ADA
00008542                            
00008542                            
00008542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008542                            
00008542                            
00008542                            sub_6B04:				; XREF: LoadTilesAsYouMove
00008542 7C0F                       		moveq	#$F,d6
00008544                            ; End of function sub_6B04
00008544                            
00008544                            
00008544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008544                            ; main draw section
00008544                            
00008544                            sub_6B06:
00008544 2E3C 0080 0000             		move.l	#$800000,d7
0000854A 2200                       		move.l	d0,d1
0000854C                            
0000854C                            loc_6B0E:
0000854C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008550 6100 0000                  		bsr.w	sub_6BD6
00008554 2001                       		move.l	d1,d0
00008556 6100 0000                  		bsr.w	sub_6B32
0000855A 0641 0100                  		addi.w	#$100,d1
0000855E 0241 0FFF                  		andi.w	#$FFF,d1
00008562 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008566 0644 0010                  		addi.w	#$10,d4
0000856A 51CE FFE0                  		dbf	d6,loc_6B0E
0000856E 4E75                       		rts	
00008570                            ; End of function sub_6B06
00008570                            
00008570                            
00008570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008570                            
00008570                            
00008570                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00008570 8042                       		or.w	d2,d0
00008572 4840                       		swap	d0
00008574 0810 0003                  		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
00008578 6600                       		bne.s	loc_6B6E
0000857A 0810 0002                  		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
0000857E 6600                       		bne.s	loc_6B4E
00008580 2A80                       		move.l	d0,(a5)
00008582 2C99                       		move.l	(a1)+,(a6)
00008584 D087                       		add.l	d7,d0
00008586 2A80                       		move.l	d0,(a5)
00008588 2C99                       		move.l	(a1)+,(a6)
0000858A 4E75                       		rts	
0000858C                            ; ===========================================================================
0000858C                            
0000858C                            loc_6B4E:
0000858C 2A80                       		move.l	d0,(a5)
0000858E 2819                       		move.l	(a1)+,d4
00008590 0A84 0800 0800             		eori.l	#$8000800,d4
00008596 4844                       		swap	d4
00008598 2C84                       		move.l	d4,(a6)
0000859A D087                       		add.l	d7,d0
0000859C 2A80                       		move.l	d0,(a5)
0000859E 2819                       		move.l	(a1)+,d4
000085A0 0A84 0800 0800             		eori.l	#$8000800,d4
000085A6 4844                       		swap	d4
000085A8 2C84                       		move.l	d4,(a6)
000085AA 4E75                       		rts	
000085AC                            ; ===========================================================================
000085AC                            
000085AC                            loc_6B6E:
000085AC 0810 0002                  		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
000085B0 6600                       		bne.s	loc_6B90
000085B2 2A80                       		move.l	d0,(a5)
000085B4 2A19                       		move.l	(a1)+,d5
000085B6 2819                       		move.l	(a1)+,d4
000085B8 0A84 1000 1000             		eori.l	#$10001000,d4
000085BE 2C84                       		move.l	d4,(a6)
000085C0 D087                       		add.l	d7,d0
000085C2 2A80                       		move.l	d0,(a5)
000085C4 0A85 1000 1000             		eori.l	#$10001000,d5
000085CA 2C85                       		move.l	d5,(a6)
000085CC 4E75                       		rts	
000085CE                            ; ===========================================================================
000085CE                            
000085CE                            loc_6B90:
000085CE 2A80                       		move.l	d0,(a5)
000085D0 2A19                       		move.l	(a1)+,d5
000085D2 2819                       		move.l	(a1)+,d4
000085D4 0A84 1800 1800             		eori.l	#$18001800,d4
000085DA 4844                       		swap	d4
000085DC 2C84                       		move.l	d4,(a6)
000085DE D087                       		add.l	d7,d0
000085E0 2A80                       		move.l	d0,(a5)
000085E2 0A85 1800 1800             		eori.l	#$18001800,d5
000085E8 4845                       		swap	d5
000085EA 2C85                       		move.l	d5,(a6)
000085EC 4E75                       		rts	
000085EE                            ; End of function sub_6B32
000085EE                            
000085EE                            ; ===========================================================================
000085EE 4E75                       		rts	
000085F0                            ; ===========================================================================
000085F0 2A80                       		move.l	d0,(a5)
000085F2 3A3C 2000                  		move.w	#$2000,d5
000085F6 3819                       		move.w	(a1)+,d4
000085F8 D845                       		add.w	d5,d4
000085FA 3C84                       		move.w	d4,(a6)
000085FC 3819                       		move.w	(a1)+,d4
000085FE D845                       		add.w	d5,d4
00008600 3C84                       		move.w	d4,(a6)
00008602 D087                       		add.l	d7,d0
00008604 2A80                       		move.l	d0,(a5)
00008606 3819                       		move.w	(a1)+,d4
00008608 D845                       		add.w	d5,d4
0000860A 3C84                       		move.w	d4,(a6)
0000860C 3819                       		move.w	(a1)+,d4
0000860E D845                       		add.w	d5,d4
00008610 3C84                       		move.w	d4,(a6)
00008612 4E75                       		rts	
00008614                            
00008614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008614                            ; Reading from layout
00008614                            
00008614                            sub_6BD6:
00008614 43F8 B000                  		lea	($FFFFB000).w,a1			; MJ: load Block's location
00008618 D86B 0004                  		add.w	4(a3),d4				; MJ: load Y position to d4
0000861C DA53                       		add.w	(a3),d5					; MJ: load X position to d5
0000861E 3604                       		move.w	d4,d3					; MJ: copy Y position to d3
00008620 0243 0780                  		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
00008624 E64D                       		lsr.w	#3,d5					; MJ: divide X position by 8
00008626 3005                       		move.w	d5,d0					; MJ: copy to d0
00008628 E848                       		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
0000862A 0240 007F                  		andi.w	#$7F,d0					; MJ: get within 7F
0000862E E34B                       		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
00008630 D043                       		add.w	d3,d0					; MJ: add calc'd Y pos
00008632 76FF                       		moveq	#-1,d3					; MJ: prepare FFFF in d3
00008634 1634 0000                  		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
00008638 0243 00FF                  		andi.w	#$FF,d3					; MJ: keep within 7F
0000863C EF4B                       		lsl.w	#$07,d3					; MJ: multiply by 80
0000863E 0244 0070                  		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
00008642 0245 000E                  		andi.w	#$000E,d5				; MJ: keep X pos within 10
00008646 D644                       		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
00008648 D645                       		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
0000864A 2043                       		movea.l	d3,a0					; MJ: set address (Chunk to read)
0000864C 3610                       		move.w	(a0),d3
0000864E 0243 03FF                  		andi.w	#$3FF,d3
00008652 E74B                       		lsl.w	#3,d3
00008654 D2C3                       		adda.w	d3,a1
00008656                            
00008656                            locret_6C1E:
00008656 4E75                       		rts	
00008658                            ; End of function sub_6BD6
00008658                            
00008658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008658                            ; getting VRam location
00008658                            
00008658                            sub_6C20:
00008658 D86B 0004                  		add.w	4(a3),d4
0000865C DA53                       		add.w	(a3),d5
0000865E 0244 00F0                  		andi.w	#$F0,d4
00008662 0245 01F0                  		andi.w	#$1F0,d5
00008666 E94C                       		lsl.w	#4,d4
00008668 E44D                       		lsr.w	#2,d5
0000866A D845                       		add.w	d5,d4
0000866C 7003                       		moveq	#3,d0
0000866E 4840                       		swap	d0
00008670 3004                       		move.w	d4,d0
00008672 4E75                       		rts	
00008674                            ; End of function sub_6C20
00008674                            
00008674                            
00008674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008674                            ; not used
00008674                            
00008674                            
00008674                            sub_6C3C:
00008674 D86B 0004                  		add.w	4(a3),d4
00008678 DA53                       		add.w	(a3),d5
0000867A 0244 00F0                  		andi.w	#$F0,d4
0000867E 0245 01F0                  		andi.w	#$1F0,d5
00008682 E94C                       		lsl.w	#4,d4
00008684 E44D                       		lsr.w	#2,d5
00008686 D845                       		add.w	d5,d4
00008688 7002                       		moveq	#2,d0
0000868A 4840                       		swap	d0
0000868C 3004                       		move.w	d4,d0
0000868E 4E75                       		rts	
00008690                            ; End of function sub_6C3C
00008690                            
00008690                            ; ---------------------------------------------------------------------------
00008690                            ; Subroutine to	load tiles as soon as the level	appears
00008690                            ; ---------------------------------------------------------------------------
00008690                            
00008690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008690                            
00008690                            
00008690                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00008690 4BF9 00C0 0004             		lea	($C00004).l,a5
00008696 4DF9 00C0 0000             		lea	($C00000).l,a6
0000869C 47F8 F700                  		lea	($FFFFF700).w,a3
000086A0 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
000086A4 343C 4000                  		move.w	#$4000,d2
000086A8 6100                       		bsr.s	LoadTilesFromStart2
000086AA 47F8 F708                  		lea	($FFFFF708).w,a3
000086AE 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000086B2 343C 6000                  		move.w	#$6000,d2
000086B6                            ; End of function LoadTilesFromStart
000086B6                            
000086B6                            
000086B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B6                            
000086B6                            
000086B6                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000086B6 78F0                       		moveq	#-$10,d4
000086B8 7C0F                       		moveq	#$F,d6
000086BA                            
000086BA                            loc_6C82:
000086BA 48E7 0E00                  		movem.l	d4-d6,-(sp)
000086BE 7A00                       		moveq	#0,d5
000086C0 3204                       		move.w	d4,d1
000086C2 6100 FF94                  		bsr.w	sub_6C20
000086C6 3801                       		move.w	d1,d4
000086C8 7A00                       		moveq	#0,d5
000086CA 7C1F                       		moveq	#$1F,d6
000086CC 6100 FE4A                  		bsr.w	sub_6ADA
000086D0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000086D4 0644 0010                  		addi.w	#$10,d4
000086D8 51CE FFE0                  		dbf	d6,loc_6C82
000086DC 4E75                       		rts	
000086DE                            ; End of function LoadTilesFromStart2
000086DE                            
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Main Load Block loading subroutine
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            
000086DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DE                            
000086DE                            
000086DE                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000086DE 7000                       		moveq	#0,d0
000086E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000086E4 E948                       		lsl.w	#4,d0
000086E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000086EC 45F2 0000                  		lea	(a2,d0.w),a2
000086F0 2F0A                       		move.l	a2,-(sp)
000086F2 588A                       		addq.l	#4,a2
000086F4 205A                       		movea.l	(a2)+,a0
000086F6 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000086FA 303C 0000                  		move.w	#0,d0
000086FE 6100 9024                  		bsr.w	EniDec
00008702 205A                       		movea.l	(a2)+,a0
00008704 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000870A 6100 9196                  		bsr.w	KosDec
0000870E 6100 0000                  		bsr.w	LevelLayoutLoad
00008712 301A                       		move.w	(a2)+,d0
00008714 3012                       		move.w	(a2),d0
00008716 0240 00FF                  		andi.w	#$FF,d0
0000871A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00008720 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00008722 700C                       		moveq	#$C,d0		; use SB3 Palette
00008724                            
00008724                            MLB_ChkSBZPal:
00008724 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000872A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000872C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00008732 6600                       		bne.s	MLB_NormalPal	; if not, branch
00008734                            
00008734                            MLB_UsePal0E:
00008734 700E                       		moveq	#$E,d0		; use SBZ2/FZ Palette
00008736                            
00008736                            MLB_NormalPal:
00008736 6100 9B5C                  		bsr.w	PalLoad1	; load Palette (based on	d0)
0000873A 245F                       		movea.l	(sp)+,a2
0000873C 584A                       		addq.w	#4,a2
0000873E 7000                       		moveq	#0,d0
00008740 1012                       		move.b	(a2),d0
00008742 6700                       		beq.s	locret_6D10
00008744 6100 8E40                  		bsr.w	LoadPLC		; load pattern load cues
00008748                            
00008748                            locret_6D10:
00008748 4E75                       		rts	
0000874A                            ; End of function MainLoadBlockLoad
0000874A                            
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            ; Level	layout loading subroutine
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            
0000874A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000874A                            ; This method now releases free ram space from A408 - A7FF
0000874A                            
0000874A                            LevelLayoutLoad:
0000874A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000874E ED08                       		lsl.b	#6,d0
00008750 E848                       		lsr.w	#4,d0
00008752 3400                       		move.w	d0,d2
00008754 D040                       		add.w	d0,d0
00008756 D042                       		add.w	d2,d0
00008758 43F9 0000 0000             		lea	(Level_Index).l,a1
0000875E 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
00008762 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
00008766 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
0000876A 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
0000876E 4E75                       		rts						; MJ: Return
00008770                            
00008770                            ; End of function LevelLayoutLoad2
00008770                            
00008770                            ; ---------------------------------------------------------------------------
00008770                            ; Dynamic screen resize	loading	subroutine
00008770                            ; ---------------------------------------------------------------------------
00008770                            
00008770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008770                            
00008770                            
00008770                            DynScrResizeLoad:			; XREF: DeformBgLayer
00008770 7000                       		moveq	#0,d0
00008772 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008776 D040                       		add.w	d0,d0
00008778 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000877C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00008780 7202                       		moveq	#2,d1
00008782 3038 F726                  		move.w	($FFFFF726).w,d0
00008786 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000878A 6700                       		beq.s	locret_6DAA
0000878C 6400                       		bcc.s	loc_6DAC
0000878E 4441                       		neg.w	d1
00008790 3038 F704                  		move.w	($FFFFF704).w,d0
00008794 B078 F726                  		cmp.w	($FFFFF726).w,d0
00008798 6300                       		bls.s	loc_6DA0
0000879A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000879E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000087A4                            
000087A4                            loc_6DA0:
000087A4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087A8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087AE                            
000087AE                            locret_6DAA:
000087AE 4E75                       		rts	
000087B0                            ; ===========================================================================
000087B0                            
000087B0                            loc_6DAC:				; XREF: DynScrResizeLoad
000087B0 3038 F704                  		move.w	($FFFFF704).w,d0
000087B4 5040                       		addq.w	#8,d0
000087B6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000087BA 6500                       		bcs.s	loc_6DC4
000087BC 0838 0001 D022             		btst	#1,($FFFFD022).w
000087C2 6700                       		beq.s	loc_6DC4
000087C4 D241                       		add.w	d1,d1
000087C6 D241                       		add.w	d1,d1
000087C8                            
000087C8                            loc_6DC4:
000087C8 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087CC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087D2 4E75                       		rts	
000087D4                            ; End of function DynScrResizeLoad
000087D4                            
000087D4                            ; ===========================================================================
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            ; Offset index for dynamic screen resizing
000087D4                            ; ---------------------------------------------------------------------------
000087D4 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000087D8 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000087DC 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000087E0 0000                       		dc.w Resize_Ending-Resize_Index
000087E2                            ; ===========================================================================
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            ; Green	Hill Zone dynamic screen resizing
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            
000087E2                            Resize_GHZ:				; XREF: Resize_Index
000087E2 7000                       		moveq	#0,d0
000087E4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000087E8 D040                       		add.w	d0,d0
000087EA 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000087EE 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000087F2                            ; ===========================================================================
000087F2 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000087F4 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000087F6 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            Resize_GHZ1:
000087F8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000087FE 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00008804 6500                       		bcs.s	locret_6E08	; if not, branch
00008806 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000880C                            
0000880C                            locret_6E08:
0000880C 4E75                       		rts	
0000880E                            ; ===========================================================================
0000880E                            
0000880E                            Resize_GHZ2:
0000880E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008814 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000881A 6500                       		bcs.s	locret_6E3A
0000881C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008822 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00008828 6500                       		bcs.s	locret_6E3A
0000882A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00008830 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00008836 6500                       		bcs.s	locret_6E3A
00008838 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000883E                            
0000883E                            locret_6E3A:
0000883E 4E75                       		rts	
00008840                            ; ===========================================================================
00008840                            
00008840                            Resize_GHZ3:
00008840 7000                       		moveq	#0,d0
00008842 1038 F742                  		move.b	($FFFFF742).w,d0
00008846 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000884A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000884E                            ; ===========================================================================
0000884E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00008850 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00008852 0000                       		dc.w Resize_GHZ3end-off_6E4A
00008854                            ; ===========================================================================
00008854                            
00008854                            Resize_GHZ3main:
00008854 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000885A 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00008860 6500                       		bcs.s	locret_6E96
00008862 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00008868 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000886E 6500                       		bcs.s	locret_6E96
00008870 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00008876 6500                       		bcs.s	loc_6E98
00008878 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000887E 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00008884 6400                       		bcc.s	loc_6E8E
00008886 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000888C 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00008892                            
00008892                            loc_6E8E:
00008892 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008898 6400                       		bcc.s	loc_6E98
0000889A                            
0000889A                            locret_6E96:
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            loc_6E98:
0000889C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000088A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000088A6 4E75                       		rts	
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            Resize_GHZ3boss:
000088A8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000088AE 6400                       		bcc.s	loc_6EB0
000088B0 5538 F742                  		subq.b	#2,($FFFFF742).w
000088B4                            
000088B4                            loc_6EB0:
000088B4 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000088BA 6500                       		bcs.s	locret_6EE8
000088BC 6100 0000                  		bsr.w	SingleObjLoad
000088C0 6600                       		bne.s	loc_6ED0
000088C2 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000088C6 337C 2A60 0008             		move.w	#$2A60,8(a1)
000088CC 337C 0280 000C             		move.w	#$280,$C(a1)
000088D2                            
000088D2                            loc_6ED0:
000088D2 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000088D8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000088DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000088E2 7011                       		moveq	#$11,d0
000088E4 6000 8CA0                  		bra.w	LoadPLC		; load boss patterns
000088E8                            ; ===========================================================================
000088E8                            
000088E8                            locret_6EE8:
000088E8 4E75                       		rts	
000088EA                            ; ===========================================================================
000088EA                            
000088EA                            Resize_GHZ3end:
000088EA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000088F0 4E75                       		rts	
000088F2                            ; ===========================================================================
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            ; Labyrinth Zone dynamic screen	resizing
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            
000088F2                            Resize_LZ:				; XREF: Resize_Index
000088F2 7000                       		moveq	#0,d0
000088F4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000088F8 D040                       		add.w	d0,d0
000088FA 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000088FE 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00008902                            ; ===========================================================================
00008902 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00008904 0000                       		dc.w Resize_LZ12-Resize_LZx
00008906 0000                       		dc.w Resize_LZ3-Resize_LZx
00008908 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000890A                            ; ===========================================================================
0000890A                            
0000890A                            Resize_LZ12:
0000890A 4E75                       		rts	
0000890C                            ; ===========================================================================
0000890C                            
0000890C                            Resize_LZ3:
0000890C 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
00008910 6700                       		beq.s	loc_6F28				; if not, branch
00008912 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
00008916 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
0000891C 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
0000891E 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
00008926 303C 00B7                  		move.w	#$B7,d0
0000892A 6100 89A2                  		bsr.w	PlaySound_Special ; play rumbling sound
0000892E                            
0000892E                            loc_6F28:
0000892E 4A38 F742                  		tst.b	($FFFFF742).w
00008932 6600                       		bne.s	locret_6F64
00008934 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000893A 6500                       		bcs.s	locret_6F62
0000893C 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008942 6400                       		bcc.s	locret_6F62
00008944 6100 0000                  		bsr.w	SingleObjLoad
00008948 6600                       		bne.s	loc_6F4A
0000894A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000894E                            
0000894E                            loc_6F4A:
0000894E 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008954 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000895A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000895E 7011                       		moveq	#$11,d0
00008960 6000 8C24                  		bra.w	LoadPLC		; load boss patterns
00008964                            ; ===========================================================================
00008964                            
00008964                            locret_6F62:
00008964 4E75                       		rts	
00008966                            ; ===========================================================================
00008966                            
00008966                            locret_6F64:
00008966 4E75                       		rts	
00008968                            ; ===========================================================================
00008968                            
00008968                            Resize_SBZ3:
00008968 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000896E 6500                       		bcs.s	locret_6F8C
00008970 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008976 6400                       		bcc.s	locret_6F8C	; if not, branch
00008978 4238 FE30                  		clr.b	($FFFFFE30).w
0000897C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00008982 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008988 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000898E                            
0000898E                            locret_6F8C:
0000898E 4E75                       		rts	
00008990                            ; ===========================================================================
00008990                            ; ---------------------------------------------------------------------------
00008990                            ; Marble Zone dynamic screen resizing
00008990                            ; ---------------------------------------------------------------------------
00008990                            
00008990                            Resize_MZ:				; XREF: Resize_Index
00008990 7000                       		moveq	#0,d0
00008992 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008996 D040                       		add.w	d0,d0
00008998 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000899C 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000089A0                            ; ===========================================================================
000089A0 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000089A2 0000                       		dc.w Resize_MZ2-Resize_MZx
000089A4 0000                       		dc.w Resize_MZ3-Resize_MZx
000089A6                            ; ===========================================================================
000089A6                            
000089A6                            Resize_MZ1:
000089A6 7000                       		moveq	#0,d0
000089A8 1038 F742                  		move.b	($FFFFF742).w,d0
000089AC 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000089B0 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000089B4                            ; ===========================================================================
000089B4 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000089B6 0000                       		dc.w loc_6FEA-off_6FB2
000089B8 0000                       		dc.w loc_702E-off_6FB2
000089BA 0000                       		dc.w loc_7050-off_6FB2
000089BC                            ; ===========================================================================
000089BC                            
000089BC                            loc_6FBA:
000089BC 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000089C2 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000089C8 6500                       		bcs.s	locret_6FE8
000089CA 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000089D0 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000089D6 6500                       		bcs.s	locret_6FE8
000089D8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000089DE 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000089E4 6500                       		bcs.s	locret_6FE8
000089E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000089EA                            
000089EA                            locret_6FE8:
000089EA 4E75                       		rts	
000089EC                            ; ===========================================================================
000089EC                            
000089EC                            loc_6FEA:
000089EC 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000089F2 6400                       		bcc.s	loc_6FF8
000089F4 5538 F742                  		subq.b	#2,($FFFFF742).w
000089F8 4E75                       		rts	
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            loc_6FF8:
000089FA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A00 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008A06 6400                       		bcc.s	locret_702C
00008A08 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008A0E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008A14 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008A1A 6400                       		bcc.s	locret_702C
00008A1C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A22 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A28 6500                       		bcs.s	locret_702C
00008A2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A2E                            
00008A2E                            locret_702C:
00008A2E 4E75                       		rts	
00008A30                            ; ===========================================================================
00008A30                            
00008A30                            loc_702E:
00008A30 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A36 6400                       		bcc.s	loc_703C
00008A38 5538 F742                  		subq.b	#2,($FFFFF742).w
00008A3C 4E75                       		rts	
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            loc_703C:
00008A3E 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008A44 6500                       		bcs.s	locret_704E
00008A46 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008A4C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A50                            
00008A50                            locret_704E:
00008A50 4E75                       		rts	
00008A52                            ; ===========================================================================
00008A52                            
00008A52                            loc_7050:
00008A52 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008A58 6500                       		bcs.s	locret_7072
00008A5A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A60 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A66 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008A6C 6500                       		bcs.s	locret_7072
00008A6E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008A74                            
00008A74                            locret_7072:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Resize_MZ2:
00008A76 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008A7C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008A82 6500                       		bcs.s	locret_7088
00008A84 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008A8A                            
00008A8A                            locret_7088:
00008A8A 4E75                       		rts	
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            Resize_MZ3:
00008A8C 7000                       		moveq	#0,d0
00008A8E 1038 F742                  		move.b	($FFFFF742).w,d0
00008A92 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008A96 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008A9A                            ; ===========================================================================
00008A9A 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008A9C 0000                       		dc.w Resize_MZ3end-off_7098
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            Resize_MZ3boss:
00008A9E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008AA4 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008AAA 6500                       		bcs.s	locret_70E8
00008AAC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008AB2 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008AB8 6500                       		bcs.s	locret_70E8
00008ABA 6100 0000                  		bsr.w	SingleObjLoad
00008ABE 6600                       		bne.s	loc_70D0
00008AC0 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00008AC4 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008ACA 337C 022C 000C             		move.w	#$22C,$C(a1)
00008AD0                            
00008AD0                            loc_70D0:
00008AD0 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008AD6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008ADC 5438 F742                  		addq.b	#2,($FFFFF742).w
00008AE0 7011                       		moveq	#$11,d0
00008AE2 6000 8AA2                  		bra.w	LoadPLC		; load boss patterns
00008AE6                            ; ===========================================================================
00008AE6                            
00008AE6                            locret_70E8:
00008AE6 4E75                       		rts	
00008AE8                            ; ===========================================================================
00008AE8                            
00008AE8                            Resize_MZ3end:
00008AE8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008AEE 4E75                       		rts	
00008AF0                            ; ===========================================================================
00008AF0                            ; ---------------------------------------------------------------------------
00008AF0                            ; Star Light Zone dynamic screen resizing
00008AF0                            ; ---------------------------------------------------------------------------
00008AF0                            
00008AF0                            Resize_SLZ:				; XREF: Resize_Index
00008AF0 7000                       		moveq	#0,d0
00008AF2 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008AF6 D040                       		add.w	d0,d0
00008AF8 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008AFC 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008B00                            ; ===========================================================================
00008B00 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008B02 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008B04 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008B06                            ; ===========================================================================
00008B06                            
00008B06                            Resize_SLZ12:
00008B06 4E75                       		rts	
00008B08                            ; ===========================================================================
00008B08                            
00008B08                            Resize_SLZ3:
00008B08 7000                       		moveq	#0,d0
00008B0A 1038 F742                  		move.b	($FFFFF742).w,d0
00008B0E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008B12 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008B16                            ; ===========================================================================
00008B16 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008B18 0000                       		dc.w Resize_SLZ3boss-off_7118
00008B1A 0000                       		dc.w Resize_SLZ3end-off_7118
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            Resize_SLZ3main:
00008B1C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008B22 6500                       		bcs.s	locret_7130
00008B24 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008B2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B2E                            
00008B2E                            locret_7130:
00008B2E 4E75                       		rts	
00008B30                            ; ===========================================================================
00008B30                            
00008B30                            Resize_SLZ3boss:
00008B30 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008B36 6500                       		bcs.s	locret_715C
00008B38 6100 0000                  		bsr.w	SingleObjLoad
00008B3C 6600                       		bne.s	loc_7144
00008B3E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008B42                            
00008B42                            loc_7144:
00008B42 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008B48 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008B4E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B52 7011                       		moveq	#$11,d0
00008B54 6000 8A30                  		bra.w	LoadPLC		; load boss patterns
00008B58                            ; ===========================================================================
00008B58                            
00008B58                            locret_715C:
00008B58 4E75                       		rts	
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            Resize_SLZ3end:
00008B5A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008B60 4E75                       		rts
00008B62 4E75                       		rts
00008B64                            ; ===========================================================================
00008B64                            ; ---------------------------------------------------------------------------
00008B64                            ; Spring Yard Zone dynamic screen resizing
00008B64                            ; ---------------------------------------------------------------------------
00008B64                            
00008B64                            Resize_SYZ:				; XREF: Resize_Index
00008B64 7000                       		moveq	#0,d0
00008B66 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008B6A D040                       		add.w	d0,d0
00008B6C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008B70 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008B74                            ; ===========================================================================
00008B74 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008B76 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008B78 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008B7A                            ; ===========================================================================
00008B7A                            
00008B7A                            Resize_SYZ1:
00008B7A 4E75                       		rts	
00008B7C                            ; ===========================================================================
00008B7C                            
00008B7C                            Resize_SYZ2:
00008B7C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B82 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008B88 6500                       		bcs.s	locret_71A2
00008B8A 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008B90 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008B96 6500                       		bcs.s	locret_71A2
00008B98 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B9E                            
00008B9E                            locret_71A2:
00008B9E 4E75                       		rts	
00008BA0                            ; ===========================================================================
00008BA0                            
00008BA0                            Resize_SYZ3:
00008BA0 7000                       		moveq	#0,d0
00008BA2 1038 F742                  		move.b	($FFFFF742).w,d0
00008BA6 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008BAA 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008BAE                            ; ===========================================================================
00008BAE 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00008BB0 0000                       		dc.w Resize_SYZ3boss-off_71B2
00008BB2 0000                       		dc.w Resize_SYZ3end-off_71B2
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            Resize_SYZ3main:
00008BB4 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008BBA 6500                       		bcs.s	locret_71CE
00008BBC 6100 0000                  		bsr.w	SingleObjLoad
00008BC0 6600                       		bne.s	locret_71CE
00008BC2 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008BC6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BCA                            
00008BCA                            locret_71CE:
00008BCA 4E75                       		rts	
00008BCC                            ; ===========================================================================
00008BCC                            
00008BCC                            Resize_SYZ3boss:
00008BCC 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00008BD2 6500                       		bcs.s	locret_7200
00008BD4 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008BDA 6100 0000                  		bsr.w	SingleObjLoad
00008BDE 6600                       		bne.s	loc_71EC
00008BE0 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00008BE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BE8                            
00008BE8                            loc_71EC:
00008BE8 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008BEE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008BF4 7011                       		moveq	#$11,d0
00008BF6 6000 898E                  		bra.w	LoadPLC		; load boss patterns
00008BFA                            ; ===========================================================================
00008BFA                            
00008BFA                            locret_7200:
00008BFA 4E75                       		rts	
00008BFC                            ; ===========================================================================
00008BFC                            
00008BFC                            Resize_SYZ3end:
00008BFC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008C02 4E75                       		rts	
00008C04                            ; ===========================================================================
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            ; Scrap	Brain Zone dynamic screen resizing
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            
00008C04                            Resize_SBZ:				; XREF: Resize_Index
00008C04 7000                       		moveq	#0,d0
00008C06 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008C0A D040                       		add.w	d0,d0
00008C0C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008C10 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00008C14                            ; ===========================================================================
00008C14 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008C16 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008C18 0000                       		dc.w Resize_FZ-Resize_SBZx
00008C1A                            ; ===========================================================================
00008C1A                            
00008C1A                            Resize_SBZ1:
00008C1A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008C20 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008C26 6500                       		bcs.s	locret_7242
00008C28 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008C2E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008C34 6500                       		bcs.s	locret_7242
00008C36 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008C3C                            
00008C3C                            locret_7242:
00008C3C 4E75                       		rts	
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            Resize_SBZ2:
00008C3E 7000                       		moveq	#0,d0
00008C40 1038 F742                  		move.b	($FFFFF742).w,d0
00008C44 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C48 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C4C                            ; ===========================================================================
00008C4C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008C4E 0000                       		dc.w Resize_SBZ2boss-off_7252
00008C50 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008C52 0000                       		dc.w Resize_SBZ2end-off_7252
00008C54                            ; ===========================================================================
00008C54                            
00008C54                            Resize_SBZ2main:
00008C54 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008C5A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008C60 6500                       		bcs.s	locret_727A
00008C62 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008C68 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008C6E 6500                       		bcs.s	locret_727A
00008C70 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C74                            
00008C74                            locret_727A:
00008C74 4E75                       		rts	
00008C76                            ; ===========================================================================
00008C76                            
00008C76                            Resize_SBZ2boss:
00008C76 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008C7C 6500                       		bcs.s	locret_7298
00008C7E 6100 0000                  		bsr.w	SingleObjLoad
00008C82 6600                       		bne.s	locret_7298
00008C84 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008C88 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C8C 701E                       		moveq	#$1E,d0
00008C8E 6000 88F6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008C92                            ; ===========================================================================
00008C92                            
00008C92                            locret_7298:
00008C92 4E75                       		rts	
00008C94                            ; ===========================================================================
00008C94                            
00008C94                            Resize_SBZ2boss2:
00008C94 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008C9A 6500                       		bcs.s	loc_72B6
00008C9C 6100 0000                  		bsr.w	SingleObjLoad
00008CA0 6600                       		bne.s	loc_72B0
00008CA2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008CA6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CAA                            
00008CAA                            loc_72B0:
00008CAA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008CB0                            
00008CB0                            loc_72B6:
00008CB0 6000                       		bra.s	loc_72C2
00008CB2                            ; ===========================================================================
00008CB2                            
00008CB2                            Resize_SBZ2end:
00008CB2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008CB8 6500                       		bcs.s	loc_72C2
00008CBA 4E75                       		rts	
00008CBC                            ; ===========================================================================
00008CBC                            
00008CBC                            loc_72C2:
00008CBC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008CC2 4E75                       		rts	
00008CC4                            ; ===========================================================================
00008CC4                            
00008CC4                            Resize_FZ:
00008CC4 7000                       		moveq	#0,d0
00008CC6 1038 F742                  		move.b	($FFFFF742).w,d0
00008CCA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008CCE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008CD2                            ; ===========================================================================
00008CD2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008CD6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008CDA 0000                       		dc.w Resize_FZend2-off_72D8
00008CDC                            ; ===========================================================================
00008CDC                            
00008CDC                            Resize_FZmain:
00008CDC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00008CE2 6500                       		bcs.s	loc_72F4
00008CE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CE8 701F                       		moveq	#$1F,d0
00008CEA 6100 889A                  		bsr.w	LoadPLC		; load FZ boss patterns
00008CEE                            
00008CEE                            loc_72F4:
00008CEE 60CC                       		bra.s	loc_72C2
00008CF0                            ; ===========================================================================
00008CF0                            
00008CF0                            Resize_FZboss:
00008CF0 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008CF6 6500                       		bcs.s	loc_7312
00008CF8 6100 0000                  		bsr.w	SingleObjLoad
00008CFC 6600                       		bne.s	loc_7312
00008CFE 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00008D02 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D06 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008D0C                            
00008D0C                            loc_7312:
00008D0C 60AE                       		bra.s	loc_72C2
00008D0E                            ; ===========================================================================
00008D0E                            
00008D0E                            Resize_FZend:
00008D0E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008D14 6500                       		bcs.s	loc_7320
00008D16 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D1A                            
00008D1A                            loc_7320:
00008D1A 60A0                       		bra.s	loc_72C2
00008D1C                            ; ===========================================================================
00008D1C                            
00008D1C                            locret_7322:
00008D1C 4E75                       		rts	
00008D1E                            ; ===========================================================================
00008D1E                            
00008D1E                            Resize_FZend2:
00008D1E 609C                       		bra.s	loc_72C2
00008D20                            ; ===========================================================================
00008D20                            ; ---------------------------------------------------------------------------
00008D20                            ; Ending sequence dynamic screen resizing (empty)
00008D20                            ; ---------------------------------------------------------------------------
00008D20                            
00008D20                            Resize_Ending:				; XREF: Resize_Index
00008D20 4E75                       		rts	
00008D22                            ; ===========================================================================
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            ; Object 11 - GHZ bridge
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            
00008D22                            Obj11:					; XREF: Obj_Index
00008D22 7000                       		moveq	#0,d0
00008D24 1028 0024                  		move.b	$24(a0),d0
00008D28 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008D2C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008D30                            ; ===========================================================================
00008D30 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008D34 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008D38 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            Obj11_Main:				; XREF: Obj11_Index
00008D3C 5428 0024                  		addq.b	#2,$24(a0)
00008D40 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008D48 317C 438E 0002             		move.w	#$438E,2(a0)
00008D4E 117C 0004 0001             		move.b	#4,1(a0)
00008D54 117C 0003 0018             		move.b	#3,$18(a0)
00008D5A 117C 0080 0019             		move.b	#$80,$19(a0)
00008D60 3428 000C                  		move.w	$C(a0),d2
00008D64 3628 0008                  		move.w	8(a0),d3
00008D68 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D6A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008D6E 7200                       		moveq	#0,d1
00008D70 1212                       		move.b	(a2),d1		; copy a2 to d1
00008D72 14FC 0000                  		move.b	#0,(a2)+
00008D76 3001                       		move.w	d1,d0
00008D78 E248                       		lsr.w	#1,d0
00008D7A E948                       		lsl.w	#4,d0
00008D7C 9640                       		sub.w	d0,d3
00008D7E 5501                       		subq.b	#2,d1
00008D80 6500                       		bcs.s	Obj11_Action
00008D82                            
00008D82                            Obj11_MakeBdg:
00008D82 6100 0000                  		bsr.w	SingleObjLoad
00008D86 6600                       		bne.s	Obj11_Action
00008D88 5228 0028                  		addq.b	#1,$28(a0)
00008D8C B668 0008                  		cmp.w	8(a0),d3
00008D90 6600                       		bne.s	loc_73B8
00008D92 0643 0010                  		addi.w	#$10,d3
00008D96 3142 000C                  		move.w	d2,$C(a0)
00008D9A 3142 003C                  		move.w	d2,$3C(a0)
00008D9E 3A08                       		move.w	a0,d5
00008DA0 0445 D000                  		subi.w	#-$3000,d5
00008DA4 EC4D                       		lsr.w	#6,d5
00008DA6 0245 007F                  		andi.w	#$7F,d5
00008DAA 14C5                       		move.b	d5,(a2)+
00008DAC 5228 0028                  		addq.b	#1,$28(a0)
00008DB0                            
00008DB0                            loc_73B8:				; XREF: ROM:00007398j
00008DB0 3A09                       		move.w	a1,d5
00008DB2 0445 D000                  		subi.w	#-$3000,d5
00008DB6 EC4D                       		lsr.w	#6,d5
00008DB8 0245 007F                  		andi.w	#$7F,d5
00008DBC 14C5                       		move.b	d5,(a2)+
00008DBE 137C 000A 0024             		move.b	#$A,$24(a1)
00008DC4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008DC6 3342 000C                  		move.w	d2,$C(a1)
00008DCA 3342 003C                  		move.w	d2,$3C(a1)
00008DCE 3343 0008                  		move.w	d3,8(a1)
00008DD2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008DDA 337C 438E 0002             		move.w	#$438E,2(a1)
00008DE0 137C 0004 0001             		move.b	#4,1(a1)
00008DE6 137C 0003 0018             		move.b	#3,$18(a1)
00008DEC 137C 0008 0019             		move.b	#8,$19(a1)
00008DF2 0643 0010                  		addi.w	#$10,d3
00008DF6 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008DFA                            
00008DFA                            Obj11_Action:				; XREF: Obj11_Index
00008DFA 6100                       		bsr.s	Obj11_Solid
00008DFC 4A28 003E                  		tst.b	$3E(a0)
00008E00 6700                       		beq.s	Obj11_Display
00008E02 5928 003E                  		subq.b	#4,$3E(a0)
00008E06 6100 0000                  		bsr.w	Obj11_Bend
00008E0A                            
00008E0A                            Obj11_Display:
00008E0A 6100 0000                  		bsr.w	DisplaySprite
00008E0E 6000 0000                  		bra.w	Obj11_ChkDel
00008E12                            
00008E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E12                            
00008E12                            
00008E12                            Obj11_Solid:				; XREF: Obj11_Action
00008E12 7200                       		moveq	#0,d1
00008E14 1228 0028                  		move.b	$28(a0),d1
00008E18 E749                       		lsl.w	#3,d1
00008E1A 3401                       		move.w	d1,d2
00008E1C 5041                       		addq.w	#8,d1
00008E1E D442                       		add.w	d2,d2
00008E20 43F8 D000                  		lea	($FFFFD000).w,a1
00008E24 4A69 0012                  		tst.w	$12(a1)
00008E28 6B00 0000                  		bmi.w	locret_751E
00008E2C 3029 0008                  		move.w	8(a1),d0
00008E30 9068 0008                  		sub.w	8(a0),d0
00008E34 D041                       		add.w	d1,d0
00008E36 6B00 0000                  		bmi.w	locret_751E
00008E3A B042                       		cmp.w	d2,d0
00008E3C 6400 0000                  		bcc.w	locret_751E
00008E40 6000                       		bra.s	Platform2
00008E42                            ; End of function Obj11_Solid
00008E42                            
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            ; Platform subroutine
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            
00008E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E42                            
00008E42                            
00008E42                            PlatformObject:
00008E42 43F8 D000                  		lea	($FFFFD000).w,a1
00008E46 4A69 0012                  		tst.w	$12(a1)
00008E4A 6B00 0000                  		bmi.w	locret_751E
00008E4E 3029 0008                  		move.w	8(a1),d0
00008E52 9068 0008                  		sub.w	8(a0),d0
00008E56 D041                       		add.w	d1,d0
00008E58 6B00 0000                  		bmi.w	locret_751E
00008E5C D241                       		add.w	d1,d1
00008E5E B041                       		cmp.w	d1,d0
00008E60 6400 0000                  		bcc.w	locret_751E
00008E64                            
00008E64                            Platform2:
00008E64 3028 000C                  		move.w	$C(a0),d0
00008E68 5140                       		subq.w	#8,d0
00008E6A                            
00008E6A                            Platform3:
00008E6A 3429 000C                  		move.w	$C(a1),d2
00008E6E 1229 0016                  		move.b	$16(a1),d1
00008E72 4881                       		ext.w	d1
00008E74 D242                       		add.w	d2,d1
00008E76 5841                       		addq.w	#4,d1
00008E78 9041                       		sub.w	d1,d0
00008E7A 6200 0000                  		bhi.w	locret_751E
00008E7E 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E82 6500 0000                  		bcs.w	locret_751E
00008E86 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008E8A 6B00 0000                  		bmi.w	locret_751E
00008E8E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008E94 6400 0000                  		bcc.w	locret_751E
00008E98 D440                       		add.w	d0,d2
00008E9A 5642                       		addq.w	#3,d2
00008E9C 3342 000C                  		move.w	d2,$C(a1)
00008EA0 5428 0024                  		addq.b	#2,$24(a0)
00008EA4                            
00008EA4                            loc_74AE:
00008EA4 0829 0003 0022             		btst	#3,$22(a1)
00008EAA 6700                       		beq.s	loc_74DC
00008EAC 7000                       		moveq	#0,d0
00008EAE 1029 003D                  		move.b	$3D(a1),d0
00008EB2 ED48                       		lsl.w	#6,d0
00008EB4 0680 00FF D000             		addi.l	#$FFD000,d0
00008EBA 2440                       		movea.l	d0,a2
00008EBC 08AA 0003 0022             		bclr	#3,$22(a2)
00008EC2 422A 0025                  		clr.b	$25(a2)
00008EC6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008ECC 6600                       		bne.s	loc_74DC
00008ECE 552A 0024                  		subq.b	#2,$24(a2)
00008ED2                            
00008ED2                            loc_74DC:
00008ED2 3008                       		move.w	a0,d0
00008ED4 0440 D000                  		subi.w	#-$3000,d0
00008ED8 EC48                       		lsr.w	#6,d0
00008EDA 0240 007F                  		andi.w	#$7F,d0
00008EDE 1340 003D                  		move.b	d0,$3D(a1)
00008EE2 137C 0000 0026             		move.b	#0,$26(a1)
00008EE8 337C 0000 0012             		move.w	#0,$12(a1)
00008EEE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00008EF4 0829 0001 0022             		btst	#1,$22(a1)
00008EFA 6700                       		beq.s	loc_7512
00008EFC 2F08                       		move.l	a0,-(sp)
00008EFE 2049                       		movea.l	a1,a0
00008F00 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008F06 205F                       		movea.l	(sp)+,a0
00008F08                            
00008F08                            loc_7512:
00008F08 08E9 0003 0022             		bset	#3,$22(a1)
00008F0E 08E8 0003 0022             		bset	#3,$22(a0)
00008F14                            
00008F14                            locret_751E:
00008F14 4E75                       		rts	
00008F16                            ; End of function PlatformObject
00008F16                            
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            
00008F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F16                            
00008F16                            
00008F16                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008F16 43F8 D000                  		lea	($FFFFD000).w,a1
00008F1A 4A69 0012                  		tst.w	$12(a1)
00008F1E 6B00 FFF4                  		bmi.w	locret_751E
00008F22 3029 0008                  		move.w	8(a1),d0
00008F26 9068 0008                  		sub.w	8(a0),d0
00008F2A D041                       		add.w	d1,d0
00008F2C 6BE6                       		bmi.s	locret_751E
00008F2E D241                       		add.w	d1,d1
00008F30 B041                       		cmp.w	d1,d0
00008F32 64E0                       		bcc.s	locret_751E
00008F34 0828 0000 0001             		btst	#0,1(a0)
00008F3A 6700                       		beq.s	loc_754A
00008F3C 4640                       		not.w	d0
00008F3E D041                       		add.w	d1,d0
00008F40                            
00008F40                            loc_754A:
00008F40 E248                       		lsr.w	#1,d0
00008F42 7600                       		moveq	#0,d3
00008F44 1632 0000                  		move.b	(a2,d0.w),d3
00008F48 3028 000C                  		move.w	$C(a0),d0
00008F4C 9043                       		sub.w	d3,d0
00008F4E 6000 FF1A                  		bra.w	Platform3
00008F52                            ; End of function SlopeObject
00008F52                            
00008F52                            
00008F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F52                            
00008F52                            
00008F52                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008F52 43F8 D000                  		lea	($FFFFD000).w,a1
00008F56 4A69 0012                  		tst.w	$12(a1)
00008F5A 6B00 FFB8                  		bmi.w	locret_751E
00008F5E 3029 0008                  		move.w	8(a1),d0
00008F62 9068 0008                  		sub.w	8(a0),d0
00008F66 D041                       		add.w	d1,d0
00008F68 6B00 FFAA                  		bmi.w	locret_751E
00008F6C D241                       		add.w	d1,d1
00008F6E B041                       		cmp.w	d1,d0
00008F70 6400 FFA2                  		bcc.w	locret_751E
00008F74 3028 000C                  		move.w	$C(a0),d0
00008F78 9043                       		sub.w	d3,d0
00008F7A 6000 FEEE                  		bra.w	Platform3
00008F7E                            ; End of function Obj15_Solid
00008F7E                            
00008F7E                            ; ===========================================================================
00008F7E                            
00008F7E                            Obj11_Action2:				; XREF: Obj11_Index
00008F7E 6100                       		bsr.s	Obj11_WalkOff
00008F80 6100 0000                  		bsr.w	DisplaySprite
00008F84 6000 0000                  		bra.w	Obj11_ChkDel
00008F88                            
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            ; Subroutine allowing Sonic to walk off a bridge
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            
00008F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F88                            
00008F88                            
00008F88                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008F88 7200                       		moveq	#0,d1
00008F8A 1228 0028                  		move.b	$28(a0),d1
00008F8E E749                       		lsl.w	#3,d1
00008F90 3401                       		move.w	d1,d2
00008F92 5041                       		addq.w	#8,d1
00008F94 6100                       		bsr.s	ExitPlatform2
00008F96 6400                       		bcc.s	locret_75BE
00008F98 E848                       		lsr.w	#4,d0
00008F9A 1140 003F                  		move.b	d0,$3F(a0)
00008F9E 1028 003E                  		move.b	$3E(a0),d0
00008FA2 0C00 0040                  		cmpi.b	#$40,d0
00008FA6 6700                       		beq.s	loc_75B6
00008FA8 5828 003E                  		addq.b	#4,$3E(a0)
00008FAC                            
00008FAC                            loc_75B6:
00008FAC 6100 0000                  		bsr.w	Obj11_Bend
00008FB0 6100 0000                  		bsr.w	Obj11_MoveSonic
00008FB4                            
00008FB4                            locret_75BE:
00008FB4 4E75                       		rts	
00008FB6                            ; End of function Obj11_WalkOff
00008FB6                            
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            
00008FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB6                            
00008FB6                            
00008FB6                            ExitPlatform:
00008FB6 3401                       		move.w	d1,d2
00008FB8                            
00008FB8                            ExitPlatform2:
00008FB8 D442                       		add.w	d2,d2
00008FBA 43F8 D000                  		lea	($FFFFD000).w,a1
00008FBE 0829 0001 0022             		btst	#1,$22(a1)
00008FC4 6600                       		bne.s	loc_75E0
00008FC6 3029 0008                  		move.w	8(a1),d0
00008FCA 9068 0008                  		sub.w	8(a0),d0
00008FCE D041                       		add.w	d1,d0
00008FD0 6B00                       		bmi.s	loc_75E0
00008FD2 B042                       		cmp.w	d2,d0
00008FD4 6500                       		bcs.s	locret_75F2
00008FD6                            
00008FD6                            loc_75E0:
00008FD6 08A9 0003 0022             		bclr	#3,$22(a1)
00008FDC 117C 0002 0024             		move.b	#2,$24(a0)
00008FE2 08A8 0003 0022             		bclr	#3,$22(a0)
00008FE8                            
00008FE8                            locret_75F2:
00008FE8 4E75                       		rts	
00008FEA                            ; End of function ExitPlatform
00008FEA                            
00008FEA                            
00008FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FEA                            
00008FEA                            
00008FEA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008FEA 7000                       		moveq	#0,d0
00008FEC 1028 003F                  		move.b	$3F(a0),d0
00008FF0 1030 0029                  		move.b	$29(a0,d0.w),d0
00008FF4 ED48                       		lsl.w	#6,d0
00008FF6 0680 00FF D000             		addi.l	#$FFD000,d0
00008FFC 2440                       		movea.l	d0,a2
00008FFE 43F8 D000                  		lea	($FFFFD000).w,a1
00009002 302A 000C                  		move.w	$C(a2),d0
00009006 5140                       		subq.w	#8,d0
00009008 7200                       		moveq	#0,d1
0000900A 1229 0016                  		move.b	$16(a1),d1
0000900E 9041                       		sub.w	d1,d0
00009010 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00009014 4E75                       		rts	
00009016                            ; End of function Obj11_MoveSonic
00009016                            
00009016                            
00009016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009016                            
00009016                            
00009016                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00009016 1028 003E                  		move.b	$3E(a0),d0
0000901A 6100 9B5E                  		bsr.w	CalcSine
0000901E 3800                       		move.w	d0,d4
00009020 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009026 7000                       		moveq	#0,d0
00009028 1028 0028                  		move.b	$28(a0),d0
0000902C E948                       		lsl.w	#4,d0
0000902E 7600                       		moveq	#0,d3
00009030 1628 003F                  		move.b	$3F(a0),d3
00009034 3403                       		move.w	d3,d2
00009036 D640                       		add.w	d0,d3
00009038 7A00                       		moveq	#0,d5
0000903A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009040 1A35 3000                  		move.b	(a5,d3.w),d5
00009044 0243 000F                  		andi.w	#$F,d3
00009048 E94B                       		lsl.w	#4,d3
0000904A 47F4 3000                  		lea	(a4,d3.w),a3
0000904E 45E8 0029                  		lea	$29(a0),a2
00009052                            
00009052                            loc_765C:
00009052 7000                       		moveq	#0,d0
00009054 101A                       		move.b	(a2)+,d0
00009056 ED48                       		lsl.w	#6,d0
00009058 0680 00FF D000             		addi.l	#$FFD000,d0
0000905E 2240                       		movea.l	d0,a1
00009060 7000                       		moveq	#0,d0
00009062 101B                       		move.b	(a3)+,d0
00009064 5240                       		addq.w	#1,d0
00009066 C0C5                       		mulu.w	d5,d0
00009068 C0C4                       		mulu.w	d4,d0
0000906A 4840                       		swap	d0
0000906C D069 003C                  		add.w	$3C(a1),d0
00009070 3340 000C                  		move.w	d0,$C(a1)
00009074 51CA FFDC                  		dbf	d2,loc_765C
00009078 7000                       		moveq	#0,d0
0000907A 1028 0028                  		move.b	$28(a0),d0
0000907E 7600                       		moveq	#0,d3
00009080 1628 003F                  		move.b	$3F(a0),d3
00009084 5203                       		addq.b	#1,d3
00009086 9600                       		sub.b	d0,d3
00009088 4403                       		neg.b	d3
0000908A 6B00                       		bmi.s	locret_76CA
0000908C 3403                       		move.w	d3,d2
0000908E E94B                       		lsl.w	#4,d3
00009090 47F4 3000                  		lea	(a4,d3.w),a3
00009094 D6C2                       		adda.w	d2,a3
00009096 5342                       		subq.w	#1,d2
00009098 6500                       		bcs.s	locret_76CA
0000909A                            
0000909A                            loc_76A4:
0000909A 7000                       		moveq	#0,d0
0000909C 101A                       		move.b	(a2)+,d0
0000909E ED48                       		lsl.w	#6,d0
000090A0 0680 00FF D000             		addi.l	#$FFD000,d0
000090A6 2240                       		movea.l	d0,a1
000090A8 7000                       		moveq	#0,d0
000090AA 1023                       		move.b	-(a3),d0
000090AC 5240                       		addq.w	#1,d0
000090AE C0C5                       		mulu.w	d5,d0
000090B0 C0C4                       		mulu.w	d4,d0
000090B2 4840                       		swap	d0
000090B4 D069 003C                  		add.w	$3C(a1),d0
000090B8 3340 000C                  		move.w	d0,$C(a1)
000090BC 51CA FFDC                  		dbf	d2,loc_76A4
000090C0                            
000090C0                            locret_76CA:
000090C0 4E75                       		rts	
000090C2                            ; End of function Obj11_Bend
000090C2                            
000090C2                            ; ===========================================================================
000090C2                            ; ---------------------------------------------------------------------------
000090C2                            ; GHZ bridge-bending data
000090C2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000090C2                            ; ---------------------------------------------------------------------------
000090C2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000091D2                            		even
000091D2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000092D2                            		even
000092D2                            
000092D2                            ; ===========================================================================
000092D2                            
000092D2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000092D2 3028 0008                  		move.w	8(a0),d0
000092D6 0240 FF80                  		andi.w	#$FF80,d0
000092DA 3238 F700                  		move.w	($FFFFF700).w,d1
000092DE 0441 0080                  		subi.w	#$80,d1
000092E2 0241 FF80                  		andi.w	#$FF80,d1
000092E6 9041                       		sub.w	d1,d0
000092E8 0C40 0280                  		cmpi.w	#$280,d0
000092EC 6200 0000                  		bhi.w	Obj11_DelAll
000092F0 4E75                       		rts	
000092F2                            ; ===========================================================================
000092F2                            
000092F2                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000092F2 7400                       		moveq	#0,d2
000092F4 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000092F8 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000092FA 5302                       		subq.b	#1,d2		; subtract 1
000092FC 6500                       		bcs.s	Obj11_Delete
000092FE                            
000092FE                            Obj11_DelLoop:
000092FE 7000                       		moveq	#0,d0
00009300 101A                       		move.b	(a2)+,d0
00009302 ED48                       		lsl.w	#6,d0
00009304 0680 00FF D000             		addi.l	#$FFD000,d0
0000930A 2240                       		movea.l	d0,a1
0000930C B048                       		cmp.w	a0,d0
0000930E 6700                       		beq.s	loc_791E
00009310 6100 0000                  		bsr.w	DeleteObject2
00009314                            
00009314                            loc_791E:
00009314 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00009318                            
00009318                            Obj11_Delete:
00009318 6100 0000                  		bsr.w	DeleteObject
0000931C 4E75                       		rts	
0000931E                            ; ===========================================================================
0000931E                            
0000931E                            Obj11_Delete2:				; XREF: Obj11_Index
0000931E 6100 0000                  		bsr.w	DeleteObject
00009322 4E75                       		rts	
00009324                            ; ===========================================================================
00009324                            
00009324                            Obj11_Display2:				; XREF: Obj11_Index
00009324 6100 0000                  		bsr.w	DisplaySprite
00009328 4E75                       		rts	
0000932A                            ; ===========================================================================
0000932A                            ; ---------------------------------------------------------------------------
0000932A                            ; Sprite mappings - GHZ	bridge
0000932A                            ; ---------------------------------------------------------------------------
0000932A                            Map_obj11:
0000932A                            	include "_maps\obj11.asm"
0000932A                            ; ---------------------------------------------------------------------------
0000932A                            ; Sprite mappings - GHZ	bridge
0000932A                            ; ---------------------------------------------------------------------------
0000932A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000932E 0000                       		dc.w byte_794B-Map_obj11
00009330 01                         byte_793A:	dc.b 1
00009331 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009336 02                         byte_7940:	dc.b 2
00009337 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000933C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009341 01                         byte_794B:	dc.b 1
00009342 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00009348 00                         		even
00009348 00                         		even
00009348                            
00009348                            ; ===========================================================================
00009348                            ; ---------------------------------------------------------------------------
00009348                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009348                            ;	    - spiked ball on a chain (SBZ)
00009348                            ; ---------------------------------------------------------------------------
00009348                            
00009348                            Obj15:					; XREF: Obj_Index
00009348 7000                       		moveq	#0,d0
0000934A 1028 0024                  		move.b	$24(a0),d0
0000934E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00009352 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00009356                            ; ===========================================================================
00009356 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000935A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000935E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00009362 0000                       		dc.w Obj15_Action-Obj15_Index
00009364                            ; ===========================================================================
00009364                            
00009364                            Obj15_Main:				; XREF: Obj15_Index
00009364 5428 0024                  		addq.b	#2,$24(a0)
00009368 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00009370 317C 4380 0002             		move.w	#$4380,2(a0)
00009376 117C 0004 0001             		move.b	#4,1(a0)
0000937C 117C 0003 0018             		move.b	#3,$18(a0)
00009382 117C 0018 0019             		move.b	#$18,$19(a0)
00009388 117C 0008 0016             		move.b	#8,$16(a0)
0000938E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00009394 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000939A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000093A0 6600                       		bne.s	Obj15_NotSLZ
000093A2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000093AA 317C 43DC 0002             		move.w	#$43DC,2(a0)
000093B0 117C 0020 0019             		move.b	#$20,$19(a0)
000093B6 117C 0010 0016             		move.b	#$10,$16(a0)
000093BC 117C 0099 0020             		move.b	#$99,$20(a0)
000093C2                            
000093C2                            Obj15_NotSLZ:
000093C2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000093C8 6600                       		bne.s	Obj15_SetLength
000093CA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000093D2 317C 0391 0002             		move.w	#$391,2(a0)
000093D8 117C 0018 0019             		move.b	#$18,$19(a0)
000093DE 117C 0018 0016             		move.b	#$18,$16(a0)
000093E4 117C 0086 0020             		move.b	#$86,$20(a0)
000093EA 117C 000C 0024             		move.b	#$C,$24(a0)
000093F0                            
000093F0                            Obj15_SetLength:
000093F0 1810                       		move.b	0(a0),d4
000093F2 7200                       		moveq	#0,d1
000093F4 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000093F8 1212                       		move.b	(a2),d1		; move a2 to d1
000093FA 3F01                       		move.w	d1,-(sp)
000093FC 0241 000F                  		andi.w	#$F,d1
00009400 14FC 0000                  		move.b	#0,(a2)+
00009404 3601                       		move.w	d1,d3
00009406 E94B                       		lsl.w	#4,d3
00009408 5003                       		addq.b	#8,d3
0000940A 1143 003C                  		move.b	d3,$3C(a0)
0000940E 5103                       		subq.b	#8,d3
00009410 4A28 001A                  		tst.b	$1A(a0)
00009414 6700                       		beq.s	Obj15_MakeChain
00009416 5003                       		addq.b	#8,d3
00009418 5341                       		subq.w	#1,d1
0000941A                            
0000941A                            Obj15_MakeChain:
0000941A 6100 0000                  		bsr.w	SingleObjLoad
0000941E 6600                       		bne.s	loc_7A92
00009420 5228 0028                  		addq.b	#1,$28(a0)
00009424 3A09                       		move.w	a1,d5
00009426 0445 D000                  		subi.w	#-$3000,d5
0000942A EC4D                       		lsr.w	#6,d5
0000942C 0245 007F                  		andi.w	#$7F,d5
00009430 14C5                       		move.b	d5,(a2)+
00009432 137C 000A 0024             		move.b	#$A,$24(a1)
00009438 1284                       		move.b	d4,0(a1)	; load swinging	object
0000943A 2368 0004 0004             		move.l	4(a0),4(a1)
00009440 3368 0002 0002             		move.w	2(a0),2(a1)
00009446 08A9 0006 0002             		bclr	#6,2(a1)
0000944C 137C 0004 0001             		move.b	#4,1(a1)
00009452 137C 0004 0018             		move.b	#4,$18(a1)
00009458 137C 0008 0019             		move.b	#8,$19(a1)
0000945E 137C 0001 001A             		move.b	#1,$1A(a1)
00009464 1343 003C                  		move.b	d3,$3C(a1)
00009468 0403 0010                  		subi.b	#$10,d3
0000946C 6400                       		bcc.s	loc_7A8E
0000946E 137C 0002 001A             		move.b	#2,$1A(a1)
00009474 137C 0003 0018             		move.b	#3,$18(a1)
0000947A 08E9 0006 0002             		bset	#6,2(a1)
00009480                            
00009480                            loc_7A8E:
00009480 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00009484                            
00009484                            loc_7A92:
00009484 3A08                       		move.w	a0,d5
00009486 0445 D000                  		subi.w	#-$3000,d5
0000948A EC4D                       		lsr.w	#6,d5
0000948C 0245 007F                  		andi.w	#$7F,d5
00009490 14C5                       		move.b	d5,(a2)+
00009492 317C 4080 0026             		move.w	#$4080,$26(a0)
00009498 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000949E 321F                       		move.w	(sp)+,d1
000094A0 0801 0004                  		btst	#4,d1		; is object type $8X ?
000094A4 6700                       		beq.s	loc_7AD4	; if not, branch
000094A6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000094AE 317C 43AA 0002             		move.w	#$43AA,2(a0)
000094B4 117C 0001 001A             		move.b	#1,$1A(a0)
000094BA 117C 0002 0018             		move.b	#2,$18(a0)
000094C0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000094C6                            
000094C6                            loc_7AD4:
000094C6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000094CC 6700                       		beq.s	Obj15_Action	; if yes, branch
000094CE                            
000094CE                            Obj15_SetSolid:				; XREF: Obj15_Index
000094CE 7200                       		moveq	#0,d1
000094D0 1228 0019                  		move.b	$19(a0),d1
000094D4 7600                       		moveq	#0,d3
000094D6 1628 0016                  		move.b	$16(a0),d3
000094DA 6100 FA76                  		bsr.w	Obj15_Solid
000094DE                            
000094DE                            Obj15_Action:				; XREF: Obj15_Index
000094DE 6100 0000                  		bsr.w	Obj15_Move
000094E2 6100 0000                  		bsr.w	DisplaySprite
000094E6 6000 0000                  		bra.w	Obj15_ChkDel
000094EA                            ; ===========================================================================
000094EA                            
000094EA                            Obj15_Action2:				; XREF: Obj15_Index
000094EA 7200                       		moveq	#0,d1
000094EC 1228 0019                  		move.b	$19(a0),d1
000094F0 6100 FAC4                  		bsr.w	ExitPlatform
000094F4 3F28 0008                  		move.w	8(a0),-(sp)
000094F8 6100 0000                  		bsr.w	Obj15_Move
000094FC 341F                       		move.w	(sp)+,d2
000094FE 7600                       		moveq	#0,d3
00009500 1628 0016                  		move.b	$16(a0),d3
00009504 5203                       		addq.b	#1,d3
00009506 6100 0000                  		bsr.w	MvSonicOnPtfm
0000950A 6100 0000                  		bsr.w	DisplaySprite
0000950E 6000 0000                  		bra.w	Obj15_ChkDel
00009512                            
00009512 4E75                       		rts
00009514                            
00009514                            ; ---------------------------------------------------------------------------
00009514                            ; Subroutine to	change Sonic's position with a platform
00009514                            ; ---------------------------------------------------------------------------
00009514                            
00009514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009514                            
00009514                            
00009514                            MvSonicOnPtfm:
00009514 43F8 D000                  		lea	($FFFFD000).w,a1
00009518 3028 000C                  		move.w	$C(a0),d0
0000951C 9043                       		sub.w	d3,d0
0000951E 6000                       		bra.s	MvSonic2
00009520                            ; End of function MvSonicOnPtfm
00009520                            
00009520                            ; ---------------------------------------------------------------------------
00009520                            ; Subroutine to	change Sonic's position with a platform
00009520                            ; ---------------------------------------------------------------------------
00009520                            
00009520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009520                            
00009520                            
00009520                            MvSonicOnPtfm2:
00009520 43F8 D000                  		lea	($FFFFD000).w,a1
00009524 3028 000C                  		move.w	$C(a0),d0
00009528 0440 0009                  		subi.w	#9,d0
0000952C                            
0000952C                            MvSonic2:
0000952C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009530 6B00                       		bmi.s	locret_7B62
00009532 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009538 6400                       		bcc.s	locret_7B62
0000953A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000953E 6600                       		bne.s	locret_7B62
00009540 7200                       		moveq	#0,d1
00009542 1229 0016                  		move.b	$16(a1),d1
00009546 9041                       		sub.w	d1,d0
00009548 3340 000C                  		move.w	d0,$C(a1)
0000954C 9468 0008                  		sub.w	8(a0),d2
00009550 9569 0008                  		sub.w	d2,8(a1)
00009554                            
00009554                            locret_7B62:
00009554 4E75                       		rts	
00009556                            ; End of function MvSonicOnPtfm2
00009556                            
00009556                            
00009556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009556                            
00009556                            
00009556                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00009556 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000955A 323C 0080                  		move.w	#$80,d1
0000955E 0828 0000 0022             		btst	#0,$22(a0)
00009564 6700                       		beq.s	loc_7B78
00009566 4440                       		neg.w	d0
00009568 D041                       		add.w	d1,d0
0000956A                            
0000956A                            loc_7B78:
0000956A 6000                       		bra.s	Obj15_Move2
0000956C                            ; End of function Obj15_Move
0000956C                            
0000956C                            
0000956C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000956C                            
0000956C                            
0000956C                            Obj48_Move:				; XREF: Obj48_Display2
0000956C 4A28 003D                  		tst.b	$3D(a0)
00009570 6600                       		bne.s	loc_7B9C
00009572 3028 003E                  		move.w	$3E(a0),d0
00009576 5040                       		addq.w	#8,d0
00009578 3140 003E                  		move.w	d0,$3E(a0)
0000957C D168 0026                  		add.w	d0,$26(a0)
00009580 0C40 0200                  		cmpi.w	#$200,d0
00009584 6600                       		bne.s	loc_7BB6
00009586 117C 0001 003D             		move.b	#1,$3D(a0)
0000958C 6000                       		bra.s	loc_7BB6
0000958E                            ; ===========================================================================
0000958E                            
0000958E                            loc_7B9C:
0000958E 3028 003E                  		move.w	$3E(a0),d0
00009592 5140                       		subq.w	#8,d0
00009594 3140 003E                  		move.w	d0,$3E(a0)
00009598 D168 0026                  		add.w	d0,$26(a0)
0000959C 0C40 FE00                  		cmpi.w	#-$200,d0
000095A0 6600                       		bne.s	loc_7BB6
000095A2 117C 0000 003D             		move.b	#0,$3D(a0)
000095A8                            
000095A8                            loc_7BB6:
000095A8 1028 0026                  		move.b	$26(a0),d0
000095AC                            ; End of function Obj48_Move
000095AC                            
000095AC                            
000095AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095AC                            
000095AC                            
000095AC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000095AC 6100 95CC                  		bsr.w	CalcSine
000095B0 3428 0038                  		move.w	$38(a0),d2
000095B4 3628 003A                  		move.w	$3A(a0),d3
000095B8 45E8 0028                  		lea	$28(a0),a2
000095BC 7C00                       		moveq	#0,d6
000095BE 1C1A                       		move.b	(a2)+,d6
000095C0                            
000095C0                            loc_7BCE:
000095C0 7800                       		moveq	#0,d4
000095C2 181A                       		move.b	(a2)+,d4
000095C4 ED4C                       		lsl.w	#6,d4
000095C6 0684 00FF D000             		addi.l	#$FFD000,d4
000095CC 2244                       		movea.l	d4,a1
000095CE 7800                       		moveq	#0,d4
000095D0 1829 003C                  		move.b	$3C(a1),d4
000095D4 2A04                       		move.l	d4,d5
000095D6 C9C0                       		muls.w	d0,d4
000095D8 E084                       		asr.l	#8,d4
000095DA CBC1                       		muls.w	d1,d5
000095DC E085                       		asr.l	#8,d5
000095DE D842                       		add.w	d2,d4
000095E0 DA43                       		add.w	d3,d5
000095E2 3344 000C                  		move.w	d4,$C(a1)
000095E6 3345 0008                  		move.w	d5,8(a1)
000095EA 51CE FFD4                  		dbf	d6,loc_7BCE
000095EE 4E75                       		rts	
000095F0                            ; End of function Obj15_Move2
000095F0                            
000095F0                            ; ===========================================================================
000095F0                            
000095F0                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000095F0 3028 003A                  		move.w	$3A(a0),d0
000095F4 0240 FF80                  		andi.w	#$FF80,d0
000095F8 3238 F700                  		move.w	($FFFFF700).w,d1
000095FC 0441 0080                  		subi.w	#$80,d1
00009600 0241 FF80                  		andi.w	#$FF80,d1
00009604 9041                       		sub.w	d1,d0
00009606 0C40 0280                  		cmpi.w	#$280,d0
0000960A 6200 0000                  		bhi.w	Obj15_DelAll
0000960E 4E75                       		rts	
00009610                            ; ===========================================================================
00009610                            
00009610                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00009610 7400                       		moveq	#0,d2
00009612 45E8 0028                  		lea	$28(a0),a2
00009616 141A                       		move.b	(a2)+,d2
00009618                            
00009618                            Obj15_DelLoop:
00009618 7000                       		moveq	#0,d0
0000961A 101A                       		move.b	(a2)+,d0
0000961C ED48                       		lsl.w	#6,d0
0000961E 0680 00FF D000             		addi.l	#$FFD000,d0
00009624 2240                       		movea.l	d0,a1
00009626 6100 0000                  		bsr.w	DeleteObject2
0000962A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000962E 4E75                       		rts	
00009630                            ; ===========================================================================
00009630                            
00009630                            Obj15_Delete:				; XREF: Obj15_Index
00009630 6100 0000                  		bsr.w	DeleteObject
00009634 4E75                       		rts	
00009636                            ; ===========================================================================
00009636                            
00009636                            Obj15_Display:				; XREF: Obj15_Index
00009636 6000 0000                  		bra.w	DisplaySprite
0000963A                            ; ===========================================================================
0000963A                            ; ---------------------------------------------------------------------------
0000963A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000963A                            ; ---------------------------------------------------------------------------
0000963A                            Map_obj15:
0000963A                            	include "_maps\obj15ghz.asm"
0000963A                            ; ---------------------------------------------------------------------------
0000963A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000963A                            ; ---------------------------------------------------------------------------
0000963A 0000                       		dc.w byte_7C4E-Map_obj15
0000963C 0000                       		dc.w byte_7C59-Map_obj15
0000963E 0000                       		dc.w byte_7C5F-Map_obj15
00009640 02                         byte_7C4E:	dc.b 2
00009641 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009646 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000964B 01                         byte_7C59:	dc.b 1
0000964C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009651 01                         byte_7C5F:	dc.b 1
00009652 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009658 00                         		even
00009658 00                         		even
00009658                            
00009658                            ; ---------------------------------------------------------------------------
00009658                            ; Sprite mappings - SLZ	swinging platforms
00009658                            ; ---------------------------------------------------------------------------
00009658                            Map_obj15a:
00009658                            	include "_maps\obj15slz.asm"
00009658                            ; ---------------------------------------------------------------------------
00009658                            ; Sprite mappings - SLZ	swinging platforms
00009658                            ; ---------------------------------------------------------------------------
00009658 0000                       		dc.w byte_7C6C-Map_obj15a
0000965A 0000                       		dc.w byte_7C95-Map_obj15a
0000965C 0000                       		dc.w byte_7C9B-Map_obj15a
0000965E 08                         byte_7C6C:	dc.b 8
0000965F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009664 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009669 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000966E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009673 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009678 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000967D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009682 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009687 01                         byte_7C95:	dc.b 1
00009688 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000968D 01                         byte_7C9B:	dc.b 1
0000968E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009694 00                         		even
00009694 00                         		even
00009694                            
00009694                            ; ===========================================================================
00009694                            ; ---------------------------------------------------------------------------
00009694                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009694                            ; ---------------------------------------------------------------------------
00009694                            
00009694                            Obj17:					; XREF: Obj_Index
00009694 7000                       		moveq	#0,d0
00009696 1028 0024                  		move.b	$24(a0),d0
0000969A 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000969E 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000096A2                            ; ===========================================================================
000096A2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000096A4 0000                       		dc.w Obj17_Action-Obj17_Index
000096A6 0000                       		dc.w Obj17_Action-Obj17_Index
000096A8 0000                       		dc.w Obj17_Delete-Obj17_Index
000096AA 0000                       		dc.w Obj17_Display-Obj17_Index
000096AC                            ; ===========================================================================
000096AC                            
000096AC                            Obj17_Main:				; XREF: Obj17_Index
000096AC 5428 0024                  		addq.b	#2,$24(a0)
000096B0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000096B8 317C 4398 0002             		move.w	#$4398,2(a0)
000096BE 117C 0007 0022             		move.b	#7,$22(a0)
000096C4 117C 0004 0001             		move.b	#4,1(a0)
000096CA 117C 0003 0018             		move.b	#3,$18(a0)
000096D0 117C 0008 0019             		move.b	#8,$19(a0)
000096D6 3428 000C                  		move.w	$C(a0),d2
000096DA 3628 0008                  		move.w	8(a0),d3
000096DE 1810                       		move.b	0(a0),d4
000096E0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000096E4 7200                       		moveq	#0,d1
000096E6 1212                       		move.b	(a2),d1		; move a2 to d1
000096E8 14FC 0000                  		move.b	#0,(a2)+
000096EC 3001                       		move.w	d1,d0
000096EE E248                       		lsr.w	#1,d0
000096F0 E948                       		lsl.w	#4,d0
000096F2 9640                       		sub.w	d0,d3
000096F4 5501                       		subq.b	#2,d1
000096F6 6500                       		bcs.s	Obj17_Action
000096F8 7C00                       		moveq	#0,d6
000096FA                            
000096FA                            Obj17_MakeHelix:
000096FA 6100 0000                  		bsr.w	SingleObjLoad
000096FE 6600                       		bne.s	Obj17_Action
00009700 5228 0028                  		addq.b	#1,$28(a0)
00009704 3A09                       		move.w	a1,d5
00009706 0445 D000                  		subi.w	#$D000,d5
0000970A EC4D                       		lsr.w	#6,d5
0000970C 0245 007F                  		andi.w	#$7F,d5
00009710 14C5                       		move.b	d5,(a2)+
00009712 137C 0008 0024             		move.b	#8,$24(a1)
00009718 1284                       		move.b	d4,0(a1)
0000971A 3342 000C                  		move.w	d2,$C(a1)
0000971E 3343 0008                  		move.w	d3,8(a1)
00009722 2368 0004 0004             		move.l	4(a0),4(a1)
00009728 337C 4398 0002             		move.w	#$4398,2(a1)
0000972E 137C 0004 0001             		move.b	#4,1(a1)
00009734 137C 0003 0018             		move.b	#3,$18(a1)
0000973A 137C 0008 0019             		move.b	#8,$19(a1)
00009740 1346 003E                  		move.b	d6,$3E(a1)
00009744 5206                       		addq.b	#1,d6
00009746 0206 0007                  		andi.b	#7,d6
0000974A 0643 0010                  		addi.w	#$10,d3
0000974E B668 0008                  		cmp.w	8(a0),d3
00009752 6600                       		bne.s	loc_7D78
00009754 1146 003E                  		move.b	d6,$3E(a0)
00009758 5206                       		addq.b	#1,d6
0000975A 0206 0007                  		andi.b	#7,d6
0000975E 0643 0010                  		addi.w	#$10,d3
00009762 5228 0028                  		addq.b	#1,$28(a0)
00009766                            
00009766                            loc_7D78:
00009766 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000976A                            
0000976A                            Obj17_Action:				; XREF: Obj17_Index
0000976A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000976E 6100 0000                  		bsr.w	DisplaySprite
00009772 6000 0000                  		bra.w	Obj17_ChkDel
00009776                            
00009776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009776                            
00009776                            
00009776                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00009776 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000977A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00009780 D028 003E                  		add.b	$3E(a0),d0
00009784 0200 0007                  		andi.b	#7,d0
00009788 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000978C 6600                       		bne.s	locret_7DA6
0000978E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00009794                            
00009794                            locret_7DA6:
00009794 4E75                       		rts	
00009796                            ; End of function Obj17_RotateSpikes
00009796                            
00009796                            ; ===========================================================================
00009796                            
00009796                            Obj17_ChkDel:				; XREF: Obj17_Action
00009796 3028 0008                  		move.w	8(a0),d0
0000979A 0240 FF80                  		andi.w	#$FF80,d0
0000979E 3238 F700                  		move.w	($FFFFF700).w,d1
000097A2 0441 0080                  		subi.w	#$80,d1
000097A6 0241 FF80                  		andi.w	#$FF80,d1
000097AA 9041                       		sub.w	d1,d0
000097AC 0C40 0280                  		cmpi.w	#$280,d0
000097B0 6200 0000                  		bhi.w	Obj17_DelAll
000097B4 4E75                       		rts	
000097B6                            ; ===========================================================================
000097B6                            
000097B6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000097B6 7400                       		moveq	#0,d2
000097B8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000097BC 141A                       		move.b	(a2)+,d2	; move a2 to d2
000097BE 5502                       		subq.b	#2,d2
000097C0 6500                       		bcs.s	Obj17_Delete
000097C2                            
000097C2                            Obj17_DelLoop:
000097C2 7000                       		moveq	#0,d0
000097C4 101A                       		move.b	(a2)+,d0
000097C6 ED48                       		lsl.w	#6,d0
000097C8 0680 00FF D000             		addi.l	#$FFD000,d0
000097CE 2240                       		movea.l	d0,a1
000097D0 6100 0000                  		bsr.w	DeleteObject2	; delete object
000097D4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000097D8                            
000097D8                            Obj17_Delete:				; XREF: Obj17_Index
000097D8 6100 0000                  		bsr.w	DeleteObject
000097DC 4E75                       		rts	
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            Obj17_Display:				; XREF: Obj17_Index
000097DE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000097E2 6000 0000                  		bra.w	DisplaySprite
000097E6                            ; ===========================================================================
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            Map_obj17:
000097E6                            	include "_maps\obj17.asm"
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097E6                            ; ---------------------------------------------------------------------------
000097E6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000097EA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000097EE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000097F2 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000097F6 01                         byte_7E08:	dc.b 1
000097F7 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000097FC 01                         byte_7E0E:	dc.b 1
000097FD F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00009802 01                         byte_7E14:	dc.b 1
00009803 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00009808 01                         byte_7E1A:	dc.b 1
00009809 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000980E 01                         byte_7E20:	dc.b 1
0000980F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00009814 01                         byte_7E26:	dc.b 1
00009815 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000981A 01                         byte_7E2C:	dc.b 1
0000981B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00009820                            		even
00009820                            		even
00009820                            
00009820                            ; ===========================================================================
00009820                            ; ---------------------------------------------------------------------------
00009820                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009820                            ; ---------------------------------------------------------------------------
00009820                            
00009820                            Obj18:					; XREF: Obj_Index
00009820 7000                       		moveq	#0,d0
00009822 1028 0024                  		move.b	$24(a0),d0
00009826 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000982A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000982E                            ; ===========================================================================
0000982E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00009830 0000                       		dc.w Obj18_Solid-Obj18_Index
00009832 0000                       		dc.w Obj18_Action2-Obj18_Index
00009834 0000                       		dc.w Obj18_Delete-Obj18_Index
00009836 0000                       		dc.w Obj18_Action-Obj18_Index
00009838                            ; ===========================================================================
00009838                            
00009838                            Obj18_Main:				; XREF: Obj18_Index
00009838 5428 0024                  		addq.b	#2,$24(a0)
0000983C 317C 4000 0002             		move.w	#$4000,2(a0)
00009842 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000984A 117C 0020 0019             		move.b	#$20,$19(a0)
00009850 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00009856 6600                       		bne.s	Obj18_NotSYZ
00009858 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00009860 117C 0020 0019             		move.b	#$20,$19(a0)
00009866                            
00009866                            Obj18_NotSYZ:
00009866 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000986C 6600                       		bne.s	Obj18_NotSLZ
0000986E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00009876 117C 0020 0019             		move.b	#$20,$19(a0)
0000987C 317C 4000 0002             		move.w	#$4000,2(a0)
00009882 117C 0003 0028             		move.b	#3,$28(a0)
00009888                            
00009888                            Obj18_NotSLZ:
00009888 117C 0004 0001             		move.b	#4,1(a0)
0000988E 117C 0004 0018             		move.b	#4,$18(a0)
00009894 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000989A 3168 000C 0034             		move.w	$C(a0),$34(a0)
000098A0 3168 0008 0032             		move.w	8(a0),$32(a0)
000098A6 317C 0080 0026             		move.w	#$80,$26(a0)
000098AC 7200                       		moveq	#0,d1
000098AE 1028 0028                  		move.b	$28(a0),d0
000098B2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000098B6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000098B8 5201                       		addq.b	#1,d1		; use frame #1
000098BA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000098C0                            
000098C0                            Obj18_SetFrame:
000098C0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000098C4                            
000098C4                            Obj18_Solid:				; XREF: Obj18_Index
000098C4 4A28 0038                  		tst.b	$38(a0)
000098C8 6700                       		beq.s	loc_7EE0
000098CA 5928 0038                  		subq.b	#4,$38(a0)
000098CE                            
000098CE                            loc_7EE0:
000098CE 7200                       		moveq	#0,d1
000098D0 1228 0019                  		move.b	$19(a0),d1
000098D4 6100 F56C                  		bsr.w	PlatformObject
000098D8                            
000098D8                            Obj18_Action:				; XREF: Obj18_Index
000098D8 6100 0000                  		bsr.w	Obj18_Move
000098DC 6100 0000                  		bsr.w	Obj18_Nudge
000098E0 6100 0000                  		bsr.w	DisplaySprite
000098E4 6000 0000                  		bra.w	Obj18_ChkDel
000098E8                            ; ===========================================================================
000098E8                            
000098E8                            Obj18_Action2:				; XREF: Obj18_Index
000098E8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000098EE 6700                       		beq.s	loc_7F06
000098F0 5828 0038                  		addq.b	#4,$38(a0)
000098F4                            
000098F4                            loc_7F06:
000098F4 7200                       		moveq	#0,d1
000098F6 1228 0019                  		move.b	$19(a0),d1
000098FA 6100 F6BA                  		bsr.w	ExitPlatform
000098FE 3F28 0008                  		move.w	8(a0),-(sp)
00009902 6100 0000                  		bsr.w	Obj18_Move
00009906 6100 0000                  		bsr.w	Obj18_Nudge
0000990A 341F                       		move.w	(sp)+,d2
0000990C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009910 6100 0000                  		bsr.w	DisplaySprite
00009914 6000 0000                  		bra.w	Obj18_ChkDel
00009918                            
00009918 4E75                       		rts
0000991A                            
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            ; Subroutine to	move platform slightly when you	stand on it
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            
0000991A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000991A                            
0000991A                            
0000991A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000991A 1028 0038                  		move.b	$38(a0),d0
0000991E 6100 925A                  		bsr.w	CalcSine
00009922 323C 0400                  		move.w	#$400,d1
00009926 C1C1                       		muls.w	d1,d0
00009928 4840                       		swap	d0
0000992A D068 002C                  		add.w	$2C(a0),d0
0000992E 3140 000C                  		move.w	d0,$C(a0)
00009932 4E75                       		rts	
00009934                            ; End of function Obj18_Nudge
00009934                            
00009934                            ; ---------------------------------------------------------------------------
00009934                            ; Subroutine to	move platforms
00009934                            ; ---------------------------------------------------------------------------
00009934                            
00009934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009934                            
00009934                            
00009934                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00009934 7000                       		moveq	#0,d0
00009936 1028 0028                  		move.b	$28(a0),d0
0000993A 0240 000F                  		andi.w	#$F,d0
0000993E D040                       		add.w	d0,d0
00009940 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00009944 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009948                            ; End of function Obj18_Move
00009948                            
00009948                            ; ===========================================================================
00009948 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000994C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009950 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00009954 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009958 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000995C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009960 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00009962                            ; ===========================================================================
00009962                            
00009962                            Obj18_Type00:
00009962 4E75                       		rts			; platform 00 doesn't move
00009964                            ; ===========================================================================
00009964                            
00009964                            Obj18_Type05:
00009964 3028 0032                  		move.w	$32(a0),d0
00009968 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000996C 4401                       		neg.b	d1		; reverse platform-motion
0000996E 0601 0040                  		addi.b	#$40,d1
00009972 6000                       		bra.s	Obj18_01_Move
00009974                            ; ===========================================================================
00009974                            
00009974                            Obj18_Type01:
00009974 3028 0032                  		move.w	$32(a0),d0
00009978 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000997C 0401 0040                  		subi.b	#$40,d1
00009980                            
00009980                            Obj18_01_Move:
00009980 4881                       		ext.w	d1
00009982 D041                       		add.w	d1,d0
00009984 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00009988 6000 0000                  		bra.w	Obj18_ChgMotion
0000998C                            ; ===========================================================================
0000998C                            
0000998C                            Obj18_Type0C:
0000998C 3028 0034                  		move.w	$34(a0),d0
00009990 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009994 4401                       		neg.b	d1		; reverse platform-motion
00009996 0601 0030                  		addi.b	#$30,d1
0000999A 6000                       		bra.s	Obj18_02_Move
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            Obj18_Type0B:
0000999C 3028 0034                  		move.w	$34(a0),d0
000099A0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000099A4 0401 0030                  		subi.b	#$30,d1
000099A8 6000                       		bra.s	Obj18_02_Move
000099AA                            ; ===========================================================================
000099AA                            
000099AA                            Obj18_Type06:
000099AA 3028 0034                  		move.w	$34(a0),d0
000099AE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099B2 4401                       		neg.b	d1		; reverse platform-motion
000099B4 0601 0040                  		addi.b	#$40,d1
000099B8 6000                       		bra.s	Obj18_02_Move
000099BA                            ; ===========================================================================
000099BA                            
000099BA                            Obj18_Type02:
000099BA 3028 0034                  		move.w	$34(a0),d0
000099BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099C2 0401 0040                  		subi.b	#$40,d1
000099C6                            
000099C6                            Obj18_02_Move:
000099C6 4881                       		ext.w	d1
000099C8 D041                       		add.w	d1,d0
000099CA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000099CE 6000 0000                  		bra.w	Obj18_ChgMotion
000099D2                            ; ===========================================================================
000099D2                            
000099D2                            Obj18_Type03:
000099D2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000099D6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000099D8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000099DE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000099E0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000099E6                            
000099E6                            Obj18_03_NoMove:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj18_03_Wait:
000099E8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000099EC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000099EE 317C 0020 003A             		move.w	#32,$3A(a0)
000099F4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000099F8 4E75                       		rts	
000099FA                            ; ===========================================================================
000099FA                            
000099FA                            Obj18_Type04:
000099FA 4A68 003A                  		tst.w	$3A(a0)
000099FE 6700                       		beq.s	loc_8048
00009A00 5368 003A                  		subq.w	#1,$3A(a0)
00009A04 6600                       		bne.s	loc_8048
00009A06 0828 0003 0022             		btst	#3,$22(a0)
00009A0C 6700                       		beq.s	loc_8042
00009A0E 08E9 0001 0022             		bset	#1,$22(a1)
00009A14 08A9 0003 0022             		bclr	#3,$22(a1)
00009A1A 137C 0002 0024             		move.b	#2,$24(a1)
00009A20 08A8 0003 0022             		bclr	#3,$22(a0)
00009A26 4228 0025                  		clr.b	$25(a0)
00009A2A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009A30                            
00009A30                            loc_8042:
00009A30 117C 0008 0024             		move.b	#8,$24(a0)
00009A36                            
00009A36                            loc_8048:
00009A36 2628 002C                  		move.l	$2C(a0),d3
00009A3A 3028 0012                  		move.w	$12(a0),d0
00009A3E 48C0                       		ext.l	d0
00009A40 E180                       		asl.l	#8,d0
00009A42 D680                       		add.l	d0,d3
00009A44 2143 002C                  		move.l	d3,$2C(a0)
00009A48 0668 0038 0012             		addi.w	#$38,$12(a0)
00009A4E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009A52 0640 00E0                  		addi.w	#$E0,d0
00009A56 B068 002C                  		cmp.w	$2C(a0),d0
00009A5A 6400                       		bcc.s	locret_8074
00009A5C 117C 0006 0024             		move.b	#6,$24(a0)
00009A62                            
00009A62                            locret_8074:
00009A62 4E75                       		rts	
00009A64                            ; ===========================================================================
00009A64                            
00009A64                            Obj18_Type07:
00009A64 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A68 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009A6A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009A6E 7000                       		moveq	#0,d0
00009A70 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009A74 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A76 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A7A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00009A7C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009A82                            
00009A82                            Obj18_07_NoMove:
00009A82 4E75                       		rts	
00009A84                            ; ===========================================================================
00009A84                            
00009A84                            Obj18_07_Wait:
00009A84 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009A88 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009A8A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009A8E 4E75                       		rts	
00009A90                            ; ===========================================================================
00009A90                            
00009A90                            Obj18_Type08:
00009A90 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009A94 3028 0034                  		move.w	$34(a0),d0
00009A98 0440 0200                  		subi.w	#$200,d0
00009A9C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009AA0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009AA2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009AA6                            
00009AA6                            Obj18_08_NoStop:
00009AA6 4E75                       		rts	
00009AA8                            ; ===========================================================================
00009AA8                            
00009AA8                            Obj18_Type0A:
00009AA8 3028 0034                  		move.w	$34(a0),d0
00009AAC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009AB0 0401 0040                  		subi.b	#$40,d1
00009AB4 4881                       		ext.w	d1
00009AB6 E241                       		asr.w	#1,d1
00009AB8 D041                       		add.w	d1,d0
00009ABA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009ABE                            
00009ABE                            Obj18_ChgMotion:
00009ABE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009AC4 4E75                       		rts	
00009AC6                            ; ===========================================================================
00009AC6                            
00009AC6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009AC6 3028 0032                  		move.w	$32(a0),d0
00009ACA 0240 FF80                  		andi.w	#$FF80,d0
00009ACE 3238 F700                  		move.w	($FFFFF700).w,d1
00009AD2 0441 0080                  		subi.w	#$80,d1
00009AD6 0241 FF80                  		andi.w	#$FF80,d1
00009ADA 9041                       		sub.w	d1,d0
00009ADC 0C40 0280                  		cmpi.w	#$280,d0
00009AE0 6200                       		bhi.s	Obj18_Delete
00009AE2 4E75                       		rts	
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj18_Delete:				; XREF: Obj18_Index
00009AE4 6000 0000                  		bra.w	DeleteObject
00009AE8                            ; ===========================================================================
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8                            ; Sprite mappings - unused
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8                            Map_obj18x:
00009AE8                            	include "_maps\obj18x.asm"
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8                            ; Sprite mappings - unused
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8 0000                       		dc.w byte_80FE-Map_obj18x
00009AEA 0000                       		dc.w byte_8109-Map_obj18x
00009AEC 02                         byte_80FE:	dc.b 2
00009AED F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009AF2 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009AF7 0A                         byte_8109:	dc.b $A
00009AF8 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009AFD 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009B02 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009B07 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009B0C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009B11 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009B16 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009B1B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009B20 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009B25 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009B2A                            		even
00009B2A                            		even
00009B2A                            
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            ; Sprite mappings - GHZ	platforms
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            Map_obj18:
00009B2A                            	include "_maps\obj18ghz.asm"
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            ; Sprite mappings - GHZ	platforms
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A 0000                       		dc.w byte_8140-Map_obj18
00009B2C 0000                       		dc.w byte_8155-Map_obj18
00009B2E 04                         byte_8140:	dc.b 4
00009B2F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009B34 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009B39 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B3E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B43 0A                         byte_8155:	dc.b $A
00009B44 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B49 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B4E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B53 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B58 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B5D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B62 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B67 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B6C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B71 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B76                            		even
00009B76                            		even
00009B76                            
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            ; Sprite mappings - SYZ	platforms
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            Map_obj18a:
00009B76                            	include "_maps\obj18syz.asm"
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            ; Sprite mappings - SYZ	platforms
00009B76                            ; ---------------------------------------------------------------------------
00009B76 0000                       		dc.w byte_818A-Map_obj18a
00009B78 03                         byte_818A:	dc.b 3
00009B79 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009B7E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009B83 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009B88                            		even
00009B88                            		even
00009B88                            
00009B88                            ; ---------------------------------------------------------------------------
00009B88                            ; Sprite mappings - SLZ	platforms
00009B88                            ; ---------------------------------------------------------------------------
00009B88                            Map_obj18b:
00009B88                            	include "_maps\obj18slz.asm"
00009B88                            ; ---------------------------------------------------------------------------
00009B88                            ; Sprite mappings - SLZ	platforms
00009B88                            ; ---------------------------------------------------------------------------
00009B88 0000                       		dc.w byte_819C-Map_obj18b
00009B8A 02                         byte_819C:	dc.b 2
00009B8B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009B90 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009B96 00                         		even
00009B96 00                         		even
00009B96                            
00009B96                            ; ===========================================================================
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            ; Object 19 - blank
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            
00009B96                            Obj19:					; XREF: Obj_Index
00009B96 4E75                       		rts	
00009B98                            ; ===========================================================================
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            Map_obj48:
00009B98                            	include "_maps\obj48.asm"
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B98                            ; ---------------------------------------------------------------------------
00009B98 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009B9C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009BA0 06                         byte_81B2:	dc.b 6
00009BA1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009BA6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009BAB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009BB0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009BB5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009BBA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009BBF 04                         byte_81D1:	dc.b 4
00009BC0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009BC5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009BCA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009BCF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009BD4 04                         byte_81E6:	dc.b 4
00009BD5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009BDA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009BDF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009BE4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009BE9 04                         byte_81FB:	dc.b 4
00009BEA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009BEF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009BF4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009BF9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009BFE                            		even
00009BFE                            		even
00009BFE                            
00009BFE                            ; ===========================================================================
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            ; Object 1A - GHZ collapsing ledge
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            
00009BFE                            Obj1A:					; XREF: Obj_Index
00009BFE 7000                       		moveq	#0,d0
00009C00 1028 0024                  		move.b	$24(a0),d0
00009C04 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009C08 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009C0C                            ; ===========================================================================
00009C0C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009C10 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009C14 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009C18                            ; ===========================================================================
00009C18                            
00009C18                            Obj1A_Main:				; XREF: Obj1A_Index
00009C18 5428 0024                  		addq.b	#2,$24(a0)
00009C1C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00009C24 317C 4000 0002             		move.w	#$4000,2(a0)
00009C2A 0028 0004 0001             		ori.b	#4,1(a0)
00009C30 117C 0004 0018             		move.b	#4,$18(a0)
00009C36 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009C3C 117C 0064 0019             		move.b	#$64,$19(a0)
00009C42 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009C48 117C 0038 0016             		move.b	#$38,$16(a0)
00009C4E 08E8 0004 0001             		bset	#4,1(a0)
00009C54                            
00009C54                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009C54 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009C58 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009C5A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009C5E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009C62 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009C66                            
00009C66                            Obj1A_Slope:
00009C66 323C 0030                  		move.w	#$30,d1
00009C6A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C70 6100 F2A4                  		bsr.w	SlopeObject
00009C74 6000 0000                  		bra.w	MarkObjGone
00009C78                            ; ===========================================================================
00009C78                            
00009C78                            Obj1A_Touch:				; XREF: Obj1A_Index
00009C78 4A28 0038                  		tst.b	$38(a0)
00009C7C 6700 0000                  		beq.w	loc_847A
00009C80 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009C86 5328 0038                  		subq.b	#1,$38(a0)
00009C8A                            
00009C8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C8A                            
00009C8A                            
00009C8A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009C8A 323C 0030                  		move.w	#$30,d1
00009C8E 6100 F326                  		bsr.w	ExitPlatform
00009C92 323C 0030                  		move.w	#$30,d1
00009C96 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C9C 3428 0008                  		move.w	8(a0),d2
00009CA0 6100 0000                  		bsr.w	SlopeObject2
00009CA4 6000 0000                  		bra.w	MarkObjGone
00009CA8                            ; End of function Obj1A_WalkOff
00009CA8                            
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            Obj1A_Display:				; XREF: Obj1A_Index
00009CA8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009CAC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009CAE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009CB2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009CB6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009CBA 6000 0000                  		bra.w	DisplaySprite
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            loc_82D0:				; XREF: Obj1A_Display
00009CBE 5328 0038                  		subq.b	#1,$38(a0)
00009CC2 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009CC6 43F8 D000                  		lea	($FFFFD000).w,a1
00009CCA 0829 0003 0022             		btst	#3,$22(a1)
00009CD0 6700                       		beq.s	loc_82FC
00009CD2 4A28 0038                  		tst.b	$38(a0)
00009CD6 6600                       		bne.s	locret_8308
00009CD8 08A9 0003 0022             		bclr	#3,$22(a1)
00009CDE 08A9 0005 0022             		bclr	#5,$22(a1)
00009CE4 137C 0001 001D             		move.b	#1,$1D(a1)
00009CEA                            
00009CEA                            loc_82FC:
00009CEA 117C 0000 003A             		move.b	#0,$3A(a0)
00009CF0 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009CF6                            
00009CF6                            locret_8308:
00009CF6 4E75                       		rts	
00009CF8                            ; ===========================================================================
00009CF8                            
00009CF8                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009CF8 6100 0000                  		bsr.w	ObjectFall
00009CFC 6100 0000                  		bsr.w	DisplaySprite
00009D00 4A28 0001                  		tst.b	1(a0)
00009D04 6A00                       		bpl.s	Obj1A_Delete
00009D06 4E75                       		rts	
00009D08                            ; ===========================================================================
00009D08                            
00009D08                            Obj1A_Delete:				; XREF: Obj1A_Index
00009D08 6100 0000                  		bsr.w	DeleteObject
00009D0C 4E75                       		rts	
00009D0E                            ; ===========================================================================
00009D0E                            ; ---------------------------------------------------------------------------
00009D0E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009D0E                            ; ---------------------------------------------------------------------------
00009D0E                            
00009D0E                            Obj53:					; XREF: Obj_Index
00009D0E 7000                       		moveq	#0,d0
00009D10 1028 0024                  		move.b	$24(a0),d0
00009D14 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009D18 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009D1C                            ; ===========================================================================
00009D1C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009D20 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009D24 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009D28                            ; ===========================================================================
00009D28                            
00009D28                            Obj53_Main:				; XREF: Obj53_Index
00009D28 5428 0024                  		addq.b	#2,$24(a0)
00009D2C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009D34 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009D3A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009D40 6600                       		bne.s	Obj53_NotSLZ
00009D42 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009D48 5428 001A                  		addq.b	#2,$1A(a0)
00009D4C                            
00009D4C                            Obj53_NotSLZ:
00009D4C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009D52 6600                       		bne.s	Obj53_NotSBZ
00009D54 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009D5A                            
00009D5A                            Obj53_NotSBZ:
00009D5A 0028 0004 0001             		ori.b	#4,1(a0)
00009D60 117C 0004 0018             		move.b	#4,$18(a0)
00009D66 117C 0007 0038             		move.b	#7,$38(a0)
00009D6C 117C 0044 0019             		move.b	#$44,$19(a0)
00009D72                            
00009D72                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009D72 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009D76 6700                       		beq.s	Obj53_Solid	; if not, branch
00009D78 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009D7C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009D80 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009D84                            
00009D84                            Obj53_Solid:
00009D84 323C 0020                  		move.w	#$20,d1
00009D88 6100 F0B8                  		bsr.w	PlatformObject
00009D8C 4A28 0028                  		tst.b	$28(a0)
00009D90 6A00                       		bpl.s	Obj53_MarkAsGone
00009D92 0829 0003 0022             		btst	#3,$22(a1)
00009D98 6700                       		beq.s	Obj53_MarkAsGone
00009D9A 08A8 0000 0001             		bclr	#0,1(a0)
00009DA0 3029 0008                  		move.w	8(a1),d0
00009DA4 9068 0008                  		sub.w	8(a0),d0
00009DA8 6400                       		bcc.s	Obj53_MarkAsGone
00009DAA 08E8 0000 0001             		bset	#0,1(a0)
00009DB0                            
00009DB0                            Obj53_MarkAsGone:
00009DB0 6000 0000                  		bra.w	MarkObjGone
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            Obj53_Touch:				; XREF: Obj53_Index
00009DB4 4A28 0038                  		tst.b	$38(a0)
00009DB8 6700 0000                  		beq.w	loc_8458
00009DBC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009DC2 5328 0038                  		subq.b	#1,$38(a0)
00009DC6                            
00009DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DC6                            
00009DC6                            
00009DC6                            Obj53_WalkOff:				; XREF: Obj53_Index
00009DC6 323C 0020                  		move.w	#$20,d1
00009DCA 6100 F1EA                  		bsr.w	ExitPlatform
00009DCE 3428 0008                  		move.w	8(a0),d2
00009DD2 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00009DD6 6000 0000                  		bra.w	MarkObjGone
00009DDA                            ; End of function Obj53_WalkOff
00009DDA                            
00009DDA                            ; ===========================================================================
00009DDA                            
00009DDA                            Obj53_Display:				; XREF: Obj53_Index
00009DDA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009DDE 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009DE0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009DE4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009DE8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009DEC 6000 0000                  		bra.w	DisplaySprite
00009DF0                            ; ===========================================================================
00009DF0                            
00009DF0                            loc_8402:
00009DF0 5328 0038                  		subq.b	#1,$38(a0)
00009DF4 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009DF8 43F8 D000                  		lea	($FFFFD000).w,a1
00009DFC 0829 0003 0022             		btst	#3,$22(a1)
00009E02 6700                       		beq.s	loc_842E
00009E04 4A28 0038                  		tst.b	$38(a0)
00009E08 6600                       		bne.s	locret_843A
00009E0A 08A9 0003 0022             		bclr	#3,$22(a1)
00009E10 08A9 0005 0022             		bclr	#5,$22(a1)
00009E16 137C 0001 001D             		move.b	#1,$1D(a1)
00009E1C                            
00009E1C                            loc_842E:
00009E1C 117C 0000 003A             		move.b	#0,$3A(a0)
00009E22 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009E28                            
00009E28                            locret_843A:
00009E28 4E75                       		rts	
00009E2A                            ; ===========================================================================
00009E2A                            
00009E2A                            Obj53_TimeZero:				; XREF: Obj53_Display
00009E2A 6100 0000                  		bsr.w	ObjectFall
00009E2E 6100 0000                  		bsr.w	DisplaySprite
00009E32 4A28 0001                  		tst.b	1(a0)
00009E36 6A00                       		bpl.s	Obj53_Delete
00009E38 4E75                       		rts	
00009E3A                            ; ===========================================================================
00009E3A                            
00009E3A                            Obj53_Delete:				; XREF: Obj53_Index
00009E3A 6100 0000                  		bsr.w	DeleteObject
00009E3E 4E75                       		rts	
00009E40                            ; ===========================================================================
00009E40                            
00009E40                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009E40 117C 0000 003A             		move.b	#0,$3A(a0)
00009E46                            
00009E46                            loc_8458:				; XREF: Obj53_Touch
00009E46 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009E4C 0828 0000 0028             		btst	#0,$28(a0)
00009E52 6700                       		beq.s	loc_846C
00009E54 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009E5A                            
00009E5A                            loc_846C:
00009E5A 7207                       		moveq	#7,d1
00009E5C 5228 001A                  		addq.b	#1,$1A(a0)
00009E60 6000                       		bra.s	loc_8486
00009E62                            ; ===========================================================================
00009E62                            
00009E62                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009E62 117C 0000 003A             		move.b	#0,$3A(a0)
00009E68                            
00009E68                            loc_847A:				; XREF: Obj1A_Touch
00009E68 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009E6E 7218                       		moveq	#$18,d1
00009E70 5428 001A                  		addq.b	#2,$1A(a0)
00009E74                            
00009E74                            loc_8486:				; XREF: Obj53_Collapse
00009E74 7000                       		moveq	#0,d0
00009E76 1028 001A                  		move.b	$1A(a0),d0
00009E7A D040                       		add.w	d0,d0
00009E7C 2668 0004                  		movea.l	4(a0),a3
00009E80 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009E84 524B                       		addq.w	#1,a3
00009E86 08E8 0005 0001             		bset	#5,1(a0)
00009E8C 1810                       		move.b	0(a0),d4
00009E8E 1A28 0001                  		move.b	1(a0),d5
00009E92 2248                       		movea.l	a0,a1
00009E94 6000                       		bra.s	loc_84B2
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            loc_84AA:
00009E96 6100 0000                  		bsr.w	SingleObjLoad
00009E9A 6600                       		bne.s	loc_84F2
00009E9C 5A4B                       		addq.w	#5,a3
00009E9E                            
00009E9E                            loc_84B2:
00009E9E 137C 0006 0024             		move.b	#6,$24(a1)
00009EA4 1284                       		move.b	d4,0(a1)
00009EA6 234B 0004                  		move.l	a3,4(a1)
00009EAA 1345 0001                  		move.b	d5,1(a1)
00009EAE 3368 0008 0008             		move.w	8(a0),8(a1)
00009EB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EBA 3368 0002 0002             		move.w	2(a0),2(a1)
00009EC0 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009EC6 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009ECC 135C 0038                  		move.b	(a4)+,$38(a1)
00009ED0 B3C8                       		cmpa.l	a0,a1
00009ED2 6400                       		bcc.s	loc_84EE
00009ED4 6100 0000                  		bsr.w	DisplaySprite2
00009ED8                            
00009ED8                            loc_84EE:
00009ED8 51C9 FFBC                  		dbf	d1,loc_84AA
00009EDC                            
00009EDC                            loc_84F2:
00009EDC 6100 0000                  		bsr.w	DisplaySprite
00009EE0 303C 00B9                  		move.w	#$B9,d0
00009EE4 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009EEA                            ; ===========================================================================
00009EEA                            ; ---------------------------------------------------------------------------
00009EEA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009EEA                            ; ---------------------------------------------------------------------------
00009EEA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009EFA 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009F04 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F0C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F14                            
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            
00009F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F14                            
00009F14                            
00009F14                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009F14 43F8 D000                  		lea	($FFFFD000).w,a1
00009F18 0829 0003 0022             		btst	#3,$22(a1)
00009F1E 6700                       		beq.s	locret_856E
00009F20 3029 0008                  		move.w	8(a1),d0
00009F24 9068 0008                  		sub.w	8(a0),d0
00009F28 D041                       		add.w	d1,d0
00009F2A E248                       		lsr.w	#1,d0
00009F2C 0828 0000 0001             		btst	#0,1(a0)
00009F32 6700                       		beq.s	loc_854E
00009F34 4640                       		not.w	d0
00009F36 D041                       		add.w	d1,d0
00009F38                            
00009F38                            loc_854E:
00009F38 7200                       		moveq	#0,d1
00009F3A 1232 0000                  		move.b	(a2,d0.w),d1
00009F3E 3028 000C                  		move.w	$C(a0),d0
00009F42 9041                       		sub.w	d1,d0
00009F44 7200                       		moveq	#0,d1
00009F46 1229 0016                  		move.b	$16(a1),d1
00009F4A 9041                       		sub.w	d1,d0
00009F4C 3340 000C                  		move.w	d0,$C(a1)
00009F50 9468 0008                  		sub.w	8(a0),d2
00009F54 9569 0008                  		sub.w	d2,8(a1)
00009F58                            
00009F58                            locret_856E:
00009F58 4E75                       		rts	
00009F5A                            ; End of function SlopeObject2
00009F5A                            
00009F5A                            ; ===========================================================================
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Collision data for GHZ collapsing ledge
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            Obj1A_SlopeData:
00009F5A                            		incbin	misc\ghzledge.bin
00009F8A                            		even
00009F8A                            
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            ; Sprite mappings - GHZ	collapsing ledge
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            Map_obj1A:
00009F8A                            	include "_maps\obj1A.asm"
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            ; Sprite mappings - GHZ	collapsing ledge
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009F8E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009F92 10                         byte_85A8:	dc.b $10
00009F93 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009F98 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009F9D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FA2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FA7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FAC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FB1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009FB6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009FBB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FC0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009FC5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009FCA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FCF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009FD4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009FD9 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009FDE 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FE3 10                         byte_85F9:	dc.b $10
00009FE4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009FE9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FEE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FF3 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FF8 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FFD D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A002 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A007 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A00C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A011 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A016 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A01B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A020 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A025 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A02A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A02F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A034 19                         byte_864A:	dc.b $19
0000A035 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A03A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A03F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A044 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A049 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A04E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A053 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A058 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A05D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A062 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A067 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A06C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A071 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A076 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A07B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A080 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A085 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A08A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A08F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A094 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A099 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A09E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0A3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0A8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0AD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0B2 19                         byte_86C8:	dc.b $19
0000A0B3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A0B8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A0BD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A0C2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A0C7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A0CC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A0D1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0D6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0DB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0E0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A0E5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A0EA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A0EF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A0F4 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A0F9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A0FE F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A103 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A108 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A10D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A112 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A117 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A11C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A121 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A126 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A12B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A130                            		even
0000A130                            		even
0000A130                            
0000A130                            ; ---------------------------------------------------------------------------
0000A130                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A130                            ; ---------------------------------------------------------------------------
0000A130                            Map_obj53:
0000A130                            	include "_maps\obj53.asm"
0000A130                            ; ---------------------------------------------------------------------------
0000A130                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A130                            ; ---------------------------------------------------------------------------
0000A130 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000A134 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000A138 04                         byte_874E:	dc.b 4
0000A139 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A13E 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A143 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A148 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A14D 08                         byte_8763:	dc.b 8
0000A14E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A153 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A158 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A15D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A162 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A167 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A16C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A171 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A176 04                         byte_878C:	dc.b 4
0000A177 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A17C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A181 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A186 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A18B 08                         byte_87A1:	dc.b 8
0000A18C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A191 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A196 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A19B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A1A0 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A1A5 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A1AA 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A1AF 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A1B4                            		even
0000A1B4                            		even
0000A1B4                            
0000A1B4                            ; ===========================================================================
0000A1B4                            ; ---------------------------------------------------------------------------
0000A1B4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A1B4                            ; ---------------------------------------------------------------------------
0000A1B4                            
0000A1B4                            Obj1C:					; XREF: Obj_Index
0000A1B4 7000                       		moveq	#0,d0
0000A1B6 1028 0024                  		move.b	$24(a0),d0
0000A1BA 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000A1BE 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000A1C2                            ; ===========================================================================
0000A1C2 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000A1C4 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000A1C6                            ; ===========================================================================
0000A1C6                            
0000A1C6                            Obj1C_Main:				; XREF: Obj1C_Index
0000A1C6 5428 0024                  		addq.b	#2,$24(a0)
0000A1CA 7000                       		moveq	#0,d0
0000A1CC 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000A1D0 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A1D4 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000A1D8 2159 0004                  		move.l	(a1)+,4(a0)
0000A1DC 3159 0002                  		move.w	(a1)+,2(a0)
0000A1E0 0028 0004 0001             		ori.b	#4,1(a0)
0000A1E6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000A1EA 1159 0019                  		move.b	(a1)+,$19(a0)
0000A1EE 1159 0018                  		move.b	(a1)+,$18(a0)
0000A1F2 1159 0020                  		move.b	(a1)+,$20(a0)
0000A1F6                            
0000A1F6                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000A1F6 3028 0008                  		move.w	8(a0),d0
0000A1FA 0240 FF80                  		andi.w	#$FF80,d0
0000A1FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A202 0441 0080                  		subi.w	#$80,d1
0000A206 0241 FF80                  		andi.w	#$FF80,d1
0000A20A 9041                       		sub.w	d1,d0
0000A20C 0C40 0280                  		cmpi.w	#$280,d0
0000A210 6200 0000                  		bhi.w	DeleteObject
0000A214 6000 0000                  		bra.w	DisplaySprite
0000A218                            ; ===========================================================================
0000A218                            ; ---------------------------------------------------------------------------
0000A218                            ; Variables for	object $1C are stored in an array
0000A218                            ; ---------------------------------------------------------------------------
0000A218 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000A21C 44D8                       		dc.w $44D8		; VRAM setting
0000A21E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A222 0000 0000                  		dc.l Map_obj1C
0000A226 44D8                       		dc.w $44D8
0000A228 0008 0200                  		dc.b 0,	8, 2, 0
0000A22C 0000 0000                  		dc.l Map_obj1C
0000A230 44D8                       		dc.w $44D8
0000A232 0008 0200                  		dc.b 0,	8, 2, 0
0000A236 0000 932A                  		dc.l Map_obj11
0000A23A 438E                       		dc.w $438E
0000A23C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            ; Sprite mappings - SLZ	lava thrower
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            Map_obj1C:
0000A240                            	include "_maps\obj1C.asm"
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            ; Sprite mappings - SLZ	lava thrower
0000A240                            ; ---------------------------------------------------------------------------
0000A240 0000                       		dc.w byte_8858-Map_obj1C
0000A242 01                         byte_8858:	dc.b 1
0000A243 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A248                            		even
0000A248                            		even
0000A248                            
0000A248                            ; ===========================================================================
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            ; Object 1D - switch that activates when Sonic touches it
0000A248                            ; (this	is not used anywhere in	the game)
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            
0000A248                            Obj1D:					; XREF: Obj_Index
0000A248 7000                       		moveq	#0,d0
0000A24A 1028 0024                  		move.b	$24(a0),d0
0000A24E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000A252 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000A256                            ; ===========================================================================
0000A256 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000A258 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000A25A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000A25C                            ; ===========================================================================
0000A25C                            
0000A25C                            Obj1D_Main:				; XREF: Obj1D_Index
0000A25C 5428 0024                  		addq.b	#2,$24(a0)
0000A260 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000A268 317C 4000 0002             		move.w	#$4000,2(a0)
0000A26E 117C 0004 0001             		move.b	#4,1(a0)
0000A274 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000A27A 117C 0010 0019             		move.b	#$10,$19(a0)
0000A280 117C 0005 0018             		move.b	#5,$18(a0)
0000A286                            
0000A286                            Obj1D_Action:				; XREF: Obj1D_Index
0000A286 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000A28C 323C 0010                  		move.w	#$10,d1
0000A290 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000A294 6700                       		beq.s	Obj1D_ChkDel
0000A296 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000A29A 7001                       		moveq	#1,d0
0000A29C 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000A2A0                            
0000A2A0                            Obj1D_ChkDel:
0000A2A0 6100 0000                  		bsr.w	DisplaySprite
0000A2A4 3028 0008                  		move.w	8(a0),d0
0000A2A8 0240 FF80                  		andi.w	#$FF80,d0
0000A2AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2B0 0441 0080                  		subi.w	#$80,d1
0000A2B4 0241 FF80                  		andi.w	#$FF80,d1
0000A2B8 9041                       		sub.w	d1,d0
0000A2BA 0C40 0280                  		cmpi.w	#$280,d0
0000A2BE 6200 0000                  		bhi.w	Obj1D_Delete
0000A2C2 4E75                       		rts	
0000A2C4                            ; ===========================================================================
0000A2C4                            
0000A2C4                            Obj1D_Delete:				; XREF: Obj1D_Index
0000A2C4 6100 0000                  		bsr.w	DeleteObject
0000A2C8 4E75                       		rts	
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            ; Subroutine to	check if Sonic touches the object
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            
0000A2CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2CA                            
0000A2CA                            
0000A2CA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000A2CA 43F8 D000                  		lea	($FFFFD000).w,a1
0000A2CE 3029 0008                  		move.w	8(a1),d0
0000A2D2 9068 0008                  		sub.w	8(a0),d0
0000A2D6 D041                       		add.w	d1,d0
0000A2D8 6B00                       		bmi.s	loc_8918
0000A2DA D241                       		add.w	d1,d1
0000A2DC B041                       		cmp.w	d1,d0
0000A2DE 6400                       		bcc.s	loc_8918
0000A2E0 3429 000C                  		move.w	$C(a1),d2
0000A2E4 1229 0016                  		move.b	$16(a1),d1
0000A2E8 4881                       		ext.w	d1
0000A2EA D242                       		add.w	d2,d1
0000A2EC 3028 000C                  		move.w	$C(a0),d0
0000A2F0 0440 0010                  		subi.w	#$10,d0
0000A2F4 9041                       		sub.w	d1,d0
0000A2F6 6200                       		bhi.s	loc_8918
0000A2F8 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A2FC 6500                       		bcs.s	loc_8918
0000A2FE 70FF                       		moveq	#-1,d0
0000A300 4E75                       		rts	
0000A302                            ; ===========================================================================
0000A302                            
0000A302                            loc_8918:
0000A302 7000                       		moveq	#0,d0
0000A304 4E75                       		rts	
0000A306                            ; End of function Obj1D_ChkTouch
0000A306                            
0000A306                            ; ===========================================================================
0000A306                            ; ---------------------------------------------------------------------------
0000A306                            ; Sprite mappings - object 1D
0000A306                            ; ---------------------------------------------------------------------------
0000A306                            Map_obj1D:
0000A306                            	include "_maps\obj1D.asm"
0000A306                            ; ---------------------------------------------------------------------------
0000A306                            ; Sprite mappings - object 1D
0000A306                            ; ---------------------------------------------------------------------------
0000A306 0000                       		dc.w byte_891E-Map_obj1D
0000A308 04                         byte_891E:	dc.b 4
0000A309 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A30E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A313 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A318 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A31E 00                         		even
0000A31E 00                         		even
0000A31E                            
0000A31E                            ; ===========================================================================
0000A31E                            ; ---------------------------------------------------------------------------
0000A31E                            ; Object 2A - doors (SBZ)
0000A31E                            ; ---------------------------------------------------------------------------
0000A31E                            
0000A31E                            Obj2A:					; XREF: Obj_Index
0000A31E 7000                       		moveq	#0,d0
0000A320 1028 0024                  		move.b	$24(a0),d0
0000A324 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000A328 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000A32C                            ; ===========================================================================
0000A32C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000A32E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000A330                            ; ===========================================================================
0000A330                            
0000A330                            Obj2A_Main:				; XREF: Obj2A_Index
0000A330 5428 0024                  		addq.b	#2,$24(a0)
0000A334 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000A33C 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000A342 0028 0004 0001             		ori.b	#4,1(a0)
0000A348 117C 0008 0019             		move.b	#8,$19(a0)
0000A34E 117C 0004 0018             		move.b	#4,$18(a0)
0000A354                            
0000A354                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000A354 323C 0040                  		move.w	#$40,d1
0000A358 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000A35C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A360 D041                       		add.w	d1,d0
0000A362 B068 0008                  		cmp.w	8(a0),d0
0000A366 6500                       		bcs.s	Obj2A_Animate
0000A368 9041                       		sub.w	d1,d0
0000A36A 9041                       		sub.w	d1,d0
0000A36C B068 0008                  		cmp.w	8(a0),d0
0000A370 6400                       		bcc.s	Obj2A_Animate
0000A372 D041                       		add.w	d1,d0
0000A374 B068 0008                  		cmp.w	8(a0),d0
0000A378 6400                       		bcc.s	loc_899A
0000A37A 0828 0000 0022             		btst	#0,$22(a0)
0000A380 6600                       		bne.s	Obj2A_Animate
0000A382 6000                       		bra.s	Obj2A_Open
0000A384                            ; ===========================================================================
0000A384                            
0000A384                            loc_899A:				; XREF: Obj2A_OpenShut
0000A384 0828 0000 0022             		btst	#0,$22(a0)
0000A38A 6700                       		beq.s	Obj2A_Animate
0000A38C                            
0000A38C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000A38C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000A392                            
0000A392                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000A392 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000A398 6100 0000                  		bsr.w	AnimateSprite
0000A39C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000A3A0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000A3A2 323C 0011                  		move.w	#$11,d1
0000A3A6 343C 0020                  		move.w	#$20,d2
0000A3AA 3602                       		move.w	d2,d3
0000A3AC 5243                       		addq.w	#1,d3
0000A3AE 3828 0008                  		move.w	8(a0),d4
0000A3B2 6100 0000                  		bsr.w	SolidObject
0000A3B6                            
0000A3B6                            Obj2A_MarkAsUsed:
0000A3B6 6000 0000                  		bra.w	MarkObjGone
0000A3BA                            ; ===========================================================================
0000A3BA                            Ani_obj2A:
0000A3BA                            	include "_anim\obj2A.asm"
0000A3BA                            ; ---------------------------------------------------------------------------
0000A3BA                            ; Animation script - doors (SBZ)
0000A3BA                            ; ---------------------------------------------------------------------------
0000A3BA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000A3BC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000A3BE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000A3CA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000A3D6                            		even
0000A3D6                            		even
0000A3D6                            
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6                            ; Sprite mappings - doors (SBZ)
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6                            Map_obj2A:
0000A3D6                            	include "_maps\obj2A.asm"
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6                            ; Sprite mappings - doors (SBZ)
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000A3DA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000A3DE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000A3E2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000A3E6 0000                       		dc.w byte_8A56-Map_obj2A
0000A3E8 02                         byte_89FE:	dc.b 2
0000A3E9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000A3EE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000A3F3 02                         byte_8A09:	dc.b 2
0000A3F4 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000A3F9 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000A3FE 02                         byte_8A14:	dc.b 2
0000A3FF D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000A404 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000A409 02                         byte_8A1F:	dc.b 2
0000A40A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000A40F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000A414 02                         byte_8A2A:	dc.b 2
0000A415 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000A41A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000A41F 02                         byte_8A35:	dc.b 2
0000A420 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000A425 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000A42A 02                         byte_8A40:	dc.b 2
0000A42B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000A430 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000A435 02                         byte_8A4B:	dc.b 2
0000A436 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000A43B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000A440 02                         byte_8A56:	dc.b 2
0000A441 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000A446 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000A44C 00                         		even
0000A44C 00                         		even
0000A44C                            
0000A44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A44C                            
0000A44C                            
0000A44C                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000A44C 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A450 6700                       		beq.s	loc_8AA8
0000A452 6B00 0000                  		bmi.w	loc_8AC4
0000A456 4A40                       		tst.w	d0
0000A458 6700 0000                  		beq.w	loc_8A92
0000A45C 6B00                       		bmi.s	loc_8A7C
0000A45E 4A69 0010                  		tst.w	$10(a1)
0000A462 6B00                       		bmi.s	loc_8A92
0000A464 6000                       		bra.s	loc_8A82
0000A466                            ; ===========================================================================
0000A466                            
0000A466                            loc_8A7C:
0000A466 4A69 0010                  		tst.w	$10(a1)
0000A46A 6A00                       		bpl.s	loc_8A92
0000A46C                            
0000A46C                            loc_8A82:
0000A46C 9169 0008                  		sub.w	d0,8(a1)
0000A470 337C 0000 0014             		move.w	#0,$14(a1)
0000A476 337C 0000 0010             		move.w	#0,$10(a1)
0000A47C                            
0000A47C                            loc_8A92:
0000A47C 0829 0001 0022             		btst	#1,$22(a1)
0000A482 6600                       		bne.s	loc_8AB6
0000A484 08E9 0005 0022             		bset	#5,$22(a1)
0000A48A 08E8 0005 0022             		bset	#5,$22(a0)
0000A490 4E75                       		rts	
0000A492                            ; ===========================================================================
0000A492                            
0000A492                            loc_8AA8:
0000A492 0828 0005 0022             		btst	#5,$22(a0)
0000A498 6700                       		beq.s	locret_8AC2
0000A49A 337C 0001 001C             		move.w	#1,$1C(a1)
0000A4A0                            
0000A4A0                            loc_8AB6:
0000A4A0 08A8 0005 0022             		bclr	#5,$22(a0)
0000A4A6 08A9 0005 0022             		bclr	#5,$22(a1)
0000A4AC                            
0000A4AC                            locret_8AC2:
0000A4AC 4E75                       		rts	
0000A4AE                            ; ===========================================================================
0000A4AE                            
0000A4AE                            loc_8AC4:
0000A4AE 4A69 0012                  		tst.w	$12(a1)
0000A4B2 6A00                       		bpl.s	locret_8AD8
0000A4B4 4A43                       		tst.w	d3
0000A4B6 6A00                       		bpl.s	locret_8AD8
0000A4B8 9769 000C                  		sub.w	d3,$C(a1)
0000A4BC 337C 0000 0012             		move.w	#0,$12(a1)
0000A4C2                            
0000A4C2                            locret_8AD8:
0000A4C2 4E75                       		rts	
0000A4C4                            ; End of function Obj44_SolidWall
0000A4C4                            
0000A4C4                            
0000A4C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4C4                            
0000A4C4                            
0000A4C4                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A4C4 43F8 D000                  		lea	($FFFFD000).w,a1
0000A4C8 3029 0008                  		move.w	8(a1),d0
0000A4CC 9068 0008                  		sub.w	8(a0),d0
0000A4D0 D041                       		add.w	d1,d0
0000A4D2 6B00                       		bmi.s	loc_8B48
0000A4D4 3601                       		move.w	d1,d3
0000A4D6 D643                       		add.w	d3,d3
0000A4D8 B043                       		cmp.w	d3,d0
0000A4DA 6200                       		bhi.s	loc_8B48
0000A4DC 1629 0016                  		move.b	$16(a1),d3
0000A4E0 4883                       		ext.w	d3
0000A4E2 D443                       		add.w	d3,d2
0000A4E4 3629 000C                  		move.w	$C(a1),d3
0000A4E8 9668 000C                  		sub.w	$C(a0),d3
0000A4EC D642                       		add.w	d2,d3
0000A4EE 6B00                       		bmi.s	loc_8B48
0000A4F0 3802                       		move.w	d2,d4
0000A4F2 D844                       		add.w	d4,d4
0000A4F4 B644                       		cmp.w	d4,d3
0000A4F6 6400                       		bcc.s	loc_8B48
0000A4F8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A4FC 6B00                       		bmi.s	loc_8B48
0000A4FE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A504 6400                       		bcc.s	loc_8B48
0000A506 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A50A 6600                       		bne.s	loc_8B48
0000A50C 3A00                       		move.w	d0,d5
0000A50E B240                       		cmp.w	d0,d1
0000A510 6400                       		bcc.s	loc_8B30
0000A512 D241                       		add.w	d1,d1
0000A514 9041                       		sub.w	d1,d0
0000A516 3A00                       		move.w	d0,d5
0000A518 4445                       		neg.w	d5
0000A51A                            
0000A51A                            loc_8B30:
0000A51A 3203                       		move.w	d3,d1
0000A51C B443                       		cmp.w	d3,d2
0000A51E 6400                       		bcc.s	loc_8B3C
0000A520 9644                       		sub.w	d4,d3
0000A522 3203                       		move.w	d3,d1
0000A524 4441                       		neg.w	d1
0000A526                            
0000A526                            loc_8B3C:
0000A526 BA41                       		cmp.w	d1,d5
0000A528 6200                       		bhi.s	loc_8B44
0000A52A 7801                       		moveq	#1,d4
0000A52C 4E75                       		rts	
0000A52E                            ; ===========================================================================
0000A52E                            
0000A52E                            loc_8B44:
0000A52E 78FF                       		moveq	#-1,d4
0000A530 4E75                       		rts	
0000A532                            ; ===========================================================================
0000A532                            
0000A532                            loc_8B48:
0000A532 7800                       		moveq	#0,d4
0000A534 4E75                       		rts	
0000A536                            ; End of function Obj44_SolidWall2
0000A536                            
0000A536                            ; ===========================================================================
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            ; Object 1E - Ball Hog enemy (SBZ)
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            
0000A536                            Obj1E:					; XREF: Obj_Index
0000A536 7000                       		moveq	#0,d0
0000A538 1028 0024                  		move.b	$24(a0),d0
0000A53C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A540 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A544                            ; ===========================================================================
0000A544 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A546 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A548                            ; ===========================================================================
0000A548                            
0000A548                            Obj1E_Main:				; XREF: Obj1E_Index
0000A548 117C 0013 0016             		move.b	#$13,$16(a0)
0000A54E 117C 0008 0017             		move.b	#8,$17(a0)
0000A554 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A55C 317C 2302 0002             		move.w	#$2302,2(a0)
0000A562 117C 0004 0001             		move.b	#4,1(a0)
0000A568 117C 0004 0018             		move.b	#4,$18(a0)
0000A56E 117C 0005 0020             		move.b	#5,$20(a0)
0000A574 117C 000C 0019             		move.b	#$C,$19(a0)
0000A57A 6100 0000                  		bsr.w	ObjectFall
0000A57E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A584 4A41                       		tst.w	d1
0000A586 6A00                       		bpl.s	locret_8BAC
0000A588 D368 000C                  		add.w	d1,$C(a0)
0000A58C 317C 0000 0012             		move.w	#0,$12(a0)
0000A592 5428 0024                  		addq.b	#2,$24(a0)
0000A596                            
0000A596                            locret_8BAC:
0000A596 4E75                       		rts	
0000A598                            ; ===========================================================================
0000A598                            
0000A598                            Obj1E_Action:				; XREF: Obj1E_Index
0000A598 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A59E 6100 0000                  		bsr.w	AnimateSprite
0000A5A2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A5A8 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A5AA 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A5AE 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A5B0 6000                       		bra.s	Obj1E_MarkAsGone
0000A5B2                            ; ===========================================================================
0000A5B2                            
0000A5B2                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A5B2 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A5B6                            
0000A5B6                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A5B6 6000 0000                  		bra.w	MarkObjGone
0000A5BA                            ; ===========================================================================
0000A5BA                            
0000A5BA                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A5BA 117C 0001 0032             		move.b	#1,$32(a0)
0000A5C0 6100 0000                  		bsr.w	SingleObjLoad
0000A5C4 6600                       		bne.s	loc_8C1A
0000A5C6 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A5CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5D6 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A5DC 337C 0000 0012             		move.w	#0,$12(a1)
0000A5E2 70FC                       		moveq	#-4,d0
0000A5E4 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A5EA 6700                       		beq.s	loc_8C0A	; if not, branch
0000A5EC 4440                       		neg.w	d0
0000A5EE 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A5F2                            
0000A5F2                            loc_8C0A:
0000A5F2 D169 0008                  		add.w	d0,8(a1)
0000A5F6 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A5FC 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A602                            
0000A602                            loc_8C1A:
0000A602 60B2                       		bra.s	Obj1E_MarkAsGone
0000A604                            ; ===========================================================================
0000A604                            ; ---------------------------------------------------------------------------
0000A604                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A604                            ; ---------------------------------------------------------------------------
0000A604                            
0000A604                            Obj20:					; XREF: Obj_Index
0000A604 7000                       		moveq	#0,d0
0000A606 1028 0024                  		move.b	$24(a0),d0
0000A60A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A60E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A612                            ; ===========================================================================
0000A612 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A614 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A616                            ; ===========================================================================
0000A616                            
0000A616                            Obj20_Main:				; XREF: Obj20_Index
0000A616 5428 0024                  		addq.b	#2,$24(a0)
0000A61A 117C 0007 0016             		move.b	#7,$16(a0)
0000A620 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A628 317C 2302 0002             		move.w	#$2302,2(a0)
0000A62E 117C 0004 0001             		move.b	#4,1(a0)
0000A634 117C 0003 0018             		move.b	#3,$18(a0)
0000A63A 117C 0087 0020             		move.b	#$87,$20(a0)
0000A640 117C 0008 0019             		move.b	#8,$19(a0)
0000A646 7000                       		moveq	#0,d0
0000A648 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A64C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A650 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A654 117C 0004 001A             		move.b	#4,$1A(a0)
0000A65A                            
0000A65A                            Obj20_Bounce:				; XREF: Obj20_Index
0000A65A 4EB9 0000 0000             		jsr	ObjectFall
0000A660 4A68 0012                  		tst.w	$12(a0)
0000A664 6B00                       		bmi.s	Obj20_ChkExplode
0000A666 4EB9 0000 0000             		jsr	ObjHitFloor
0000A66C 4A41                       		tst.w	d1
0000A66E 6A00                       		bpl.s	Obj20_ChkExplode
0000A670 D368 000C                  		add.w	d1,$C(a0)
0000A674 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A67A 4A03                       		tst.b	d3
0000A67C 6700                       		beq.s	Obj20_ChkExplode
0000A67E 6B00                       		bmi.s	loc_8CA4
0000A680 4A68 0010                  		tst.w	$10(a0)
0000A684 6A00                       		bpl.s	Obj20_ChkExplode
0000A686 4468 0010                  		neg.w	$10(a0)
0000A68A 6000                       		bra.s	Obj20_ChkExplode
0000A68C                            ; ===========================================================================
0000A68C                            
0000A68C                            loc_8CA4:				; XREF: Obj20_Bounce
0000A68C 4A68 0010                  		tst.w	$10(a0)
0000A690 6B00                       		bmi.s	Obj20_ChkExplode
0000A692 4468 0010                  		neg.w	$10(a0)
0000A696                            
0000A696                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A696 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A69A 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A69C 10BC 0024                  		move.b	#$24,0(a0)
0000A6A0 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A6A4 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A6AA 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A6AE                            ; ===========================================================================
0000A6AE                            
0000A6AE                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A6AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A6B2 6A00                       		bpl.s	Obj20_Display
0000A6B4 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A6BA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A6C0                            
0000A6C0                            Obj20_Display:
0000A6C0 6100 0000                  		bsr.w	DisplaySprite
0000A6C4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6C8 0640 00E0                  		addi.w	#$E0,d0
0000A6CC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A6D0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A6D4 4E75                       		rts	
0000A6D6                            ; ===========================================================================
0000A6D6                            ; ---------------------------------------------------------------------------
0000A6D6                            ; Object 24 - explosion	from a destroyed monitor
0000A6D6                            ; ---------------------------------------------------------------------------
0000A6D6                            
0000A6D6                            Obj24:					; XREF: Obj_Index
0000A6D6 7000                       		moveq	#0,d0
0000A6D8 1028 0024                  		move.b	$24(a0),d0
0000A6DC 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A6E0 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A6E4                            ; ===========================================================================
0000A6E4 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A6E6 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A6E8                            ; ===========================================================================
0000A6E8                            
0000A6E8                            Obj24_Main:				; XREF: Obj24_Index
0000A6E8 5428 0024                  		addq.b	#2,$24(a0)
0000A6EC 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A6F4 317C 041C 0002             		move.w	#$41C,2(a0)
0000A6FA 117C 0004 0001             		move.b	#4,1(a0)
0000A700 117C 0001 0018             		move.b	#1,$18(a0)
0000A706 117C 0000 0020             		move.b	#0,$20(a0)
0000A70C 117C 000C 0019             		move.b	#$C,$19(a0)
0000A712 117C 0009 001E             		move.b	#9,$1E(a0)
0000A718 117C 0000 001A             		move.b	#0,$1A(a0)
0000A71E 303C 00A5                  		move.w	#$A5,d0
0000A722 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A728                            
0000A728                            Obj24_Animate:				; XREF: Obj24_Index
0000A728 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A72C 6A00                       		bpl.s	Obj24_Display
0000A72E 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A734 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A738 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A73E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A742                            
0000A742                            Obj24_Display:
0000A742 6000 0000                  		bra.w	DisplaySprite
0000A746                            ; ===========================================================================
0000A746                            ; ---------------------------------------------------------------------------
0000A746                            ; Object 27 - explosion	from a destroyed enemy
0000A746                            ; ---------------------------------------------------------------------------
0000A746                            
0000A746                            Obj27:					; XREF: Obj_Index
0000A746 7000                       		moveq	#0,d0
0000A748 1028 0024                  		move.b	$24(a0),d0
0000A74C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A750 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A754                            ; ===========================================================================
0000A754 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A756 0000                       		dc.w Obj27_Main-Obj27_Index
0000A758 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A75A                            ; ===========================================================================
0000A75A                            
0000A75A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A75A 5428 0024                  		addq.b	#2,$24(a0)
0000A75E 6100 0000                  		bsr.w	SingleObjLoad
0000A762 6600                       		bne.s	Obj27_Main
0000A764 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A768 3368 0008 0008             		move.w	8(a0),8(a1)
0000A76E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A774 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A77A                            
0000A77A                            Obj27_Main:				; XREF: Obj27_Index
0000A77A 5428 0024                  		addq.b	#2,$24(a0)
0000A77E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A786 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A78C 117C 0004 0001             		move.b	#4,1(a0)
0000A792 117C 0001 0018             		move.b	#1,$18(a0)
0000A798 117C 0000 0020             		move.b	#0,$20(a0)
0000A79E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A7A4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7AA 117C 0000 001A             		move.b	#0,$1A(a0)
0000A7B0 303C 00C1                  		move.w	#$C1,d0
0000A7B4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A7BA                            
0000A7BA                            Obj27_Animate:				; XREF: Obj27_Index
0000A7BA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A7BE 6A00                       		bpl.s	Obj27_Display
0000A7C0 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7C6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A7CA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A7D0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7D4                            
0000A7D4                            Obj27_Display:
0000A7D4 6000 0000                  		bra.w	DisplaySprite
0000A7D8                            ; ===========================================================================
0000A7D8                            ; ---------------------------------------------------------------------------
0000A7D8                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A7D8                            ; ---------------------------------------------------------------------------
0000A7D8                            
0000A7D8                            Obj3F:					; XREF: Obj_Index
0000A7D8 7000                       		moveq	#0,d0
0000A7DA 1028 0024                  		move.b	$24(a0),d0
0000A7DE 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A7E2 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A7E6                            ; ===========================================================================
0000A7E6 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A7E8 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A7EA                            ; ===========================================================================
0000A7EA                            
0000A7EA                            Obj3F_Main:				; XREF: Obj3F_Index
0000A7EA 5428 0024                  		addq.b	#2,$24(a0)
0000A7EE 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A7F6 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A7FC 117C 0004 0001             		move.b	#4,1(a0)
0000A802 117C 0001 0018             		move.b	#1,$18(a0)
0000A808 117C 0000 0020             		move.b	#0,$20(a0)
0000A80E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A814 117C 0007 001E             		move.b	#7,$1E(a0)
0000A81A 117C 0000 001A             		move.b	#0,$1A(a0)
0000A820 303C 00C4                  		move.w	#$C4,d0
0000A824 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A82A                            ; ===========================================================================
0000A82A                            Ani_obj1E:
0000A82A                            	include "_anim\obj1E.asm"
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            ; Animation script - doors (SBZ)
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A82C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A844 00                         		even
0000A844 00                         		even
0000A844                            
0000A844                            ; ---------------------------------------------------------------------------
0000A844                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A844                            ; ---------------------------------------------------------------------------
0000A844                            Map_obj1E:
0000A844                            	include "_maps\obj1E.asm"
0000A844                            ; ---------------------------------------------------------------------------
0000A844                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A844                            ; ---------------------------------------------------------------------------
0000A844 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A848 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A84C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A850 02                         byte_8E6E:	dc.b 2
0000A851 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A856 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A85B 02                         byte_8E79:	dc.b 2
0000A85C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A861 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A866 02                         byte_8E84:	dc.b 2
0000A867 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A86C 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A871 02                         byte_8E8F:	dc.b 2
0000A872 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A877 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A87C 01                         byte_8E9A:	dc.b 1
0000A87D F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A882 01                         byte_8EA0:	dc.b 1
0000A883 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A888                            		even
0000A888                            		even
0000A888                            
0000A888                            ; ---------------------------------------------------------------------------
0000A888                            ; Sprite mappings - explosion
0000A888                            ; ---------------------------------------------------------------------------
0000A888                            Map_obj24:
0000A888                            	include "_maps\obj24.asm"
0000A888                            ; ---------------------------------------------------------------------------
0000A888                            ; Sprite mappings - explosion
0000A888                            ; ---------------------------------------------------------------------------
0000A888 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A88C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A890 01                         byte_8EAE:	dc.b 1
0000A891 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A896 01                         byte_8EB4:	dc.b 1
0000A897 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A89C 01                         byte_8EBA:	dc.b 1
0000A89D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A8A2 01                         byte_8EC0:	dc.b 1
0000A8A3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A8A8                            		even
0000A8A8                            		even
0000A8A8                            
0000A8A8                            ; ---------------------------------------------------------------------------
0000A8A8                            ; Sprite mappings - explosion
0000A8A8                            ; ---------------------------------------------------------------------------
0000A8A8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A8AC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A8B0 0000                       		dc.w byte_8EF7-Map_obj27
0000A8B2 01                         byte_8ED0:	dc.b 1
0000A8B3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A8B8 01                         byte_8ED6:	dc.b 1
0000A8B9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A8BE 01                         byte_8EDC:	dc.b 1
0000A8BF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A8C4 04                         byte_8EE2:	dc.b 4
0000A8C5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A8CA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A8CF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A8D4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A8D9 04                         byte_8EF7:	dc.b 4
0000A8DA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A8DF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A8E4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A8E9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A8EE                            		even
0000A8EE                            ; ---------------------------------------------------------------------------
0000A8EE                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A8EE                            ; ---------------------------------------------------------------------------
0000A8EE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A8F0 0000                       		dc.w byte_8F16-Map_obj3F
0000A8F2 0000                       		dc.w byte_8F1C-Map_obj3F
0000A8F4 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A8F6 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A8F8 01                         byte_8F16:	dc.b 1
0000A8F9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A8FE 01                         byte_8F1C:	dc.b 1
0000A8FF F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A904                            		even
0000A904                            ; ===========================================================================
0000A904                            ; ---------------------------------------------------------------------------
0000A904                            ; Object 28 - animals
0000A904                            ; ---------------------------------------------------------------------------
0000A904                            
0000A904                            Obj28:					; XREF: Obj_Index
0000A904 7000                       		moveq	#0,d0
0000A906 1028 0024                  		move.b	$24(a0),d0
0000A90A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A90E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A912                            ; ===========================================================================
0000A912 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A916 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A91A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A91E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A922 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A926 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A92A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A92E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A932 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A936 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A93A 0000                       		dc.w loc_92D6-Obj28_Index
0000A93C                            
0000A93C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A948                            
0000A948 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A94C 0000 0000                  		dc.l Map_obj28
0000A950 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A954 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A958 FE80 FD00                  		dc.w $FE80, $FD00
0000A95C 0000 0000                  		dc.l Map_obj28
0000A960 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A964 0000 0000                  		dc.l Map_obj28a
0000A968 FE40 FD00                  		dc.w $FE40, $FD00
0000A96C 0000 0000                  		dc.l Map_obj28b
0000A970 FD00 FC00                  		dc.w $FD00, $FC00
0000A974 0000 0000                  		dc.l Map_obj28a
0000A978 FD80 FC80                  		dc.w $FD80, $FC80
0000A97C 0000 0000                  		dc.l Map_obj28b
0000A980                            
0000A980 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A990 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A9A0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A9AC                            
0000A9AC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A9C0 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A9D4 0000 0000                  		dc.l Map_obj28b
0000A9D8                            
0000A9D8 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A9EA 0565 05B3                  		dc.w $565, $5B3
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            Obj28_Ending:				; XREF: Obj28_Index
0000A9EE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A9F2 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A9F6 7000                       		moveq	#0,d0
0000A9F8 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A9FC D040                       		add.w	d0,d0		; multiply d0 by 2
0000A9FE 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000AA02 0440 0014                  		subi.w	#$14,d0
0000AA06 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000AA0C D040                       		add.w	d0,d0
0000AA0E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000AA14 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000AA18 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA1E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000AA24 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA2A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000AA30 117C 000C 0016             		move.b	#$C,$16(a0)
0000AA36 117C 0004 0001             		move.b	#4,1(a0)
0000AA3C 08E8 0000 0001             		bset	#0,1(a0)
0000AA42 117C 0006 0018             		move.b	#6,$18(a0)
0000AA48 117C 0008 0019             		move.b	#8,$19(a0)
0000AA4E 117C 0007 001E             		move.b	#7,$1E(a0)
0000AA54 6000 0000                  		bra.w	DisplaySprite
0000AA58                            ; ===========================================================================
0000AA58                            
0000AA58                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000AA58 5428 0024                  		addq.b	#2,$24(a0)
0000AA5C 6100 80F6                  		bsr.w	RandomNumber
0000AA60 0240 0001                  		andi.w	#1,d0
0000AA64 7200                       		moveq	#0,d1
0000AA66 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000AA6A D241                       		add.w	d1,d1
0000AA6C D240                       		add.w	d0,d1
0000AA6E 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000AA72 1031 1000                  		move.b	(a1,d1.w),d0
0000AA76 1140 0030                  		move.b	d0,$30(a0)
0000AA7A E748                       		lsl.w	#3,d0
0000AA7C 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000AA80 D2C0                       		adda.w	d0,a1
0000AA82 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AA86 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AA8A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000AA8E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000AA94 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AA9A 6700                       		beq.s	loc_90C0	; if yes, branch
0000AA9C 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000AAA2                            
0000AAA2                            loc_90C0:
0000AAA2 117C 000C 0016             		move.b	#$C,$16(a0)
0000AAA8 117C 0004 0001             		move.b	#4,1(a0)
0000AAAE 08E8 0000 0001             		bset	#0,1(a0)
0000AAB4 117C 0006 0018             		move.b	#6,$18(a0)
0000AABA 117C 0008 0019             		move.b	#8,$19(a0)
0000AAC0 117C 0007 001E             		move.b	#7,$1E(a0)
0000AAC6 117C 0002 001A             		move.b	#2,$1A(a0)
0000AACC 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AAD2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AAD6 6600                       		bne.s	loc_911C
0000AAD8 6100 0000                  		bsr.w	SingleObjLoad
0000AADC 6600                       		bne.s	Obj28_Display
0000AADE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000AAE2 3368 0008 0008             		move.w	8(a0),8(a1)
0000AAE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AAEE 3028 003E                  		move.w	$3E(a0),d0
0000AAF2 E248                       		lsr.w	#1,d0
0000AAF4 1340 001A                  		move.b	d0,$1A(a1)
0000AAF8                            
0000AAF8                            Obj28_Display:
0000AAF8 6000 0000                  		bra.w	DisplaySprite
0000AAFC                            ; ===========================================================================
0000AAFC                            
0000AAFC                            loc_911C:
0000AAFC 117C 0012 0024             		move.b	#$12,$24(a0)
0000AB02 4268 0010                  		clr.w	$10(a0)
0000AB06 6000 0000                  		bra.w	DisplaySprite
0000AB0A                            ; ===========================================================================
0000AB0A                            
0000AB0A                            loc_912A:				; XREF: Obj28_Index
0000AB0A 4A28 0001                  		tst.b	1(a0)
0000AB0E 6A00 0000                  		bpl.w	DeleteObject
0000AB12 6100 0000                  		bsr.w	ObjectFall
0000AB16 4A68 0012                  		tst.w	$12(a0)
0000AB1A 6B00                       		bmi.s	loc_9180
0000AB1C 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB22 4A41                       		tst.w	d1
0000AB24 6A00                       		bpl.s	loc_9180
0000AB26 D368 000C                  		add.w	d1,$C(a0)
0000AB2A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AB30 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB36 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB3C 1028 0030                  		move.b	$30(a0),d0
0000AB40 D000                       		add.b	d0,d0
0000AB42 5800                       		addq.b	#4,d0
0000AB44 1140 0024                  		move.b	d0,$24(a0)
0000AB48 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AB4C 6700                       		beq.s	loc_9180
0000AB4E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000AB54 6700                       		beq.s	loc_9180
0000AB56 4468 0010                  		neg.w	$10(a0)
0000AB5A 0868 0000 0001             		bchg	#0,1(a0)
0000AB60                            
0000AB60                            loc_9180:
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            
0000AB64                            loc_9184:				; XREF: Obj28_Index
0000AB64 6100 0000                  		bsr.w	ObjectFall
0000AB68 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB6E 4A68 0012                  		tst.w	$12(a0)
0000AB72 6B00                       		bmi.s	loc_91AE
0000AB74 117C 0000 001A             		move.b	#0,$1A(a0)
0000AB7A 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB80 4A41                       		tst.w	d1
0000AB82 6A00                       		bpl.s	loc_91AE
0000AB84 D368 000C                  		add.w	d1,$C(a0)
0000AB88 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB8E                            
0000AB8E                            loc_91AE:
0000AB8E 4A28 0028                  		tst.b	$28(a0)
0000AB92 6600                       		bne.s	loc_9224
0000AB94 4A28 0001                  		tst.b	1(a0)
0000AB98 6A00 0000                  		bpl.w	DeleteObject
0000AB9C 6000 0000                  		bra.w	DisplaySprite
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            loc_91C0:				; XREF: Obj28_Index
0000ABA0 6100 0000                  		bsr.w	SpeedToPos
0000ABA4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000ABAA 4A68 0012                  		tst.w	$12(a0)
0000ABAE 6B00                       		bmi.s	loc_91FC
0000ABB0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABB6 4A41                       		tst.w	d1
0000ABB8 6A00                       		bpl.s	loc_91FC
0000ABBA D368 000C                  		add.w	d1,$C(a0)
0000ABBE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ABC4 4A28 0028                  		tst.b	$28(a0)
0000ABC8 6700                       		beq.s	loc_91FC
0000ABCA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000ABD0 6700                       		beq.s	loc_91FC
0000ABD2 4468 0010                  		neg.w	$10(a0)
0000ABD6 0868 0000 0001             		bchg	#0,1(a0)
0000ABDC                            
0000ABDC                            loc_91FC:
0000ABDC 5328 001E                  		subq.b	#1,$1E(a0)
0000ABE0 6A00                       		bpl.s	loc_9212
0000ABE2 117C 0001 001E             		move.b	#1,$1E(a0)
0000ABE8 5228 001A                  		addq.b	#1,$1A(a0)
0000ABEC 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ABF2                            
0000ABF2                            loc_9212:
0000ABF2 4A28 0028                  		tst.b	$28(a0)
0000ABF6 6600                       		bne.s	loc_9224
0000ABF8 4A28 0001                  		tst.b	1(a0)
0000ABFC 6A00 0000                  		bpl.w	DeleteObject
0000AC00 6000 0000                  		bra.w	DisplaySprite
0000AC04                            ; ===========================================================================
0000AC04                            
0000AC04                            loc_9224:				; XREF: Obj28_Index
0000AC04 3028 0008                  		move.w	8(a0),d0
0000AC08 9078 D008                  		sub.w	($FFFFD008).w,d0
0000AC0C 6500                       		bcs.s	loc_923C
0000AC0E 0440 0180                  		subi.w	#$180,d0
0000AC12 6A00                       		bpl.s	loc_923C
0000AC14 4A28 0001                  		tst.b	1(a0)
0000AC18 6A00 0000                  		bpl.w	DeleteObject
0000AC1C                            
0000AC1C                            loc_923C:
0000AC1C 6000 0000                  		bra.w	DisplaySprite
0000AC20                            ; ===========================================================================
0000AC20                            
0000AC20                            loc_9240:				; XREF: Obj28_Index
0000AC20 4A28 0001                  		tst.b	1(a0)
0000AC24 6A00 0000                  		bpl.w	DeleteObject
0000AC28 5368 0036                  		subq.w	#1,$36(a0)
0000AC2C 6600 0000                  		bne.w	loc_925C
0000AC30 117C 0002 0024             		move.b	#2,$24(a0)
0000AC36 117C 0003 0018             		move.b	#3,$18(a0)
0000AC3C                            
0000AC3C                            loc_925C:
0000AC3C 6000 0000                  		bra.w	DisplaySprite
0000AC40                            ; ===========================================================================
0000AC40                            
0000AC40                            loc_9260:				; XREF: Obj28_Index
0000AC40 6100 0000                  		bsr.w	sub_9404
0000AC44 6400                       		bcc.s	loc_927C
0000AC46 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AC4C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC52 117C 000E 0024             		move.b	#$E,$24(a0)
0000AC58 6000 FF46                  		bra.w	loc_91C0
0000AC5C                            ; ===========================================================================
0000AC5C                            
0000AC5C                            loc_927C:
0000AC5C 6000 FFA6                  		bra.w	loc_9224
0000AC60                            ; ===========================================================================
0000AC60                            
0000AC60                            loc_9280:				; XREF: Obj28_Index
0000AC60 6100 0000                  		bsr.w	sub_9404
0000AC64 6A00                       		bpl.s	loc_92B6
0000AC66 4268 0010                  		clr.w	$10(a0)
0000AC6A 4268 0032                  		clr.w	$32(a0)
0000AC6E 6100 0000                  		bsr.w	SpeedToPos
0000AC72 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AC78 6100 0000                  		bsr.w	loc_93C4
0000AC7C 6100 0000                  		bsr.w	loc_93EC
0000AC80 5328 001E                  		subq.b	#1,$1E(a0)
0000AC84 6A00                       		bpl.s	loc_92B6
0000AC86 117C 0001 001E             		move.b	#1,$1E(a0)
0000AC8C 5228 001A                  		addq.b	#1,$1A(a0)
0000AC90 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AC96                            
0000AC96                            loc_92B6:
0000AC96 6000 FF6C                  		bra.w	loc_9224
0000AC9A                            ; ===========================================================================
0000AC9A                            
0000AC9A                            loc_92BA:				; XREF: Obj28_Index
0000AC9A 6100 0000                  		bsr.w	sub_9404
0000AC9E 6A00                       		bpl.s	loc_9310
0000ACA0 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000ACA6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACAC 117C 0004 0024             		move.b	#4,$24(a0)
0000ACB2 6000 FEB0                  		bra.w	loc_9184
0000ACB6                            ; ===========================================================================
0000ACB6                            
0000ACB6                            loc_92D6:				; XREF: Obj28_Index
0000ACB6 6100 0000                  		bsr.w	ObjectFall
0000ACBA 117C 0001 001A             		move.b	#1,$1A(a0)
0000ACC0 4A68 0012                  		tst.w	$12(a0)
0000ACC4 6B00                       		bmi.s	loc_9310
0000ACC6 117C 0000 001A             		move.b	#0,$1A(a0)
0000ACCC 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACD2 4A41                       		tst.w	d1
0000ACD4 6A00                       		bpl.s	loc_9310
0000ACD6 4628 0029                  		not.b	$29(a0)
0000ACDA 6600                       		bne.s	loc_9306
0000ACDC 4468 0010                  		neg.w	$10(a0)
0000ACE0 0868 0000 0001             		bchg	#0,1(a0)
0000ACE6                            
0000ACE6                            loc_9306:
0000ACE6 D368 000C                  		add.w	d1,$C(a0)
0000ACEA 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACF0                            
0000ACF0                            loc_9310:
0000ACF0 6000 FF12                  		bra.w	loc_9224
0000ACF4                            ; ===========================================================================
0000ACF4                            
0000ACF4                            loc_9314:				; XREF: Obj28_Index
0000ACF4 6100 0000                  		bsr.w	sub_9404
0000ACF8 6A00                       		bpl.s	loc_932E
0000ACFA 4268 0010                  		clr.w	$10(a0)
0000ACFE 4268 0032                  		clr.w	$32(a0)
0000AD02 6100 0000                  		bsr.w	ObjectFall
0000AD06 6100 0000                  		bsr.w	loc_93C4
0000AD0A 6100 0000                  		bsr.w	loc_93EC
0000AD0E                            
0000AD0E                            loc_932E:
0000AD0E 6000 FEF4                  		bra.w	loc_9224
0000AD12                            ; ===========================================================================
0000AD12                            
0000AD12                            loc_9332:				; XREF: Obj28_Index
0000AD12 6100 0000                  		bsr.w	sub_9404
0000AD16 6A00                       		bpl.s	loc_936C
0000AD18 6100 0000                  		bsr.w	ObjectFall
0000AD1C 117C 0001 001A             		move.b	#1,$1A(a0)
0000AD22 4A68 0012                  		tst.w	$12(a0)
0000AD26 6B00                       		bmi.s	loc_936C
0000AD28 117C 0000 001A             		move.b	#0,$1A(a0)
0000AD2E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD34 4A41                       		tst.w	d1
0000AD36 6A00                       		bpl.s	loc_936C
0000AD38 4468 0010                  		neg.w	$10(a0)
0000AD3C 0868 0000 0001             		bchg	#0,1(a0)
0000AD42 D368 000C                  		add.w	d1,$C(a0)
0000AD46 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD4C                            
0000AD4C                            loc_936C:
0000AD4C 6000 FEB6                  		bra.w	loc_9224
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            loc_9370:				; XREF: Obj28_Index
0000AD50 6100 0000                  		bsr.w	sub_9404
0000AD54 6A00                       		bpl.s	loc_93C0
0000AD56 6100 0000                  		bsr.w	SpeedToPos
0000AD5A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD60 4A68 0012                  		tst.w	$12(a0)
0000AD64 6B00                       		bmi.s	loc_93AA
0000AD66 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD6C 4A41                       		tst.w	d1
0000AD6E 6A00                       		bpl.s	loc_93AA
0000AD70 4628 0029                  		not.b	$29(a0)
0000AD74 6600                       		bne.s	loc_93A0
0000AD76 4468 0010                  		neg.w	$10(a0)
0000AD7A 0868 0000 0001             		bchg	#0,1(a0)
0000AD80                            
0000AD80                            loc_93A0:
0000AD80 D368 000C                  		add.w	d1,$C(a0)
0000AD84 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD8A                            
0000AD8A                            loc_93AA:
0000AD8A 5328 001E                  		subq.b	#1,$1E(a0)
0000AD8E 6A00                       		bpl.s	loc_93C0
0000AD90 117C 0001 001E             		move.b	#1,$1E(a0)
0000AD96 5228 001A                  		addq.b	#1,$1A(a0)
0000AD9A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ADA0                            
0000ADA0                            loc_93C0:
0000ADA0 6000 FE62                  		bra.w	loc_9224
0000ADA4                            ; ===========================================================================
0000ADA4                            
0000ADA4                            loc_93C4:
0000ADA4 117C 0001 001A             		move.b	#1,$1A(a0)
0000ADAA 4A68 0012                  		tst.w	$12(a0)
0000ADAE 6B00                       		bmi.s	locret_93EA
0000ADB0 117C 0000 001A             		move.b	#0,$1A(a0)
0000ADB6 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADBC 4A41                       		tst.w	d1
0000ADBE 6A00                       		bpl.s	locret_93EA
0000ADC0 D368 000C                  		add.w	d1,$C(a0)
0000ADC4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ADCA                            
0000ADCA                            locret_93EA:
0000ADCA 4E75                       		rts	
0000ADCC                            ; ===========================================================================
0000ADCC                            
0000ADCC                            loc_93EC:
0000ADCC 08E8 0000 0001             		bset	#0,1(a0)
0000ADD2 3028 0008                  		move.w	8(a0),d0
0000ADD6 9078 D008                  		sub.w	($FFFFD008).w,d0
0000ADDA 6400                       		bcc.s	locret_9402
0000ADDC 08A8 0000 0001             		bclr	#0,1(a0)
0000ADE2                            
0000ADE2                            locret_9402:
0000ADE2 4E75                       		rts	
0000ADE4                            
0000ADE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADE4                            
0000ADE4                            
0000ADE4                            sub_9404:
0000ADE4 3038 D008                  		move.w	($FFFFD008).w,d0
0000ADE8 9068 0008                  		sub.w	8(a0),d0
0000ADEC 0440 00B8                  		subi.w	#$B8,d0
0000ADF0 4E75                       		rts	
0000ADF2                            ; End of function sub_9404
0000ADF2                            
0000ADF2                            ; ===========================================================================
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            ; Object 29 - points that appear when you destroy something
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            
0000ADF2                            Obj29:					; XREF: Obj_Index
0000ADF2 7000                       		moveq	#0,d0
0000ADF4 1028 0024                  		move.b	$24(a0),d0
0000ADF8 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000ADFC 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000AE00 6000 0000                  		bra.w	DisplaySprite
0000AE04                            ; ===========================================================================
0000AE04 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000AE06 0000                       		dc.w Obj29_Slower-Obj29_Index
0000AE08                            ; ===========================================================================
0000AE08                            
0000AE08                            Obj29_Main:				; XREF: Obj29_Index
0000AE08 5428 0024                  		addq.b	#2,$24(a0)
0000AE0C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000AE14 317C 2797 0002             		move.w	#$2797,2(a0)
0000AE1A 117C 0004 0001             		move.b	#4,1(a0)
0000AE20 117C 0001 0018             		move.b	#1,$18(a0)
0000AE26 117C 0008 0019             		move.b	#8,$19(a0)
0000AE2C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000AE32                            
0000AE32                            Obj29_Slower:				; XREF: Obj29_Index
0000AE32 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE36 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000AE3A 6100 0000                  		bsr.w	SpeedToPos
0000AE3E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE44 4E75                       		rts	
0000AE46                            ; ===========================================================================
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            ; Sprite mappings - animals
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            Map_obj28:
0000AE46                            	include "_maps\obj28.asm"
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            ; Sprite mappings - animals
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46 0000                       		dc.w byte_9472-Map_obj28
0000AE48 0000                       		dc.w byte_9478-Map_obj28
0000AE4A 0000                       		dc.w byte_946C-Map_obj28
0000AE4C 01                         byte_946C:	dc.b 1
0000AE4D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE52 01                         byte_9472:	dc.b 1
0000AE53 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AE58 01                         byte_9478:	dc.b 1
0000AE59 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AE5E                            		even
0000AE5E                            		even
0000AE5E                            
0000AE5E                            Map_obj28a:
0000AE5E                            	include "_maps\obj28a.asm"
0000AE5E                            ; ---------------------------------------------------------------------------
0000AE5E                            ; Sprite mappings - animals
0000AE5E                            ; ---------------------------------------------------------------------------
0000AE5E 0000                       		dc.w byte_948A-Map_obj28a
0000AE60 0000                       		dc.w byte_9490-Map_obj28a
0000AE62 0000                       		dc.w byte_9484-Map_obj28a
0000AE64 01                         byte_9484:	dc.b 1
0000AE65 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE6A 01                         byte_948A:	dc.b 1
0000AE6B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AE70 01                         byte_9490:	dc.b 1
0000AE71 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AE76                            		even
0000AE76                            		even
0000AE76                            
0000AE76                            Map_obj28b:
0000AE76                            	include "_maps\obj28b.asm"
0000AE76                            ; ---------------------------------------------------------------------------
0000AE76                            ; Sprite mappings - animals
0000AE76                            ; ---------------------------------------------------------------------------
0000AE76 0000                       		dc.w byte_94A2-Map_obj28b
0000AE78 0000                       		dc.w byte_94A8-Map_obj28b
0000AE7A 0000                       		dc.w byte_949C-Map_obj28b
0000AE7C 01                         byte_949C:	dc.b 1
0000AE7D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE82 01                         byte_94A2:	dc.b 1
0000AE83 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AE88 01                         byte_94A8:	dc.b 1
0000AE89 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AE8E                            		even
0000AE8E                            		even
0000AE8E                            
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            ; Sprite mappings - points that	appear when you	destroy	something
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            Map_obj29:
0000AE8E                            	include "_maps\obj29.asm"
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            ; Sprite mappings - points that	appear when you	destroy	something
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000AE92 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AE96 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AE9A 0000                       		dc.w byte_94E5-Map_obj29
0000AE9C 01                         byte_94BC:	dc.b 1
0000AE9D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AEA2 01                         byte_94C2:	dc.b 1
0000AEA3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AEA8 01                         byte_94C8:	dc.b 1
0000AEA9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AEAE 01                         byte_94CE:	dc.b 1
0000AEAF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AEB4 01                         byte_94D4:	dc.b 1
0000AEB5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AEBA 02                         byte_94DA:	dc.b 2
0000AEBB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AEC0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AEC5 02                         byte_94E5:	dc.b 2
0000AEC6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AECB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AED0                            		even
0000AED0                            		even
0000AED0                            
0000AED0                            ; ===========================================================================
0000AED0                            ; ---------------------------------------------------------------------------
0000AED0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AED0                            ; ---------------------------------------------------------------------------
0000AED0                            
0000AED0                            Obj1F:					; XREF: Obj_Index
0000AED0 7000                       		moveq	#0,d0
0000AED2 1028 0024                  		move.b	$24(a0),d0
0000AED6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AEDA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AEDE                            ; ===========================================================================
0000AEDE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AEE0 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AEE2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AEE4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AEE6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AEE8                            ; ===========================================================================
0000AEE8                            
0000AEE8                            Obj1F_Main:				; XREF: Obj1F_Index
0000AEE8 117C 0010 0016             		move.b	#$10,$16(a0)
0000AEEE 117C 0008 0017             		move.b	#8,$17(a0)
0000AEF4 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AEFC 317C 0400 0002             		move.w	#$400,2(a0)
0000AF02 117C 0004 0001             		move.b	#4,1(a0)
0000AF08 117C 0003 0018             		move.b	#3,$18(a0)
0000AF0E 117C 0006 0020             		move.b	#6,$20(a0)
0000AF14 117C 0015 0019             		move.b	#$15,$19(a0)
0000AF1A 6100 0000                  		bsr.w	ObjectFall
0000AF1E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AF24 4A41                       		tst.w	d1
0000AF26 6A00                       		bpl.s	locret_955A
0000AF28 D368 000C                  		add.w	d1,$C(a0)
0000AF2C 1143 0026                  		move.b	d3,$26(a0)
0000AF30 317C 0000 0012             		move.w	#0,$12(a0)
0000AF36 5428 0024                  		addq.b	#2,$24(a0)
0000AF3A                            
0000AF3A                            locret_955A:
0000AF3A 4E75                       		rts	
0000AF3C                            ; ===========================================================================
0000AF3C                            
0000AF3C                            Obj1F_Action:				; XREF: Obj1F_Index
0000AF3C 7000                       		moveq	#0,d0
0000AF3E 1028 0025                  		move.b	$25(a0),d0
0000AF42 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000AF46 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000AF4A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AF50 6100 0000                  		bsr.w	AnimateSprite
0000AF54 6000 0000                  		bra.w	MarkObjGone
0000AF58                            ; ===========================================================================
0000AF58 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000AF5A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000AF5C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000AF60 6A00                       		bpl.s	locret_95B6
0000AF62 4A28 0001                  		tst.b	1(a0)
0000AF66 6A00                       		bpl.s	Obj1F_Move
0000AF68 0868 0001 0032             		bchg	#1,$32(a0)
0000AF6E 6600                       		bne.s	Obj1F_MakeFire
0000AF70                            
0000AF70                            Obj1F_Move:
0000AF70 5428 0025                  		addq.b	#2,$25(a0)
0000AF74 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000AF7A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000AF80 6100 0000                  		bsr.w	Obj1F_SetAni
0000AF84 5600                       		addq.b	#3,d0
0000AF86 1140 001C                  		move.b	d0,$1C(a0)
0000AF8A 0868 0000 0022             		bchg	#0,$22(a0)
0000AF90 6600                       		bne.s	locret_95B6
0000AF92 4468 0010                  		neg.w	$10(a0)		; change direction
0000AF96                            
0000AF96                            locret_95B6:
0000AF96 4E75                       		rts	
0000AF98                            ; ===========================================================================
0000AF98                            
0000AF98                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000AF98 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AF9E 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000AFA4 6100 0000                  		bsr.w	SingleObjLoad
0000AFA8 6600                       		bne.s	Obj1F_MakeFire2
0000AFAA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000AFAE 137C 0006 0024             		move.b	#6,$24(a1)
0000AFB4 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFBA 0469 0010 0008             		subi.w	#$10,8(a1)
0000AFC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFC6 337C FF00 0010             		move.w	#-$100,$10(a1)
0000AFCC                            
0000AFCC                            Obj1F_MakeFire2:
0000AFCC 6100 0000                  		bsr.w	SingleObjLoad
0000AFD0 6600                       		bne.s	locret_9618
0000AFD2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000AFD6 137C 0006 0024             		move.b	#6,$24(a1)
0000AFDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFE2 0669 0010 0008             		addi.w	#$10,8(a1)
0000AFE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFEE 337C 0100 0010             		move.w	#$100,$10(a1)
0000AFF4                            
0000AFF4                            locret_9618:
0000AFF4 4E75                       		rts	
0000AFF6                            ; ===========================================================================
0000AFF6                            
0000AFF6                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000AFF6 5368 0030                  		subq.w	#1,$30(a0)
0000AFFA 6B00                       		bmi.s	loc_966E
0000AFFC 6100 0000                  		bsr.w	SpeedToPos
0000B000 0868 0000 0032             		bchg	#0,$32(a0)
0000B006 6600                       		bne.s	loc_9654
0000B008 3628 0008                  		move.w	8(a0),d3
0000B00C 0643 0010                  		addi.w	#$10,d3
0000B010 0828 0000 0022             		btst	#0,$22(a0)
0000B016 6700                       		beq.s	loc_9640
0000B018 0443 0020                  		subi.w	#$20,d3
0000B01C                            
0000B01C                            loc_9640:
0000B01C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B022 0C41 FFF8                  		cmpi.w	#-8,d1
0000B026 6D00                       		blt.s	loc_966E
0000B028 0C41 000C                  		cmpi.w	#$C,d1
0000B02C 6C00                       		bge.s	loc_966E
0000B02E 4E75                       		rts	
0000B030                            ; ===========================================================================
0000B030                            
0000B030                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000B030 4EB9 0000 0000             		jsr	ObjHitFloor
0000B036 D368 000C                  		add.w	d1,$C(a0)
0000B03A 1143 0026                  		move.b	d3,$26(a0)
0000B03E 6100 0000                  		bsr.w	Obj1F_SetAni
0000B042 5600                       		addq.b	#3,d0
0000B044 1140 001C                  		move.b	d0,$1C(a0)
0000B048 4E75                       		rts	
0000B04A                            ; ===========================================================================
0000B04A                            
0000B04A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000B04A 5528 0025                  		subq.b	#2,$25(a0)
0000B04E 317C 003B 0030             		move.w	#59,$30(a0)
0000B054 317C 0000 0010             		move.w	#0,$10(a0)
0000B05A 6100 0000                  		bsr.w	Obj1F_SetAni
0000B05E 1140 001C                  		move.b	d0,$1C(a0)
0000B062 4E75                       		rts	
0000B064                            ; ---------------------------------------------------------------------------
0000B064                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B064                            ; ---------------------------------------------------------------------------
0000B064                            
0000B064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B064                            
0000B064                            
0000B064                            Obj1F_SetAni:				; XREF: loc_966E
0000B064 7000                       		moveq	#0,d0
0000B066 1628 0026                  		move.b	$26(a0),d3
0000B06A 6B00                       		bmi.s	loc_96A4
0000B06C 0C03 0006                  		cmpi.b	#6,d3
0000B070 6500                       		bcs.s	locret_96A2
0000B072 7001                       		moveq	#1,d0
0000B074 0828 0000 0022             		btst	#0,$22(a0)
0000B07A 6600                       		bne.s	locret_96A2
0000B07C 7002                       		moveq	#2,d0
0000B07E                            
0000B07E                            locret_96A2:
0000B07E 4E75                       		rts	
0000B080                            ; ===========================================================================
0000B080                            
0000B080                            loc_96A4:				; XREF: Obj1F_SetAni
0000B080 0C03 00FA                  		cmpi.b	#-6,d3
0000B084 6200                       		bhi.s	locret_96B6
0000B086 7002                       		moveq	#2,d0
0000B088 0828 0000 0022             		btst	#0,$22(a0)
0000B08E 6600                       		bne.s	locret_96B6
0000B090 7001                       		moveq	#1,d0
0000B092                            
0000B092                            locret_96B6:
0000B092 4E75                       		rts	
0000B094                            ; End of function Obj1F_SetAni
0000B094                            
0000B094                            ; ===========================================================================
0000B094                            
0000B094                            Obj1F_Delete:				; XREF: Obj1F_Index
0000B094 6100 0000                  		bsr.w	DeleteObject
0000B098 4E75                       		rts	
0000B09A                            ; ===========================================================================
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Sub-object - missile that the	Crabmeat throws
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            
0000B09A                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000B09A 5428 0024                  		addq.b	#2,$24(a0)
0000B09E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000B0A6 317C 0400 0002             		move.w	#$400,2(a0)
0000B0AC 117C 0004 0001             		move.b	#4,1(a0)
0000B0B2 117C 0003 0018             		move.b	#3,$18(a0)
0000B0B8 117C 0087 0020             		move.b	#$87,$20(a0)
0000B0BE 117C 0008 0019             		move.b	#8,$19(a0)
0000B0C4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B0CA 117C 0007 001C             		move.b	#7,$1C(a0)
0000B0D0                            
0000B0D0                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000B0D0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000B0D6 6100 0000                  		bsr.w	AnimateSprite
0000B0DA 6100 0000                  		bsr.w	ObjectFall
0000B0DE 6100 0000                  		bsr.w	DisplaySprite
0000B0E2 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B0E6 0640 00E0                  		addi.w	#$E0,d0
0000B0EA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B0EE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000B0F0 4E75                       		rts	
0000B0F2                            ; ===========================================================================
0000B0F2                            
0000B0F2                            Obj1F_Delete2:
0000B0F2 6000 0000                  		bra.w	DeleteObject
0000B0F6                            ; ===========================================================================
0000B0F6                            Ani_obj1F:
0000B0F6                            	include "_anim\obj1F.asm"
0000B0F6                            ; ---------------------------------------------------------------------------
0000B0F6                            ; Animation script - Crabmeat enemy
0000B0F6                            ; ---------------------------------------------------------------------------
0000B0F6 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000B0FC 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000B102 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000B106 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000B10A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000B10E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000B112 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000B118 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000B11E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000B124 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000B128 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000B12C                            		even
0000B12C                            		even
0000B12C                            
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            Map_obj1F:
0000B12C                            	include "_maps\obj1F.asm"
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000B130 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000B134 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000B138 0000                       		dc.w byte_97D7-Map_obj1F
0000B13A 04                         byte_975E:	dc.b 4
0000B13B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000B140 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B145 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B14A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B14F 04                         byte_9773:	dc.b 4
0000B150 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000B155 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B15A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B15F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B164 04                         byte_9788:	dc.b 4
0000B165 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000B16A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B16F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B174 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B179 04                         byte_979D:	dc.b 4
0000B17A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000B17F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B184 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B189 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B18E 06                         byte_97B2:	dc.b 6
0000B18F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000B194 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B199 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B19E F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B1A3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B1A8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B1AD 01                         byte_97D1:	dc.b 1
0000B1AE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000B1B3 01                         byte_97D7:	dc.b 1
0000B1B4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000B1BA 00                         		even
0000B1BA 00                         		even
0000B1BA                            
0000B1BA                            ; ===========================================================================
0000B1BA                            ; ---------------------------------------------------------------------------
0000B1BA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B1BA                            ; ---------------------------------------------------------------------------
0000B1BA                            
0000B1BA                            Obj22:					; XREF: Obj_Index
0000B1BA 7000                       		moveq	#0,d0
0000B1BC 1028 0024                  		move.b	$24(a0),d0
0000B1C0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000B1C4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000B1C8                            ; ===========================================================================
0000B1C8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000B1CA 0000                       		dc.w Obj22_Action-Obj22_Index
0000B1CC 0000                       		dc.w Obj22_Delete-Obj22_Index
0000B1CE                            ; ===========================================================================
0000B1CE                            
0000B1CE                            Obj22_Main:				; XREF: Obj22_Index
0000B1CE 5428 0024                  		addq.b	#2,$24(a0)
0000B1D2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000B1DA 317C 0444 0002             		move.w	#$444,2(a0)
0000B1E0 117C 0004 0001             		move.b	#4,1(a0)
0000B1E6 117C 0003 0018             		move.b	#3,$18(a0)
0000B1EC 117C 0008 0020             		move.b	#8,$20(a0)
0000B1F2 117C 0018 0019             		move.b	#$18,$19(a0)
0000B1F8                            
0000B1F8                            Obj22_Action:				; XREF: Obj22_Index
0000B1F8 7000                       		moveq	#0,d0
0000B1FA 1028 0025                  		move.b	$25(a0),d0
0000B1FE 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000B202 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000B206 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000B20C 6100 0000                  		bsr.w	AnimateSprite
0000B210 6000 0000                  		bra.w	MarkObjGone
0000B214                            ; ===========================================================================
0000B214 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000B216 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000B218                            ; ===========================================================================
0000B218                            
0000B218                            Obj22_Move:				; XREF: Obj22_Index2
0000B218 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B21C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B21E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B224 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000B226 5428 0025                  		addq.b	#2,$25(a0)
0000B22A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000B230 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000B236 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000B23C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B242 6600                       		bne.s	locret_986C	; if not, branch
0000B244 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B248                            
0000B248                            locret_986C:
0000B248 4E75                       		rts	
0000B24A                            ; ===========================================================================
0000B24A                            
0000B24A                            Obj22_Fire:				; XREF: Obj22_Move
0000B24A 6100 0000                  		bsr.w	SingleObjLoad
0000B24E 6600                       		bne.s	locret_98D0
0000B250 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000B254 3368 0008 0008             		move.w	8(a0),8(a1)
0000B25A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B260 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000B266 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000B26C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000B272 303C 0018                  		move.w	#$18,d0
0000B276 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B27C 6600                       		bne.s	loc_98AA	; if not, branch
0000B27E 4440                       		neg.w	d0
0000B280 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000B284                            
0000B284                            loc_98AA:
0000B284 D169 0008                  		add.w	d0,8(a1)
0000B288 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000B28E 337C 000E 0032             		move.w	#$E,$32(a1)
0000B294 2348 003C                  		move.l	a0,$3C(a1)
0000B298 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000B29E 317C 003B 0032             		move.w	#$3B,$32(a0)
0000B2A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B2AA                            
0000B2AA                            locret_98D0:
0000B2AA 4E75                       		rts	
0000B2AC                            ; ===========================================================================
0000B2AC                            
0000B2AC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000B2AC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2B0 6B00                       		bmi.s	Obj22_ChgDir
0000B2B2 6100 0000                  		bsr.w	SpeedToPos
0000B2B6 4A28 0034                  		tst.b	$34(a0)
0000B2BA 6600                       		bne.s	locret_992A
0000B2BC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2C0 9068 0008                  		sub.w	8(a0),d0
0000B2C4 6A00                       		bpl.s	Obj22_SetNrSonic
0000B2C6 4440                       		neg.w	d0
0000B2C8                            
0000B2C8                            Obj22_SetNrSonic:
0000B2C8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B2CC 6400                       		bcc.s	locret_992A	; if not, branch
0000B2CE 4A28 0001                  		tst.b	1(a0)
0000B2D2 6A00                       		bpl.s	locret_992A
0000B2D4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B2DA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B2E0 6000                       		bra.s	Obj22_Stop
0000B2E2                            ; ===========================================================================
0000B2E2                            
0000B2E2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000B2E2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B2E8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B2EE 317C 003B 0032             		move.w	#59,$32(a0)
0000B2F4                            
0000B2F4                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000B2F4 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000B2F8 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B2FE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B304                            
0000B304                            locret_992A:
0000B304 4E75                       		rts	
0000B306                            ; ===========================================================================
0000B306                            
0000B306                            Obj22_Delete:				; XREF: Obj22_Index
0000B306 6100 0000                  		bsr.w	DeleteObject
0000B30A 4E75                       		rts	
0000B30C                            ; ===========================================================================
0000B30C                            ; ---------------------------------------------------------------------------
0000B30C                            ; Object 23 - missile that Buzz	Bomber throws
0000B30C                            ; ---------------------------------------------------------------------------
0000B30C                            
0000B30C                            Obj23:					; XREF: Obj_Index
0000B30C 7000                       		moveq	#0,d0
0000B30E 1028 0024                  		move.b	$24(a0),d0
0000B312 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000B316 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000B31A                            ; ===========================================================================
0000B31A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000B31C 0000                       		dc.w Obj23_Animate-Obj23_Index
0000B31E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000B320 0000                       		dc.w Obj23_Delete-Obj23_Index
0000B322 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000B324                            ; ===========================================================================
0000B324                            
0000B324                            Obj23_Main:				; XREF: Obj23_Index
0000B324 5368 0032                  		subq.w	#1,$32(a0)
0000B328 6A00                       		bpl.s	Obj23_ChkCancel
0000B32A 5428 0024                  		addq.b	#2,$24(a0)
0000B32E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000B336 317C 2444 0002             		move.w	#$2444,2(a0)
0000B33C 117C 0004 0001             		move.b	#4,1(a0)
0000B342 117C 0003 0018             		move.b	#3,$18(a0)
0000B348 117C 0008 0019             		move.b	#8,$19(a0)
0000B34E 0228 0003 0022             		andi.b	#3,$22(a0)
0000B354 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000B358 6700                       		beq.s	Obj23_Animate	; if not, branch
0000B35A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000B360 117C 0087 0020             		move.b	#$87,$20(a0)
0000B366 117C 0001 001C             		move.b	#1,$1C(a0)
0000B36C 6000                       		bra.s	Obj23_Animate2
0000B36E                            ; ===========================================================================
0000B36E                            
0000B36E                            Obj23_Animate:				; XREF: Obj23_Index
0000B36E 6100                       		bsr.s	Obj23_ChkCancel
0000B370 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B376 6100 0000                  		bsr.w	AnimateSprite
0000B37A 6000 0000                  		bra.w	DisplaySprite
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B37E                            ; destroyed, and if it has, then cancel	the missile
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            
0000B37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B37E                            
0000B37E                            
0000B37E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000B37E 2268 003C                  		movea.l	$3C(a0),a1
0000B382 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000B386 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000B388 4E75                       		rts	
0000B38A                            ; End of function Obj23_ChkCancel
0000B38A                            
0000B38A                            ; ===========================================================================
0000B38A                            
0000B38A                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000B38A 0828 0007 0022             		btst	#7,$22(a0)
0000B390 6600                       		bne.s	Obj23_Explode
0000B392 117C 0087 0020             		move.b	#$87,$20(a0)
0000B398 117C 0001 001C             		move.b	#1,$1C(a0)
0000B39E 6100 0000                  		bsr.w	SpeedToPos
0000B3A2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3A8 6100 0000                  		bsr.w	AnimateSprite
0000B3AC 6100 0000                  		bsr.w	DisplaySprite
0000B3B0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B3B4 0640 00E0                  		addi.w	#$E0,d0
0000B3B8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B3BC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000B3BE 4E75                       		rts	
0000B3C0                            ; ===========================================================================
0000B3C0                            
0000B3C0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000B3C0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000B3C4 117C 0000 0024             		move.b	#0,$24(a0)
0000B3CA 6000 F30A                  		bra.w	Obj24
0000B3CE                            ; ===========================================================================
0000B3CE                            
0000B3CE                            Obj23_Delete:				; XREF: Obj23_Index
0000B3CE 6100 0000                  		bsr.w	DeleteObject
0000B3D2 4E75                       		rts	
0000B3D4                            ; ===========================================================================
0000B3D4                            
0000B3D4                            Obj23_FromNewt:				; XREF: Obj23_Index
0000B3D4 4A28 0001                  		tst.b	1(a0)
0000B3D8 6AF4                       		bpl.s	Obj23_Delete
0000B3DA 6100 0000                  		bsr.w	SpeedToPos
0000B3DE                            
0000B3DE                            Obj23_Animate2:				; XREF: Obj23_Main
0000B3DE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3E4 6100 0000                  		bsr.w	AnimateSprite
0000B3E8 6100 0000                  		bsr.w	DisplaySprite
0000B3EC 4E75                       		rts	
0000B3EE                            ; ===========================================================================
0000B3EE                            Ani_obj22:
0000B3EE                            	include "_anim\obj22.asm"
0000B3EE                            ; ---------------------------------------------------------------------------
0000B3EE                            ; Animation script - Buzz Bomber enemy
0000B3EE                            ; ---------------------------------------------------------------------------
0000B3EE 0000                       		dc.w byte_9A1E-Ani_obj22
0000B3F0 0000                       		dc.w byte_9A22-Ani_obj22
0000B3F2 0000                       		dc.w byte_9A26-Ani_obj22
0000B3F4 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B3F8 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B3FC 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000B400                            		even
0000B400                            		even
0000B400                            
0000B400                            Ani_obj23:
0000B400                            	include "_anim\obj23.asm"
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            ; Animation script - missile that Buzz Bomber throws
0000B400                            ; ---------------------------------------------------------------------------
0000B400 0000                       		dc.w byte_9A2E-Ani_obj23
0000B402 0000                       		dc.w byte_9A32-Ani_obj23
0000B404 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000B408 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000B40C                            		even
0000B40C                            		even
0000B40C                            
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C                            ; Sprite mappings - Buzz Bomber	enemy
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C                            Map_obj22:
0000B40C                            	include "_maps\obj22.asm"
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C                            ; Sprite mappings - Buzz Bomber	enemy
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000B410 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000B414 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000B418 06                         byte_9A42:	dc.b 6
0000B419 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B41E F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B423 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B428 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B42D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B432 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B437 06                         byte_9A61:	dc.b 6
0000B438 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B43D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B442 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B447 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B44C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B451 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B456 07                         byte_9A80:	dc.b 7
0000B457 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000B45C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B461 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B466 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B46B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B470 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B475 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B47A 07                         byte_9AA4:	dc.b 7
0000B47B 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000B480 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B485 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B48A 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B48F 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B494 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B499 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B49E 06                         byte_9AC8:	dc.b 6
0000B49F F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4A4 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4A9 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4AE 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4B3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B4B8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B4BD 04                         byte_9AE7:	dc.b 4
0000B4BE F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4C3 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4C8 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4CD 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4D2 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B4D7 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B4DC                            		even
0000B4DC                            		even
0000B4DC                            
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            Map_obj23:
0000B4DC                            	include "_maps\obj23.asm"
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B4E0 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B4E4 01                         byte_9B0E:	dc.b 1
0000B4E5 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B4EA 01                         byte_9B14:	dc.b 1
0000B4EB F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B4F0 01                         byte_9B1A:	dc.b 1
0000B4F1 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B4F6 01                         byte_9B20:	dc.b 1
0000B4F7 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B4FC                            		even
0000B4FC                            		even
0000B4FC                            
0000B4FC                            ; ===========================================================================
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            ; Object 25 - rings
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            
0000B4FC                            Obj25:					; XREF: Obj_Index
0000B4FC 7000                       		moveq	#0,d0
0000B4FE 1028 0024                  		move.b	$24(a0),d0
0000B502 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B506 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B50A                            ; ===========================================================================
0000B50A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B50C 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B50E 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B510 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B512 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Distances between rings (format: horizontal, vertical)
0000B514                            ; ---------------------------------------------------------------------------
0000B514 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000B516 1800                       		dc.b $18, 0		; horizontal normal
0000B518 2000                       		dc.b $20, 0		; horizontal wide
0000B51A 0010                       		dc.b 0,	$10		; vertical tight
0000B51C 0018                       		dc.b 0,	$18		; vertical normal
0000B51E 0020                       		dc.b 0,	$20		; vertical wide
0000B520 1010                       		dc.b $10, $10		; diagonal
0000B522 1818                       		dc.b $18, $18
0000B524 2020                       		dc.b $20, $20
0000B526 F010                       		dc.b $F0, $10
0000B528 E818                       		dc.b $E8, $18
0000B52A E020                       		dc.b $E0, $20
0000B52C 1008                       		dc.b $10, 8
0000B52E 1810                       		dc.b $18, $10
0000B530 F008                       		dc.b $F0, 8
0000B532 E810                       		dc.b $E8, $10
0000B534                            ; ===========================================================================
0000B534                            
0000B534                            Obj25_Main:				; XREF: Obj25_Index
0000B534 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B538 7000                       		moveq	#0,d0
0000B53A 1028 0023                  		move.b	$23(a0),d0
0000B53E 45F2 0002                  		lea	2(a2,d0.w),a2
0000B542 1812                       		move.b	(a2),d4
0000B544 1228 0028                  		move.b	$28(a0),d1
0000B548 1001                       		move.b	d1,d0
0000B54A 0241 0007                  		andi.w	#7,d1
0000B54E 0C41 0007                  		cmpi.w	#7,d1
0000B552 6600                       		bne.s	loc_9B80
0000B554 7206                       		moveq	#6,d1
0000B556                            
0000B556                            loc_9B80:
0000B556 4841                       		swap	d1
0000B558 323C 0000                  		move.w	#0,d1
0000B55C E808                       		lsr.b	#4,d0
0000B55E D040                       		add.w	d0,d0
0000B560 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000B564 4885                       		ext.w	d5
0000B566 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000B56A 4886                       		ext.w	d6
0000B56C 2248                       		movea.l	a0,a1
0000B56E 3428 0008                  		move.w	8(a0),d2
0000B572 3628 000C                  		move.w	$C(a0),d3
0000B576 E20C                       		lsr.b	#1,d4
0000B578 6500                       		bcs.s	loc_9C02
0000B57A 0892 0007                  		bclr	#7,(a2)
0000B57E 6000                       		bra.s	loc_9BBA
0000B580                            ; ===========================================================================
0000B580                            
0000B580                            Obj25_MakeRings:
0000B580 4841                       		swap	d1
0000B582 E20C                       		lsr.b	#1,d4
0000B584 6500                       		bcs.s	loc_9C02
0000B586 0892 0007                  		bclr	#7,(a2)
0000B58A 6100 0000                  		bsr.w	SingleObjLoad
0000B58E 6600                       		bne.s	loc_9C0E
0000B590                            
0000B590                            loc_9BBA:				; XREF: Obj25_Main
0000B590 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000B594 5429 0024                  		addq.b	#2,$24(a1)
0000B598 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000B59C 3368 0008 0032             		move.w	8(a0),$32(a1)
0000B5A2 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000B5A6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B5AE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B5B4 137C 0004 0001             		move.b	#4,1(a1)
0000B5BA 137C 0002 0018             		move.b	#2,$18(a1)
0000B5C0 137C 0047 0020             		move.b	#$47,$20(a1)
0000B5C6 137C 0008 0019             		move.b	#8,$19(a1)
0000B5CC 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000B5D2 1341 0034                  		move.b	d1,$34(a1)
0000B5D6                            
0000B5D6                            loc_9C02:
0000B5D6 5241                       		addq.w	#1,d1
0000B5D8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B5DA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B5DC 4841                       		swap	d1
0000B5DE 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000B5E2                            
0000B5E2                            loc_9C0E:
0000B5E2 0812 0000                  		btst	#0,(a2)
0000B5E6 6600 0000                  		bne.w	DeleteObject
0000B5EA                            
0000B5EA                            Obj25_Animate:				; XREF: Obj25_Index
0000B5EA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000B5F0 6100 0000                  		bsr.w	DisplaySprite
0000B5F4 3028 0032                  		move.w	$32(a0),d0
0000B5F8 0240 FF80                  		andi.w	#$FF80,d0
0000B5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B600 0441 0080                  		subi.w	#$80,d1
0000B604 0241 FF80                  		andi.w	#$FF80,d1
0000B608 9041                       		sub.w	d1,d0
0000B60A 0C40 0280                  		cmpi.w	#$280,d0
0000B60E 6200                       		bhi.s	Obj25_Delete
0000B610 4E75                       		rts	
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            Obj25_Collect:				; XREF: Obj25_Index
0000B612 5428 0024                  		addq.b	#2,$24(a0)
0000B616 117C 0000 0020             		move.b	#0,$20(a0)
0000B61C 117C 0001 0018             		move.b	#1,$18(a0)
0000B622 6100 0000                  		bsr.w	CollectRing
0000B626 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B62A 7000                       		moveq	#0,d0
0000B62C 1028 0023                  		move.b	$23(a0),d0
0000B630 1228 0034                  		move.b	$34(a0),d1
0000B634 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B638                            
0000B638                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B638 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B63E 6100 0000                  		bsr.w	AnimateSprite
0000B642 6000 0000                  		bra.w	DisplaySprite
0000B646                            ; ===========================================================================
0000B646                            
0000B646                            Obj25_Delete:				; XREF: Obj25_Index
0000B646 6000 0000                  		bra.w	DeleteObject
0000B64A                            
0000B64A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B64A                            
0000B64A                            
0000B64A                            CollectRing:				; XREF: Obj25_Collect
0000B64A 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B64E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B654 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B658 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B65E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B660 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B666 6700                       		beq.s	loc_9CA4
0000B668 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B66E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B670 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B676 6600                       		bne.s	Obj25_PlaySnd
0000B678                            
0000B678                            loc_9CA4:
0000B678 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B67C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B680 303C 0088                  		move.w	#$88,d0		; play extra life music
0000B684                            
0000B684                            Obj25_PlaySnd:
0000B684 4EF9 0000 12CE             		jmp	(PlaySound_Special).l
0000B68A                            ; End of function CollectRing
0000B68A                            
0000B68A                            ; ===========================================================================
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            
0000B68A                            Obj37:					; XREF: Obj_Index
0000B68A 7000                       		moveq	#0,d0
0000B68C 1028 0024                  		move.b	$24(a0),d0
0000B690 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B694 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B698                            ; ===========================================================================
0000B698 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B69A 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B69C 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B69E 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B6A0 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B6A2                            ; ===========================================================================
0000B6A2                            
0000B6A2                            Obj37_CountRings:			; XREF: Obj37_Index
0000B6A2 2248                       		movea.l	a0,a1
0000B6A4 7A00                       		moveq	#0,d5
0000B6A6 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B6AA 7020                       		moveq	#32,d0
0000B6AC BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B6AE 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B6B0 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B6B2                            
0000B6B2                            loc_9CDE:
0000B6B2 5345                       		subq.w	#1,d5
0000B6B4 383C 0288                  		move.w	#$288,d4
0000B6B8 6000                       		bra.s	Obj37_MakeRings
0000B6BA                            ; ===========================================================================
0000B6BA                            
0000B6BA                            Obj37_Loop:
0000B6BA 6100 0000                  		bsr.w	SingleObjLoad
0000B6BE 6600 0000                  		bne.w	Obj37_ResetCounter
0000B6C2                            
0000B6C2                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B6C2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B6C6 5429 0024                  		addq.b	#2,$24(a1)
0000B6CA 137C 0008 0016             		move.b	#8,$16(a1)
0000B6D0 137C 0008 0017             		move.b	#8,$17(a1)
0000B6D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B6E2 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B6EA 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B6F0 137C 0004 0001             		move.b	#4,1(a1)
0000B6F6 137C 0003 0018             		move.b	#3,$18(a1)
0000B6FC 137C 0047 0020             		move.b	#$47,$20(a1)
0000B702 137C 0008 0019             		move.b	#8,$19(a1)
0000B708 4A44                       		tst.w	d4
0000B70A 6B00                       		bmi.s	loc_9D62
0000B70C 3004                       		move.w	d4,d0
0000B70E 4EB8 2B7A                  		jsr	CalcSine
0000B712 3404                       		move.w	d4,d2
0000B714 E04A                       		lsr.w	#8,d2
0000B716 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B71A 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B71C 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B720 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B724 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B726 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B728 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B72A                            
0000B72A                            @skiphalvingvel:
0000B72A E560                       		asl.w	d2,d0
0000B72C E561                       		asl.w	d2,d1
0000B72E 3400                       		move.w	d0,d2
0000B730 3601                       		move.w	d1,d3
0000B732 0604 0010                  		addi.b	#$10,d4
0000B736 6400                       		bcc.s	loc_9D62
0000B738 0444 0080                  		subi.w	#$80,d4
0000B73C 6400                       		bcc.s	loc_9D62
0000B73E 383C 0288                  		move.w	#$288,d4
0000B742                            
0000B742                            loc_9D62:
0000B742 3342 0010                  		move.w	d2,$10(a1)
0000B746 3343 0012                  		move.w	d3,$12(a1)
0000B74A 4442                       		neg.w	d2
0000B74C 4444                       		neg.w	d4
0000B74E 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B752                            
0000B752                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B752 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B758 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B75E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B764 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B766 1140 001F                          move.b  d0,$1F(a0)       ; Move d0 to new timer
0000B76A 11C0 FEC6                          move.b  d0,($FFFFFEC6).w      ; Move d0 to old timer (for animated purposes)
0000B76E 303C 00C6                  		move.w	#$C6,d0
0000B772 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B778                            
0000B778                            Obj37_Bounce:				; XREF: Obj37_Index
0000B778 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B77E 6100 0000                  		bsr.w	SpeedToPos
0000B782 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B788 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B78C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B78E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B792 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B796 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B798 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B79E                            
0000B79E                            @skipbounceslow:
0000B79E 6B00                       		bmi.s	Obj37_ChkDel
0000B7A0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B7A4 D007                       		add.b	d7,d0
0000B7A6 0200 0003                  		andi.b	#3,d0
0000B7AA 6600                       		bne.s	Obj37_ChkDel
0000B7AC 4EB9 0000 0000             		jsr	ObjHitFloor
0000B7B2 4A41                       		tst.w	d1
0000B7B4 6A00                       		bpl.s	Obj37_ChkDel
0000B7B6 D368 000C                  		add.w	d1,$C(a0)
0000B7BA 3028 0012                  		move.w	$12(a0),d0
0000B7BE E440                       		asr.w	#2,d0
0000B7C0 9168 0012                  		sub.w	d0,$12(a0)
0000B7C4 4468 0012                  		neg.w	$12(a0)
0000B7C8                            
0000B7C8                            Obj37_ChkDel:
0000B7C8 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B7CC 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B7D0 0C78 FF00 F72C                     cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B7D6 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B7DA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B7DE 0640 00E0                  		addi.w	#$E0,d0
0000B7E2 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000B7E6 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000B7E8                            ;Mercury Lost Rings Flash
0000B7E8 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000B7EE 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000B7F2 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000B7F8 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000B7FC 4E75                       		rts
0000B7FE                            ;end Lost Rings Flash
0000B7FE                            ; ===========================================================================
0000B7FE                            
0000B7FE                            Obj37_Collect:				; XREF: Obj37_Index
0000B7FE 5428 0024                  		addq.b	#2,$24(a0)
0000B802 117C 0000 0020             		move.b	#0,$20(a0)
0000B808 117C 0001 0018             		move.b	#1,$18(a0)
0000B80E 6100 FE3A                  		bsr.w	CollectRing
0000B812                            
0000B812                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B812 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B818 6100 0000                  		bsr.w	AnimateSprite
0000B81C 6000 0000                  		bra.w	DisplaySprite
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj37_Delete:				; XREF: Obj37_Index
0000B820 6000 0000                  		bra.w	DeleteObject
0000B824                            ; ===========================================================================
0000B824                            ; ---------------------------------------------------------------------------
0000B824                            ; Object 4B - giant ring for entry to special stage
0000B824                            ; ---------------------------------------------------------------------------
0000B824                            
0000B824                            Obj4B:					; XREF: Obj_Index
0000B824 7000                       		moveq	#0,d0
0000B826 1028 0024                  		move.b	$24(a0),d0
0000B82A 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B82E 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B832                            ; ===========================================================================
0000B832 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B834 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B836 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B838 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B83A                            ; ===========================================================================
0000B83A                            
0000B83A                            Obj4B_Main:				; XREF: Obj4B_Index
0000B83A 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B842 317C 2400 0002             		move.w	#$2400,2(a0)
0000B848 0028 0004 0001             		ori.b	#4,1(a0)
0000B84E 117C 0040 0019             		move.b	#$40,$19(a0)
0000B854 4A28 0001                  		tst.b	1(a0)
0000B858 6A00                       		bpl.s	Obj4B_Animate
0000B85A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B860 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B864 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B86A 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B86C 4E75                       		rts	
0000B86E                            ; ===========================================================================
0000B86E                            
0000B86E                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B86E 5428 0024                  		addq.b	#2,$24(a0)
0000B872 117C 0002 0018             		move.b	#2,$18(a0)
0000B878 117C 0052 0020             		move.b	#$52,$20(a0)
0000B87E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B884                            
0000B884                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B884 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B88A 3028 0008                  		move.w	8(a0),d0
0000B88E 0240 FF80                  		andi.w	#$FF80,d0
0000B892 3238 F700                  		move.w	($FFFFF700).w,d1
0000B896 0441 0080                  		subi.w	#$80,d1
0000B89A 0241 FF80                  		andi.w	#$FF80,d1
0000B89E 9041                       		sub.w	d1,d0
0000B8A0 0C40 0280                  		cmpi.w	#$280,d0
0000B8A4 6200 0000                  		bhi.w	DeleteObject
0000B8A8 6000 0000                  		bra.w	DisplaySprite
0000B8AC                            ; ===========================================================================
0000B8AC                            
0000B8AC                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B8AC 5528 0024                  		subq.b	#2,$24(a0)
0000B8B0 117C 0000 0020             		move.b	#0,$20(a0)
0000B8B6 6100 0000                  		bsr.w	SingleObjLoad
0000B8BA 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B8BE 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B8C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B8CE 2348 003C                  		move.l	a0,$3C(a1)
0000B8D2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B8D6 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B8DA 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B8DC 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B8E2                            
0000B8E2                            Obj4B_PlaySnd:
0000B8E2 303C 00C3                  		move.w	#$C3,d0
0000B8E6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B8EC 6096                       		bra.s	Obj4B_Animate
0000B8EE                            ; ===========================================================================
0000B8EE                            
0000B8EE                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B8EE 6000 0000                  		bra.w	DeleteObject
0000B8F2                            ; ===========================================================================
0000B8F2                            ; ---------------------------------------------------------------------------
0000B8F2                            ; Object 7C - flash effect when	you collect the	giant ring
0000B8F2                            ; ---------------------------------------------------------------------------
0000B8F2                            
0000B8F2                            Obj7C:					; XREF: Obj_Index
0000B8F2 7000                       		moveq	#0,d0
0000B8F4 1028 0024                  		move.b	$24(a0),d0
0000B8F8 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B8FC 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B900                            ; ===========================================================================
0000B900 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B902 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B904 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B906                            ; ===========================================================================
0000B906                            
0000B906                            Obj7C_Main:				; XREF: Obj7C_Index
0000B906 5428 0024                  		addq.b	#2,$24(a0)
0000B90A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B912 317C 2462 0002             		move.w	#$2462,2(a0)
0000B918 0028 0004 0001             		ori.b	#4,1(a0)
0000B91E 117C 0000 0018             		move.b	#0,$18(a0)
0000B924 117C 0020 0019             		move.b	#$20,$19(a0)
0000B92A 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B930                            
0000B930                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B930 6100                       		bsr.s	Obj7C_Collect
0000B932 3028 0008                  		move.w	8(a0),d0
0000B936 0240 FF80                  		andi.w	#$FF80,d0
0000B93A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B93E 0441 0080                  		subi.w	#$80,d1
0000B942 0241 FF80                  		andi.w	#$FF80,d1
0000B946 9041                       		sub.w	d1,d0
0000B948 0C40 0280                  		cmpi.w	#$280,d0
0000B94C 6200 0000                  		bhi.w	DeleteObject
0000B950 6000 0000                  		bra.w	DisplaySprite
0000B954                            
0000B954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B954                            
0000B954                            
0000B954                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B954 5328 001E                  		subq.b	#1,$1E(a0)
0000B958 6A00                       		bpl.s	locret_9F76
0000B95A 117C 0001 001E             		move.b	#1,$1E(a0)
0000B960 5228 001A                  		addq.b	#1,$1A(a0)
0000B964 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B96A 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B96C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B972 6600                       		bne.s	locret_9F76	; if not, branch
0000B974 2268 003C                  		movea.l	$3C(a0),a1
0000B978 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B97E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B984 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B98A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B98E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B992                            
0000B992                            locret_9F76:
0000B992 4E75                       		rts	
0000B994                            ; ===========================================================================
0000B994                            
0000B994                            Obj7C_End:				; XREF: Obj7C_Collect
0000B994 5428 0024                  		addq.b	#2,$24(a0)
0000B998 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B99E 588F                       		addq.l	#4,sp
0000B9A0 4E75                       		rts	
0000B9A2                            ; End of function Obj7C_Collect
0000B9A2                            
0000B9A2                            ; ===========================================================================
0000B9A2                            
0000B9A2                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B9A2 6000 0000                  		bra.w	DeleteObject
0000B9A6                            ; ===========================================================================
0000B9A6                            Ani_obj25:
0000B9A6                            	include "_anim\obj25.asm"
0000B9A6                            ; ---------------------------------------------------------------------------
0000B9A6                            ; Animation script - ring
0000B9A6                            ; ---------------------------------------------------------------------------
0000B9A6 0000                       		dc.w byte_9F8C-Ani_obj25
0000B9A8 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B9AE                            		even
0000B9AE                            		even
0000B9AE                            
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            ; Sprite mappings - rings
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            Map_obj25:
0000B9AE                            	include "_maps\obj25.asm"
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            ; Sprite mappings - rings
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B9B2 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B9B6 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B9BA 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B9BE 01                         byte_9FA2:	dc.b 1
0000B9BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B9C4 01                         byte_9FA8:	dc.b 1
0000B9C5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B9CA 01                         byte_9FAE:	dc.b 1
0000B9CB F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B9D0 01                         byte_9FB4:	dc.b 1
0000B9D1 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B9D6 01                         byte_9FBA:	dc.b 1
0000B9D7 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B9DC 01                         byte_9FC0:	dc.b 1
0000B9DD F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B9E2 01                         byte_9FC6:	dc.b 1
0000B9E3 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B9E8 01                         byte_9FCC:	dc.b 1
0000B9E9 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B9EE                            		even
0000B9EE                            		even
0000B9EE                            
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE                            ; Sprite mappings - giant ring
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE                            Map_obj4B:
0000B9EE                            	include "_maps\obj4B.asm"
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE                            ; Sprite mappings - giant ring
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B9F2 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B9F6 0A                         byte_9FDA:	dc.b $A
0000B9F7 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B9FC E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BA01 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BA06 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BA0B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BA10 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BA15 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BA1A 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BA1F 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BA24 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BA29 08                         byte_A00D:	dc.b 8
0000BA2A E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000BA2F E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BA34 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BA39 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BA3E F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BA43 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BA48 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BA4D 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BA52 04                         byte_A036:	dc.b 4
0000BA53 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000BA58 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BA5D 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BA62 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BA67 08                         byte_A04B:	dc.b 8
0000BA68 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000BA6D E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BA72 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BA77 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BA7C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BA81 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BA86 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BA8B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BA90                            		even
0000BA90                            		even
0000BA90                            
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            Map_obj7C:
0000BA90                            	include "_maps\obj7C.asm"
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000BA94 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000BA98 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000BA9C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000BAA0 02                         byte_A084:	dc.b 2
0000BAA1 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BAA6 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BAAB 04                         byte_A08F:	dc.b 4
0000BAAC E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BAB1 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BAB6 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BABB 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BAC0 04                         byte_A0A4:	dc.b 4
0000BAC1 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BAC6 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BACB 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BAD0 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BAD5 04                         byte_A0B9:	dc.b 4
0000BAD6 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BADB E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BAE0 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BAE5 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BAEA 04                         byte_A0CE:	dc.b 4
0000BAEB E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BAF0 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BAF5 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BAFA 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BAFF 04                         byte_A0E3:	dc.b 4
0000BB00 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BB05 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BB0A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BB0F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BB14 02                         byte_A0F8:	dc.b 2
0000BB15 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BB1A 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BB1F 04                         byte_A103:	dc.b 4
0000BB20 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BB25 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BB2A 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BB2F 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BB34                            		even
0000BB34                            		even
0000BB34                            
0000BB34                            ; ===========================================================================
0000BB34                            ; ---------------------------------------------------------------------------
0000BB34                            ; Object 26 - monitors
0000BB34                            ; ---------------------------------------------------------------------------
0000BB34                            
0000BB34                            Obj26:					; XREF: Obj_Index
0000BB34 7000                       		moveq	#0,d0
0000BB36 1028 0024                  		move.b	$24(a0),d0
0000BB3A 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000BB3E 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000BB42                            ; ===========================================================================
0000BB42 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000BB44 0000                       		dc.w Obj26_Solid-Obj26_Index
0000BB46 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000BB48 0000                       		dc.w Obj26_Animate-Obj26_Index
0000BB4A 0000                       		dc.w Obj26_Display-Obj26_Index
0000BB4C                            ; ===========================================================================
0000BB4C                            
0000BB4C                            Obj26_Main:				; XREF: Obj26_Index
0000BB4C 5428 0024                  		addq.b	#2,$24(a0)
0000BB50 117C 000E 0016             		move.b	#$E,$16(a0)
0000BB56 117C 000E 0017             		move.b	#$E,$17(a0)
0000BB5C 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000BB64 317C 0680 0002             		move.w	#$680,2(a0)
0000BB6A 117C 0004 0001             		move.b	#4,1(a0)
0000BB70 117C 0003 0018             		move.b	#3,$18(a0)
0000BB76 117C 000F 0019             		move.b	#$F,$19(a0)
0000BB7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BB80 7000                       		moveq	#0,d0
0000BB82 1028 0023                  		move.b	$23(a0),d0
0000BB86 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BB8C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BB92 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000BB94 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000BB9A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000BBA0 4E75                       		rts	
0000BBA2                            ; ===========================================================================
0000BBA2                            
0000BBA2                            Obj26_NotBroken:			; XREF: Obj26_Main
0000BBA2 117C 0046 0020             		move.b	#$46,$20(a0)
0000BBA8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000BBAE                            
0000BBAE                            Obj26_Solid:				; XREF: Obj26_Index
0000BBAE 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000BBB2 6700                       		beq.s	loc_A1EC	; if not, branch
0000BBB4 5500                       		subq.b	#2,d0
0000BBB6 6600                       		bne.s	Obj26_Fall
0000BBB8 7200                       		moveq	#0,d1
0000BBBA 1228 0019                  		move.b	$19(a0),d1
0000BBBE 0641 000B                  		addi.w	#$B,d1
0000BBC2 6100 D3F2                  		bsr.w	ExitPlatform
0000BBC6 0829 0003 0022             		btst	#3,$22(a1)
0000BBCC 6600 0000                  		bne.w	loc_A1BC
0000BBD0 4228 0025                  		clr.b	$25(a0)
0000BBD4 6000 0000                  		bra.w	Obj26_Animate
0000BBD8                            ; ===========================================================================
0000BBD8                            
0000BBD8                            loc_A1BC:				; XREF: Obj26_Solid
0000BBD8 363C 0010                  		move.w	#$10,d3
0000BBDC 3428 0008                  		move.w	8(a0),d2
0000BBE0 6100 D932                  		bsr.w	MvSonicOnPtfm
0000BBE4 6000 0000                  		bra.w	Obj26_Animate
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            Obj26_Fall:				; XREF: Obj26_Solid
0000BBE8 6100 0000                  		bsr.w	ObjectFall
0000BBEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000BBF2 4A41                       		tst.w	d1
0000BBF4 6A00 0000                  		bpl.w	Obj26_Animate
0000BBF8 D368 000C                  		add.w	d1,$C(a0)
0000BBFC 4268 0012                  		clr.w	$12(a0)
0000BC00 4228 0025                  		clr.b	$25(a0)
0000BC04 6000 0000                  		bra.w	Obj26_Animate
0000BC08                            ; ===========================================================================
0000BC08                            
0000BC08                            loc_A1EC:				; XREF: Obj26_Solid
0000BC08 323C 001A                  		move.w	#$1A,d1
0000BC0C 343C 000F                  		move.w	#$F,d2
0000BC10 6100 0000                  		bsr.w	Obj26_SolidSides
0000BC14 6700 0000                  		beq.w	loc_A25C
0000BC18 4A29 003A                  		tst.b	$3A(a1)
0000BC1C 6600                       		bne.s	loc_A25C
0000BC1E 4A41                       		tst.w	d1
0000BC20 6A00                       		bpl.s	loc_A220
0000BC22 9769 000C                  		sub.w	d3,$C(a1)
0000BC26 6100 D27C                  		bsr.w	loc_74AE
0000BC2A 117C 0002 0025             		move.b	#2,$25(a0)
0000BC30 6000 0000                  		bra.w	Obj26_Animate
0000BC34                            ; ===========================================================================
0000BC34                            
0000BC34                            loc_A220:
0000BC34 4A40                       		tst.w	d0
0000BC36 6700 0000                  		beq.w	loc_A246
0000BC3A 6B00                       		bmi.s	loc_A230
0000BC3C 4A69 0010                  		tst.w	$10(a1)
0000BC40 6B00                       		bmi.s	loc_A246
0000BC42 6000                       		bra.s	loc_A236
0000BC44                            ; ===========================================================================
0000BC44                            
0000BC44                            loc_A230:
0000BC44 4A69 0010                  		tst.w	$10(a1)
0000BC48 6A00                       		bpl.s	loc_A246
0000BC4A                            
0000BC4A                            loc_A236:
0000BC4A 9169 0008                  		sub.w	d0,8(a1)
0000BC4E 337C 0000 0014             		move.w	#0,$14(a1)
0000BC54 337C 0000 0010             		move.w	#0,$10(a1)
0000BC5A                            
0000BC5A                            loc_A246:
0000BC5A 0829 0001 0022             		btst	#1,$22(a1)
0000BC60 6600                       		bne.s	loc_A26A
0000BC62 08E9 0005 0022             		bset	#5,$22(a1)
0000BC68 08E8 0005 0022             		bset	#5,$22(a0)
0000BC6E 6000                       		bra.s	Obj26_Animate
0000BC70                            ; ===========================================================================
0000BC70                            
0000BC70                            loc_A25C:
0000BC70 0828 0005 0022             		btst	#5,$22(a0)
0000BC76 6700                       		beq.s	Obj26_Animate
0000BC78 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000BC7E 6700                       		beq.s	loc_A26A
0000BC80 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000BC86 6700                       		beq.s	loc_A26A
0000BC88 337C 0001 001C             		move.w	#1,$1C(a1)
0000BC8E                            
0000BC8E                            loc_A26A:
0000BC8E 08A8 0005 0022             		bclr	#5,$22(a0)
0000BC94 08A9 0005 0022             		bclr	#5,$22(a1)
0000BC9A                            
0000BC9A                            Obj26_Animate:				; XREF: Obj26_Index
0000BC9A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000BCA0 6100 0000                  		bsr.w	AnimateSprite
0000BCA4                            
0000BCA4                            Obj26_Display:				; XREF: Obj26_Index
0000BCA4 6100 0000                  		bsr.w	DisplaySprite
0000BCA8 3028 0008                  		move.w	8(a0),d0
0000BCAC 0240 FF80                  		andi.w	#$FF80,d0
0000BCB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCB4 0441 0080                  		subi.w	#$80,d1
0000BCB8 0241 FF80                  		andi.w	#$FF80,d1
0000BCBC 9041                       		sub.w	d1,d0
0000BCBE 0C40 0280                  		cmpi.w	#$280,d0
0000BCC2 6200 0000                  		bhi.w	DeleteObject
0000BCC6 4E75                       		rts	
0000BCC8                            ; ===========================================================================
0000BCC8                            
0000BCC8                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000BCC8 5428 0024                  		addq.b	#2,$24(a0)
0000BCCC 117C 0000 0020             		move.b	#0,$20(a0)
0000BCD2 6100 0000                  		bsr.w	SingleObjLoad
0000BCD6 6600                       		bne.s	Obj26_Explode
0000BCD8 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000BCDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BCE8 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000BCEE                            
0000BCEE                            Obj26_Explode:
0000BCEE 6100 0000                  		bsr.w	SingleObjLoad
0000BCF2 6600                       		bne.s	Obj26_SetBroken
0000BCF4 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000BCF8 5429 0024                  		addq.b	#2,$24(a1)
0000BCFC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD02 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BD08                            
0000BD08                            Obj26_SetBroken:
0000BD08 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BD0C 7000                       		moveq	#0,d0
0000BD0E 1028 0023                  		move.b	$23(a0),d0
0000BD12 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BD18 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000BD1E 6000 0000                  		bra.w	DisplaySprite
0000BD22                            ; ===========================================================================
0000BD22                            ; ---------------------------------------------------------------------------
0000BD22                            ; Object 2E - contents of monitors
0000BD22                            ; ---------------------------------------------------------------------------
0000BD22                            
0000BD22                            Obj2E:					; XREF: Obj_Index
0000BD22 7000                       		moveq	#0,d0
0000BD24 1028 0024                  		move.b	$24(a0),d0
0000BD28 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000BD2C 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000BD30 6000 0000                  		bra.w	DisplaySprite
0000BD34                            ; ===========================================================================
0000BD34 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000BD36 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000BD38 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000BD3A                            ; ===========================================================================
0000BD3A                            
0000BD3A                            Obj2E_Main:				; XREF: Obj2E_Index
0000BD3A 5428 0024                  		addq.b	#2,$24(a0)
0000BD3E 317C 0680 0002             		move.w	#$680,2(a0)
0000BD44 117C 0024 0001             		move.b	#$24,1(a0)
0000BD4A 117C 0003 0018             		move.b	#3,$18(a0)
0000BD50 117C 0008 0019             		move.b	#8,$19(a0)
0000BD56 317C FD00 0012             		move.w	#-$300,$12(a0)
0000BD5C 7000                       		moveq	#0,d0
0000BD5E 1028 001C                  		move.b	$1C(a0),d0
0000BD62 5400                       		addq.b	#2,d0
0000BD64 1140 001A                  		move.b	d0,$1A(a0)
0000BD68 227C 0000 0000             		movea.l	#Map_obj26,a1
0000BD6E D000                       		add.b	d0,d0
0000BD70 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BD74 5249                       		addq.w	#1,a1
0000BD76 2149 0004                  		move.l	a1,4(a0)
0000BD7A                            
0000BD7A                            Obj2E_Move:				; XREF: Obj2E_Index
0000BD7A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000BD7E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000BD82 6100 0000                  		bsr.w	SpeedToPos
0000BD86 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000BD8C 4E75                       		rts	
0000BD8E                            ; ===========================================================================
0000BD8E                            
0000BD8E                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000BD8E 5428 0024                          addq.b    #2,$24(a0)
0000BD92 317C 001D 001E                     move.w    #29,$1E(a0)
0000BD98 1028 001C                          move.b    $1C(a0),d0
0000BD9C 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000BDA0 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000BDA2 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000BDA4 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000BDA6 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000BDAA 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000BDB0 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000BDB2 4E75                               rts ; The Eggman monitor now does something!
0000BDB4                            ; ===========================================================================
0000BDB4                            
0000BDB4                            Obj2E_ChkSonic:
0000BDB4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BDB8 6600                       		bne.s	Obj2E_ChkShoes
0000BDBA                            
0000BDBA                            ExtraLife:
0000BDBA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000BDBE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000BDC2 303C 0088                  		move.w	#$88,d0
0000BDC6 4EF9 0000 12C6             		jmp	(PlaySound).l	; play extra life music
0000BDCC                            ; ===========================================================================
0000BDCC                            
0000BDCC                            Obj2E_ChkShoes:
0000BDCC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BDD0 6600                       		bne.s	Obj2E_ChkShield
0000BDD2 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000BDD8                            
0000BDD8 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; am I already speed shoe'd?
0000BDDC 6600                       		bne.s	Obj2E_NoShoes	; if so, branch
0000BDDE 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000BDE4                            		
0000BDE4                            Obj2E_NoShoes:
0000BDE4 4E75                       		rts
0000BDE6                            ; ===========================================================================
0000BDE6                            
0000BDE6                            Obj2E_ChkShield:
0000BDE6 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000BDEA 6600                       		bne.s	Obj2E_ChkInvinc
0000BDEC 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000BDF2 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000BDF8 303C 00AF                  		move.w	#$AF,d0
0000BDFC 4EF9 0000 12C6             		jmp	(PlaySound).l	; play shield sound
0000BE02                            ; ===========================================================================
0000BE02                            
0000BE02                            Obj2E_ChkInvinc:
0000BE02 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BE06 6600 0000                  		bne.w	Obj2E_ChkRings
0000BE0A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000BE10                            
0000BE10 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; am I already invincible?
0000BE14 6600                       		bne.s	Obj2E_NoInv		; if so, branch
0000BE16                            
0000BE16 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000BE1C                            
0000BE1C 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000BE22 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000BE28 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000BE2E 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000BE34 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000BE3A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000BE40 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000BE46 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000BE4C                            		
0000BE4C                            Obj2E_NoInv:
0000BE4C 4E75                       		rts	
0000BE4E                            ; ===========================================================================
0000BE4E                            
0000BE4E                            Obj2E_ChkRings:
0000BE4E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BE52 6600                       		bne.s	Obj2E_ChkS
0000BE54 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000BE5A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000BE60 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000BE66 6500                       		bcs.s	Obj2E_RingSound
0000BE68 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000BE6E 6700 FF4A                  		beq.w	ExtraLife
0000BE72 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000BE78 6500                       		bcs.s	Obj2E_RingSound
0000BE7A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000BE80 6700 FF38                  		beq.w	ExtraLife
0000BE84                            
0000BE84                            Obj2E_RingSound:
0000BE84 303C 00B5                  		move.w	#$B5,d0
0000BE88 4EF9 0000 12C6             		jmp	(PlaySound).l	; play ring sound
0000BE8E                            ; ===========================================================================
0000BE8E                            
0000BE8E                            Obj2E_ChkS:
0000BE8E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000BE92 6600 0000                  		bne	Obj2E_ChkGoggles		; if not, branch to Goggle code
0000BE96 4E71                       		nop
0000BE98                            
0000BE98                            Obj2E_ChkGoggles:	
0000BE98 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain Goggles?
0000BE9C 6600 0000                  		bne	Obj2E_ChkEnd		; if not, branch to ChkEnd
0000BEA0 4E71                       		nop
0000BEA2                            
0000BEA2                            Obj2E_ChkEnd:
0000BEA2 4E75                       		rts			; 'S' and goggles monitors do nothing
0000BEA4                            ; ===========================================================================
0000BEA4                            
0000BEA4                            Obj2E_Delete:				; XREF: Obj2E_Index
0000BEA4 5368 001E                  		subq.w	#1,$1E(a0)
0000BEA8 6B00 0000                  		bmi.w	DeleteObject
0000BEAC 4E75                       		rts	
0000BEAE                            ; ---------------------------------------------------------------------------
0000BEAE                            ; Subroutine to	make the sides of a monitor solid
0000BEAE                            ; ---------------------------------------------------------------------------
0000BEAE                            
0000BEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEAE                            
0000BEAE                            
0000BEAE                            Obj26_SolidSides:			; XREF: loc_A1EC
0000BEAE 43F8 D000                  		lea	($FFFFD000).w,a1
0000BEB2 3029 0008                  		move.w	8(a1),d0
0000BEB6 9068 0008                  		sub.w	8(a0),d0
0000BEBA D041                       		add.w	d1,d0
0000BEBC 6B00                       		bmi.s	loc_A4E6
0000BEBE 3601                       		move.w	d1,d3
0000BEC0 D643                       		add.w	d3,d3
0000BEC2 B043                       		cmp.w	d3,d0
0000BEC4 6200                       		bhi.s	loc_A4E6
0000BEC6 1629 0016                  		move.b	$16(a1),d3
0000BECA 4883                       		ext.w	d3
0000BECC D443                       		add.w	d3,d2
0000BECE 3629 000C                  		move.w	$C(a1),d3
0000BED2 9668 000C                  		sub.w	$C(a0),d3
0000BED6 D642                       		add.w	d2,d3
0000BED8 6B00                       		bmi.s	loc_A4E6
0000BEDA D442                       		add.w	d2,d2
0000BEDC B642                       		cmp.w	d2,d3
0000BEDE 6400                       		bcc.s	loc_A4E6
0000BEE0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BEE4 6B00                       		bmi.s	loc_A4E6
0000BEE6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BEEC 6400                       		bcc.s	loc_A4E6
0000BEEE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BEF2 6600                       		bne.s	loc_A4E6
0000BEF4 B240                       		cmp.w	d0,d1
0000BEF6 6400                       		bcc.s	loc_A4DC
0000BEF8 D241                       		add.w	d1,d1
0000BEFA 9041                       		sub.w	d1,d0
0000BEFC                            
0000BEFC                            loc_A4DC:
0000BEFC 0C43 0010                  		cmpi.w	#$10,d3
0000BF00 6500                       		bcs.s	loc_A4EA
0000BF02                            
0000BF02                            loc_A4E2:
0000BF02 7201                       		moveq	#1,d1
0000BF04 4E75                       		rts	
0000BF06                            ; ===========================================================================
0000BF06                            
0000BF06                            loc_A4E6:
0000BF06 7200                       		moveq	#0,d1
0000BF08 4E75                       		rts	
0000BF0A                            ; ===========================================================================
0000BF0A                            
0000BF0A                            loc_A4EA:
0000BF0A 7200                       		moveq	#0,d1
0000BF0C 1228 0019                  		move.b	$19(a0),d1
0000BF10 5841                       		addq.w	#4,d1
0000BF12 3401                       		move.w	d1,d2
0000BF14 D442                       		add.w	d2,d2
0000BF16 D269 0008                  		add.w	8(a1),d1
0000BF1A 9268 0008                  		sub.w	8(a0),d1
0000BF1E 6BE2                       		bmi.s	loc_A4E2
0000BF20 B242                       		cmp.w	d2,d1
0000BF22 64DE                       		bcc.s	loc_A4E2
0000BF24 72FF                       		moveq	#-1,d1
0000BF26 4E75                       		rts	
0000BF28                            ; End of function Obj26_SolidSides
0000BF28                            
0000BF28                            ; ===========================================================================
0000BF28                            Ani_obj26:
0000BF28                            	include "_anim\obj26.asm"
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Animation script - monitors
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000BF2E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000BF34 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000BF3A 0000                       		dc.w byte_A582-Ani_obj26
0000BF3C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000BF42 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000BF4E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000BF5A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000BF66 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000BF72 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000BF7E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000BF8A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000BF96 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000BFA2 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000BFAA                            		even
0000BFAA                            		even
0000BFAA                            
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Sprite mappings - monitors
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            Map_obj26:
0000BFAA                            	include "_maps\obj26.asm"
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Sprite mappings - monitors
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000BFAE 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000BFB2 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000BFB6 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000BFBA 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000BFBE 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000BFC2 01                         byte_A5A2:	dc.b 1			; static monitor
0000BFC3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFC8 02                         byte_A5A8:	dc.b 2			; static monitor
0000BFC9 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000BFCE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFD3 02                         byte_A5B3:	dc.b 2			; static monitor
0000BFD4 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000BFD9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFDE 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000BFDF F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000BFE4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFE9 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000BFEA F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000BFEF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFF4 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000BFF5 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000BFFA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFFF 02                         byte_A5DF:	dc.b 2			; shield monitor
0000C000 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000C005 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C00A 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000C00B F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000C010 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C015 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000C016 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000C01B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C020 02                         byte_A600:	dc.b 2			; 'S' monitor
0000C021 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000C026 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C02B 02                         byte_A60B:	dc.b 2			; goggles monitor
0000C02C F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000C031 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C036 01                         byte_A616:	dc.b 1			; broken monitor
0000C037 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000C03C                            		even
0000C03C                            		even
0000C03C                            
0000C03C                            ; ===========================================================================
0000C03C                            ; ---------------------------------------------------------------------------
0000C03C                            ; Object 0E - Sonic on the title screen
0000C03C                            ; ---------------------------------------------------------------------------
0000C03C                            
0000C03C                            Obj0E:					; XREF: Obj_Index
0000C03C 7000                       		moveq	#0,d0
0000C03E 1028 0024                  		move.b	$24(a0),d0
0000C042 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000C046 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000C04A                            ; ===========================================================================
0000C04A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000C04C 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000C04E 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000C050 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000C052                            ; ===========================================================================
0000C052                            
0000C052                            Obj0E_Main:				; XREF: Obj0E_Index
0000C052 5428 0024                  		addq.b	#2,$24(a0)
0000C056 317C 00F0 0008             		move.w	#$F0,8(a0)
0000C05C 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000C062 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000C06A 317C 2300 0002             		move.w	#$2300,2(a0)
0000C070 117C 0001 0018             		move.b	#1,$18(a0)
0000C076 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000C07C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C082 6100 0000                  		bsr.w	AnimateSprite
0000C086                            
0000C086                            Obj0E_Delay:				; XREF: Obj0E_Index
0000C086 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000C08A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000C08C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000C090 6000 0000                  		bra.w	DisplaySprite
0000C094                            ; ===========================================================================
0000C094                            
0000C094                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000C094 4E75                       		rts	
0000C096                            ; ===========================================================================
0000C096                            
0000C096                            Obj0E_Move:				; XREF: Obj0E_Index
0000C096 5168 000A                  		subq.w	#8,$A(a0)
0000C09A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000C0A0 6600                       		bne.s	Obj0E_Display
0000C0A2 5428 0024                  		addq.b	#2,$24(a0)
0000C0A6                            
0000C0A6                            Obj0E_Display:
0000C0A6 6000 0000                  		bra.w	DisplaySprite
0000C0AA                            ; ===========================================================================
0000C0AA 4E75                       		rts	
0000C0AC                            ; ===========================================================================
0000C0AC                            
0000C0AC                            Obj0E_Animate:				; XREF: Obj0E_Index
0000C0AC 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C0B2 6100 0000                  		bsr.w	AnimateSprite
0000C0B6 6000 0000                  		bra.w	DisplaySprite
0000C0BA                            ; ===========================================================================
0000C0BA 4E75                       		rts	
0000C0BC                            ; ===========================================================================
0000C0BC                            ; ---------------------------------------------------------------------------
0000C0BC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C0BC                            ; ---------------------------------------------------------------------------
0000C0BC                            
0000C0BC                            Obj0F:					; XREF: Obj_Index
0000C0BC 7000                       		moveq	#0,d0
0000C0BE 1028 0024                  		move.b	$24(a0),d0
0000C0C2 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C0C6 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C0CA 6000 0000                  		bra.w	DisplaySprite
0000C0CE                            ; ===========================================================================
0000C0CE 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000C0D0 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000C0D2 0000                       		dc.w locret_A6F8-Obj0F_Index
0000C0D4                            ; ===========================================================================
0000C0D4                            
0000C0D4                            Obj0F_Main:				; XREF: Obj0F_Index
0000C0D4 5428 0024                  		addq.b	#2,$24(a0)
0000C0D8 317C 00D0 0008             		move.w	#$D0,8(a0)
0000C0DE 317C 0130 000A             		move.w	#$130,$A(a0)
0000C0E4 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000C0EC 317C 0200 0002             		move.w	#$200,2(a0)
0000C0F2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000C0F8 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000C0FA 5428 0024                  		addq.b	#2,$24(a0)
0000C0FE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000C104 6600                       		bne.s	locret_A6F8	; if not, branch
0000C106 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000C10C 317C 0170 0008             		move.w	#$170,8(a0)
0000C112 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000C118                            
0000C118                            locret_A6F8:				; XREF: Obj0F_Index
0000C118 4E75                       		rts	
0000C11A                            ; ===========================================================================
0000C11A                            
0000C11A                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000C11A 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000C120 6000 0000                  		bra.w	AnimateSprite
0000C124                            ; ===========================================================================
0000C124                            Ani_obj0E:
0000C124                            	include "_anim\obj0E.asm"
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            ; Animation script - Sonic on the title screen
0000C124                            ; ---------------------------------------------------------------------------
0000C124 0000                       		dc.w byte_A706-Ani_obj0E
0000C126 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000C132                            		even
0000C132                            		even
0000C132                            
0000C132                            Ani_obj0F:
0000C132                            	include "_anim\obj0F.asm"
0000C132                            ; ---------------------------------------------------------------------------
0000C132                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C132                            ; ---------------------------------------------------------------------------
0000C132 0000                       		dc.w byte_A714-Ani_obj0F
0000C134 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000C138                            		even
0000C138                            		even
0000C138                            
0000C138                            ; ---------------------------------------------------------------------------
0000C138                            ; Subroutine to	animate	a sprite using an animation script
0000C138                            ; ---------------------------------------------------------------------------
0000C138                            
0000C138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C138                            
0000C138                            
0000C138                            AnimateSprite:
0000C138 7000                       		moveq	#0,d0
0000C13A 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000C13E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000C142 6700                       		beq.s	Anim_Run	; if not, branch
0000C144 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000C148 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C14E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000C154                            
0000C154                            Anim_Run:
0000C154 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000C158 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C15A D040                       		add.w	d0,d0
0000C15C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C160 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000C164 7200                       		moveq	#0,d1
0000C166 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000C16A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C16E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C170                            
0000C170                            Anim_Next:
0000C170 1200                       		move.b	d0,d1
0000C172 0200 001F                  		andi.b	#$1F,d0
0000C176 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000C17A 1028 0022                  		move.b	$22(a0),d0
0000C17E E719                       		rol.b	#3,d1
0000C180 B101                       		eor.b	d0,d1
0000C182 0201 0003                  		andi.b	#3,d1
0000C186 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000C18C 8328 0001                  		or.b	d1,1(a0)
0000C190 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000C194                            
0000C194                            Anim_Wait:
0000C194 4E75                       		rts	
0000C196                            ; ===========================================================================
0000C196                            
0000C196                            Anim_End_FF:
0000C196 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C198 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C19A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000C1A0 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C1A4 60CA                       		bra.s	Anim_Next
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            Anim_End_FE:
0000C1A6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C1A8 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C1AA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C1AE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000C1B2 9200                       		sub.b	d0,d1
0000C1B4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C1B8 60B6                       		bra.s	Anim_Next
0000C1BA                            ; ===========================================================================
0000C1BA                            
0000C1BA                            Anim_End_FD:
0000C1BA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C1BC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C1BE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000C1C4                            
0000C1C4                            Anim_End_FC:
0000C1C4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C1C6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C1C8 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000C1CC                            
0000C1CC                            Anim_End_FB:
0000C1CC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C1CE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C1D0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C1D6 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000C1DA                            
0000C1DA                            Anim_End_FA:
0000C1DA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C1DC 6600                       		bne.s	Anim_End	; if not, branch
0000C1DE 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000C1E2                            
0000C1E2                            Anim_End:
0000C1E2 4E75                       		rts	
0000C1E4                            ; End of function AnimateSprite
0000C1E4                            
0000C1E4                            ; ===========================================================================
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4                            Map_obj0F:
0000C1E4                            	include "_maps\obj0F.asm"
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4 0000                       		dc.w byte_A7CD-Map_obj0F
0000C1E6 0000                       		dc.w byte_A7CC-Map_obj0F
0000C1E8 0000                       		dc.w byte_A7EB-Map_obj0F
0000C1EA 0000                       		dc.w byte_A882-Map_obj0F
0000C1EC 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000C1ED 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C1F2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C1F7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C1FC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C201 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C206 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C20B 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000C20C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C211 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C216 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C21B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C220 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C225 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C22A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C22F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C234 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C239 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C23E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C243 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C248 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C24D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C252 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C257 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C25C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C261 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C266 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C26B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C270 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C275 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C27A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C27F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C284 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C289 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C28E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C293 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C298 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C29D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C2A2 01                         byte_A882:	dc.b 1			; "TM"
0000C2A3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C2A8                            		even
0000C2A8                            		even
0000C2A8                            
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8                            ; Sprite mappings - Sonic on the title screen
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8                            Map_obj0E:
0000C2A8                            	include "_maps\obj0E.asm"
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8                            ; Sprite mappings - Sonic on the title screen
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8 0000                       		dc.w byte_A898-Map_obj0E
0000C2AA 0000                       		dc.w byte_A8CB-Map_obj0E
0000C2AC 0000                       		dc.w byte_A917-Map_obj0E
0000C2AE 0000                       		dc.w byte_A96D-Map_obj0E
0000C2B0 0000                       		dc.w byte_A9AF-Map_obj0E
0000C2B2 0000                       		dc.w byte_A9E7-Map_obj0E
0000C2B4 0000                       		dc.w byte_AA47-Map_obj0E
0000C2B6 0000                       		dc.w byte_AAB1-Map_obj0E
0000C2B8 0A                         byte_A898:	dc.b $A
0000C2B9 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C2BE 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C2C3 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C2C8 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C2CD 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C2D2 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C2D7 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C2DC 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C2E1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C2E6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C2EB 0F                         byte_A8CB:	dc.b $F
0000C2EC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C2F1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C2F6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C2FB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C300 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C305 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C30A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C30F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C314 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C319 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C31E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C323 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C328 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C32D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C332 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C337 11                         byte_A917:	dc.b $11
0000C338 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C33D 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C342 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C347 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C34C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C351 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C356 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C35B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C360 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C365 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C36A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C36F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C374 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C379 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C37E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C383 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C388 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C38D 0D                         byte_A96D:	dc.b $D
0000C38E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C393 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C398 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C39D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C3A2 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C3A7 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C3AC 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C3B1 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C3B6 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C3BB 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C3C0 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C3C5 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C3CA 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C3CF 0B                         byte_A9AF:	dc.b $B
0000C3D0 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C3D5 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C3DA 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C3DF 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C3E4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C3E9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C3EE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C3F3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C3F8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C3FD 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C402 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C407 13                         byte_A9E7:	dc.b $13
0000C408 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C40D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C412 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C417 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C41C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C421 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C426 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C42B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C430 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C435 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C43A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C43F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C444 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C449 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C44E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C453 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C458 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C45D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C462 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C467 15                         byte_AA47:	dc.b $15
0000C468 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C46D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C472 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C477 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C47C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C481 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C486 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C48B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C490 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C495 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C49A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C49F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C4A4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C4A9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C4AE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C4B3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C4B8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C4BD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C4C2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C4C7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C4CC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C4D1 16                         byte_AAB1:	dc.b $16
0000C4D2 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C4D7 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C4DC 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C4E1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C4E6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C4EB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C4F0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C4F5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C4FA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C4FF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C504 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C509 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C50E 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C513 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C518 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C51D 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C522 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C527 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C52C 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C531 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C536 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C53B 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C540                            		even
0000C540                            		even
0000C540                            
0000C540                            ; ===========================================================================
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            ; Object 2B - Chopper enemy (GHZ)
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            
0000C540                            Obj2B:					; XREF: Obj_Index
0000C540 7000                       		moveq	#0,d0
0000C542 1028 0024                  		move.b	$24(a0),d0
0000C546 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000C54A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000C54E 6000 0000                  		bra.w	MarkObjGone
0000C552                            ; ===========================================================================
0000C552 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000C554 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000C556                            ; ===========================================================================
0000C556                            
0000C556                            Obj2B_Main:				; XREF: Obj2B_Index
0000C556 5428 0024                  		addq.b	#2,$24(a0)
0000C55A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000C562 317C 047B 0002             		move.w	#$47B,2(a0)
0000C568 117C 0004 0001             		move.b	#4,1(a0)
0000C56E 117C 0004 0018             		move.b	#4,$18(a0)
0000C574 117C 0009 0020             		move.b	#9,$20(a0)
0000C57A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C580 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C586 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C58C                            
0000C58C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000C58C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000C592 6100 FBA4                  		bsr.w	AnimateSprite
0000C596 6100 0000                  		bsr.w	SpeedToPos
0000C59A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000C5A0 3028 0030                  		move.w	$30(a0),d0
0000C5A4 B068 000C                  		cmp.w	$C(a0),d0
0000C5A8 6400                       		bcc.s	Obj2B_ChgAni
0000C5AA 3140 000C                  		move.w	d0,$C(a0)
0000C5AE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C5B4                            
0000C5B4                            Obj2B_ChgAni:
0000C5B4 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C5BA 0440 00C0                  		subi.w	#$C0,d0
0000C5BE B068 000C                  		cmp.w	$C(a0),d0
0000C5C2 6400                       		bcc.s	locret_ABB6
0000C5C4 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C5CA 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C5CE 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C5D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C5D6                            
0000C5D6                            locret_ABB6:
0000C5D6 4E75                       		rts	
0000C5D8                            ; ===========================================================================
0000C5D8                            Ani_obj2B:
0000C5D8                            	include "_anim\obj2B.asm"
0000C5D8                            ; ---------------------------------------------------------------------------
0000C5D8                            ; Animation script - Chopper enemy
0000C5D8                            ; ---------------------------------------------------------------------------
0000C5D8 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C5DA 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C5DC 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C5DE 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C5E2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C5E6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C5EA 00                         		even
0000C5EA 00                         		even
0000C5EA                            
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            Map_obj2B:
0000C5EA                            	include "_maps\obj2B.asm"
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA 0000                       		dc.w byte_ABCE-Map_obj2B
0000C5EC 0000                       		dc.w byte_ABD4-Map_obj2B
0000C5EE 01                         byte_ABCE:	dc.b 1
0000C5EF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C5F4 01                         byte_ABD4:	dc.b 1
0000C5F5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C5FA                            		even
0000C5FA                            		even
0000C5FA                            
0000C5FA                            ; ===========================================================================
0000C5FA                            ; ---------------------------------------------------------------------------
0000C5FA                            ; Object 2C - Jaws enemy (LZ)
0000C5FA                            ; ---------------------------------------------------------------------------
0000C5FA                            
0000C5FA                            Obj2C:					; XREF: Obj_Index
0000C5FA 7000                       		moveq	#0,d0
0000C5FC 1028 0024                  		move.b	$24(a0),d0
0000C600 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C604 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C608                            ; ===========================================================================
0000C608 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C60A 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C60C                            ; ===========================================================================
0000C60C                            
0000C60C                            Obj2C_Main:				; XREF: Obj2C_Index
0000C60C 5428 0024                  		addq.b	#2,$24(a0)
0000C610 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C618 317C 2486 0002             		move.w	#$2486,2(a0)
0000C61E 0028 0004 0001             		ori.b	#4,1(a0)
0000C624 117C 000A 0020             		move.b	#$A,$20(a0)
0000C62A 117C 0004 0018             		move.b	#4,$18(a0)
0000C630 117C 0010 0019             		move.b	#$10,$19(a0)
0000C636 7000                       		moveq	#0,d0
0000C638 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C63C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C63E 5340                       		subq.w	#1,d0
0000C640 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C644 3140 0032                  		move.w	d0,$32(a0)
0000C648 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C64E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C654 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C656 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C65A                            
0000C65A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C65A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C65E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C660 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C666 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C66A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C670 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C676                            
0000C676                            Obj2C_Animate:
0000C676 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C67C 6100 FABA                  		bsr.w	AnimateSprite
0000C680 6100 0000                  		bsr.w	SpeedToPos
0000C684 6000 0000                  		bra.w	MarkObjGone
0000C688                            ; ===========================================================================
0000C688                            Ani_obj2C:
0000C688                            	include "_anim\obj2C.asm"
0000C688                            ; ---------------------------------------------------------------------------
0000C688                            ; Animation script - Jaws enemy
0000C688                            ; ---------------------------------------------------------------------------
0000C688 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C68A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C690                            		even
0000C690                            		even
0000C690                            
0000C690                            ; ---------------------------------------------------------------------------
0000C690                            ; Sprite mappings - Jaws enemy (LZ)
0000C690                            ; ---------------------------------------------------------------------------
0000C690                            Map_obj2C:
0000C690                            	include "_maps\obj2C.asm"
0000C690                            ; ---------------------------------------------------------------------------
0000C690                            ; Sprite mappings - Jaws enemy (LZ)
0000C690                            ; ---------------------------------------------------------------------------
0000C690 0000                       		dc.w byte_AC78-Map_obj2C
0000C692 0000                       		dc.w byte_AC83-Map_obj2C
0000C694 0000                       		dc.w byte_AC8E-Map_obj2C
0000C696 0000                       		dc.w byte_AC99-Map_obj2C
0000C698 02                         byte_AC78:	dc.b 2
0000C699 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C69E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000C6A3 02                         byte_AC83:	dc.b 2
0000C6A4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C6A9 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000C6AE 02                         byte_AC8E:	dc.b 2
0000C6AF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C6B4 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000C6B9 02                         byte_AC99:	dc.b 2
0000C6BA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C6BF F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000C6C4                            		even
0000C6C4                            		even
0000C6C4                            
0000C6C4                            ; ===========================================================================
0000C6C4                            ; ---------------------------------------------------------------------------
0000C6C4                            ; Object 2D - Burrobot enemy (LZ)
0000C6C4                            ; ---------------------------------------------------------------------------
0000C6C4                            
0000C6C4                            Obj2D:					; XREF: Obj_Index
0000C6C4 7000                       		moveq	#0,d0
0000C6C6 1028 0024                  		move.b	$24(a0),d0
0000C6CA 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C6CE 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C6D2                            ; ===========================================================================
0000C6D2 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C6D4 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C6D6                            ; ===========================================================================
0000C6D6                            
0000C6D6                            Obj2D_Main:				; XREF: Obj2D_Index
0000C6D6 5428 0024                  		addq.b	#2,$24(a0)
0000C6DA 117C 0013 0016             		move.b	#$13,$16(a0)
0000C6E0 117C 0008 0017             		move.b	#8,$17(a0)
0000C6E6 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C6EE 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C6F4 0028 0004 0001             		ori.b	#4,1(a0)
0000C6FA 117C 0004 0018             		move.b	#4,$18(a0)
0000C700 117C 0005 0020             		move.b	#5,$20(a0)
0000C706 117C 000C 0019             		move.b	#$C,$19(a0)
0000C70C 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C710 117C 0002 001C             		move.b	#2,$1C(a0)
0000C716                            
0000C716                            Obj2D_Action:				; XREF: Obj2D_Index
0000C716 7000                       		moveq	#0,d0
0000C718 1028 0025                  		move.b	$25(a0),d0
0000C71C 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C720 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C724 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C72A 6100 FA0C                  		bsr.w	AnimateSprite
0000C72E 6000 0000                  		bra.w	MarkObjGone
0000C732                            ; ===========================================================================
0000C732 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C734 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C736 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C738 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C73A                            ; ===========================================================================
0000C73A                            
0000C73A                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C73A 5368 0030                  		subq.w	#1,$30(a0)
0000C73E 6A00                       		bpl.s	locret_AD42
0000C740 5428 0025                  		addq.b	#2,$25(a0)
0000C744 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C74A 317C 0080 0010             		move.w	#$80,$10(a0)
0000C750 117C 0001 001C             		move.b	#1,$1C(a0)
0000C756 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C75C 6700                       		beq.s	locret_AD42
0000C75E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C762                            
0000C762                            locret_AD42:
0000C762 4E75                       		rts	
0000C764                            ; ===========================================================================
0000C764                            
0000C764                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C764 5368 0030                  		subq.w	#1,$30(a0)
0000C768 6B00                       		bmi.s	loc_AD84
0000C76A 6100 0000                  		bsr.w	SpeedToPos
0000C76E 0868 0000 0032             		bchg	#0,$32(a0)
0000C774 6600                       		bne.s	loc_AD78
0000C776 3628 0008                  		move.w	8(a0),d3
0000C77A 0643 000C                  		addi.w	#$C,d3
0000C77E 0828 0000 0022             		btst	#0,$22(a0)
0000C784 6600                       		bne.s	loc_AD6A
0000C786 0443 0018                  		subi.w	#$18,d3
0000C78A                            
0000C78A                            loc_AD6A:
0000C78A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C790 0C41 000C                  		cmpi.w	#$C,d1
0000C794 6C00                       		bge.s	loc_AD84
0000C796 4E75                       		rts	
0000C798                            ; ===========================================================================
0000C798                            
0000C798                            loc_AD78:				; XREF: Obj2D_Move
0000C798 4EB9 0000 0000             		jsr	ObjHitFloor
0000C79E D368 000C                  		add.w	d1,$C(a0)
0000C7A2 4E75                       		rts	
0000C7A4                            ; ===========================================================================
0000C7A4                            
0000C7A4                            loc_AD84:				; XREF: Obj2D_Move
0000C7A4 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C7AA 6700                       		beq.s	loc_ADA4
0000C7AC 5528 0025                  		subq.b	#2,$25(a0)
0000C7B0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C7B6 317C 0000 0010             		move.w	#0,$10(a0)
0000C7BC 117C 0000 001C             		move.b	#0,$1C(a0)
0000C7C2 4E75                       		rts	
0000C7C4                            ; ===========================================================================
0000C7C4                            
0000C7C4                            loc_ADA4:
0000C7C4 5428 0025                  		addq.b	#2,$25(a0)
0000C7C8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C7CE 117C 0002 001C             		move.b	#2,$1C(a0)
0000C7D4 4E75                       		rts	
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C7D6 6100 0000                  		bsr.w	SpeedToPos
0000C7DA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7E0 6B00                       		bmi.s	locret_ADF0
0000C7E2 117C 0003 001C             		move.b	#3,$1C(a0)
0000C7E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7EE 4A41                       		tst.w	d1
0000C7F0 6A00                       		bpl.s	locret_ADF0
0000C7F2 D368 000C                  		add.w	d1,$C(a0)
0000C7F6 317C 0000 0012             		move.w	#0,$12(a0)
0000C7FC 117C 0001 001C             		move.b	#1,$1C(a0)
0000C802 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C808 5528 0025                  		subq.b	#2,$25(a0)
0000C80C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C810                            
0000C810                            locret_ADF0:
0000C810 4E75                       		rts	
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C812 343C 0060                  		move.w	#$60,d2
0000C816 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C81A 6400                       		bcc.s	locret_AE20
0000C81C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C820 9068 000C                  		sub.w	$C(a0),d0
0000C824 6400                       		bcc.s	locret_AE20
0000C826 0C40 FF80                  		cmpi.w	#-$80,d0
0000C82A 6500                       		bcs.s	locret_AE20
0000C82C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C830 6600                       		bne.s	locret_AE20
0000C832 5528 0025                  		subq.b	#2,$25(a0)
0000C836 3141 0010                  		move.w	d1,$10(a0)
0000C83A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C840                            
0000C840                            locret_AE20:
0000C840 4E75                       		rts	
0000C842                            
0000C842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C842                            
0000C842                            
0000C842                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C842 323C 0080                  		move.w	#$80,d1
0000C846 08E8 0000 0022             		bset	#0,$22(a0)
0000C84C 3038 D008                  		move.w	($FFFFD008).w,d0
0000C850 9068 0008                  		sub.w	8(a0),d0
0000C854 6400                       		bcc.s	loc_AE40
0000C856 4440                       		neg.w	d0
0000C858 4441                       		neg.w	d1
0000C85A 08A8 0000 0022             		bclr	#0,$22(a0)
0000C860                            
0000C860                            loc_AE40:
0000C860 B042                       		cmp.w	d2,d0
0000C862 4E75                       		rts	
0000C864                            ; End of function Obj2D_ChkSonic2
0000C864                            
0000C864                            ; ===========================================================================
0000C864                            Ani_obj2D:
0000C864                            	include "_anim\obj2D.asm"
0000C864                            ; ---------------------------------------------------------------------------
0000C864                            ; Animation script - Burrobot enemy
0000C864                            ; ---------------------------------------------------------------------------
0000C864 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C866 0000                       		dc.w byte_AE50-Ani_obj2D
0000C868 0000                       		dc.w byte_AE54-Ani_obj2D
0000C86A 0000                       		dc.w byte_AE58-Ani_obj2D
0000C86C 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C870 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C874 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C878 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C87C 00                         		even
0000C87C 00                         		even
0000C87C                            
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C                            ; Sprite mappings - Burrobot enemy (LZ)
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C                            Map_obj2D:
0000C87C                            	include "_maps\obj2D.asm"
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C                            ; Sprite mappings - Burrobot enemy (LZ)
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C 0000                       		dc.w byte_AE6A-Map_obj2D
0000C87E 0000                       		dc.w byte_AE75-Map_obj2D
0000C880 0000                       		dc.w byte_AE80-Map_obj2D
0000C882 0000                       		dc.w byte_AE8B-Map_obj2D
0000C884 0000                       		dc.w byte_AE96-Map_obj2D
0000C886 0000                       		dc.w byte_AEA1-Map_obj2D
0000C888 0000                       		dc.w byte_AEAC-Map_obj2D
0000C88A 02                         byte_AE6A:	dc.b 2
0000C88B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000C890 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C895 02                         byte_AE75:	dc.b 2
0000C896 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C89B 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000C8A0 02                         byte_AE80:	dc.b 2
0000C8A1 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000C8A6 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000C8AB 02                         byte_AE8B:	dc.b 2
0000C8AC E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000C8B1 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000C8B6 02                         byte_AE96:	dc.b 2
0000C8B7 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000C8BC 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000C8C1 02                         byte_AEA1:	dc.b 2
0000C8C2 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000C8C7 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000C8CC 02                         byte_AEAC:	dc.b 2
0000C8CD EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C8D2 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C8D8 00                         		even
0000C8D8 00                         		even
0000C8D8                            
0000C8D8                            ; ===========================================================================
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            ; Object 2F - large moving platforms (MZ)
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            
0000C8D8                            Obj2F:					; XREF: Obj_Index
0000C8D8 7000                       		moveq	#0,d0
0000C8DA 1028 0024                  		move.b	$24(a0),d0
0000C8DE 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C8E2 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C8E6                            ; ===========================================================================
0000C8E6 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C8E8 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C8EA                            
0000C8EA 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C8EC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C8EE 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C8F0 0140                       		dc.b 1,	$40
0000C8F2 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C8F4 0220                       		dc.b 2,	$20
0000C8F6                            ; ===========================================================================
0000C8F6                            
0000C8F6                            Obj2F_Main:				; XREF: Obj2F_Index
0000C8F6 5428 0024                  		addq.b	#2,$24(a0)
0000C8FA 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C902 317C C000 0002             		move.w	#$C000,2(a0)
0000C908 117C 0004 0001             		move.b	#4,1(a0)
0000C90E 117C 0005 0018             		move.b	#5,$18(a0)
0000C914 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C91A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C920 7000                       		moveq	#0,d0
0000C922 1028 0028                  		move.b	$28(a0),d0
0000C926 E448                       		lsr.w	#2,d0
0000C928 0240 001C                  		andi.w	#$1C,d0
0000C92C 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C930 3019                       		move.w	(a1)+,d0
0000C932 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C936 214A 0030                  		move.l	a2,$30(a0)
0000C93A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C93E 1151 0019                  		move.b	(a1),$19(a0)
0000C942 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C948 117C 0040 0016             		move.b	#$40,$16(a0)
0000C94E 08E8 0004 0001             		bset	#4,1(a0)
0000C954                            
0000C954                            Obj2F_Action:				; XREF: Obj2F_Index
0000C954 6100 0000                  		bsr.w	Obj2F_Types
0000C958 4A28 0025                  		tst.b	$25(a0)
0000C95C 6700                       		beq.s	Obj2F_Solid
0000C95E 7200                       		moveq	#0,d1
0000C960 1228 0019                  		move.b	$19(a0),d1
0000C964 0641 000B                  		addi.w	#$B,d1
0000C968 6100 C64C                  		bsr.w	ExitPlatform
0000C96C 0829 0003 0022             		btst	#3,$22(a1)
0000C972 6600 0000                  		bne.w	Obj2F_Slope
0000C976 4228 0025                  		clr.b	$25(a0)
0000C97A 6000                       		bra.s	Obj2F_Display
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C97C 7200                       		moveq	#0,d1
0000C97E 1228 0019                  		move.b	$19(a0),d1
0000C982 0641 000B                  		addi.w	#$B,d1
0000C986 2468 0030                  		movea.l	$30(a0),a2
0000C98A 3428 0008                  		move.w	8(a0),d2
0000C98E 6100 D584                  		bsr.w	SlopeObject2
0000C992 6000                       		bra.s	Obj2F_Display
0000C994                            ; ===========================================================================
0000C994                            
0000C994                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C994 7200                       		moveq	#0,d1
0000C996 1228 0019                  		move.b	$19(a0),d1
0000C99A 0641 000B                  		addi.w	#$B,d1
0000C99E 343C 0020                  		move.w	#$20,d2
0000C9A2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C9A8 6600                       		bne.s	loc_AF8E
0000C9AA 343C 0030                  		move.w	#$30,d2
0000C9AE                            
0000C9AE                            loc_AF8E:
0000C9AE 2468 0030                  		movea.l	$30(a0),a2
0000C9B2 6100 0000                  		bsr.w	SolidObject2F
0000C9B6                            
0000C9B6                            Obj2F_Display:				; XREF: Obj2F_Action
0000C9B6 6100 0000                  		bsr.w	DisplaySprite
0000C9BA 6000 0000                  		bra.w	Obj2F_ChkDel
0000C9BE                            
0000C9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C9BE                            
0000C9BE                            
0000C9BE                            Obj2F_Types:				; XREF: Obj2F_Action
0000C9BE 7000                       		moveq	#0,d0
0000C9C0 1028 0028                  		move.b	$28(a0),d0
0000C9C4 0240 0007                  		andi.w	#7,d0
0000C9C8 D040                       		add.w	d0,d0
0000C9CA 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C9CE 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C9D2                            ; End of function Obj2F_Types
0000C9D2                            
0000C9D2                            ; ===========================================================================
0000C9D2 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C9D4 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C9D6 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C9D8 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C9DA 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C9DC 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C9DE                            ; ===========================================================================
0000C9DE                            
0000C9DE                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C9DE 4E75                       		rts			; type 00 platform doesn't move
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C9E0 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C9E4 323C 0020                  		move.w	#$20,d1
0000C9E8 6000                       		bra.s	Obj2F_Move
0000C9EA                            ; ===========================================================================
0000C9EA                            
0000C9EA                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C9EA 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C9EE 323C 0030                  		move.w	#$30,d1
0000C9F2 6000                       		bra.s	Obj2F_Move
0000C9F4                            ; ===========================================================================
0000C9F4                            
0000C9F4                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C9F4 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C9F8 323C 0040                  		move.w	#$40,d1
0000C9FC 6000                       		bra.s	Obj2F_Move
0000C9FE                            ; ===========================================================================
0000C9FE                            
0000C9FE                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C9FE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000CA02 323C 0060                  		move.w	#$60,d1
0000CA06                            
0000CA06                            Obj2F_Move:
0000CA06 0828 0003 0028             		btst	#3,$28(a0)
0000CA0C 6700                       		beq.s	loc_AFF2
0000CA0E 4440                       		neg.w	d0
0000CA10 D041                       		add.w	d1,d0
0000CA12                            
0000CA12                            loc_AFF2:
0000CA12 3228 002C                  		move.w	$2C(a0),d1
0000CA16 9240                       		sub.w	d0,d1
0000CA18 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000CA1C 4E75                       		rts	
0000CA1E                            ; ===========================================================================
0000CA1E                            
0000CA1E                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000CA1E 1028 0034                  		move.b	$34(a0),d0
0000CA22 4A28 0025                  		tst.b	$25(a0)
0000CA26 6600                       		bne.s	loc_B010
0000CA28 5500                       		subq.b	#2,d0
0000CA2A 6400                       		bcc.s	loc_B01C
0000CA2C 7000                       		moveq	#0,d0
0000CA2E 6000                       		bra.s	loc_B01C
0000CA30                            ; ===========================================================================
0000CA30                            
0000CA30                            loc_B010:
0000CA30 5800                       		addq.b	#4,d0
0000CA32 0C00 0040                  		cmpi.b	#$40,d0
0000CA36 6500                       		bcs.s	loc_B01C
0000CA38 103C 0040                  		move.b	#$40,d0
0000CA3C                            
0000CA3C                            loc_B01C:
0000CA3C 1140 0034                  		move.b	d0,$34(a0)
0000CA40 4EB9 0000 2B7A             		jsr	(CalcSine).l
0000CA46 E848                       		lsr.w	#4,d0
0000CA48 3200                       		move.w	d0,d1
0000CA4A D068 002C                  		add.w	$2C(a0),d0
0000CA4E 3140 000C                  		move.w	d0,$C(a0)
0000CA52 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CA58 6600                       		bne.s	loc_B07A
0000CA5A 4A28 0035                  		tst.b	$35(a0)
0000CA5E 6600                       		bne.s	loc_B07A
0000CA60 117C 0001 0035             		move.b	#1,$35(a0)
0000CA66 6100 0000                  		bsr.w	SingleObjLoad2
0000CA6A 6600                       		bne.s	loc_B07A
0000CA6C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000CA70 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA76 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000CA7C 5069 002C                  		addq.w	#8,$2C(a1)
0000CA80 5769 002C                  		subq.w	#3,$2C(a1)
0000CA84 0469 0040 0008             		subi.w	#$40,8(a1)
0000CA8A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CA90 2348 0038                  		move.l	a0,$38(a1)
0000CA94 2448                       		movea.l	a0,a2
0000CA96 6100                       		bsr.s	sub_B09C
0000CA98                            
0000CA98                            loc_B07A:
0000CA98 7400                       		moveq	#0,d2
0000CA9A 45E8 0036                  		lea	$36(a0),a2
0000CA9E 141A                       		move.b	(a2)+,d2
0000CAA0 5302                       		subq.b	#1,d2
0000CAA2 6500                       		bcs.s	locret_B09A
0000CAA4                            
0000CAA4                            loc_B086:
0000CAA4 7000                       		moveq	#0,d0
0000CAA6 101A                       		move.b	(a2)+,d0
0000CAA8 ED48                       		lsl.w	#6,d0
0000CAAA 0640 D000                  		addi.w	#-$3000,d0
0000CAAE 3240                       		movea.w	d0,a1
0000CAB0 3341 003C                  		move.w	d1,$3C(a1)
0000CAB4 51CA FFEE                  		dbf	d2,loc_B086
0000CAB8                            
0000CAB8                            locret_B09A:
0000CAB8 4E75                       		rts	
0000CABA                            
0000CABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CABA                            
0000CABA                            
0000CABA                            sub_B09C:
0000CABA 45EA 0036                  		lea	$36(a2),a2
0000CABE 7000                       		moveq	#0,d0
0000CAC0 1012                       		move.b	(a2),d0
0000CAC2 5212                       		addq.b	#1,(a2)
0000CAC4 45F2 0001                  		lea	1(a2,d0.w),a2
0000CAC8 3009                       		move.w	a1,d0
0000CACA 0440 D000                  		subi.w	#-$3000,d0
0000CACE EC48                       		lsr.w	#6,d0
0000CAD0 0240 007F                  		andi.w	#$7F,d0
0000CAD4 1480                       		move.b	d0,(a2)
0000CAD6 4E75                       		rts	
0000CAD8                            ; End of function sub_B09C
0000CAD8                            
0000CAD8                            ; ===========================================================================
0000CAD8                            
0000CAD8                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000CAD8 4A28 0035                  		tst.b	$35(a0)
0000CADC 6700                       		beq.s	loc_B0C6
0000CADE 4A28 0001                  		tst.b	1(a0)
0000CAE2 6A00                       		bpl.s	Obj2F_DelFlames
0000CAE4                            
0000CAE4                            loc_B0C6:
0000CAE4 3028 002A                  		move.w	$2A(a0),d0
0000CAE8 0240 FF80                  		andi.w	#$FF80,d0
0000CAEC 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAF0 0441 0080                  		subi.w	#$80,d1
0000CAF4 0241 FF80                  		andi.w	#$FF80,d1
0000CAF8 9041                       		sub.w	d1,d0
0000CAFA 0C40 0280                  		cmpi.w	#$280,d0
0000CAFE 6200 0000                  		bhi.w	DeleteObject
0000CB02 4E75                       		rts	
0000CB04                            ; ===========================================================================
0000CB04                            
0000CB04                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000CB04 7400                       		moveq	#0,d2
0000CB06                            
0000CB06                            loc_B0E8:
0000CB06 45E8 0036                  		lea	$36(a0),a2
0000CB0A 1412                       		move.b	(a2),d2
0000CB0C 421A                       		clr.b	(a2)+
0000CB0E 5302                       		subq.b	#1,d2
0000CB10 6500                       		bcs.s	locret_B116
0000CB12                            
0000CB12                            loc_B0F4:
0000CB12 7000                       		moveq	#0,d0
0000CB14 1012                       		move.b	(a2),d0
0000CB16 421A                       		clr.b	(a2)+
0000CB18 ED48                       		lsl.w	#6,d0
0000CB1A 0640 D000                  		addi.w	#-$3000,d0
0000CB1E 3240                       		movea.w	d0,a1
0000CB20 6100 0000                  		bsr.w	DeleteObject2
0000CB24 51CA FFEC                  		dbf	d2,loc_B0F4
0000CB28 117C 0000 0035             		move.b	#0,$35(a0)
0000CB2E 117C 0000 0034             		move.b	#0,$34(a0)
0000CB34                            
0000CB34                            locret_B116:
0000CB34 4E75                       		rts	
0000CB36                            ; ===========================================================================
0000CB36                            ; ---------------------------------------------------------------------------
0000CB36                            ; Collision data for large moving platforms (MZ)
0000CB36                            ; ---------------------------------------------------------------------------
0000CB36                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000CB82                            		even
0000CB82                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000CBAE                            		even
0000CBAE                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000CBFA                            		even
0000CBFA                            ; ===========================================================================
0000CBFA                            ; ---------------------------------------------------------------------------
0000CBFA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CBFA                            ; (appears when	you walk on sinking platforms)
0000CBFA                            ; ---------------------------------------------------------------------------
0000CBFA                            
0000CBFA                            Obj35:					; XREF: Obj_Index
0000CBFA 7000                       		moveq	#0,d0
0000CBFC 1028 0024                  		move.b	$24(a0),d0
0000CC00 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000CC04 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000CC08                            ; ===========================================================================
0000CC08 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000CC0A 0000                       		dc.w loc_B238-Obj35_Index
0000CC0C 0000                       		dc.w Obj35_Move-Obj35_Index
0000CC0E                            ; ===========================================================================
0000CC0E                            
0000CC0E                            Obj35_Main:				; XREF: Obj35_Index
0000CC0E 5428 0024                  		addq.b	#2,$24(a0)
0000CC12 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000CC1A 317C 0345 0002             		move.w	#$345,2(a0)
0000CC20 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000CC26 117C 0004 0001             		move.b	#4,1(a0)
0000CC2C 117C 0001 0018             		move.b	#1,$18(a0)
0000CC32 117C 008B 0020             		move.b	#$8B,$20(a0)
0000CC38 117C 0008 0019             		move.b	#8,$19(a0)
0000CC3E 303C 00C8                  		move.w	#$C8,d0
0000CC42 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
0000CC48 4A28 0028                  		tst.b	$28(a0)
0000CC4C 6700                       		beq.s	loc_B238
0000CC4E 5428 0024                  		addq.b	#2,$24(a0)
0000CC52 6000 0000                  		bra.w	Obj35_Move
0000CC56                            ; ===========================================================================
0000CC56                            
0000CC56                            loc_B238:				; XREF: Obj35_Index
0000CC56 2268 0030                  		movea.l	$30(a0),a1
0000CC5A 3228 0008                  		move.w	8(a0),d1
0000CC5E 9268 002A                  		sub.w	$2A(a0),d1
0000CC62 0641 000C                  		addi.w	#$C,d1
0000CC66 3001                       		move.w	d1,d0
0000CC68 E248                       		lsr.w	#1,d0
0000CC6A 1031 0000                  		move.b	(a1,d0.w),d0
0000CC6E 4440                       		neg.w	d0
0000CC70 D068 002C                  		add.w	$2C(a0),d0
0000CC74 3400                       		move.w	d0,d2
0000CC76 D068 003C                  		add.w	$3C(a0),d0
0000CC7A 3140 000C                  		move.w	d0,$C(a0)
0000CC7E 0C41 0084                  		cmpi.w	#$84,d1
0000CC82 6400                       		bcc.s	loc_B2B0
0000CC84 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CC8C 0C41 0080                  		cmpi.w	#$80,d1
0000CC90 6400                       		bcc.s	loc_B2B0
0000CC92 2028 0008                  		move.l	8(a0),d0
0000CC96 0680 0008 0000             		addi.l	#$80000,d0
0000CC9C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000CCA2 6600                       		bne.s	loc_B2B0
0000CCA4 6100 0000                  		bsr.w	SingleObjLoad2
0000CCA8 6600                       		bne.s	loc_B2B0
0000CCAA 12BC 0035                  		move.b	#$35,0(a1)
0000CCAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCB4 3342 002C                  		move.w	d2,$2C(a1)
0000CCB8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000CCBE 137C 0001 0028             		move.b	#1,$28(a1)
0000CCC4 2468 0038                  		movea.l	$38(a0),a2
0000CCC8 6100 FDF0                  		bsr.w	sub_B09C
0000CCCC                            
0000CCCC                            loc_B2B0:
0000CCCC 6000                       		bra.s	Obj35_Animate
0000CCCE                            ; ===========================================================================
0000CCCE                            
0000CCCE                            Obj35_Move:				; XREF: Obj35_Index
0000CCCE 3028 002C                  		move.w	$2C(a0),d0
0000CCD2 D068 003C                  		add.w	$3C(a0),d0
0000CCD6 3140 000C                  		move.w	d0,$C(a0)
0000CCDA                            
0000CCDA                            Obj35_Animate:				; XREF: loc_B238
0000CCDA 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000CCE0 6100 F456                  		bsr.w	AnimateSprite
0000CCE4 6000 0000                  		bra.w	DisplaySprite
0000CCE8                            ; ===========================================================================
0000CCE8                            Ani_obj35:
0000CCE8                            	include "_anim\obj35.asm"
0000CCE8                            ; ---------------------------------------------------------------------------
0000CCE8                            ; Animation script - fireball that sits on the	floor (MZ)
0000CCE8                            ; ---------------------------------------------------------------------------
0000CCE8 0000                       		dc.w byte_B2CE-Ani_obj35
0000CCEA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000CCF0                            		even
0000CCF0                            		even
0000CCF0                            
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            ; Sprite mappings - large moving platforms (MZ)
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            Map_obj2F:
0000CCF0                            	include "_maps\obj2F.asm"
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            ; Sprite mappings - large moving platforms (MZ)
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0 0000                       		dc.w byte_B2DA-Map_obj2F
0000CCF2 0000                       		dc.w byte_B31C-Map_obj2F
0000CCF4 0000                       		dc.w byte_B34F-Map_obj2F
0000CCF6 0D                         byte_B2DA:	dc.b $D
0000CCF7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000CCFC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000CD01 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD06 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000CD0B F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000CD10 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD15 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000CD1A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000CD1F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000CD24 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD29 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000CD2E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000CD33 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000CD38 0A                         byte_B31C:	dc.b $A
0000CD39 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000CD3E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000CD43 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD48 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000CD4D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000CD52 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD57 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000CD5C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000CD61 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000CD66 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000CD6B 06                         byte_B34F:	dc.b 6
0000CD6C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000CD71 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD76 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000CD7B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000CD80 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD85 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000CD8A                            		even
0000CD8A                            		even
0000CD8A                            
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A                            Map_obj14:
0000CD8A                            	include "_maps\obj14.asm"
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A 0000                       		dc.w byte_B37A-Map_obj14
0000CD8C 0000                       		dc.w byte_B380-Map_obj14
0000CD8E 0000                       		dc.w byte_B386-Map_obj14
0000CD90 0000                       		dc.w byte_B38C-Map_obj14
0000CD92 0000                       		dc.w byte_B392-Map_obj14
0000CD94 0000                       		dc.w byte_B398-Map_obj14
0000CD96 01                         byte_B37A:	dc.b 1
0000CD97 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000CD9C 01                         byte_B380:	dc.b 1
0000CD9D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000CDA2 01                         byte_B386:	dc.b 1
0000CDA3 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000CDA8 01                         byte_B38C:	dc.b 1
0000CDA9 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000CDAE 01                         byte_B392:	dc.b 1
0000CDAF F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000CDB4 01                         byte_B398:	dc.b 1
0000CDB5 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000CDBA                            		even
0000CDBA                            		even
0000CDBA                            
0000CDBA                            ; ===========================================================================
0000CDBA                            ; ---------------------------------------------------------------------------
0000CDBA                            ; Object 30 - large green glassy blocks	(MZ)
0000CDBA                            ; ---------------------------------------------------------------------------
0000CDBA                            
0000CDBA                            Obj30:					; XREF: Obj_Index
0000CDBA 7000                       		moveq	#0,d0
0000CDBC 1028 0024                  		move.b	$24(a0),d0
0000CDC0 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000CDC4 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000CDC8 3028 0008                  		move.w	8(a0),d0
0000CDCC 0240 FF80                  		andi.w	#$FF80,d0
0000CDD0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CDD4 0441 0080                  		subi.w	#$80,d1
0000CDD8 0241 FF80                  		andi.w	#$FF80,d1
0000CDDC 9041                       		sub.w	d1,d0
0000CDDE 0C40 0280                  		cmpi.w	#$280,d0
0000CDE2 6200 0000                  		bhi.w	Obj30_Delete
0000CDE6 6000 0000                  		bra.w	DisplaySprite
0000CDEA                            ; ===========================================================================
0000CDEA                            
0000CDEA                            Obj30_Delete:
0000CDEA 6000 0000                  		bra.w	DeleteObject
0000CDEE                            ; ===========================================================================
0000CDEE 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000CDF0 0000                       		dc.w Obj30_Block012-Obj30_Index
0000CDF2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000CDF4 0000                       		dc.w Obj30_Block34-Obj30_Index
0000CDF6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000CDF8                            
0000CDF8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000CDFB 0400 01                    		dc.b 4,	0, 1
0000CDFE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000CE01 0800 01                    		dc.b 8,	0, 1
0000CE04                            ; ===========================================================================
0000CE04                            
0000CE04                            Obj30_Main:				; XREF: Obj30_Index
0000CE04 45F9 0000 CDF8             		lea	(Obj30_Vars1).l,a2
0000CE0A 7201                       		moveq	#1,d1
0000CE0C 117C 0048 0016             		move.b	#$48,$16(a0)
0000CE12 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000CE18 6500                       		bcs.s	loc_B40C	; if yes, branch
0000CE1A 45F9 0000 CDFE             		lea	(Obj30_Vars2).l,a2
0000CE20 7201                       		moveq	#1,d1
0000CE22 117C 0038 0016             		move.b	#$38,$16(a0)
0000CE28                            
0000CE28                            loc_B40C:
0000CE28 2248                       		movea.l	a0,a1
0000CE2A 6000                       		bra.s	Obj30_Load	; load main object
0000CE2C                            ; ===========================================================================
0000CE2C                            
0000CE2C                            Obj30_Loop:
0000CE2C 6100 0000                  		bsr.w	SingleObjLoad2
0000CE30 6600                       		bne.s	loc_B480
0000CE32                            
0000CE32                            Obj30_Load:				; XREF: Obj30_Main
0000CE32 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE36 12BC 0030                  		move.b	#$30,0(a1)
0000CE3A 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE40 101A                       		move.b	(a2)+,d0
0000CE42 4880                       		ext.w	d0
0000CE44 D068 000C                  		add.w	$C(a0),d0
0000CE48 3340 000C                  		move.w	d0,$C(a1)
0000CE4C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000CE54 337C C38E 0002             		move.w	#$C38E,2(a1)
0000CE5A 137C 0004 0001             		move.b	#4,1(a1)
0000CE60 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CE66 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CE6C 137C 0020 0019             		move.b	#$20,$19(a1)
0000CE72 137C 0004 0018             		move.b	#4,$18(a1)
0000CE78 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CE7C 2348 003C                  		move.l	a0,$3C(a1)
0000CE80 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000CE84                            
0000CE84 137C 0010 0019             		move.b	#$10,$19(a1)
0000CE8A 137C 0003 0018             		move.b	#3,$18(a1)
0000CE90 5029 0028                  		addq.b	#8,$28(a1)
0000CE94 0229 000F 0028             		andi.b	#$F,$28(a1)
0000CE9A                            
0000CE9A                            loc_B480:
0000CE9A 317C 0090 0032             		move.w	#$90,$32(a0)
0000CEA0 08E8 0004 0001             		bset	#4,1(a0)
0000CEA6                            
0000CEA6                            Obj30_Block012:				; XREF: Obj30_Index
0000CEA6 6100 0000                  		bsr.w	Obj30_Types
0000CEAA 323C 002B                  		move.w	#$2B,d1
0000CEAE 343C 0048                  		move.w	#$48,d2
0000CEB2 363C 0049                  		move.w	#$49,d3
0000CEB6 3828 0008                  		move.w	8(a0),d4
0000CEBA 6000 0000                  		bra.w	SolidObject
0000CEBE                            ; ===========================================================================
0000CEBE                            
0000CEBE                            Obj30_Reflect012:			; XREF: Obj30_Index
0000CEBE 2268 003C                  		movea.l	$3C(a0),a1
0000CEC2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEC8 6000 0000                  		bra.w	Obj30_Types
0000CECC                            ; ===========================================================================
0000CECC                            
0000CECC                            Obj30_Block34:				; XREF: Obj30_Index
0000CECC 6100 0000                  		bsr.w	Obj30_Types
0000CED0 323C 002B                  		move.w	#$2B,d1
0000CED4 343C 0038                  		move.w	#$38,d2
0000CED8 363C 0039                  		move.w	#$39,d3
0000CEDC 3828 0008                  		move.w	8(a0),d4
0000CEE0 6000 0000                  		bra.w	SolidObject
0000CEE4                            ; ===========================================================================
0000CEE4                            
0000CEE4                            Obj30_Reflect34:			; XREF: Obj30_Index
0000CEE4 2268 003C                  		movea.l	$3C(a0),a1
0000CEE8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEEE 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000CEF4 6000 0002                  		bra.w	*+4
0000CEF8                            
0000CEF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEF8                            
0000CEF8                            
0000CEF8                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000CEF8 7000                       		moveq	#0,d0
0000CEFA 1028 0028                  		move.b	$28(a0),d0
0000CEFE 0240 0007                  		andi.w	#7,d0
0000CF02 D040                       		add.w	d0,d0
0000CF04 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000CF08 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000CF0C                            ; End of function Obj30_Types
0000CF0C                            
0000CF0C                            ; ===========================================================================
0000CF0C 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000CF0E 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000CF10 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000CF12 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000CF14 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000CF16                            ; ===========================================================================
0000CF16                            
0000CF16                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000CF16 4E75                       		rts	
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000CF18 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF1C 323C 0040                  		move.w	#$40,d1
0000CF20 6000                       		bra.s	loc_B514
0000CF22                            ; ===========================================================================
0000CF22                            
0000CF22                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000CF22 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF26 323C 0040                  		move.w	#$40,d1
0000CF2A 4440                       		neg.w	d0
0000CF2C D041                       		add.w	d1,d0
0000CF2E                            
0000CF2E                            loc_B514:				; XREF: Obj30_Type01
0000CF2E 0828 0003 0028             		btst	#3,$28(a0)
0000CF34 6700                       		beq.s	loc_B526
0000CF36 4440                       		neg.w	d0
0000CF38 D041                       		add.w	d1,d0
0000CF3A E208                       		lsr.b	#1,d0
0000CF3C 0640 0020                  		addi.w	#$20,d0
0000CF40                            
0000CF40                            loc_B526:
0000CF40 6000 0000                  		bra.w	loc_B5EE
0000CF44                            ; ===========================================================================
0000CF44                            
0000CF44                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000CF44 0828 0003 0028             		btst	#3,$28(a0)
0000CF4A 6700                       		beq.s	loc_B53E
0000CF4C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF50 0440 0010                  		subi.w	#$10,d0
0000CF54 6000 0000                  		bra.w	loc_B5EE
0000CF58                            ; ===========================================================================
0000CF58                            
0000CF58                            loc_B53E:
0000CF58 0828 0003 0022             		btst	#3,$22(a0)
0000CF5E 6600                       		bne.s	loc_B54E
0000CF60 08A8 0000 0034             		bclr	#0,$34(a0)
0000CF66 6000                       		bra.s	loc_B582
0000CF68                            ; ===========================================================================
0000CF68                            
0000CF68                            loc_B54E:
0000CF68 4A28 0034                  		tst.b	$34(a0)
0000CF6C 6600                       		bne.s	loc_B582
0000CF6E 117C 0001 0034             		move.b	#1,$34(a0)
0000CF74 08E8 0000 0035             		bset	#0,$35(a0)
0000CF7A 6700                       		beq.s	loc_B582
0000CF7C 08E8 0007 0034             		bset	#7,$34(a0)
0000CF82 317C 0010 0036             		move.w	#$10,$36(a0)
0000CF88 117C 000A 0038             		move.b	#$A,$38(a0)
0000CF8E 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000CF94 6600                       		bne.s	loc_B582
0000CF96 317C 0040 0036             		move.w	#$40,$36(a0)
0000CF9C                            
0000CF9C                            loc_B582:
0000CF9C 4A28 0034                  		tst.b	$34(a0)
0000CFA0 6A00                       		bpl.s	loc_B5AA
0000CFA2 4A28 0038                  		tst.b	$38(a0)
0000CFA6 6700                       		beq.s	loc_B594
0000CFA8 5328 0038                  		subq.b	#1,$38(a0)
0000CFAC 6600                       		bne.s	loc_B5AA
0000CFAE                            
0000CFAE                            loc_B594:
0000CFAE 4A68 0032                  		tst.w	$32(a0)
0000CFB2 6700                       		beq.s	loc_B5A4
0000CFB4 5368 0032                  		subq.w	#1,$32(a0)
0000CFB8 5368 0036                  		subq.w	#1,$36(a0)
0000CFBC 6600                       		bne.s	loc_B5AA
0000CFBE                            
0000CFBE                            loc_B5A4:
0000CFBE 08A8 0007 0034             		bclr	#7,$34(a0)
0000CFC4                            
0000CFC4                            loc_B5AA:
0000CFC4 3028 0032                  		move.w	$32(a0),d0
0000CFC8 6000                       		bra.s	loc_B5EE
0000CFCA                            ; ===========================================================================
0000CFCA                            
0000CFCA                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000CFCA 0828 0003 0028             		btst	#3,$28(a0)
0000CFD0 6700                       		beq.s	Obj30_ChkSwitch
0000CFD2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CFD6 0440 0010                  		subi.w	#$10,d0
0000CFDA 6000                       		bra.s	loc_B5EE
0000CFDC                            ; ===========================================================================
0000CFDC                            
0000CFDC                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000CFDC 4A28 0034                  		tst.b	$34(a0)
0000CFE0 6600                       		bne.s	loc_B5E0
0000CFE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000CFE6 7000                       		moveq	#0,d0
0000CFE8 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000CFEC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000CFEE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000CFF2 6700                       		beq.s	loc_B5EA	; if not, branch
0000CFF4 117C 0001 0034             		move.b	#1,$34(a0)
0000CFFA                            
0000CFFA                            loc_B5E0:
0000CFFA 4A68 0032                  		tst.w	$32(a0)
0000CFFE 6700                       		beq.s	loc_B5EA
0000D000 5568 0032                  		subq.w	#2,$32(a0)
0000D004                            
0000D004                            loc_B5EA:
0000D004 3028 0032                  		move.w	$32(a0),d0
0000D008                            
0000D008                            loc_B5EE:
0000D008 3228 0030                  		move.w	$30(a0),d1
0000D00C 9240                       		sub.w	d0,d1
0000D00E 3141 000C                  		move.w	d1,$C(a0)
0000D012 4E75                       		rts	
0000D014                            ; ===========================================================================
0000D014                            ; ---------------------------------------------------------------------------
0000D014                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D014                            ; ---------------------------------------------------------------------------
0000D014                            Map_obj30:
0000D014                            	include "_maps\obj30.asm"
0000D014                            ; ---------------------------------------------------------------------------
0000D014                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D014                            ; ---------------------------------------------------------------------------
0000D014 0000                       		dc.w byte_B600-Map_obj30
0000D016 0000                       		dc.w byte_B63D-Map_obj30
0000D018 0000                       		dc.w byte_B648-Map_obj30
0000D01A 0C                         byte_B600:	dc.b $C
0000D01B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000D020 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000D025 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000D02A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000D02F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000D034 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000D039 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000D03E 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000D043 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000D048 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000D04D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000D052 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000D057 02                         byte_B63D:	dc.b 2
0000D058 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000D05D 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000D062 0A                         byte_B648:	dc.b $A
0000D063 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000D068 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000D06D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000D072 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000D077 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000D07C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000D081 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000D086 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000D08B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000D090 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000D096 00                         		even
0000D096 00                         		even
0000D096                            
0000D096                            ; ===========================================================================
0000D096                            ; ---------------------------------------------------------------------------
0000D096                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D096                            ; ---------------------------------------------------------------------------
0000D096                            
0000D096                            Obj31:					; XREF: Obj_Index
0000D096 7000                       		moveq	#0,d0
0000D098 1028 0024                  		move.b	$24(a0),d0
0000D09C 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000D0A0 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000D0A4                            ; ===========================================================================
0000D0A4 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000D0A6 0000                       		dc.w loc_B798-Obj31_Index
0000D0A8 0000                       		dc.w loc_B7FE-Obj31_Index
0000D0AA 0000                       		dc.w Obj31_Display2-Obj31_Index
0000D0AC 0000                       		dc.w loc_B7E2-Obj31_Index
0000D0AE                            
0000D0AE 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D0B0 0100                       		dc.b 1,	0
0000D0B2                            
0000D0B2 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000D0B5 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000D0B8 08CC 03                    		dc.b 8,	$CC, 3
0000D0BB 06F0 02                    		dc.b 6,	$F0, 2
0000D0BE                            
0000D0BE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D0C2 5000 7800                  		dc.w $5000, $7800
0000D0C6 3800 5800                  		dc.w $3800, $5800
0000D0CA B800                       		dc.w $B800
0000D0CC                            ; ===========================================================================
0000D0CC                            
0000D0CC                            Obj31_Main:				; XREF: Obj31_Index
0000D0CC 7000                       		moveq	#0,d0
0000D0CE 1028 0028                  		move.b	$28(a0),d0
0000D0D2 6A00                       		bpl.s	loc_B6CE
0000D0D4 0240 007F                  		andi.w	#$7F,d0
0000D0D8 D040                       		add.w	d0,d0
0000D0DA 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000D0DE 115A 003A                  		move.b	(a2)+,$3A(a0)
0000D0E2 101A                       		move.b	(a2)+,d0
0000D0E4 1140 0028                  		move.b	d0,$28(a0)
0000D0E8                            
0000D0E8                            loc_B6CE:
0000D0E8 0200 000F                  		andi.b	#$F,d0
0000D0EC D040                       		add.w	d0,d0
0000D0EE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D0F2 4A40                       		tst.w	d0
0000D0F4 6600                       		bne.s	loc_B6E0
0000D0F6 3142 0032                  		move.w	d2,$32(a0)
0000D0FA                            
0000D0FA                            loc_B6E0:
0000D0FA 45F9 0000 D0B2             		lea	(Obj31_Var).l,a2
0000D100 2248                       		movea.l	a0,a1
0000D102 7203                       		moveq	#3,d1
0000D104 6000                       		bra.s	Obj31_MakeStomper
0000D106                            ; ===========================================================================
0000D106                            
0000D106                            Obj31_Loop:
0000D106 6100 0000                  		bsr.w	SingleObjLoad2
0000D10A 6600 0000                  		bne.w	Obj31_SetSize
0000D10E                            
0000D10E                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000D10E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D112 12BC 0031                  		move.b	#$31,0(a1)
0000D116 3368 0008 0008             		move.w	8(a0),8(a1)
0000D11C 101A                       		move.b	(a2)+,d0
0000D11E 4880                       		ext.w	d0
0000D120 D068 000C                  		add.w	$C(a0),d0
0000D124 3340 000C                  		move.w	d0,$C(a1)
0000D128 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000D130 337C 0300 0002             		move.w	#$300,2(a1)
0000D136 137C 0004 0001             		move.b	#4,1(a1)
0000D13C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000D142 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D148 137C 0010 0019             		move.b	#$10,$19(a1)
0000D14E 3342 0034                  		move.w	d2,$34(a1)
0000D152 137C 0004 0018             		move.b	#4,$18(a1)
0000D158 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D15C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000D162 6600                       		bne.s	loc_B76A
0000D164 5341                       		subq.w	#1,d1
0000D166 1028 0028                  		move.b	$28(a0),d0
0000D16A 0240 00F0                  		andi.w	#$F0,d0
0000D16E 0C40 0020                  		cmpi.w	#$20,d0
0000D172 679A                       		beq.s	Obj31_MakeStomper
0000D174 137C 0038 0019             		move.b	#$38,$19(a1)
0000D17A 137C 0090 0020             		move.b	#$90,$20(a1)
0000D180 5241                       		addq.w	#1,d1
0000D182                            
0000D182                            loc_B76A:
0000D182 2348 003C                  		move.l	a0,$3C(a1)
0000D186 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000D18A                            
0000D18A 137C 0003 0018             		move.b	#3,$18(a1)
0000D190                            
0000D190                            Obj31_SetSize:
0000D190 7000                       		moveq	#0,d0
0000D192 1028 0028                  		move.b	$28(a0),d0
0000D196 E648                       		lsr.w	#3,d0
0000D198 0200 000E                  		andi.b	#$E,d0
0000D19C 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000D1A0 115A 0019                  		move.b	(a2)+,$19(a0)
0000D1A4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D1A8 6000                       		bra.s	loc_B798
0000D1AA                            ; ===========================================================================
0000D1AA 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000D1AC 3009                       		dc.b $30, 9
0000D1AE 100A                       		dc.b $10, $A
0000D1B0                            ; ===========================================================================
0000D1B0                            
0000D1B0                            loc_B798:				; XREF: Obj31_Index
0000D1B0 6100 0000                  		bsr.w	Obj31_Types
0000D1B4 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000D1BA 7200                       		moveq	#0,d1
0000D1BC 1228 0019                  		move.b	$19(a0),d1
0000D1C0 0641 000B                  		addi.w	#$B,d1
0000D1C4 343C 000C                  		move.w	#$C,d2
0000D1C8 363C 000D                  		move.w	#$D,d3
0000D1CC 3828 0008                  		move.w	8(a0),d4
0000D1D0 6100 0000                  		bsr.w	SolidObject
0000D1D4 0828 0003 0022             		btst	#3,$22(a0)
0000D1DA 6700                       		beq.s	Obj31_Display
0000D1DC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D1E2 6400                       		bcc.s	Obj31_Display
0000D1E4 2448                       		movea.l	a0,a2
0000D1E6 41F8 D000                  		lea	($FFFFD000).w,a0
0000D1EA 4EB9 0000 0000             		jsr	KillSonic
0000D1F0 204A                       		movea.l	a2,a0
0000D1F2                            
0000D1F2                            Obj31_Display:
0000D1F2 6100 0000                  		bsr.w	DisplaySprite
0000D1F6 6000 0000                  		bra.w	Obj31_ChkDel
0000D1FA                            ; ===========================================================================
0000D1FA                            
0000D1FA                            loc_B7E2:				; XREF: Obj31_Index
0000D1FA 117C 0080 0016             		move.b	#$80,$16(a0)
0000D200 08E8 0004 0001             		bset	#4,1(a0)
0000D206 2268 003C                  		movea.l	$3C(a0),a1
0000D20A 1029 0032                  		move.b	$32(a1),d0
0000D20E EA08                       		lsr.b	#5,d0
0000D210 5600                       		addq.b	#3,d0
0000D212 1140 001A                  		move.b	d0,$1A(a0)
0000D216                            
0000D216                            loc_B7FE:				; XREF: Obj31_Index
0000D216 2268 003C                  		movea.l	$3C(a0),a1
0000D21A 7000                       		moveq	#0,d0
0000D21C 1029 0032                  		move.b	$32(a1),d0
0000D220 D068 0030                  		add.w	$30(a0),d0
0000D224 3140 000C                  		move.w	d0,$C(a0)
0000D228                            
0000D228                            Obj31_Display2:				; XREF: Obj31_Index
0000D228 6100 0000                  		bsr.w	DisplaySprite
0000D22C                            
0000D22C                            Obj31_ChkDel:				; XREF: Obj31_Display
0000D22C 3028 0008                  		move.w	8(a0),d0
0000D230 0240 FF80                  		andi.w	#$FF80,d0
0000D234 3238 F700                  		move.w	($FFFFF700).w,d1
0000D238 0441 0080                  		subi.w	#$80,d1
0000D23C 0241 FF80                  		andi.w	#$FF80,d1
0000D240 9041                       		sub.w	d1,d0
0000D242 0C40 0280                  		cmpi.w	#$280,d0
0000D246 6200 0000                  		bhi.w	DeleteObject
0000D24A 4E75                       		rts	
0000D24C                            ; ===========================================================================
0000D24C                            
0000D24C                            Obj31_Types:				; XREF: loc_B798
0000D24C 1028 0028                  		move.b	$28(a0),d0
0000D250 0240 000F                  		andi.w	#$F,d0
0000D254 D040                       		add.w	d0,d0
0000D256 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000D25A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000D25E                            ; ===========================================================================
0000D25E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000D260 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D262 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D264 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D266 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D268 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D26A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D26C                            ; ===========================================================================
0000D26C                            
0000D26C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000D26C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000D270 7000                       		moveq	#0,d0
0000D272 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000D276 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D27A 6700                       		beq.s	loc_B8A8	; if not, branch
0000D27C 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000D280 6A00                       		bpl.s	loc_B872
0000D282 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D288 6700                       		beq.s	loc_B8A0
0000D28A                            
0000D28A                            loc_B872:
0000D28A 4A68 0032                  		tst.w	$32(a0)
0000D28E 6700                       		beq.s	loc_B8A0
0000D290 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D294 0200 000F                  		andi.b	#$F,d0
0000D298 6600                       		bne.s	loc_B892
0000D29A 4A28 0001                  		tst.b	1(a0)
0000D29E 6A00                       		bpl.s	loc_B892
0000D2A0 303C 00C7                  		move.w	#$C7,d0
0000D2A4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D2AA                            
0000D2AA                            loc_B892:
0000D2AA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D2B0 6400                       		bcc.s	Obj31_Restart
0000D2B2 317C 0000 0032             		move.w	#0,$32(a0)
0000D2B8                            
0000D2B8                            loc_B8A0:
0000D2B8 317C 0000 0012             		move.w	#0,$12(a0)
0000D2BE 6000                       		bra.s	Obj31_Restart
0000D2C0                            ; ===========================================================================
0000D2C0                            
0000D2C0                            loc_B8A8:				; XREF: Obj31_Type00
0000D2C0 3228 0034                  		move.w	$34(a0),d1
0000D2C4 B268 0032                  		cmp.w	$32(a0),d1
0000D2C8 6700                       		beq.s	Obj31_Restart
0000D2CA 3028 0012                  		move.w	$12(a0),d0
0000D2CE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D2D4 D168 0032                  		add.w	d0,$32(a0)
0000D2D8 B268 0032                  		cmp.w	$32(a0),d1
0000D2DC 6200                       		bhi.s	Obj31_Restart
0000D2DE 3141 0032                  		move.w	d1,$32(a0)
0000D2E2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D2E8 4A28 0001                  		tst.b	1(a0)
0000D2EC 6A00                       		bpl.s	Obj31_Restart
0000D2EE 303C 00BD                  		move.w	#$BD,d0
0000D2F2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D2F8                            
0000D2F8                            Obj31_Restart:
0000D2F8 7000                       		moveq	#0,d0
0000D2FA 1028 0032                  		move.b	$32(a0),d0
0000D2FE D068 0030                  		add.w	$30(a0),d0
0000D302 3140 000C                  		move.w	d0,$C(a0)
0000D306 4E75                       		rts	
0000D308                            ; ===========================================================================
0000D308                            
0000D308                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000D308 4A68 0036                  		tst.w	$36(a0)
0000D30C 6700                       		beq.s	loc_B938
0000D30E 4A68 0038                  		tst.w	$38(a0)
0000D312 6700                       		beq.s	loc_B902
0000D314 5368 0038                  		subq.w	#1,$38(a0)
0000D318 6000                       		bra.s	loc_B97C
0000D31A                            ; ===========================================================================
0000D31A                            
0000D31A                            loc_B902:
0000D31A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D31E 0200 000F                  		andi.b	#$F,d0
0000D322 6600                       		bne.s	loc_B91C
0000D324 4A28 0001                  		tst.b	1(a0)
0000D328 6A00                       		bpl.s	loc_B91C
0000D32A 303C 00C7                  		move.w	#$C7,d0
0000D32E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D334                            
0000D334                            loc_B91C:
0000D334 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D33A 6400                       		bcc.s	loc_B97C
0000D33C 317C 0000 0032             		move.w	#0,$32(a0)
0000D342 317C 0000 0012             		move.w	#0,$12(a0)
0000D348 317C 0000 0036             		move.w	#0,$36(a0)
0000D34E 6000                       		bra.s	loc_B97C
0000D350                            ; ===========================================================================
0000D350                            
0000D350                            loc_B938:				; XREF: Obj31_Type01
0000D350 3228 0034                  		move.w	$34(a0),d1
0000D354 B268 0032                  		cmp.w	$32(a0),d1
0000D358 6700                       		beq.s	loc_B97C
0000D35A 3028 0012                  		move.w	$12(a0),d0
0000D35E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D364 D168 0032                  		add.w	d0,$32(a0)
0000D368 B268 0032                  		cmp.w	$32(a0),d1
0000D36C 6200                       		bhi.s	loc_B97C
0000D36E 3141 0032                  		move.w	d1,$32(a0)
0000D372 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D378 317C 0001 0036             		move.w	#1,$36(a0)
0000D37E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D384 4A28 0001                  		tst.b	1(a0)
0000D388 6A00                       		bpl.s	loc_B97C
0000D38A 303C 00BD                  		move.w	#$BD,d0
0000D38E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D394                            
0000D394                            loc_B97C:
0000D394 6000 FF62                  		bra.w	Obj31_Restart
0000D398                            ; ===========================================================================
0000D398                            
0000D398                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000D398 3038 D008                  		move.w	($FFFFD008).w,d0
0000D39C 9068 0008                  		sub.w	8(a0),d0
0000D3A0 6400                       		bcc.s	loc_B98C
0000D3A2 4440                       		neg.w	d0
0000D3A4                            
0000D3A4                            loc_B98C:
0000D3A4 0C40 0090                  		cmpi.w	#$90,d0
0000D3A8 6400                       		bcc.s	loc_B996
0000D3AA 5228 0028                  		addq.b	#1,$28(a0)
0000D3AE                            
0000D3AE                            loc_B996:
0000D3AE 6000 FF48                  		bra.w	Obj31_Restart
0000D3B2                            ; ===========================================================================
0000D3B2                            ; ---------------------------------------------------------------------------
0000D3B2                            ; Object 45 - spiked metal block from beta version (MZ)
0000D3B2                            ; ---------------------------------------------------------------------------
0000D3B2                            
0000D3B2                            Obj45:					; XREF: Obj_Index
0000D3B2 7000                       		moveq	#0,d0
0000D3B4 1028 0024                  		move.b	$24(a0),d0
0000D3B8 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000D3BC 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000D3C0                            ; ===========================================================================
0000D3C0 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000D3C2 0000                       		dc.w Obj45_Solid-Obj45_Index
0000D3C4 0000                       		dc.w loc_BA8E-Obj45_Index
0000D3C6 0000                       		dc.w Obj45_Display-Obj45_Index
0000D3C8 0000                       		dc.w loc_BA7A-Obj45_Index
0000D3CA                            
0000D3CA 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000D3CD 04E4 01                    		dc.b	4, $E4,	  1
0000D3D0 0834 03                    		dc.b	8, $34,	  3
0000D3D3 0628 02                    		dc.b	6, $28,	  2
0000D3D6                            
0000D3D6 3800                       word_B9BE:	dc.w $3800
0000D3D8 A000                       		dc.w -$6000
0000D3DA 5000                       		dc.w $5000
0000D3DC                            ; ===========================================================================
0000D3DC                            
0000D3DC                            Obj45_Main:				; XREF: Obj45_Index
0000D3DC 7000                       		moveq	#0,d0
0000D3DE 1028 0028                  		move.b	$28(a0),d0
0000D3E2 D040                       		add.w	d0,d0
0000D3E4 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000D3E8 45F9 0000 D3CA             		lea	(Obj45_Var).l,a2
0000D3EE 2248                       		movea.l	a0,a1
0000D3F0 7203                       		moveq	#3,d1
0000D3F2 6000                       		bra.s	Obj45_Load
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            Obj45_Loop:
0000D3F4 6100 0000                  		bsr.w	SingleObjLoad2
0000D3F8 6600                       		bne.s	loc_BA52
0000D3FA                            
0000D3FA                            Obj45_Load:				; XREF: Obj45_Main
0000D3FA 135A 0024                  		move.b	(a2)+,$24(a1)
0000D3FE 12BC 0045                  		move.b	#$45,0(a1)
0000D402 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D408 101A                       		move.b	(a2)+,d0
0000D40A 4880                       		ext.w	d0
0000D40C D068 0008                  		add.w	8(a0),d0
0000D410 3340 0008                  		move.w	d0,8(a1)
0000D414 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000D41C 337C 0300 0002             		move.w	#$300,2(a1)
0000D422 137C 0004 0001             		move.b	#4,1(a1)
0000D428 3369 0008 0030             		move.w	8(a1),$30(a1)
0000D42E 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000D434 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D43A 137C 0020 0019             		move.b	#$20,$19(a1)
0000D440 3342 0034                  		move.w	d2,$34(a1)
0000D444 137C 0004 0018             		move.b	#4,$18(a1)
0000D44A 0C12 0001                  		cmpi.b	#1,(a2)
0000D44E 6600                       		bne.s	loc_BA40
0000D450 137C 0091 0020             		move.b	#$91,$20(a1)
0000D456                            
0000D456                            loc_BA40:
0000D456 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D45A 2348 003C                  		move.l	a0,$3C(a1)
0000D45E 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000D462                            
0000D462 137C 0003 0018             		move.b	#3,$18(a1)
0000D468                            
0000D468                            loc_BA52:
0000D468 117C 0010 0019             		move.b	#$10,$19(a0)
0000D46E                            
0000D46E                            Obj45_Solid:				; XREF: Obj45_Index
0000D46E 3F28 0008                  		move.w	8(a0),-(sp)
0000D472 6100 0000                  		bsr.w	Obj45_Move
0000D476 323C 0017                  		move.w	#$17,d1
0000D47A 343C 0020                  		move.w	#$20,d2
0000D47E 363C 0020                  		move.w	#$20,d3
0000D482 381F                       		move.w	(sp)+,d4
0000D484 6100 0000                  		bsr.w	SolidObject
0000D488 6100 0000                  		bsr.w	DisplaySprite
0000D48C 6000 0000                  		bra.w	Obj45_ChkDel
0000D490                            ; ===========================================================================
0000D490                            
0000D490                            loc_BA7A:				; XREF: Obj45_Index
0000D490 2268 003C                  		movea.l	$3C(a0),a1
0000D494 1029 0032                  		move.b	$32(a1),d0
0000D498 0600 0010                  		addi.b	#$10,d0
0000D49C EA08                       		lsr.b	#5,d0
0000D49E 5600                       		addq.b	#3,d0
0000D4A0 1140 001A                  		move.b	d0,$1A(a0)
0000D4A4                            
0000D4A4                            loc_BA8E:				; XREF: Obj45_Index
0000D4A4 2268 003C                  		movea.l	$3C(a0),a1
0000D4A8 7000                       		moveq	#0,d0
0000D4AA 1029 0032                  		move.b	$32(a1),d0
0000D4AE 4440                       		neg.w	d0
0000D4B0 D068 0030                  		add.w	$30(a0),d0
0000D4B4 3140 0008                  		move.w	d0,8(a0)
0000D4B8                            
0000D4B8                            Obj45_Display:				; XREF: Obj45_Index
0000D4B8 6100 0000                  		bsr.w	DisplaySprite
0000D4BC                            
0000D4BC                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000D4BC 3028 003A                  		move.w	$3A(a0),d0
0000D4C0 0240 FF80                  		andi.w	#$FF80,d0
0000D4C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4C8 0441 0080                  		subi.w	#$80,d1
0000D4CC 0241 FF80                  		andi.w	#$FF80,d1
0000D4D0 9041                       		sub.w	d1,d0
0000D4D2 0C40 0280                  		cmpi.w	#$280,d0
0000D4D6 6200 0000                  		bhi.w	DeleteObject
0000D4DA 4E75                       		rts	
0000D4DC                            
0000D4DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4DC                            
0000D4DC                            
0000D4DC                            Obj45_Move:				; XREF: Obj45_Solid
0000D4DC 7000                       		moveq	#0,d0
0000D4DE 1028 0028                  		move.b	$28(a0),d0
0000D4E2 D040                       		add.w	d0,d0
0000D4E4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D4E8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D4EC                            ; End of function Obj45_Move
0000D4EC                            
0000D4EC                            ; ===========================================================================
0000D4EC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D4EE 0000                       		dc.w loc_BADA-off_BAD6
0000D4F0                            ; ===========================================================================
0000D4F0                            
0000D4F0                            loc_BADA:				; XREF: off_BAD6
0000D4F0 4A68 0036                  		tst.w	$36(a0)
0000D4F4 6700                       		beq.s	loc_BB08
0000D4F6 4A68 0038                  		tst.w	$38(a0)
0000D4FA 6700                       		beq.s	loc_BAEC
0000D4FC 5368 0038                  		subq.w	#1,$38(a0)
0000D500 6000                       		bra.s	loc_BB3C
0000D502                            ; ===========================================================================
0000D502                            
0000D502                            loc_BAEC:
0000D502 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D508 6400                       		bcc.s	loc_BB3C
0000D50A 317C 0000 0032             		move.w	#0,$32(a0)
0000D510 317C 0000 0010             		move.w	#0,$10(a0)
0000D516 317C 0000 0036             		move.w	#0,$36(a0)
0000D51C 6000                       		bra.s	loc_BB3C
0000D51E                            ; ===========================================================================
0000D51E                            
0000D51E                            loc_BB08:				; XREF: loc_BADA
0000D51E 3228 0034                  		move.w	$34(a0),d1
0000D522 B268 0032                  		cmp.w	$32(a0),d1
0000D526 6700                       		beq.s	loc_BB3C
0000D528 3028 0010                  		move.w	$10(a0),d0
0000D52C 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D532 D168 0032                  		add.w	d0,$32(a0)
0000D536 B268 0032                  		cmp.w	$32(a0),d1
0000D53A 6200                       		bhi.s	loc_BB3C
0000D53C 3141 0032                  		move.w	d1,$32(a0)
0000D540 317C 0000 0010             		move.w	#0,$10(a0)
0000D546 317C 0001 0036             		move.w	#1,$36(a0)
0000D54C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D552                            
0000D552                            loc_BB3C:
0000D552 7000                       		moveq	#0,d0
0000D554 1028 0032                  		move.b	$32(a0),d0
0000D558 4440                       		neg.w	d0
0000D55A D068 0030                  		add.w	$30(a0),d0
0000D55E 3140 0008                  		move.w	d0,8(a0)
0000D562 4E75                       		rts	
0000D564                            ; ===========================================================================
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            Map_obj31:
0000D564                            	include "_maps\obj31.asm"
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D564                            ; ---------------------------------------------------------------------------
0000D564 0000                       		dc.w byte_BB64-Map_obj31
0000D566 0000                       		dc.w byte_BB7E-Map_obj31
0000D568 0000                       		dc.w byte_BB98-Map_obj31
0000D56A 0000                       		dc.w byte_BB9E-Map_obj31
0000D56C 0000                       		dc.w byte_BBA9-Map_obj31
0000D56E 0000                       		dc.w byte_BBBE-Map_obj31
0000D570 0000                       		dc.w byte_BBDD-Map_obj31
0000D572 0000                       		dc.w byte_BC06-Map_obj31
0000D574 0000                       		dc.w byte_BC06-Map_obj31
0000D576 0000                       		dc.w byte_BC39-Map_obj31
0000D578 0000                       		dc.w byte_BC53-Map_obj31
0000D57A 05                         byte_BB64:	dc.b 5
0000D57B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D580 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D585 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D58A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D58F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D594 05                         byte_BB7E:	dc.b 5
0000D595 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D59A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D59F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D5A4 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D5A9 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D5AE 01                         byte_BB98:	dc.b 1
0000D5AF DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D5B4 02                         byte_BB9E:	dc.b 2
0000D5B5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5BA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5BF 04                         byte_BBA9:	dc.b 4
0000D5C0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5C5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5CA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5CF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5D4 06                         byte_BBBE:	dc.b 6
0000D5D5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D5DA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D5DF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5E4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5E9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5EE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5F3 08                         byte_BBDD:	dc.b 8
0000D5F4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D5F9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D5FE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D603 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D608 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D60D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D612 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D617 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D61C 0A                         byte_BC06:	dc.b $A
0000D61D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D622 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D627 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D62C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D631 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D636 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D63B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D640 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D645 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D64A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D64F 05                         byte_BC39:	dc.b 5
0000D650 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D655 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D65A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D65F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D664 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D669 01                         byte_BC53:	dc.b 1
0000D66A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D670 00                         		even
0000D670 00                         		even
0000D670                            
0000D670                            ; ---------------------------------------------------------------------------
0000D670                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D670                            ; ---------------------------------------------------------------------------
0000D670                            Map_obj45:
0000D670                            	include "_maps\obj45.asm"
0000D670                            ; ---------------------------------------------------------------------------
0000D670                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D670                            ; ---------------------------------------------------------------------------
0000D670 0000                       		dc.w byte_BC6C-Map_obj45
0000D672 0000                       		dc.w byte_BC7C-Map_obj45
0000D674 0000                       		dc.w byte_BC8C-Map_obj45
0000D676 0000                       		dc.w byte_BC92-Map_obj45
0000D678 0000                       		dc.w byte_BC9D-Map_obj45
0000D67A 0000                       		dc.w byte_BCB2-Map_obj45
0000D67C 0000                       		dc.w byte_BCD1-Map_obj45
0000D67E 0000                       		dc.w byte_BCFA-Map_obj45
0000D680 0000                       		dc.w byte_BCFA-Map_obj45
0000D682 03                         byte_BC6C:	dc.b 3
0000D683 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D688 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D68D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D692 03                         byte_BC7C:	dc.b 3
0000D693 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D698 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D69D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D6A2 01                         byte_BC8C:	dc.b 1
0000D6A3 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D6A8 02                         byte_BC92:	dc.b 2
0000D6A9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6AE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6B3 04                         byte_BC9D:	dc.b 4
0000D6B4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6B9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6BE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6C3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6C8 06                         byte_BCB2:	dc.b 6
0000D6C9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6CE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6D3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6D8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6DD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6E2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D6E7 08                         byte_BCD1:	dc.b 8
0000D6E8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6ED F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6F2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6F7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6FC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D701 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D706 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D70B F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D710 08                         byte_BCFA:	dc.b 8
0000D711 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D716 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D71B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D720 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D725 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D72A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D72F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D734 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D739 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D73E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D744 00                         		even
0000D744 00                         		even
0000D744                            
0000D744                            ; ===========================================================================
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            
0000D744                            Obj32:					; XREF: Obj_Index
0000D744 7000                       		moveq	#0,d0
0000D746 1028 0024                  		move.b	$24(a0),d0
0000D74A 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D74E 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D752                            ; ===========================================================================
0000D752 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D754 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D756                            ; ===========================================================================
0000D756                            
0000D756                            Obj32_Main:				; XREF: Obj32_Index
0000D756 5428 0024                  		addq.b	#2,$24(a0)
0000D75A 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D762 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D768 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D76E 6700                       		beq.s	loc_BD60
0000D770 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D776                            
0000D776                            loc_BD60:
0000D776 117C 0004 0001             		move.b	#4,1(a0)
0000D77C 117C 0010 0019             		move.b	#$10,$19(a0)
0000D782 117C 0004 0018             		move.b	#4,$18(a0)
0000D788 5668 000C                  		addq.w	#3,$C(a0)
0000D78C                            
0000D78C                            Obj32_Pressed:				; XREF: Obj32_Index
0000D78C 4A28 0001                  		tst.b	1(a0)
0000D790 6A00                       		bpl.s	Obj32_Display
0000D792 323C 001B                  		move.w	#$1B,d1
0000D796 343C 0005                  		move.w	#5,d2
0000D79A 363C 0005                  		move.w	#5,d3
0000D79E 3828 0008                  		move.w	8(a0),d4
0000D7A2 6100 0000                  		bsr.w	SolidObject
0000D7A6 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D7AC 1028 0028                  		move.b	$28(a0),d0
0000D7B0 0240 000F                  		andi.w	#$F,d0
0000D7B4 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D7B8 47F3 0000                  		lea	(a3,d0.w),a3
0000D7BC 7600                       		moveq	#0,d3
0000D7BE 0828 0006 0028             		btst	#6,$28(a0)
0000D7C4 6700                       		beq.s	loc_BDB2
0000D7C6 7607                       		moveq	#7,d3
0000D7C8                            
0000D7C8                            loc_BDB2:
0000D7C8 4A28 0028                  		tst.b	$28(a0)
0000D7CC 6A00                       		bpl.s	loc_BDBE
0000D7CE 6100 0000                  		bsr.w	Obj32_MZBlock
0000D7D2 6600                       		bne.s	loc_BDC8
0000D7D4                            
0000D7D4                            loc_BDBE:
0000D7D4 4A28 0025                  		tst.b	$25(a0)
0000D7D8 6600                       		bne.s	loc_BDC8
0000D7DA 0793                       		bclr	d3,(a3)
0000D7DC 6000                       		bra.s	loc_BDDE
0000D7DE                            ; ===========================================================================
0000D7DE                            
0000D7DE                            loc_BDC8:
0000D7DE 4A13                       		tst.b	(a3)
0000D7E0 6600                       		bne.s	loc_BDD6
0000D7E2 303C 00CD                  		move.w	#$CD,d0
0000D7E6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play switch sound
0000D7EC                            
0000D7EC                            loc_BDD6:
0000D7EC 07D3                       		bset	d3,(a3)
0000D7EE 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D7F4                            
0000D7F4                            loc_BDDE:
0000D7F4 0828 0005 0028             		btst	#5,$28(a0)
0000D7FA 6700                       		beq.s	Obj32_Display
0000D7FC 5328 001E                  		subq.b	#1,$1E(a0)
0000D800 6A00                       		bpl.s	Obj32_Display
0000D802 117C 0007 001E             		move.b	#7,$1E(a0)
0000D808 0868 0001 001A             		bchg	#1,$1A(a0)
0000D80E                            
0000D80E                            Obj32_Display:
0000D80E 6100 0000                  		bsr.w	DisplaySprite
0000D812 3028 0008                  		move.w	8(a0),d0
0000D816 0240 FF80                  		andi.w	#$FF80,d0
0000D81A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D81E 0441 0080                  		subi.w	#$80,d1
0000D822 0241 FF80                  		andi.w	#$FF80,d1
0000D826 9041                       		sub.w	d1,d0
0000D828 0C40 0280                  		cmpi.w	#$280,d0
0000D82C 6200 0000                  		bhi.w	Obj32_Delete
0000D830 4E75                       		rts	
0000D832                            ; ===========================================================================
0000D832                            
0000D832                            Obj32_Delete:
0000D832 6100 0000                  		bsr.w	DeleteObject
0000D836 4E75                       		rts	
0000D838                            
0000D838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D838                            
0000D838                            
0000D838                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D838 3F03                       		move.w	d3,-(sp)
0000D83A 3428 0008                  		move.w	8(a0),d2
0000D83E 3628 000C                  		move.w	$C(a0),d3
0000D842 0442 0010                  		subi.w	#$10,d2
0000D846 5143                       		subq.w	#8,d3
0000D848 383C 0020                  		move.w	#$20,d4
0000D84C 3A3C 0010                  		move.w	#$10,d5
0000D850 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D854 3C3C 005F                  		move.w	#$5F,d6
0000D858                            
0000D858                            Obj32_MZLoop:
0000D858 4A29 0001                  		tst.b	1(a1)
0000D85C 6A00                       		bpl.s	loc_BE4E
0000D85E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D862 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D864                            
0000D864                            loc_BE4E:
0000D864 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D868 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D86C                            
0000D86C 361F                       		move.w	(sp)+,d3
0000D86E 7000                       		moveq	#0,d0
0000D870                            
0000D870                            locret_BE5A:
0000D870 4E75                       		rts	
0000D872                            ; ===========================================================================
0000D872 1010                       Obj32_MZData:	dc.b $10, $10
0000D874                            ; ===========================================================================
0000D874                            
0000D874                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D874 7001                       		moveq	#1,d0
0000D876 0240 003F                  		andi.w	#$3F,d0
0000D87A D040                       		add.w	d0,d0
0000D87C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D880 121A                       		move.b	(a2)+,d1
0000D882 4881                       		ext.w	d1
0000D884 3029 0008                  		move.w	8(a1),d0
0000D888 9041                       		sub.w	d1,d0
0000D88A 9042                       		sub.w	d2,d0
0000D88C 6400                       		bcc.s	loc_BE80
0000D88E D241                       		add.w	d1,d1
0000D890 D041                       		add.w	d1,d0
0000D892 6500                       		bcs.s	loc_BE84
0000D894 60CE                       		bra.s	loc_BE4E
0000D896                            ; ===========================================================================
0000D896                            
0000D896                            loc_BE80:
0000D896 B044                       		cmp.w	d4,d0
0000D898 62CA                       		bhi.s	loc_BE4E
0000D89A                            
0000D89A                            loc_BE84:
0000D89A 121A                       		move.b	(a2)+,d1
0000D89C 4881                       		ext.w	d1
0000D89E 3029 000C                  		move.w	$C(a1),d0
0000D8A2 9041                       		sub.w	d1,d0
0000D8A4 9043                       		sub.w	d3,d0
0000D8A6 6400                       		bcc.s	loc_BE9A
0000D8A8 D241                       		add.w	d1,d1
0000D8AA D041                       		add.w	d1,d0
0000D8AC 6500                       		bcs.s	loc_BE9E
0000D8AE 60B4                       		bra.s	loc_BE4E
0000D8B0                            ; ===========================================================================
0000D8B0                            
0000D8B0                            loc_BE9A:
0000D8B0 B045                       		cmp.w	d5,d0
0000D8B2 62B0                       		bhi.s	loc_BE4E
0000D8B4                            
0000D8B4                            loc_BE9E:
0000D8B4 361F                       		move.w	(sp)+,d3
0000D8B6 7001                       		moveq	#1,d0
0000D8B8 4E75                       		rts	
0000D8BA                            ; End of function Obj32_MZBlock
0000D8BA                            
0000D8BA                            ; ===========================================================================
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA                            Map_obj32:
0000D8BA                            	include "_maps\obj32.asm"
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA 0000                       		dc.w byte_BEAC-Map_obj32
0000D8BC 0000                       		dc.w byte_BEB7-Map_obj32
0000D8BE 0000                       		dc.w byte_BEC2-Map_obj32
0000D8C0 0000                       		dc.w byte_BEB7-Map_obj32
0000D8C2 02                         byte_BEAC:	dc.b 2
0000D8C3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D8C8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D8CD 02                         byte_BEB7:	dc.b 2
0000D8CE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D8D3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D8D8 02                         byte_BEC2:	dc.b 2
0000D8D9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D8DE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D8E3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8E8                            		even
0000D8E8                            		even
0000D8E8                            
0000D8E8                            ; ===========================================================================
0000D8E8                            ; ---------------------------------------------------------------------------
0000D8E8                            ; Object 33 - pushable blocks (MZ, LZ)
0000D8E8                            ; ---------------------------------------------------------------------------
0000D8E8                            
0000D8E8                            Obj33:					; XREF: Obj_Index
0000D8E8 7000                       		moveq	#0,d0
0000D8EA 1028 0024                  		move.b	$24(a0),d0
0000D8EE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D8F2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D8F6                            ; ===========================================================================
0000D8F6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D8F8 0000                       		dc.w loc_BF6E-Obj33_Index
0000D8FA 0000                       		dc.w loc_C02C-Obj33_Index
0000D8FC                            
0000D8FC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D8FE 4001                       		dc.b $40, 1
0000D900                            ; ===========================================================================
0000D900                            
0000D900                            Obj33_Main:				; XREF: Obj33_Index
0000D900 5428 0024                  		addq.b	#2,$24(a0)
0000D904 117C 000F 0016             		move.b	#$F,$16(a0)
0000D90A 117C 000F 0017             		move.b	#$F,$17(a0)
0000D910 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D918 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D91E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D924 6600                       		bne.s	loc_BF16
0000D926 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D92C                            
0000D92C                            loc_BF16:
0000D92C 117C 0004 0001             		move.b	#4,1(a0)
0000D932 117C 0003 0018             		move.b	#3,$18(a0)
0000D938 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D93E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D944 7000                       		moveq	#0,d0
0000D946 1028 0028                  		move.b	$28(a0),d0
0000D94A D040                       		add.w	d0,d0
0000D94C 0240 000E                  		andi.w	#$E,d0
0000D950 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D954 115A 0019                  		move.b	(a2)+,$19(a0)
0000D958 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D95C 4A28 0028                  		tst.b	$28(a0)
0000D960 6700                       		beq.s	Obj33_ChkGone
0000D962 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D968                            
0000D968                            Obj33_ChkGone:
0000D968 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D96C 7000                       		moveq	#0,d0
0000D96E 1028 0023                  		move.b	$23(a0),d0
0000D972 6700                       		beq.s	loc_BF6E
0000D974 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D97A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D980 6600 0000                  		bne.w	DeleteObject
0000D984                            
0000D984                            loc_BF6E:				; XREF: Obj33_Index
0000D984 4A28 0032                  		tst.b	$32(a0)
0000D988 6600 0000                  		bne.w	loc_C046
0000D98C 7200                       		moveq	#0,d1
0000D98E 1228 0019                  		move.b	$19(a0),d1
0000D992 0641 000B                  		addi.w	#$B,d1
0000D996 343C 0010                  		move.w	#$10,d2
0000D99A 363C 0011                  		move.w	#$11,d3
0000D99E 3828 0008                  		move.w	8(a0),d4
0000D9A2 6100 0000                  		bsr.w	loc_C186
0000D9A6 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D9AC 6600                       		bne.s	loc_BFC6	; if not, branch
0000D9AE 08A8 0007 0028             		bclr	#7,$28(a0)
0000D9B4 3028 0008                  		move.w	8(a0),d0
0000D9B8 0C40 0A20                  		cmpi.w	#$A20,d0
0000D9BC 6500                       		bcs.s	loc_BFC6
0000D9BE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D9C2 6400                       		bcc.s	loc_BFC6
0000D9C4 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D9C8 0440 001C                  		subi.w	#$1C,d0
0000D9CC 3140 000C                  		move.w	d0,$C(a0)
0000D9D0 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D9D6 08E8 0007 0028             		bset	#7,$28(a0)
0000D9DC                            
0000D9DC                            loc_BFC6:
0000D9DC 3028 0008                  		move.w	8(a0),d0
0000D9E0 0240 FF80                  		andi.w	#$FF80,d0
0000D9E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D9E8 0441 0080                  		subi.w	#$80,d1
0000D9EC 0241 FF80                  		andi.w	#$FF80,d1
0000D9F0 9041                       		sub.w	d1,d0
0000D9F2 0C40 0280                  		cmpi.w	#$280,d0
0000D9F6 6200                       		bhi.s	loc_BFE6
0000D9F8 6000 0000                  		bra.w	DisplaySprite
0000D9FC                            ; ===========================================================================
0000D9FC                            
0000D9FC                            loc_BFE6:
0000D9FC 3028 0034                  		move.w	$34(a0),d0
0000DA00 0240 FF80                  		andi.w	#$FF80,d0
0000DA04 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA08 0441 0080                  		subi.w	#$80,d1
0000DA0C 0241 FF80                  		andi.w	#$FF80,d1
0000DA10 9041                       		sub.w	d1,d0
0000DA12 0C40 0280                  		cmpi.w	#$280,d0
0000DA16 6200                       		bhi.s	loc_C016
0000DA18 3168 0034 0008             		move.w	$34(a0),8(a0)
0000DA1E 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000DA24 117C 0004 0024             		move.b	#4,$24(a0)
0000DA2A 6000                       		bra.s	loc_C02C
0000DA2C                            ; ===========================================================================
0000DA2C                            
0000DA2C                            loc_C016:
0000DA2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA30 7000                       		moveq	#0,d0
0000DA32 1028 0023                  		move.b	$23(a0),d0
0000DA36 6700                       		beq.s	loc_C028
0000DA38 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DA3E                            
0000DA3E                            loc_C028:
0000DA3E 6000 0000                  		bra.w	DeleteObject
0000DA42                            ; ===========================================================================
0000DA42                            
0000DA42                            loc_C02C:				; XREF: Obj33_Index
0000DA42 6100 0000                  		bsr.w	ChkObjOnScreen2
0000DA46 6700                       		beq.s	locret_C044
0000DA48 117C 0002 0024             		move.b	#2,$24(a0)
0000DA4E 4228 0032                  		clr.b	$32(a0)
0000DA52 4268 0010                  		clr.w	$10(a0)
0000DA56 4268 0012                  		clr.w	$12(a0)
0000DA5A                            
0000DA5A                            locret_C044:
0000DA5A 4E75                       		rts	
0000DA5C                            ; ===========================================================================
0000DA5C                            
0000DA5C                            loc_C046:				; XREF: loc_BF6E
0000DA5C 3F28 0008                  		move.w	8(a0),-(sp)
0000DA60 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000DA66 6400                       		bcc.s	loc_C056
0000DA68 6100 0000                  		bsr.w	SpeedToPos
0000DA6C                            
0000DA6C                            loc_C056:
0000DA6C 0828 0001 0022             		btst	#1,$22(a0)
0000DA72 6700                       		beq.s	loc_C0A0
0000DA74 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DA7A 4EB9 0000 0000             		jsr	ObjHitFloor
0000DA80 4A41                       		tst.w	d1
0000DA82 6A00 0000                  		bpl.w	loc_C09E
0000DA86 D368 000C                  		add.w	d1,$C(a0)
0000DA8A 4268 0012                  		clr.w	$12(a0)
0000DA8E 08A8 0001 0022             		bclr	#1,$22(a0)
0000DA94 3011                       		move.w	(a1),d0
0000DA96 0240 03FF                  		andi.w	#$3FF,d0
0000DA9A 0C40 016A                  		cmpi.w	#$16A,d0
0000DA9E 6500                       		bcs.s	loc_C09E
0000DAA0 3028 0030                  		move.w	$30(a0),d0
0000DAA4 E640                       		asr.w	#3,d0
0000DAA6 3140 0010                  		move.w	d0,$10(a0)
0000DAAA 117C 0001 0032             		move.b	#1,$32(a0)
0000DAB0 4268 000E                  		clr.w	$E(a0)
0000DAB4                            
0000DAB4                            loc_C09E:
0000DAB4 6000                       		bra.s	loc_C0E6
0000DAB6                            ; ===========================================================================
0000DAB6                            
0000DAB6                            loc_C0A0:
0000DAB6 4A68 0010                  		tst.w	$10(a0)
0000DABA 6700 0000                  		beq.w	loc_C0D6
0000DABE 6B00                       		bmi.s	loc_C0BC
0000DAC0 7600                       		moveq	#0,d3
0000DAC2 1628 0019                  		move.b	$19(a0),d3
0000DAC6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DACC 4A41                       		tst.w	d1		; has block touched a wall?
0000DACE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DAD0 6000                       		bra.s	loc_C0E6
0000DAD2                            ; ===========================================================================
0000DAD2                            
0000DAD2                            loc_C0BC:
0000DAD2 7600                       		moveq	#0,d3
0000DAD4 1628 0019                  		move.b	$19(a0),d3
0000DAD8 4643                       		not.w	d3
0000DADA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DAE0 4A41                       		tst.w	d1		; has block touched a wall?
0000DAE2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DAE4 6000                       		bra.s	loc_C0E6
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            Obj33_StopPush:
0000DAE6 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000DAEA 6000                       		bra.s	loc_C0E6
0000DAEC                            ; ===========================================================================
0000DAEC                            
0000DAEC                            loc_C0D6:
0000DAEC 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000DAF4 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000DAFA 6400                       		bcc.s	loc_C104
0000DAFC                            
0000DAFC                            loc_C0E6:
0000DAFC 7200                       		moveq	#0,d1
0000DAFE 1228 0019                  		move.b	$19(a0),d1
0000DB02 0641 000B                  		addi.w	#$B,d1
0000DB06 343C 0010                  		move.w	#$10,d2
0000DB0A 363C 0011                  		move.w	#$11,d3
0000DB0E 381F                       		move.w	(sp)+,d4
0000DB10 6100 0000                  		bsr.w	loc_C186
0000DB14 6100                       		bsr.s	Obj33_ChkLava
0000DB16 6000 FEC4                  		bra.w	loc_BFC6
0000DB1A                            ; ===========================================================================
0000DB1A                            
0000DB1A                            loc_C104:
0000DB1A 381F                       		move.w	(sp)+,d4
0000DB1C 43F8 D000                  		lea	($FFFFD000).w,a1
0000DB20 08A9 0003 0022             		bclr	#3,$22(a1)
0000DB26 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB2C 6000 FECE                  		bra.w	loc_BFE6
0000DB30                            ; ===========================================================================
0000DB30                            
0000DB30                            Obj33_ChkLava:
0000DB30 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000DB36 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000DB38 343C FFE0                  		move.w	#-$20,d2
0000DB3C 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000DB42 6700                       		beq.s	Obj33_LoadLava
0000DB44 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000DB4A 6700                       		beq.s	Obj33_LoadLava
0000DB4C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000DB52 6700                       		beq.s	Obj33_LoadLava
0000DB54 4E75                       		rts	
0000DB56                            ; ===========================================================================
0000DB56                            
0000DB56                            Obj33_ChkLava2:
0000DB56 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000DB5C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000DB5E 343C 0020                  		move.w	#$20,d2
0000DB62 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000DB68 6700                       		beq.s	Obj33_LoadLava
0000DB6A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000DB70 6700                       		beq.s	Obj33_LoadLava
0000DB72                            
0000DB72                            Obj33_NoLava:
0000DB72 4E75                       		rts	
0000DB74                            ; ===========================================================================
0000DB74                            
0000DB74                            Obj33_LoadLava:
0000DB74 6100 0000                  		bsr.w	SingleObjLoad
0000DB78 6600                       		bne.s	locret_C184
0000DB7A 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000DB7E 3368 0008 0008             		move.w	8(a0),8(a1)
0000DB84 D569 0008                  		add.w	d2,8(a1)
0000DB88 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DB8E 0669 0010 000C             		addi.w	#$10,$C(a1)
0000DB94 2348 003C                  		move.l	a0,$3C(a1)
0000DB98                            
0000DB98                            locret_C184:
0000DB98 4E75                       		rts	
0000DB9A                            ; ===========================================================================
0000DB9A                            
0000DB9A                            loc_C186:				; XREF: loc_BF6E
0000DB9A 1028 0025                  		move.b	$25(a0),d0
0000DB9E 6700 0000                  		beq.w	loc_C218
0000DBA2 5500                       		subq.b	#2,d0
0000DBA4 6600                       		bne.s	loc_C1AA
0000DBA6 6100 B40E                  		bsr.w	ExitPlatform
0000DBAA 0829 0003 0022             		btst	#3,$22(a1)
0000DBB0 6600                       		bne.s	loc_C1A4
0000DBB2 4228 0025                  		clr.b	$25(a0)
0000DBB6 4E75                       		rts	
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            loc_C1A4:
0000DBB8 3404                       		move.w	d4,d2
0000DBBA 6000 B958                  		bra.w	MvSonicOnPtfm
0000DBBE                            ; ===========================================================================
0000DBBE                            
0000DBBE                            loc_C1AA:
0000DBBE 5500                       		subq.b	#2,d0
0000DBC0 6600                       		bne.s	loc_C1F2
0000DBC2 6100 0000                  		bsr.w	SpeedToPos
0000DBC6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DBCC 4EB9 0000 0000             		jsr	ObjHitFloor
0000DBD2 4A41                       		tst.w	d1
0000DBD4 6A00 0000                  		bpl.w	locret_C1F0
0000DBD8 D368 000C                  		add.w	d1,$C(a0)
0000DBDC 4268 0012                  		clr.w	$12(a0)
0000DBE0 4228 0025                  		clr.b	$25(a0)
0000DBE4 3011                       		move.w	(a1),d0
0000DBE6 0240 03FF                  		andi.w	#$3FF,d0
0000DBEA 0C40 016A                  		cmpi.w	#$16A,d0
0000DBEE 6500                       		bcs.s	locret_C1F0
0000DBF0 3028 0030                  		move.w	$30(a0),d0
0000DBF4 E640                       		asr.w	#3,d0
0000DBF6 3140 0010                  		move.w	d0,$10(a0)
0000DBFA 117C 0001 0032             		move.b	#1,$32(a0)
0000DC00 4268 000E                  		clr.w	$E(a0)
0000DC04                            
0000DC04                            locret_C1F0:
0000DC04 4E75                       		rts	
0000DC06                            ; ===========================================================================
0000DC06                            
0000DC06                            loc_C1F2:
0000DC06 6100 0000                  		bsr.w	SpeedToPos
0000DC0A 3028 0008                  		move.w	8(a0),d0
0000DC0E 0240 000C                  		andi.w	#$C,d0
0000DC12 6600 0000                  		bne.w	locret_C2E4
0000DC16 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000DC1C 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000DC22 4268 0010                  		clr.w	$10(a0)
0000DC26 5528 0025                  		subq.b	#2,$25(a0)
0000DC2A 4E75                       		rts	
0000DC2C                            ; ===========================================================================
0000DC2C                            
0000DC2C                            loc_C218:
0000DC2C 6100 0000                  		bsr.w	loc_FAC8
0000DC30 4A44                       		tst.w	d4
0000DC32 6700 0000                  		beq.w	locret_C2E4
0000DC36 6B00 0000                  		bmi.w	locret_C2E4
0000DC3A 4A28 0032                  		tst.b	$32(a0)
0000DC3E 6700                       		beq.s	loc_C230
0000DC40 6000 0000                  		bra.w	locret_C2E4
0000DC44                            ; ===========================================================================
0000DC44                            
0000DC44                            loc_C230:
0000DC44 4A40                       		tst.w	d0
0000DC46 6700 0000                  		beq.w	locret_C2E4
0000DC4A 6B00                       		bmi.s	loc_C268
0000DC4C 0829 0000 0022             		btst	#0,$22(a1)
0000DC52 6600 0000                  		bne.w	locret_C2E4
0000DC56 3F00                       		move.w	d0,-(sp)
0000DC58 7600                       		moveq	#0,d3
0000DC5A 1628 0019                  		move.b	$19(a0),d3
0000DC5E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DC64 301F                       		move.w	(sp)+,d0
0000DC66 4A41                       		tst.w	d1
0000DC68 6B00 0000                  		bmi.w	locret_C2E4
0000DC6C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000DC74 7001                       		moveq	#1,d0
0000DC76 323C 0040                  		move.w	#$40,d1
0000DC7A 6000                       		bra.s	loc_C294
0000DC7C                            ; ===========================================================================
0000DC7C                            
0000DC7C                            loc_C268:
0000DC7C 0829 0000 0022             		btst	#0,$22(a1)
0000DC82 6700                       		beq.s	locret_C2E4
0000DC84 3F00                       		move.w	d0,-(sp)
0000DC86 7600                       		moveq	#0,d3
0000DC88 1628 0019                  		move.b	$19(a0),d3
0000DC8C 4643                       		not.w	d3
0000DC8E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DC94 301F                       		move.w	(sp)+,d0
0000DC96 4A41                       		tst.w	d1
0000DC98 6B00                       		bmi.s	locret_C2E4
0000DC9A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000DCA2 70FF                       		moveq	#-1,d0
0000DCA4 323C FFC0                  		move.w	#-$40,d1
0000DCA8                            
0000DCA8                            loc_C294:
0000DCA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000DCAC D169 0008                  		add.w	d0,8(a1)
0000DCB0 3341 0014                  		move.w	d1,$14(a1)
0000DCB4 337C 0000 0010             		move.w	#0,$10(a1)
0000DCBA 3F00                       		move.w	d0,-(sp)
0000DCBC 303C 00A7                  		move.w	#$A7,d0
0000DCC0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play pushing sound
0000DCC6 301F                       		move.w	(sp)+,d0
0000DCC8 4A28 0028                  		tst.b	$28(a0)
0000DCCC 6B00                       		bmi.s	locret_C2E4
0000DCCE 3F00                       		move.w	d0,-(sp)
0000DCD0 4EB9 0000 0000             		jsr	ObjHitFloor
0000DCD6 301F                       		move.w	(sp)+,d0
0000DCD8 0C41 0004                  		cmpi.w	#4,d1
0000DCDC 6F00                       		ble.s	loc_C2E0
0000DCDE 317C 0400 0010             		move.w	#$400,$10(a0)
0000DCE4 4A40                       		tst.w	d0
0000DCE6 6A00                       		bpl.s	loc_C2D8
0000DCE8 4468 0010                  		neg.w	$10(a0)
0000DCEC                            
0000DCEC                            loc_C2D8:
0000DCEC 117C 0006 0025             		move.b	#6,$25(a0)
0000DCF2 6000                       		bra.s	locret_C2E4
0000DCF4                            ; ===========================================================================
0000DCF4                            
0000DCF4                            loc_C2E0:
0000DCF4 D368 000C                  		add.w	d1,$C(a0)
0000DCF8                            
0000DCF8                            locret_C2E4:
0000DCF8 4E75                       		rts	
0000DCFA                            ; ===========================================================================
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            Map_obj33:
0000DCFA                            	include "_maps\obj33.asm"
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA 0000                       		dc.w byte_C2EA-Map_obj33
0000DCFC 0000                       		dc.w byte_C2F0-Map_obj33
0000DCFE 01                         byte_C2EA:	dc.b 1
0000DCFF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000DD04 04                         byte_C2F0:	dc.b 4
0000DD05 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000DD0A F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000DD0F F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000DD14 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000DD1A 00                         		even
0000DD1A 00                         		even
0000DD1A                            
0000DD1A                            ; ===========================================================================
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            ; Object 34 - zone title cards
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            
0000DD1A                            Obj34:					; XREF: Obj_Index
0000DD1A 7000                       		moveq	#0,d0
0000DD1C 1028 0024                  		move.b	$24(a0),d0
0000DD20 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000DD24 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000DD28                            ; ===========================================================================
0000DD28 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000DD2A 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000DD2C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD2E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD30                            ; ===========================================================================
0000DD30                            
0000DD30                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000DD30 2248                       		movea.l	a0,a1
0000DD32 7000                       		moveq	#0,d0
0000DD34 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DD38 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000DD3E 6600                       		bne.s	Obj34_CheckFZ
0000DD40 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000DD42                            
0000DD42                            Obj34_CheckFZ:
0000DD42 3400                       		move.w	d0,d2
0000DD44 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000DD4A 6600                       		bne.s	Obj34_LoadConfig
0000DD4C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000DD4E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000DD50                            
0000DD50                            Obj34_LoadConfig:
0000DD50 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000DD56 E948                       		lsl.w	#4,d0
0000DD58 D6C0                       		adda.w	d0,a3
0000DD5A 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000DD60 7203                       		moveq	#3,d1
0000DD62                            
0000DD62                            Obj34_Loop:
0000DD62 12BC 0034                  		move.b	#$34,0(a1)
0000DD66 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000DD6A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000DD6E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000DD72 335A 000A                  		move.w	(a2)+,$A(a1)
0000DD76 135A 0024                  		move.b	(a2)+,$24(a1)
0000DD7A 101A                       		move.b	(a2)+,d0
0000DD7C 6600                       		bne.s	Obj34_ActNumber
0000DD7E 1002                       		move.b	d2,d0
0000DD80                            
0000DD80                            Obj34_ActNumber:
0000DD80 0C00 0007                  		cmpi.b	#7,d0
0000DD84 6600                       		bne.s	Obj34_MakeSprite
0000DD86 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000DD8A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000DD90 6600                       		bne.s	Obj34_MakeSprite
0000DD92 5300                       		subq.b	#1,d0
0000DD94                            
0000DD94                            Obj34_MakeSprite:
0000DD94 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000DD98 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000DDA0 337C 8580 0002             		move.w	#$8580,2(a1)
0000DDA6 137C 0078 0019             		move.b	#$78,$19(a1)
0000DDAC 137C 0000 0001             		move.b	#0,1(a1)
0000DDB2 137C 0000 0018             		move.b	#0,$18(a1)
0000DDB8 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000DDBE 43E9 0040                  		lea	$40(a1),a1	; next object
0000DDC2 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000DDC6                            
0000DDC6                            Obj34_ChkPos:				; XREF: Obj34_Index
0000DDC6 7210                       		moveq	#$10,d1		; set horizontal speed
0000DDC8 3028 0030                  		move.w	$30(a0),d0
0000DDCC B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000DDD0 6700                       		beq.s	loc_C3C8	; if yes, branch
0000DDD2 6C00                       		bge.s	Obj34_Move
0000DDD4 4441                       		neg.w	d1
0000DDD6                            
0000DDD6                            Obj34_Move:
0000DDD6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DDDA                            
0000DDDA                            loc_C3C8:
0000DDDA 3028 0008                  		move.w	8(a0),d0
0000DDDE 6B00                       		bmi.s	locret_C3D8
0000DDE0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DDE4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000DDE6 6000 0000                  		bra.w	DisplaySprite
0000DDEA                            ; ===========================================================================
0000DDEA                            
0000DDEA                            locret_C3D8:
0000DDEA 4E75                       		rts	
0000DDEC                            ; ===========================================================================
0000DDEC                            
0000DDEC                            Obj34_Wait:				; XREF: Obj34_Index
0000DDEC 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000DDF0 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000DDF2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000DDF6 6000 0000                  		bra.w	DisplaySprite
0000DDFA                            ; ===========================================================================
0000DDFA                            
0000DDFA                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000DDFA 4A28 0001                  		tst.b	1(a0)
0000DDFE 6A00                       		bpl.s	Obj34_ChangeArt
0000DE00 7220                       		moveq	#$20,d1
0000DE02 3028 0032                  		move.w	$32(a0),d0
0000DE06 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000DE0A 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000DE0C 6C00                       		bge.s	Obj34_Move2
0000DE0E 4441                       		neg.w	d1
0000DE10                            
0000DE10                            Obj34_Move2:
0000DE10 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DE14 3028 0008                  		move.w	8(a0),d0
0000DE18 6B00                       		bmi.s	locret_C412
0000DE1A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DE1E 6400                       		bcc.s	locret_C412	; if yes, branch
0000DE20 6000 0000                  		bra.w	DisplaySprite
0000DE24                            ; ===========================================================================
0000DE24                            
0000DE24                            locret_C412:
0000DE24 4E75                       		rts	
0000DE26                            ; ===========================================================================
0000DE26                            
0000DE26                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000DE26 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DE2C 6600                       		bne.s	Obj34_Delete
0000DE2E 7002                       		moveq	#2,d0
0000DE30 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
0000DE36 7000                       		moveq	#0,d0
0000DE38 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DE3C 0640 0015                  		addi.w	#$15,d0
0000DE40 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns
0000DE46                            
0000DE46                            Obj34_Delete:
0000DE46 6000 0000                  		bra.w	DeleteObject
0000DE4A                            ; ===========================================================================
0000DE4A 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000DE4C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000DE4E 00E4                       		dc.w $E4
0000DE50 0206                       		dc.b 2,	6
0000DE52 00EA                       		dc.w $EA
0000DE54 0207                       		dc.b 2,	7
0000DE56 00E0                       		dc.w $E0
0000DE58 020A                       		dc.b 2,	$A
0000DE5A                            ; ---------------------------------------------------------------------------
0000DE5A                            ; Title	card configuration data
0000DE5A                            ; Format:
0000DE5A                            ; 4 bytes per item (YYYY XXXX)
0000DE5A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000DE5A                            ; ---------------------------------------------------------------------------
0000DE5A 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000DE6A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000DE7A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000DE8A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000DE9A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000DEAA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000DEBA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000DECA                            ; ===========================================================================
0000DECA                            ; ---------------------------------------------------------------------------
0000DECA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000DECA                            ; ---------------------------------------------------------------------------
0000DECA                            
0000DECA                            Obj39:					; XREF: Obj_Index
0000DECA 7000                       		moveq	#0,d0
0000DECC 1028 0024                  		move.b	$24(a0),d0
0000DED0 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000DED4 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000DED8                            ; ===========================================================================
0000DED8 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000DEDA 0000                       		dc.w loc_C50C-Obj39_Index
0000DEDC 0000                       		dc.w Obj39_Wait-Obj39_Index
0000DEDE                            ; ===========================================================================
0000DEDE                            
0000DEDE                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000DEDE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DEE2 6700                       		beq.s	Obj39_Main	; if yes, branch
0000DEE4 4E75                       		rts	
0000DEE6                            ; ===========================================================================
0000DEE6                            
0000DEE6                            Obj39_Main:
0000DEE6 5428 0024                  		addq.b	#2,$24(a0)
0000DEEA 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000DEF0 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000DEF6 6700                       		beq.s	loc_C4EC	; if not, branch
0000DEF8 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000DEFE                            
0000DEFE                            loc_C4EC:
0000DEFE 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000DF04 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000DF0C 317C 855E 0002             		move.w	#$855E,2(a0)
0000DF12 117C 0000 0001             		move.b	#0,1(a0)
0000DF18 117C 0000 0018             		move.b	#0,$18(a0)
0000DF1E                            
0000DF1E                            loc_C50C:				; XREF: Obj39_Index
0000DF1E 7210                       		moveq	#$10,d1		; set horizontal speed
0000DF20 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DF26 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DF28 6500                       		bcs.s	Obj39_Move
0000DF2A 4441                       		neg.w	d1
0000DF2C                            
0000DF2C                            Obj39_Move:
0000DF2C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DF30 6000 0000                  		bra.w	DisplaySprite
0000DF34                            ; ===========================================================================
0000DF34                            
0000DF34                            Obj39_SetWait:				; XREF: Obj39_Main
0000DF34 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000DF3A 5428 0024                  		addq.b	#2,$24(a0)
0000DF3E 4E75                       		rts	
0000DF40                            ; ===========================================================================
0000DF40                            
0000DF40                            Obj39_Wait:				; XREF: Obj39_Index
0000DF40 1038 F605                  		move.b	($FFFFF605).w,d0
0000DF44 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000DF48 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000DF4A 0828 0000 001A             		btst	#0,$1A(a0)
0000DF50 6600                       		bne.s	Obj39_Display
0000DF52 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000DF56 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000DF58 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DF5C 6000 0000                  		bra.w	DisplaySprite
0000DF60                            ; ===========================================================================
0000DF60                            
0000DF60                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000DF60 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000DF64 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000DF66 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000DF6C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000DF70 6600                       		bne.s	Obj39_Display	; if yes, branch
0000DF72 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set mode to 0 (Sega screen)
0000DF78 6000                       		bra.s	Obj39_Display
0000DF7A                            ; ===========================================================================
0000DF7A                            
0000DF7A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000DF7A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DF80                            
0000DF80                            Obj39_Display:				; XREF: Obj39_ChgMode
0000DF80 6000 0000                  		bra.w	DisplaySprite
0000DF84                            ; ===========================================================================
0000DF84                            ; ---------------------------------------------------------------------------
0000DF84                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000DF84                            ; ---------------------------------------------------------------------------
0000DF84                            
0000DF84                            Obj3A:					; XREF: Obj_Index
0000DF84 7000                       		moveq	#0,d0
0000DF86 1028 0024                  		move.b	$24(a0),d0
0000DF8A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000DF8E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000DF92                            ; ===========================================================================
0000DF92                            Obj3A_Index:	
0000DF92 0000                       		dc.w Obj3A_ChkPLC-Obj3A_Index
0000DF94 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000DF96 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF98 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000DF9A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF9C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000DF9E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DFA0 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000DFA2 0000                       		dc.w loc_C766-Obj3A_Index
0000DFA4                            ; ===========================================================================
0000DFA4                            
0000DFA4                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000DFA4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DFA8 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000DFAA 4E75                       		rts	
0000DFAC                            ; ===========================================================================
0000DFAC                            
0000DFAC                            Obj3A_Main:
0000DFAC 2248                       		movea.l	a0,a1
0000DFAE 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000DFB4 7206                       		moveq	#6,d1
0000DFB6                            
0000DFB6                            Obj3A_Loop:
0000DFB6 12BC 003A                  		move.b	#$3A,0(a1)
0000DFBA 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000DFBE 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000DFC2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DFC6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DFCA 135A 0024                  		move.b	(a2)+,$24(a1)
0000DFCE 101A                       		move.b	(a2)+,d0
0000DFD0 0C00 0006                  		cmpi.b	#6,d0
0000DFD4 6600                       		bne.s	loc_C5CA
0000DFD6 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000DFDA                            
0000DFDA                            loc_C5CA:
0000DFDA 1340 001A                  		move.b	d0,$1A(a1)
0000DFDE 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000DFE6 337C 8580 0002             		move.w	#$8580,2(a1)
0000DFEC 137C 0000 0001             		move.b	#0,1(a1)
0000DFF2 43E9 0040                  		lea	$40(a1),a1
0000DFF6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000DFFA                            
0000DFFA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000DFFA 7210                       		moveq	#$10,d1		; set horizontal speed
0000DFFC 3028 0030                  		move.w	$30(a0),d0
0000E000 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E004 6700                       		beq.s	loc_C61A	; if yes, branch
0000E006 6C00                       		bge.s	Obj3A_Move
0000E008 4441                       		neg.w	d1
0000E00A                            
0000E00A                            Obj3A_Move:
0000E00A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E00E                            
0000E00E                            loc_C5FE:				; XREF: loc_C61A
0000E00E 3028 0008                  		move.w	8(a0),d0
0000E012 6B00                       		bmi.s	locret_C60E
0000E014 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E018 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E01A 6000 0000                  		bra.w	DisplaySprite
0000E01E                            ; ===========================================================================
0000E01E                            
0000E01E                            locret_C60E:
0000E01E 4E75                       		rts	
0000E020                            ; ===========================================================================
0000E020                            
0000E020                            loc_C610:				; XREF: loc_C61A
0000E020 117C 000E 0024             		move.b	#$E,$24(a0)
0000E026 6000 0000                  		bra.w	Obj3A_ChkPos2
0000E02A                            ; ===========================================================================
0000E02A                            
0000E02A                            loc_C61A:				; XREF: Obj3A_ChkPos
0000E02A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E030 67EE                       		beq.s	loc_C610
0000E032 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E038 66D4                       		bne.s	loc_C5FE
0000E03A 5428 0024                  		addq.b	#2,$24(a0)
0000E03E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E044                            
0000E044                            Obj3A_Wait:				; XREF: Obj3A_Index
0000E044 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E048 6600                       		bne.s	Obj3A_Display
0000E04A 5428 0024                  		addq.b	#2,$24(a0)
0000E04E                            
0000E04E                            Obj3A_Display:
0000E04E 6000 0000                  		bra.w	DisplaySprite
0000E052                            ; ===========================================================================
0000E052                            
0000E052                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000E052 6100 0000                  		bsr.w	DisplaySprite
0000E056 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000E05C 7000                       		moveq	#0,d0
0000E05E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000E062 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000E064 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E068 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000E06E                            
0000E06E                            Obj3A_RingBonus:
0000E06E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E072 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000E074 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E078 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E07E                            
0000E07E                            Obj3A_ChkBonus:
0000E07E 4A40                       		tst.w	d0		; is there any bonus?
0000E080 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000E082 303C 00C5                  		move.w	#$C5,d0
0000E086 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E08C 5428 0024                  		addq.b	#2,$24(a0)
0000E090 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000E096 6600                       		bne.s	Obj3A_SetDelay
0000E098 5828 0024                  		addq.b	#4,$24(a0)
0000E09C                            
0000E09C                            Obj3A_SetDelay:
0000E09C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E0A2                            
0000E0A2                            locret_C692:
0000E0A2 4E75                       		rts	
0000E0A4                            ; ===========================================================================
0000E0A4                            
0000E0A4                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000E0A4 4EB9 0000 0000             		jsr	AddPoints
0000E0AA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E0AE 0200 0003                  		andi.b	#3,d0
0000E0B2 66EE                       		bne.s	locret_C692
0000E0B4 303C 00CD                  		move.w	#$CD,d0
0000E0B8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E0BE                            ; ===========================================================================
0000E0BE                            
0000E0BE                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000E0BE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E0C2 0240 0007                  		andi.w	#7,d0
0000E0C6 E748                       		lsl.w	#3,d0
0000E0C8 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000E0CC 0241 0003                  		andi.w	#3,d1
0000E0D0 D241                       		add.w	d1,d1
0000E0D2 D041                       		add.w	d1,d0
0000E0D4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E0D8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000E0DC 4A40                       		tst.w	d0
0000E0DE 6600                       		bne.s	Obj3A_ChkSS
0000E0E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000E0E6 6000                       		bra.s	Obj3A_Display2
0000E0E8                            ; ===========================================================================
0000E0E8                            
0000E0E8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000E0E8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000E0EC 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000E0F0 6700                       		beq.s	loc_C6EA	; if not, branch
0000E0F2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000E0F8 6000                       		bra.s	Obj3A_Display2
0000E0FA                            ; ===========================================================================
0000E0FA                            
0000E0FA                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000E0FA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E100                            
0000E100                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000E100 6000 0000                  		bra.w	DisplaySprite
0000E104                            ; ===========================================================================
0000E104                            ; ---------------------------------------------------------------------------
0000E104                            ; Level	order array
0000E104                            ; ---------------------------------------------------------------------------
0000E104                            LevelOrder:
0000E104 0200 0000                  		dc.w $0200, $0000 	;GHZ1 -> MZ
0000E108 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E10C 0101 0102                  		dc.w $0101, $0102 	;LZ1 -> LZ2 -> LZ3
0000E110 0300 0502                  		dc.w $0300, $0502 	;LZ3 -> SLZ1 or if act 4 -> FZ
0000E114 0201 0400                  		dc.w $0201, $0400 	;MZ1 -> MZ2 -> SYZ 
0000E118 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E11C 0301 0302                  		dc.w $0301, $0302 	;SLZ1 -> SLZ2 -> SLZ3
0000E120 0500 0000                  		dc.w $0500, $0000 	;SLZ3 -> SYZ1
0000E124 0401 0402                  		dc.w $0401, $0402 	;SYZ1 -> SYZ2 -> SYZ3
0000E128 0100 0000                  		dc.w $0100, $0000 	;SYZ3 -> LZ1?
0000E12C 0501 0103                  		dc.w $0501, $0103 	;SBZ1 -> SBZ2 -> LZ4
0000E130                            		even
0000E130                            ; ===========================================================================
0000E130                            
0000E130                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000E130 7220                       		moveq	#$20,d1		; set horizontal speed
0000E132 3028 0032                  		move.w	$32(a0),d0
0000E136 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000E13A 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000E13C 6C00                       		bge.s	Obj3A_Move2
0000E13E 4441                       		neg.w	d1
0000E140                            
0000E140                            Obj3A_Move2:
0000E140 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E144 3028 0008                  		move.w	8(a0),d0
0000E148 6B00                       		bmi.s	locret_C748
0000E14A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E14E 6400                       		bcc.s	locret_C748	; if yes, branch
0000E150 6000 0000                  		bra.w	DisplaySprite
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            locret_C748:
0000E154 4E75                       		rts	
0000E156                            ; ===========================================================================
0000E156                            
0000E156                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000E156 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E15C 6600 0000                  		bne.w	DeleteObject
0000E160 5428 0024                  		addq.b	#2,$24(a0)
0000E164 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000E168 303C 008D                  		move.w	#$8D,d0
0000E16C 4EF9 0000 12C6             		jmp	(PlaySound).l	; play FZ music
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            loc_C766:				; XREF: Obj3A_Index
0000E172 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000E176 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000E17C 6700 0000                  		beq.w	DeleteObject
0000E180 4E75                       		rts	
0000E182                            ; ===========================================================================
0000E182 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000E188 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000E18A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000E190 0201                       		dc.b 2,	1
0000E192 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000E198 0206                       		dc.b 2,	6
0000E19A 0520 0120 00EC             		dc.w $520, $120, $EC
0000E1A0 0202                       		dc.b 2,	2
0000E1A2 0540 0120 00FC             		dc.w $540, $120, $FC
0000E1A8 0203                       		dc.b 2,	3
0000E1AA 0560 0120 010C             		dc.w $560, $120, $10C
0000E1B0 0204                       		dc.b 2,	4
0000E1B2 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000E1B8 0205                       		dc.b 2,	5
0000E1BA                            ; ===========================================================================
0000E1BA                            ; ---------------------------------------------------------------------------
0000E1BA                            ; Object 7E - special stage results screen
0000E1BA                            ; ---------------------------------------------------------------------------
0000E1BA                            
0000E1BA                            Obj7E:					; XREF: Obj_Index
0000E1BA 7000                       		moveq	#0,d0
0000E1BC 1028 0024                  		move.b	$24(a0),d0
0000E1C0 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000E1C4 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000E1C8                            ; ===========================================================================
0000E1C8 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000E1CA 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000E1CC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1CE 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000E1D0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1D2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1D4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1D6 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000E1D8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1DA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1DC 0000                       		dc.w loc_C91A-Obj7E_Index
0000E1DE                            ; ===========================================================================
0000E1DE                            
0000E1DE                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000E1DE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E1E2 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000E1E4 4E75                       		rts	
0000E1E6                            ; ===========================================================================
0000E1E6                            
0000E1E6                            Obj7E_Main:
0000E1E6 2248                       		movea.l	a0,a1
0000E1E8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000E1EE 7203                       		moveq	#3,d1
0000E1F0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000E1F6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000E1F8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E1FA                            
0000E1FA                            Obj7E_Loop:
0000E1FA 12BC 007E                  		move.b	#$7E,0(a1)
0000E1FE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000E202 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E206 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E20A 135A 0024                  		move.b	(a2)+,$24(a1)
0000E20E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E212 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000E21A 337C 8580 0002             		move.w	#$8580,2(a1)
0000E220 137C 0000 0001             		move.b	#0,1(a1)
0000E226 43E9 0040                  		lea	$40(a1),a1
0000E22A 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000E22E                            
0000E22E 7007                       		moveq	#7,d0
0000E230 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000E234 6700                       		beq.s	loc_C842
0000E236 7000                       		moveq	#0,d0
0000E238 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E23C 6600                       		bne.s	loc_C842	; if not, branch
0000E23E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E240 317C 0018 0008             		move.w	#$18,8(a0)
0000E246 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000E24C                            
0000E24C                            loc_C842:
0000E24C 1140 001A                  		move.b	d0,$1A(a0)
0000E250                            
0000E250                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000E250 7210                       		moveq	#$10,d1		; set horizontal speed
0000E252 3028 0030                  		move.w	$30(a0),d0
0000E256 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E25A 6700                       		beq.s	loc_C86C	; if yes, branch
0000E25C 6C00                       		bge.s	Obj7E_Move
0000E25E 4441                       		neg.w	d1
0000E260                            
0000E260                            Obj7E_Move:
0000E260 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E264                            
0000E264                            loc_C85A:				; XREF: loc_C86C
0000E264 3028 0008                  		move.w	8(a0),d0
0000E268 6B00                       		bmi.s	locret_C86A
0000E26A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E26E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E270 6000 0000                  		bra.w	DisplaySprite
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            locret_C86A:
0000E274 4E75                       		rts	
0000E276                            ; ===========================================================================
0000E276                            
0000E276                            loc_C86C:				; XREF: Obj7E_ChkPos
0000E276 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E27C 66E6                       		bne.s	loc_C85A
0000E27E 5428 0024                  		addq.b	#2,$24(a0)
0000E282 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E288 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000E28E                            
0000E28E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000E28E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E292 6600                       		bne.s	Obj7E_Display
0000E294 5428 0024                  		addq.b	#2,$24(a0)
0000E298                            
0000E298                            Obj7E_Display:
0000E298 6000 0000                  		bra.w	DisplaySprite
0000E29C                            ; ===========================================================================
0000E29C                            
0000E29C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000E29C 6100 0000                  		bsr.w	DisplaySprite
0000E2A0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000E2A6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E2AA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E2AC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E2B2 700A                       		moveq	#10,d0		; add 10 to score
0000E2B4 4EB9 0000 0000             		jsr	AddPoints
0000E2BA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E2BE 0200 0003                  		andi.b	#3,d0
0000E2C2 6600                       		bne.s	locret_C8EA
0000E2C4 303C 00CD                  		move.w	#$CD,d0
0000E2C8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E2CE                            ; ===========================================================================
0000E2CE                            
0000E2CE                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000E2CE 303C 00C5                  		move.w	#$C5,d0
0000E2D2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E2D8 5428 0024                  		addq.b	#2,$24(a0)
0000E2DC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E2E2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000E2E8 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E2EA 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000E2F0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000E2F4                            
0000E2F4                            locret_C8EA:
0000E2F4 4E75                       		rts	
0000E2F6                            ; ===========================================================================
0000E2F6                            
0000E2F6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000E2F6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E2FC 6000 0000                  		bra.w	DisplaySprite
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            Obj7E_Continue:				; XREF: Obj7E_Index
0000E300 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000E306 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000E30C 303C 00BF                  		move.w	#$BF,d0
0000E310 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play continues music
0000E316 5428 0024                  		addq.b	#2,$24(a0)
0000E31A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000E320 6000 0000                  		bra.w	DisplaySprite
0000E324                            ; ===========================================================================
0000E324                            
0000E324                            loc_C91A:				; XREF: Obj7E_Index
0000E324 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E328 0200 000F                  		andi.b	#$F,d0
0000E32C 6600                       		bne.s	Obj7E_Display2
0000E32E 0868 0000 001A             		bchg	#0,$1A(a0)
0000E334                            
0000E334                            Obj7E_Display2:
0000E334 6000 0000                  		bra.w	DisplaySprite
0000E338                            ; ===========================================================================
0000E338 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E33E 0200                       		dc.b 2,	0		; rountine number, frame number
0000E340 0320 0120 0118             		dc.w $320, $120, $118
0000E346 0201                       		dc.b 2,	1
0000E348 0360 0120 0128             		dc.w $360, $120, $128
0000E34E 0202                       		dc.b 2,	2
0000E350 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E356 0203                       		dc.b 2,	3
0000E358 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E35E 0206                       		dc.b 2,	6
0000E360                            ; ===========================================================================
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            ; Object 7F - chaos emeralds from the special stage results screen
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            
0000E360                            Obj7F:					; XREF: Obj_Index
0000E360 7000                       		moveq	#0,d0
0000E362 1028 0024                  		move.b	$24(a0),d0
0000E366 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000E36A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000E36E                            ; ===========================================================================
0000E36E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000E370 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000E372                            
0000E372                            ; ---------------------------------------------------------------------------
0000E372                            ; X-axis positions for chaos emeralds
0000E372                            ; ---------------------------------------------------------------------------
0000E372 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E37E                            ; ===========================================================================
0000E37E                            
0000E37E                            Obj7F_Main:				; XREF: Obj7F_Index
0000E37E 2248                       		movea.l	a0,a1
0000E380 45F9 0000 E372             		lea	(Obj7F_PosData).l,a2
0000E386 7400                       		moveq	#0,d2
0000E388 7200                       		moveq	#0,d1
0000E38A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000E38E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E390 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E394                            
0000E394                            Obj7F_Loop:
0000E394 12BC 007F                  		move.b	#$7F,0(a1)
0000E398 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000E39C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000E3A2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000E3A6 1633 2000                  		move.b	(a3,d2.w),d3
0000E3AA 1343 001A                  		move.b	d3,$1A(a1)
0000E3AE 1343 001C                  		move.b	d3,$1C(a1)
0000E3B2 5202                       		addq.b	#1,d2
0000E3B4 5429 0024                  		addq.b	#2,$24(a1)
0000E3B8 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000E3C0 337C 8541 0002             		move.w	#$8541,2(a1)
0000E3C6 137C 0000 0001             		move.b	#0,1(a1)
0000E3CC 43E9 0040                  		lea	$40(a1),a1	; next object
0000E3D0 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000E3D4                            
0000E3D4                            Obj7F_Flash:				; XREF: Obj7F_Index
0000E3D4 1028 001A                  		move.b	$1A(a0),d0
0000E3D8 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000E3DE 0C00 0006                  		cmpi.b	#6,d0
0000E3E2 6600                       		bne.s	Obj7F_Display
0000E3E4 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000E3EA                            
0000E3EA                            Obj7F_Display:
0000E3EA 6000 0000                  		bra.w	DisplaySprite
0000E3EE                            ; ===========================================================================
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            ; Sprite mappings - zone title cards
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            Map_obj34:	
0000E3EE                            
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            Map_obj39:
0000E3EE                            	include "_maps\obj34_title_card.asm"
0000E3EE                            ; --------------------------------------------------------------------------------
0000E3EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E3EE                            ; --------------------------------------------------------------------------------
0000E3EE                            
0000E3EE                            SME_gHoYM:	
0000E3EE 0000 0000                  		dc.w SME_gHoYM_18-SME_gHoYM, SME_gHoYM_41-SME_gHoYM	
0000E3F2 0000 0000                  		dc.w SME_gHoYM_D8-SME_gHoYM, SME_gHoYM_110-SME_gHoYM	
0000E3F6 0000 0000                  		dc.w SME_gHoYM_198-SME_gHoYM, SME_gHoYM_1F8-SME_gHoYM	
0000E3FA 0000 0000                  		dc.w SME_gHoYM_253-SME_gHoYM, SME_gHoYM_272-SME_gHoYM	
0000E3FE 0000 0000                  		dc.w SME_gHoYM_27D-SME_gHoYM, SME_gHoYM_288-SME_gHoYM	
0000E402 0000 0000                  		dc.w SME_gHoYM_293-SME_gHoYM, SME_gHoYM_2D5-SME_gHoYM	
0000E406 08                         SME_gHoYM_18:	dc.b 8	
0000E407 F805 0042 D4               		dc.b $F8, 5, 0, $42, $D4	
0000E40C F805 0046 E4               		dc.b $F8, 5, 0, $46, $E4	
0000E411 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
0000E416 F805 0032 04               		dc.b $F8, 5, 0, $32, 4	
0000E41B F805 003A 14               		dc.b $F8, 5, 0, $3A, $14	
0000E420 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
0000E425 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C	
0000E42A F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
0000E42F 1E                         SME_gHoYM_41:	dc.b $1E	
0000E430 F805 0032 84               		dc.b $F8, 5, 0, $32, $84	
0000E435 F805 001C 94               		dc.b $F8, 5, 0, $1C, $94	
0000E43A F800 0056 A4               		dc.b $F8, 0, 0, $56, $A4	
0000E43F F805 003E B4               		dc.b $F8, 5, 0, $3E, $B4	
0000E444 F805 001C C4               		dc.b $F8, 5, 0, $1C, $C4	
0000E449 F801 0020 D4               		dc.b $F8, 1, 0, $20, $D4	
0000E44E F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	
0000E453 F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E458 F805 003E FC               		dc.b $F8, 5, 0, $3E, $FC	
0000E45D F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000E462 F805 002E 1C               		dc.b $F8, 5, 0, $2E, $1C	
0000E467 F800 0056 3C               		dc.b $F8, 0, 0, $56, $3C	
0000E46C F805 004A 4C               		dc.b $F8, 5, 0, $4A, $4C	
0000E471 F805 0032 5C               		dc.b $F8, 5, 0, $32, $5C	
0000E476 F805 0046 6C               		dc.b $F8, 5, 0, $46, $6C	
0000E47B F800 0056 7C               		dc.b $F8, 0, 0, $56, $7C	
0000E480 F805 0014 8C               		dc.b $F8, 5, 0, $14, $8C	
0000E485 F805 0046 9C               		dc.b $F8, 5, 0, $46, $9C	
0000E48A F805 0008 AC               		dc.b $F8, 5, 0, 8, $AC	
0000E48F F805 0022 BC               		dc.b $F8, 5, 0, $22, $BC	
0000E494 F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E499 F805 000C DC               		dc.b $F8, 5, 0, $C, $DC	
0000E49E F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E4A3 F805 0046 FC               		dc.b $F8, 5, 0, $46, $FC	
0000E4A8 F805 0036 0C               		dc.b $F8, 5, 0, $36, $C	
0000E4AD F800 0056 1C               		dc.b $F8, 0, 0, $56, $1C	
0000E4B2 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	
0000E4B7 F805 0032 3C               		dc.b $F8, 5, 0, $32, $3C	
0000E4BC F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	
0000E4C1 0BF8 0500 0C               		dc.b $B, $F8, 5, 0, $C	
0000E4C6 0B                         SME_gHoYM_D8:	dc.b $B	
0000E4C7 F805 000C A4               		dc.b $F8, 5, 0, $C, $A4	
0000E4CC F805 004E B4               		dc.b $F8, 5, 0, $4E, $B4	
0000E4D1 F801 0020 C4               		dc.b $F8, 1, 0, $20, $C4	
0000E4D6 F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E4DB F805 002E DC               		dc.b $F8, 5, 0, $2E, $DC	
0000E4E0 F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E4E5 F805 000C FC               		dc.b $F8, 5, 0, $C, $FC	
0000E4EA F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000E4EF F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C	
0000E4F4 F805 003A 2C               		dc.b $F8, 5, 0, $3A, $2C	
0000E4F9 F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	
0000E4FE 1B                         SME_gHoYM_110:	dc.b $1B	
0000E4FF F801 0020 CC               		dc.b $F8, 1, 0, $20, $CC	
0000E504 F800 0056 D4               		dc.b $F8, 0, 0, $56, $D4	
0000E509 F805 0042 E4               		dc.b $F8, 5, 0, $42, $E4	
0000E50E F805 001C F4               		dc.b $F8, 5, 0, $1C, $F4	
0000E513 F801 0020 04               		dc.b $F8, 1, 0, $20, 4	
0000E518 F805 002E 0C               		dc.b $F8, 5, 0, $2E, $C	
0000E51D F805 0022 1C               		dc.b $F8, 5, 0, $22, $1C	
0000E522 F800 0056 2C               		dc.b $F8, 0, 0, $56, $2C	
0000E527 F801 0020 3C               		dc.b $F8, 1, 0, $20, $3C	
0000E52C F800 0056 44               		dc.b $F8, 0, 0, $56, $44	
0000E531 F805 001C 54               		dc.b $F8, 5, 0, $1C, $54	
0000E536 F805 0000 64               		dc.b $F8, 5, 0, 0, $64	
0000E53B F805 0046 74               		dc.b $F8, 5, 0, $46, $74	
0000E540 F805 0010 84               		dc.b $F8, 5, 0, $10, $84	
0000E545 F800 0056 94               		dc.b $F8, 0, 0, $56, $94	
0000E54A F805 0000 A4               		dc.b $F8, 5, 0, 0, $A4	
0000E54F F805 0036 B4               		dc.b $F8, 5, 0, $36, $B4	
0000E554 F805 0036 C4               		dc.b $F8, 5, 0, $36, $C4	
0000E559 F805 0010 D4               		dc.b $F8, 5, 0, $10, $D4	
0000E55E F805 002E E4               		dc.b $F8, 5, 0, $2E, $E4	
0000E563 F805 000C F4               		dc.b $F8, 5, 0, $C, $F4	
0000E568 F801 0020 04               		dc.b $F8, 1, 0, $20, 4	
0000E56D F805 0008 0C               		dc.b $F8, 5, 0, 8, $C	
0000E572 F801 0020 1C               		dc.b $F8, 1, 0, $20, $1C	
0000E577 F805 0042 24               		dc.b $F8, 5, 0, $42, $24	
0000E57C F801 0020 34               		dc.b $F8, 1, 0, $20, $34	
0000E581 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	
0000E586 13                         SME_gHoYM_198:	dc.b $13	
0000E587 F805 002A 8C               		dc.b $F8, 5, 0, $2A, $8C	
0000E58C F805 004A 9C               		dc.b $F8, 5, 0, $4A, $9C	
0000E591 F800 0056 AC               		dc.b $F8, 0, 0, $56, $AC	
0000E596 F805 0042 BC               		dc.b $F8, 5, 0, $42, $BC	
0000E59B F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E5A0 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
0000E5A5 F805 0042 EC               		dc.b $F8, 5, 0, $42, $EC	
0000E5AA F805 001C FC               		dc.b $F8, 5, 0, $1C, $FC	
0000E5AF F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	
0000E5B4 F805 0014 1C               		dc.b $F8, 5, 0, $14, $1C	
0000E5B9 F805 0010 2C               		dc.b $F8, 5, 0, $10, $2C	
0000E5BE F805 0010 3C               		dc.b $F8, 5, 0, $10, $3C	
0000E5C3 F805 0026 4C               		dc.b $F8, 5, 0, $26, $4C	
0000E5C8 F800 0056 5C               		dc.b $F8, 0, 0, $56, $5C	
0000E5CD F805 0014 6C               		dc.b $F8, 5, 0, $14, $6C	
0000E5D2 F805 0046 7C               		dc.b $F8, 5, 0, $46, $7C	
0000E5D7 F805 002E 8C               		dc.b $F8, 5, 0, $2E, $8C	
0000E5DC F805 002E 9C               		dc.b $F8, 5, 0, $2E, $9C	
0000E5E1 F805 004A AC               		dc.b $F8, 5, 0, $4A, $AC	
0000E5E6 12                         SME_gHoYM_1F8:	dc.b $12	
0000E5E7 F805 004A 84               		dc.b $F8, 5, 0, $4A, $84	
0000E5EC F805 0032 94               		dc.b $F8, 5, 0, $32, $94	
0000E5F1 F805 0046 A4               		dc.b $F8, 5, 0, $46, $A4	
0000E5F6 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	
0000E5FB F805 0010 D4               		dc.b $F8, 5, 0, $10, $D4	
0000E600 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
0000E605 F801 0020 F4               		dc.b $F8, 1, 0, $20, $F4	
0000E60A F805 002E FC               		dc.b $F8, 5, 0, $2E, $FC	
0000E60F F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	
0000E614 F805 001C 1C               		dc.b $F8, 5, 0, $1C, $1C	
0000E619 F805 0010 2C               		dc.b $F8, 5, 0, $10, $2C	
0000E61E F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
0000E623 F805 0026 4C               		dc.b $F8, 5, 0, $26, $4C	
0000E628 F800 0056 5C               		dc.b $F8, 0, 0, $56, $5C	
0000E62D F805 002E 6C               		dc.b $F8, 5, 0, $2E, $6C	
0000E632 F805 0032 7C               		dc.b $F8, 5, 0, $32, $7C	
0000E637 F805 0010 8C               		dc.b $F8, 5, 0, $10, $8C	
0000E63C 06F8 0500 18               		dc.b 6, $F8, 5, 0, $18	
0000E641 06                         SME_gHoYM_253:	dc.b 6	
0000E642 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	
0000E647 F805 001C DC               		dc.b $F8, 5, 0, $1C, $DC	
0000E64C F805 002E EC               		dc.b $F8, 5, 0, $2E, $EC	
0000E651 F805 002E FC               		dc.b $F8, 5, 0, $2E, $FC	
0000E656 F805 004A 0C               		dc.b $F8, 5, 0, $4A, $C	
0000E65B F805 0080 BC               		dc.b $F8, 5, 0, $80, $BC	
0000E660 02                         SME_gHoYM_272:	dc.b 2	
0000E661 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E666 F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
0000E66B 02                         SME_gHoYM_27D:	dc.b 2	
0000E66C 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E671 F406 0060 08               		dc.b $F4, 6, 0, $60, 8	
0000E676 02                         SME_gHoYM_288:	dc.b 2	
0000E677 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E67C F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
0000E681 0D                         SME_gHoYM_293:	dc.b $D	
0000E682 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
0000E687 E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
0000E68C EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
0000E691 F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
0000E696 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
0000E69B 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
0000E6A0 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
0000E6A5 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
0000E6AA EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
0000E6AF F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
0000E6B4 FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
0000E6B9 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
0000E6BE 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
0000E6C3 05                         SME_gHoYM_2D5:	dc.b 5	
0000E6C4 F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
0000E6C9 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
0000E6CE F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
0000E6D3 F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
0000E6D8 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	
0000E6DE 00                         		even
0000E6DE 00                         		even
0000E6DE                            
0000E6DE                            ; ---------------------------------------------------------------------------
0000E6DE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E6DE                            ; ---------------------------------------------------------------------------
0000E6DE                            Map_obj3A:	
0000E6DE                            	include "_maps\obj3A_passed.asm"
0000E6DE                            ; --------------------------------------------------------------------------------
0000E6DE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E6DE                            ; --------------------------------------------------------------------------------
0000E6DE                            
0000E6DE                            SME_qMDIt:	
0000E6DE 0000 0000                  		dc.w SME_qMDIt_10-SME_qMDIt, SME_qMDIt_43-SME_qMDIt	
0000E6E2 0000 0000                  		dc.w SME_qMDIt_5D-SME_qMDIt, SME_qMDIt_7C-SME_qMDIt	
0000E6E6 0000 0000                  		dc.w SME_qMDIt_9B-SME_qMDIt, SME_qMDIt_BA-SME_qMDIt	
0000E6EA 0000 0000                  		dc.w SME_qMDIt_FC-SME_qMDIt, SME_qMDIt_107-SME_qMDIt	
0000E6EE 0A                         SME_qMDIt_10:	dc.b $A	
0000E6EF F805 0026 B4               		dc.b $F8, 5, 0, $26, $B4	
0000E6F4 F805 0032 C4               		dc.b $F8, 5, 0, $32, $C4	
0000E6F9 F805 0046 D4               		dc.b $F8, 5, 0, $46, $D4	
0000E6FE F805 0010 E4               		dc.b $F8, 5, 0, $10, $E4	
0000E703 F805 003A F4               		dc.b $F8, 5, 0, $3A, $F4	
0000E708 F800 0056 04               		dc.b $F8, 0, 0, $56, 4	
0000E70D F805 002A 14               		dc.b $F8, 5, 0, $2A, $14	
0000E712 F805 0010 24               		dc.b $F8, 5, 0, $10, $24	
0000E717 F805 002E 34               		dc.b $F8, 5, 0, $2E, $34	
0000E71C F805 0042 44               		dc.b $F8, 5, 0, $42, $44	
0000E721 05                         SME_qMDIt_43:	dc.b 5	
0000E722 F805 003A D0               		dc.b $F8, 5, 0, $3A, $D0	
0000E727 F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	
0000E72C F805 0018 E8               		dc.b $F8, 5, 0, $18, $E8	
0000E731 F805 001C F8               		dc.b $F8, 5, 0, $1C, $F8	
0000E736 F805 0042 08               		dc.b $F8, 5, 0, $42, 8	
0000E73B 06                         SME_qMDIt_5D:	dc.b 6	
0000E73C F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0	
0000E741 F801 0162 D0               		dc.b $F8, 1, 1, $62, $D0	
0000E746 F809 0164 18               		dc.b $F8, 9, 1, $64, $18	
0000E74B F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30	
0000E750 F704 006E CD               		dc.b $F7, 4, 0, $6E, $CD	
0000E755 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD	
0000E75A 06                         SME_qMDIt_7C:	dc.b 6	
0000E75B F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0	
0000E760 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9	
0000E765 F704 006E F6               		dc.b $F7, 4, 0, $6E, $F6	
0000E76A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6	
0000E76F F80D FFF0 28               		dc.b $F8, $D, $FF, $F0, $28	
0000E774 F801 0170 48               		dc.b $F8, 1, 1, $70, $48	
0000E779 06                         SME_qMDIt_9B:	dc.b 6	
0000E77A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0	
0000E77F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9	
0000E784 F704 006E F6               		dc.b $F7, 4, 0, $6E, $F6	
0000E789 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6	
0000E78E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8, $28	
0000E793 F801 0170 48               		dc.b $F8, 1, 1, $70, $48	
0000E798 0D                         SME_qMDIt_BA:	dc.b $D	
0000E799 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
0000E79E E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
0000E7A3 EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
0000E7A8 F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
0000E7AD 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
0000E7B2 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
0000E7B7 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
0000E7BC FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
0000E7C1 EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
0000E7C6 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
0000E7CB FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
0000E7D0 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
0000E7D5 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
0000E7DA 02                         SME_qMDIt_FC:	dc.b 2	
0000E7DB 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E7E0 F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
0000E7E5 02                         SME_qMDIt_107:	dc.b 2	
0000E7E6 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E7EB F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
0000E7F0                            		even
0000E7F0                            		even
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - special stage results screen
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            Map_obj7E:	
0000E7F0 0000                       		dc.w byte_CCAC-Map_obj7E
0000E7F2 0000                       		dc.w byte_CCEE-Map_obj7E
0000E7F4 0000                       		dc.w byte_CD0D-Map_obj7E
0000E7F6 0000                       		dc.w byte_CB47-Map_obj7E
0000E7F8 0000                       		dc.w byte_CD31-Map_obj7E
0000E7FA 0000                       		dc.w byte_CD46-Map_obj7E
0000E7FC 0000                       		dc.w byte_CD5B-Map_obj7E
0000E7FE 0000                       		dc.w byte_CD6B-Map_obj7E
0000E800 0000                       		dc.w byte_CDA8-Map_obj7E
0000E802 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E803 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E808 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E80D F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E812 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E817 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E81C F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E821 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E826 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E82B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E830 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E835 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E83A F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E83F F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E844 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E845 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E84A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E84F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E854 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E859 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E85E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E863 07                         byte_CD0D:	dc.b 7
0000E864 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E869 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E86E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E873 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E878 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E87D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E882 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E887 04                         byte_CD31:	dc.b 4
0000E888 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E88D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E892 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E897 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E89C 04                         byte_CD46:	dc.b 4
0000E89D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E8A2 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E8A7 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E8AC F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E8B1 03                         byte_CD5B:	dc.b 3
0000E8B2 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E8B7 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E8BC F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E8C1 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E8C2 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E8C7 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E8CC F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E8D1 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E8D6 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E8DB F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E8E0 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E8E5 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E8EA F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E8EF F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E8F4 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E8F9 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E8FE 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E8FF F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E904 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E909 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E90E F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E913 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E918 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E91D F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E922 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E927 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E92C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E931 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E936 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E93B F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E940 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E945 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E94A                            		even
0000E94A 0D                         byte_CB47:	dc.b $D			; Oval
0000E94B E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E950 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E955 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E95A F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E95F 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E964 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E969 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E96E FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E973 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E978 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E97D FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E982 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E987 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E98C 00                         		dc.b 0
0000E98D                            ; ---------------------------------------------------------------------------
0000E98D                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E98D                            ; ---------------------------------------------------------------------------
0000E98D                            Map_obj7F:
0000E98D                            	include "_maps\obj7F.asm"
0000E98D                            ; ---------------------------------------------------------------------------
0000E98D                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E98D                            ; ---------------------------------------------------------------------------
0000E98D 0000                       		dc.w byte_CE02-Map_obj7F
0000E98F 0000                       		dc.w byte_CE08-Map_obj7F
0000E991 0000                       		dc.w byte_CE0E-Map_obj7F
0000E993 0000                       		dc.w byte_CE14-Map_obj7F
0000E995 0000                       		dc.w byte_CE1A-Map_obj7F
0000E997 0000                       		dc.w byte_CE20-Map_obj7F
0000E999 0000                       		dc.w byte_CE26-Map_obj7F
0000E99B 01                         byte_CE02:	dc.b 1
0000E99C F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000E9A1 01                         byte_CE08:	dc.b 1
0000E9A2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E9A7 01                         byte_CE0E:	dc.b 1
0000E9A8 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E9AD 01                         byte_CE14:	dc.b 1
0000E9AE F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E9B3 01                         byte_CE1A:	dc.b 1
0000E9B4 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000E9B9 01                         byte_CE20:	dc.b 1
0000E9BA F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000E9BF 00                         byte_CE26:	dc.b 0			; Blank frame
0000E9C0                            		even
0000E9C0                            		even
0000E9C0                            
0000E9C0                            ; ===========================================================================
0000E9C0                            ; ---------------------------------------------------------------------------
0000E9C0                            ; Object 36 - spikes
0000E9C0                            ; ---------------------------------------------------------------------------
0000E9C0                            
0000E9C0                            Obj36:					; XREF: Obj_Index
0000E9C0 7000                       		moveq	#0,d0
0000E9C2 1028 0024                  		move.b	$24(a0),d0
0000E9C6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E9CA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E9CE                            ; ===========================================================================
0000E9CE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E9D0 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E9D2                            
0000E9D2 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E9D4 0110                       		dc.b 1,	$10
0000E9D6 0204                       		dc.b 2,	4
0000E9D8 031C                       		dc.b 3,	$1C
0000E9DA 0440                       		dc.b 4,	$40
0000E9DC 0510                       		dc.b 5,	$10
0000E9DE                            ; ===========================================================================
0000E9DE                            
0000E9DE                            Obj36_Main:				; XREF: Obj36_Index
0000E9DE 5428 0024                  		addq.b	#2,$24(a0)
0000E9E2 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E9EA 317C 051B 0002             		move.w	#$51B,2(a0)
0000E9F0 0028 0004 0001             		ori.b	#4,1(a0)
0000E9F6 117C 0004 0018             		move.b	#4,$18(a0)
0000E9FC 1028 0028                  		move.b	$28(a0),d0
0000EA00 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA06 0240 00F0                  		andi.w	#$F0,d0
0000EA0A 43F9 0000 E9D2             		lea	(Obj36_Var).l,a1
0000EA10 E648                       		lsr.w	#3,d0
0000EA12 D2C0                       		adda.w	d0,a1
0000EA14 1159 001A                  		move.b	(a1)+,$1A(a0)
0000EA18 1159 0019                  		move.b	(a1)+,$19(a0)
0000EA1C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000EA22 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000EA28                            
0000EA28                            Obj36_Solid:				; XREF: Obj36_Index
0000EA28 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000EA2C 343C 0004                  		move.w	#4,d2
0000EA30 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000EA36 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000EA38 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000EA3E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000EA40 343C 0014                  		move.w	#$14,d2
0000EA44                            
0000EA44                            ; Spikes types $1x and $5x face	sideways
0000EA44                            
0000EA44                            Obj36_SideWays:				; XREF: Obj36_Solid
0000EA44 323C 001B                  		move.w	#$1B,d1
0000EA48 3602                       		move.w	d2,d3
0000EA4A 5243                       		addq.w	#1,d3
0000EA4C 3828 0008                  		move.w	8(a0),d4
0000EA50 6100 0000                  		bsr.w	SolidObject
0000EA54 0828 0003 0022             		btst	#3,$22(a0)
0000EA5A 6600                       		bne.s	Obj36_Display
0000EA5C 0C44 0001                  		cmpi.w	#1,d4
0000EA60 6700                       		beq.s	Obj36_Hurt
0000EA62 6000                       		bra.s	Obj36_Display
0000EA64                            ; ===========================================================================
0000EA64                            
0000EA64                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EA64                            
0000EA64                            Obj36_Upright:				; XREF: Obj36_Solid
0000EA64 7200                       		moveq	#0,d1
0000EA66 1228 0019                  		move.b	$19(a0),d1
0000EA6A 0641 000B                  		addi.w	#$B,d1
0000EA6E 343C 0010                  		move.w	#$10,d2
0000EA72 363C 0011                  		move.w	#$11,d3
0000EA76 3828 0008                  		move.w	8(a0),d4
0000EA7A 6100 0000                  		bsr.w	SolidObject
0000EA7E 0828 0003 0022             		btst	#3,$22(a0)
0000EA84 6600                       		bne.s	Obj36_Hurt
0000EA86 4A44                       		tst.w	d4
0000EA88 6A00                       		bpl.s	Obj36_Display
0000EA8A                            
0000EA8A                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000EA8A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000EA8E 6600                       		bne.s	Obj36_Display	; if yes, branch
0000EA90 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000EA94 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000EA96 2F08                       		move.l	a0,-(sp)
0000EA98 2448                       		movea.l	a0,a2
0000EA9A 41F8 D000                  		lea	($FFFFD000).w,a0
0000EA9E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000EAA4 6400                       		bcc.s	loc_CF20
0000EAA6 2628 000C                  		move.l	$C(a0),d3
0000EAAA 3028 0012                  		move.w	$12(a0),d0
0000EAAE 48C0                       		ext.l	d0
0000EAB0 E180                       		asl.l	#8,d0
0000EAB2 9680                       		sub.l	d0,d3
0000EAB4 2143 000C                  		move.l	d3,$C(a0)
0000EAB8 4EB9 0000 0000             		jsr	HurtSonic
0000EABE                            
0000EABE                            loc_CF20:
0000EABE 205F                       		movea.l	(sp)+,a0
0000EAC0                            
0000EAC0                            Obj36_Display:
0000EAC0 6100 0000                  		bsr.w	DisplaySprite
0000EAC4 3028 0030                  		move.w	$30(a0),d0
0000EAC8 0240 FF80                  		andi.w	#$FF80,d0
0000EACC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAD0 0441 0080                  		subi.w	#$80,d1
0000EAD4 0241 FF80                  		andi.w	#$FF80,d1
0000EAD8 9041                       		sub.w	d1,d0
0000EADA 0C40 0280                  		cmpi.w	#$280,d0
0000EADE 6200 0000                  		bhi.w	DeleteObject
0000EAE2 4E75                       		rts	
0000EAE4                            ; ===========================================================================
0000EAE4                            
0000EAE4                            Obj36_Type0x:				; XREF: Obj36_Solid
0000EAE4 7000                       		moveq	#0,d0
0000EAE6 1028 0028                  		move.b	$28(a0),d0
0000EAEA D040                       		add.w	d0,d0
0000EAEC 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000EAF0 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000EAF4                            ; ===========================================================================
0000EAF4 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000EAF6 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000EAF8 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000EAFA                            ; ===========================================================================
0000EAFA                            
0000EAFA                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000EAFA 4E75                       		rts			; don't move the object
0000EAFC                            ; ===========================================================================
0000EAFC                            
0000EAFC                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000EAFC 6100 0000                  		bsr.w	Obj36_Wait
0000EB00 7000                       		moveq	#0,d0
0000EB02 1028 0034                  		move.b	$34(a0),d0
0000EB06 D068 0032                  		add.w	$32(a0),d0
0000EB0A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000EB0E 4E75                       		rts	
0000EB10                            ; ===========================================================================
0000EB10                            
0000EB10                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000EB10 6100 0000                  		bsr.w	Obj36_Wait
0000EB14 7000                       		moveq	#0,d0
0000EB16 1028 0034                  		move.b	$34(a0),d0
0000EB1A D068 0030                  		add.w	$30(a0),d0
0000EB1E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000EB22 4E75                       		rts	
0000EB24                            ; ===========================================================================
0000EB24                            
0000EB24                            Obj36_Wait:
0000EB24 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000EB28 6700                       		beq.s	loc_CFA4	; if yes, branch
0000EB2A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000EB2E 6600                       		bne.s	locret_CFE6
0000EB30 4A28 0001                  		tst.b	1(a0)
0000EB34 6A00                       		bpl.s	locret_CFE6
0000EB36 303C 00B6                  		move.w	#$B6,d0
0000EB3A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000EB40 6000                       		bra.s	locret_CFE6
0000EB42                            ; ===========================================================================
0000EB42                            
0000EB42                            loc_CFA4:
0000EB42 4A68 0036                  		tst.w	$36(a0)
0000EB46 6700                       		beq.s	loc_CFC6
0000EB48 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EB4E 6400                       		bcc.s	locret_CFE6
0000EB50 317C 0000 0034             		move.w	#0,$34(a0)
0000EB56 317C 0000 0036             		move.w	#0,$36(a0)
0000EB5C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EB62 6000                       		bra.s	locret_CFE6
0000EB64                            ; ===========================================================================
0000EB64                            
0000EB64                            loc_CFC6:
0000EB64 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EB6A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EB70 6500                       		bcs.s	locret_CFE6
0000EB72 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EB78 317C 0001 0036             		move.w	#1,$36(a0)
0000EB7E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EB84                            
0000EB84                            locret_CFE6:
0000EB84 4E75                       		rts	
0000EB86                            ; ===========================================================================
0000EB86                            ; ---------------------------------------------------------------------------
0000EB86                            ; Sprite mappings - spikes
0000EB86                            ; ---------------------------------------------------------------------------
0000EB86                            Map_obj36:
0000EB86                            	include "_maps\obj36.asm"
0000EB86                            ; ---------------------------------------------------------------------------
0000EB86                            ; Sprite mappings - spikes
0000EB86                            ; ---------------------------------------------------------------------------
0000EB86 0000                       		dc.w byte_CFF4-Map_obj36
0000EB88 0000                       		dc.w byte_D004-Map_obj36
0000EB8A 0000                       		dc.w byte_D014-Map_obj36
0000EB8C 0000                       		dc.w byte_D01A-Map_obj36
0000EB8E 0000                       		dc.w byte_D02A-Map_obj36
0000EB90 0000                       		dc.w byte_D049-Map_obj36
0000EB92 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000EB93 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000EB98 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EB9D F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000EBA2 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000EBA3 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000EBA8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EBAD 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000EBB2 01                         byte_D014:	dc.b 1			; 1 spike
0000EBB3 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EBB8 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000EBB9 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000EBBE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EBC3 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000EBC8 06                         byte_D02A:	dc.b 6			; 6 spikes
0000EBC9 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000EBCE F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000EBD3 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000EBD8 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000EBDD F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000EBE2 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000EBE7 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000EBE8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EBEE 00                         		even
0000EBEE 00                         		even
0000EBEE                            
0000EBEE                            ; ===========================================================================
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            ; Object 3B - purple rock (GHZ)
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            
0000EBEE                            Obj3B:					; XREF: Obj_Index
0000EBEE 7000                       		moveq	#0,d0
0000EBF0 1028 0024                  		move.b	$24(a0),d0
0000EBF4 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000EBF8 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000EBFC                            ; ===========================================================================
0000EBFC 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000EBFE 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000EC00                            ; ===========================================================================
0000EC00                            
0000EC00                            Obj3B_Main:				; XREF: Obj3B_Index
0000EC00 5428 0024                  		addq.b	#2,$24(a0)
0000EC04 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000EC0C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000EC12 117C 0004 0001             		move.b	#4,1(a0)
0000EC18 117C 0013 0019             		move.b	#$13,$19(a0)
0000EC1E 117C 0004 0018             		move.b	#4,$18(a0)
0000EC24                            
0000EC24                            Obj3B_Solid:				; XREF: Obj3B_Index
0000EC24 323C 001B                  		move.w	#$1B,d1
0000EC28 343C 0010                  		move.w	#$10,d2
0000EC2C 363C 0010                  		move.w	#$10,d3
0000EC30 3828 0008                  		move.w	8(a0),d4
0000EC34 6100 0000                  		bsr.w	SolidObject
0000EC38 6100 0000                  		bsr.w	DisplaySprite
0000EC3C 3028 0008                  		move.w	8(a0),d0
0000EC40 0240 FF80                  		andi.w	#$FF80,d0
0000EC44 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC48 0441 0080                  		subi.w	#$80,d1
0000EC4C 0241 FF80                  		andi.w	#$FF80,d1
0000EC50 9041                       		sub.w	d1,d0
0000EC52 0C40 0280                  		cmpi.w	#$280,d0
0000EC56 6200 0000                  		bhi.w	DeleteObject
0000EC5A 4E75                       		rts	
0000EC5C                            ; ===========================================================================
0000EC5C                            ; ---------------------------------------------------------------------------
0000EC5C                            ; Object 49 - waterfall	sound effect (GHZ)
0000EC5C                            ; ---------------------------------------------------------------------------
0000EC5C                            
0000EC5C                            Obj49:					; XREF: Obj_Index
0000EC5C 7000                       		moveq	#0,d0
0000EC5E 1028 0024                  		move.b	$24(a0),d0
0000EC62 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000EC66 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000EC6A                            ; ===========================================================================
0000EC6A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000EC6C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000EC6E                            ; ===========================================================================
0000EC6E                            
0000EC6E                            Obj49_Main:				; XREF: Obj49_Index
0000EC6E 5428 0024                  		addq.b	#2,$24(a0)
0000EC72 117C 0004 0001             		move.b	#4,1(a0)
0000EC78                            
0000EC78                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000EC78 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000EC7C 0200 003F                  		andi.b	#$3F,d0
0000EC80 6600                       		bne.s	Obj49_ChkDel
0000EC82 303C 00D0                  		move.w	#$D0,d0
0000EC86 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000EC8C                            
0000EC8C                            Obj49_ChkDel:
0000EC8C 3028 0008                  		move.w	8(a0),d0
0000EC90 0240 FF80                  		andi.w	#$FF80,d0
0000EC94 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC98 0441 0080                  		subi.w	#$80,d1
0000EC9C 0241 FF80                  		andi.w	#$FF80,d1
0000ECA0 9041                       		sub.w	d1,d0
0000ECA2 0C40 0280                  		cmpi.w	#$280,d0
0000ECA6 6200 0000                  		bhi.w	DeleteObject
0000ECAA 4E75                       		rts	
0000ECAC                            ; ===========================================================================
0000ECAC                            ; ---------------------------------------------------------------------------
0000ECAC                            ; Sprite mappings - purple rock	(GHZ)
0000ECAC                            ; ---------------------------------------------------------------------------
0000ECAC                            Map_obj3B:
0000ECAC                            	include "_maps\obj3B.asm"
0000ECAC                            ; ---------------------------------------------------------------------------
0000ECAC                            ; Sprite mappings - purple rock	(GHZ)
0000ECAC                            ; ---------------------------------------------------------------------------
0000ECAC 0000                       		dc.w byte_D110-Map_obj3B
0000ECAE 02                         byte_D110:	dc.b 2
0000ECAF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000ECB4 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000ECBA 00                         		even
0000ECBA 00                         		even
0000ECBA                            
0000ECBA                            ; ===========================================================================
0000ECBA                            ; ---------------------------------------------------------------------------
0000ECBA                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000ECBA                            ; ---------------------------------------------------------------------------
0000ECBA                            
0000ECBA                            Obj3C:					; XREF: Obj_Index
0000ECBA 7000                       		moveq	#0,d0
0000ECBC 1028 0024                  		move.b	$24(a0),d0
0000ECC0 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000ECC4 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000ECC8 6000 0000                  		bra.w	MarkObjGone
0000ECCC                            ; ===========================================================================
0000ECCC 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000ECCE 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000ECD0 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000ECD2                            ; ===========================================================================
0000ECD2                            
0000ECD2                            Obj3C_Main:				; XREF: Obj3C_Index
0000ECD2 5428 0024                  		addq.b	#2,$24(a0)
0000ECD6 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000ECDE 317C 450F 0002             		move.w	#$450F,2(a0)
0000ECE4 117C 0004 0001             		move.b	#4,1(a0)
0000ECEA 117C 0010 0019             		move.b	#$10,$19(a0)
0000ECF0 117C 0004 0018             		move.b	#4,$18(a0)
0000ECF6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000ECFC                            
0000ECFC                            Obj3C_Solid:				; XREF: Obj3C_Index
0000ECFC 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000ED02 323C 001B                  		move.w	#$1B,d1
0000ED06 343C 0020                  		move.w	#$20,d2
0000ED0A 363C 0020                  		move.w	#$20,d3
0000ED0E 3828 0008                  		move.w	8(a0),d4
0000ED12 6100 0000                  		bsr.w	SolidObject
0000ED16 0828 0005 0022             		btst	#5,$22(a0)
0000ED1C 6600                       		bne.s	Obj3C_ChkRoll
0000ED1E                            
0000ED1E                            locret_D180:
0000ED1E 4E75                       		rts	
0000ED20                            ; ===========================================================================
0000ED20                            
0000ED20                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000ED20                            	;	cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ED20                            	;	bne.s	locret_D180	; if not, branch
0000ED20 3028 0030                  		move.w	$30(a0),d0
0000ED24 6A00                       		bpl.s	Obj3C_ChkSpeed
0000ED26 4440                       		neg.w	d0
0000ED28                            
0000ED28                            Obj3C_ChkSpeed:
0000ED28 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000ED2C 65F0                       		bcs.s	locret_D180	; if not, branch
0000ED2E 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000ED34 5869 0008                  		addq.w	#4,8(a1)
0000ED38 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000ED3E 3028 0008                  		move.w	8(a0),d0
0000ED42 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000ED46 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000ED48 5169 0008                  		subq.w	#8,8(a1)
0000ED4C 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000ED52                            
0000ED52                            Obj3C_Smash:
0000ED52 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000ED58 08A8 0005 0022             		bclr	#5,$22(a0)
0000ED5E 08A9 0005 0022             		bclr	#5,$22(a1)
0000ED64 7207                       		moveq	#7,d1		; load 8 fragments
0000ED66 343C 0070                  		move.w	#$70,d2
0000ED6A 6100                       		bsr.s	SmashObject
0000ED6C                            
0000ED6C                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000ED6C 6100 0000                  		bsr.w	SpeedToPos
0000ED70 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000ED76 6100 0000                  		bsr.w	DisplaySprite
0000ED7A 4A28 0001                  		tst.b	1(a0)
0000ED7E 6A00 0000                  		bpl.w	DeleteObject
0000ED82 4E75                       		rts	
0000ED84                            
0000ED84                            ; ---------------------------------------------------------------------------
0000ED84                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000ED84                            ; ---------------------------------------------------------------------------
0000ED84                            
0000ED84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED84                            
0000ED84                            
0000ED84                            SmashObject:				; XREF: Obj3C_Smash
0000ED84 7000                       		moveq	#0,d0
0000ED86 1028 001A                  		move.b	$1A(a0),d0
0000ED8A D040                       		add.w	d0,d0
0000ED8C 2668 0004                  		movea.l	4(a0),a3
0000ED90 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000ED94 524B                       		addq.w	#1,a3
0000ED96 08E8 0005 0001             		bset	#5,1(a0)
0000ED9C 1810                       		move.b	0(a0),d4
0000ED9E 1A28 0001                  		move.b	1(a0),d5
0000EDA2 2248                       		movea.l	a0,a1
0000EDA4 6000                       		bra.s	Smash_LoadFrag
0000EDA6                            ; ===========================================================================
0000EDA6                            
0000EDA6                            Smash_Loop:
0000EDA6 6100 0000                  		bsr.w	SingleObjLoad
0000EDAA 6600                       		bne.s	Smash_PlaySnd
0000EDAC 5A4B                       		addq.w	#5,a3
0000EDAE                            
0000EDAE                            Smash_LoadFrag:				; XREF: SmashObject
0000EDAE 137C 0004 0024             		move.b	#4,$24(a1)
0000EDB4 1284                       		move.b	d4,0(a1)
0000EDB6 234B 0004                  		move.l	a3,4(a1)
0000EDBA 1345 0001                  		move.b	d5,1(a1)
0000EDBE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDCA 3368 0002 0002             		move.w	2(a0),2(a1)
0000EDD0 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000EDD6 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000EDDC 335C 0010                  		move.w	(a4)+,$10(a1)
0000EDE0 335C 0012                  		move.w	(a4)+,$12(a1)
0000EDE4 B3C8                       		cmpa.l	a0,a1
0000EDE6 6400                       		bcc.s	loc_D268
0000EDE8 2F08                       		move.l	a0,-(sp)
0000EDEA 2049                       		movea.l	a1,a0
0000EDEC 6100 0000                  		bsr.w	SpeedToPos
0000EDF0 D568 0012                  		add.w	d2,$12(a0)
0000EDF4 205F                       		movea.l	(sp)+,a0
0000EDF6 6100 0000                  		bsr.w	DisplaySprite2
0000EDFA                            
0000EDFA                            loc_D268:
0000EDFA 51C9 FFAA                  		dbf	d1,Smash_Loop
0000EDFE                            
0000EDFE                            Smash_PlaySnd:
0000EDFE 303C 00CB                  		move.w	#$CB,d0
0000EE02 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0000EE08                            ; End of function SmashObject
0000EE08                            
0000EE08                            ; ===========================================================================
0000EE08                            ; Smashed block	fragment speeds
0000EE08                            ;
0000EE08 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000EE0C 0600 FF00                  		dc.w $600, $FF00
0000EE10 0600 0100                  		dc.w $600, $100
0000EE14 0400 0500                  		dc.w $400, $500
0000EE18 0600 FA00                  		dc.w $600, $FA00
0000EE1C 0800 FE00                  		dc.w $800, $FE00
0000EE20 0800 0200                  		dc.w $800, $200
0000EE24 0600 0600                  		dc.w $600, $600
0000EE28                            
0000EE28 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000EE2C F800 FE00                  		dc.w $F800, $FE00
0000EE30 F800 0200                  		dc.w $F800, $200
0000EE34 FA00 0600                  		dc.w $FA00, $600
0000EE38 FC00 FB00                  		dc.w $FC00, $FB00
0000EE3C FA00 FF00                  		dc.w $FA00, $FF00
0000EE40 FA00 0100                  		dc.w $FA00, $100
0000EE44 FC00 0500                  		dc.w $FC00, $500
0000EE48                            ; ---------------------------------------------------------------------------
0000EE48                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EE48                            ; ---------------------------------------------------------------------------
0000EE48                            Map_obj3C:
0000EE48                            	include "_maps\obj3C.asm"
0000EE48                            ; ---------------------------------------------------------------------------
0000EE48                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EE48                            ; ---------------------------------------------------------------------------
0000EE48 0000                       		dc.w byte_D2BC-Map_obj3C
0000EE4A 0000                       		dc.w byte_D2E5-Map_obj3C
0000EE4C 0000                       		dc.w byte_D30E-Map_obj3C
0000EE4E 08                         byte_D2BC:	dc.b 8
0000EE4F E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000EE54 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000EE59 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000EE5E 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000EE63 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EE68 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EE6D 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EE72 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EE77 08                         byte_D2E5:	dc.b 8
0000EE78 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EE7D F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EE82 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EE87 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EE8C E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EE91 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EE96 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EE9B 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EEA0 08                         byte_D30E:	dc.b 8
0000EEA1 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EEA6 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EEAB 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EEB0 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EEB5 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000EEBA F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000EEBF 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000EEC4 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000EECA 00                         		even
0000EECA 00                         		even
0000EECA                            
0000EECA                            ; ---------------------------------------------------------------------------
0000EECA                            ; Object code loading subroutine
0000EECA                            ; ---------------------------------------------------------------------------
0000EECA                            
0000EECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EECA                            
0000EECA                            
0000EECA                            ObjectsLoad:				; XREF: TitleScreen; et al
0000EECA 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000EECE 7E7F                       		moveq	#$7F,d7
0000EED0 7000                       		moveq	#0,d0
0000EED2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000EED8 6400                       		bcc.s	loc_D362
0000EEDA                            
0000EEDA                            loc_D348:
0000EEDA 1010                       		move.b	(a0),d0		; load object number from RAM
0000EEDC 6700                       		beq.s	loc_D358
0000EEDE D040                       		add.w	d0,d0
0000EEE0 D040                       		add.w	d0,d0
0000EEE2 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000EEE6 4E91                       		jsr	(a1)		; run the object's code
0000EEE8 7000                       		moveq	#0,d0
0000EEEA                            
0000EEEA                            loc_D358:
0000EEEA 41E8 0040                  		lea	$40(a0),a0	; next object
0000EEEE 51CF FFEA                  		dbf	d7,loc_D348
0000EEF2 4E75                       		rts	
0000EEF4                            ; ===========================================================================
0000EEF4                            
0000EEF4                            loc_D362:
0000EEF4 0C38 000A D024                     cmpi.b  #$A,($FFFFD024).w		      ; Has Sonic drowned?
0000EEFA 67DE                               beq.s   loc_D348                        ; If so, run objects a little longer
0000EEFC 7E1F                       		moveq	#$1F,d7
0000EEFE 61DA                       		bsr.s	loc_D348
0000EF00 7E5F                       		moveq	#$5F,d7
0000EF02                            
0000EF02                            loc_D368:
0000EF02 7000                       		moveq	#0,d0
0000EF04 1010                       		move.b	(a0),d0
0000EF06 6700                       		beq.s	loc_D378
0000EF08 4A28 0001                  		tst.b	1(a0)
0000EF0C 6A00                       		bpl.s	loc_D378
0000EF0E 6100 0000                  		bsr.w	DisplaySprite
0000EF12                            
0000EF12                            loc_D378:
0000EF12 41E8 0040                  		lea	$40(a0),a0
0000EF16                            
0000EF16                            loc_D37C:
0000EF16 51CF FFEA                  		dbf	d7,loc_D368
0000EF1A 4E75                       		rts	
0000EF1C                            ; End of function ObjectsLoad
0000EF1C                            
0000EF1C                            ; ===========================================================================
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            ; Object pointers
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            Obj_Index:
0000EF1C                            	include "_inc\Object pointers.asm"
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            ; Object pointers
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	Obj03, ObjectFall
0000EF2C 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000EF3C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000EF4C 0000 0000 0000 C03C 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000EF5C 0000 8D22 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000EF6C 0000 9348 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000EF7C 0000 9B96 0000 9BFE 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000EF8C 0000 A248 0000 A536 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000EF9C 0000 0000 0000 B1BA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000EFAC 0000 B4FC 0000 BB34 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000EFBC 0000 ADF2 0000 A31E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000EFCC 0000 C6C4 0000 BD22 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000EFDC 0000 D096 0000 D744 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000EFEC 0000 CBFA 0000 E9C0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000EFFC 0000 DECA 0000 DF84 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000F00C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000F01C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000F02C 0000 D3B2 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000F03C 0000 EC5C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000F04C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000F05C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000F06C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000F07C 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000F08C 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000F09C 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000F0AC 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000F0BC 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000F0CC 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000F0DC 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000F0EC 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000F0FC 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000F10C 0000 0000 0000 E1BA 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000F11C 0000 692E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000F12C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000F13C 0000 700E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F13C 0000 700E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F14C                            
0000F14C                            ; ---------------------------------------------------------------------------
0000F14C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F14C                            ; ---------------------------------------------------------------------------
0000F14C                            
0000F14C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F14C                            
0000F14C                            
0000F14C                            ObjectFall:
0000F14C 3028 0010                  		move.w	$10(a0),d0
0000F150 48C0                       		ext.l	d0
0000F152 E188                       		lsl.l	#8,d0
0000F154 D1A8 0008                  		add.l	d0,8(a0)
0000F158 3028 0012                  		move.w	$12(a0),d0
0000F15C 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000F162 48C0                       		ext.l	d0
0000F164 E188                       		lsl.l	#8,d0
0000F166 D1A8 000C                  		add.l	d0,$C(a0)
0000F16A 4E75                       		rts	
0000F16C                            ; End of function ObjectFall
0000F16C                            
0000F16C                            ; ---------------------------------------------------------------------------
0000F16C                            ; Subroutine translating object	speed to update	object position
0000F16C                            ; ---------------------------------------------------------------------------
0000F16C                            
0000F16C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F16C                            
0000F16C                            
0000F16C                            SpeedToPos:
0000F16C 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000F170 48C0                       		ext.l	d0
0000F172 E188                       		lsl.l	#8,d0		; multiply speed by $100
0000F174 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000F178 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000F17C 48C0                       		ext.l	d0
0000F17E E188                       		lsl.l	#8,d0		; multiply by $100
0000F180 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000F184 4E75                       		rts	
0000F186                            ; End of function SpeedToPos
0000F186                            
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            
0000F186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F186                            
0000F186                            
0000F186                            DisplaySprite:
0000F186 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000F18A 3028 0018                  		move.w	$18(a0),d0
0000F18E E248                       		lsr.w	#1,d0
0000F190 0240 0380                  		andi.w	#$380,d0
0000F194 D2C0                       		adda.w	d0,a1
0000F196 0C51 007E                  		cmpi.w	#$7E,(a1)
0000F19A 6400                       		bcc.s	locret_D620
0000F19C 5451                       		addq.w	#2,(a1)
0000F19E D2D1                       		adda.w	(a1),a1
0000F1A0 3288                       		move.w	a0,(a1)
0000F1A2                            
0000F1A2                            locret_D620:
0000F1A2 4E75                       		rts	
0000F1A4                            ; End of function DisplaySprite
0000F1A4                            
0000F1A4                            ; ---------------------------------------------------------------------------
0000F1A4                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000F1A4                            ; ---------------------------------------------------------------------------
0000F1A4                            
0000F1A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1A4                            
0000F1A4                            
0000F1A4                            DisplaySprite2:
0000F1A4 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000F1A8 3029 0018                  		move.w	$18(a1),d0
0000F1AC E248                       		lsr.w	#1,d0
0000F1AE 0240 0380                  		andi.w	#$380,d0
0000F1B2 D4C0                       		adda.w	d0,a2
0000F1B4 0C52 007E                  		cmpi.w	#$7E,(a2)
0000F1B8 6400                       		bcc.s	locret_D63E
0000F1BA 5452                       		addq.w	#2,(a2)
0000F1BC D4D2                       		adda.w	(a2),a2
0000F1BE 3489                       		move.w	a1,(a2)
0000F1C0                            
0000F1C0                            locret_D63E:
0000F1C0 4E75                       		rts	
0000F1C2                            ; End of function DisplaySprite2
0000F1C2                            
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Subroutine to	delete an object
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            
0000F1C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1C2                            
0000F1C2                            
0000F1C2                            DeleteObject:
0000F1C2 2248                       		movea.l	a0,a1
0000F1C4                            
0000F1C4                            DeleteObject2:
0000F1C4 7200                       		moveq	#0,d1
0000F1C6 700F                       		moveq	#$F,d0
0000F1C8                            
0000F1C8                            loc_D646:
0000F1C8 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F1CA 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000F1CE 4E75                       		rts	
0000F1D0                            ; End of function DeleteObject
0000F1D0                            
0000F1D0                            ; ===========================================================================
0000F1D0 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000F1D4 00FF F700                  		dc.l $FFF700		; main screen x-position
0000F1D8 00FF F708                  		dc.l $FFF708		; background x-position	1
0000F1DC 00FF F718                  		dc.l $FFF718		; background x-position	2
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            
0000F1E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1E0                            
0000F1E0                            
0000F1E0                            BuildSprites:				; XREF: TitleScreen; et al
0000F1E0 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000F1E4 7A00                       		moveq	#0,d5
0000F1E6 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000F1EA 7E07                       		moveq	#7,d7
0000F1EC                            
0000F1EC                            loc_D66A:
0000F1EC 4A54                       		tst.w	(a4)
0000F1EE 6700 0000                  		beq.w	loc_D72E
0000F1F2 7C02                       		moveq	#2,d6
0000F1F4                            
0000F1F4                            loc_D672:
0000F1F4 3074 6000                  		movea.w	(a4,d6.w),a0
0000F1F8 4A10                       		tst.b	(a0)
0000F1FA 6700 0000                  		beq.w	loc_D726
0000F1FE 08A8 0007 0001             		bclr	#7,1(a0)
0000F204 1028 0001                  		move.b	1(a0),d0
0000F208 1800                       		move.b	d0,d4
0000F20A 0240 000C                  		andi.w	#$C,d0
0000F20E 6700                       		beq.s	loc_D6DE
0000F210 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F214 7000                       		moveq	#0,d0
0000F216 1028 0019                  		move.b	$19(a0),d0
0000F21A 3628 0008                  		move.w	8(a0),d3
0000F21E 9651                       		sub.w	(a1),d3
0000F220 3203                       		move.w	d3,d1
0000F222 D240                       		add.w	d0,d1
0000F224 6B00 0000                  		bmi.w	loc_D726
0000F228 3203                       		move.w	d3,d1
0000F22A 9240                       		sub.w	d0,d1
0000F22C 0C41 0140                  		cmpi.w	#$140,d1
0000F230 6C00                       		bge.s	loc_D726
0000F232 0643 0080                  		addi.w	#$80,d3
0000F236 0804 0004                  		btst	#4,d4
0000F23A 6700                       		beq.s	loc_D6E8
0000F23C 7000                       		moveq	#0,d0
0000F23E 1028 0016                  		move.b	$16(a0),d0
0000F242 3428 000C                  		move.w	$C(a0),d2
0000F246 9469 0004                  		sub.w	4(a1),d2
0000F24A 3202                       		move.w	d2,d1
0000F24C D240                       		add.w	d0,d1
0000F24E 6B00                       		bmi.s	loc_D726
0000F250 3202                       		move.w	d2,d1
0000F252 9240                       		sub.w	d0,d1
0000F254 0C41 00E0                  		cmpi.w	#$E0,d1
0000F258 6C00                       		bge.s	loc_D726
0000F25A 0642 0080                  		addi.w	#$80,d2
0000F25E 6000                       		bra.s	loc_D700
0000F260                            ; ===========================================================================
0000F260                            
0000F260                            loc_D6DE:
0000F260 3428 000A                  		move.w	$A(a0),d2
0000F264 3628 0008                  		move.w	8(a0),d3
0000F268 6000                       		bra.s	loc_D700
0000F26A                            ; ===========================================================================
0000F26A                            
0000F26A                            loc_D6E8:
0000F26A 3428 000C                  		move.w	$C(a0),d2
0000F26E 9469 0004                  		sub.w	4(a1),d2
0000F272 0642 0080                  		addi.w	#$80,d2
0000F276 0C42 0060                  		cmpi.w	#$60,d2
0000F27A 6500                       		bcs.s	loc_D726
0000F27C 0C42 0180                  		cmpi.w	#$180,d2
0000F280 6400                       		bcc.s	loc_D726
0000F282                            
0000F282                            loc_D700:
0000F282 2268 0004                  		movea.l	4(a0),a1
0000F286 7200                       		moveq	#0,d1
0000F288 0804 0005                  		btst	#5,d4
0000F28C 6600                       		bne.s	loc_D71C
0000F28E 1228 001A                  		move.b	$1A(a0),d1
0000F292 D201                       		add.b	d1,d1
0000F294 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F298 1219                       		move.b	(a1)+,d1
0000F29A 5301                       		subq.b	#1,d1
0000F29C 6B00                       		bmi.s	loc_D720
0000F29E                            
0000F29E                            loc_D71C:
0000F29E 6100 0000                  		bsr.w	sub_D750
0000F2A2                            
0000F2A2                            loc_D720:
0000F2A2 08E8 0007 0001             		bset	#7,1(a0)
0000F2A8                            
0000F2A8                            loc_D726:
0000F2A8 5446                       		addq.w	#2,d6
0000F2AA 5554                       		subq.w	#2,(a4)
0000F2AC 6600 FF46                  		bne.w	loc_D672
0000F2B0                            
0000F2B0                            loc_D72E:
0000F2B0 49EC 0080                  		lea	$80(a4),a4
0000F2B4 51CF FF36                  		dbf	d7,loc_D66A
0000F2B8 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F2BC 0C05 0050                  		cmpi.b	#$50,d5
0000F2C0 6700                       		beq.s	loc_D748
0000F2C2 24BC 0000 0000             		move.l	#0,(a2)
0000F2C8 4E75                       		rts	
0000F2CA                            ; ===========================================================================
0000F2CA                            
0000F2CA                            loc_D748:
0000F2CA 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F2D0 4E75                       		rts	
0000F2D2                            ; End of function BuildSprites
0000F2D2                            
0000F2D2                            
0000F2D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2D2                            
0000F2D2                            
0000F2D2                            sub_D750:				; XREF: BuildSprites
0000F2D2 3668 0002                  		movea.w	2(a0),a3
0000F2D6 0804 0000                  		btst	#0,d4
0000F2DA 6600                       		bne.s	loc_D796
0000F2DC 0804 0001                  		btst	#1,d4
0000F2E0 6600 0000                  		bne.w	loc_D7E4
0000F2E4                            ; End of function sub_D750
0000F2E4                            
0000F2E4                            
0000F2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2E4                            
0000F2E4                            
0000F2E4                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F2E4 0C05 0050                  		cmpi.b	#$50,d5
0000F2E8 6700                       		beq.s	locret_D794
0000F2EA 1019                       		move.b	(a1)+,d0
0000F2EC 4880                       		ext.w	d0
0000F2EE D042                       		add.w	d2,d0
0000F2F0 34C0                       		move.w	d0,(a2)+
0000F2F2 14D9                       		move.b	(a1)+,(a2)+
0000F2F4 5205                       		addq.b	#1,d5
0000F2F6 14C5                       		move.b	d5,(a2)+
0000F2F8 1019                       		move.b	(a1)+,d0
0000F2FA E148                       		lsl.w	#8,d0
0000F2FC 1019                       		move.b	(a1)+,d0
0000F2FE D04B                       		add.w	a3,d0
0000F300 34C0                       		move.w	d0,(a2)+
0000F302 1019                       		move.b	(a1)+,d0
0000F304 4880                       		ext.w	d0
0000F306 D043                       		add.w	d3,d0
0000F308 0240 01FF                  		andi.w	#$1FF,d0
0000F30C 6600                       		bne.s	loc_D78E
0000F30E 5240                       		addq.w	#1,d0
0000F310                            
0000F310                            loc_D78E:
0000F310 34C0                       		move.w	d0,(a2)+
0000F312 51C9 FFD0                  		dbf	d1,sub_D762
0000F316                            
0000F316                            locret_D794:
0000F316 4E75                       		rts	
0000F318                            ; End of function sub_D762
0000F318                            
0000F318                            ; ===========================================================================
0000F318                            
0000F318                            loc_D796:
0000F318 0804 0001                  		btst	#1,d4
0000F31C 6600 0000                  		bne.w	loc_D82A
0000F320                            
0000F320                            loc_D79E:
0000F320 0C05 0050                  		cmpi.b	#$50,d5
0000F324 6700                       		beq.s	locret_D7E2
0000F326 1019                       		move.b	(a1)+,d0
0000F328 4880                       		ext.w	d0
0000F32A D042                       		add.w	d2,d0
0000F32C 34C0                       		move.w	d0,(a2)+
0000F32E 1819                       		move.b	(a1)+,d4
0000F330 14C4                       		move.b	d4,(a2)+
0000F332 5205                       		addq.b	#1,d5
0000F334 14C5                       		move.b	d5,(a2)+
0000F336 1019                       		move.b	(a1)+,d0
0000F338 E148                       		lsl.w	#8,d0
0000F33A 1019                       		move.b	(a1)+,d0
0000F33C D04B                       		add.w	a3,d0
0000F33E 0A40 0800                  		eori.w	#$800,d0
0000F342 34C0                       		move.w	d0,(a2)+
0000F344 1019                       		move.b	(a1)+,d0
0000F346 4880                       		ext.w	d0
0000F348 4440                       		neg.w	d0
0000F34A D804                       		add.b	d4,d4
0000F34C 0244 0018                  		andi.w	#$18,d4
0000F350 5044                       		addq.w	#8,d4
0000F352 9044                       		sub.w	d4,d0
0000F354 D043                       		add.w	d3,d0
0000F356 0240 01FF                  		andi.w	#$1FF,d0
0000F35A 6600                       		bne.s	loc_D7DC
0000F35C 5240                       		addq.w	#1,d0
0000F35E                            
0000F35E                            loc_D7DC:
0000F35E 34C0                       		move.w	d0,(a2)+
0000F360 51C9 FFBE                  		dbf	d1,loc_D79E
0000F364                            
0000F364                            locret_D7E2:
0000F364 4E75                       		rts	
0000F366                            ; ===========================================================================
0000F366                            
0000F366                            loc_D7E4:				; XREF: sub_D750
0000F366 0C05 0050                  		cmpi.b	#$50,d5
0000F36A 6700                       		beq.s	locret_D828
0000F36C 1019                       		move.b	(a1)+,d0
0000F36E 1811                       		move.b	(a1),d4
0000F370 4880                       		ext.w	d0
0000F372 4440                       		neg.w	d0
0000F374 E70C                       		lsl.b	#3,d4
0000F376 0244 0018                  		andi.w	#$18,d4
0000F37A 5044                       		addq.w	#8,d4
0000F37C 9044                       		sub.w	d4,d0
0000F37E D042                       		add.w	d2,d0
0000F380 34C0                       		move.w	d0,(a2)+
0000F382 14D9                       		move.b	(a1)+,(a2)+
0000F384 5205                       		addq.b	#1,d5
0000F386 14C5                       		move.b	d5,(a2)+
0000F388 1019                       		move.b	(a1)+,d0
0000F38A E148                       		lsl.w	#8,d0
0000F38C 1019                       		move.b	(a1)+,d0
0000F38E D04B                       		add.w	a3,d0
0000F390 0A40 1000                  		eori.w	#$1000,d0
0000F394 34C0                       		move.w	d0,(a2)+
0000F396 1019                       		move.b	(a1)+,d0
0000F398 4880                       		ext.w	d0
0000F39A D043                       		add.w	d3,d0
0000F39C 0240 01FF                  		andi.w	#$1FF,d0
0000F3A0 6600                       		bne.s	loc_D822
0000F3A2 5240                       		addq.w	#1,d0
0000F3A4                            
0000F3A4                            loc_D822:
0000F3A4 34C0                       		move.w	d0,(a2)+
0000F3A6 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F3AA                            
0000F3AA                            locret_D828:
0000F3AA 4E75                       		rts	
0000F3AC                            ; ===========================================================================
0000F3AC                            
0000F3AC                            loc_D82A:
0000F3AC 0C05 0050                  		cmpi.b	#$50,d5
0000F3B0 6700                       		beq.s	locret_D87C
0000F3B2 1019                       		move.b	(a1)+,d0
0000F3B4 1811                       		move.b	(a1),d4
0000F3B6 4880                       		ext.w	d0
0000F3B8 4440                       		neg.w	d0
0000F3BA E70C                       		lsl.b	#3,d4
0000F3BC 0244 0018                  		andi.w	#$18,d4
0000F3C0 5044                       		addq.w	#8,d4
0000F3C2 9044                       		sub.w	d4,d0
0000F3C4 D042                       		add.w	d2,d0
0000F3C6 34C0                       		move.w	d0,(a2)+
0000F3C8 1819                       		move.b	(a1)+,d4
0000F3CA 14C4                       		move.b	d4,(a2)+
0000F3CC 5205                       		addq.b	#1,d5
0000F3CE 14C5                       		move.b	d5,(a2)+
0000F3D0 1019                       		move.b	(a1)+,d0
0000F3D2 E148                       		lsl.w	#8,d0
0000F3D4 1019                       		move.b	(a1)+,d0
0000F3D6 D04B                       		add.w	a3,d0
0000F3D8 0A40 1800                  		eori.w	#$1800,d0
0000F3DC 34C0                       		move.w	d0,(a2)+
0000F3DE 1019                       		move.b	(a1)+,d0
0000F3E0 4880                       		ext.w	d0
0000F3E2 4440                       		neg.w	d0
0000F3E4 D804                       		add.b	d4,d4
0000F3E6 0244 0018                  		andi.w	#$18,d4
0000F3EA 5044                       		addq.w	#8,d4
0000F3EC 9044                       		sub.w	d4,d0
0000F3EE D043                       		add.w	d3,d0
0000F3F0 0240 01FF                  		andi.w	#$1FF,d0
0000F3F4 6600                       		bne.s	loc_D876
0000F3F6 5240                       		addq.w	#1,d0
0000F3F8                            
0000F3F8                            loc_D876:
0000F3F8 34C0                       		move.w	d0,(a2)+
0000F3FA 51C9 FFB0                  		dbf	d1,loc_D82A
0000F3FE                            
0000F3FE                            locret_D87C:
0000F3FE 4E75                       		rts	
0000F400                            ; ---------------------------------------------------------------------------
0000F400                            ; Subroutine to	check if an object is on the screen
0000F400                            ; ---------------------------------------------------------------------------
0000F400                            
0000F400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F400                            
0000F400                            
0000F400                            ChkObjOnScreen:
0000F400 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000F404 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000F408 6B00                       		bmi.s	NotOnScreen
0000F40A 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F40E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F410                            
0000F410 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000F414 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000F418 6B00                       		bmi.s	NotOnScreen
0000F41A 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F41E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F420                            
0000F420 7000                       		moveq	#0,d0		; set flag to 0
0000F422 4E75                       		rts	
0000F424                            ; ===========================================================================
0000F424                            
0000F424                            NotOnScreen:				; XREF: ChkObjOnScreen
0000F424 7001                       		moveq	#1,d0		; set flag to 1
0000F426 4E75                       		rts	
0000F428                            ; End of function ChkObjOnScreen
0000F428                            
0000F428                            
0000F428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F428                            
0000F428                            
0000F428                            ChkObjOnScreen2:
0000F428 7200                       		moveq	#0,d1
0000F42A 1228 0019                  		move.b	$19(a0),d1
0000F42E 3028 0008                  		move.w	8(a0),d0
0000F432 9078 F700                  		sub.w	($FFFFF700).w,d0
0000F436 D041                       		add.w	d1,d0
0000F438 6B00                       		bmi.s	NotOnScreen2
0000F43A D241                       		add.w	d1,d1
0000F43C 9041                       		sub.w	d1,d0
0000F43E 0C40 0140                  		cmpi.w	#320,d0
0000F442 6C00                       		bge.s	NotOnScreen2
0000F444                            
0000F444 3228 000C                  		move.w	$C(a0),d1
0000F448 9278 F704                  		sub.w	($FFFFF704).w,d1
0000F44C 6B00                       		bmi.s	NotOnScreen2
0000F44E 0C41 00E0                  		cmpi.w	#224,d1
0000F452 6C00                       		bge.s	NotOnScreen2
0000F454                            
0000F454 7000                       		moveq	#0,d0
0000F456 4E75                       		rts	
0000F458                            ; ===========================================================================
0000F458                            
0000F458                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000F458 7001                       		moveq	#1,d0
0000F45A 4E75                       		rts	
0000F45C                            ; End of function ChkObjOnScreen2
0000F45C                            
0000F45C                            ; ---------------------------------------------------------------------------
0000F45C                            ; Subroutine to	load a level's objects
0000F45C                            ; ---------------------------------------------------------------------------
0000F45C                            
0000F45C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F45C                            
0000F45C                            
0000F45C                            ObjPosLoad:				; XREF: Level; et al
0000F45C 7000                       		moveq	#0,d0
0000F45E 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000F462 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F466 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F46A                            ; End of function ObjPosLoad
0000F46A                            
0000F46A                            ; ===========================================================================
0000F46A 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F46C 0000                       		dc.w OPL_Next-OPL_Index
0000F46E                            ; ===========================================================================
0000F46E                            
0000F46E                            OPL_Main:				; XREF: OPL_Index
0000F46E 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000F472 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000F476 ED08                       		lsl.b	#6,d0
0000F478 E848                       		lsr.w	#4,d0
0000F47A 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F480 2248                       		movea.l	a0,a1
0000F482 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F486 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F48A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F48E D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F492 21C9 F778                  		move.l	a1,($FFFFF778).w
0000F496 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000F49A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F49E 34FC 0101                  		move.w	#$101,(a2)+
0000F4A2 303C 005E                  		move.w	#$5E,d0
0000F4A6                            
0000F4A6                            OPL_ClrList:
0000F4A6 429A                       		clr.l	(a2)+
0000F4A8 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F4AC                            
0000F4AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4B0 7400                       		moveq	#0,d2
0000F4B2 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F4B6 0446 0080                  		subi.w	#$80,d6
0000F4BA 6400                       		bcc.s	loc_D93C
0000F4BC 7C00                       		moveq	#0,d6
0000F4BE                            
0000F4BE                            loc_D93C:
0000F4BE 0246 FF80                  		andi.w	#$FF80,d6
0000F4C2 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F4C6                            
0000F4C6                            loc_D944:
0000F4C6 BC50                       		cmp.w	(a0),d6
0000F4C8 6300                       		bls.s	loc_D956
0000F4CA 4A28 0004                  		tst.b	4(a0)
0000F4CE 6A00                       		bpl.s	loc_D952
0000F4D0 1412                       		move.b	(a2),d2
0000F4D2 5212                       		addq.b	#1,(a2)
0000F4D4                            
0000F4D4                            loc_D952:
0000F4D4 5C48                       		addq.w	#6,a0
0000F4D6 60EE                       		bra.s	loc_D944
0000F4D8                            ; ===========================================================================
0000F4D8                            
0000F4D8                            loc_D956:
0000F4D8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F4DC 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F4E0 0446 0080                  		subi.w	#$80,d6
0000F4E4 6500                       		bcs.s	loc_D976
0000F4E6                            
0000F4E6                            loc_D964:
0000F4E6 BC50                       		cmp.w	(a0),d6
0000F4E8 6300                       		bls.s	loc_D976
0000F4EA 4A28 0004                  		tst.b	4(a0)
0000F4EE 6A00                       		bpl.s	loc_D972
0000F4F0 522A 0001                  		addq.b	#1,1(a2)
0000F4F4                            
0000F4F4                            loc_D972:
0000F4F4 5C48                       		addq.w	#6,a0
0000F4F6 60EE                       		bra.s	loc_D964
0000F4F8                            ; ===========================================================================
0000F4F8                            
0000F4F8                            loc_D976:
0000F4F8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F4FC 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000F502                            
0000F502                            OPL_Next:				; XREF: OPL_Index
0000F502 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F506 7400                       		moveq	#0,d2
0000F508 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F50C 0246 FF80                  		andi.w	#$FF80,d6
0000F510 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000F514 6700 0000                  		beq.w	locret_DA3A
0000F518 6C00                       		bge.s	loc_D9F6
0000F51A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F51E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F522 0446 0080                  		subi.w	#$80,d6
0000F526 6500                       		bcs.s	loc_D9D2
0000F528                            
0000F528                            loc_D9A6:
0000F528 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F52C 6C00                       		bge.s	loc_D9D2
0000F52E 5D48                       		subq.w	#6,a0
0000F530 4A28 0004                  		tst.b	4(a0)
0000F534 6A00                       		bpl.s	loc_D9BC
0000F536 532A 0001                  		subq.b	#1,1(a2)
0000F53A 142A 0001                  		move.b	1(a2),d2
0000F53E                            
0000F53E                            loc_D9BC:
0000F53E 6100 0000                  		bsr.w	loc_DA3C
0000F542 6600                       		bne.s	loc_D9C6
0000F544 5D48                       		subq.w	#6,a0
0000F546 60E0                       		bra.s	loc_D9A6
0000F548                            ; ===========================================================================
0000F548                            
0000F548                            loc_D9C6:
0000F548 4A28 0004                  		tst.b	4(a0)
0000F54C 6A00                       		bpl.s	loc_D9D0
0000F54E 522A 0001                  		addq.b	#1,1(a2)
0000F552                            
0000F552                            loc_D9D0:
0000F552 5C48                       		addq.w	#6,a0
0000F554                            
0000F554                            loc_D9D2:
0000F554 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F558 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F55C 0646 0300                  		addi.w	#$300,d6
0000F560                            
0000F560                            loc_D9DE:
0000F560 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F564 6E00                       		bgt.s	loc_D9F0
0000F566 4A28 FFFE                  		tst.b	-2(a0)
0000F56A 6A00                       		bpl.s	loc_D9EC
0000F56C 5312                       		subq.b	#1,(a2)
0000F56E                            
0000F56E                            loc_D9EC:
0000F56E 5D48                       		subq.w	#6,a0
0000F570 60EE                       		bra.s	loc_D9DE
0000F572                            ; ===========================================================================
0000F572                            
0000F572                            loc_D9F0:
0000F572 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F576 4E75                       		rts	
0000F578                            ; ===========================================================================
0000F578                            
0000F578                            loc_D9F6:
0000F578 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F57C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F580 0646 0280                  		addi.w	#$280,d6
0000F584                            
0000F584                            loc_DA02:
0000F584 BC50                       		cmp.w	(a0),d6
0000F586 6300                       		bls.s	loc_DA16
0000F588 4A28 0004                  		tst.b	4(a0)
0000F58C 6A00                       		bpl.s	loc_DA10
0000F58E 1412                       		move.b	(a2),d2
0000F590 5212                       		addq.b	#1,(a2)
0000F592                            
0000F592                            loc_DA10:
0000F592 6100 0000                  		bsr.w	loc_DA3C
0000F596 67EC                       		beq.s	loc_DA02
0000F598 4A28 0004                  		tst.b	$04(a0)			; MJ: was this object a remember state?
0000F59C 6A00                       		bpl.s	loc_DA16		; MJ: if not, branch
0000F59E 5312                       		subq.b	#$01,(a2)		; MJ: move right counter back
0000F5A0                            
0000F5A0                            loc_DA16:
0000F5A0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F5A4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F5A8 0446 0300                  		subi.w	#$300,d6
0000F5AC 6500                       		bcs.s	loc_DA36
0000F5AE                            
0000F5AE                            loc_DA24:
0000F5AE BC50                       		cmp.w	(a0),d6
0000F5B0 6300                       		bls.s	loc_DA36
0000F5B2 4A28 0004                  		tst.b	4(a0)
0000F5B6 6A00                       		bpl.s	loc_DA32
0000F5B8 522A 0001                  		addq.b	#1,1(a2)
0000F5BC                            
0000F5BC                            loc_DA32:
0000F5BC 5C48                       		addq.w	#6,a0
0000F5BE 60EE                       		bra.s	loc_DA24
0000F5C0                            ; ===========================================================================
0000F5C0                            
0000F5C0                            loc_DA36:
0000F5C0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F5C4                            
0000F5C4                            locret_DA3A:
0000F5C4 4E75                       		rts	
0000F5C6                            ; ===========================================================================
0000F5C6                            
0000F5C6                            loc_DA3C:
0000F5C6 4A28 0004                  		tst.b	4(a0)
0000F5CA 6A00                       		bpl.s	OPL_MakeItem
0000F5CC 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000F5D2 6700                       		beq.s	OPL_MakeItem
0000F5D4 5C48                       		addq.w	#6,a0
0000F5D6 7000                       		moveq	#0,d0
0000F5D8 4E75                       		rts	
0000F5DA                            ; ===========================================================================
0000F5DA                            
0000F5DA                            OPL_MakeItem:
0000F5DA 6100 0000                  		bsr.w	SingleObjLoad
0000F5DE 6600                       		bne.s	locret_DA8A
0000F5E0 3358 0008                  		move.w	(a0)+,8(a1)
0000F5E4 3018                       		move.w	(a0)+,d0
0000F5E6 3200                       		move.w	d0,d1
0000F5E8 0240 0FFF                  		andi.w	#$FFF,d0
0000F5EC 3340 000C                  		move.w	d0,$C(a1)
0000F5F0 E559                       		rol.w	#2,d1
0000F5F2 0201 0003                  		andi.b	#3,d1
0000F5F6 1341 0001                  		move.b	d1,1(a1)
0000F5FA 1341 0022                  		move.b	d1,$22(a1)
0000F5FE 1018                       		move.b	(a0)+,d0
0000F600 6A00                       		bpl.s	loc_DA80
0000F602 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)		; MJ: set as removed
0000F608 0200 007F                  		andi.b	#$7F,d0
0000F60C 1342 0023                  		move.b	d2,$23(a1)
0000F610                            
0000F610                            loc_DA80:
0000F610 1280                       		move.b	d0,0(a1)
0000F612 1358 0028                  		move.b	(a0)+,$28(a1)
0000F616 7000                       		moveq	#0,d0
0000F618                            
0000F618                            locret_DA8A:
0000F618 4E75                       		rts	
0000F61A                            ; ---------------------------------------------------------------------------
0000F61A                            ; Single object	loading	subroutine
0000F61A                            ; ---------------------------------------------------------------------------
0000F61A                            
0000F61A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F61A                            
0000F61A                            
0000F61A                            SingleObjLoad:
0000F61A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F61E 303C 005F                  		move.w	#$5F,d0
0000F622                            
0000F622                            loc_DA94:
0000F622 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F624 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F626 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F62A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F62E                            
0000F62E                            locret_DAA0:
0000F62E 4E75                       		rts	
0000F630                            ; End of function SingleObjLoad
0000F630                            
0000F630                            
0000F630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F630                            
0000F630                            
0000F630                            SingleObjLoad2:
0000F630 2248                       		movea.l	a0,a1
0000F632 303C F000                  		move.w	#-$1000,d0
0000F636 9048                       		sub.w	a0,d0
0000F638 EC48                       		lsr.w	#6,d0
0000F63A 5340                       		subq.w	#1,d0
0000F63C 6500                       		bcs.s	locret_DABC
0000F63E                            
0000F63E                            loc_DAB0:
0000F63E 4A11                       		tst.b	(a1)
0000F640 6700                       		beq.s	locret_DABC
0000F642 43E9 0040                  		lea	$40(a1),a1
0000F646 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F64A                            
0000F64A                            locret_DABC:
0000F64A 4E75                       		rts	
0000F64C                            ; End of function SingleObjLoad2
0000F64C                            
0000F64C                            ; ===========================================================================
0000F64C                            ; ---------------------------------------------------------------------------
0000F64C                            ; Object 41 - springs
0000F64C                            ; ---------------------------------------------------------------------------
0000F64C                            
0000F64C                            Obj41:					; XREF: Obj_Index
0000F64C 7000                       		moveq	#0,d0
0000F64E 1028 0024                  		move.b	$24(a0),d0
0000F652 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F656 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F65A 6100 FB2A                  		bsr.w	DisplaySprite
0000F65E 3028 0008                  		move.w	8(a0),d0
0000F662 0240 FF80                  		andi.w	#$FF80,d0
0000F666 3238 F700                  		move.w	($FFFFF700).w,d1
0000F66A 0441 0080                  		subi.w	#$80,d1
0000F66E 0241 FF80                  		andi.w	#$FF80,d1
0000F672 9041                       		sub.w	d1,d0
0000F674 0C40 0280                  		cmpi.w	#$280,d0
0000F678 6200 FB48                  		bhi.w	DeleteObject
0000F67C 4E75                       		rts	
0000F67E                            ; ===========================================================================
0000F67E 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F680 0000                       		dc.w Obj41_Up-Obj41_Index
0000F682 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F684 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F686 0000                       		dc.w Obj41_LR-Obj41_Index
0000F688 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F68A 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F68C 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F68E 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F690 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F692                            
0000F692 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F694 F600                       		dc.w -$A00		; power	of yellow spring
0000F696                            ; ===========================================================================
0000F696                            
0000F696                            Obj41_Main:				; XREF: Obj41_Index
0000F696 5428 0024                  		addq.b	#2,$24(a0)
0000F69A 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F6A2 317C 0523 0002             		move.w	#$523,2(a0)
0000F6A8 0028 0004 0001             		ori.b	#4,1(a0)
0000F6AE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F6B4 117C 0004 0018             		move.b	#4,$18(a0)
0000F6BA 1028 0028                  		move.b	$28(a0),d0
0000F6BE 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F6C2 6700                       		beq.s	loc_DB54	; if not, branch
0000F6C4 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F6CA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6D0 117C 0003 001A             		move.b	#3,$1A(a0)
0000F6D6 317C 0533 0002             		move.w	#$533,2(a0)
0000F6DC 117C 0008 0019             		move.b	#8,$19(a0)
0000F6E2                            
0000F6E2                            loc_DB54:
0000F6E2 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F6E6 6700                       		beq.s	loc_DB66	; if not, branch
0000F6E8 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F6EE 08E8 0001 0022             		bset	#1,$22(a0)
0000F6F4                            
0000F6F4                            loc_DB66:
0000F6F4 0800 0001                  		btst	#1,d0
0000F6F8 6700                       		beq.s	loc_DB72
0000F6FA 08E8 0005 0002             		bset	#5,2(a0)
0000F700                            
0000F700                            loc_DB72:
0000F700 0240 000F                  		andi.w	#$F,d0
0000F704 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F70A 4E75                       		rts	
0000F70C                            ; ===========================================================================
0000F70C                            
0000F70C                            Obj41_Up:				; XREF: Obj41_Index
0000F70C 323C 001B                  		move.w	#$1B,d1
0000F710 343C 0008                  		move.w	#8,d2
0000F714 363C 0010                  		move.w	#$10,d3
0000F718 3828 0008                  		move.w	8(a0),d4
0000F71C 6100 0000                  		bsr.w	SolidObject
0000F720 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F724 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F726 4E75                       		rts	
0000F728                            ; ===========================================================================
0000F728                            
0000F728                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F728 5428 0024                  		addq.b	#2,$24(a0)
0000F72C 5069 000C                  		addq.w	#8,$C(a1)
0000F730 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F736 08E9 0001 0022             		bset	#1,$22(a1)
0000F73C 08A9 0003 0022             		bclr	#3,$22(a1)
0000F742 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F748 137C 0002 0024             		move.b	#2,$24(a1)
0000F74E 08A8 0003 0022             		bclr	#3,$22(a0)
0000F754 4228 0025                  		clr.b	$25(a0)
0000F758 303C 00CC                  		move.w	#$CC,d0
0000F75C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F762                            
0000F762                            Obj41_AniUp:				; XREF: Obj41_Index
0000F762 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F768 6000 C9CE                  		bra.w	AnimateSprite
0000F76C                            ; ===========================================================================
0000F76C                            
0000F76C                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F76C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F772 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F776 4E75                       		rts	
0000F778                            ; ===========================================================================
0000F778                            
0000F778                            Obj41_LR:				; XREF: Obj41_Index
0000F778 323C 0013                  		move.w	#$13,d1
0000F77C 343C 000E                  		move.w	#$E,d2
0000F780 363C 000F                  		move.w	#$F,d3
0000F784 3828 0008                  		move.w	8(a0),d4
0000F788 6100 0000                  		bsr.w	SolidObject
0000F78C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F792 6600                       		bne.s	loc_DC0C
0000F794 117C 0008 0024             		move.b	#8,$24(a0)
0000F79A                            
0000F79A                            loc_DC0C:
0000F79A 0828 0005 0022             		btst	#5,$22(a0)
0000F7A0 6600                       		bne.s	Obj41_BounceLR
0000F7A2 4E75                       		rts	
0000F7A4                            ; ===========================================================================
0000F7A4                            
0000F7A4                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F7A4 5428 0024                  		addq.b	#2,$24(a0)
0000F7A8 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F7AE 5069 0008                  		addq.w	#8,8(a1)
0000F7B2 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F7B8 6600                       		bne.s	loc_DC36	; if yes, branch
0000F7BA 0469 0010 0008             		subi.w	#$10,8(a1)
0000F7C0 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F7C4                            		
0000F7C4                            loc_DC36:
0000F7C4 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F7CA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000F7D0 0869 0000 0022             		bchg	#0,$22(a1)
0000F7D6 0829 0002 0022             		btst	#2,$22(a1)
0000F7DC 6600                       		bne.s	loc_DC56
0000F7DE 103C 0000                  		move.b	#0,d0
0000F7E2 4A29 0039                  		tst.b	$39(a1)
0000F7E6 6700                       		beq.s	@not_crawling
0000F7E8 4E71                       		nop
0000F7EA                            		;move.b	#crawl_anim,d0
0000F7EA                            		
0000F7EA                            @not_crawling:
0000F7EA 1340 001C                  		move.b	d0,$1C(a1)
0000F7EE                            
0000F7EE                            loc_DC56:
0000F7EE 08A8 0005 0022             		bclr	#5,$22(a0)
0000F7F4 08A9 0005 0022             		bclr	#5,$22(a1)
0000F7FA 303C 00CC                  		move.w	#$CC,d0
0000F7FE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F804                            
0000F804                            Obj41_AniLR:				; XREF: Obj41_Index
0000F804 31FC 0000 C904             		move.w	#0,($FFFFC904).w	; clear screen delay counter
0000F80A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F810 6000 C926                  		bra.w	AnimateSprite
0000F814                            ; ===========================================================================
0000F814                            
0000F814                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F814 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F81A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F81E 4E75                       		rts	
0000F820                            ; ===========================================================================
0000F820                            
0000F820                            Obj41_Dwn:				; XREF: Obj41_Index
0000F820 323C 001B                  		move.w	#$1B,d1
0000F824 343C 0008                  		move.w	#8,d2
0000F828 363C 0010                  		move.w	#$10,d3
0000F82C 3828 0008                  		move.w	8(a0),d4
0000F830 6100 0000                  		bsr.w	SolidObject
0000F834 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F83A 6600                       		bne.s	loc_DCA4
0000F83C 117C 000E 0024             		move.b	#$E,$24(a0)
0000F842                            
0000F842                            loc_DCA4:
0000F842 4A28 0025                  		tst.b	$25(a0)
0000F846 6600                       		bne.s	locret_DCAE
0000F848 4A44                       		tst.w	d4
0000F84A 6B00                       		bmi.s	Obj41_BounceDwn
0000F84C                            
0000F84C                            locret_DCAE:
0000F84C 4E75                       		rts	
0000F84E                            ; ===========================================================================
0000F84E                            
0000F84E                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F84E 5428 0024                  		addq.b	#2,$24(a0)
0000F852 5169 000C                  		subq.w	#8,$C(a1)
0000F856 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F85C 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F860 08E9 0001 0022             		bset	#1,$22(a1)
0000F866 08A9 0003 0022             		bclr	#3,$22(a1)
0000F86C 137C 0002 0024             		move.b	#2,$24(a1)
0000F872 08A8 0003 0022             		bclr	#3,$22(a0)
0000F878 4228 0025                  		clr.b	$25(a0)
0000F87C 303C 00CC                  		move.w	#$CC,d0
0000F880 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F886                            
0000F886                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F886 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F88C 6000 C8AA                  		bra.w	AnimateSprite
0000F890                            ; ===========================================================================
0000F890                            
0000F890                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F890 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F896 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F89A 4E75                       		rts	
0000F89C                            ; ===========================================================================
0000F89C                            Ani_obj41:
0000F89C                            	include "_anim\obj41.asm"
0000F89C                            ; ---------------------------------------------------------------------------
0000F89C                            ; Animation script - springs
0000F89C                            ; ---------------------------------------------------------------------------
0000F89C 0000                       		dc.w byte_DD02-Ani_obj41
0000F89E 0000                       		dc.w byte_DD0E-Ani_obj41
0000F8A0 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F8AC 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F8B8                            		even
0000F8B8                            		even
0000F8B8                            
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8                            ; Sprite mappings - springs
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8                            Map_obj41:
0000F8B8                            	include "_maps\obj41.asm"
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8                            ; Sprite mappings - springs
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8 0000                       		dc.w byte_DD26-Map_obj41
0000F8BA 0000                       		dc.w byte_DD31-Map_obj41
0000F8BC 0000                       		dc.w byte_DD37-Map_obj41
0000F8BE 0000                       		dc.w byte_DD47-Map_obj41
0000F8C0 0000                       		dc.w byte_DD4D-Map_obj41
0000F8C2 0000                       		dc.w byte_DD53-Map_obj41
0000F8C4 02                         byte_DD26:	dc.b 2
0000F8C5 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F8CA 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F8CF 01                         byte_DD31:	dc.b 1
0000F8D0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F8D5 03                         byte_DD37:	dc.b 3
0000F8D6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F8DB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F8E0 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F8E5 01                         byte_DD47:	dc.b 1
0000F8E6 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F8EB 01                         byte_DD4D:	dc.b 1
0000F8EC F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F8F1 04                         byte_DD53:	dc.b 4
0000F8F2 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F8F7 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F8FC F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F901 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F906                            		even
0000F906                            		even
0000F906                            
0000F906                            ; ===========================================================================
0000F906                            ; ---------------------------------------------------------------------------
0000F906                            ; Object 42 - Newtron enemy (GHZ)
0000F906                            ; ---------------------------------------------------------------------------
0000F906                            
0000F906                            Obj42:					; XREF: Obj_Index
0000F906 7000                       		moveq	#0,d0
0000F908 1028 0024                  		move.b	$24(a0),d0
0000F90C 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F910 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F914                            ; ===========================================================================
0000F914 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F916 0000                       		dc.w Obj42_Action-Obj42_Index
0000F918 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F91A                            ; ===========================================================================
0000F91A                            
0000F91A                            Obj42_Main:				; XREF: Obj42_Index
0000F91A 5428 0024                  		addq.b	#2,$24(a0)
0000F91E 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F926 317C 049B 0002             		move.w	#$49B,2(a0)
0000F92C 117C 0004 0001             		move.b	#4,1(a0)
0000F932 117C 0004 0018             		move.b	#4,$18(a0)
0000F938 117C 0014 0019             		move.b	#$14,$19(a0)
0000F93E 117C 0010 0016             		move.b	#$10,$16(a0)
0000F944 117C 0008 0017             		move.b	#8,$17(a0)
0000F94A                            
0000F94A                            Obj42_Action:				; XREF: Obj42_Index
0000F94A 7000                       		moveq	#0,d0
0000F94C 1028 0025                  		move.b	$25(a0),d0
0000F950 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F954 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F958 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F95E 6100 C7D8                  		bsr.w	AnimateSprite
0000F962 6000 0000                  		bra.w	MarkObjGone
0000F966                            ; ===========================================================================
0000F966 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F968 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F96A 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F96C 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F96E 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F970                            ; ===========================================================================
0000F970                            
0000F970                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F970 08E8 0000 0022             		bset	#0,$22(a0)
0000F976 3038 D008                  		move.w	($FFFFD008).w,d0
0000F97A 9068 0008                  		sub.w	8(a0),d0
0000F97E 6400                       		bcc.s	loc_DDEA
0000F980 4440                       		neg.w	d0
0000F982 08A8 0000 0022             		bclr	#0,$22(a0)
0000F988                            
0000F988                            loc_DDEA:
0000F988 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F98C 6400                       		bcc.s	locret_DE12	; if not, branch
0000F98E 5428 0025                  		addq.b	#2,$25(a0)
0000F992 117C 0001 001C             		move.b	#1,$1C(a0)
0000F998 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F99C 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F99E 317C 249B 0002             		move.w	#$249B,2(a0)
0000F9A4 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F9AA 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F9B0                            
0000F9B0                            locret_DE12:
0000F9B0 4E75                       		rts	
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            Obj42_Type00:				; XREF: Obj42_Index2
0000F9B2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F9B8 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F9BA 08E8 0000 0022             		bset	#0,$22(a0)
0000F9C0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9C4 9068 0008                  		sub.w	8(a0),d0
0000F9C8 6400                       		bcc.s	locret_DE32
0000F9CA 08A8 0000 0022             		bclr	#0,$22(a0)
0000F9D0                            
0000F9D0                            locret_DE32:
0000F9D0 4E75                       		rts	
0000F9D2                            ; ===========================================================================
0000F9D2                            
0000F9D2                            Obj42_Fall:				; XREF: Obj42_Type00
0000F9D2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F9D8 6600                       		bne.s	loc_DE42
0000F9DA 117C 000C 0020             		move.b	#$C,$20(a0)
0000F9E0                            
0000F9E0                            loc_DE42:
0000F9E0 6100 F76A                  		bsr.w	ObjectFall
0000F9E4 6100 0000                  		bsr.w	ObjHitFloor
0000F9E8 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F9EA 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F9EC D368 000C                  		add.w	d1,$C(a0)
0000F9F0 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F9F6 5428 0025                  		addq.b	#2,$25(a0)
0000F9FA 117C 0002 001C             		move.b	#2,$1C(a0)
0000FA00 0828 0005 0002             		btst	#5,2(a0)
0000FA06 6700                       		beq.s	Obj42_Move
0000FA08 5228 001C                  		addq.b	#1,$1C(a0)
0000FA0C                            
0000FA0C                            Obj42_Move:
0000FA0C 117C 000D 0020             		move.b	#$D,$20(a0)
0000FA12 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000FA18 0828 0000 0022             		btst	#0,$22(a0)
0000FA1E 6600                       		bne.s	locret_DE86
0000FA20 4468 0010                  		neg.w	$10(a0)
0000FA24                            
0000FA24                            locret_DE86:
0000FA24 4E75                       		rts	
0000FA26                            ; ===========================================================================
0000FA26                            
0000FA26                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000FA26 6100 F744                  		bsr.w	SpeedToPos
0000FA2A 6100 0000                  		bsr.w	ObjHitFloor
0000FA2E 0C41 FFF8                  		cmpi.w	#-8,d1
0000FA32 6D00                       		blt.s	loc_DEA2
0000FA34 0C41 000C                  		cmpi.w	#$C,d1
0000FA38 6C00                       		bge.s	loc_DEA2
0000FA3A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000FA3E 4E75                       		rts	
0000FA40                            ; ===========================================================================
0000FA40                            
0000FA40                            loc_DEA2:
0000FA40 5428 0025                  		addq.b	#2,$25(a0)
0000FA44 4E75                       		rts	
0000FA46                            ; ===========================================================================
0000FA46                            
0000FA46                            Obj42_Speed:				; XREF: Obj42_Index2
0000FA46 6100 F724                  		bsr.w	SpeedToPos
0000FA4A 4E75                       		rts	
0000FA4C                            ; ===========================================================================
0000FA4C                            
0000FA4C                            Obj42_Type01:				; XREF: Obj42_Index2
0000FA4C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000FA52 6600                       		bne.s	Obj42_FireMissile
0000FA54 117C 000C 0020             		move.b	#$C,$20(a0)
0000FA5A                            
0000FA5A                            Obj42_FireMissile:
0000FA5A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000FA60 6600                       		bne.s	locret_DF14
0000FA62 4A28 0032                  		tst.b	$32(a0)
0000FA66 6600                       		bne.s	locret_DF14
0000FA68 117C 0001 0032             		move.b	#1,$32(a0)
0000FA6E 6100 FBAA                  		bsr.w	SingleObjLoad
0000FA72 6600                       		bne.s	locret_DF14
0000FA74 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000FA78 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA84 5169 000C                  		subq.w	#8,$C(a1)
0000FA88 337C 0200 0010             		move.w	#$200,$10(a1)
0000FA8E 303C 0014                  		move.w	#$14,d0
0000FA92 0828 0000 0022             		btst	#0,$22(a0)
0000FA98 6600                       		bne.s	loc_DF04
0000FA9A 4440                       		neg.w	d0
0000FA9C 4469 0010                  		neg.w	$10(a1)
0000FAA0                            
0000FAA0                            loc_DF04:
0000FAA0 D169 0008                  		add.w	d0,8(a1)
0000FAA4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FAAA 137C 0001 0028             		move.b	#1,$28(a1)
0000FAB0                            
0000FAB0                            locret_DF14:
0000FAB0 4E75                       		rts	
0000FAB2                            ; ===========================================================================
0000FAB2                            
0000FAB2                            Obj42_Delete:				; XREF: Obj42_Index
0000FAB2 6000 F70E                  		bra.w	DeleteObject
0000FAB6                            ; ===========================================================================
0000FAB6                            Ani_obj42:
0000FAB6                            	include "_anim\obj42.asm"
0000FAB6                            ; ---------------------------------------------------------------------------
0000FAB6                            ; Animation script - Newtron enemy
0000FAB6                            ; ---------------------------------------------------------------------------
0000FAB6 0000                       		dc.w byte_DF24-Ani_obj42
0000FAB8 0000                       		dc.w byte_DF28-Ani_obj42
0000FABA 0000                       		dc.w byte_DF30-Ani_obj42
0000FABC 0000                       		dc.w byte_DF34-Ani_obj42
0000FABE 0000                       		dc.w byte_DF38-Ani_obj42
0000FAC0 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000FAC4 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000FACC 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000FAD0 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000FAD4 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000FADE                            		even
0000FADE                            		even
0000FADE                            
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            ; Sprite mappings - Newtron enemy (GHZ)
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            Map_obj42:
0000FADE                            	include "_maps\obj42.asm"
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            ; Sprite mappings - Newtron enemy (GHZ)
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000FAE2 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000FAE6 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000FAEA 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000FAEE 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000FAF2 0000                       		dc.w byte_DFF8-Map_obj42
0000FAF4 03                         byte_DF58:	dc.b 3
0000FAF5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000FAFA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FAFF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FB04 03                         byte_DF68:	dc.b 3
0000FB05 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000FB0A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FB0F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FB14 03                         byte_DF78:	dc.b 3
0000FB15 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000FB1A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FB1F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FB24 04                         byte_DF88:	dc.b 4
0000FB25 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000FB2A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FB2F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FB34 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FB39 03                         byte_DF9D:	dc.b 3
0000FB3A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FB3F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FB44 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FB49 02                         byte_DFAD:	dc.b 2
0000FB4A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB4F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB54 03                         byte_DFB8:	dc.b 3
0000FB55 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB5A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB5F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FB64 03                         byte_DFC8:	dc.b 3
0000FB65 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB6A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB6F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FB74 03                         byte_DFD8:	dc.b 3
0000FB75 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB7A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB7F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FB84 03                         byte_DFE8:	dc.b 3
0000FB85 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB8A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB8F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FB94 00                         byte_DFF8:	dc.b 0
0000FB96 00                         		even
0000FB96 00                         		even
0000FB96                            
0000FB96                            ; ===========================================================================
0000FB96                            ; ---------------------------------------------------------------------------
0000FB96                            ; Object 43 - Roller enemy (SYZ)
0000FB96                            ; ---------------------------------------------------------------------------
0000FB96                            
0000FB96                            Obj43:					; XREF: Obj_Index
0000FB96 7000                       		moveq	#0,d0
0000FB98 1028 0024                  		move.b	$24(a0),d0
0000FB9C 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000FBA0 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000FBA4                            ; ===========================================================================
0000FBA4 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000FBA6 0000                       		dc.w Obj43_Action-Obj43_Index
0000FBA8                            ; ===========================================================================
0000FBA8                            
0000FBA8                            Obj43_Main:				; XREF: Obj43_Index
0000FBA8 117C 000E 0016             		move.b	#$E,$16(a0)
0000FBAE 117C 0008 0017             		move.b	#8,$17(a0)
0000FBB4 6100 F596                  		bsr.w	ObjectFall
0000FBB8 6100 0000                  		bsr.w	ObjHitFloor
0000FBBC 4A41                       		tst.w	d1
0000FBBE 6A00                       		bpl.s	locret_E052
0000FBC0 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000FBC4 317C 0000 0012             		move.w	#0,$12(a0)
0000FBCA 5428 0024                  		addq.b	#2,$24(a0)
0000FBCE 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FBD6 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FBDC 117C 0004 0001             		move.b	#4,1(a0)
0000FBE2 117C 0004 0018             		move.b	#4,$18(a0)
0000FBE8 117C 0010 0019             		move.b	#$10,$19(a0)
0000FBEE                            
0000FBEE                            locret_E052:
0000FBEE 4E75                       		rts	
0000FBF0                            ; ===========================================================================
0000FBF0                            
0000FBF0                            Obj43_Action:				; XREF: Obj43_Index
0000FBF0 7000                       		moveq	#0,d0
0000FBF2 1028 0025                  		move.b	$25(a0),d0
0000FBF6 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FBFA 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FBFE 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FC04 6100 C532                  		bsr.w	AnimateSprite
0000FC08 3028 0008                  		move.w	8(a0),d0
0000FC0C 0240 FF80                  		andi.w	#$FF80,d0
0000FC10 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC14 0441 0080                  		subi.w	#$80,d1
0000FC18 0241 FF80                  		andi.w	#$FF80,d1
0000FC1C 9041                       		sub.w	d1,d0
0000FC1E 0C40 0280                  		cmpi.w	#$280,d0
0000FC22 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FC26 6000 F55E                  		bra.w	DisplaySprite
0000FC2A                            ; ===========================================================================
0000FC2A                            
0000FC2A                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FC2A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC2E 7000                       		moveq	#0,d0
0000FC30 1028 0023                  		move.b	$23(a0),d0
0000FC34 6700                       		beq.s	Obj43_Delete
0000FC36 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC3C                            
0000FC3C                            Obj43_Delete:
0000FC3C 6000 F584                  		bra.w	DeleteObject
0000FC40                            ; ===========================================================================
0000FC40 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FC42 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FC44 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FC46 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FC48                            ; ===========================================================================
0000FC48                            
0000FC48                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FC48 3038 D008                  		move.w	($FFFFD008).w,d0
0000FC4C 0440 0100                  		subi.w	#$100,d0
0000FC50 6500                       		bcs.s	loc_E0D2
0000FC52 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FC56 6500                       		bcs.s	loc_E0D2
0000FC58 5828 0025                  		addq.b	#4,$25(a0)
0000FC5C 117C 0002 001C             		move.b	#2,$1C(a0)
0000FC62 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FC68 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FC6E                            
0000FC6E                            loc_E0D2:
0000FC6E 588F                       		addq.l	#4,sp
0000FC70 4E75                       		rts	
0000FC72                            ; ===========================================================================
0000FC72                            
0000FC72                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FC72 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FC78 6700                       		beq.s	loc_E0F8
0000FC7A 5368 0030                  		subq.w	#1,$30(a0)
0000FC7E 6A00                       		bpl.s	locret_E0F6
0000FC80 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC86 317C 0700 0010             		move.w	#$700,$10(a0)
0000FC8C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FC92                            
0000FC92                            locret_E0F6:
0000FC92 4E75                       		rts	
0000FC94                            ; ===========================================================================
0000FC94                            
0000FC94                            loc_E0F8:
0000FC94 5428 0025                  		addq.b	#2,$25(a0)
0000FC98 4E75                       		rts	
0000FC9A                            ; ===========================================================================
0000FC9A                            
0000FC9A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FC9A 6100 0000                  		bsr.w	Obj43_Stop
0000FC9E 6100 F4CC                  		bsr.w	SpeedToPos
0000FCA2 6100 0000                  		bsr.w	ObjHitFloor
0000FCA6 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCAA 6D00                       		blt.s	Obj43_Jump
0000FCAC 0C41 000C                  		cmpi.w	#$C,d1
0000FCB0 6C00                       		bge.s	Obj43_Jump
0000FCB2 D368 000C                  		add.w	d1,$C(a0)
0000FCB6 4E75                       		rts	
0000FCB8                            ; ===========================================================================
0000FCB8                            
0000FCB8                            Obj43_Jump:
0000FCB8 5428 0025                  		addq.b	#2,$25(a0)
0000FCBC 08E8 0000 0032             		bset	#0,$32(a0)
0000FCC2 6700                       		beq.s	locret_E12E
0000FCC4 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FCCA                            
0000FCCA                            locret_E12E:
0000FCCA 4E75                       		rts	
0000FCCC                            ; ===========================================================================
0000FCCC                            
0000FCCC                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FCCC 6100 F47E                  		bsr.w	ObjectFall
0000FCD0 4A68 0012                  		tst.w	$12(a0)
0000FCD4 6B00                       		bmi.s	locret_E150
0000FCD6 6100 0000                  		bsr.w	ObjHitFloor
0000FCDA 4A41                       		tst.w	d1
0000FCDC 6A00                       		bpl.s	locret_E150
0000FCDE D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FCE2 5528 0025                  		subq.b	#2,$25(a0)
0000FCE6 317C 0000 0012             		move.w	#0,$12(a0)
0000FCEC                            
0000FCEC                            locret_E150:
0000FCEC 4E75                       		rts	
0000FCEE                            
0000FCEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCEE                            
0000FCEE                            
0000FCEE                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FCEE 4A28 0032                  		tst.b	$32(a0)
0000FCF2 6B00                       		bmi.s	locret_E188
0000FCF4 3038 D008                  		move.w	($FFFFD008).w,d0
0000FCF8 0440 0030                  		subi.w	#$30,d0
0000FCFC 9068 0008                  		sub.w	8(a0),d0
0000FD00 6400                       		bcc.s	locret_E188
0000FD02 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD08 117C 000E 0020             		move.b	#$E,$20(a0)
0000FD0E 4268 0010                  		clr.w	$10(a0)
0000FD12 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FD18 117C 0002 0025             		move.b	#2,$25(a0)
0000FD1E 08E8 0007 0032             		bset	#7,$32(a0)
0000FD24                            
0000FD24                            locret_E188:
0000FD24 4E75                       		rts	
0000FD26                            ; End of function Obj43_Stop
0000FD26                            
0000FD26                            ; ===========================================================================
0000FD26                            Ani_obj43:
0000FD26                            	include "_anim\obj43.asm"
0000FD26                            ; ---------------------------------------------------------------------------
0000FD26                            ; Animation script - Roller enemy
0000FD26                            ; ---------------------------------------------------------------------------
0000FD26 0000                       		dc.w byte_E190-Ani_obj43
0000FD28 0000                       		dc.w byte_E196-Ani_obj43
0000FD2A 0000                       		dc.w byte_E19C-Ani_obj43
0000FD2C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FD32 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FD38 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FD3E 00                         		even
0000FD3E 00                         		even
0000FD3E                            
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E                            ; Sprite mappings - Roller enemy (SYZ)
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E                            Map_obj43:
0000FD3E                            	include "_maps\obj43.asm"
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E                            ; Sprite mappings - Roller enemy (SYZ)
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FD42 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FD46 0000                       		dc.w byte_E1CE-Map_obj43
0000FD48 02                         byte_E1AC:	dc.b 2
0000FD49 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FD4E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FD53 02                         byte_E1B7:	dc.b 2
0000FD54 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FD59 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FD5E 01                         byte_E1C2:	dc.b 1
0000FD5F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FD64 01                         byte_E1C8:	dc.b 1
0000FD65 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FD6A 01                         byte_E1CE:	dc.b 1
0000FD6B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FD70                            		even
0000FD70                            		even
0000FD70                            
0000FD70                            ; ===========================================================================
0000FD70                            ; ---------------------------------------------------------------------------
0000FD70                            ; Object 44 - walls (GHZ)
0000FD70                            ; ---------------------------------------------------------------------------
0000FD70                            
0000FD70                            Obj44:					; XREF: Obj_Index
0000FD70 7000                       		moveq	#0,d0
0000FD72 1028 0024                  		move.b	$24(a0),d0
0000FD76 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FD7A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FD7E                            ; ===========================================================================
0000FD7E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FD80 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FD82 0000                       		dc.w Obj44_Display-Obj44_Index
0000FD84                            ; ===========================================================================
0000FD84                            
0000FD84                            Obj44_Main:				; XREF: Obj44_Index
0000FD84 5428 0024                  		addq.b	#2,$24(a0)
0000FD88 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FD90 317C 434C 0002             		move.w	#$434C,2(a0)
0000FD96 0028 0004 0001             		ori.b	#4,1(a0)
0000FD9C 117C 0008 0019             		move.b	#8,$19(a0)
0000FDA2 117C 0006 0018             		move.b	#6,$18(a0)
0000FDA8 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FDAE 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FDB4 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FDB6 5428 0024                  		addq.b	#2,$24(a0)
0000FDBA 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FDBC                            ; ===========================================================================
0000FDBC                            
0000FDBC                            Obj44_Solid:				; XREF: Obj44_Index
0000FDBC 323C 0013                  		move.w	#$13,d1
0000FDC0 343C 0028                  		move.w	#$28,d2
0000FDC4 6100 A686                  		bsr.w	Obj44_SolidWall
0000FDC8                            
0000FDC8                            Obj44_Display:				; XREF: Obj44_Index
0000FDC8 6100 F3BC                  		bsr.w	DisplaySprite
0000FDCC 3028 0008                  		move.w	8(a0),d0
0000FDD0 0240 FF80                  		andi.w	#$FF80,d0
0000FDD4 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDD8 0441 0080                  		subi.w	#$80,d1
0000FDDC 0241 FF80                  		andi.w	#$FF80,d1
0000FDE0 9041                       		sub.w	d1,d0
0000FDE2 0C40 0280                  		cmpi.w	#$280,d0
0000FDE6 6200 F3DA                  		bhi.w	DeleteObject
0000FDEA 4E75                       		rts	
0000FDEC                            ; ===========================================================================
0000FDEC                            ; ---------------------------------------------------------------------------
0000FDEC                            ; Sprite mappings - walls (GHZ)
0000FDEC                            ; ---------------------------------------------------------------------------
0000FDEC                            Map_obj44:
0000FDEC                            	include "_maps\obj44.asm"
0000FDEC                            ; ---------------------------------------------------------------------------
0000FDEC                            ; Sprite mappings - walls (GHZ)
0000FDEC                            ; ---------------------------------------------------------------------------
0000FDEC 0000                       		dc.w byte_E256-Map_obj44
0000FDEE 0000                       		dc.w byte_E26B-Map_obj44
0000FDF0 0000                       		dc.w byte_E280-Map_obj44
0000FDF2 04                         byte_E256:	dc.b 4
0000FDF3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FDF8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FDFD 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FE02 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FE07 04                         byte_E26B:	dc.b 4
0000FE08 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FE0D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FE12 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FE17 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FE1C 04                         byte_E280:	dc.b 4
0000FE1D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FE22 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FE27 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FE2C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FE32 00                         		even
0000FE32 00                         		even
0000FE32                            
0000FE32                            ; ===========================================================================
0000FE32                            ; ---------------------------------------------------------------------------
0000FE32                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FE32                            ; ---------------------------------------------------------------------------
0000FE32                            
0000FE32                            Obj13:					; XREF: Obj_Index
0000FE32 7000                       		moveq	#0,d0
0000FE34 1028 0024                  		move.b	$24(a0),d0
0000FE38 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FE3C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FE40 6000 0000                  		bra.w	Obj14_ChkDel
0000FE44                            ; ===========================================================================
0000FE44 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FE46 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FE48                            ; ---------------------------------------------------------------------------
0000FE48                            ;
0000FE48                            ; Lava ball production rates
0000FE48                            ;
0000FE48 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FE4E                            ; ===========================================================================
0000FE4E                            
0000FE4E                            Obj13_Main:				; XREF: Obj13_Index
0000FE4E 5428 0024                  		addq.b	#2,$24(a0)
0000FE52 1028 0028                  		move.b	$28(a0),d0
0000FE56 E848                       		lsr.w	#4,d0
0000FE58 0240 000F                  		andi.w	#$F,d0
0000FE5C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FE62 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FE68 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FE6E                            
0000FE6E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FE6E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FE72 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FE74 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FE7A 6100 F584                  		bsr.w	ChkObjOnScreen
0000FE7E 6600                       		bne.s	locret_E302
0000FE80 6100 F798                  		bsr.w	SingleObjLoad
0000FE84 6600                       		bne.s	locret_E302
0000FE86 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FE8A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE90 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FE96 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FE9C                            
0000FE9C                            locret_E302:
0000FE9C 4E75                       		rts	
0000FE9E                            ; ===========================================================================
0000FE9E                            ; ---------------------------------------------------------------------------
0000FE9E                            ; Object 14 - lava balls (MZ, SLZ)
0000FE9E                            ; ---------------------------------------------------------------------------
0000FE9E                            
0000FE9E                            Obj14:					; XREF: Obj_Index
0000FE9E 7000                       		moveq	#0,d0
0000FEA0 1028 0024                  		move.b	$24(a0),d0
0000FEA4 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FEA8 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FEAC 6000 F2D8                  		bra.w	DisplaySprite
0000FEB0                            ; ===========================================================================
0000FEB0 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FEB2 0000                       		dc.w Obj14_Action-Obj14_Index
0000FEB4 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FEB6                            
0000FEB6 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FEC0 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FEC8                            ; ===========================================================================
0000FEC8                            
0000FEC8                            Obj14_Main:				; XREF: Obj14_Index
0000FEC8 5428 0024                  		addq.b	#2,$24(a0)
0000FECC 117C 0008 0016             		move.b	#8,$16(a0)
0000FED2 117C 0008 0017             		move.b	#8,$17(a0)
0000FED8 217C 0000 CD8A 0004        		move.l	#Map_obj14,4(a0)
0000FEE0 317C 0345 0002             		move.w	#$345,2(a0)
0000FEE6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FEEC 6600                       		bne.s	loc_E35A
0000FEEE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FEF4                            
0000FEF4                            loc_E35A:
0000FEF4 117C 0004 0001             		move.b	#4,1(a0)
0000FEFA 117C 0003 0018             		move.b	#3,$18(a0)
0000FF00 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FF06 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FF0C 4A28 0029                  		tst.b	$29(a0)
0000FF10 6700                       		beq.s	Obj14_SetSpeed
0000FF12 5428 0018                  		addq.b	#2,$18(a0)
0000FF16                            
0000FF16                            Obj14_SetSpeed:
0000FF16 7000                       		moveq	#0,d0
0000FF18 1028 0028                  		move.b	$28(a0),d0
0000FF1C D040                       		add.w	d0,d0
0000FF1E 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FF24 117C 0008 0019             		move.b	#8,$19(a0)
0000FF2A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FF30 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FF32 117C 0010 0019             		move.b	#$10,$19(a0)
0000FF38 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FF3E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FF44 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FF4A                            
0000FF4A                            Obj14_PlaySnd:
0000FF4A 303C 00AE                  		move.w	#$AE,d0
0000FF4E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FF54                            
0000FF54                            Obj14_Action:				; XREF: Obj14_Index
0000FF54 7000                       		moveq	#0,d0
0000FF56 1028 0028                  		move.b	$28(a0),d0
0000FF5A D040                       		add.w	d0,d0
0000FF5C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FF60 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FF64 6100 F206                  		bsr.w	SpeedToPos
0000FF68 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FF6E 6100 C1C8                  		bsr.w	AnimateSprite
0000FF72                            
0000FF72                            Obj14_ChkDel:				; XREF: Obj13
0000FF72 3028 0008                  		move.w	8(a0),d0
0000FF76 0240 FF80                  		andi.w	#$FF80,d0
0000FF7A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF7E 0441 0080                  		subi.w	#$80,d1
0000FF82 0241 FF80                  		andi.w	#$FF80,d1
0000FF86 9041                       		sub.w	d1,d0
0000FF88 0C40 0280                  		cmpi.w	#$280,d0
0000FF8C 6200 F234                  		bhi.w	DeleteObject
0000FF90 4E75                       		rts	
0000FF92                            ; ===========================================================================
0000FF92 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FF96 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FF9A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FF9E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FFA2 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FFA4                            ; ===========================================================================
0000FFA4                            ; lavaball types 00-03 fly up and fall back down
0000FFA4                            
0000FFA4                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FFA4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FFAA 3028 0030                  		move.w	$30(a0),d0
0000FFAE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FFB2 6400                       		bcc.s	loc_E41E	; if not, branch
0000FFB4 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FFB8                            
0000FFB8                            loc_E41E:
0000FFB8 08A8 0001 0022             		bclr	#1,$22(a0)
0000FFBE 4A68 0012                  		tst.w	$12(a0)
0000FFC2 6A00                       		bpl.s	locret_E430
0000FFC4 08E8 0001 0022             		bset	#1,$22(a0)
0000FFCA                            
0000FFCA                            locret_E430:
0000FFCA 4E75                       		rts	
0000FFCC                            ; ===========================================================================
0000FFCC                            ; lavaball type	04 flies up until it hits the ceiling
0000FFCC                            
0000FFCC                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FFCC 08E8 0001 0022             		bset	#1,$22(a0)
0000FFD2 6100 0000                  		bsr.w	ObjHitCeiling
0000FFD6 4A41                       		tst.w	d1
0000FFD8 6A00                       		bpl.s	locret_E452
0000FFDA 117C 0008 0028             		move.b	#8,$28(a0)
0000FFE0 117C 0001 001C             		move.b	#1,$1C(a0)
0000FFE6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FFEC                            
0000FFEC                            locret_E452:
0000FFEC 4E75                       		rts	
0000FFEE                            ; ===========================================================================
0000FFEE                            ; lavaball type	05 falls down until it hits the	floor
0000FFEE                            
0000FFEE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FFEE 08A8 0001 0022             		bclr	#1,$22(a0)
0000FFF4 6100 0000                  		bsr.w	ObjHitFloor
0000FFF8 4A41                       		tst.w	d1
0000FFFA 6A00                       		bpl.s	locret_E474
0000FFFC 117C 0008 0028             		move.b	#8,$28(a0)
00010002 117C 0001 001C             		move.b	#1,$1C(a0)
00010008 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0001000E                            
0001000E                            locret_E474:
0001000E 4E75                       		rts	
00010010                            ; ===========================================================================
00010010                            ; lavaball types 06-07 move sideways
00010010                            
00010010                            Obj14_Type06:				; XREF: Obj14_TypeIndex
00010010 08E8 0000 0022             		bset	#0,$22(a0)
00010016 76F8                       		moveq	#-8,d3
00010018 6100 0000                  		bsr.w	ObjHitWallLeft
0001001C 4A41                       		tst.w	d1
0001001E 6A00                       		bpl.s	locret_E498
00010020 117C 0008 0028             		move.b	#8,$28(a0)
00010026 117C 0003 001C             		move.b	#3,$1C(a0)
0001002C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00010032                            
00010032                            locret_E498:
00010032 4E75                       		rts	
00010034                            ; ===========================================================================
00010034                            
00010034                            Obj14_Type07:				; XREF: Obj14_TypeIndex
00010034 08A8 0000 0022             		bclr	#0,$22(a0)
0001003A 7608                       		moveq	#8,d3
0001003C 6100 0000                  		bsr.w	ObjHitWallRight
00010040 4A41                       		tst.w	d1
00010042 6A00                       		bpl.s	locret_E4BC
00010044 117C 0008 0028             		move.b	#8,$28(a0)
0001004A 117C 0003 001C             		move.b	#3,$1C(a0)
00010050 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00010056                            
00010056                            locret_E4BC:
00010056 4E75                       		rts	
00010058                            ; ===========================================================================
00010058                            
00010058                            Obj14_Type08:				; XREF: Obj14_TypeIndex
00010058 4E75                       		rts	
0001005A                            ; ===========================================================================
0001005A                            
0001005A                            Obj14_Delete:				; XREF: Obj14_Index
0001005A 6000 F166                  		bra.w	DeleteObject
0001005E                            ; ===========================================================================
0001005E                            Ani_obj14:
0001005E                            	include "_anim\obj14.asm"
0001005E                            ; ---------------------------------------------------------------------------
0001005E                            ; Animation script - lava balls
0001005E                            ; ---------------------------------------------------------------------------
0001005E 0000                       		dc.w byte_E4CC-Ani_obj14
00010060 0000                       		dc.w byte_E4D2-Ani_obj14
00010062 0000                       		dc.w byte_E4D6-Ani_obj14
00010064 0000                       		dc.w byte_E4DC-Ani_obj14
00010066 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0001006C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
00010070 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
00010076 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0001007A                            		even
0001007A                            		even
0001007A                            
0001007A                            ; ===========================================================================
0001007A                            ; ---------------------------------------------------------------------------
0001007A                            ; Object 6D - flame thrower (SBZ)
0001007A                            ; ---------------------------------------------------------------------------
0001007A                            
0001007A                            Obj6D:					; XREF: Obj_Index
0001007A 7000                       		moveq	#0,d0
0001007C 1028 0024                  		move.b	$24(a0),d0
00010080 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
00010084 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
00010088                            ; ===========================================================================
00010088 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0001008A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0001008C                            ; ===========================================================================
0001008C                            
0001008C                            Obj6D_Main:				; XREF: Obj6D_Index
0001008C 5428 0024                  		addq.b	#2,$24(a0)
00010090 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
00010098 317C 83D9 0002             		move.w	#$83D9,2(a0)
0001009E 0028 0004 0001             		ori.b	#4,1(a0)
000100A4 117C 0001 0018             		move.b	#1,$18(a0)
000100AA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000100B0 117C 000C 0019             		move.b	#$C,$19(a0)
000100B6 1028 0028                  		move.b	$28(a0),d0
000100BA 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000100BE D040                       		add.w	d0,d0		; multiply by 2
000100C0 3140 0030                  		move.w	d0,$30(a0)
000100C4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000100C8 1028 0028                  		move.b	$28(a0),d0
000100CC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000100D0 EB48                       		lsl.w	#5,d0		; multiply by $20
000100D2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000100D6 117C 000A 0036             		move.b	#$A,$36(a0)
000100DC 0828 0001 0022             		btst	#1,$22(a0)
000100E2 6700                       		beq.s	Obj6D_Action
000100E4 117C 0002 001C             		move.b	#2,$1C(a0)
000100EA 117C 0015 0036             		move.b	#$15,$36(a0)
000100F0                            
000100F0                            Obj6D_Action:				; XREF: Obj6D_Index
000100F0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000100F4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000100F6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000100FC 0868 0000 001C             		bchg	#0,$1C(a0)
00010102 6700                       		beq.s	loc_E57A
00010104 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0001010A 303C 00B3                  		move.w	#$B3,d0
0001010E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010114                            
00010114                            loc_E57A:
00010114 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0001011A 6100 C01C                  		bsr.w	AnimateSprite
0001011E 117C 0000 0020             		move.b	#0,$20(a0)
00010124 1028 0036                  		move.b	$36(a0),d0
00010128 B028 001A                  		cmp.b	$1A(a0),d0
0001012C 6600                       		bne.s	Obj6D_ChkDel
0001012E 117C 00A3 0020             		move.b	#$A3,$20(a0)
00010134                            
00010134                            Obj6D_ChkDel:
00010134 3028 0008                  		move.w	8(a0),d0
00010138 0240 FF80                  		andi.w	#$FF80,d0
0001013C 3238 F700                  		move.w	($FFFFF700).w,d1
00010140 0441 0080                  		subi.w	#$80,d1
00010144 0241 FF80                  		andi.w	#$FF80,d1
00010148 9041                       		sub.w	d1,d0
0001014A 0C40 0280                  		cmpi.w	#$280,d0
0001014E 6200 F072                  		bhi.w	DeleteObject
00010152 6000 F032                  		bra.w	DisplaySprite
00010156                            ; ===========================================================================
00010156                            Ani_obj6D:
00010156                            	include "_anim\obj6D.asm"
00010156                            ; ---------------------------------------------------------------------------
00010156                            ; Animation script - flamethrower (SBZ)
00010156                            ; ---------------------------------------------------------------------------
00010156 0000                       		dc.w byte_E5C4-Ani_obj6D
00010158 0000                       		dc.w byte_E5D2-Ani_obj6D
0001015A 0000                       		dc.w byte_E5DC-Ani_obj6D
0001015C 0000                       		dc.w byte_E5EA-Ani_obj6D
0001015E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0001016C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
00010176 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
00010184 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0001018E                            		even
0001018E                            		even
0001018E                            
0001018E                            ; ---------------------------------------------------------------------------
0001018E                            ; Sprite mappings - flame thrower (SBZ)
0001018E                            ; ---------------------------------------------------------------------------
0001018E                            Map_obj6D:
0001018E                            	include "_maps\obj6D.asm"
0001018E                            ; ---------------------------------------------------------------------------
0001018E                            ; Sprite mappings - flame thrower (SBZ)
0001018E                            ; ---------------------------------------------------------------------------
0001018E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
00010192 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00010196 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0001019A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0001019E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
000101A2 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
000101A6 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
000101AA 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
000101AE 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
000101B2 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
000101B6 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
000101BA 01                         byte_E620:	dc.b 1
000101BB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101C0 02                         byte_E626:	dc.b 2
000101C1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101C6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101CB 02                         byte_E631:	dc.b 2
000101CC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101D1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101D6 03                         byte_E63C:	dc.b 3
000101D7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101DC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101E1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101E6 03                         byte_E64C:	dc.b 3
000101E7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101EC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101F1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101F6 04                         byte_E65C:	dc.b 4
000101F7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101FC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010201 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010206 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001020B 04                         byte_E671:	dc.b 4
0001020C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010211 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010216 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001021B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010220 05                         byte_E686:	dc.b 5
00010221 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010226 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001022B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010230 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010235 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001023A 05                         byte_E6A0:	dc.b 5
0001023B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010240 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010245 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001024A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001024F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010254 06                         byte_E6BA:	dc.b 6
00010255 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001025A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001025F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010264 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010269 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001026E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010273 06                         byte_E6D9:	dc.b 6
00010274 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010279 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001027E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010283 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010288 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001028D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010292 01                         byte_E6F8:	dc.b 1
00010293 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010298 02                         byte_E6FE:	dc.b 2
00010299 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001029E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102A3 02                         byte_E709:	dc.b 2
000102A4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102A9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102AE 03                         byte_E714:	dc.b 3
000102AF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000102B4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102B9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102BE 03                         byte_E724:	dc.b 3
000102BF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000102C4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102C9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102CE 04                         byte_E734:	dc.b 4
000102CF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000102D4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000102D9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102DE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102E3 04                         byte_E749:	dc.b 4
000102E4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000102E9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000102EE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102F3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102F8 05                         byte_E75E:	dc.b 5
000102F9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000102FE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010303 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010308 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001030D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010312 05                         byte_E778:	dc.b 5
00010313 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010318 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001031D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010322 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010327 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001032C 06                         byte_E792:	dc.b 6
0001032D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010332 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010337 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001033C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010341 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010346 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001034B 06                         byte_E7B1:	dc.b 6
0001034C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010351 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010356 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001035B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010360 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010365 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001036A                            		even
0001036A                            		even
0001036A                            
0001036A                            ; ===========================================================================
0001036A                            ; ---------------------------------------------------------------------------
0001036A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001036A                            ; ---------------------------------------------------------------------------
0001036A                            
0001036A                            Obj46:					; XREF: Obj_Index
0001036A 7000                       		moveq	#0,d0
0001036C 1028 0024                  		move.b	$24(a0),d0
00010370 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00010374 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00010378                            ; ===========================================================================
00010378 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0001037A 0000                       		dc.w Obj46_Action-Obj46_Index
0001037C                            ; ===========================================================================
0001037C                            
0001037C                            Obj46_Main:				; XREF: Obj46_Index
0001037C 5428 0024                  		addq.b	#2,$24(a0)
00010380 117C 000F 0016             		move.b	#$F,$16(a0)
00010386 117C 000F 0017             		move.b	#$F,$17(a0)
0001038C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010394 317C 4000 0002             		move.w	#$4000,2(a0)
0001039A 117C 0004 0001             		move.b	#4,1(a0)
000103A0 117C 0003 0018             		move.b	#3,$18(a0)
000103A6 117C 0010 0019             		move.b	#$10,$19(a0)
000103AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103B2 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000103B8                            
000103B8                            Obj46_Action:				; XREF: Obj46_Index
000103B8 4A28 0001                  		tst.b	1(a0)
000103BC 6A00                       		bpl.s	Obj46_ChkDel
000103BE 7000                       		moveq	#0,d0
000103C0 1028 0028                  		move.b	$28(a0),d0	; get object type
000103C4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000103C8 D040                       		add.w	d0,d0
000103CA 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000103CE 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000103D2 323C 001B                  		move.w	#$1B,d1
000103D6 343C 0010                  		move.w	#$10,d2
000103DA 363C 0011                  		move.w	#$11,d3
000103DE 3828 0008                  		move.w	8(a0),d4
000103E2 6100 0000                  		bsr.w	SolidObject
000103E6                            
000103E6                            Obj46_ChkDel:
000103E6 6100 ED9E                  		bsr.w	DisplaySprite
000103EA 3028 0008                  		move.w	8(a0),d0
000103EE 0240 FF80                  		andi.w	#$FF80,d0
000103F2 3238 F700                  		move.w	($FFFFF700).w,d1
000103F6 0441 0080                  		subi.w	#$80,d1
000103FA 0241 FF80                  		andi.w	#$FF80,d1
000103FE 9041                       		sub.w	d1,d0
00010400 0C40 0280                  		cmpi.w	#$280,d0
00010404 6200 EDBC                  		bhi.w	DeleteObject
00010408 4E75                       		rts	
0001040A                            ; ===========================================================================
0001040A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0001040C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001040E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00010410 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00010412 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010414                            ; ===========================================================================
00010414                            
00010414                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010414 4E75                       		rts	
00010416                            ; ===========================================================================
00010416                            
00010416                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010416 3038 D008                  		move.w	($FFFFD008).w,d0
0001041A 9068 0008                  		sub.w	8(a0),d0
0001041E 6400                       		bcc.s	loc_E888
00010420 4440                       		neg.w	d0
00010422                            
00010422                            loc_E888:
00010422 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010426 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010428 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001042E                            
0001042E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001042E 7000                       		moveq	#0,d0
00010430 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010434 0828 0003 0028             		btst	#3,$28(a0)
0001043A 6700                       		beq.s	loc_E8A8
0001043C 4440                       		neg.w	d0
0001043E 0640 0010                  		addi.w	#$10,d0
00010442                            
00010442                            loc_E8A8:
00010442 3228 0030                  		move.w	$30(a0),d1
00010446 9240                       		sub.w	d0,d1
00010448 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001044C 4E75                       		rts	
0001044E                            ; ===========================================================================
0001044E                            
0001044E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0001044E 6100 ED1C                  		bsr.w	SpeedToPos
00010452 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010458 6100 0000                  		bsr.w	ObjHitFloor
0001045C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001045E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010462 D368 000C                  		add.w	d1,$C(a0)
00010466 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0001046A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010470 117C 0004 0028             		move.b	#4,$28(a0)
00010476 3011                       		move.w	(a1),d0
00010478 0240 03FF                  		andi.w	#$3FF,d0
0001047C 0C40 02E8                  		cmpi.w	#$2E8,d0
00010480 6400                       		bcc.s	locret_E8EE
00010482 117C 0000 0028             		move.b	#0,$28(a0)
00010488                            
00010488                            locret_E8EE:
00010488 4E75                       		rts	
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0001048A 7000                       		moveq	#0,d0
0001048C 1038 FE70                  		move.b	($FFFFFE70).w,d0
00010490 E648                       		lsr.w	#3,d0
00010492 3228 0030                  		move.w	$30(a0),d1
00010496 9240                       		sub.w	d0,d1
00010498 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001049C 4E75                       		rts	
0001049E                            ; ===========================================================================
0001049E                            ; ---------------------------------------------------------------------------
0001049E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001049E                            ; ---------------------------------------------------------------------------
0001049E                            Map_obj46:
0001049E                            	include "_maps\obj46.asm"
0001049E                            ; ---------------------------------------------------------------------------
0001049E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001049E                            ; ---------------------------------------------------------------------------
0001049E 0000                       		dc.w byte_E906-Map_obj46
000104A0 01                         byte_E906:	dc.b 1
000104A1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000104A6                            		even
000104A6                            		even
000104A6                            
000104A6                            ; ===========================================================================
000104A6                            ; ---------------------------------------------------------------------------
000104A6                            ; Object 12 - lamp (SYZ)
000104A6                            ; ---------------------------------------------------------------------------
000104A6                            
000104A6                            Obj12:					; XREF: Obj_Index
000104A6 7000                       		moveq	#0,d0
000104A8 1028 0024                  		move.b	$24(a0),d0
000104AC 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000104B0 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000104B4                            ; ===========================================================================
000104B4 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000104B6 0000                       		dc.w Obj12_Animate-Obj12_Index
000104B8                            ; ===========================================================================
000104B8                            
000104B8                            Obj12_Main:				; XREF: Obj12_Index
000104B8 5428 0024                  		addq.b	#2,$24(a0)
000104BC 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000104C4 317C 0000 0002             		move.w	#0,2(a0)
000104CA 117C 0004 0001             		move.b	#4,1(a0)
000104D0 117C 0010 0019             		move.b	#$10,$19(a0)
000104D6 117C 0006 0018             		move.b	#6,$18(a0)
000104DC                            
000104DC                            Obj12_Animate:				; XREF: Obj12_Index
000104DC 5328 001E                  		subq.b	#1,$1E(a0)
000104E0 6A00                       		bpl.s	Obj12_ChkDel
000104E2 117C 0007 001E             		move.b	#7,$1E(a0)
000104E8 5228 001A                  		addq.b	#1,$1A(a0)
000104EC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000104F2 6500                       		bcs.s	Obj12_ChkDel
000104F4 117C 0000 001A             		move.b	#0,$1A(a0)
000104FA                            
000104FA                            Obj12_ChkDel:
000104FA 3028 0008                  		move.w	8(a0),d0
000104FE 0240 FF80                  		andi.w	#$FF80,d0
00010502 3238 F700                  		move.w	($FFFFF700).w,d1
00010506 0441 0080                  		subi.w	#$80,d1
0001050A 0241 FF80                  		andi.w	#$FF80,d1
0001050E 9041                       		sub.w	d1,d0
00010510 0C40 0280                  		cmpi.w	#$280,d0
00010514 6200 ECAC                  		bhi.w	DeleteObject
00010518 6000 EC6C                  		bra.w	DisplaySprite
0001051C                            ; ===========================================================================
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            ; Sprite mappings - lamp (SYZ)
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            Map_obj12:
0001051C                            	include "_maps\obj12.asm"
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            ; Sprite mappings - lamp (SYZ)
0001051C                            ; ---------------------------------------------------------------------------
0001051C 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00010520 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010524 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010528 02                         byte_E98E:	dc.b 2
00010529 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001052E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010533 02                         byte_E999:	dc.b 2
00010534 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010539 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001053E 02                         byte_E9A4:	dc.b 2
0001053F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010544 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010549 02                         byte_E9AF:	dc.b 2
0001054A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001054F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010554 02                         byte_E9BA:	dc.b 2
00010555 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0001055A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001055F 02                         byte_E9C5:	dc.b 2
00010560 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010565 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0001056A                            		even
0001056A                            		even
0001056A                            
0001056A                            ; ===========================================================================
0001056A                            ; ---------------------------------------------------------------------------
0001056A                            ; Object 47 - pinball bumper (SYZ)
0001056A                            ; ---------------------------------------------------------------------------
0001056A                            
0001056A                            Obj47:					; XREF: Obj_Index
0001056A 7000                       		moveq	#0,d0
0001056C 1028 0024                  		move.b	$24(a0),d0
00010570 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010574 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010578                            ; ===========================================================================
00010578 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0001057A 0000                       		dc.w Obj47_Hit-Obj47_Index
0001057C                            ; ===========================================================================
0001057C                            
0001057C                            Obj47_Main:				; XREF: Obj47_Index
0001057C 5428 0024                  		addq.b	#2,$24(a0)
00010580 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010588 317C 0380 0002             		move.w	#$380,2(a0)
0001058E 117C 0004 0001             		move.b	#4,1(a0)
00010594 117C 0010 0019             		move.b	#$10,$19(a0)
0001059A 117C 0001 0018             		move.b	#1,$18(a0)
000105A0 117C 00D7 0020             		move.b	#$D7,$20(a0)
000105A6                            
000105A6                            Obj47_Hit:				; XREF: Obj47_Index
000105A6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000105AA 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000105AE 4228 0021                  		clr.b	$21(a0)
000105B2 43F8 D000                  		lea	($FFFFD000).w,a1
000105B6 3228 0008                  		move.w	8(a0),d1
000105BA 3428 000C                  		move.w	$C(a0),d2
000105BE 9269 0008                  		sub.w	8(a1),d1
000105C2 9469 000C                  		sub.w	$C(a1),d2
000105C6 4EB9 0000 2E48             		jsr	(CalcAngle).l
000105CC 4EB9 0000 2B7A             		jsr	(CalcSine).l
000105D2 C3FC F900                  		muls.w	#-$700,d1
000105D6 E081                       		asr.l	#8,d1
000105D8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000105DC C1FC F900                  		muls.w	#-$700,d0
000105E0 E080                       		asr.l	#8,d0
000105E2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
000105E6 08E9 0001 0022             		bset	#1,$22(a1)
000105EC 08A9 0004 0022             		bclr	#4,$22(a1)
000105F2 08A9 0005 0022             		bclr	#5,$22(a1)
000105F8 4229 003C                  		clr.b	$3C(a1)
000105FC 117C 0001 001C             		move.b	#1,$1C(a0)
00010602 303C 00B4                  		move.w	#$B4,d0
00010606 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bumper sound
0001060C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010610 7000                       		moveq	#0,d0
00010612 1028 0023                  		move.b	$23(a0),d0
00010616 6700                       		beq.s	Obj47_Score
00010618 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0001061E 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010620 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010624                            
00010624                            Obj47_Score:
00010624 7001                       		moveq	#1,d0
00010626 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001062C 6100 EFEC                  		bsr.w	SingleObjLoad
00010630 6600                       		bne.s	Obj47_Display
00010632 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010636 3368 0008 0008             		move.w	8(a0),8(a1)
0001063C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010642 137C 0004 001A             		move.b	#4,$1A(a1)
00010648                            
00010648                            Obj47_Display:
00010648 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0001064E 6100 BAE8                  		bsr.w	AnimateSprite
00010652 3028 0008                  		move.w	8(a0),d0
00010656 0240 FF80                  		andi.w	#$FF80,d0
0001065A 3238 F700                  		move.w	($FFFFF700).w,d1
0001065E 0441 0080                  		subi.w	#$80,d1
00010662 0241 FF80                  		andi.w	#$FF80,d1
00010666 9041                       		sub.w	d1,d0
00010668 0C40 0280                  		cmpi.w	#$280,d0
0001066C 6200                       		bhi.s	Obj47_ChkHit
0001066E 6000 EB16                  		bra.w	DisplaySprite
00010672                            ; ===========================================================================
00010672                            
00010672                            Obj47_ChkHit:				; XREF: Obj47_Display
00010672 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010676 7000                       		moveq	#0,d0
00010678 1028 0023                  		move.b	$23(a0),d0
0001067C 6700                       		beq.s	Obj47_Delete
0001067E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010684                            
00010684                            Obj47_Delete:
00010684 6000 EB3C                  		bra.w	DeleteObject
00010688                            ; ===========================================================================
00010688                            Ani_obj47:
00010688                            	include "_anim\obj47.asm"
00010688                            ; ---------------------------------------------------------------------------
00010688                            ; Animation script - flamethrower (SBZ)
00010688                            ; ---------------------------------------------------------------------------
00010688 0000                       		dc.w byte_EAF4-Ani_obj47
0001068A 0000                       		dc.w byte_EAF8-Ani_obj47
0001068C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
00010690 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00010698                            		even
00010698                            		even
00010698                            
00010698                            ; ---------------------------------------------------------------------------
00010698                            ; Sprite mappings - pinball bumper (SYZ)
00010698                            ; ---------------------------------------------------------------------------
00010698                            Map_obj47:
00010698                            	include "_maps\obj47.asm"
00010698                            ; ---------------------------------------------------------------------------
00010698                            ; Sprite mappings - pinball bumper (SYZ)
00010698                            ; ---------------------------------------------------------------------------
00010698 0000                       		dc.w byte_EB06-Map_obj47
0001069A 0000                       		dc.w byte_EB11-Map_obj47
0001069C 0000                       		dc.w byte_EB1C-Map_obj47
0001069E 02                         byte_EB06:	dc.b 2
0001069F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000106A4 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000106A9 02                         byte_EB11:	dc.b 2
000106AA F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000106AF F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000106B4 02                         byte_EB1C:	dc.b 2
000106B5 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000106BA F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000106C0 00                         		even
000106C0 00                         		even
000106C0                            
000106C0                            ; ===========================================================================
000106C0                            ; ---------------------------------------------------------------------------
000106C0                            ; Object 0D - signpost at the end of a level
000106C0                            ; ---------------------------------------------------------------------------
000106C0                            
000106C0                            Obj0D:					; XREF: Obj_Index
000106C0 7000                       		moveq	#0,d0
000106C2 1028 0024                  		move.b	$24(a0),d0
000106C6 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000106CA 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000106CE 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000106D4 6100 BA62                  		bsr.w	AnimateSprite
000106D8 6100 EAAC                  		bsr.w	DisplaySprite
000106DC 3028 0008                  		move.w	8(a0),d0
000106E0 0240 FF80                  		andi.w	#$FF80,d0
000106E4 3238 F700                  		move.w	($FFFFF700).w,d1
000106E8 0441 0080                  		subi.w	#$80,d1
000106EC 0241 FF80                  		andi.w	#$FF80,d1
000106F0 9041                       		sub.w	d1,d0
000106F2 0C40 0280                  		cmpi.w	#$280,d0
000106F6 6200 EACA                  		bhi.w	DeleteObject
000106FA 4E75                       		rts	
000106FC                            ; ===========================================================================
000106FC 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
000106FE 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00010700 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00010702 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010704 0000                       		dc.w locret_ED1A-Obj0D_Index
00010706                            ; ===========================================================================
00010706                            
00010706                            Obj0D_Main:				; XREF: Obj0D_Index
00010706 5428 0024                  		addq.b	#2,$24(a0)
0001070A 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010712 317C 0680 0002             		move.w	#$680,2(a0)
00010718 117C 0004 0001             		move.b	#4,1(a0)
0001071E 117C 0018 0019             		move.b	#$18,$19(a0)
00010724 117C 0004 0018             		move.b	#4,$18(a0)
0001072A                            
0001072A                            Obj0D_Touch:				; XREF: Obj0D_Index
0001072A 3038 D008                  		move.w	($FFFFD008).w,d0
0001072E 9068 0008                  		sub.w	8(a0),d0
00010732 6500                       		bcs.s	locret_EBBA
00010734 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010738 6400                       		bcc.s	locret_EBBA	; if not, branch
0001073A 303C 00CF                  		move.w	#$CF,d0
0001073E 4EB9 0000 12C6             		jsr	(PlaySound).l	; play signpost	sound
00010744 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010748 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0001074E 5428 0024                  		addq.b	#2,$24(a0)
00010752                            
00010752                            locret_EBBA:
00010752 4E75                       		rts	
00010754                            ; ===========================================================================
00010754                            
00010754                            Obj0D_Spin:				; XREF: Obj0D_Index
00010754 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010758 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0001075A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00010760 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00010764 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0001076A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0001076C 5428 0024                  		addq.b	#2,$24(a0)
00010770                            
00010770                            Obj0D_Sparkle:
00010770 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00010774 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010776 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0001077C 7000                       		moveq	#0,d0
0001077E 1028 0034                  		move.b	$34(a0),d0
00010782 5428 0034                  		addq.b	#2,$34(a0)
00010786 0228 000E 0034             		andi.b	#$E,$34(a0)
0001078C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010790 6100 EE88                  		bsr.w	SingleObjLoad
00010794 6600                       		bne.s	locret_EC42
00010796 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0001079A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000107A0 101A                       		move.b	(a2)+,d0
000107A2 4880                       		ext.w	d0
000107A4 D068 0008                  		add.w	8(a0),d0
000107A8 3340 0008                  		move.w	d0,8(a1)
000107AC 101A                       		move.b	(a2)+,d0
000107AE 4880                       		ext.w	d0
000107B0 D068 000C                  		add.w	$C(a0),d0
000107B4 3340 000C                  		move.w	d0,$C(a1)
000107B8 237C 0000 B9AE 0004        		move.l	#Map_obj25,4(a1)
000107C0 337C 27B2 0002             		move.w	#$27B2,2(a1)
000107C6 137C 0004 0001             		move.b	#4,1(a1)
000107CC 137C 0002 0018             		move.b	#2,$18(a1)
000107D2 137C 0008 0019             		move.b	#8,$19(a1)
000107D8                            
000107D8                            locret_EC42:
000107D8 4E75                       		rts	
000107DA                            ; ===========================================================================
000107DA E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000107DC 0808                       		dc.b	8,   8
000107DE F000                       		dc.b -$10,   0
000107E0 18F8                       		dc.b  $18,  -8
000107E2 00F8                       		dc.b	0,  -8
000107E4 1000                       		dc.b  $10,   0
000107E6 E808                       		dc.b -$18,   8
000107E8 1810                       		dc.b  $18, $10
000107EA                            ; ===========================================================================
000107EA                            
000107EA                            Obj0D_SonicRun:				; XREF: Obj0D_Index
000107EA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000107EE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
000107F2 0838 0001 D022             		btst	#1,($FFFFD022).w
000107F8 6600                       		bne.s	loc_EC70
000107FA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00010800 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00010806                            
00010806                            loc_EC70:
00010806 4A38 D000                  		tst.b	($FFFFD000).w
0001080A 6700                       		beq.s	loc_EC86
0001080C 3038 D008                  		move.w	($FFFFD008).w,d0
00010810 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010814 0641 0128                  		addi.w	#$128,d1
00010818 B041                       		cmp.w	d1,d0
0001081A 6500                       		bcs.s	locret_ECEE
0001081C                            
0001081C                            loc_EC86:
0001081C 5428 0024                  		addq.b	#2,$24(a0)
00010820                            
00010820                            ; ---------------------------------------------------------------------------
00010820                            ; Subroutine to	set up bonuses at the end of an	act
00010820                            ; ---------------------------------------------------------------------------
00010820                            
00010820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010820                            
00010820                            
00010820                            GotThroughAct:				; XREF: Obj3E_EndAct
00010820 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010824 6600                       		bne.s	locret_ECEE
00010826 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0001082C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00010830 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010834 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0001083A 7010                       		moveq	#$10,d0
0001083C 4EB9 0000 15B8             		jsr	(LoadPLC2).l	; load title card patterns
00010842 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00010848 7000                       		moveq	#0,d0
0001084A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0001084E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010852 7200                       		moveq	#0,d1
00010854 1238 FE24                  		move.b	($FFFFFE24).w,d1
00010858 D041                       		add.w	d1,d0		; add up your time
0001085A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001085E 7214                       		moveq	#$14,d1
00010860 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010862 6500                       		bcs.s	loc_ECD0	; if not, branch
00010864 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010866                            
00010866                            loc_ECD0:
00010866 D040                       		add.w	d0,d0
00010868 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0001086E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00010872 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010876 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0001087A 303C 008E                  		move.w	#$8E,d0
0001087E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00010884                            
00010884                            locret_ECEE:
00010884 4E75                       		rts	
00010886                            ; End of function GotThroughAct
00010886                            
00010886                            ; ===========================================================================
00010886 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001089A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000108B0                            ; ===========================================================================
000108B0                            
000108B0                            locret_ED1A:				; XREF: Obj0D_Index
000108B0 4E75                       		rts	
000108B2                            ; ===========================================================================
000108B2                            Ani_obj0D:
000108B2                            	include "_anim\obj0D.asm"
000108B2                            ; ---------------------------------------------------------------------------
000108B2                            ; Animation script - signpost
000108B2                            ; ---------------------------------------------------------------------------
000108B2 0000                       		dc.w byte_ED24-Ani_obj0D
000108B4 0000                       		dc.w byte_ED28-Ani_obj0D
000108B6 0000                       		dc.w byte_ED2E-Ani_obj0D
000108B8 0000                       		dc.w byte_ED34-Ani_obj0D
000108BA 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000108BE 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000108C4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000108CA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
000108CE 00                         		even
000108CE 00                         		even
000108CE                            
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            ; Sprite mappings - signpost
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            Map_obj0D:
000108CE                            	include "_maps\obj0D.asm"
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            ; Sprite mappings - signpost
000108CE                            ; ---------------------------------------------------------------------------
000108CE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
000108D2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
000108D6 0000                       		dc.w byte_ED73-Map_obj0D
000108D8 03                         byte_ED42:	dc.b 3
000108D9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
000108DE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
000108E3 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000108E8 02                         byte_ED52:	dc.b 2
000108E9 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
000108EE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000108F3 02                         byte_ED5D:	dc.b 2
000108F4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
000108F9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
000108FE 02                         byte_ED68:	dc.b 2
000108FF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010904 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010909 03                         byte_ED73:	dc.b 3
0001090A F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001090F F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010914 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001091A 00                         		even
0001091A 00                         		even
0001091A                            
0001091A                            ; ===========================================================================
0001091A                            ; ---------------------------------------------------------------------------
0001091A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0001091A                            ; ---------------------------------------------------------------------------
0001091A                            
0001091A                            Obj4C:					; XREF: Obj_Index
0001091A 7000                       		moveq	#0,d0
0001091C 1028 0024                  		move.b	$24(a0),d0
00010920 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010924 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010928 6000 0000                  		bra.w	Obj4D_ChkDel
0001092C                            ; ===========================================================================
0001092C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001092E 0000                       		dc.w loc_EDCC-Obj4C_Index
00010930 0000                       		dc.w loc_EE3E-Obj4C_Index
00010932 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010934 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010936 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010938                            ; ===========================================================================
00010938                            
00010938                            Obj4C_Main:				; XREF: Obj4C_Index
00010938 5428 0024                  		addq.b	#2,$24(a0)
0001093C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010944 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001094A 117C 0004 0001             		move.b	#4,1(a0)
00010950 117C 0001 0018             		move.b	#1,$18(a0)
00010956 117C 0038 0019             		move.b	#$38,$19(a0)
0001095C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010962                            
00010962                            loc_EDCC:				; XREF: Obj4C_Index
00010962 5368 0032                  		subq.w	#1,$32(a0)
00010966 6A00                       		bpl.s	locret_EDF0
00010968 3168 0034 0032             		move.w	$34(a0),$32(a0)
0001096E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010972 3228 000C                  		move.w	$C(a0),d1
00010976 B041                       		cmp.w	d1,d0
00010978 6400                       		bcc.s	locret_EDF0
0001097A 0441 0170                  		subi.w	#$170,d1
0001097E B041                       		cmp.w	d1,d0
00010980 6500                       		bcs.s	locret_EDF0
00010982 5428 0024                  		addq.b	#2,$24(a0)
00010986                            
00010986                            locret_EDF0:
00010986 4E75                       		rts	
00010988                            ; ===========================================================================
00010988                            
00010988                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00010988 5428 0024                  		addq.b	#2,$24(a0)
0001098C 6100 ECA2                  		bsr.w	SingleObjLoad2
00010990 6600                       		bne.s	loc_EE18
00010992 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00010996 3368 0008 0008             		move.w	8(a0),8(a1)
0001099C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109A2 1368 0028 0028             		move.b	$28(a0),$28(a1)
000109A8 2348 003C                  		move.l	a0,$3C(a1)
000109AC                            
000109AC                            loc_EE18:
000109AC 117C 0001 001C             		move.b	#1,$1C(a0)
000109B2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000109B6 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000109B8 117C 0004 001C             		move.b	#4,$1C(a0)
000109BE 6000                       		bra.s	Obj4C_Display
000109C0                            ; ===========================================================================
000109C0                            
000109C0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000109C0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000109C4 08E9 0001 0022             		bset	#1,$22(a1)
000109CA 337C FA80 0012             		move.w	#-$580,$12(a1)
000109D0 6000                       		bra.s	Obj4C_Display
000109D2                            ; ===========================================================================
000109D2                            
000109D2                            loc_EE3E:				; XREF: Obj4C_Index
000109D2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000109D6 6700                       		beq.s	Obj4C_Display	; if yes, branch
000109D8 5428 0024                  		addq.b	#2,$24(a0)
000109DC 4E75                       		rts	
000109DE                            ; ===========================================================================
000109DE                            
000109DE                            Obj4C_Display:				; XREF: Obj4C_Index
000109DE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000109E4 6100 B752                  		bsr.w	AnimateSprite
000109E8 6100 E79C                  		bsr.w	DisplaySprite
000109EC 4E75                       		rts	
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj4C_Delete:				; XREF: Obj4C_Index
000109EE 117C 0000 001C             		move.b	#0,$1C(a0)
000109F4 117C 0002 0024             		move.b	#2,$24(a0)
000109FA 4A28 0028                  		tst.b	$28(a0)
000109FE 6700 E7C2                  		beq.w	DeleteObject
00010A02 4E75                       		rts	
00010A04                            ; ===========================================================================
00010A04                            ; ---------------------------------------------------------------------------
00010A04                            ; Object 4D - lava geyser / lavafall (MZ)
00010A04                            ; ---------------------------------------------------------------------------
00010A04                            
00010A04                            Obj4D:					; XREF: Obj_Index
00010A04 7000                       		moveq	#0,d0
00010A06 1028 0024                  		move.b	$24(a0),d0
00010A0A 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010A0E 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010A12 6000 E772                  		bra.w	DisplaySprite
00010A16                            ; ===========================================================================
00010A16 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010A18 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010A1A 0000                       		dc.w loc_EFFC-Obj4D_Index
00010A1C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010A1E                            
00010A1E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010A22                            ; ===========================================================================
00010A22                            
00010A22                            Obj4D_Main:				; XREF: Obj4D_Index
00010A22 5428 0024                  		addq.b	#2,$24(a0)
00010A26 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010A2C 4A28 0028                  		tst.b	$28(a0)
00010A30 6700                       		beq.s	loc_EEA4
00010A32 0468 0250 000C             		subi.w	#$250,$C(a0)
00010A38                            
00010A38                            loc_EEA4:
00010A38 7000                       		moveq	#0,d0
00010A3A 1028 0028                  		move.b	$28(a0),d0
00010A3E D040                       		add.w	d0,d0
00010A40 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010A46 2248                       		movea.l	a0,a1
00010A48 7201                       		moveq	#1,d1
00010A4A 6100                       		bsr.s	Obj4D_MakeLava
00010A4C 6000                       		bra.s	loc_EF10
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            Obj4D_Loop:
00010A4E 6100 EBE0                  		bsr.w	SingleObjLoad2
00010A52 6600                       		bne.s	loc_EF0A
00010A54                            
00010A54                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010A54 12BC 004D                  		move.b	#$4D,0(a1)
00010A58 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010A60 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010A66 137C 0004 0001             		move.b	#4,1(a1)
00010A6C 137C 0020 0019             		move.b	#$20,$19(a1)
00010A72 3368 0008 0008             		move.w	8(a0),8(a1)
00010A78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010A7E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010A84 137C 0001 0018             		move.b	#1,$18(a1)
00010A8A 137C 0005 001C             		move.b	#5,$1C(a1)
00010A90 4A28 0028                  		tst.b	$28(a0)
00010A94 6700                       		beq.s	loc_EF0A
00010A96 137C 0002 001C             		move.b	#2,$1C(a1)
00010A9C                            
00010A9C                            loc_EF0A:
00010A9C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00010AA0 4E75                       		rts	
00010AA2                            ; ===========================================================================
00010AA2                            
00010AA2                            loc_EF10:				; XREF: Obj4D_Main
00010AA2 0669 0060 000C             		addi.w	#$60,$C(a1)
00010AA8 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010AAE 0669 0060 0030             		addi.w	#$60,$30(a1)
00010AB4 137C 0093 0020             		move.b	#$93,$20(a1)
00010ABA 137C 0080 0016             		move.b	#$80,$16(a1)
00010AC0 08E9 0004 0001             		bset	#4,1(a1)
00010AC6 5829 0024                  		addq.b	#4,$24(a1)
00010ACA 2348 003C                  		move.l	a0,$3C(a1)
00010ACE 4A28 0028                  		tst.b	$28(a0)
00010AD2 6700                       		beq.s	Obj4D_PlaySnd
00010AD4 7200                       		moveq	#0,d1
00010AD6 6100 FF76                  		bsr.w	Obj4D_Loop
00010ADA 5429 0024                  		addq.b	#2,$24(a1)
00010ADE 08E9 0004 0002             		bset	#4,2(a1)
00010AE4 0669 0100 000C             		addi.w	#$100,$C(a1)
00010AEA 137C 0000 0018             		move.b	#0,$18(a1)
00010AF0 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010AF6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010AFC 117C 0000 0028             		move.b	#0,$28(a0)
00010B02                            
00010B02                            Obj4D_PlaySnd:
00010B02 303C 00C8                  		move.w	#$C8,d0
00010B06 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010B0C                            
00010B0C                            Obj4D_Action:				; XREF: Obj4D_Index
00010B0C 7000                       		moveq	#0,d0
00010B0E 1028 0028                  		move.b	$28(a0),d0
00010B12 D040                       		add.w	d0,d0
00010B14 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010B18 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010B1C 6100 E64E                  		bsr.w	SpeedToPos
00010B20 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010B26 6100 B610                  		bsr.w	AnimateSprite
00010B2A                            
00010B2A                            Obj4D_ChkDel:				; XREF: Obj4C
00010B2A 3028 0008                  		move.w	8(a0),d0
00010B2E 0240 FF80                  		andi.w	#$FF80,d0
00010B32 3238 F700                  		move.w	($FFFFF700).w,d1
00010B36 0441 0080                  		subi.w	#$80,d1
00010B3A 0241 FF80                  		andi.w	#$FF80,d1
00010B3E 9041                       		sub.w	d1,d0
00010B40 0C40 0280                  		cmpi.w	#$280,d0
00010B44 6200 E67C                  		bhi.w	DeleteObject
00010B48 4E75                       		rts	
00010B4A                            ; ===========================================================================
00010B4A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010B4C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010B4E                            ; ===========================================================================
00010B4E                            
00010B4E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010B4E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010B54 3028 0030                  		move.w	$30(a0),d0
00010B58 B068 000C                  		cmp.w	$C(a0),d0
00010B5C 6400                       		bcc.s	locret_EFDA
00010B5E 5828 0024                  		addq.b	#4,$24(a0)
00010B62 2268 003C                  		movea.l	$3C(a0),a1
00010B66 137C 0003 001C             		move.b	#3,$1C(a1)
00010B6C                            
00010B6C                            locret_EFDA:
00010B6C 4E75                       		rts	
00010B6E                            ; ===========================================================================
00010B6E                            
00010B6E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010B6E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010B74 3028 0030                  		move.w	$30(a0),d0
00010B78 B068 000C                  		cmp.w	$C(a0),d0
00010B7C 6400                       		bcc.s	locret_EFFA
00010B7E 5828 0024                  		addq.b	#4,$24(a0)
00010B82 2268 003C                  		movea.l	$3C(a0),a1
00010B86 137C 0001 001C             		move.b	#1,$1C(a1)
00010B8C                            
00010B8C                            locret_EFFA:
00010B8C 4E75                       		rts	
00010B8E                            ; ===========================================================================
00010B8E                            
00010B8E                            loc_EFFC:				; XREF: Obj4D_Index
00010B8E 2268 003C                  		movea.l	$3C(a0),a1
00010B92 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010B98 6700 0000                  		beq.w	Obj4D_Delete
00010B9C 3029 000C                  		move.w	$C(a1),d0
00010BA0 0640 0060                  		addi.w	#$60,d0
00010BA4 3140 000C                  		move.w	d0,$C(a0)
00010BA8 9068 0030                  		sub.w	$30(a0),d0
00010BAC 4440                       		neg.w	d0
00010BAE 7208                       		moveq	#8,d1
00010BB0 0C40 0040                  		cmpi.w	#$40,d0
00010BB4 6C00                       		bge.s	loc_F026
00010BB6 720B                       		moveq	#$B,d1
00010BB8                            
00010BB8                            loc_F026:
00010BB8 0C40 0080                  		cmpi.w	#$80,d0
00010BBC 6F00                       		ble.s	loc_F02E
00010BBE 720E                       		moveq	#$E,d1
00010BC0                            
00010BC0                            loc_F02E:
00010BC0 5328 001E                  		subq.b	#1,$1E(a0)
00010BC4 6A00                       		bpl.s	loc_F04C
00010BC6 117C 0007 001E             		move.b	#7,$1E(a0)
00010BCC 5228 001B                  		addq.b	#1,$1B(a0)
00010BD0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010BD6 6500                       		bcs.s	loc_F04C
00010BD8 117C 0000 001B             		move.b	#0,$1B(a0)
00010BDE                            
00010BDE                            loc_F04C:
00010BDE 1028 001B                  		move.b	$1B(a0),d0
00010BE2 D001                       		add.b	d1,d0
00010BE4 1140 001A                  		move.b	d0,$1A(a0)
00010BE8 6000 FF40                  		bra.w	Obj4D_ChkDel
00010BEC                            ; ===========================================================================
00010BEC                            
00010BEC                            Obj4D_Delete:				; XREF: Obj4D_Index
00010BEC 6000 E5D4                  		bra.w	DeleteObject
00010BF0                            ; ===========================================================================
00010BF0                            ; ---------------------------------------------------------------------------
00010BF0                            ; Object 4E - advancing	wall of	lava (MZ)
00010BF0                            ; ---------------------------------------------------------------------------
00010BF0                            
00010BF0                            Obj4E:					; XREF: Obj_Index
00010BF0 7000                       		moveq	#0,d0
00010BF2 1028 0024                  		move.b	$24(a0),d0
00010BF6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010BFA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010BFE                            ; ===========================================================================
00010BFE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010C00 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010C02 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010C04 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010C06 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010C08                            ; ===========================================================================
00010C08                            
00010C08                            Obj4E_Main:				; XREF: Obj4E_Index
00010C08 5828 0024                  		addq.b	#4,$24(a0)
00010C0C 2248                       		movea.l	a0,a1
00010C0E 7201                       		moveq	#1,d1
00010C10 6000                       		bra.s	Obj4E_Main2
00010C12                            ; ===========================================================================
00010C12                            
00010C12                            Obj4E_Loop:
00010C12 6100 EA1C                  		bsr.w	SingleObjLoad2
00010C16 6600                       		bne.s	loc_F0C8
00010C18                            
00010C18                            Obj4E_Main2:				; XREF: Obj4E_Main
00010C18 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010C1C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010C24 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010C2A 137C 0004 0001             		move.b	#4,1(a1)
00010C30 137C 0050 0019             		move.b	#$50,$19(a1)
00010C36 3368 0008 0008             		move.w	8(a0),8(a1)
00010C3C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010C42 137C 0001 0018             		move.b	#1,$18(a1)
00010C48 137C 0000 001C             		move.b	#0,$1C(a1)
00010C4E 137C 0094 0020             		move.b	#$94,$20(a1)
00010C54 2348 003C                  		move.l	a0,$3C(a1)
00010C58                            
00010C58                            loc_F0C8:
00010C58 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010C5C                            
00010C5C 5C29 0024                  		addq.b	#6,$24(a1)
00010C60 137C 0004 001A             		move.b	#4,$1A(a1)
00010C66                            
00010C66                            Obj4E_Action:				; XREF: Obj4E_Index
00010C66 3038 D008                  		move.w	($FFFFD008).w,d0
00010C6A 9068 0008                  		sub.w	8(a0),d0
00010C6E 6400                       		bcc.s	Obj4E_ChkSonic
00010C70 4440                       		neg.w	d0
00010C72                            
00010C72                            Obj4E_ChkSonic:
00010C72 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010C76 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010C78 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C7C 9068 000C                  		sub.w	$C(a0),d0
00010C80 6400                       		bcc.s	loc_F0F4
00010C82 4440                       		neg.w	d0
00010C84                            
00010C84                            loc_F0F4:
00010C84 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010C88 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010C8A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010C90 6000                       		bra.s	Obj4E_Solid
00010C92                            ; ===========================================================================
00010C92                            
00010C92                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010C92 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010C96 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010C98 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010C9E 5528 0024                  		subq.b	#2,$24(a0)
00010CA2                            
00010CA2                            Obj4E_Solid:				; XREF: Obj4E_Index
00010CA2 323C 002B                  		move.w	#$2B,d1
00010CA6 343C 0018                  		move.w	#$18,d2
00010CAA 3602                       		move.w	d2,d3
00010CAC 5243                       		addq.w	#1,d3
00010CAE 3828 0008                  		move.w	8(a0),d4
00010CB2 1028 0024                  		move.b	$24(a0),d0
00010CB6 3F00                       		move.w	d0,-(sp)
00010CB8 6100 0000                  		bsr.w	SolidObject
00010CBC 301F                       		move.w	(sp)+,d0
00010CBE 1140 0024                  		move.b	d0,$24(a0)
00010CC2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010CC8 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010CCA 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010CCE 4228 0036                  		clr.b	$36(a0)
00010CD2                            
00010CD2                            Obj4E_Animate:
00010CD2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010CD8 6100 B45E                  		bsr.w	AnimateSprite
00010CDC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010CE2 6400                       		bcc.s	Obj4E_ChkDel
00010CE4 6100 E486                  		bsr.w	SpeedToPos
00010CE8                            
00010CE8                            Obj4E_ChkDel:
00010CE8 6100 E49C                  		bsr.w	DisplaySprite
00010CEC 4A28 0036                  		tst.b	$36(a0)
00010CF0 6600                       		bne.s	locret_F17E
00010CF2 3028 0008                  		move.w	8(a0),d0
00010CF6 0240 FF80                  		andi.w	#$FF80,d0
00010CFA 3238 F700                  		move.w	($FFFFF700).w,d1
00010CFE 0441 0080                  		subi.w	#$80,d1
00010D02 0241 FF80                  		andi.w	#$FF80,d1
00010D06 9041                       		sub.w	d1,d0
00010D08 0C40 0280                  		cmpi.w	#$280,d0
00010D0C 6200                       		bhi.s	Obj4E_ChkGone
00010D0E                            
00010D0E                            locret_F17E:
00010D0E 4E75                       		rts	
00010D10                            ; ===========================================================================
00010D10                            
00010D10                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010D10 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D14 7000                       		moveq	#0,d0
00010D16 1028 0023                  		move.b	$23(a0),d0
00010D1A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D20 117C 0008 0024             		move.b	#8,$24(a0)
00010D26 4E75                       		rts	
00010D28                            ; ===========================================================================
00010D28                            
00010D28                            Obj4E_Move2:				; XREF: Obj4E_Index
00010D28 2268 003C                  		movea.l	$3C(a0),a1
00010D2C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010D32 6700                       		beq.s	Obj4E_Delete
00010D34 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010D3A 0468 0080 0008             		subi.w	#$80,8(a0)
00010D40 6000 E444                  		bra.w	DisplaySprite
00010D44                            ; ===========================================================================
00010D44                            
00010D44                            Obj4E_Delete:				; XREF: Obj4E_Index
00010D44 6000 E47C                  		bra.w	DeleteObject
00010D48                            ; ===========================================================================
00010D48                            ; ---------------------------------------------------------------------------
00010D48                            ; Object 54 - invisible	lava tag (MZ)
00010D48                            ; ---------------------------------------------------------------------------
00010D48                            
00010D48                            Obj54:					; XREF: Obj_Index
00010D48 7000                       		moveq	#0,d0
00010D4A 1028 0024                  		move.b	$24(a0),d0
00010D4E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010D52 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010D56                            ; ===========================================================================
00010D56 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010D58 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010D5A                            
00010D5A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010D5E                            ; ===========================================================================
00010D5E                            
00010D5E                            Obj54_Main:				; XREF: Obj54_Index
00010D5E 5428 0024                  		addq.b	#2,$24(a0)
00010D62 7000                       		moveq	#0,d0
00010D64 1028 0028                  		move.b	$28(a0),d0
00010D68 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010D6E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010D76 117C 0084 0001             		move.b	#$84,1(a0)
00010D7C                            
00010D7C                            Obj54_ChkDel:				; XREF: Obj54_Index
00010D7C 3028 0008                  		move.w	8(a0),d0
00010D80 0240 FF80                  		andi.w	#$FF80,d0
00010D84 3238 F700                  		move.w	($FFFFF700).w,d1
00010D88 0441 0080                  		subi.w	#$80,d1
00010D8C 0241 FF80                  		andi.w	#$FF80,d1
00010D90 9041                       		sub.w	d1,d0
00010D92 6B00 E42E                  		bmi.w	DeleteObject
00010D96 0C40 0280                  		cmpi.w	#$280,d0
00010D9A 6200 E426                  		bhi.w	DeleteObject
00010D9E 4E75                       		rts	
00010DA0                            ; ===========================================================================
00010DA0                            ; ---------------------------------------------------------------------------
00010DA0                            ; Sprite mappings - invisible lava tag (MZ)
00010DA0                            ; ---------------------------------------------------------------------------
00010DA0                            Map_obj54:
00010DA0                            	include "_maps\obj54.asm"
00010DA0                            ; ---------------------------------------------------------------------------
00010DA0                            ; Sprite mappings - invisible lava tag (MZ)
00010DA0                            ; ---------------------------------------------------------------------------
00010DA0 0000                       		dc.w byte_F212-Map_obj54
00010DA2 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010DA4 00                         		even
00010DA4 00                         		even
00010DA4                            
00010DA4                            Ani_obj4C:
00010DA4                            	include "_anim\obj4C.asm"
00010DA4                            ; ---------------------------------------------------------------------------
00010DA4                            ; Animation script - geyser of lava (MZ)
00010DA4                            ; ---------------------------------------------------------------------------
00010DA4 0000                       		dc.w byte_F220-Ani_obj4C
00010DA6 0000                       		dc.w byte_F22A-Ani_obj4C
00010DA8 0000                       		dc.w byte_F22E-Ani_obj4C
00010DAA 0000                       		dc.w byte_F232-Ani_obj4C
00010DAC 0000                       		dc.w byte_F23A-Ani_obj4C
00010DAE 0000                       		dc.w byte_F23E-Ani_obj4C
00010DB0 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010DBA 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010DBE 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010DC2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010DCA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010DCE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010DD2                            		even
00010DD2                            		even
00010DD2                            
00010DD2                            Ani_obj4E:
00010DD2                            	include "_anim\obj4E.asm"
00010DD2                            ; ---------------------------------------------------------------------------
00010DD2                            ; Animation script - advancing wall of lava (MZ)
00010DD2                            ; ---------------------------------------------------------------------------
00010DD2 0000                       		dc.w byte_F244-Ani_obj4E
00010DD4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010DDA                            		even
00010DDA                            		even
00010DDA                            
00010DDA                            ; ---------------------------------------------------------------------------
00010DDA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010DDA                            ; ---------------------------------------------------------------------------
00010DDA                            Map_obj4C:
00010DDA                            	include "_maps\obj4C.asm"
00010DDA                            ; ---------------------------------------------------------------------------
00010DDA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010DDA                            ; ---------------------------------------------------------------------------
00010DDA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010DDE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010DE2 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010DE6 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010DEA 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010DEE 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010DF2 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010DF6 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010DFA 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010DFE 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010E02 02                         byte_F272:	dc.b 2
00010E03 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010E08 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010E0D 02                         byte_F27D:	dc.b 2
00010E0E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010E13 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010E18 04                         byte_F288:	dc.b 4
00010E19 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010E1E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010E23 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010E28 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010E2D 04                         byte_F29D:	dc.b 4
00010E2E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010E33 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010E38 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010E3D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010E42 06                         byte_F2B2:	dc.b 6
00010E43 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010E48 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010E4D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010E52 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010E57 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010E5C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010E61 06                         byte_F2D1:	dc.b 6
00010E62 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010E67 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010E6C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010E71 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010E76 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010E7B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010E80 02                         byte_F2F0:	dc.b 2
00010E81 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010E86 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010E8B 02                         byte_F2FB:	dc.b 2
00010E8C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010E91 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010E96 0A                         byte_F306:	dc.b $A
00010E97 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010E9C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010EA1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010EA6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010EAB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010EB0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010EB5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010EBA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010EBF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010EC4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010EC9 0A                         byte_F339:	dc.b $A
00010ECA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010ECF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010ED4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010ED9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010EDE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010EE3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010EE8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010EED F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010EF2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010EF7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010EFC 0A                         byte_F36C:	dc.b $A
00010EFD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F02 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F07 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F0C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010F11 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010F16 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010F1B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010F20 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010F25 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010F2A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010F2F 06                         byte_F39F:	dc.b 6
00010F30 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010F35 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010F3A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010F3F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010F44 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010F49 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010F4E 06                         byte_F3BE:	dc.b 6
00010F4F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010F54 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010F59 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010F5E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010F63 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010F68 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010F6D 06                         byte_F3DD:	dc.b 6
00010F6E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F73 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F78 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F7D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010F82 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010F87 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010F8C 10                         byte_F3FC:	dc.b $10
00010F8D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010F92 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010F97 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010F9C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010FA1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010FA6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010FAB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010FB0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010FB5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010FBA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010FBF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010FC4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010FC9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010FCE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010FD3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010FD8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010FDD 10                         byte_F44D:	dc.b $10
00010FDE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010FE3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010FE8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010FED B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010FF2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010FF7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010FFC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011001 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011006 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001100B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011010 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011015 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001101A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001101F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011024 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011029 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001102E 10                         byte_F49E:	dc.b $10
0001102F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011034 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011039 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001103E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011043 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011048 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001104D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011052 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011057 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001105C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011061 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011066 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001106B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011070 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011075 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001107A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001107F 06                         byte_F4EF:	dc.b 6
00011080 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011085 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001108A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001108F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011094 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011099 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001109E 06                         byte_F50E:	dc.b 6
0001109F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000110A4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000110A9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000110AE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000110B3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000110B8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000110BD 00                         byte_F52D:	dc.b 0
000110BE                            		even
000110BE                            		even
000110BE                            
000110BE                            ; ---------------------------------------------------------------------------
000110BE                            ; Sprite mappings - advancing wall of lava (MZ)
000110BE                            ; ---------------------------------------------------------------------------
000110BE                            Map_obj4E:
000110BE                            	include "_maps\obj4E.asm"
000110BE                            ; ---------------------------------------------------------------------------
000110BE                            ; Sprite mappings - advancing wall of lava (MZ)
000110BE                            ; ---------------------------------------------------------------------------
000110BE 0000                       		dc.w byte_F538-Map_obj4E
000110C0 0000                       		dc.w byte_F566-Map_obj4E
000110C2 0000                       		dc.w byte_F594-Map_obj4E
000110C4 0000                       		dc.w byte_F5C2-Map_obj4E
000110C6 0000                       		dc.w byte_F5F0-Map_obj4E
000110C8 09                         byte_F538:	dc.b 9
000110C9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000110CE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000110D3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110D8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110DD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110E2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110E7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110EC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110F1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110F6 09                         byte_F566:	dc.b 9
000110F7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000110FC 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00011101 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011106 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001110B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011110 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011115 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001111A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001111F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011124 09                         byte_F594:	dc.b 9
00011125 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001112A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001112F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011134 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011139 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001113E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011143 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011148 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001114D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011152 09                         byte_F5C2:	dc.b 9
00011153 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00011158 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001115D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011162 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011167 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001116C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011171 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011176 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001117B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011180 08                         byte_F5F0:	dc.b 8
00011181 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00011186 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001118B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011190 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011195 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001119A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001119F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000111A4 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000111AA 00                         		even
000111AA 00                         		even
000111AA                            
000111AA                            ; ===========================================================================
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            ; Object 40 - Moto Bug enemy (GHZ)
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            
000111AA                            Obj40:					; XREF: Obj_Index
000111AA 7000                       		moveq	#0,d0
000111AC 1028 0024                  		move.b	$24(a0),d0
000111B0 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000111B4 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000111B8                            ; ===========================================================================
000111B8 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000111BA 0000                       		dc.w Obj40_Action-Obj40_Index
000111BC 0000                       		dc.w Obj40_Animate-Obj40_Index
000111BE 0000                       		dc.w Obj40_Delete-Obj40_Index
000111C0                            ; ===========================================================================
000111C0                            
000111C0                            Obj40_Main:				; XREF: Obj40_Index
000111C0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000111C8 317C 04F0 0002             		move.w	#$4F0,2(a0)
000111CE 117C 0004 0001             		move.b	#4,1(a0)
000111D4 117C 0004 0018             		move.b	#4,$18(a0)
000111DA 117C 0014 0019             		move.b	#$14,$19(a0)
000111E0 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000111E4 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000111E6 117C 000E 0016             		move.b	#$E,$16(a0)
000111EC 117C 0008 0017             		move.b	#8,$17(a0)
000111F2 117C 000C 0020             		move.b	#$C,$20(a0)
000111F8 6100 DF52                  		bsr.w	ObjectFall
000111FC 4EB9 0000 0000             		jsr	ObjHitFloor
00011202 4A41                       		tst.w	d1
00011204 6A00                       		bpl.s	locret_F68A
00011206 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001120A 317C 0000 0012             		move.w	#0,$12(a0)
00011210 5428 0024                  		addq.b	#2,$24(a0)
00011214 0868 0000 0022             		bchg	#0,$22(a0)
0001121A                            
0001121A                            locret_F68A:
0001121A 4E75                       		rts	
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001121C 5828 0024                  		addq.b	#4,$24(a0)
00011220 6000 0000                  		bra.w	Obj40_Animate
00011224                            ; ===========================================================================
00011224                            
00011224                            Obj40_Action:				; XREF: Obj40_Index
00011224 7000                       		moveq	#0,d0
00011226 1028 0025                  		move.b	$25(a0),d0
0001122A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001122E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00011232 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011238 6100 AEFE                  		bsr.w	AnimateSprite
0001123C                            
0001123C                            ; ---------------------------------------------------------------------------
0001123C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001123C                            ; ---------------------------------------------------------------------------
0001123C                            
0001123C                            MarkObjGone:
0001123C 3028 0008                  		move.w	8(a0),d0
00011240 0240 FF80                  		andi.w	#$FF80,d0
00011244 3238 F700                  		move.w	($FFFFF700).w,d1
00011248 0441 0080                  		subi.w	#$80,d1
0001124C 0241 FF80                  		andi.w	#$FF80,d1
00011250 9041                       		sub.w	d1,d0
00011252 0C40 0280                  		cmpi.w	#$280,d0
00011256 6200 0000                  		bhi.w	Mark_ChkGone
0001125A 6000 DF2A                  		bra.w	DisplaySprite
0001125E                            ; ===========================================================================
0001125E                            
0001125E                            Mark_ChkGone:
0001125E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011262 7000                       		moveq	#0,d0
00011264 1028 0023                  		move.b	$23(a0),d0
00011268 6700                       		beq.s	Mark_Delete
0001126A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011270                            
00011270                            Mark_Delete:
00011270 6000 DF50                  		bra.w	DeleteObject
00011274                            
00011274                            ; ===========================================================================
00011274 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00011276 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00011278                            ; ===========================================================================
00011278                            
00011278                            Obj40_Move:				; XREF: Obj40_Index2
00011278 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001127C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001127E 5428 0025                  		addq.b	#2,$25(a0)
00011282 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00011288 117C 0001 001C             		move.b	#1,$1C(a0)
0001128E 0868 0000 0022             		bchg	#0,$22(a0)
00011294 6600                       		bne.s	locret_F70A
00011296 4468 0010                  		neg.w	$10(a0)		; change direction
0001129A                            
0001129A                            locret_F70A:
0001129A 4E75                       		rts	
0001129C                            ; ===========================================================================
0001129C                            
0001129C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001129C 6100 DECE                  		bsr.w	SpeedToPos
000112A0 4EB9 0000 0000             		jsr	ObjHitFloor
000112A6 0C41 FFF8                  		cmpi.w	#-8,d1
000112AA 6D00                       		blt.s	Obj40_Pause
000112AC 0C41 000C                  		cmpi.w	#$C,d1
000112B0 6C00                       		bge.s	Obj40_Pause
000112B2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000112B6 5328 0033                  		subq.b	#1,$33(a0)
000112BA 6A00                       		bpl.s	locret_F756
000112BC 117C 000F 0033             		move.b	#$F,$33(a0)
000112C2 6100 E356                  		bsr.w	SingleObjLoad
000112C6 6600                       		bne.s	locret_F756
000112C8 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000112CC 3368 0008 0008             		move.w	8(a0),8(a1)
000112D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112D8 1368 0022 0022             		move.b	$22(a0),$22(a1)
000112DE 137C 0002 001C             		move.b	#2,$1C(a1)
000112E4                            
000112E4                            locret_F756:
000112E4 4E75                       		rts	
000112E6                            ; ===========================================================================
000112E6                            
000112E6                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000112E6 5528 0025                  		subq.b	#2,$25(a0)
000112EA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000112F0 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000112F6 117C 0000 001C             		move.b	#0,$1C(a0)
000112FC 4E75                       		rts	
000112FE                            ; ===========================================================================
000112FE                            
000112FE                            Obj40_Animate:				; XREF: Obj40_Index
000112FE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011304 6100 AE32                  		bsr.w	AnimateSprite
00011308 6000 DE7C                  		bra.w	DisplaySprite
0001130C                            ; ===========================================================================
0001130C                            
0001130C                            Obj40_Delete:				; XREF: Obj40_Index
0001130C 6000 DEB4                  		bra.w	DeleteObject
00011310                            ; ===========================================================================
00011310                            Ani_obj40:
00011310                            	include "_anim\obj40.asm"
00011310                            ; ---------------------------------------------------------------------------
00011310                            ; Animation script - Motobug enemy
00011310                            ; ---------------------------------------------------------------------------
00011310 0000                       		dc.w byte_F788-Ani_obj40
00011312 0000                       		dc.w byte_F78C-Ani_obj40
00011314 0000                       		dc.w byte_F792-Ani_obj40
00011316 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001131A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00011320 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001132E                            		even
0001132E                            		even
0001132E                            
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            Map_obj40:
0001132E                            	include "_maps\obj40.asm"
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00011332 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00011336 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0001133A 0000                       		dc.w byte_F804-Map_obj40
0001133C 04                         byte_F7AE:	dc.b 4
0001133D F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00011342 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00011347 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0001134C 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00011351 04                         byte_F7C3:	dc.b 4
00011352 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00011357 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0001135C F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00011361 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00011366 05                         byte_F7D8:	dc.b 5
00011367 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001136C 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00011371 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011376 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0001137B 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00011380 01                         byte_F7F2:	dc.b 1
00011381 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00011386 01                         byte_F7F8:	dc.b 1
00011387 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0001138C 01                         byte_F7FE:	dc.b 1
0001138D FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00011392 00                         byte_F804:	dc.b 0
00011394 00                         		even
00011394 00                         		even
00011394                            
00011394                            ; ===========================================================================
00011394                            ; ---------------------------------------------------------------------------
00011394                            ; Object 4F - blank
00011394                            ; ---------------------------------------------------------------------------
00011394                            
00011394                            Obj4F:					; XREF: Obj_Index
00011394 4E75                       		rts	
00011396                            
00011396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011396                            
00011396                            
00011396                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00011396 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001139A D047                       		add.w	d7,d0
0001139C 0240 0003                  		andi.w	#3,d0
000113A0 6600                       		bne.s	loc_F836
000113A2 7600                       		moveq	#0,d3
000113A4 1628 0019                  		move.b	$19(a0),d3
000113A8 4A68 0010                  		tst.w	$10(a0)
000113AC 6B00                       		bmi.s	loc_F82C
000113AE 6100 0000                  		bsr.w	ObjHitWallRight
000113B2 4A41                       		tst.w	d1
000113B4 6A00                       		bpl.s	loc_F836
000113B6                            
000113B6                            loc_F828:
000113B6 7001                       		moveq	#1,d0
000113B8 4E75                       		rts	
000113BA                            ; ===========================================================================
000113BA                            
000113BA                            loc_F82C:
000113BA 4643                       		not.w	d3
000113BC 6100 0000                  		bsr.w	ObjHitWallLeft
000113C0 4A41                       		tst.w	d1
000113C2 6BF2                       		bmi.s	loc_F828
000113C4                            
000113C4                            loc_F836:
000113C4 7000                       		moveq	#0,d0
000113C6 4E75                       		rts	
000113C8                            ; End of function Obj50_ChkWall
000113C8                            
000113C8                            ; ===========================================================================
000113C8                            ; ---------------------------------------------------------------------------
000113C8                            ; Object 50 - Yadrin enemy (SYZ)
000113C8                            ; ---------------------------------------------------------------------------
000113C8                            
000113C8                            Obj50:					; XREF: Obj_Index
000113C8 7000                       		moveq	#0,d0
000113CA 1028 0024                  		move.b	$24(a0),d0
000113CE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000113D2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000113D6                            ; ===========================================================================
000113D6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000113D8 0000                       		dc.w Obj50_Action-Obj50_Index
000113DA                            ; ===========================================================================
000113DA                            
000113DA                            Obj50_Main:				; XREF: Obj50_Index
000113DA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000113E2 317C 247B 0002             		move.w	#$247B,2(a0)
000113E8 117C 0004 0001             		move.b	#4,1(a0)
000113EE 117C 0004 0018             		move.b	#4,$18(a0)
000113F4 117C 0014 0019             		move.b	#$14,$19(a0)
000113FA 117C 0011 0016             		move.b	#$11,$16(a0)
00011400 117C 0008 0017             		move.b	#8,$17(a0)
00011406 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001140C 6100 DD3E                  		bsr.w	ObjectFall
00011410 6100 0000                  		bsr.w	ObjHitFloor
00011414 4A41                       		tst.w	d1
00011416 6A00                       		bpl.s	locret_F89E
00011418 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001141C 317C 0000 0012             		move.w	#0,$12(a0)
00011422 5428 0024                  		addq.b	#2,$24(a0)
00011426 0868 0000 0022             		bchg	#0,$22(a0)
0001142C                            
0001142C                            locret_F89E:
0001142C 4E75                       		rts	
0001142E                            ; ===========================================================================
0001142E                            
0001142E                            Obj50_Action:				; XREF: Obj50_Index
0001142E 7000                       		moveq	#0,d0
00011430 1028 0025                  		move.b	$25(a0),d0
00011434 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011438 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001143C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00011442 6100 ACF4                  		bsr.w	AnimateSprite
00011446 6000 FDF4                  		bra.w	MarkObjGone
0001144A                            ; ===========================================================================
0001144A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001144C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001144E                            ; ===========================================================================
0001144E                            
0001144E                            Obj50_Move:				; XREF: Obj50_Index2
0001144E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00011452 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011454 5428 0025                  		addq.b	#2,$25(a0)
00011458 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001145E 117C 0001 001C             		move.b	#1,$1C(a0)
00011464 0868 0000 0022             		bchg	#0,$22(a0)
0001146A 6600                       		bne.s	locret_F8E2
0001146C 4468 0010                  		neg.w	$10(a0)		; change direction
00011470                            
00011470                            locret_F8E2:
00011470 4E75                       		rts	
00011472                            ; ===========================================================================
00011472                            
00011472                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00011472 6100 DCF8                  		bsr.w	SpeedToPos
00011476 6100 0000                  		bsr.w	ObjHitFloor
0001147A 0C41 FFF8                  		cmpi.w	#-8,d1
0001147E 6D00                       		blt.s	Obj50_Pause
00011480 0C41 000C                  		cmpi.w	#$C,d1
00011484 6C00                       		bge.s	Obj50_Pause
00011486 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001148A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001148E 6600                       		bne.s	Obj50_Pause
00011490 4E75                       		rts	
00011492                            ; ===========================================================================
00011492                            
00011492                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00011492 5528 0025                  		subq.b	#2,$25(a0)
00011496 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001149C 317C 0000 0010             		move.w	#0,$10(a0)
000114A2 117C 0000 001C             		move.b	#0,$1C(a0)
000114A8 4E75                       		rts	
000114AA                            ; ===========================================================================
000114AA                            Ani_obj50:
000114AA                            	include "_anim\obj50.asm"
000114AA                            ; ---------------------------------------------------------------------------
000114AA                            ; Animation script - Yadrin enemy
000114AA                            ; ---------------------------------------------------------------------------
000114AA 0000                       		dc.w byte_F920-Ani_obj50
000114AC 0000                       		dc.w byte_F924-Ani_obj50
000114AE 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000114B2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000114BC                            		even
000114BC                            		even
000114BC                            
000114BC                            ; ---------------------------------------------------------------------------
000114BC                            ; Sprite mappings - Yadrin enemy (SYZ)
000114BC                            ; ---------------------------------------------------------------------------
000114BC                            Map_obj50:
000114BC                            	include "_maps\obj50.asm"
000114BC                            ; ---------------------------------------------------------------------------
000114BC                            ; Sprite mappings - Yadrin enemy (SYZ)
000114BC                            ; ---------------------------------------------------------------------------
000114BC 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000114C0 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000114C4 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
000114C8 05                         byte_F93A:	dc.b 5
000114C9 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000114CE FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000114D3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000114D8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114DD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000114E2 05                         byte_F954:	dc.b 5
000114E3 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000114E8 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000114ED EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000114F2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114F7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000114FC 05                         byte_F96E:	dc.b 5
000114FD F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011502 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011507 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001150C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011511 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011516 05                         byte_F988:	dc.b 5
00011517 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001151C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011521 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011526 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001152B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011530 05                         byte_F9A2:	dc.b 5
00011531 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011536 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001153B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011540 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011545 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001154A 05                         byte_F9BC:	dc.b 5
0001154B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011550 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011555 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001155A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001155F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011564                            		even
00011564                            		even
00011564                            
00011564                            ; ---------------------------------------------------------------------------
00011564                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011564                            ;
00011564                            ; variables:
00011564                            ; d1 = width
00011564                            ; d2 = height /	2 (when	jumping)
00011564                            ; d3 = height /	2 (when	walking)
00011564                            ; d4 = x-axis position
00011564                            ; ---------------------------------------------------------------------------
00011564                            
00011564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011564                            
00011564                            
00011564                            SolidObject:
00011564 4A28 0025                  		tst.b	$25(a0)
00011568 6700 0000                  		beq.w	loc_FAC8
0001156C 3401                       		move.w	d1,d2
0001156E D442                       		add.w	d2,d2
00011570 43F8 D000                  		lea	($FFFFD000).w,a1
00011574 0829 0001 0022             		btst	#1,$22(a1)
0001157A 6600                       		bne.s	loc_F9FE
0001157C 3029 0008                  		move.w	8(a1),d0
00011580 9068 0008                  		sub.w	8(a0),d0
00011584 D041                       		add.w	d1,d0
00011586 6B00                       		bmi.s	loc_F9FE
00011588 B042                       		cmp.w	d2,d0
0001158A 6500                       		bcs.s	loc_FA12
0001158C                            
0001158C                            loc_F9FE:
0001158C 08A9 0003 0022             		bclr	#3,$22(a1)
00011592 08A8 0003 0022             		bclr	#3,$22(a0)
00011598 4228 0025                  		clr.b	$25(a0)
0001159C 7800                       		moveq	#0,d4
0001159E 4E75                       		rts	
000115A0                            ; ===========================================================================
000115A0                            
000115A0                            loc_FA12:
000115A0 3404                       		move.w	d4,d2
000115A2 4EB9 0000 9514             		jsr	MvSonicOnPtfm
000115A8 7800                       		moveq	#0,d4
000115AA 4E75                       		rts	
000115AC                            ; ===========================================================================
000115AC                            
000115AC                            SolidObject71:				; XREF: Obj71_Solid
000115AC 4A28 0025                  		tst.b	$25(a0)
000115B0 6700 0000                  		beq.w	loc_FAD0
000115B4 3401                       		move.w	d1,d2
000115B6 D442                       		add.w	d2,d2
000115B8 43F8 D000                  		lea	($FFFFD000).w,a1
000115BC 0829 0001 0022             		btst	#1,$22(a1)
000115C2 6600                       		bne.s	loc_FA44
000115C4 3029 0008                  		move.w	8(a1),d0
000115C8 9068 0008                  		sub.w	8(a0),d0
000115CC D041                       		add.w	d1,d0
000115CE 6B00                       		bmi.s	loc_FA44
000115D0 B042                       		cmp.w	d2,d0
000115D2 6500                       		bcs.s	loc_FA58
000115D4                            
000115D4                            loc_FA44:
000115D4 08A9 0003 0022             		bclr	#3,$22(a1)
000115DA 08A8 0003 0022             		bclr	#3,$22(a0)
000115E0 4228 0025                  		clr.b	$25(a0)
000115E4 7800                       		moveq	#0,d4
000115E6 4E75                       		rts	
000115E8                            ; ===========================================================================
000115E8                            
000115E8                            loc_FA58:
000115E8 3404                       		move.w	d4,d2
000115EA 4EB9 0000 9514             		jsr	MvSonicOnPtfm
000115F0 7800                       		moveq	#0,d4
000115F2 4E75                       		rts	
000115F4                            ; ===========================================================================
000115F4                            
000115F4                            SolidObject2F:				; XREF: Obj2F_Solid
000115F4 43F8 D000                  		lea	($FFFFD000).w,a1
000115F8 4A28 0001                  		tst.b	1(a0)
000115FC 6A00 0000                  		bpl.w	loc_FB92
00011600 3029 0008                  		move.w	8(a1),d0
00011604 9068 0008                  		sub.w	8(a0),d0
00011608 D041                       		add.w	d1,d0
0001160A 6B00 0000                  		bmi.w	loc_FB92
0001160E 3601                       		move.w	d1,d3
00011610 D643                       		add.w	d3,d3
00011612 B043                       		cmp.w	d3,d0
00011614 6200 0000                  		bhi.w	loc_FB92
00011618 3A00                       		move.w	d0,d5
0001161A 0828 0000 0001             		btst	#0,1(a0)
00011620 6700                       		beq.s	loc_FA94
00011622 4645                       		not.w	d5
00011624 DA43                       		add.w	d3,d5
00011626                            
00011626                            loc_FA94:
00011626 E24D                       		lsr.w	#1,d5
00011628 7600                       		moveq	#0,d3
0001162A 1632 5000                  		move.b	(a2,d5.w),d3
0001162E 9612                       		sub.b	(a2),d3
00011630 3A28 000C                  		move.w	$C(a0),d5
00011634 9A43                       		sub.w	d3,d5
00011636 1629 0016                  		move.b	$16(a1),d3
0001163A 4883                       		ext.w	d3
0001163C D443                       		add.w	d3,d2
0001163E 3629 000C                  		move.w	$C(a1),d3
00011642 9645                       		sub.w	d5,d3
00011644 5843                       		addq.w	#4,d3
00011646 D642                       		add.w	d2,d3
00011648 6B00 0000                  		bmi.w	loc_FB92
0001164C 3802                       		move.w	d2,d4
0001164E D844                       		add.w	d4,d4
00011650 B644                       		cmp.w	d4,d3
00011652 6400 0000                  		bcc.w	loc_FB92
00011656 6000 0000                  		bra.w	loc_FB0E
0001165A                            ; ===========================================================================
0001165A                            
0001165A                            loc_FAC8:
0001165A 4A28 0001                  		tst.b	1(a0)
0001165E 6A00 0000                  		bpl.w	loc_FB92
00011662                            
00011662                            loc_FAD0:
00011662 43F8 D000                  		lea	($FFFFD000).w,a1
00011666 3029 0008                  		move.w	8(a1),d0
0001166A 9068 0008                  		sub.w	8(a0),d0
0001166E D041                       		add.w	d1,d0
00011670 6B00 0000                  		bmi.w	loc_FB92
00011674 3601                       		move.w	d1,d3
00011676 D643                       		add.w	d3,d3
00011678 B043                       		cmp.w	d3,d0
0001167A 6200 0000                  		bhi.w	loc_FB92
0001167E 1629 0016                  		move.b	$16(a1),d3
00011682 4883                       		ext.w	d3
00011684 D443                       		add.w	d3,d2
00011686 3629 000C                  		move.w	$C(a1),d3
0001168A 9668 000C                  		sub.w	$C(a0),d3
0001168E 5843                       		addq.w	#4,d3
00011690 D642                       		add.w	d2,d3
00011692 6B00 0000                  		bmi.w	loc_FB92
00011696 3802                       		move.w	d2,d4
00011698 D844                       		add.w	d4,d4
0001169A B644                       		cmp.w	d4,d3
0001169C 6400 0000                  		bcc.w	loc_FB92
000116A0                            
000116A0                            loc_FB0E:
000116A0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000116A4 6B00 0000                  		bmi.w	loc_FB92
000116A8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000116AE 6400 0000                  		bcc.w	loc_FB92
000116B2 4A78 FE08                  		tst.w	($FFFFFE08).w
000116B6 6600 0000                  		bne.w	loc_FBAC
000116BA 3A00                       		move.w	d0,d5
000116BC B240                       		cmp.w	d0,d1
000116BE 6400                       		bcc.s	loc_FB36
000116C0 D241                       		add.w	d1,d1
000116C2 9041                       		sub.w	d1,d0
000116C4 3A00                       		move.w	d0,d5
000116C6 4445                       		neg.w	d5
000116C8                            
000116C8                            loc_FB36:
000116C8 3203                       		move.w	d3,d1
000116CA B443                       		cmp.w	d3,d2
000116CC 6400                       		bcc.s	loc_FB44
000116CE 5943                       		subq.w	#4,d3
000116D0 9644                       		sub.w	d4,d3
000116D2 3203                       		move.w	d3,d1
000116D4 4441                       		neg.w	d1
000116D6                            
000116D6                            loc_FB44:
000116D6 BA41                       		cmp.w	d1,d5
000116D8 6200 0000                  		bhi.w	loc_FBB0
000116DC 0C41 0004                  		cmpi.w	#4,d1
000116E0 6300                       		bls.s	loc_FB8C
000116E2 4A40                       		tst.w	d0
000116E4 6700                       		beq.s	loc_FB70
000116E6 6B00                       		bmi.s	loc_FB5E
000116E8 4A69 0010                  		tst.w	$10(a1)
000116EC 6B00                       		bmi.s	loc_FB70
000116EE 6000                       		bra.s	loc_FB64
000116F0                            ; ===========================================================================
000116F0                            
000116F0                            loc_FB5E:
000116F0 4A69 0010                  		tst.w	$10(a1)
000116F4 6A00                       		bpl.s	loc_FB70
000116F6                            
000116F6                            loc_FB64:
000116F6 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000116FC 337C 0000 0010             		move.w	#0,$10(a1)
00011702                            
00011702                            loc_FB70:
00011702 9169 0008                  		sub.w	d0,8(a1)
00011706 0829 0001 0022             		btst	#1,$22(a1)
0001170C 6600                       		bne.s	loc_FB8C
0001170E 08E9 0005 0022             		bset	#5,$22(a1)
00011714 08E8 0005 0022             		bset	#5,$22(a0)
0001171A 7801                       		moveq	#1,d4
0001171C 4E75                       		rts	
0001171E                            ; ===========================================================================
0001171E                            
0001171E                            loc_FB8C:
0001171E 6100                       		bsr.s	loc_FBA0
00011720 7801                       		moveq	#1,d4
00011722 4E75                       		rts	
00011724                            ; ===========================================================================
00011724                            
00011724                            loc_FB92:
00011724 0828 0005 0022             		btst	#5,$22(a0)
0001172A 6700                       		beq.s	loc_FBAC
0001172C 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00011732 6700                       		beq.s	loc_FBA0
00011734 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0001173A 6700                       		beq.s	loc_FBA0
0001173C 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
00011742 6700                       		beq.s	loc_FBA0
00011744 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001174A                            
0001174A                            loc_FBA0:
0001174A 08A8 0005 0022             		bclr	#5,$22(a0)
00011750 08A9 0005 0022             		bclr	#5,$22(a1)
00011756                            
00011756                            loc_FBAC:
00011756 7800                       		moveq	#0,d4
00011758 4E75                       		rts	
0001175A                            ; ===========================================================================
0001175A                            
0001175A                            loc_FBB0:
0001175A 4A43                       		tst.w	d3
0001175C 6B00                       		bmi.s	loc_FBBC
0001175E 0C43 0010                  		cmpi.w	#$10,d3
00011762 6500                       		bcs.s	loc_FBEE
00011764 60BE                       		bra.s	loc_FB92
00011766                            ; ===========================================================================
00011766                            
00011766                            loc_FBBC:
00011766 4A69 0012                  		tst.w	$12(a1)
0001176A 6700                       		beq.s	loc_FBD6
0001176C 6A00                       		bpl.s	loc_FBD2
0001176E 4A43                       		tst.w	d3
00011770 6A00                       		bpl.s	loc_FBD2
00011772 9769 000C                  		sub.w	d3,$C(a1)
00011776 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001177C                            
0001177C                            loc_FBD2:
0001177C 78FF                       		moveq	#-1,d4
0001177E 4E75                       		rts	
00011780                            ; ===========================================================================
00011780                            
00011780                            loc_FBD6:
00011780 0829 0001 0022             		btst	#1,$22(a1)
00011786 66F4                       		bne.s	loc_FBD2
00011788 2F08                       		move.l	a0,-(sp)
0001178A 2049                       		movea.l	a1,a0
0001178C 4EB9 0000 0000             		jsr	KillSonic
00011792 205F                       		movea.l	(sp)+,a0
00011794 78FF                       		moveq	#-1,d4
00011796 4E75                       		rts	
00011798                            ; ===========================================================================
00011798                            
00011798                            loc_FBEE:
00011798 5943                       		subq.w	#4,d3
0001179A 7200                       		moveq	#0,d1
0001179C 1228 0019                  		move.b	$19(a0),d1
000117A0 3401                       		move.w	d1,d2
000117A2 D442                       		add.w	d2,d2
000117A4 D269 0008                  		add.w	8(a1),d1
000117A8 9268 0008                  		sub.w	8(a0),d1
000117AC 6B00                       		bmi.s	loc_FC28
000117AE B242                       		cmp.w	d2,d1
000117B0 6400                       		bcc.s	loc_FC28
000117B2 4A69 0012                  		tst.w	$12(a1)
000117B6 6B00                       		bmi.s	loc_FC28
000117B8 9769 000C                  		sub.w	d3,$C(a1)
000117BC 5369 000C                  		subq.w	#1,$C(a1)
000117C0 6100                       		bsr.s	sub_FC2C
000117C2 117C 0002 0025             		move.b	#2,$25(a0)
000117C8 08E8 0003 0022             		bset	#3,$22(a0)
000117CE 78FF                       		moveq	#-1,d4
000117D0 4E75                       		rts	
000117D2                            ; ===========================================================================
000117D2                            
000117D2                            loc_FC28:
000117D2 7800                       		moveq	#0,d4
000117D4 4E75                       		rts	
000117D6                            ; End of function SolidObject
000117D6                            
000117D6                            
000117D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117D6                            
000117D6                            
000117D6                            sub_FC2C:				; XREF: SolidObject
000117D6 0829 0003 0022             		btst	#3,$22(a1)
000117DC 6700                       		beq.s	loc_FC4E
000117DE 7000                       		moveq	#0,d0
000117E0 1029 003D                  		move.b	$3D(a1),d0
000117E4 ED48                       		lsl.w	#6,d0
000117E6 0680 00FF D000             		addi.l	#$FFD000,d0
000117EC 2440                       		movea.l	d0,a2
000117EE 08AA 0003 0022             		bclr	#3,$22(a2)
000117F4 422A 0025                  		clr.b	$25(a2)
000117F8                            
000117F8                            loc_FC4E:
000117F8 3008                       		move.w	a0,d0
000117FA 0440 D000                  		subi.w	#-$3000,d0
000117FE EC48                       		lsr.w	#6,d0
00011800 0240 007F                  		andi.w	#$7F,d0
00011804 1340 003D                  		move.b	d0,$3D(a1)
00011808 137C 0000 0026             		move.b	#0,$26(a1)
0001180E 337C 0000 0012             		move.w	#0,$12(a1)
00011814 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001181A 0829 0001 0022             		btst	#1,$22(a1)
00011820 6700                       		beq.s	loc_FC84
00011822 2F08                       		move.l	a0,-(sp)
00011824 2049                       		movea.l	a1,a0
00011826 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001182C 205F                       		movea.l	(sp)+,a0
0001182E                            
0001182E                            loc_FC84:
0001182E 08E9 0003 0022             		bset	#3,$22(a1)
00011834 08E8 0003 0022             		bset	#3,$22(a0)
0001183A 4E75                       		rts	
0001183C                            ; End of function sub_FC2C
0001183C                            
0001183C                            ; ===========================================================================
0001183C                            ; ---------------------------------------------------------------------------
0001183C                            ; Object 51 - smashable	green block (MZ)
0001183C                            ; ---------------------------------------------------------------------------
0001183C                            
0001183C                            Obj51:					; XREF: Obj_Index
0001183C 7000                       		moveq	#0,d0
0001183E 1028 0024                  		move.b	$24(a0),d0
00011842 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00011846 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001184A 6000 F9F0                  		bra.w	MarkObjGone
0001184E                            ; ===========================================================================
0001184E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011850 0000                       		dc.w Obj51_Solid-Obj51_Index
00011852 0000                       		dc.w Obj51_Display-Obj51_Index
00011854                            ; ===========================================================================
00011854                            
00011854                            Obj51_Main:				; XREF: Obj51_Index
00011854 5428 0024                  		addq.b	#2,$24(a0)
00011858 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00011860 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011866 117C 0004 0001             		move.b	#4,1(a0)
0001186C 117C 0010 0019             		move.b	#$10,$19(a0)
00011872 117C 0004 0018             		move.b	#4,$18(a0)
00011878 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001187E                            
0001187E                            Obj51_Solid:				; XREF: Obj51_Index
0001187E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00011884 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001188A 323C 001B                  		move.w	#$1B,d1
0001188E 343C 0010                  		move.w	#$10,d2
00011892 363C 0011                  		move.w	#$11,d3
00011896 3828 0008                  		move.w	8(a0),d4
0001189A 6100 FCC8                  		bsr.w	SolidObject
0001189E 0828 0003 0022             		btst	#3,$22(a0)
000118A4 6600                       		bne.s	Obj51_Smash
000118A6                            
000118A6                            locret_FCFC:
000118A6 4E75                       		rts	
000118A8                            ; ===========================================================================
000118A8                            
000118A8                            Obj51_Smash:				; XREF: Obj51_Solid
000118A8                            	;	cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000118A8                            	;	bne.s	locret_FCFC	; if not, branch
000118A8 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000118AE 08E9 0002 0022             		bset	#2,$22(a1)
000118B4 137C 000E 0016             		move.b	#$E,$16(a1)
000118BA 137C 0007 0017             		move.b	#7,$17(a1)
000118C0 137C 0002 001C             		move.b	#2,$1C(a1)
000118C6 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000118CC 08E9 0001 0022             		bset	#1,$22(a1)
000118D2 08A9 0003 0022             		bclr	#3,$22(a1)
000118D8 137C 0002 0024             		move.b	#2,$24(a1)
000118DE 08A8 0003 0022             		bclr	#3,$22(a0)
000118E4 4228 0025                  		clr.b	$25(a0)
000118E8 117C 0001 001A             		move.b	#1,$1A(a0)
000118EE 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000118F4 7203                       		moveq	#3,d1		; set number of	fragments to 4
000118F6 343C 0038                  		move.w	#$38,d2
000118FA 6100 D488                  		bsr.w	SmashObject
000118FE 6100 DD1A                  		bsr.w	SingleObjLoad
00011902 6600                       		bne.s	Obj51_Display
00011904 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011908 3368 0008 0008             		move.w	8(a0),8(a1)
0001190E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011914 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011918 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001191C 0C42 0006                  		cmpi.w	#6,d2
00011920 6500                       		bcs.s	Obj51_Bonus
00011922 7406                       		moveq	#6,d2
00011924                            
00011924                            Obj51_Bonus:
00011924 7000                       		moveq	#0,d0
00011926 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001192A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00011930 6500                       		bcs.s	loc_FD98	; if not, branch
00011932 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011936 740A                       		moveq	#10,d2
00011938                            
00011938                            loc_FD98:
00011938 4EB9 0000 0000             		jsr	AddPoints
0001193E E24A                       		lsr.w	#1,d2
00011940 1342 001A                  		move.b	d2,$1A(a1)
00011944                            
00011944                            Obj51_Display:				; XREF: Obj51_Index
00011944 6100 D826                  		bsr.w	SpeedToPos
00011948 0668 0038 0012             		addi.w	#$38,$12(a0)
0001194E 6100 D836                  		bsr.w	DisplaySprite
00011952 4A28 0001                  		tst.b	1(a0)
00011956 6A00 D86A                  		bpl.w	DeleteObject
0001195A 4E75                       		rts	
0001195C                            ; ===========================================================================
0001195C FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00011960 FF00 FF00                  		dc.w $FF00, $FF00
00011964 0200 FE00                  		dc.w $200, $FE00
00011968 0100 FF00                  		dc.w $100, $FF00
0001196C                            
0001196C 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00011974                            ; ---------------------------------------------------------------------------
00011974                            ; Sprite mappings - smashable green block (MZ)
00011974                            ; ---------------------------------------------------------------------------
00011974                            Map_obj51:
00011974                            	include "_maps\obj51.asm"
00011974                            ; ---------------------------------------------------------------------------
00011974                            ; Sprite mappings - smashable green block (MZ)
00011974                            ; ---------------------------------------------------------------------------
00011974 0000                       		dc.w byte_FDD8-Map_obj51
00011976 0000                       		dc.w byte_FDE3-Map_obj51
00011978 02                         byte_FDD8:	dc.b 2
00011979 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001197E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00011983 04                         byte_FDE3:	dc.b 4
00011984 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00011989 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001198E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00011993 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011998                            		even
00011998                            		even
00011998                            
00011998                            ; ===========================================================================
00011998                            ; ---------------------------------------------------------------------------
00011998                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011998                            ; ---------------------------------------------------------------------------
00011998                            
00011998                            Obj52:					; XREF: Obj_Index
00011998 7000                       		moveq	#0,d0
0001199A 1028 0024                  		move.b	$24(a0),d0
0001199E 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000119A2 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000119A6                            ; ===========================================================================
000119A6 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000119A8 0000                       		dc.w Obj52_Platform-Obj52_Index
000119AA 0000                       		dc.w Obj52_StandOn-Obj52_Index
000119AC                            
000119AC 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000119AE 2001                       		dc.b $20, 1
000119B0 2002                       		dc.b $20, 2
000119B2 4003                       		dc.b $40, 3
000119B4 3004                       		dc.b $30, 4
000119B6                            ; ===========================================================================
000119B6                            
000119B6                            Obj52_Main:				; XREF: Obj52_Index
000119B6 5428 0024                  		addq.b	#2,$24(a0)
000119BA 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000119C2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000119C8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000119CE 6600                       		bne.s	loc_FE44
000119D0 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000119D8 317C 43BC 0002             		move.w	#$43BC,2(a0)
000119DE 117C 0007 0016             		move.b	#7,$16(a0)
000119E4                            
000119E4                            loc_FE44:
000119E4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000119EA 6600                       		bne.s	loc_FE60
000119EC 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000119F2 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000119F8 6700                       		beq.s	loc_FE60	; if yes, branch
000119FA 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011A00                            
00011A00                            loc_FE60:
00011A00 117C 0004 0001             		move.b	#4,1(a0)
00011A06 7000                       		moveq	#0,d0
00011A08 1028 0028                  		move.b	$28(a0),d0
00011A0C E648                       		lsr.w	#3,d0
00011A0E 0240 001E                  		andi.w	#$1E,d0
00011A12 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011A16 115A 0019                  		move.b	(a2)+,$19(a0)
00011A1A 115A 001A                  		move.b	(a2)+,$1A(a0)
00011A1E 117C 0004 0018             		move.b	#4,$18(a0)
00011A24 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A2A 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011A30 0228 000F 0028             		andi.b	#$F,$28(a0)
00011A36                            
00011A36                            Obj52_Platform:				; XREF: Obj52_Index
00011A36 6100 0000                  		bsr.w	Obj52_Move
00011A3A 7200                       		moveq	#0,d1
00011A3C 1228 0019                  		move.b	$19(a0),d1
00011A40 4EB9 0000 8E42             		jsr	(PlatformObject).l
00011A46 6000                       		bra.s	Obj52_ChkDel
00011A48                            ; ===========================================================================
00011A48                            
00011A48                            Obj52_StandOn:				; XREF: Obj52_Index
00011A48 7200                       		moveq	#0,d1
00011A4A 1228 0019                  		move.b	$19(a0),d1
00011A4E 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
00011A54 3F28 0008                  		move.w	8(a0),-(sp)
00011A58 6100 0000                  		bsr.w	Obj52_Move
00011A5C 341F                       		move.w	(sp)+,d2
00011A5E 4EB9 0000 9520             		jsr	(MvSonicOnPtfm2).l
00011A64                            
00011A64                            Obj52_ChkDel:				; XREF: Obj52_Platform
00011A64 3028 0030                  		move.w	$30(a0),d0
00011A68 0240 FF80                  		andi.w	#$FF80,d0
00011A6C 3238 F700                  		move.w	($FFFFF700).w,d1
00011A70 0441 0080                  		subi.w	#$80,d1
00011A74 0241 FF80                  		andi.w	#$FF80,d1
00011A78 9041                       		sub.w	d1,d0
00011A7A 0C40 0280                  		cmpi.w	#$280,d0
00011A7E 6200 D742                  		bhi.w	DeleteObject
00011A82 6000 D702                  		bra.w	DisplaySprite
00011A86                            ; ===========================================================================
00011A86                            
00011A86                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00011A86 7000                       		moveq	#0,d0
00011A88 1028 0028                  		move.b	$28(a0),d0
00011A8C 0240 000F                  		andi.w	#$F,d0
00011A90 D040                       		add.w	d0,d0
00011A92 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00011A96 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011A9A                            ; ===========================================================================
00011A9A 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011A9E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00011AA2 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00011AA6 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011AAA 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011AAE 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011AB0                            ; ===========================================================================
00011AB0                            
00011AB0                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011AB0 4E75                       		rts	
00011AB2                            ; ===========================================================================
00011AB2                            
00011AB2                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011AB2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011AB6 323C 0060                  		move.w	#$60,d1
00011ABA 0828 0000 0022             		btst	#0,$22(a0)
00011AC0 6700                       		beq.s	loc_FF26
00011AC2 4440                       		neg.w	d0
00011AC4 D041                       		add.w	d1,d0
00011AC6                            
00011AC6                            loc_FF26:
00011AC6 3228 0030                  		move.w	$30(a0),d1
00011ACA 9240                       		sub.w	d0,d1
00011ACC 3141 0008                  		move.w	d1,8(a0)
00011AD0 4E75                       		rts	
00011AD2                            ; ===========================================================================
00011AD2                            
00011AD2                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011AD2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011AD8 6600                       		bne.s	Obj52_02_Wait
00011ADA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011ADE                            
00011ADE                            Obj52_02_Wait:
00011ADE 4E75                       		rts	
00011AE0                            ; ===========================================================================
00011AE0                            
00011AE0                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011AE0 7600                       		moveq	#0,d3
00011AE2 1628 0019                  		move.b	$19(a0),d3
00011AE6 6100 0000                  		bsr.w	ObjHitWallRight
00011AEA 4A41                       		tst.w	d1		; has the platform hit a wall?
00011AEC 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011AEE 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011AF2 3168 0008 0030             		move.w	8(a0),$30(a0)
00011AF8 4E75                       		rts	
00011AFA                            ; ===========================================================================
00011AFA                            
00011AFA                            Obj52_03_End:
00011AFA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011AFE 4E75                       		rts	
00011B00                            ; ===========================================================================
00011B00                            
00011B00                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011B00 7600                       		moveq	#0,d3
00011B02 1628 0019                  		move.b	$19(a0),d3
00011B06 6100 0000                  		bsr.w	ObjHitWallRight
00011B0A 4A41                       		tst.w	d1		; has the platform hit a wall?
00011B0C 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011B0E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011B12 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B18 4E75                       		rts	
00011B1A                            ; ===========================================================================
00011B1A                            
00011B1A                            Obj52_05_End:
00011B1A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011B1E 4E75                       		rts	
00011B20                            ; ===========================================================================
00011B20                            
00011B20                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011B20 6100 D64A                  		bsr.w	SpeedToPos
00011B24 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011B2A 6100 0000                  		bsr.w	ObjHitFloor
00011B2E 4A41                       		tst.w	d1		; has platform hit the floor?
00011B30 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011B34 D368 000C                  		add.w	d1,$C(a0)
00011B38 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011B3C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011B40                            
00011B40                            locret_FFA0:
00011B40 4E75                       		rts	
00011B42                            ; ===========================================================================
00011B42                            
00011B42                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00011B42 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011B46 6700                       		beq.s	Obj52_07_ChkDel
00011B48 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011B4C                            
00011B4C                            Obj52_07_ChkDel:
00011B4C 588F                       		addq.l	#4,sp
00011B4E 3028 0030                  		move.w	$30(a0),d0
00011B52 0240 FF80                  		andi.w	#$FF80,d0
00011B56 3238 F700                  		move.w	($FFFFF700).w,d1
00011B5A 0441 0080                  		subi.w	#$80,d1
00011B5E 0241 FF80                  		andi.w	#$FF80,d1
00011B62 9041                       		sub.w	d1,d0
00011B64 0C40 0280                  		cmpi.w	#$280,d0
00011B68 6200 D658                  		bhi.w	DeleteObject
00011B6C 4E75                       		rts	
00011B6E                            ; ===========================================================================
00011B6E                            
00011B6E                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011B6E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011B72 323C 0080                  		move.w	#$80,d1
00011B76 0828 0000 0022             		btst	#0,$22(a0)
00011B7C 6700                       		beq.s	loc_FFE2
00011B7E 4440                       		neg.w	d0
00011B80 D041                       		add.w	d1,d0
00011B82                            
00011B82                            loc_FFE2:
00011B82 3228 0032                  		move.w	$32(a0),d1
00011B86 9240                       		sub.w	d0,d1
00011B88 3141 000C                  		move.w	d1,$C(a0)
00011B8C 4E75                       		rts	
00011B8E                            ; ===========================================================================
00011B8E                            
00011B8E                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011B8E 7600                       		moveq	#0,d3
00011B90 1628 0019                  		move.b	$19(a0),d3
00011B94 D643                       		add.w	d3,d3
00011B96 7208                       		moveq	#8,d1
00011B98 0828 0000 0022             		btst	#0,$22(a0)
00011B9E 6700                       		beq.s	loc_10004
00011BA0 4441                       		neg.w	d1
00011BA2 4443                       		neg.w	d3
00011BA4                            
00011BA4                            loc_10004:
00011BA4 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011BA8 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011BAA 3028 0008                  		move.w	8(a0),d0
00011BAE 9068 0030                  		sub.w	$30(a0),d0
00011BB2 B043                       		cmp.w	d3,d0
00011BB4 6700                       		beq.s	Obj52_0A_Wait
00011BB6 D368 0008                  		add.w	d1,8(a0)	; move platform
00011BBA 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011BC0 4E75                       		rts	
00011BC2                            ; ===========================================================================
00011BC2                            
00011BC2                            Obj52_0A_Wait:
00011BC2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011BC6 6600                       		bne.s	locret_1002E	; if time remains, branch
00011BC8 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011BCE                            
00011BCE                            locret_1002E:
00011BCE 4E75                       		rts	
00011BD0                            ; ===========================================================================
00011BD0                            
00011BD0                            Obj52_0A_Back:
00011BD0 3028 0008                  		move.w	8(a0),d0
00011BD4 9068 0030                  		sub.w	$30(a0),d0
00011BD8 6700                       		beq.s	Obj52_0A_Reset
00011BDA 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011BDE 4E75                       		rts	
00011BE0                            ; ===========================================================================
00011BE0                            
00011BE0                            Obj52_0A_Reset:
00011BE0 4268 0036                  		clr.w	$36(a0)
00011BE4 5328 0028                  		subq.b	#1,$28(a0)
00011BE8 4E75                       		rts	
00011BEA                            ; ===========================================================================
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA                            Map_obj52:
00011BEA                            	include "_maps\obj52mz.asm"
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011BEE 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011BF2 0000                       		dc.w byte_1008F-Map_obj52
00011BF4 01                         byte_10054:	dc.b 1
00011BF5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011BFA 02                         byte_1005A:	dc.b 2
00011BFB F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011C00 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011C05 04                         byte_10065:	dc.b 4
00011C06 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011C0B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011C10 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011C15 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011C1A 04                         byte_1007A:	dc.b 4
00011C1B F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011C20 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011C25 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011C2A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011C2F 03                         byte_1008F:	dc.b 3
00011C30 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011C35 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011C3A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011C40 00                         		even
00011C40 00                         		even
00011C40                            
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Sprite mappings - moving block (LZ)
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            Map_obj52a:
00011C40                            	include "_maps\obj52lz.asm"
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Sprite mappings - moving block (LZ)
00011C40                            ; ---------------------------------------------------------------------------
00011C40 0000                       		dc.w byte_100A2-Map_obj52a
00011C42 01                         byte_100A2:	dc.b 1
00011C43 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011C48                            		even
00011C48                            		even
00011C48                            
00011C48                            ; ===========================================================================
00011C48                            ; ---------------------------------------------------------------------------
00011C48                            ; Object 55 - Basaran enemy (MZ)
00011C48                            ; ---------------------------------------------------------------------------
00011C48                            
00011C48                            Obj55:					; XREF: Obj_Index
00011C48 7000                       		moveq	#0,d0
00011C4A 1028 0024                  		move.b	$24(a0),d0
00011C4E 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011C52 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011C56                            ; ===========================================================================
00011C56 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011C58 0000                       		dc.w Obj55_Action-Obj55_Index
00011C5A                            ; ===========================================================================
00011C5A                            
00011C5A                            Obj55_Main:				; XREF: Obj55_Index
00011C5A 5428 0024                  		addq.b	#2,$24(a0)
00011C5E 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011C66 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011C6C 117C 0004 0001             		move.b	#4,1(a0)
00011C72 117C 000C 0016             		move.b	#$C,$16(a0)
00011C78 117C 0002 0018             		move.b	#2,$18(a0)
00011C7E 117C 000B 0020             		move.b	#$B,$20(a0)
00011C84 117C 0010 0019             		move.b	#$10,$19(a0)
00011C8A                            
00011C8A                            Obj55_Action:				; XREF: Obj55_Index
00011C8A 7000                       		moveq	#0,d0
00011C8C 1028 0025                  		move.b	$25(a0),d0
00011C90 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011C94 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011C98 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011C9E 6100 A498                  		bsr.w	AnimateSprite
00011CA2 6000 F598                  		bra.w	MarkObjGone
00011CA6                            ; ===========================================================================
00011CA6 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011CA8 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011CAA 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011CAC 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011CAE                            ; ===========================================================================
00011CAE                            
00011CAE                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011CAE 343C 0080                  		move.w	#$80,d2
00011CB2 6100 0000                  		bsr.w	Obj55_ChkSonic
00011CB6 6400                       		bcc.s	Obj55_NoDrop
00011CB8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011CBC 3140 0036                  		move.w	d0,$36(a0)
00011CC0 9068 000C                  		sub.w	$C(a0),d0
00011CC4 6500                       		bcs.s	Obj55_NoDrop
00011CC6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011CCA 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011CCC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011CD0 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011CD2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011CD6 D007                       		add.b	d7,d0
00011CD8 0200 0007                  		andi.b	#7,d0
00011CDC 6600                       		bne.s	Obj55_NoDrop
00011CDE 117C 0001 001C             		move.b	#1,$1C(a0)
00011CE4 5428 0025                  		addq.b	#2,$25(a0)
00011CE8                            
00011CE8                            Obj55_NoDrop:
00011CE8 4E75                       		rts	
00011CEA                            ; ===========================================================================
00011CEA                            
00011CEA                            Obj55_DropFly:				; XREF: Obj55_Index2
00011CEA 6100 D480                  		bsr.w	SpeedToPos
00011CEE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011CF4 343C 0080                  		move.w	#$80,d2
00011CF8 6100 0000                  		bsr.w	Obj55_ChkSonic
00011CFC 3028 0036                  		move.w	$36(a0),d0
00011D00 9068 000C                  		sub.w	$C(a0),d0
00011D04 6500                       		bcs.s	Obj55_ChkDel
00011D06 0C40 0010                  		cmpi.w	#$10,d0
00011D0A 6400                       		bcc.s	locret_10180
00011D0C 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011D10 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011D16 117C 0002 001C             		move.b	#2,$1C(a0)
00011D1C 5428 0025                  		addq.b	#2,$25(a0)
00011D20                            
00011D20                            locret_10180:
00011D20 4E75                       		rts	
00011D22                            ; ===========================================================================
00011D22                            
00011D22                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011D22 4A28 0001                  		tst.b	1(a0)
00011D26 6A00 D49A                  		bpl.w	DeleteObject
00011D2A 4E75                       		rts	
00011D2C                            ; ===========================================================================
00011D2C                            
00011D2C                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011D2C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011D30 0200 000F                  		andi.b	#$F,d0
00011D34 6600                       		bne.s	loc_101A0
00011D36 303C 00C0                  		move.w	#$C0,d0
00011D3A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flapping sound
00011D40                            
00011D40                            loc_101A0:
00011D40 6100 D42A                  		bsr.w	SpeedToPos
00011D44 3038 D008                  		move.w	($FFFFD008).w,d0
00011D48 9068 0008                  		sub.w	8(a0),d0
00011D4C 6400                       		bcc.s	loc_101B0
00011D4E 4440                       		neg.w	d0
00011D50                            
00011D50                            loc_101B0:
00011D50 0C40 0080                  		cmpi.w	#$80,d0
00011D54 6500                       		bcs.s	locret_101C6
00011D56 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011D5A D007                       		add.b	d7,d0
00011D5C 0200 0007                  		andi.b	#7,d0
00011D60 6600                       		bne.s	locret_101C6
00011D62 5428 0025                  		addq.b	#2,$25(a0)
00011D66                            
00011D66                            locret_101C6:
00011D66 4E75                       		rts	
00011D68                            ; ===========================================================================
00011D68                            
00011D68                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011D68 6100 D402                  		bsr.w	SpeedToPos
00011D6C 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011D72 6100 0000                  		bsr.w	ObjHitCeiling
00011D76 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011D78 6A00                       		bpl.s	locret_101F4	; if not, branch
00011D7A 9368 000C                  		sub.w	d1,$C(a0)
00011D7E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011D84 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011D88 4268 0012                  		clr.w	$12(a0)
00011D8C 4228 001C                  		clr.b	$1C(a0)
00011D90 4228 0025                  		clr.b	$25(a0)
00011D94                            
00011D94                            locret_101F4:
00011D94 4E75                       		rts	
00011D96                            ; ===========================================================================
00011D96                            
00011D96                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011D96 323C 0100                  		move.w	#$100,d1
00011D9A 08E8 0000 0022             		bset	#0,$22(a0)
00011DA0 3038 D008                  		move.w	($FFFFD008).w,d0
00011DA4 9068 0008                  		sub.w	8(a0),d0
00011DA8 6400                       		bcc.s	loc_10214
00011DAA 4440                       		neg.w	d0
00011DAC 4441                       		neg.w	d1
00011DAE 08A8 0000 0022             		bclr	#0,$22(a0)
00011DB4                            
00011DB4                            loc_10214:
00011DB4 B042                       		cmp.w	d2,d0
00011DB6 4E75                       		rts	
00011DB8                            ; ===========================================================================
00011DB8 6100 D3B2                  		bsr.w	SpeedToPos
00011DBC 6100 D3C8                  		bsr.w	DisplaySprite
00011DC0 4A28 0001                  		tst.b	1(a0)
00011DC4 6A00 D3FC                  		bpl.w	DeleteObject
00011DC8 4E75                       		rts	
00011DCA                            ; ===========================================================================
00011DCA                            Ani_obj55:
00011DCA                            	include "_anim\obj55.asm"
00011DCA                            ; ---------------------------------------------------------------------------
00011DCA                            ; Animation script - Basaran enemy
00011DCA                            ; ---------------------------------------------------------------------------
00011DCA 0000                       		dc.w byte_10230-Ani_obj55
00011DCC 0000                       		dc.w byte_10234-Ani_obj55
00011DCE 0000                       		dc.w byte_10238-Ani_obj55
00011DD0 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011DD4 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011DD8 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011DDE                            		even
00011DDE                            		even
00011DDE                            
00011DDE                            ; ---------------------------------------------------------------------------
00011DDE                            ; Sprite mappings - Basaran enemy (MZ)
00011DDE                            ; ---------------------------------------------------------------------------
00011DDE                            Map_obj55:
00011DDE                            	include "_maps\obj55.asm"
00011DDE                            ; ---------------------------------------------------------------------------
00011DDE                            ; Sprite mappings - Basaran enemy (MZ)
00011DDE                            ; ---------------------------------------------------------------------------
00011DDE 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011DE2 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011DE6 01                         byte_10246:	dc.b 1
00011DE7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011DEC 03                         byte_1024C:	dc.b 3
00011DED F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011DF2 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011DF7 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011DFC 04                         byte_1025C:	dc.b 4
00011DFD F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011E02 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011E07 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011E0C 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011E11 04                         byte_10271:	dc.b 4
00011E12 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011E17 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011E1C 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011E21 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011E26                            		even
00011E26                            		even
00011E26                            
00011E26                            ; ===========================================================================
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            
00011E26                            Obj56:					; XREF: Obj_Index
00011E26 7000                       		moveq	#0,d0
00011E28 1028 0024                  		move.b	$24(a0),d0
00011E2C 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011E30 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011E34                            ; ===========================================================================
00011E34 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011E36 0000                       		dc.w Obj56_Action-Obj56_Index
00011E38                            
00011E38 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011E3A 2020                       		dc.b  $20, $20
00011E3C 1020                       		dc.b  $10, $20
00011E3E 201A                       		dc.b  $20, $1A
00011E40 1027                       		dc.b  $10, $27
00011E42 1010                       		dc.b  $10, $10
00011E44 0820                       		dc.b	8, $20
00011E46 4010                       		dc.b  $40, $10
00011E48                            ; ===========================================================================
00011E48                            
00011E48                            Obj56_Main:				; XREF: Obj56_Index
00011E48 5428 0024                  		addq.b	#2,$24(a0)
00011E4C 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011E54 317C 4000 0002             		move.w	#$4000,2(a0)
00011E5A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E60 6600                       		bne.s	loc_102C8
00011E62 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011E68                            
00011E68                            loc_102C8:
00011E68 117C 0004 0001             		move.b	#4,1(a0)
00011E6E 117C 0003 0018             		move.b	#3,$18(a0)
00011E74 7000                       		moveq	#0,d0
00011E76 1028 0028                  		move.b	$28(a0),d0
00011E7A E648                       		lsr.w	#3,d0
00011E7C 0240 000E                  		andi.w	#$E,d0
00011E80 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011E84 115A 0019                  		move.b	(a2)+,$19(a0)
00011E88 1152 0016                  		move.b	(a2),$16(a0)
00011E8C E248                       		lsr.w	#1,d0
00011E8E 1140 001A                  		move.b	d0,$1A(a0)
00011E92 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E98 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011E9E 7000                       		moveq	#0,d0
00011EA0 1012                       		move.b	(a2),d0
00011EA2 D040                       		add.w	d0,d0
00011EA4 3140 003A                  		move.w	d0,$3A(a0)
00011EA8 7000                       		moveq	#0,d0
00011EAA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011EB0 6700                       		beq.s	loc_10332
00011EB2 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011EB6 0240 000F                  		andi.w	#$F,d0
00011EBA 5140                       		subq.w	#8,d0
00011EBC 6500                       		bcs.s	loc_10332
00011EBE E548                       		lsl.w	#2,d0
00011EC0 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011EC4 45F2 0000                  		lea	(a2,d0.w),a2
00011EC8 4A52                       		tst.w	(a2)
00011ECA 6A00                       		bpl.s	loc_10332
00011ECC 0868 0000 0022             		bchg	#0,$22(a0)
00011ED2                            
00011ED2                            loc_10332:
00011ED2 1028 0028                  		move.b	$28(a0),d0
00011ED6 6A00                       		bpl.s	Obj56_Action
00011ED8 0200 000F                  		andi.b	#$F,d0
00011EDC 1140 003C                  		move.b	d0,$3C(a0)
00011EE0 117C 0005 0028             		move.b	#5,$28(a0)
00011EE6 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011EEC 6600                       		bne.s	Obj56_ChkGone
00011EEE 117C 000C 0028             		move.b	#$C,$28(a0)
00011EF4 317C 0080 003A             		move.w	#$80,$3A(a0)
00011EFA                            
00011EFA                            Obj56_ChkGone:
00011EFA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011EFE 7000                       		moveq	#0,d0
00011F00 1028 0023                  		move.b	$23(a0),d0
00011F04 6700                       		beq.s	Obj56_Action
00011F06 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011F0C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00011F12 6700                       		beq.s	Obj56_Action
00011F14 5228 0028                  		addq.b	#1,$28(a0)
00011F18 4268 003A                  		clr.w	$3A(a0)
00011F1C                            
00011F1C                            Obj56_Action:				; XREF: Obj56_Index
00011F1C 3F28 0008                  		move.w	8(a0),-(sp)
00011F20 7000                       		moveq	#0,d0
00011F22 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F26 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011F2A D040                       		add.w	d0,d0
00011F2C 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011F30 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011F34 381F                       		move.w	(sp)+,d4
00011F36 4A28 0001                  		tst.b	1(a0)
00011F3A 6A00                       		bpl.s	Obj56_ChkDel
00011F3C 7200                       		moveq	#0,d1
00011F3E 1228 0019                  		move.b	$19(a0),d1
00011F42 0641 000B                  		addi.w	#$B,d1
00011F46 7400                       		moveq	#0,d2
00011F48 1428 0016                  		move.b	$16(a0),d2
00011F4C 3602                       		move.w	d2,d3
00011F4E 5243                       		addq.w	#1,d3
00011F50 6100 F612                  		bsr.w	SolidObject
00011F54                            
00011F54                            Obj56_ChkDel:
00011F54 3028 0034                  		move.w	$34(a0),d0
00011F58 0240 FF80                  		andi.w	#$FF80,d0
00011F5C 3238 F700                  		move.w	($FFFFF700).w,d1
00011F60 0441 0080                  		subi.w	#$80,d1
00011F64 0241 FF80                  		andi.w	#$FF80,d1
00011F68 9041                       		sub.w	d1,d0
00011F6A 0C40 0280                  		cmpi.w	#$280,d0
00011F6E 6200 D252                  		bhi.w	DeleteObject
00011F72 6000 D212                  		bra.w	DisplaySprite
00011F76                            ; ===========================================================================
00011F76 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011F7A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011F7E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011F82 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011F86 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011F8A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011F8E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011F92                            ; ===========================================================================
00011F92                            
00011F92                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011F92 4E75                       		rts	
00011F94                            ; ===========================================================================
00011F94                            
00011F94                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011F94 323C 0040                  		move.w	#$40,d1
00011F98 7000                       		moveq	#0,d0
00011F9A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011F9E 6000                       		bra.s	Obj56_Move_LR
00011FA0                            ; ===========================================================================
00011FA0                            
00011FA0                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011FA0 323C 0080                  		move.w	#$80,d1
00011FA4 7000                       		moveq	#0,d0
00011FA6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011FAA                            
00011FAA                            Obj56_Move_LR:
00011FAA 0828 0000 0022             		btst	#0,$22(a0)
00011FB0 6700                       		beq.s	loc_10416
00011FB2 4440                       		neg.w	d0
00011FB4 D041                       		add.w	d1,d0
00011FB6                            
00011FB6                            loc_10416:
00011FB6 3228 0034                  		move.w	$34(a0),d1
00011FBA 9240                       		sub.w	d0,d1
00011FBC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011FC0 4E75                       		rts	
00011FC2                            ; ===========================================================================
00011FC2                            
00011FC2                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011FC2 323C 0040                  		move.w	#$40,d1
00011FC6 7000                       		moveq	#0,d0
00011FC8 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011FCC 6000                       		bra.s	Obj56_Move_UD
00011FCE                            ; ===========================================================================
00011FCE                            
00011FCE                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011FCE 323C 0080                  		move.w	#$80,d1
00011FD2 7000                       		moveq	#0,d0
00011FD4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011FD8                            
00011FD8                            Obj56_Move_UD:
00011FD8 0828 0000 0022             		btst	#0,$22(a0)
00011FDE 6700                       		beq.s	loc_10444
00011FE0 4440                       		neg.w	d0
00011FE2 D041                       		add.w	d1,d0
00011FE4                            
00011FE4                            loc_10444:
00011FE4 3228 0030                  		move.w	$30(a0),d1
00011FE8 9240                       		sub.w	d0,d1
00011FEA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011FEE 4E75                       		rts	
00011FF0                            ; ===========================================================================
00011FF0                            
00011FF0                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011FF0 4A28 0038                  		tst.b	$38(a0)
00011FF4 6600                       		bne.s	loc_104A4
00011FF6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011FFC 6600                       		bne.s	loc_1047A	; if not, branch
00011FFE 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00012004 6600                       		bne.s	loc_1047A
00012006 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001200A 3038 D008                  		move.w	($FFFFD008).w,d0
0001200E B068 0008                  		cmp.w	8(a0),d0
00012012 6400                       		bcc.s	loc_1047A
00012014 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
0001201A                            
0001201A                            loc_1047A:
0001201A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001201E 7000                       		moveq	#0,d0
00012020 1028 003C                  		move.b	$3C(a0),d0
00012024 0832 0000 0000             		btst	#0,(a2,d0.w)
0001202A 6700                       		beq.s	loc_104AE
0001202C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00012032 6600                       		bne.s	loc_1049E	; if not, branch
00012034 0C00 0003                  		cmpi.b	#3,d0
00012038 6600                       		bne.s	loc_1049E
0001203A 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001203E                            
0001203E                            loc_1049E:
0001203E 117C 0001 0038             		move.b	#1,$38(a0)
00012044                            
00012044                            loc_104A4:
00012044 4A68 003A                  		tst.w	$3A(a0)
00012048 6700                       		beq.s	loc_104C8
0001204A 5568 003A                  		subq.w	#2,$3A(a0)
0001204E                            
0001204E                            loc_104AE:
0001204E 3028 003A                  		move.w	$3A(a0),d0
00012052 0828 0000 0022             		btst	#0,$22(a0)
00012058 6700                       		beq.s	loc_104BC
0001205A 4440                       		neg.w	d0
0001205C                            
0001205C                            loc_104BC:
0001205C 3228 0030                  		move.w	$30(a0),d1
00012060 D240                       		add.w	d0,d1
00012062 3141 000C                  		move.w	d1,$C(a0)
00012066 4E75                       		rts	
00012068                            ; ===========================================================================
00012068                            
00012068                            loc_104C8:
00012068 5228 0028                  		addq.b	#1,$28(a0)
0001206C 4228 0038                  		clr.b	$38(a0)
00012070 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012074 7000                       		moveq	#0,d0
00012076 1028 0023                  		move.b	$23(a0),d0
0001207A 67D2                       		beq.s	loc_104AE
0001207C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012082 60CA                       		bra.s	loc_104AE
00012084                            ; ===========================================================================
00012084                            
00012084                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00012084 4A28 0038                  		tst.b	$38(a0)
00012088 6600                       		bne.s	loc_10500
0001208A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001208E 7000                       		moveq	#0,d0
00012090 1028 003C                  		move.b	$3C(a0),d0
00012094 4A32 0000                  		tst.b	(a2,d0.w)
00012098 6A00                       		bpl.s	loc_10512
0001209A 117C 0001 0038             		move.b	#1,$38(a0)
000120A0                            
000120A0                            loc_10500:
000120A0 7000                       		moveq	#0,d0
000120A2 1028 0016                  		move.b	$16(a0),d0
000120A6 D040                       		add.w	d0,d0
000120A8 B068 003A                  		cmp.w	$3A(a0),d0
000120AC 6700                       		beq.s	loc_1052C
000120AE 5468 003A                  		addq.w	#2,$3A(a0)
000120B2                            
000120B2                            loc_10512:
000120B2 3028 003A                  		move.w	$3A(a0),d0
000120B6 0828 0000 0022             		btst	#0,$22(a0)
000120BC 6700                       		beq.s	loc_10520
000120BE 4440                       		neg.w	d0
000120C0                            
000120C0                            loc_10520:
000120C0 3228 0030                  		move.w	$30(a0),d1
000120C4 D240                       		add.w	d0,d1
000120C6 3141 000C                  		move.w	d1,$C(a0)
000120CA 4E75                       		rts	
000120CC                            ; ===========================================================================
000120CC                            
000120CC                            loc_1052C:
000120CC 5328 0028                  		subq.b	#1,$28(a0)
000120D0 4228 0038                  		clr.b	$38(a0)
000120D4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000120D8 7000                       		moveq	#0,d0
000120DA 1028 0023                  		move.b	$23(a0),d0
000120DE 67D2                       		beq.s	loc_10512
000120E0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000120E6 60CA                       		bra.s	loc_10512
000120E8                            ; ===========================================================================
000120E8                            
000120E8                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000120E8 4A28 0038                  		tst.b	$38(a0)
000120EC 6600                       		bne.s	loc_1055E
000120EE 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000120F2 6700                       		beq.s	locret_10578
000120F4 117C 0001 0038             		move.b	#1,$38(a0)
000120FA 4268 003A                  		clr.w	$3A(a0)
000120FE                            
000120FE                            loc_1055E:
000120FE 5268 0008                  		addq.w	#1,8(a0)
00012102 3168 0008 0034             		move.w	8(a0),$34(a0)
00012108 5268 003A                  		addq.w	#1,$3A(a0)
0001210C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00012112 6600                       		bne.s	locret_10578
00012114 4228 0028                  		clr.b	$28(a0)
00012118                            
00012118                            locret_10578:
00012118 4E75                       		rts	
0001211A                            ; ===========================================================================
0001211A                            
0001211A                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001211A 4A28 0038                  		tst.b	$38(a0)
0001211E 6600                       		bne.s	loc_10598
00012120 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012124 7000                       		moveq	#0,d0
00012126 1028 003C                  		move.b	$3C(a0),d0
0001212A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012130 6700                       		beq.s	loc_105A2
00012132 117C 0001 0038             		move.b	#1,$38(a0)
00012138                            
00012138                            loc_10598:
00012138 4A68 003A                  		tst.w	$3A(a0)
0001213C 6700                       		beq.s	loc_105C0
0001213E 5568 003A                  		subq.w	#2,$3A(a0)
00012142                            
00012142                            loc_105A2:
00012142 3028 003A                  		move.w	$3A(a0),d0
00012146 0828 0000 0022             		btst	#0,$22(a0)
0001214C 6700                       		beq.s	loc_105B4
0001214E 4440                       		neg.w	d0
00012150 0640 0080                  		addi.w	#$80,d0
00012154                            
00012154                            loc_105B4:
00012154 3228 0034                  		move.w	$34(a0),d1
00012158 D240                       		add.w	d0,d1
0001215A 3141 0008                  		move.w	d1,8(a0)
0001215E 4E75                       		rts	
00012160                            ; ===========================================================================
00012160                            
00012160                            loc_105C0:
00012160 5228 0028                  		addq.b	#1,$28(a0)
00012164 4228 0038                  		clr.b	$38(a0)
00012168 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001216C 7000                       		moveq	#0,d0
0001216E 1028 0023                  		move.b	$23(a0),d0
00012172 67CE                       		beq.s	loc_105A2
00012174 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001217A 60C6                       		bra.s	loc_105A2
0001217C                            ; ===========================================================================
0001217C                            
0001217C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001217C 4A28 0038                  		tst.b	$38(a0)
00012180 6600                       		bne.s	loc_105F8
00012182 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012186 7000                       		moveq	#0,d0
00012188 1028 003C                  		move.b	$3C(a0),d0
0001218C 4A32 0000                  		tst.b	(a2,d0.w)
00012190 6A00                       		bpl.s	loc_10606
00012192 117C 0001 0038             		move.b	#1,$38(a0)
00012198                            
00012198                            loc_105F8:
00012198 303C 0080                  		move.w	#$80,d0
0001219C B068 003A                  		cmp.w	$3A(a0),d0
000121A0 6700                       		beq.s	loc_10624
000121A2 5468 003A                  		addq.w	#2,$3A(a0)
000121A6                            
000121A6                            loc_10606:
000121A6 3028 003A                  		move.w	$3A(a0),d0
000121AA 0828 0000 0022             		btst	#0,$22(a0)
000121B0 6700                       		beq.s	loc_10618
000121B2 4440                       		neg.w	d0
000121B4 0640 0080                  		addi.w	#$80,d0
000121B8                            
000121B8                            loc_10618:
000121B8 3228 0034                  		move.w	$34(a0),d1
000121BC D240                       		add.w	d0,d1
000121BE 3141 0008                  		move.w	d1,8(a0)
000121C2 4E75                       		rts	
000121C4                            ; ===========================================================================
000121C4                            
000121C4                            loc_10624:
000121C4 5328 0028                  		subq.b	#1,$28(a0)
000121C8 4228 0038                  		clr.b	$38(a0)
000121CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000121D0 7000                       		moveq	#0,d0
000121D2 1028 0023                  		move.b	$23(a0),d0
000121D6 67CE                       		beq.s	loc_10606
000121D8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000121DE 60C6                       		bra.s	loc_10606
000121E0                            ; ===========================================================================
000121E0                            
000121E0                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000121E0 323C 0010                  		move.w	#$10,d1
000121E4 7000                       		moveq	#0,d0
000121E6 1038 FE88                  		move.b	($FFFFFE88).w,d0
000121EA E248                       		lsr.w	#1,d0
000121EC 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000121F0 6000                       		bra.s	Obj56_Move_Sqr
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000121F2 323C 0030                  		move.w	#$30,d1
000121F6 7000                       		moveq	#0,d0
000121F8 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000121FC 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00012200 6000                       		bra.s	Obj56_Move_Sqr
00012202                            ; ===========================================================================
00012202                            
00012202                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00012202 323C 0050                  		move.w	#$50,d1
00012206 7000                       		moveq	#0,d0
00012208 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001220C 3638 FE92                  		move.w	($FFFFFE92).w,d3
00012210 6000                       		bra.s	Obj56_Move_Sqr
00012212                            ; ===========================================================================
00012212                            
00012212                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00012212 323C 0070                  		move.w	#$70,d1
00012216 7000                       		moveq	#0,d0
00012218 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001221C 3638 FE96                  		move.w	($FFFFFE96).w,d3
00012220                            
00012220                            Obj56_Move_Sqr:
00012220 4A43                       		tst.w	d3
00012222 6600                       		bne.s	loc_1068E
00012224 5228 0022                  		addq.b	#1,$22(a0)
00012228 0228 0003 0022             		andi.b	#3,$22(a0)
0001222E                            
0001222E                            loc_1068E:
0001222E 1428 0022                  		move.b	$22(a0),d2
00012232 0202 0003                  		andi.b	#3,d2
00012236 6600                       		bne.s	loc_106AE
00012238 9041                       		sub.w	d1,d0
0001223A D068 0034                  		add.w	$34(a0),d0
0001223E 3140 0008                  		move.w	d0,8(a0)
00012242 4441                       		neg.w	d1
00012244 D268 0030                  		add.w	$30(a0),d1
00012248 3141 000C                  		move.w	d1,$C(a0)
0001224C 4E75                       		rts	
0001224E                            ; ===========================================================================
0001224E                            
0001224E                            loc_106AE:
0001224E 5302                       		subq.b	#1,d2
00012250 6600                       		bne.s	loc_106CC
00012252 5341                       		subq.w	#1,d1
00012254 9041                       		sub.w	d1,d0
00012256 4440                       		neg.w	d0
00012258 D068 0030                  		add.w	$30(a0),d0
0001225C 3140 000C                  		move.w	d0,$C(a0)
00012260 5241                       		addq.w	#1,d1
00012262 D268 0034                  		add.w	$34(a0),d1
00012266 3141 0008                  		move.w	d1,8(a0)
0001226A 4E75                       		rts	
0001226C                            ; ===========================================================================
0001226C                            
0001226C                            loc_106CC:
0001226C 5302                       		subq.b	#1,d2
0001226E 6600                       		bne.s	loc_106EA
00012270 5341                       		subq.w	#1,d1
00012272 9041                       		sub.w	d1,d0
00012274 4440                       		neg.w	d0
00012276 D068 0034                  		add.w	$34(a0),d0
0001227A 3140 0008                  		move.w	d0,8(a0)
0001227E 5241                       		addq.w	#1,d1
00012280 D268 0030                  		add.w	$30(a0),d1
00012284 3141 000C                  		move.w	d1,$C(a0)
00012288 4E75                       		rts	
0001228A                            ; ===========================================================================
0001228A                            
0001228A                            loc_106EA:
0001228A 9041                       		sub.w	d1,d0
0001228C D068 0030                  		add.w	$30(a0),d0
00012290 3140 000C                  		move.w	d0,$C(a0)
00012294 4441                       		neg.w	d1
00012296 D268 0034                  		add.w	$34(a0),d1
0001229A 3141 0008                  		move.w	d1,8(a0)
0001229E 4E75                       		rts	
000122A0                            ; ===========================================================================
000122A0                            ; ---------------------------------------------------------------------------
000122A0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000122A0                            ; ---------------------------------------------------------------------------
000122A0                            Map_obj56:
000122A0                            	include "_maps\obj56.asm"
000122A0                            ; ---------------------------------------------------------------------------
000122A0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000122A0                            ; ---------------------------------------------------------------------------
000122A0 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000122A4 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000122A8 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000122AC 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000122B0 01                         byte_10710:	dc.b 1
000122B1 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000122B6 04                         byte_10716:	dc.b 4
000122B7 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000122BC E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000122C1 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000122C6 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000122CB 02                         byte_1072B:	dc.b 2
000122CC E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000122D1 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000122D6 04                         byte_10736:	dc.b 4
000122D7 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000122DC E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000122E1 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000122E6 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000122EB 03                         byte_1074B:	dc.b 3
000122EC D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000122F1 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000122F6 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000122FB 01                         byte_1075B:	dc.b 1
000122FC F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012301 02                         byte_10761:	dc.b 2
00012302 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012307 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001230C 04                         byte_1076C:	dc.b 4
0001230D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00012312 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012317 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001231C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012322 00                         		even
00012322 00                         		even
00012322                            
00012322                            ; ===========================================================================
00012322                            ; ---------------------------------------------------------------------------
00012322                            ; Object 57 - spiked balls (SYZ, LZ)
00012322                            ; ---------------------------------------------------------------------------
00012322                            
00012322                            Obj57:					; XREF: Obj_Index
00012322 7000                       		moveq	#0,d0
00012324 1028 0024                  		move.b	$24(a0),d0
00012328 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001232C 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00012330                            ; ===========================================================================
00012330 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00012332 0000                       		dc.w Obj57_Move-Obj57_Index
00012334 0000                       		dc.w Obj57_Display-Obj57_Index
00012336                            ; ===========================================================================
00012336                            
00012336                            Obj57_Main:				; XREF: Obj57_Index
00012336 5428 0024                  		addq.b	#2,$24(a0)
0001233A 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00012342 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012348 117C 0004 0001             		move.b	#4,1(a0)
0001234E 117C 0004 0018             		move.b	#4,$18(a0)
00012354 117C 0008 0019             		move.b	#8,$19(a0)
0001235A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00012360 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012366 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001236C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012372 6600                       		bne.s	loc_107E8
00012374 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001237A 317C 0310 0002             		move.w	#$310,2(a0)
00012380 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00012388                            
00012388                            loc_107E8:
00012388 1228 0028                  		move.b	$28(a0),d1	; get object type
0001238C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012390 4881                       		ext.w	d1
00012392 E741                       		asl.w	#3,d1		; multiply by 8
00012394 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00012398 1028 0022                  		move.b	$22(a0),d0
0001239C E418                       		ror.b	#2,d0
0001239E 0200 00C0                  		andi.b	#-$40,d0
000123A2 1140 0026                  		move.b	d0,$26(a0)
000123A6 45E8 0029                  		lea	$29(a0),a2
000123AA 1228 0028                  		move.b	$28(a0),d1	; get object type
000123AE 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000123B2 14FC 0000                  		move.b	#0,(a2)+
000123B6 3601                       		move.w	d1,d3
000123B8 E94B                       		lsl.w	#4,d3
000123BA 1143 003C                  		move.b	d3,$3C(a0)
000123BE 5341                       		subq.w	#1,d1		; set chain length (type-1)
000123C0 6500                       		bcs.s	loc_10894
000123C2 0828 0003 0028             		btst	#3,$28(a0)
000123C8 6700                       		beq.s	Obj57_MakeChain
000123CA 5341                       		subq.w	#1,d1
000123CC 6500                       		bcs.s	loc_10894
000123CE                            
000123CE                            Obj57_MakeChain:
000123CE 6100 D24A                  		bsr.w	SingleObjLoad
000123D2 6600                       		bne.s	loc_10894
000123D4 5228 0029                  		addq.b	#1,$29(a0)
000123D8 3A09                       		move.w	a1,d5
000123DA 0445 D000                  		subi.w	#-$3000,d5
000123DE EC4D                       		lsr.w	#6,d5
000123E0 0245 007F                  		andi.w	#$7F,d5
000123E4 14C5                       		move.b	d5,(a2)+
000123E6 137C 0004 0024             		move.b	#4,$24(a1)
000123EC 1290                       		move.b	0(a0),0(a1)
000123EE 2368 0004 0004             		move.l	4(a0),4(a1)
000123F4 3368 0002 0002             		move.w	2(a0),2(a1)
000123FA 1368 0001 0001             		move.b	1(a0),1(a1)
00012400 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012406 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001240C 1368 0020 0020             		move.b	$20(a0),$20(a1)
00012412 0403 0010                  		subi.b	#$10,d3
00012416 1343 003C                  		move.b	d3,$3C(a1)
0001241A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012420 6600                       		bne.s	loc_10890
00012422 4A03                       		tst.b	d3
00012424 6600                       		bne.s	loc_10890
00012426 137C 0002 001A             		move.b	#2,$1A(a1)
0001242C                            
0001242C                            loc_10890:
0001242C 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012430                            
00012430                            loc_10894:
00012430 3A08                       		move.w	a0,d5
00012432 0445 D000                  		subi.w	#-$3000,d5
00012436 EC4D                       		lsr.w	#6,d5
00012438 0245 007F                  		andi.w	#$7F,d5
0001243C 14C5                       		move.b	d5,(a2)+
0001243E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012444 6600                       		bne.s	Obj57_Move
00012446 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001244C 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00012452                            
00012452                            Obj57_Move:				; XREF: Obj57_Index
00012452 6100 0000                  		bsr.w	Obj57_MoveSub
00012456 6000 0000                  		bra.w	Obj57_ChkDel
0001245A                            ; ===========================================================================
0001245A                            
0001245A                            Obj57_MoveSub:				; XREF: Obj57_Move
0001245A 3028 003E                  		move.w	$3E(a0),d0
0001245E D168 0026                  		add.w	d0,$26(a0)
00012462 1028 0026                  		move.b	$26(a0),d0
00012466 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001246C 3428 0038                  		move.w	$38(a0),d2
00012470 3628 003A                  		move.w	$3A(a0),d3
00012474 45E8 0029                  		lea	$29(a0),a2
00012478 7C00                       		moveq	#0,d6
0001247A 1C1A                       		move.b	(a2)+,d6
0001247C                            
0001247C                            Obj57_MoveLoop:
0001247C 7800                       		moveq	#0,d4
0001247E 181A                       		move.b	(a2)+,d4
00012480 ED4C                       		lsl.w	#6,d4
00012482 0684 00FF D000             		addi.l	#$FFD000,d4
00012488 2244                       		movea.l	d4,a1
0001248A 7800                       		moveq	#0,d4
0001248C 1829 003C                  		move.b	$3C(a1),d4
00012490 2A04                       		move.l	d4,d5
00012492 C9C0                       		muls.w	d0,d4
00012494 E084                       		asr.l	#8,d4
00012496 CBC1                       		muls.w	d1,d5
00012498 E085                       		asr.l	#8,d5
0001249A D842                       		add.w	d2,d4
0001249C DA43                       		add.w	d3,d5
0001249E 3344 000C                  		move.w	d4,$C(a1)
000124A2 3345 0008                  		move.w	d5,8(a1)
000124A6 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000124AA 4E75                       		rts	
000124AC                            ; ===========================================================================
000124AC                            
000124AC                            Obj57_ChkDel:				; XREF: Obj57_Move
000124AC 3028 003A                  		move.w	$3A(a0),d0
000124B0 0240 FF80                  		andi.w	#$FF80,d0
000124B4 3238 F700                  		move.w	($FFFFF700).w,d1
000124B8 0441 0080                  		subi.w	#$80,d1
000124BC 0241 FF80                  		andi.w	#$FF80,d1
000124C0 9041                       		sub.w	d1,d0
000124C2 0C40 0280                  		cmpi.w	#$280,d0
000124C6 6200 0000                  		bhi.w	Obj57_Delete
000124CA 6000 CCBA                  		bra.w	DisplaySprite
000124CE                            ; ===========================================================================
000124CE                            
000124CE                            Obj57_Delete:				; XREF: Obj57_ChkDel
000124CE 7400                       		moveq	#0,d2
000124D0 45E8 0029                  		lea	$29(a0),a2
000124D4 141A                       		move.b	(a2)+,d2
000124D6                            
000124D6                            Obj57_DelLoop:
000124D6 7000                       		moveq	#0,d0
000124D8 101A                       		move.b	(a2)+,d0
000124DA ED48                       		lsl.w	#6,d0
000124DC 0680 00FF D000             		addi.l	#$FFD000,d0
000124E2 2240                       		movea.l	d0,a1
000124E4 6100 CCDE                  		bsr.w	DeleteObject2
000124E8 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000124EC                            
000124EC 4E75                       		rts	
000124EE                            ; ===========================================================================
000124EE                            
000124EE                            Obj57_Display:				; XREF: Obj57_Index
000124EE 6000 CC96                  		bra.w	DisplaySprite
000124F2                            ; ===========================================================================
000124F2                            ; ---------------------------------------------------------------------------
000124F2                            ; Sprite mappings - chain of spiked balls (SYZ)
000124F2                            ; ---------------------------------------------------------------------------
000124F2                            Map_obj57:
000124F2                            	include "_maps\obj57syz.asm"
000124F2                            ; ---------------------------------------------------------------------------
000124F2                            ; Sprite mappings - chain of spiked balls (SYZ)
000124F2                            ; ---------------------------------------------------------------------------
000124F2 0000                       		dc.w byte_10958-Map_obj57
000124F4 01                         byte_10958:	dc.b 1
000124F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000124FA                            		even
000124FA                            		even
000124FA                            
000124FA                            ; ---------------------------------------------------------------------------
000124FA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000124FA                            ; ---------------------------------------------------------------------------
000124FA                            Map_obj57a:
000124FA                            	include "_maps\obj57lz.asm"
000124FA                            ; ---------------------------------------------------------------------------
000124FA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000124FA                            ; ---------------------------------------------------------------------------
000124FA 0000                       		dc.w byte_10964-Map_obj57a
000124FC 0000                       		dc.w byte_1096A-Map_obj57a
000124FE 0000                       		dc.w byte_10970-Map_obj57a
00012500 01                         byte_10964:	dc.b 1
00012501 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012506 01                         byte_1096A:	dc.b 1
00012507 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001250C 01                         byte_10970:	dc.b 1
0001250D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012512                            		even
00012512                            		even
00012512                            
00012512                            ; ===========================================================================
00012512                            ; ---------------------------------------------------------------------------
00012512                            ; Object 58 - giant spiked balls (SYZ)
00012512                            ; ---------------------------------------------------------------------------
00012512                            
00012512                            Obj58:					; XREF: Obj_Index
00012512 7000                       		moveq	#0,d0
00012514 1028 0024                  		move.b	$24(a0),d0
00012518 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001251C 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012520                            ; ===========================================================================
00012520 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012522 0000                       		dc.w Obj58_Move-Obj58_Index
00012524                            ; ===========================================================================
00012524                            
00012524                            Obj58_Main:				; XREF: Obj58_Index
00012524 5428 0024                  		addq.b	#2,$24(a0)
00012528 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012530 317C 0396 0002             		move.w	#$396,2(a0)
00012536 117C 0004 0001             		move.b	#4,1(a0)
0001253C 117C 0004 0018             		move.b	#4,$18(a0)
00012542 117C 0018 0019             		move.b	#$18,$19(a0)
00012548 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001254E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012554 117C 0086 0020             		move.b	#$86,$20(a0)
0001255A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001255E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012562 4881                       		ext.w	d1
00012564 E741                       		asl.w	#3,d1		; multiply by 8
00012566 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001256A 1028 0022                  		move.b	$22(a0),d0
0001256E E418                       		ror.b	#2,d0
00012570 0200 00C0                  		andi.b	#$C0,d0
00012574 1140 0026                  		move.b	d0,$26(a0)
00012578 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001257E                            
0001257E                            Obj58_Move:				; XREF: Obj58_Index
0001257E 7000                       		moveq	#0,d0
00012580 1028 0028                  		move.b	$28(a0),d0	; get object type
00012584 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012588 D040                       		add.w	d0,d0
0001258A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001258E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00012592 3028 003A                  		move.w	$3A(a0),d0
00012596 0240 FF80                  		andi.w	#$FF80,d0
0001259A 3238 F700                  		move.w	($FFFFF700).w,d1
0001259E 0441 0080                  		subi.w	#$80,d1
000125A2 0241 FF80                  		andi.w	#$FF80,d1
000125A6 9041                       		sub.w	d1,d0
000125A8 0C40 0280                  		cmpi.w	#$280,d0
000125AC 6200 CC14                  		bhi.w	DeleteObject
000125B0 6000 CBD4                  		bra.w	DisplaySprite
000125B4                            ; ===========================================================================
000125B4 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000125B6 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000125B8 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000125BA 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000125BC 4E75                       		rts	
000125BE                            ; ===========================================================================
000125BE                            
000125BE                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000125BE 323C 0060                  		move.w	#$60,d1
000125C2 7000                       		moveq	#0,d0
000125C4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000125C8 0828 0000 0022             		btst	#0,$22(a0)
000125CE 6700                       		beq.s	loc_10A38
000125D0 4440                       		neg.w	d0
000125D2 D041                       		add.w	d1,d0
000125D4                            
000125D4                            loc_10A38:
000125D4 3228 003A                  		move.w	$3A(a0),d1
000125D8 9240                       		sub.w	d0,d1
000125DA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000125DE 4E75                       		rts	
000125E0                            ; ===========================================================================
000125E0                            
000125E0                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000125E0 323C 0060                  		move.w	#$60,d1
000125E4 7000                       		moveq	#0,d0
000125E6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000125EA 0828 0000 0022             		btst	#0,$22(a0)
000125F0 6700                       		beq.s	loc_10A5C
000125F2 4440                       		neg.w	d0
000125F4 0640 0080                  		addi.w	#$80,d0
000125F8                            
000125F8                            loc_10A5C:
000125F8 3228 0038                  		move.w	$38(a0),d1
000125FC 9240                       		sub.w	d0,d1
000125FE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012602 4E75                       		rts	
00012604                            ; ===========================================================================
00012604                            
00012604                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012604 3028 003E                  		move.w	$3E(a0),d0
00012608 D168 0026                  		add.w	d0,$26(a0)
0001260C 1028 0026                  		move.b	$26(a0),d0
00012610 4EB9 0000 2B7A             		jsr	(CalcSine).l
00012616 3428 0038                  		move.w	$38(a0),d2
0001261A 3628 003A                  		move.w	$3A(a0),d3
0001261E 7800                       		moveq	#0,d4
00012620 1828 003C                  		move.b	$3C(a0),d4
00012624 2A04                       		move.l	d4,d5
00012626 C9C0                       		muls.w	d0,d4
00012628 E084                       		asr.l	#8,d4
0001262A CBC1                       		muls.w	d1,d5
0001262C E085                       		asr.l	#8,d5
0001262E D842                       		add.w	d2,d4
00012630 DA43                       		add.w	d3,d5
00012632 3144 000C                  		move.w	d4,$C(a0)
00012636 3145 0008                  		move.w	d5,8(a0)
0001263A 4E75                       		rts	
0001263C                            ; ===========================================================================
0001263C                            ; ---------------------------------------------------------------------------
0001263C                            ; Sprite mappings - SBZ	spiked ball on a chain
0001263C                            ; ---------------------------------------------------------------------------
0001263C                            Map_obj15b:
0001263C                            	include "_maps\obj15sbz.asm"
0001263C                            ; ---------------------------------------------------------------------------
0001263C                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001263C                            ; ---------------------------------------------------------------------------
0001263C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00012640 0000                       		dc.w byte_10AC6-Map_obj15b
00012642 05                         byte_10AA6:	dc.b 5
00012643 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00012648 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001264D F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00012652 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00012657 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001265C 01                         byte_10AC0:	dc.b 1
0001265D F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00012662 02                         byte_10AC6:	dc.b 2
00012663 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00012668 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001266E 00                         		even
0001266E 00                         		even
0001266E                            
0001266E                            ; ===========================================================================
0001266E                            ; ---------------------------------------------------------------------------
0001266E                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001266E                            ; ---------------------------------------------------------------------------
0001266E                            
0001266E                            Obj59:					; XREF: Obj_Index
0001266E 7000                       		moveq	#0,d0
00012670 1028 0024                  		move.b	$24(a0),d0
00012674 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00012678 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001267C 3028 0032                  		move.w	$32(a0),d0
00012680 0240 FF80                  		andi.w	#$FF80,d0
00012684 3238 F700                  		move.w	($FFFFF700).w,d1
00012688 0441 0080                  		subi.w	#$80,d1
0001268C 0241 FF80                  		andi.w	#$FF80,d1
00012690 9041                       		sub.w	d1,d0
00012692 0C40 0280                  		cmpi.w	#$280,d0
00012696 6200 CB2A                  		bhi.w	DeleteObject
0001269A 6000 CAEA                  		bra.w	DisplaySprite
0001269E                            ; ===========================================================================
0001269E 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000126A0 0000                       		dc.w Obj59_Platform-Obj59_Index
000126A2 0000                       		dc.w Obj59_Action-Obj59_Index
000126A4 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000126A6                            
000126A6 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000126A8                            
000126A8 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000126AA 2001                       		dc.b $20, 1
000126AC 3401                       		dc.b $34, 1
000126AE 1003                       		dc.b $10, 3
000126B0 2003                       		dc.b $20, 3
000126B2 3403                       		dc.b $34, 3
000126B4 1401                       		dc.b $14, 1
000126B6 2401                       		dc.b $24, 1
000126B8 2C01                       		dc.b $2C, 1
000126BA 1403                       		dc.b $14, 3
000126BC 2403                       		dc.b $24, 3
000126BE 2C03                       		dc.b $2C, 3
000126C0 2005                       		dc.b $20, 5
000126C2 2007                       		dc.b $20, 7
000126C4 3009                       		dc.b $30, 9
000126C6                            ; ===========================================================================
000126C6                            
000126C6                            Obj59_Main:				; XREF: Obj59_Index
000126C6 5428 0024                  		addq.b	#2,$24(a0)
000126CA 7000                       		moveq	#0,d0
000126CC 1028 0028                  		move.b	$28(a0),d0
000126D0 6A00                       		bpl.s	Obj59_Main2
000126D2 5828 0024                  		addq.b	#4,$24(a0)
000126D6 0240 007F                  		andi.w	#$7F,d0
000126DA C0FC 0006                  		mulu.w	#6,d0
000126DE 3140 003C                  		move.w	d0,$3C(a0)
000126E2 3140 003E                  		move.w	d0,$3E(a0)
000126E6 588F                       		addq.l	#4,sp
000126E8 4E75                       		rts	
000126EA                            ; ===========================================================================
000126EA                            
000126EA                            Obj59_Main2:
000126EA E648                       		lsr.w	#3,d0
000126EC 0240 001E                  		andi.w	#$1E,d0
000126F0 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000126F4 115A 0019                  		move.b	(a2)+,$19(a0)
000126F8 115A 001A                  		move.b	(a2)+,$1A(a0)
000126FC 7000                       		moveq	#0,d0
000126FE 1028 0028                  		move.b	$28(a0),d0
00012702 D040                       		add.w	d0,d0
00012704 0240 001E                  		andi.w	#$1E,d0
00012708 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001270C 101A                       		move.b	(a2)+,d0
0001270E E548                       		lsl.w	#2,d0
00012710 3140 003C                  		move.w	d0,$3C(a0)
00012714 115A 0028                  		move.b	(a2)+,$28(a0)
00012718 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00012720 317C 4000 0002             		move.w	#$4000,2(a0)
00012726 117C 0004 0001             		move.b	#4,1(a0)
0001272C 117C 0004 0018             		move.b	#4,$18(a0)
00012732 3168 0008 0032             		move.w	8(a0),$32(a0)
00012738 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001273E                            
0001273E                            Obj59_Platform:				; XREF: Obj59_Index
0001273E 7200                       		moveq	#0,d1
00012740 1228 0019                  		move.b	$19(a0),d1
00012744 4EB9 0000 8E42             		jsr	(PlatformObject).l
0001274A 6000 0000                  		bra.w	Obj59_Types
0001274E                            ; ===========================================================================
0001274E                            
0001274E                            Obj59_Action:				; XREF: Obj59_Index
0001274E 7200                       		moveq	#0,d1
00012750 1228 0019                  		move.b	$19(a0),d1
00012754 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
0001275A 3F28 0008                  		move.w	8(a0),-(sp)
0001275E 6100 0000                  		bsr.w	Obj59_Types
00012762 341F                       		move.w	(sp)+,d2
00012764 4A10                       		tst.b	0(a0)
00012766 6700                       		beq.s	locret_10BD4
00012768 4EF9 0000 9520             		jmp	(MvSonicOnPtfm2).l
0001276E                            ; ===========================================================================
0001276E                            
0001276E                            locret_10BD4:
0001276E 4E75                       		rts	
00012770                            ; ===========================================================================
00012770                            
00012770                            Obj59_Types:
00012770 7000                       		moveq	#0,d0
00012772 1028 0028                  		move.b	$28(a0),d0
00012776 0240 000F                  		andi.w	#$F,d0
0001277A D040                       		add.w	d0,d0
0001277C 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00012780 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00012784                            ; ===========================================================================
00012784 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012788 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001278C 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012790 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012794 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00012798                            ; ===========================================================================
00012798                            
00012798                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00012798 4E75                       		rts	
0001279A                            ; ===========================================================================
0001279A                            
0001279A                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001279A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000127A0 6600                       		bne.s	locret_10C0C
000127A2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000127A6                            
000127A6                            locret_10C0C:
000127A6 4E75                       		rts	
000127A8                            ; ===========================================================================
000127A8                            
000127A8                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000127A8 6100 0000                  		bsr.w	Obj59_Move
000127AC 3028 0034                  		move.w	$34(a0),d0
000127B0 4440                       		neg.w	d0
000127B2 D068 0030                  		add.w	$30(a0),d0
000127B6 3140 000C                  		move.w	d0,$C(a0)
000127BA 4E75                       		rts	
000127BC                            ; ===========================================================================
000127BC                            
000127BC                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000127BC 6100 0000                  		bsr.w	Obj59_Move
000127C0 3028 0034                  		move.w	$34(a0),d0
000127C4 D068 0030                  		add.w	$30(a0),d0
000127C8 3140 000C                  		move.w	d0,$C(a0)
000127CC 4E75                       		rts	
000127CE                            ; ===========================================================================
000127CE                            
000127CE                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000127CE 6100 0000                  		bsr.w	Obj59_Move
000127D2 3028 0034                  		move.w	$34(a0),d0
000127D6 E240                       		asr.w	#1,d0
000127D8 4440                       		neg.w	d0
000127DA D068 0030                  		add.w	$30(a0),d0
000127DE 3140 000C                  		move.w	d0,$C(a0)
000127E2 3028 0034                  		move.w	$34(a0),d0
000127E6 D068 0032                  		add.w	$32(a0),d0
000127EA 3140 0008                  		move.w	d0,8(a0)
000127EE 4E75                       		rts	
000127F0                            ; ===========================================================================
000127F0                            
000127F0                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000127F0 6100 0000                  		bsr.w	Obj59_Move
000127F4 3028 0034                  		move.w	$34(a0),d0
000127F8 E240                       		asr.w	#1,d0
000127FA D068 0030                  		add.w	$30(a0),d0
000127FE 3140 000C                  		move.w	d0,$C(a0)
00012802 3028 0034                  		move.w	$34(a0),d0
00012806 4440                       		neg.w	d0
00012808 D068 0032                  		add.w	$32(a0),d0
0001280C 3140 0008                  		move.w	d0,8(a0)
00012810 4E75                       		rts	
00012812                            ; ===========================================================================
00012812                            
00012812                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00012812 6100 0000                  		bsr.w	Obj59_Move
00012816 3028 0034                  		move.w	$34(a0),d0
0001281A 4440                       		neg.w	d0
0001281C D068 0030                  		add.w	$30(a0),d0
00012820 3140 000C                  		move.w	d0,$C(a0)
00012824 4A28 0028                  		tst.b	$28(a0)
00012828 6700 0000                  		beq.w	loc_10C94
0001282C 4E75                       		rts	
0001282E                            ; ===========================================================================
0001282E                            
0001282E                            loc_10C94:
0001282E 0828 0003 0022             		btst	#3,$22(a0)
00012834 6700                       		beq.s	Obj59_Delete
00012836 08E9 0001 0022             		bset	#1,$22(a1)
0001283C 08A9 0003 0022             		bclr	#3,$22(a1)
00012842 137C 0002 0024             		move.b	#2,$24(a1)
00012848                            
00012848                            Obj59_Delete:
00012848 6000 C978                  		bra.w	DeleteObject
0001284C                            
0001284C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001284C                            
0001284C                            
0001284C                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001284C 3028 0038                  		move.w	$38(a0),d0
00012850 4A28 003A                  		tst.b	$3A(a0)
00012854 6600                       		bne.s	loc_10CC8
00012856 0C40 0800                  		cmpi.w	#$800,d0
0001285A 6400                       		bcc.s	loc_10CD0
0001285C 0640 0010                  		addi.w	#$10,d0
00012860 6000                       		bra.s	loc_10CD0
00012862                            ; ===========================================================================
00012862                            
00012862                            loc_10CC8:
00012862 4A40                       		tst.w	d0
00012864 6700                       		beq.s	loc_10CD0
00012866 0440 0010                  		subi.w	#$10,d0
0001286A                            
0001286A                            loc_10CD0:
0001286A 3140 0038                  		move.w	d0,$38(a0)
0001286E 48C0                       		ext.l	d0
00012870 E180                       		asl.l	#8,d0
00012872 D0A8 0034                  		add.l	$34(a0),d0
00012876 2140 0034                  		move.l	d0,$34(a0)
0001287A 4840                       		swap	d0
0001287C 3428 003C                  		move.w	$3C(a0),d2
00012880 B042                       		cmp.w	d2,d0
00012882 6300                       		bls.s	loc_10CF0
00012884 117C 0001 003A             		move.b	#1,$3A(a0)
0001288A                            
0001288A                            loc_10CF0:
0001288A D442                       		add.w	d2,d2
0001288C B042                       		cmp.w	d2,d0
0001288E 6600                       		bne.s	locret_10CFA
00012890 4228 0028                  		clr.b	$28(a0)
00012894                            
00012894                            locret_10CFA:
00012894 4E75                       		rts	
00012896                            ; End of function Obj59_Move
00012896                            
00012896                            ; ===========================================================================
00012896                            
00012896                            Obj59_MakeMulti:			; XREF: Obj59_Index
00012896 5368 003C                  		subq.w	#1,$3C(a0)
0001289A 6600                       		bne.s	Obj59_ChkDel
0001289C 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000128A2 6100 CD76                  		bsr.w	SingleObjLoad
000128A6 6600                       		bne.s	Obj59_ChkDel
000128A8 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000128AC 3368 0008 0008             		move.w	8(a0),8(a1)
000128B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000128B8 137C 000E 0028             		move.b	#$E,$28(a1)
000128BE                            
000128BE                            Obj59_ChkDel:
000128BE 588F                       		addq.l	#4,sp
000128C0 3028 0008                  		move.w	8(a0),d0
000128C4 0240 FF80                  		andi.w	#$FF80,d0
000128C8 3238 F700                  		move.w	($FFFFF700).w,d1
000128CC 0441 0080                  		subi.w	#$80,d1
000128D0 0241 FF80                  		andi.w	#$FF80,d1
000128D4 9041                       		sub.w	d1,d0
000128D6 0C40 0280                  		cmpi.w	#$280,d0
000128DA 6200 C8E6                  		bhi.w	DeleteObject
000128DE 4E75                       		rts	
000128E0                            ; ===========================================================================
000128E0                            ; ---------------------------------------------------------------------------
000128E0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000128E0                            ; ---------------------------------------------------------------------------
000128E0                            Map_obj59:
000128E0                            	include "_maps\obj59.asm"
000128E0                            ; ---------------------------------------------------------------------------
000128E0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000128E0                            ; ---------------------------------------------------------------------------
000128E0 0000                       		dc.w byte_10D4A-Map_obj59
000128E2 03                         byte_10D4A:	dc.b 3
000128E3 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000128E8 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000128ED F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000128F2                            		even
000128F2                            		even
000128F2                            
000128F2                            ; ===========================================================================
000128F2                            ; ---------------------------------------------------------------------------
000128F2                            ; Object 5A - platforms	moving in circles (SLZ)
000128F2                            ; ---------------------------------------------------------------------------
000128F2                            
000128F2                            Obj5A:					; XREF: Obj_Index
000128F2 7000                       		moveq	#0,d0
000128F4 1028 0024                  		move.b	$24(a0),d0
000128F8 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000128FC 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00012900 3028 0032                  		move.w	$32(a0),d0
00012904 0240 FF80                  		andi.w	#$FF80,d0
00012908 3238 F700                  		move.w	($FFFFF700).w,d1
0001290C 0441 0080                  		subi.w	#$80,d1
00012910 0241 FF80                  		andi.w	#$FF80,d1
00012914 9041                       		sub.w	d1,d0
00012916 0C40 0280                  		cmpi.w	#$280,d0
0001291A 6200 C8A6                  		bhi.w	DeleteObject
0001291E 6000 C866                  		bra.w	DisplaySprite
00012922                            ; ===========================================================================
00012922 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00012924 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012926 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012928                            ; ===========================================================================
00012928                            
00012928                            Obj5A_Main:				; XREF: Obj5A_Index
00012928 5428 0024                  		addq.b	#2,$24(a0)
0001292C 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00012934 317C 4000 0002             		move.w	#$4000,2(a0)
0001293A 117C 0004 0001             		move.b	#4,1(a0)
00012940 117C 0004 0018             		move.b	#4,$18(a0)
00012946 117C 0018 0019             		move.b	#$18,$19(a0)
0001294C 3168 0008 0032             		move.w	8(a0),$32(a0)
00012952 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012958                            
00012958                            Obj5A_Platform:				; XREF: Obj5A_Index
00012958 7200                       		moveq	#0,d1
0001295A 1228 0019                  		move.b	$19(a0),d1
0001295E 4EB9 0000 8E42             		jsr	(PlatformObject).l
00012964 6000 0000                  		bra.w	Obj5A_Types
00012968                            ; ===========================================================================
00012968                            
00012968                            Obj5A_Action:				; XREF: Obj5A_Index
00012968 7200                       		moveq	#0,d1
0001296A 1228 0019                  		move.b	$19(a0),d1
0001296E 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
00012974 3F28 0008                  		move.w	8(a0),-(sp)
00012978 6100 0000                  		bsr.w	Obj5A_Types
0001297C 341F                       		move.w	(sp)+,d2
0001297E 4EF9 0000 9520             		jmp	(MvSonicOnPtfm2).l
00012984                            ; ===========================================================================
00012984                            
00012984                            Obj5A_Types:
00012984 7000                       		moveq	#0,d0
00012986 1028 0028                  		move.b	$28(a0),d0
0001298A 0240 000C                  		andi.w	#$C,d0
0001298E E248                       		lsr.w	#1,d0
00012990 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00012994 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00012998                            ; ===========================================================================
00012998 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001299A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001299C                            ; ===========================================================================
0001299C                            
0001299C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001299C 1238 FE80                  		move.b	($FFFFFE80).w,d1
000129A0 0401 0050                  		subi.b	#$50,d1
000129A4 4881                       		ext.w	d1
000129A6 1438 FE84                  		move.b	($FFFFFE84).w,d2
000129AA 0402 0050                  		subi.b	#$50,d2
000129AE 4882                       		ext.w	d2
000129B0 0828 0000 0028             		btst	#0,$28(a0)
000129B6 6700                       		beq.s	loc_10E24
000129B8 4441                       		neg.w	d1
000129BA 4442                       		neg.w	d2
000129BC                            
000129BC                            loc_10E24:
000129BC 0828 0001 0028             		btst	#1,$28(a0)
000129C2 6700                       		beq.s	loc_10E30
000129C4 4441                       		neg.w	d1
000129C6 C342                       		exg	d1,d2
000129C8                            
000129C8                            loc_10E30:
000129C8 D268 0032                  		add.w	$32(a0),d1
000129CC 3141 0008                  		move.w	d1,8(a0)
000129D0 D468 0030                  		add.w	$30(a0),d2
000129D4 3142 000C                  		move.w	d2,$C(a0)
000129D8 4E75                       		rts	
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000129DA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000129DE 0401 0050                  		subi.b	#$50,d1
000129E2 4881                       		ext.w	d1
000129E4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000129E8 0402 0050                  		subi.b	#$50,d2
000129EC 4882                       		ext.w	d2
000129EE 0828 0000 0028             		btst	#0,$28(a0)
000129F4 6700                       		beq.s	loc_10E62
000129F6 4441                       		neg.w	d1
000129F8 4442                       		neg.w	d2
000129FA                            
000129FA                            loc_10E62:
000129FA 0828 0001 0028             		btst	#1,$28(a0)
00012A00 6700                       		beq.s	loc_10E6E
00012A02 4441                       		neg.w	d1
00012A04 C342                       		exg	d1,d2
00012A06                            
00012A06                            loc_10E6E:
00012A06 4441                       		neg.w	d1
00012A08 D268 0032                  		add.w	$32(a0),d1
00012A0C 3141 0008                  		move.w	d1,8(a0)
00012A10 D468 0030                  		add.w	$30(a0),d2
00012A14 3142 000C                  		move.w	d2,$C(a0)
00012A18 4E75                       		rts	
00012A1A                            ; ===========================================================================
00012A1A                            ; ---------------------------------------------------------------------------
00012A1A                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012A1A                            ; ---------------------------------------------------------------------------
00012A1A                            Map_obj5A:
00012A1A                            	include "_maps\obj5A.asm"
00012A1A                            ; ---------------------------------------------------------------------------
00012A1A                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012A1A                            ; ---------------------------------------------------------------------------
00012A1A 0000                       		dc.w byte_10E84-Map_obj5A
00012A1C 02                         byte_10E84:	dc.b 2
00012A1D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012A22 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012A28 00                         		even
00012A28 00                         		even
00012A28                            
00012A28                            ; ===========================================================================
00012A28                            ; ---------------------------------------------------------------------------
00012A28                            ; Object 5B - blocks that form a staircase (SLZ)
00012A28                            ; ---------------------------------------------------------------------------
00012A28                            
00012A28                            Obj5B:					; XREF: Obj_Index
00012A28 7000                       		moveq	#0,d0
00012A2A 1028 0024                  		move.b	$24(a0),d0
00012A2E 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00012A32 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012A36 3028 0030                  		move.w	$30(a0),d0
00012A3A 0240 FF80                  		andi.w	#$FF80,d0
00012A3E 3238 F700                  		move.w	($FFFFF700).w,d1
00012A42 0441 0080                  		subi.w	#$80,d1
00012A46 0241 FF80                  		andi.w	#$FF80,d1
00012A4A 9041                       		sub.w	d1,d0
00012A4C 0C40 0280                  		cmpi.w	#$280,d0
00012A50 6200 C770                  		bhi.w	DeleteObject
00012A54 6000 C730                  		bra.w	DisplaySprite
00012A58                            ; ===========================================================================
00012A58 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012A5A 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012A5C 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012A5E                            ; ===========================================================================
00012A5E                            
00012A5E                            Obj5B_Main:				; XREF: Obj5B_Index
00012A5E 5428 0024                  		addq.b	#2,$24(a0)
00012A62 7638                       		moveq	#$38,d3
00012A64 7801                       		moveq	#1,d4
00012A66 0828 0000 0022             		btst	#0,$22(a0)
00012A6C 6700                       		beq.s	loc_10EDA
00012A6E 763B                       		moveq	#$3B,d3
00012A70 78FF                       		moveq	#-1,d4
00012A72                            
00012A72                            loc_10EDA:
00012A72 3428 0008                  		move.w	8(a0),d2
00012A76 2248                       		movea.l	a0,a1
00012A78 7203                       		moveq	#3,d1
00012A7A 6000                       		bra.s	Obj5B_MakeBlocks
00012A7C                            ; ===========================================================================
00012A7C                            
00012A7C                            Obj5B_Loop:
00012A7C 6100 CBB2                  		bsr.w	SingleObjLoad2
00012A80 6600 0000                  		bne.w	Obj5B_Move
00012A84 137C 0004 0024             		move.b	#4,$24(a1)
00012A8A                            
00012A8A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012A8A 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012A8E 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012A96 337C 4000 0002             		move.w	#$4000,2(a1)
00012A9C 137C 0004 0001             		move.b	#4,1(a1)
00012AA2 137C 0003 0018             		move.b	#3,$18(a1)
00012AA8 137C 0010 0019             		move.b	#$10,$19(a1)
00012AAE 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012AB4 3342 0008                  		move.w	d2,8(a1)
00012AB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012ABE 3368 0008 0030             		move.w	8(a0),$30(a1)
00012AC4 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012ACA 0642 0020                  		addi.w	#$20,d2
00012ACE 1343 0037                  		move.b	d3,$37(a1)
00012AD2 2348 003C                  		move.l	a0,$3C(a1)
00012AD6 D604                       		add.b	d4,d3
00012AD8 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012ADC                            
00012ADC                            Obj5B_Move:				; XREF: Obj5B_Index
00012ADC 7000                       		moveq	#0,d0
00012ADE 1028 0028                  		move.b	$28(a0),d0
00012AE2 0240 0007                  		andi.w	#7,d0
00012AE6 D040                       		add.w	d0,d0
00012AE8 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012AEC 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012AF0                            
00012AF0                            Obj5B_Solid:				; XREF: Obj5B_Index
00012AF0 2468 003C                  		movea.l	$3C(a0),a2
00012AF4 7000                       		moveq	#0,d0
00012AF6 1028 0037                  		move.b	$37(a0),d0
00012AFA 1032 0000                  		move.b	(a2,d0.w),d0
00012AFE D068 0032                  		add.w	$32(a0),d0
00012B02 3140 000C                  		move.w	d0,$C(a0)
00012B06 7200                       		moveq	#0,d1
00012B08 1228 0019                  		move.b	$19(a0),d1
00012B0C 0641 000B                  		addi.w	#$B,d1
00012B10 343C 0010                  		move.w	#$10,d2
00012B14 363C 0011                  		move.w	#$11,d3
00012B18 3828 0008                  		move.w	8(a0),d4
00012B1C 6100 EA46                  		bsr.w	SolidObject
00012B20 4A04                       		tst.b	d4
00012B22 6A00                       		bpl.s	loc_10F92
00012B24 1544 0036                  		move.b	d4,$36(a2)
00012B28                            
00012B28                            loc_10F92:
00012B28 0828 0003 0022             		btst	#3,$22(a0)
00012B2E 6700                       		beq.s	locret_10FA0
00012B30 157C 0001 0036             		move.b	#1,$36(a2)
00012B36                            
00012B36                            locret_10FA0:
00012B36 4E75                       		rts	
00012B38                            ; ===========================================================================
00012B38 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012B3A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012B3C 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012B3E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012B40                            ; ===========================================================================
00012B40                            
00012B40                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012B40 4A68 0034                  		tst.w	$34(a0)
00012B44 6600                       		bne.s	loc_10FC0
00012B46 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012B4C 6600                       		bne.s	locret_10FBE
00012B4E 317C 001E 0034             		move.w	#$1E,$34(a0)
00012B54                            
00012B54                            locret_10FBE:
00012B54 4E75                       		rts	
00012B56                            ; ===========================================================================
00012B56                            
00012B56                            loc_10FC0:
00012B56 5368 0034                  		subq.w	#1,$34(a0)
00012B5A 66F8                       		bne.s	locret_10FBE
00012B5C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B60 4E75                       		rts	
00012B62                            ; ===========================================================================
00012B62                            
00012B62                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012B62 4A68 0034                  		tst.w	$34(a0)
00012B66 6600                       		bne.s	loc_10FE0
00012B68 4A28 0036                  		tst.b	$36(a0)
00012B6C 6A00                       		bpl.s	locret_10FDE
00012B6E 317C 003C 0034             		move.w	#$3C,$34(a0)
00012B74                            
00012B74                            locret_10FDE:
00012B74 4E75                       		rts	
00012B76                            ; ===========================================================================
00012B76                            
00012B76                            loc_10FE0:
00012B76 5368 0034                  		subq.w	#1,$34(a0)
00012B7A 6600                       		bne.s	loc_10FEC
00012B7C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B80 4E75                       		rts	
00012B82                            ; ===========================================================================
00012B82                            
00012B82                            loc_10FEC:
00012B82 43E8 0038                  		lea	$38(a0),a1
00012B86 3028 0034                  		move.w	$34(a0),d0
00012B8A E408                       		lsr.b	#2,d0
00012B8C 0200 0001                  		andi.b	#1,d0
00012B90 12C0                       		move.b	d0,(a1)+
00012B92 0A00 0001                  		eori.b	#1,d0
00012B96 12C0                       		move.b	d0,(a1)+
00012B98 0A00 0001                  		eori.b	#1,d0
00012B9C 12C0                       		move.b	d0,(a1)+
00012B9E 0A00 0001                  		eori.b	#1,d0
00012BA2 12C0                       		move.b	d0,(a1)+
00012BA4 4E75                       		rts	
00012BA6                            ; ===========================================================================
00012BA6                            
00012BA6                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012BA6 43E8 0038                  		lea	$38(a0),a1
00012BAA 0C11 0080                  		cmpi.b	#$80,(a1)
00012BAE 6700                       		beq.s	locret_11038
00012BB0 5211                       		addq.b	#1,(a1)
00012BB2 7200                       		moveq	#0,d1
00012BB4 1219                       		move.b	(a1)+,d1
00012BB6 4841                       		swap	d1
00012BB8 E289                       		lsr.l	#1,d1
00012BBA 2401                       		move.l	d1,d2
00012BBC E289                       		lsr.l	#1,d1
00012BBE 2601                       		move.l	d1,d3
00012BC0 D682                       		add.l	d2,d3
00012BC2 4841                       		swap	d1
00012BC4 4842                       		swap	d2
00012BC6 4843                       		swap	d3
00012BC8 12C3                       		move.b	d3,(a1)+
00012BCA 12C2                       		move.b	d2,(a1)+
00012BCC 12C1                       		move.b	d1,(a1)+
00012BCE                            
00012BCE                            locret_11038:
00012BCE 4E75                       		rts	
00012BD0 4E75                       		rts	
00012BD2                            ; ===========================================================================
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2                            Map_obj5B:
00012BD2                            	include "_maps\obj5B.asm"
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2 0000                       		dc.w byte_1103E-Map_obj5B
00012BD4 01                         byte_1103E:	dc.b 1
00012BD5 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012BDA                            		even
00012BDA                            		even
00012BDA                            
00012BDA                            ; ===========================================================================
00012BDA                            ; ---------------------------------------------------------------------------
00012BDA                            ; Object 5C - metal girders in foreground (SLZ)
00012BDA                            ; ---------------------------------------------------------------------------
00012BDA                            
00012BDA                            Obj5C:					; XREF: Obj_Index
00012BDA 7000                       		moveq	#0,d0
00012BDC 1028 0024                  		move.b	$24(a0),d0
00012BE0 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012BE4 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012BE8                            ; ===========================================================================
00012BE8 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012BEA 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012BEC                            ; ===========================================================================
00012BEC                            
00012BEC                            Obj5C_Main:				; XREF: Obj5C_Index
00012BEC 5428 0024                  		addq.b	#2,$24(a0)
00012BF0 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012BF8 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012BFE 117C 0010 0019             		move.b	#$10,$19(a0)
00012C04                            
00012C04                            Obj5C_Display:				; XREF: Obj5C_Index
00012C04 2238 F700                  		move.l	($FFFFF700).w,d1
00012C08 D281                       		add.l	d1,d1
00012C0A 4841                       		swap	d1
00012C0C 4441                       		neg.w	d1
00012C0E 3141 0008                  		move.w	d1,8(a0)
00012C12 2238 F704                  		move.l	($FFFFF704).w,d1
00012C16 D281                       		add.l	d1,d1
00012C18 4841                       		swap	d1
00012C1A 0241 003F                  		andi.w	#$3F,d1
00012C1E 4441                       		neg.w	d1
00012C20 0641 0100                  		addi.w	#$100,d1
00012C24 3141 000A                  		move.w	d1,$A(a0)
00012C28 6000 C55C                  		bra.w	DisplaySprite
00012C2C                            ; ===========================================================================
00012C2C                            ; ---------------------------------------------------------------------------
00012C2C                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012C2C                            ; ---------------------------------------------------------------------------
00012C2C                            Map_obj5C:
00012C2C                            	include "_maps\obj5C.asm"
00012C2C                            ; ---------------------------------------------------------------------------
00012C2C                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012C2C                            ; ---------------------------------------------------------------------------
00012C2C 0000                       		dc.w byte_11098-Map_obj5C
00012C2E 09                         byte_11098:	dc.b 9
00012C2F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012C34 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012C39 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012C3E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012C43 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012C48 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012C4D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012C52 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012C57 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012C5C                            		even
00012C5C                            		even
00012C5C                            
00012C5C                            ; ===========================================================================
00012C5C                            ; ---------------------------------------------------------------------------
00012C5C                            ; Object 1B - water surface (LZ)
00012C5C                            ; ---------------------------------------------------------------------------
00012C5C                            
00012C5C                            Obj1B:					; XREF: Obj_Index
00012C5C 7000                       		moveq	#0,d0
00012C5E 1028 0024                  		move.b	$24(a0),d0
00012C62 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012C66 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012C6A                            ; ===========================================================================
00012C6A 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012C6C 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012C6E                            ; ===========================================================================
00012C6E                            
00012C6E                            Obj1B_Main:				; XREF: Obj1B_Index
00012C6E 5428 0024                  		addq.b	#2,$24(a0)
00012C72 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012C7A 317C C300 0002             		move.w	#$C300,2(a0)
00012C80 117C 0004 0001             		move.b	#4,1(a0)
00012C86 117C 0080 0019             		move.b	#$80,$19(a0)
00012C8C 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C92                            
00012C92                            Obj1B_Action:				; XREF: Obj1B_Index
00012C92 3238 F700                  		move.w	($FFFFF700).w,d1
00012C96 0241 FFE0                  		andi.w	#$FFE0,d1
00012C9A D268 0030                  		add.w	$30(a0),d1
00012C9E 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012CA4 6700                       		beq.s	loc_11114
00012CA6 0641 0020                  		addi.w	#$20,d1
00012CAA                            
00012CAA                            loc_11114:
00012CAA 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012CAE 3238 F646                  		move.w	($FFFFF646).w,d1
00012CB2 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012CB6 4A28 0032                  		tst.b	$32(a0)
00012CBA 6600                       		bne.s	Obj1B_Animate
00012CBC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012CC2 6700                       		beq.s	loc_1114A	; if not, branch
00012CC4 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012CC8 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012CCE 6000                       		bra.s	Obj1B_Display
00012CD0                            ; ===========================================================================
00012CD0                            
00012CD0                            Obj1B_Animate:				; XREF: loc_11114
00012CD0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012CD4 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012CD6 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012CDC 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012CE0                            
00012CE0                            loc_1114A:				; XREF: loc_11114
00012CE0 5328 001E                  		subq.b	#1,$1E(a0)
00012CE4 6A00                       		bpl.s	Obj1B_Display
00012CE6 117C 0007 001E             		move.b	#7,$1E(a0)
00012CEC 5228 001A                  		addq.b	#1,$1A(a0)
00012CF0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012CF6 6500                       		bcs.s	Obj1B_Display
00012CF8 117C 0000 001A             		move.b	#0,$1A(a0)
00012CFE                            
00012CFE                            Obj1B_Display:
00012CFE 6000 C486                  		bra.w	DisplaySprite
00012D02                            ; ===========================================================================
00012D02                            ; ---------------------------------------------------------------------------
00012D02                            ; Sprite mappings - water surface (LZ)
00012D02                            ; ---------------------------------------------------------------------------
00012D02                            Map_obj1B:
00012D02                            	include "_maps\obj1B.asm"
00012D02                            ; ---------------------------------------------------------------------------
00012D02                            ; Sprite mappings - water surface (LZ)
00012D02                            ; ---------------------------------------------------------------------------
00012D02 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012D06 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012D0A 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012D0E 03                         byte_11178:	dc.b 3
00012D0F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012D14 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012D19 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012D1E 03                         byte_11188:	dc.b 3
00012D1F FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012D24 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012D29 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012D2E 03                         byte_11198:	dc.b 3
00012D2F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012D34 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012D39 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012D3E 06                         byte_111A8:	dc.b 6
00012D3F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012D44 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012D49 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012D4E FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012D53 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012D58 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012D5D 06                         byte_111C7:	dc.b 6
00012D5E FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012D63 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012D68 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012D6D FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012D72 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012D77 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012D7C 06                         byte_111E6:	dc.b 6
00012D7D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012D82 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012D87 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012D8C FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012D91 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012D96 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012D9C 00                         		even
00012D9C 00                         		even
00012D9C                            
00012D9C                            ; ===========================================================================
00012D9C                            ; ---------------------------------------------------------------------------
00012D9C                            ; Object 0B - pole that	breaks (LZ)
00012D9C                            ; ---------------------------------------------------------------------------
00012D9C                            
00012D9C                            Obj0B:					; XREF: Obj_Index
00012D9C 7000                       		moveq	#0,d0
00012D9E 1028 0024                  		move.b	$24(a0),d0
00012DA2 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012DA6 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012DAA                            ; ===========================================================================
00012DAA 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012DAC 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012DAE 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012DB0                            ; ===========================================================================
00012DB0                            
00012DB0                            Obj0B_Main:				; XREF: Obj0B_Index
00012DB0 5428 0024                  		addq.b	#2,$24(a0)
00012DB4 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012DBC 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012DC2 117C 0004 0001             		move.b	#4,1(a0)
00012DC8 117C 0008 0019             		move.b	#8,$19(a0)
00012DCE 117C 0004 0018             		move.b	#4,$18(a0)
00012DD4 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012DDA 7000                       		moveq	#0,d0
00012DDC 1028 0028                  		move.b	$28(a0),d0	; get object type
00012DE0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012DE4 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012DE8                            
00012DE8                            Obj0B_Action:				; XREF: Obj0B_Index
00012DE8 4A28 0032                  		tst.b	$32(a0)
00012DEC 6700                       		beq.s	Obj0B_Grab
00012DEE 4A68 0030                  		tst.w	$30(a0)
00012DF2 6700                       		beq.s	Obj0B_MoveUp
00012DF4 5368 0030                  		subq.w	#1,$30(a0)
00012DF8 6600                       		bne.s	Obj0B_MoveUp
00012DFA 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012E00 6000                       		bra.s	Obj0B_Release
00012E02                            ; ===========================================================================
00012E02                            
00012E02                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012E02 43F8 D000                  		lea	($FFFFD000).w,a1
00012E06 3028 000C                  		move.w	$C(a0),d0
00012E0A 0440 0018                  		subi.w	#$18,d0
00012E0E 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012E14 6700                       		beq.s	Obj0B_MoveDown
00012E16 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012E1A B069 000C                  		cmp.w	$C(a1),d0
00012E1E 6500                       		bcs.s	Obj0B_MoveDown
00012E20 3340 000C                  		move.w	d0,$C(a1)
00012E24                            
00012E24                            Obj0B_MoveDown:
00012E24 0640 0024                  		addi.w	#$24,d0
00012E28 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012E2E 6700                       		beq.s	Obj0B_LetGo
00012E30 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012E34 B069 000C                  		cmp.w	$C(a1),d0
00012E38 6400                       		bcc.s	Obj0B_LetGo
00012E3A 3340 000C                  		move.w	d0,$C(a1)
00012E3E                            
00012E3E                            Obj0B_LetGo:
00012E3E 1038 F603                  		move.b	($FFFFF603).w,d0
00012E42 0240 0070                  		andi.w	#$70,d0
00012E46 6700                       		beq.s	Obj0B_Display
00012E48                            
00012E48                            Obj0B_Release:				; XREF: Obj0B_Action
00012E48 4228 0020                  		clr.b	$20(a0)
00012E4C 5428 0024                  		addq.b	#2,$24(a0)
00012E50 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012E54 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012E58 4228 0032                  		clr.b	$32(a0)
00012E5C 6000                       		bra.s	Obj0B_Display
00012E5E                            ; ===========================================================================
00012E5E                            
00012E5E                            Obj0B_Grab:				; XREF: Obj0B_Action
00012E5E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012E62 6700                       		beq.s	Obj0B_Display	; if not, branch
00012E64 43F8 D000                  		lea	($FFFFD000).w,a1
00012E68 3028 0008                  		move.w	8(a0),d0
00012E6C 0640 0014                  		addi.w	#$14,d0
00012E70 B069 0008                  		cmp.w	8(a1),d0
00012E74 6400                       		bcc.s	Obj0B_Display
00012E76 4228 0021                  		clr.b	$21(a0)
00012E7A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012E80 6400                       		bcc.s	Obj0B_Display
00012E82 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012E86 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012E8A 3028 0008                  		move.w	8(a0),d0
00012E8E 0640 0014                  		addi.w	#$14,d0
00012E92 3340 0008                  		move.w	d0,8(a1)
00012E96 08A9 0000 0022             		bclr	#0,$22(a1)
00012E9C 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012EA2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012EA8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012EAE 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012EB4                            
00012EB4                            Obj0B_Display:				; XREF: Obj0B_Index
00012EB4 6000 E386                  		bra.w	MarkObjGone
00012EB8                            ; ===========================================================================
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8                            ; Sprite mappings - pole that breaks (LZ)
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8                            Map_obj0B:
00012EB8                            	include "_maps\obj0B.asm"
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8                            ; Sprite mappings - pole that breaks (LZ)
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8 0000                       		dc.w byte_11326-Map_obj0B
00012EBA 0000                       		dc.w byte_11331-Map_obj0B
00012EBC 02                         byte_11326:	dc.b 2			; normal pole
00012EBD E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012EC2 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012EC7 04                         byte_11331:	dc.b 4			; broken pole
00012EC8 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012ECD F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012ED2 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012ED7 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012EDC                            		even
00012EDC                            		even
00012EDC                            
00012EDC                            ; ===========================================================================
00012EDC                            ; ---------------------------------------------------------------------------
00012EDC                            ; Object 0C - flapping door (LZ)
00012EDC                            ; ---------------------------------------------------------------------------
00012EDC                            
00012EDC                            Obj0C:					; XREF: Obj_Index
00012EDC 7000                       		moveq	#0,d0
00012EDE 1028 0024                  		move.b	$24(a0),d0
00012EE2 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012EE6 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012EEA                            ; ===========================================================================
00012EEA 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012EEC 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012EEE                            ; ===========================================================================
00012EEE                            
00012EEE                            Obj0C_Main:				; XREF: Obj0C_Index
00012EEE 5428 0024                  		addq.b	#2,$24(a0)
00012EF2 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012EFA 317C 4328 0002             		move.w	#$4328,2(a0)
00012F00 0028 0004 0001             		ori.b	#4,1(a0)
00012F06 117C 0028 0019             		move.b	#$28,$19(a0)
00012F0C 7000                       		moveq	#0,d0
00012F0E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F12 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012F16 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012F1A                            
00012F1A                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012F1A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012F1E 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012F20 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012F26 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012F2C 4A28 0001                  		tst.b	1(a0)
00012F30 6A00                       		bpl.s	Obj0C_Solid
00012F32 303C 00BB                  		move.w	#$BB,d0
00012F36 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
00012F3C                            
00012F3C                            Obj0C_Solid:
00012F3C 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012F42 6100 91F4                  		bsr.w	AnimateSprite
00012F46 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012F4A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012F4E 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012F50 3038 D008                  		move.w	($FFFFD008).w,d0
00012F54 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012F58 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012F5A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012F60 323C 0013                  		move.w	#$13,d1
00012F64 343C 0020                  		move.w	#$20,d2
00012F68 3602                       		move.w	d2,d3
00012F6A 5243                       		addq.w	#1,d3
00012F6C 3828 0008                  		move.w	8(a0),d4
00012F70 6100 E5F2                  		bsr.w	SolidObject	; make the door	solid
00012F74                            
00012F74                            Obj0C_Display:
00012F74 6000 E2C6                  		bra.w	MarkObjGone
00012F78                            ; ===========================================================================
00012F78                            Ani_obj0C:
00012F78                            	include "_anim\obj0C.asm"
00012F78                            ; ---------------------------------------------------------------------------
00012F78                            ; Animation script - flapping door (LZ)
00012F78                            ; ---------------------------------------------------------------------------
00012F78 0000                       		dc.w byte_113E6-Ani_obj0C
00012F7A 0000                       		dc.w byte_113EC-Ani_obj0C
00012F7C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012F82 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012F88                            		even
00012F88                            		even
00012F88                            
00012F88                            ; ---------------------------------------------------------------------------
00012F88                            ; Sprite mappings - flapping door (LZ)
00012F88                            ; ---------------------------------------------------------------------------
00012F88                            Map_obj0C:
00012F88                            	include "_maps\obj0C.asm"
00012F88                            ; ---------------------------------------------------------------------------
00012F88                            ; Sprite mappings - flapping door (LZ)
00012F88                            ; ---------------------------------------------------------------------------
00012F88 0000                       		dc.w byte_113F8-Map_obj0C
00012F8A 0000                       		dc.w byte_11403-Map_obj0C
00012F8C 0000                       		dc.w byte_1140E-Map_obj0C
00012F8E 02                         byte_113F8:	dc.b 2
00012F8F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012F94 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012F99 02                         byte_11403:	dc.b 2
00012F9A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012F9F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012FA4 02                         byte_1140E:	dc.b 2
00012FA5 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012FAA 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012FB0 00                         		even
00012FB0 00                         		even
00012FB0                            
00012FB0                            ; ===========================================================================
00012FB0                            ; ---------------------------------------------------------------------------
00012FB0                            ; Object 71 - invisible	solid blocks
00012FB0                            ; ---------------------------------------------------------------------------
00012FB0                            
00012FB0                            Obj71:					; XREF: Obj_Index
00012FB0 7000                       		moveq	#0,d0
00012FB2 1028 0024                  		move.b	$24(a0),d0
00012FB6 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012FBA 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012FBE                            ; ===========================================================================
00012FBE 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012FC0 0000                       		dc.w Obj71_Solid-Obj71_Index
00012FC2                            ; ===========================================================================
00012FC2                            
00012FC2                            Obj71_Main:				; XREF: Obj71_Index
00012FC2 5428 0024                  		addq.b	#2,$24(a0)
00012FC6 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012FCE 317C 8680 0002             		move.w	#$8680,2(a0)
00012FD4 0028 0004 0001             		ori.b	#4,1(a0)
00012FDA 1028 0028                  		move.b	$28(a0),d0	; get object type
00012FDE 1200                       		move.b	d0,d1
00012FE0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012FE4 0640 0010                  		addi.w	#$10,d0
00012FE8 E248                       		lsr.w	#1,d0
00012FEA 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012FEE 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012FF2 5241                       		addq.w	#1,d1
00012FF4 E749                       		lsl.w	#3,d1
00012FF6 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012FFA                            
00012FFA                            Obj71_Solid:				; XREF: Obj71_Index
00012FFA 6100 C404                  		bsr.w	ChkObjOnScreen
00012FFE 6600                       		bne.s	Obj71_ChkDel
00013000 7200                       		moveq	#0,d1
00013002 1228 0019                  		move.b	$19(a0),d1
00013006 0641 000B                  		addi.w	#$B,d1
0001300A 7400                       		moveq	#0,d2
0001300C 1428 0016                  		move.b	$16(a0),d2
00013010 3602                       		move.w	d2,d3
00013012 5243                       		addq.w	#1,d3
00013014 3828 0008                  		move.w	8(a0),d4
00013018 6100 E592                  		bsr.w	SolidObject71
0001301C                            
0001301C                            Obj71_ChkDel:
0001301C 3028 0008                  		move.w	8(a0),d0
00013020 0240 FF80                  		andi.w	#$FF80,d0
00013024 3238 F700                  		move.w	($FFFFF700).w,d1
00013028 0441 0080                  		subi.w	#$80,d1
0001302C 0241 FF80                  		andi.w	#$FF80,d1
00013030 9041                       		sub.w	d1,d0
00013032 0C40 0280                  		cmpi.w	#$280,d0
00013036 6200                       		bhi.s	Obj71_Delete
00013038 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001303C 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0001303E 4EFA C146                  		jmp	DisplaySprite	; if yes, display the object
00013042                            ; ===========================================================================
00013042                            
00013042                            Obj71_NoDisplay:
00013042 4E75                       		rts	
00013044                            ; ===========================================================================
00013044                            
00013044                            Obj71_Delete:
00013044 4EFA C17C                  		jmp	DeleteObject
00013048                            ; ===========================================================================
00013048                            ; ---------------------------------------------------------------------------
00013048                            ; Sprite mappings - invisible solid blocks
00013048                            ; ---------------------------------------------------------------------------
00013048                            Map_obj71:
00013048                            	include "_maps\obj71.asm"
00013048                            ; ---------------------------------------------------------------------------
00013048                            ; Sprite mappings - invisible solid blocks
00013048                            ; ---------------------------------------------------------------------------
00013048 0000                       		dc.w byte_114BC-Map_obj71
0001304A 0000                       		dc.w byte_114D1-Map_obj71
0001304C 0000                       		dc.w byte_114E6-Map_obj71
0001304E 04                         byte_114BC:	dc.b 4
0001304F F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00013054 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00013059 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001305E 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00013063 04                         byte_114D1:	dc.b 4
00013064 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00013069 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001306E 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00013073 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00013078 04                         byte_114E6:	dc.b 4
00013079 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001307E E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00013083 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00013088 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001308E 00                         		even
0001308E 00                         		even
0001308E                            
0001308E                            ; ===========================================================================
0001308E                            ; ---------------------------------------------------------------------------
0001308E                            ; Object 5D - fans (SLZ)
0001308E                            ; ---------------------------------------------------------------------------
0001308E                            
0001308E                            Obj5D:					; XREF: Obj_Index
0001308E 7000                       		moveq	#0,d0
00013090 1028 0024                  		move.b	$24(a0),d0
00013094 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00013098 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001309C                            ; ===========================================================================
0001309C 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001309E 0000                       		dc.w Obj5D_Delay-Obj5D_Index
000130A0                            ; ===========================================================================
000130A0                            
000130A0                            Obj5D_Main:				; XREF: Obj5D_Index
000130A0 5428 0024                  		addq.b	#2,$24(a0)
000130A4 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000130AC 317C 43A0 0002             		move.w	#$43A0,2(a0)
000130B2 0028 0004 0001             		ori.b	#4,1(a0)
000130B8 117C 0010 0019             		move.b	#$10,$19(a0)
000130BE 117C 0004 0018             		move.b	#4,$18(a0)
000130C4                            
000130C4                            Obj5D_Delay:				; XREF: Obj5D_Index
000130C4 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000130CA 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000130CC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000130D0 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000130D2 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000130D8 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000130DE 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000130E0 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000130E6                            
000130E6                            Obj5D_Blow:
000130E6 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000130EA 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000130EE 43F8 D000                  		lea	($FFFFD000).w,a1
000130F2 3029 0008                  		move.w	8(a1),d0
000130F6 9068 0008                  		sub.w	8(a0),d0
000130FA 0828 0000 0022             		btst	#0,$22(a0)
00013100 6600                       		bne.s	Obj5D_ChkSonic
00013102 4440                       		neg.w	d0
00013104                            
00013104                            Obj5D_ChkSonic:
00013104 0640 0050                  		addi.w	#$50,d0
00013108 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001310C 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001310E 3229 000C                  		move.w	$C(a1),d1
00013112 0641 0060                  		addi.w	#$60,d1
00013116 9268 000C                  		sub.w	$C(a0),d1
0001311A 6500                       		bcs.s	Obj5D_Animate
0001311C 0C41 0070                  		cmpi.w	#$70,d1
00013120 6400                       		bcc.s	Obj5D_Animate
00013122 0440 0050                  		subi.w	#$50,d0
00013126 6400                       		bcc.s	loc_1159A
00013128 4640                       		not.w	d0
0001312A D040                       		add.w	d0,d0
0001312C                            
0001312C                            loc_1159A:
0001312C 0640 0060                  		addi.w	#$60,d0
00013130 0828 0000 0022             		btst	#0,$22(a0)
00013136 6600                       		bne.s	loc_115A8
00013138 4440                       		neg.w	d0
0001313A                            
0001313A                            loc_115A8:
0001313A 4400                       		neg.b	d0
0001313C E840                       		asr.w	#4,d0
0001313E 0828 0000 0028             		btst	#0,$28(a0)
00013144 6700                       		beq.s	Obj5D_MoveSonic
00013146 4440                       		neg.w	d0
00013148                            
00013148                            Obj5D_MoveSonic:
00013148 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001314C                            
0001314C                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001314C 5328 001E                  		subq.b	#1,$1E(a0)
00013150 6A00                       		bpl.s	Obj5D_ChkDel
00013152 117C 0000 001E             		move.b	#0,$1E(a0)
00013158 5228 001B                  		addq.b	#1,$1B(a0)
0001315C 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00013162 6500                       		bcs.s	loc_115D8
00013164 117C 0000 001B             		move.b	#0,$1B(a0)
0001316A                            
0001316A                            loc_115D8:
0001316A 7000                       		moveq	#0,d0
0001316C 0828 0000 0028             		btst	#0,$28(a0)
00013172 6700                       		beq.s	loc_115E4
00013174 7002                       		moveq	#2,d0
00013176                            
00013176                            loc_115E4:
00013176 D028 001B                  		add.b	$1B(a0),d0
0001317A 1140 001A                  		move.b	d0,$1A(a0)
0001317E                            
0001317E                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001317E 6100 C006                  		bsr.w	DisplaySprite
00013182 3028 0008                  		move.w	8(a0),d0
00013186 0240 FF80                  		andi.w	#$FF80,d0
0001318A 3238 F700                  		move.w	($FFFFF700).w,d1
0001318E 0441 0080                  		subi.w	#$80,d1
00013192 0241 FF80                  		andi.w	#$FF80,d1
00013196 9041                       		sub.w	d1,d0
00013198 0C40 0280                  		cmpi.w	#$280,d0
0001319C 6200 C024                  		bhi.w	DeleteObject
000131A0 4E75                       		rts	
000131A2                            ; ===========================================================================
000131A2                            ; ---------------------------------------------------------------------------
000131A2                            ; Sprite mappings - fans (SLZ)
000131A2                            ; ---------------------------------------------------------------------------
000131A2                            Map_obj5D:
000131A2                            	include "_maps\obj5D.asm"
000131A2                            ; ---------------------------------------------------------------------------
000131A2                            ; Sprite mappings - fans (SLZ)
000131A2                            ; ---------------------------------------------------------------------------
000131A2 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000131A6 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000131AA 0000                       		dc.w byte_1161A-Map_obj5D
000131AC 02                         byte_1161A:	dc.b 2
000131AD F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000131B2 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000131B7 02                         byte_11625:	dc.b 2
000131B8 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000131BD 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000131C2 02                         byte_11630:	dc.b 2
000131C3 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000131C8 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000131CE 00                         		even
000131CE 00                         		even
000131CE                            
000131CE                            ; ===========================================================================
000131CE                            ; ---------------------------------------------------------------------------
000131CE                            ; Object 5E - seesaws (SLZ)
000131CE                            ; ---------------------------------------------------------------------------
000131CE                            
000131CE                            Obj5E:					; XREF: Obj_Index
000131CE 7000                       		moveq	#0,d0
000131D0 1028 0024                  		move.b	$24(a0),d0
000131D4 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000131D8 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000131DC 3028 0030                  		move.w	$30(a0),d0
000131E0 0240 FF80                  		andi.w	#$FF80,d0
000131E4 3238 F700                  		move.w	($FFFFF700).w,d1
000131E8 0441 0080                  		subi.w	#$80,d1
000131EC 0241 FF80                  		andi.w	#$FF80,d1
000131F0 9041                       		sub.w	d1,d0
000131F2 6B00 BFCE                  		bmi.w	DeleteObject
000131F6 0C40 0280                  		cmpi.w	#$280,d0
000131FA 6200 BFC6                  		bhi.w	DeleteObject
000131FE 6000 BF86                  		bra.w	DisplaySprite
00013202                            ; ===========================================================================
00013202 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00013204 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00013206 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00013208 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001320A 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001320C 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001320E                            ; ===========================================================================
0001320E                            
0001320E                            Obj5E_Main:				; XREF: Obj5E_Index
0001320E 5428 0024                  		addq.b	#2,$24(a0)
00013212 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001321A 317C 0374 0002             		move.w	#$374,2(a0)
00013220 0028 0004 0001             		ori.b	#4,1(a0)
00013226 117C 0004 0018             		move.b	#4,$18(a0)
0001322C 117C 0030 0019             		move.b	#$30,$19(a0)
00013232 3168 0008 0030             		move.w	8(a0),$30(a0)
00013238 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001323C 6600                       		bne.s	loc_116D2	; if not, branch
0001323E 6100 C3F0                  		bsr.w	SingleObjLoad2
00013242 6600                       		bne.s	loc_116D2
00013244 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00013248 5C29 0024                  		addq.b	#6,$24(a1)
0001324C 3368 0008 0008             		move.w	8(a0),8(a1)
00013252 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013258 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001325E 2348 003C                  		move.l	a0,$3C(a1)
00013262                            
00013262                            loc_116D2:
00013262 0828 0000 0022             		btst	#0,$22(a0)
00013268 6700                       		beq.s	loc_116E0
0001326A 117C 0002 001A             		move.b	#2,$1A(a0)
00013270                            
00013270                            loc_116E0:
00013270 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00013276                            
00013276                            Obj5E_Slope:				; XREF: Obj5E_Index
00013276 1228 003A                  		move.b	$3A(a0),d1
0001327A 6100 0000                  		bsr.w	loc_11766
0001327E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013284 0828 0000 001A             		btst	#0,$1A(a0)
0001328A 6700                       		beq.s	loc_11702
0001328C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013292                            
00013292                            loc_11702:
00013292 43F8 D000                  		lea	($FFFFD000).w,a1
00013296 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001329C 323C 0030                  		move.w	#$30,d1
000132A0 4EB9 0000 8F16             		jsr	(SlopeObject).l
000132A6 4E75                       		rts	
000132A8                            ; ===========================================================================
000132A8                            
000132A8                            Obj5E_Slope2:				; XREF: Obj5E_Index
000132A8 6100 0000                  		bsr.w	loc_1174A
000132AC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000132B2 0828 0000 001A             		btst	#0,$1A(a0)
000132B8 6700                       		beq.s	loc_11730
000132BA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000132C0                            
000132C0                            loc_11730:
000132C0 323C 0030                  		move.w	#$30,d1
000132C4 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
000132CA 323C 0030                  		move.w	#$30,d1
000132CE 3428 0008                  		move.w	8(a0),d2
000132D2 4EB9 0000 9F14             		jsr	SlopeObject2
000132D8 4E75                       		rts	
000132DA                            ; ===========================================================================
000132DA                            
000132DA                            loc_1174A:				; XREF: Obj5E_Slope2
000132DA 7202                       		moveq	#2,d1
000132DC 43F8 D000                  		lea	($FFFFD000).w,a1
000132E0 3028 0008                  		move.w	8(a0),d0
000132E4 9069 0008                  		sub.w	8(a1),d0
000132E8 6400                       		bcc.s	loc_1175E
000132EA 4440                       		neg.w	d0
000132EC 7200                       		moveq	#0,d1
000132EE                            
000132EE                            loc_1175E:
000132EE 0C40 0008                  		cmpi.w	#8,d0
000132F2 6400                       		bcc.s	loc_11766
000132F4 7201                       		moveq	#1,d1
000132F6                            
000132F6                            loc_11766:
000132F6 1028 001A                  		move.b	$1A(a0),d0
000132FA B001                       		cmp.b	d1,d0
000132FC 6700                       		beq.s	locret_11790
000132FE 6400                       		bcc.s	loc_11772
00013300 5400                       		addq.b	#2,d0
00013302                            
00013302                            loc_11772:
00013302 5300                       		subq.b	#1,d0
00013304 1140 001A                  		move.b	d0,$1A(a0)
00013308 1141 003A                  		move.b	d1,$3A(a0)
0001330C 08A8 0000 0001             		bclr	#0,1(a0)
00013312 0828 0001 001A             		btst	#1,$1A(a0)
00013318 6700                       		beq.s	locret_11790
0001331A 08E8 0000 0001             		bset	#0,1(a0)
00013320                            
00013320                            locret_11790:
00013320 4E75                       		rts	
00013322                            ; ===========================================================================
00013322                            
00013322                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00013322 5428 0024                  		addq.b	#2,$24(a0)
00013326 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001332E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00013334 0028 0004 0001             		ori.b	#4,1(a0)
0001333A 117C 0004 0018             		move.b	#4,$18(a0)
00013340 117C 008B 0020             		move.b	#$8B,$20(a0)
00013346 117C 000C 0019             		move.b	#$C,$19(a0)
0001334C 3168 0008 0030             		move.w	8(a0),$30(a0)
00013352 0668 0028 0008             		addi.w	#$28,8(a0)
00013358 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001335E 117C 0001 001A             		move.b	#1,$1A(a0)
00013364 0828 0000 0022             		btst	#0,$22(a0)
0001336A 6700                       		beq.s	Obj5E_MoveSpike
0001336C 0468 0050 0008             		subi.w	#$50,8(a0)
00013372 117C 0002 003A             		move.b	#2,$3A(a0)
00013378                            
00013378                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00013378 2268 003C                  		movea.l	$3C(a0),a1
0001337C 7000                       		moveq	#0,d0
0001337E 1028 003A                  		move.b	$3A(a0),d0
00013382 9029 003A                  		sub.b	$3A(a1),d0
00013386 6700                       		beq.s	loc_1183E
00013388 6400                       		bcc.s	loc_117FC
0001338A 4400                       		neg.b	d0
0001338C                            
0001338C                            loc_117FC:
0001338C 323C F7E8                  		move.w	#-$818,d1
00013390 343C FEEC                  		move.w	#-$114,d2
00013394 0C00 0001                  		cmpi.b	#1,d0
00013398 6700                       		beq.s	loc_11822
0001339A 323C F510                  		move.w	#-$AF0,d1
0001339E 343C FF34                  		move.w	#-$CC,d2
000133A2 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000133A8 6D00                       		blt.s	loc_11822
000133AA 323C F200                  		move.w	#-$E00,d1
000133AE 343C FF60                  		move.w	#-$A0,d2
000133B2                            
000133B2                            loc_11822:
000133B2 3141 0012                  		move.w	d1,$12(a0)
000133B6 3142 0010                  		move.w	d2,$10(a0)
000133BA 3028 0008                  		move.w	8(a0),d0
000133BE 9068 0030                  		sub.w	$30(a0),d0
000133C2 6400                       		bcc.s	loc_11838
000133C4 4468 0010                  		neg.w	$10(a0)
000133C8                            
000133C8                            loc_11838:
000133C8 5428 0024                  		addq.b	#2,$24(a0)
000133CC 6000                       		bra.s	Obj5E_SpikeFall
000133CE                            ; ===========================================================================
000133CE                            
000133CE                            loc_1183E:				; XREF: Obj5E_MoveSpike
000133CE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000133D4 7000                       		moveq	#0,d0
000133D6 1029 001A                  		move.b	$1A(a1),d0
000133DA 343C 0028                  		move.w	#$28,d2
000133DE 3228 0008                  		move.w	8(a0),d1
000133E2 9268 0030                  		sub.w	$30(a0),d1
000133E6 6400                       		bcc.s	loc_1185C
000133E8 4442                       		neg.w	d2
000133EA 5440                       		addq.w	#2,d0
000133EC                            
000133EC                            loc_1185C:
000133EC D040                       		add.w	d0,d0
000133EE 3228 0034                  		move.w	$34(a0),d1
000133F2 D272 0000                  		add.w	(a2,d0.w),d1
000133F6 3141 000C                  		move.w	d1,$C(a0)
000133FA D468 0030                  		add.w	$30(a0),d2
000133FE 3142 0008                  		move.w	d2,8(a0)
00013402 4268 000E                  		clr.w	$E(a0)
00013406 4268 000A                  		clr.w	$A(a0)
0001340A 4E75                       		rts	
0001340C                            ; ===========================================================================
0001340C                            
0001340C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001340C 4A68 0012                  		tst.w	$12(a0)
00013410 6A00                       		bpl.s	loc_1189A
00013412 6100 BD38                  		bsr.w	ObjectFall
00013416 3028 0034                  		move.w	$34(a0),d0
0001341A 0440 002F                  		subi.w	#$2F,d0
0001341E B068 000C                  		cmp.w	$C(a0),d0
00013422 6E00                       		bgt.s	locret_11898
00013424 6100 BD26                  		bsr.w	ObjectFall
00013428                            
00013428                            locret_11898:
00013428 4E75                       		rts	
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001342A 6100 BD20                  		bsr.w	ObjectFall
0001342E 2268 003C                  		movea.l	$3C(a0),a1
00013432 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013438 7000                       		moveq	#0,d0
0001343A 1029 001A                  		move.b	$1A(a1),d0
0001343E 3228 0008                  		move.w	8(a0),d1
00013442 9268 0030                  		sub.w	$30(a0),d1
00013446 6400                       		bcc.s	loc_118BA
00013448 5440                       		addq.w	#2,d0
0001344A                            
0001344A                            loc_118BA:
0001344A D040                       		add.w	d0,d0
0001344C 3228 0034                  		move.w	$34(a0),d1
00013450 D272 0000                  		add.w	(a2,d0.w),d1
00013454 B268 000C                  		cmp.w	$C(a0),d1
00013458 6E00                       		bgt.s	locret_11938
0001345A 2268 003C                  		movea.l	$3C(a0),a1
0001345E 7202                       		moveq	#2,d1
00013460 4A68 0010                  		tst.w	$10(a0)
00013464 6B00                       		bmi.s	Obj5E_Spring
00013466 7200                       		moveq	#0,d1
00013468                            
00013468                            Obj5E_Spring:
00013468 1341 003A                  		move.b	d1,$3A(a1)
0001346C 1141 003A                  		move.b	d1,$3A(a0)
00013470 B229 001A                  		cmp.b	$1A(a1),d1
00013474 6700                       		beq.s	loc_1192C
00013476 08A9 0003 0022             		bclr	#3,$22(a1)
0001347C 6700                       		beq.s	loc_1192C
0001347E 4229 0025                  		clr.b	$25(a1)
00013482 137C 0002 0024             		move.b	#2,$24(a1)
00013488 45F8 D000                  		lea	($FFFFD000).w,a2
0001348C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013492 446A 0012                  		neg.w	$12(a2)
00013496 08EA 0001 0022             		bset	#1,$22(a2)
0001349C 08AA 0003 0022             		bclr	#3,$22(a2)
000134A2 422A 003C                  		clr.b	$3C(a2)
000134A6 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000134AC 157C 0002 0024             		move.b	#2,$24(a2)
000134B2 303C 00CC                  		move.w	#$CC,d0
000134B6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
000134BC                            
000134BC                            loc_1192C:
000134BC 4268 0010                  		clr.w	$10(a0)
000134C0 4268 0012                  		clr.w	$12(a0)
000134C4 5528 0024                  		subq.b	#2,$24(a0)
000134C8                            
000134C8                            locret_11938:
000134C8 4E75                       		rts	
000134CA                            ; ===========================================================================
000134CA FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000134D4                            
000134D4                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00013504                            		even
00013504                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013534                            		even
00013534                            ; ---------------------------------------------------------------------------
00013534                            ; Sprite mappings - seesaws (SLZ)
00013534                            ; ---------------------------------------------------------------------------
00013534                            Map_obj5E:
00013534                            	include "_maps\obj5E.asm"
00013534                            ; ---------------------------------------------------------------------------
00013534                            ; Sprite mappings - seesaws (SLZ)
00013534                            ; ---------------------------------------------------------------------------
00013534 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013538 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001353C 07                         byte_119AC:	dc.b 7
0001353D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013542 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013547 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001354C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013551 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013556 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001355B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013560 04                         byte_119D0:	dc.b 4
00013561 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013566 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001356B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013570 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013576 00                         		even
00013576 00                         		even
00013576                            
00013576                            ; ---------------------------------------------------------------------------
00013576                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013576                            ; ---------------------------------------------------------------------------
00013576                            Map_obj5Ea:
00013576                            	include "_maps\obj5Eballs.asm"
00013576                            ; ---------------------------------------------------------------------------
00013576                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013576                            ; ---------------------------------------------------------------------------
00013576 0000                       		dc.w byte_119EA-Map_obj5Ea
00013578 0000                       		dc.w byte_119F0-Map_obj5Ea
0001357A 01                         byte_119EA:	dc.b 1
0001357B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013580 01                         byte_119F0:	dc.b 1
00013581 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013586                            		even
00013586                            		even
00013586                            
00013586                            ; ===========================================================================
00013586                            ; ---------------------------------------------------------------------------
00013586                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013586                            ; ---------------------------------------------------------------------------
00013586                            
00013586                            Obj5F:					; XREF: Obj_Index
00013586 7000                       		moveq	#0,d0
00013588 1028 0024                  		move.b	$24(a0),d0
0001358C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013590 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00013594                            ; ===========================================================================
00013594 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00013596 0000                       		dc.w Obj5F_Action-Obj5F_Index
00013598 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001359A 0000                       		dc.w Obj5F_End-Obj5F_Index
0001359C                            ; ===========================================================================
0001359C                            
0001359C                            Obj5F_Main:				; XREF: Obj5F_Index
0001359C 5428 0024                  		addq.b	#2,$24(a0)
000135A0 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000135A8 317C 0400 0002             		move.w	#$400,2(a0)
000135AE 0028 0004 0001             		ori.b	#4,1(a0)
000135B4 117C 0003 0018             		move.b	#3,$18(a0)
000135BA 117C 000C 0019             		move.b	#$C,$19(a0)
000135C0 1028 0028                  		move.b	$28(a0),d0
000135C4 6700                       		beq.s	loc_11A3C
000135C6 1140 0024                  		move.b	d0,$24(a0)
000135CA 4E75                       		rts	
000135CC                            ; ===========================================================================
000135CC                            
000135CC                            loc_11A3C:
000135CC 117C 009A 0020             		move.b	#$9A,$20(a0)
000135D2 0868 0000 0022             		bchg	#0,$22(a0)
000135D8                            
000135D8                            Obj5F_Action:				; XREF: Obj5F_Index
000135D8 7000                       		moveq	#0,d0
000135DA 1028 0025                  		move.b	$25(a0),d0
000135DE 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000135E2 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000135E6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000135EC 6100 8B4A                  		bsr.w	AnimateSprite
000135F0 6000 DC4A                  		bra.w	MarkObjGone
000135F4                            ; ===========================================================================
000135F4 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000135F6 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000135F8 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            Obj5F_Walk:				; XREF: Obj5F_Index2
000135FA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000135FE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013602 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00013604 5428 0025                  		addq.b	#2,$25(a0)
00013608 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001360E 317C 0010 0010             		move.w	#$10,$10(a0)
00013614 117C 0001 001C             		move.b	#1,$1C(a0)
0001361A 0868 0000 0022             		bchg	#0,$22(a0)
00013620 6700                       		beq.s	locret_11A96
00013622 4468 0010                  		neg.w	$10(a0)		; change direction
00013626                            
00013626                            locret_11A96:
00013626 4E75                       		rts	
00013628                            ; ===========================================================================
00013628                            
00013628                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013628 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001362C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013630 6B00                       		bmi.s	loc_11AA8
00013632 6100 BB38                  		bsr.w	SpeedToPos
00013636 4E75                       		rts	
00013638                            ; ===========================================================================
00013638                            
00013638                            loc_11AA8:
00013638 5528 0025                  		subq.b	#2,$25(a0)
0001363C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00013642 4268 0010                  		clr.w	$10(a0)		; stop walking
00013646 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001364C 4E75                       		rts	
0001364E                            ; ===========================================================================
0001364E                            
0001364E                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001364E 5368 0030                  		subq.w	#1,$30(a0)
00013652 6A00                       		bpl.s	locret_11AD0
00013654 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00013658 117C 0000 0024             		move.b	#0,$24(a0)
0001365E                            
0001365E                            locret_11AD0:
0001365E 4E75                       		rts	
00013660                            ; ===========================================================================
00013660                            
00013660                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00013660 3038 D008                  		move.w	($FFFFD008).w,d0
00013664 9068 0008                  		sub.w	8(a0),d0
00013668 6400                       		bcc.s	loc_11ADE
0001366A 4440                       		neg.w	d0
0001366C                            
0001366C                            loc_11ADE:
0001366C 0C40 0060                  		cmpi.w	#$60,d0
00013670 6400                       		bcc.s	locret_11B5E
00013672 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013676 9068 000C                  		sub.w	$C(a0),d0
0001367A 6400                       		bcc.s	Obj5F_MakeFuse
0001367C 4440                       		neg.w	d0
0001367E                            
0001367E                            Obj5F_MakeFuse:
0001367E 0C40 0060                  		cmpi.w	#$60,d0
00013682 6400                       		bcc.s	locret_11B5E
00013684 4A78 FE08                  		tst.w	($FFFFFE08).w
00013688 6600                       		bne.s	locret_11B5E
0001368A 117C 0004 0025             		move.b	#4,$25(a0)
00013690 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00013696 4268 0010                  		clr.w	$10(a0)
0001369A 117C 0002 001C             		move.b	#2,$1C(a0)
000136A0 6100 BF8E                  		bsr.w	SingleObjLoad2
000136A4 6600                       		bne.s	locret_11B5E
000136A6 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000136AA 3368 0008 0008             		move.w	8(a0),8(a1)
000136B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000136B6 3368 000C 0034             		move.w	$C(a0),$34(a1)
000136BC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000136C2 137C 0004 0028             		move.b	#4,$28(a1)
000136C8 137C 0003 001C             		move.b	#3,$1C(a1)
000136CE 337C 0010 0012             		move.w	#$10,$12(a1)
000136D4 0828 0001 0022             		btst	#1,$22(a0)
000136DA 6700                       		beq.s	loc_11B54
000136DC 4469 0012                  		neg.w	$12(a1)
000136E0                            
000136E0                            loc_11B54:
000136E0 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000136E6 2348 003C                  		move.l	a0,$3C(a1)
000136EA                            
000136EA                            locret_11B5E:
000136EA 4E75                       		rts	
000136EC                            ; ===========================================================================
000136EC                            
000136EC                            Obj5F_Display:				; XREF: Obj5F_Index
000136EC 6100                       		bsr.s	loc_11B70
000136EE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000136F4 6100 8A42                  		bsr.w	AnimateSprite
000136F8 6000 DB42                  		bra.w	MarkObjGone
000136FC                            ; ===========================================================================
000136FC                            
000136FC                            loc_11B70:
000136FC 5368 0030                  		subq.w	#1,$30(a0)
00013700 6B00                       		bmi.s	loc_11B7C
00013702 6100 BA68                  		bsr.w	SpeedToPos
00013706 4E75                       		rts	
00013708                            ; ===========================================================================
00013708                            
00013708                            loc_11B7C:
00013708 4268 0030                  		clr.w	$30(a0)
0001370C 4228 0024                  		clr.b	$24(a0)
00013710 3168 0034 000C             		move.w	$34(a0),$C(a0)
00013716 7203                       		moveq	#3,d1
00013718 2248                       		movea.l	a0,a1
0001371A 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00013720 6000                       		bra.s	Obj5F_MakeShrap
00013722                            ; ===========================================================================
00013722                            
00013722                            Obj5F_Loop:
00013722 6100 BF0C                  		bsr.w	SingleObjLoad2
00013726 6600                       		bne.s	loc_11BCE
00013728                            
00013728                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013728 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001372C 3368 0008 0008             		move.w	8(a0),8(a1)
00013732 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013738 137C 0006 0028             		move.b	#6,$28(a1)
0001373E 137C 0004 001C             		move.b	#4,$1C(a1)
00013744 335A 0010                  		move.w	(a2)+,$10(a1)
00013748 335A 0012                  		move.w	(a2)+,$12(a1)
0001374C 137C 0098 0020             		move.b	#$98,$20(a1)
00013752 08E9 0007 0001             		bset	#7,1(a1)
00013758                            
00013758                            loc_11BCE:
00013758 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001375C                            
0001375C 117C 0006 0024             		move.b	#6,$24(a0)
00013762                            
00013762                            Obj5F_End:				; XREF: Obj5F_Index
00013762 6100 BA08                  		bsr.w	SpeedToPos
00013766 0668 0018 0012             		addi.w	#$18,$12(a0)
0001376C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013772 6100 89C4                  		bsr.w	AnimateSprite
00013776 4A28 0001                  		tst.b	1(a0)
0001377A 6A00 BA46                  		bpl.w	DeleteObject
0001377E 6000 BA06                  		bra.w	DisplaySprite
00013782                            ; ===========================================================================
00013782 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013792                            
00013792                            Ani_obj5F:
00013792                            	include "_anim\obj5F.asm"
00013792                            ; ---------------------------------------------------------------------------
00013792                            ; Animation script - Bomb enemy
00013792                            ; ---------------------------------------------------------------------------
00013792 0000                       		dc.w byte_11C12-Ani_obj5F
00013794 0000                       		dc.w byte_11C16-Ani_obj5F
00013796 0000                       		dc.w byte_11C1C-Ani_obj5F
00013798 0000                       		dc.w byte_11C20-Ani_obj5F
0001379A 0000                       		dc.w byte_11C24-Ani_obj5F
0001379C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000137A0 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000137A6 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000137AA 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000137AE 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000137B2                            		even
000137B2                            		even
000137B2                            
000137B2                            ; ---------------------------------------------------------------------------
000137B2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000137B2                            ; ---------------------------------------------------------------------------
000137B2                            Map_obj5F:
000137B2                            	include "_maps\obj5F.asm"
000137B2                            ; ---------------------------------------------------------------------------
000137B2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000137B2                            ; ---------------------------------------------------------------------------
000137B2 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000137B6 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000137BA 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000137BE 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000137C2 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000137C6 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000137CA 03                         byte_11C40:	dc.b 3
000137CB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000137D0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000137D5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000137DA 03                         byte_11C50:	dc.b 3
000137DB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000137E0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000137E5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000137EA 03                         byte_11C60:	dc.b 3
000137EB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000137F0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000137F5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000137FA 03                         byte_11C70:	dc.b 3
000137FB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013800 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013805 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001380A 03                         byte_11C80:	dc.b 3
0001380B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013810 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013815 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001381A 03                         byte_11C90:	dc.b 3
0001381B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013820 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013825 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001382A 02                         byte_11CA0:	dc.b 2
0001382B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013830 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013835 02                         byte_11CAB:	dc.b 2
00013836 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001383B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013840 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00013841 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00013846 01                         byte_11CBC:	dc.b 1			; fuse
00013847 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001384C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001384D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013852 01                         byte_11CC8:	dc.b 1			; fireball
00013853 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013858                            		even
00013858                            		even
00013858                            
00013858                            ; ===========================================================================
00013858                            ; ---------------------------------------------------------------------------
00013858                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013858                            ; ---------------------------------------------------------------------------
00013858                            
00013858                            Obj60:					; XREF: Obj_Index
00013858 7000                       		moveq	#0,d0
0001385A 1028 0024                  		move.b	$24(a0),d0
0001385E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00013862 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00013866                            ; ===========================================================================
00013866 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00013868 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001386A 0000                       		dc.w Obj60_Display-Obj60_Index
0001386C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001386E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00013870                            ; ===========================================================================
00013870                            
00013870                            Obj60_Main:				; XREF: Obj60_Index
00013870 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00013878 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001387E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013884 6700                       		beq.s	loc_11D02
00013886 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001388C                            
0001388C                            loc_11D02:
0001388C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013892 6600                       		bne.s	loc_11D10
00013894 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001389A                            
0001389A                            loc_11D10:
0001389A 0028 0004 0001             		ori.b	#4,1(a0)
000138A0 117C 0004 0018             		move.b	#4,$18(a0)
000138A6 117C 000B 0020             		move.b	#$B,$20(a0)
000138AC 117C 000C 0019             		move.b	#$C,$19(a0)
000138B2 7400                       		moveq	#0,d2
000138B4 45E8 0037                  		lea	$37(a0),a2
000138B8 264A                       		movea.l	a2,a3
000138BA 524A                       		addq.w	#1,a2
000138BC 7203                       		moveq	#3,d1
000138BE                            
000138BE                            Obj60_MakeOrbs:
000138BE 6100 BD70                  		bsr.w	SingleObjLoad2
000138C2 6600                       		bne.s	loc_11D90
000138C4 5213                       		addq.b	#1,(a3)
000138C6 3A09                       		move.w	a1,d5
000138C8 0445 D000                  		subi.w	#-$3000,d5
000138CC EC4D                       		lsr.w	#6,d5
000138CE 0245 007F                  		andi.w	#$7F,d5
000138D2 14C5                       		move.b	d5,(a2)+
000138D4 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000138D6 137C 0006 0024             		move.b	#6,$24(a1)
000138DC 2368 0004 0004             		move.l	4(a0),4(a1)
000138E2 3368 0002 0002             		move.w	2(a0),2(a1)
000138E8 0029 0004 0001             		ori.b	#4,1(a1)
000138EE 137C 0004 0018             		move.b	#4,$18(a1)
000138F4 137C 0008 0019             		move.b	#8,$19(a1)
000138FA 137C 0003 001A             		move.b	#3,$1A(a1)
00013900 137C 0098 0020             		move.b	#$98,$20(a1)
00013906 1342 0026                  		move.b	d2,$26(a1)
0001390A 0602 0040                  		addi.b	#$40,d2
0001390E 2348 003C                  		move.l	a0,$3C(a1)
00013912 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00013916                            
00013916                            loc_11D90:
00013916 7001                       		moveq	#1,d0
00013918 0828 0000 0022             		btst	#0,$22(a0)
0001391E 6700                       		beq.s	Obj60_Move
00013920 4440                       		neg.w	d0
00013922                            
00013922                            Obj60_Move:
00013922 1140 0036                  		move.b	d0,$36(a0)
00013926 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001392C 5428 0024                  		addq.b	#2,$24(a0)
00013930 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00013936 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001393C 6700                       		beq.s	locret_11DBC	; if not, branch
0001393E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00013942                            
00013942                            locret_11DBC:
00013942 4E75                       		rts	
00013944                            ; ===========================================================================
00013944                            
00013944                            Obj60_ChkSonic:				; XREF: Obj60_Index
00013944 3038 D008                  		move.w	($FFFFD008).w,d0
00013948 9068 0008                  		sub.w	8(a0),d0
0001394C 6400                       		bcc.s	loc_11DCA
0001394E 4440                       		neg.w	d0
00013950                            
00013950                            loc_11DCA:
00013950 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013954 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013956 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001395A 9068 000C                  		sub.w	$C(a0),d0
0001395E 6400                       		bcc.s	loc_11DDC
00013960 4440                       		neg.w	d0
00013962                            
00013962                            loc_11DDC:
00013962 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013966 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013968 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001396C 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001396E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00013974                            
00013974                            Obj60_Animate:
00013974 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001397A 6100 87BC                  		bsr.w	AnimateSprite
0001397E 6000 0000                  		bra.w	Obj60_ChkDel
00013982                            ; ===========================================================================
00013982                            
00013982                            Obj60_Display:				; XREF: Obj60_Index
00013982 6100 B7E8                  		bsr.w	SpeedToPos
00013986                            
00013986                            Obj60_ChkDel:				; XREF: Obj60_Animate
00013986 3028 0008                  		move.w	8(a0),d0
0001398A 0240 FF80                  		andi.w	#$FF80,d0
0001398E 3238 F700                  		move.w	($FFFFF700).w,d1
00013992 0441 0080                  		subi.w	#$80,d1
00013996 0241 FF80                  		andi.w	#$FF80,d1
0001399A 9041                       		sub.w	d1,d0
0001399C 0C40 0280                  		cmpi.w	#$280,d0
000139A0 6200 0000                  		bhi.w	Obj60_ChkGone
000139A4 6000 B7E0                  		bra.w	DisplaySprite
000139A8                            ; ===========================================================================
000139A8                            
000139A8                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000139A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000139AC 7000                       		moveq	#0,d0
000139AE 1028 0023                  		move.b	$23(a0),d0
000139B2 6700                       		beq.s	loc_11E34
000139B4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000139BA                            
000139BA                            loc_11E34:
000139BA 45E8 0037                  		lea	$37(a0),a2
000139BE 7400                       		moveq	#0,d2
000139C0 141A                       		move.b	(a2)+,d2
000139C2 5342                       		subq.w	#1,d2
000139C4 6500                       		bcs.s	Obj60_Delete
000139C6                            
000139C6                            loc_11E40:
000139C6 7000                       		moveq	#0,d0
000139C8 101A                       		move.b	(a2)+,d0
000139CA ED48                       		lsl.w	#6,d0
000139CC 0680 00FF D000             		addi.l	#$FFD000,d0
000139D2 2240                       		movea.l	d0,a1
000139D4 6100 B7EE                  		bsr.w	DeleteObject2
000139D8 51CA FFEC                  		dbf	d2,loc_11E40
000139DC                            
000139DC                            Obj60_Delete:
000139DC 6000 B7E4                  		bra.w	DeleteObject
000139E0                            ; ===========================================================================
000139E0                            
000139E0                            Obj60_MoveOrb:				; XREF: Obj60_Index
000139E0 2268 003C                  		movea.l	$3C(a0),a1
000139E4 0C11 0060                  		cmpi.b	#$60,0(a1)
000139E8 6600 B7D8                  		bne.w	DeleteObject
000139EC 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000139F2 6600                       		bne.s	Obj60_Circle
000139F4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000139FA 6600                       		bne.s	Obj60_Circle
000139FC 5428 0024                  		addq.b	#2,$24(a0)
00013A00 5329 0037                  		subq.b	#1,$37(a1)
00013A04 6600                       		bne.s	Obj60_FireOrb
00013A06 5429 0024                  		addq.b	#2,$24(a1)
00013A0A                            
00013A0A                            Obj60_FireOrb:
00013A0A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00013A10 0829 0000 0022             		btst	#0,$22(a1)
00013A16 6700                       		beq.s	Obj60_Display2
00013A18 4468 0010                  		neg.w	$10(a0)
00013A1C                            
00013A1C                            Obj60_Display2:
00013A1C 6000 B768                  		bra.w	DisplaySprite
00013A20                            ; ===========================================================================
00013A20                            
00013A20                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00013A20 1028 0026                  		move.b	$26(a0),d0
00013A24 4EB9 0000 2B7A             		jsr	(CalcSine).l
00013A2A E841                       		asr.w	#4,d1
00013A2C D269 0008                  		add.w	8(a1),d1
00013A30 3141 0008                  		move.w	d1,8(a0)
00013A34 E840                       		asr.w	#4,d0
00013A36 D069 000C                  		add.w	$C(a1),d0
00013A3A 3140 000C                  		move.w	d0,$C(a0)
00013A3E 1029 0036                  		move.b	$36(a1),d0
00013A42 D128 0026                  		add.b	d0,$26(a0)
00013A46 6000 B73E                  		bra.w	DisplaySprite
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            Obj60_ChkDel2:				; XREF: Obj60_Index
00013A4A 6100 B720                  		bsr.w	SpeedToPos
00013A4E 4A28 0001                  		tst.b	1(a0)
00013A52 6A00 B76E                  		bpl.w	DeleteObject
00013A56 6000 B72E                  		bra.w	DisplaySprite
00013A5A                            ; ===========================================================================
00013A5A                            Ani_obj60:
00013A5A                            	include "_anim\obj60.asm"
00013A5A                            ; ---------------------------------------------------------------------------
00013A5A                            ; Animation script - Orbinaut enemy
00013A5A                            ; ---------------------------------------------------------------------------
00013A5A 0000                       		dc.w byte_11EDA-Ani_obj60
00013A5C 0000                       		dc.w byte_11EDE-Ani_obj60
00013A5E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00013A62 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013A68                            		even
00013A68                            		even
00013A68                            
00013A68                            ; ---------------------------------------------------------------------------
00013A68                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013A68                            ; ---------------------------------------------------------------------------
00013A68                            Map_obj60:
00013A68                            	include "_maps\obj60.asm"
00013A68                            ; ---------------------------------------------------------------------------
00013A68                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013A68                            ; ---------------------------------------------------------------------------
00013A68 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013A6C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013A70 01                         byte_11EEC:	dc.b 1
00013A71 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013A76 01                         byte_11EF2:	dc.b 1
00013A77 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013A7C 01                         byte_11EF8:	dc.b 1
00013A7D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013A82 01                         byte_11EFE:	dc.b 1
00013A83 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013A88                            		even
00013A88                            		even
00013A88                            
00013A88                            ; ===========================================================================
00013A88                            ; ---------------------------------------------------------------------------
00013A88                            ; Object 16 - harpoon (LZ)
00013A88                            ; ---------------------------------------------------------------------------
00013A88                            
00013A88                            Obj16:					; XREF: Obj_Index
00013A88 7000                       		moveq	#0,d0
00013A8A 1028 0024                  		move.b	$24(a0),d0
00013A8E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013A92 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013A96                            ; ===========================================================================
00013A96 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013A98 0000                       		dc.w Obj16_Move-Obj16_Index
00013A9A 0000                       		dc.w Obj16_Wait-Obj16_Index
00013A9C                            ; ===========================================================================
00013A9C                            
00013A9C                            Obj16_Main:				; XREF: Obj16_Index
00013A9C 5428 0024                  		addq.b	#2,$24(a0)
00013AA0 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013AA8 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013AAE 0028 0004 0001             		ori.b	#4,1(a0)
00013AB4 117C 0004 0018             		move.b	#4,$18(a0)
00013ABA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013AC0 117C 0014 0019             		move.b	#$14,$19(a0)
00013AC6 317C 003C 0030             		move.w	#60,$30(a0)
00013ACC                            
00013ACC                            Obj16_Move:				; XREF: Obj16_Index
00013ACC 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013AD2 6100 8664                  		bsr.w	AnimateSprite
00013AD6 7000                       		moveq	#0,d0
00013AD8 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013ADC 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013AE2 6000 D758                  		bra.w	MarkObjGone
00013AE6                            ; ===========================================================================
00013AE6 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013AEC                            ; ===========================================================================
00013AEC                            
00013AEC                            Obj16_Wait:				; XREF: Obj16_Index
00013AEC 5368 0030                  		subq.w	#1,$30(a0)
00013AF0 6A00                       		bpl.s	Obj16_ChkDel
00013AF2 317C 003C 0030             		move.w	#60,$30(a0)
00013AF8 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013AFC 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013B02                            
00013B02                            Obj16_ChkDel:
00013B02 6000 D738                  		bra.w	MarkObjGone
00013B06                            ; ===========================================================================
00013B06                            Ani_obj16:
00013B06                            	include "_anim\obj16.asm"
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            ; Animation script - harpoon (LZ)
00013B06                            ; ---------------------------------------------------------------------------
00013B06 0000                       		dc.w byte_11F8A-Ani_obj16
00013B08 0000                       		dc.w byte_11F8E-Ani_obj16
00013B0A 0000                       		dc.w byte_11F92-Ani_obj16
00013B0C 0000                       		dc.w byte_11F96-Ani_obj16
00013B0E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013B12 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013B16 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013B1A 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013B1E                            		even
00013B1E                            		even
00013B1E                            
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E                            ; Sprite mappings - harpoon (LZ)
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E                            Map_obj16:
00013B1E                            	include "_maps\obj16.asm"
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E                            ; Sprite mappings - harpoon (LZ)
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00013B22 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013B26 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013B2A 01                         byte_11FA6:	dc.b 1
00013B2B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013B30 01                         byte_11FAC:	dc.b 1
00013B31 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013B36 02                         byte_11FB2:	dc.b 2
00013B37 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013B3C FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013B41 01                         byte_11FBD:	dc.b 1
00013B42 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013B47 01                         byte_11FC3:	dc.b 1
00013B48 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013B4D 02                         byte_11FC9:	dc.b 2
00013B4E D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013B53 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013B58                            		even
00013B58                            		even
00013B58                            
00013B58                            ; ===========================================================================
00013B58                            ; ---------------------------------------------------------------------------
00013B58                            ; Object 61 - blocks (LZ)
00013B58                            ; ---------------------------------------------------------------------------
00013B58                            
00013B58                            Obj61:					; XREF: Obj_Index
00013B58 7000                       		moveq	#0,d0
00013B5A 1028 0024                  		move.b	$24(a0),d0
00013B5E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013B62 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013B66                            ; ===========================================================================
00013B66 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013B68 0000                       		dc.w Obj61_Action-Obj61_Index
00013B6A                            
00013B6A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013B6C 200C                       		dc.b $20, $C
00013B6E 1010                       		dc.b $10, $10
00013B70 1010                       		dc.b $10, $10
00013B72                            ; ===========================================================================
00013B72                            
00013B72                            Obj61_Main:				; XREF: Obj61_Index
00013B72 5428 0024                  		addq.b	#2,$24(a0)
00013B76 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013B7E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013B84 117C 0004 0001             		move.b	#4,1(a0)
00013B8A 117C 0003 0018             		move.b	#3,$18(a0)
00013B90 7000                       		moveq	#0,d0
00013B92 1028 0028                  		move.b	$28(a0),d0
00013B96 E648                       		lsr.w	#3,d0
00013B98 0240 000E                  		andi.w	#$E,d0
00013B9C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013BA0 115A 0019                  		move.b	(a2)+,$19(a0)
00013BA4 1152 0016                  		move.b	(a2),$16(a0)
00013BA8 E248                       		lsr.w	#1,d0
00013BAA 1140 001A                  		move.b	d0,$1A(a0)
00013BAE 3168 0008 0034             		move.w	8(a0),$34(a0)
00013BB4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013BBA 1028 0028                  		move.b	$28(a0),d0
00013BBE 0200 000F                  		andi.b	#$F,d0
00013BC2 6700                       		beq.s	Obj61_Action
00013BC4 0C00 0007                  		cmpi.b	#7,d0
00013BC8 6700                       		beq.s	Obj61_Action
00013BCA 117C 0001 0038             		move.b	#1,$38(a0)
00013BD0                            
00013BD0                            Obj61_Action:				; XREF: Obj61_Index
00013BD0 3F28 0008                  		move.w	8(a0),-(sp)
00013BD4 7000                       		moveq	#0,d0
00013BD6 1028 0028                  		move.b	$28(a0),d0
00013BDA 0240 000F                  		andi.w	#$F,d0
00013BDE D040                       		add.w	d0,d0
00013BE0 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013BE4 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013BE8 381F                       		move.w	(sp)+,d4
00013BEA 4A28 0001                  		tst.b	1(a0)
00013BEE 6A00                       		bpl.s	Obj61_ChkDel
00013BF0 7200                       		moveq	#0,d1
00013BF2 1228 0019                  		move.b	$19(a0),d1
00013BF6 0641 000B                  		addi.w	#$B,d1
00013BFA 7400                       		moveq	#0,d2
00013BFC 1428 0016                  		move.b	$16(a0),d2
00013C00 3602                       		move.w	d2,d3
00013C02 5243                       		addq.w	#1,d3
00013C04 6100 D95E                  		bsr.w	SolidObject
00013C08 1144 003F                  		move.b	d4,$3F(a0)
00013C0C 6100 0000                  		bsr.w	loc_12180
00013C10                            
00013C10                            Obj61_ChkDel:
00013C10 3028 0034                  		move.w	$34(a0),d0
00013C14 0240 FF80                  		andi.w	#$FF80,d0
00013C18 3238 F700                  		move.w	($FFFFF700).w,d1
00013C1C 0441 0080                  		subi.w	#$80,d1
00013C20 0241 FF80                  		andi.w	#$FF80,d1
00013C24 9041                       		sub.w	d1,d0
00013C26 0C40 0280                  		cmpi.w	#$280,d0
00013C2A 6200 B596                  		bhi.w	DeleteObject
00013C2E 6000 B556                  		bra.w	DisplaySprite
00013C32                            ; ===========================================================================
00013C32 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013C36 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013C3A 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013C3E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013C42                            ; ===========================================================================
00013C42                            
00013C42                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013C42 4E75                       		rts	
00013C44                            ; ===========================================================================
00013C44                            
00013C44                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013C44 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013C48 6600                       		bne.s	loc_120D6	; if yes, branch
00013C4A 0828 0003 0022             		btst	#3,$22(a0)
00013C50 6700                       		beq.s	locret_120D4
00013C52 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013C58                            
00013C58                            locret_120D4:
00013C58 4E75                       		rts	
00013C5A                            ; ===========================================================================
00013C5A                            
00013C5A                            loc_120D6:
00013C5A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013C5E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013C60 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013C64 4228 0038                  		clr.b	$38(a0)
00013C68 4E75                       		rts	
00013C6A                            ; ===========================================================================
00013C6A                            
00013C6A                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013C6A 6100 B500                  		bsr.w	SpeedToPos
00013C6E 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013C72 6100 0000                  		bsr.w	ObjHitFloor
00013C76 4A41                       		tst.w	d1
00013C78 6A00 0000                  		bpl.w	locret_12106
00013C7C 5241                       		addq.w	#1,d1
00013C7E D368 000C                  		add.w	d1,$C(a0)
00013C82 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013C86 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013C8A                            
00013C8A                            locret_12106:
00013C8A 4E75                       		rts	
00013C8C                            ; ===========================================================================
00013C8C                            
00013C8C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013C8C 6100 B4DE                  		bsr.w	SpeedToPos
00013C90 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013C94 6100 0000                  		bsr.w	ObjHitCeiling
00013C98 4A41                       		tst.w	d1
00013C9A 6A00 0000                  		bpl.w	locret_12126
00013C9E 9368 000C                  		sub.w	d1,$C(a0)
00013CA2 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013CA6 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013CAA                            
00013CAA                            locret_12126:
00013CAA 4E75                       		rts	
00013CAC                            ; ===========================================================================
00013CAC                            
00013CAC                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013CAC 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013CB2 6600                       		bne.s	locret_12138	; if not, branch
00013CB4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013CB8 4228 0038                  		clr.b	$38(a0)
00013CBC                            
00013CBC                            locret_12138:
00013CBC 4E75                       		rts	
00013CBE                            ; ===========================================================================
00013CBE                            
00013CBE                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013CBE 3038 F646                  		move.w	($FFFFF646).w,d0
00013CC2 9068 000C                  		sub.w	$C(a0),d0
00013CC6 6700                       		beq.s	locret_1217E
00013CC8 6400                       		bcc.s	loc_12162
00013CCA 0C40 FFFE                  		cmpi.w	#-2,d0
00013CCE 6C00                       		bge.s	loc_1214E
00013CD0 70FE                       		moveq	#-2,d0
00013CD2                            
00013CD2                            loc_1214E:
00013CD2 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013CD6 6100 0000                  		bsr.w	ObjHitCeiling
00013CDA 4A41                       		tst.w	d1
00013CDC 6A00 0000                  		bpl.w	locret_12160
00013CE0 9368 000C                  		sub.w	d1,$C(a0)
00013CE4                            
00013CE4                            locret_12160:
00013CE4 4E75                       		rts	
00013CE6                            ; ===========================================================================
00013CE6                            
00013CE6                            loc_12162:				; XREF: Obj61_Type07
00013CE6 0C40 0002                  		cmpi.w	#2,d0
00013CEA 6F00                       		ble.s	loc_1216A
00013CEC 7002                       		moveq	#2,d0
00013CEE                            
00013CEE                            loc_1216A:
00013CEE D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013CF2 6100 0000                  		bsr.w	ObjHitFloor
00013CF6 4A41                       		tst.w	d1
00013CF8 6A00 0000                  		bpl.w	locret_1217E
00013CFC 5241                       		addq.w	#1,d1
00013CFE D368 000C                  		add.w	d1,$C(a0)
00013D02                            
00013D02                            locret_1217E:
00013D02 4E75                       		rts	
00013D04                            ; ===========================================================================
00013D04                            
00013D04                            loc_12180:				; XREF: Obj61_Action
00013D04 4A28 0038                  		tst.b	$38(a0)
00013D08 6700                       		beq.s	locret_121C0
00013D0A 0828 0003 0022             		btst	#3,$22(a0)
00013D10 6600                       		bne.s	loc_1219A
00013D12 4A28 003E                  		tst.b	$3E(a0)
00013D16 6700                       		beq.s	locret_121C0
00013D18 5928 003E                  		subq.b	#4,$3E(a0)
00013D1C 6000                       		bra.s	loc_121A6
00013D1E                            ; ===========================================================================
00013D1E                            
00013D1E                            loc_1219A:
00013D1E 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013D24 6700                       		beq.s	locret_121C0
00013D26 5828 003E                  		addq.b	#4,$3E(a0)
00013D2A                            
00013D2A                            loc_121A6:
00013D2A 1028 003E                  		move.b	$3E(a0),d0
00013D2E 4EB9 0000 2B7A             		jsr	(CalcSine).l
00013D34 323C 0400                  		move.w	#$400,d1
00013D38 C1C1                       		muls.w	d1,d0
00013D3A 4840                       		swap	d0
00013D3C D068 0030                  		add.w	$30(a0),d0
00013D40 3140 000C                  		move.w	d0,$C(a0)
00013D44                            
00013D44                            locret_121C0:
00013D44 4E75                       		rts	
00013D46                            ; ===========================================================================
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            ; Sprite mappings - blocks (LZ)
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            Map_obj61:
00013D46                            	include "_maps\obj61.asm"
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            ; Sprite mappings - blocks (LZ)
00013D46                            ; ---------------------------------------------------------------------------
00013D46 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013D4A 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013D4E 01                         byte_121CA:	dc.b 1
00013D4F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013D54 02                         byte_121D0:	dc.b 2
00013D55 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013D5A F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013D5F 01                         byte_121DB:	dc.b 1
00013D60 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013D65 01                         byte_121E1:	dc.b 1
00013D66 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013D6C 00                         		even
00013D6C 00                         		even
00013D6C                            
00013D6C                            ; ===========================================================================
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            ; Object 62 - gargoyle head (LZ)
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            
00013D6C                            Obj62:					; XREF: Obj_Index
00013D6C 7000                       		moveq	#0,d0
00013D6E 1028 0024                  		move.b	$24(a0),d0
00013D72 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013D76 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013D7A 6000 D4C0                  		bra.w	MarkObjGone
00013D7E                            ; ===========================================================================
00013D7E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013D80 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013D82 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013D84 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013D86                            
00013D86 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013D8E                            ; ===========================================================================
00013D8E                            
00013D8E                            Obj62_Main:				; XREF: Obj62_Index
00013D8E 5428 0024                  		addq.b	#2,$24(a0)
00013D92 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013D9A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013DA0 0028 0004 0001             		ori.b	#4,1(a0)
00013DA6 117C 0003 0018             		move.b	#3,$18(a0)
00013DAC 117C 0010 0019             		move.b	#$10,$19(a0)
00013DB2 1028 0028                  		move.b	$28(a0),d0	; get object type
00013DB6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013DBA 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013DC0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013DC6 0228 000F 0028             		andi.b	#$F,$28(a0)
00013DCC                            
00013DCC                            Obj62_MakeFire:				; XREF: Obj62_Index
00013DCC 5328 001E                  		subq.b	#1,$1E(a0)
00013DD0 6600                       		bne.s	Obj62_NoFire
00013DD2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013DD8 6100 B626                  		bsr.w	ChkObjOnScreen
00013DDC 6600                       		bne.s	Obj62_NoFire
00013DDE 6100 B83A                  		bsr.w	SingleObjLoad
00013DE2 6600                       		bne.s	Obj62_NoFire
00013DE4 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013DE8 5829 0024                  		addq.b	#4,$24(a1)
00013DEC 3368 0008 0008             		move.w	8(a0),8(a1)
00013DF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013DF8 1368 0001 0001             		move.b	1(a0),1(a1)
00013DFE 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013E04                            
00013E04                            Obj62_NoFire:
00013E04 4E75                       		rts	
00013E06                            ; ===========================================================================
00013E06                            
00013E06                            Obj62_FireBall:				; XREF: Obj62_Index
00013E06 5428 0024                  		addq.b	#2,$24(a0)
00013E0A 117C 0008 0016             		move.b	#8,$16(a0)
00013E10 117C 0008 0017             		move.b	#8,$17(a0)
00013E16 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013E1E 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013E24 0028 0004 0001             		ori.b	#4,1(a0)
00013E2A 117C 0004 0018             		move.b	#4,$18(a0)
00013E30 117C 0098 0020             		move.b	#$98,$20(a0)
00013E36 117C 0008 0019             		move.b	#8,$19(a0)
00013E3C 117C 0002 001A             		move.b	#2,$1A(a0)
00013E42 5068 000C                  		addq.w	#8,$C(a0)
00013E46 317C 0200 0010             		move.w	#$200,$10(a0)
00013E4C 0828 0000 0022             		btst	#0,$22(a0)
00013E52 6600                       		bne.s	Obj62_Sound
00013E54 4468 0010                  		neg.w	$10(a0)
00013E58                            
00013E58                            Obj62_Sound:
00013E58 303C 00AE                  		move.w	#$AE,d0
00013E5C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013E62                            
00013E62                            Obj62_AniFire:				; XREF: Obj62_Index
00013E62 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013E66 0200 0007                  		andi.b	#7,d0
00013E6A 6600                       		bne.s	Obj62_StopFire
00013E6C 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013E72                            
00013E72                            Obj62_StopFire:
00013E72 6100 B2F8                  		bsr.w	SpeedToPos
00013E76 0828 0000 0022             		btst	#0,$22(a0)
00013E7C 6600                       		bne.s	Obj62_StopFire2
00013E7E 76F8                       		moveq	#-8,d3
00013E80 6100 0000                  		bsr.w	ObjHitWallLeft
00013E84 4A41                       		tst.w	d1
00013E86 6B00 B33A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013E8A 4E75                       		rts	
00013E8C                            ; ===========================================================================
00013E8C                            
00013E8C                            Obj62_StopFire2:
00013E8C 7608                       		moveq	#8,d3
00013E8E 6100 0000                  		bsr.w	ObjHitWallRight
00013E92 4A41                       		tst.w	d1
00013E94 6B00 B32C                  		bmi.w	DeleteObject
00013E98 4E75                       		rts	
00013E9A                            ; ===========================================================================
00013E9A                            ; ---------------------------------------------------------------------------
00013E9A                            ; Sprite mappings - gargoyle head (LZ)
00013E9A                            ; ---------------------------------------------------------------------------
00013E9A                            Map_obj62:
00013E9A                            	include "_maps\obj62.asm"
00013E9A                            ; ---------------------------------------------------------------------------
00013E9A                            ; Sprite mappings - gargoyle head (LZ)
00013E9A                            ; ---------------------------------------------------------------------------
00013E9A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013E9E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013EA2 03                         byte_12320:	dc.b 3
00013EA3 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013EA8 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013EAD 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013EB2 01                         byte_12330:	dc.b 1
00013EB3 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013EB8 01                         byte_12336:	dc.b 1
00013EB9 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013EBE                            		even
00013EBE                            		even
00013EBE                            
00013EBE                            ; ===========================================================================
00013EBE                            ; ---------------------------------------------------------------------------
00013EBE                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013EBE                            ; ---------------------------------------------------------------------------
00013EBE                            
00013EBE                            Obj63:					; XREF: Obj_Index
00013EBE 7000                       		moveq	#0,d0
00013EC0 1028 0024                  		move.b	$24(a0),d0
00013EC4 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013EC8 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013ECC 3028 0030                  		move.w	$30(a0),d0
00013ED0 0240 FF80                  		andi.w	#$FF80,d0
00013ED4 3238 F700                  		move.w	($FFFFF700).w,d1
00013ED8 0441 0080                  		subi.w	#$80,d1
00013EDC 0241 FF80                  		andi.w	#$FF80,d1
00013EE0 9041                       		sub.w	d1,d0
00013EE2 0C40 0280                  		cmpi.w	#$280,d0
00013EE6 6200                       		bhi.s	loc_1236A
00013EE8                            
00013EE8                            Obj63_Display:				; XREF: loc_1236A
00013EE8 6000 B29C                  		bra.w	DisplaySprite
00013EEC                            ; ===========================================================================
00013EEC                            
00013EEC                            loc_1236A:				; XREF: Obj63
00013EEC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013EF2 6600                       		bne.s	loc_12378
00013EF4 0C40 FF80                  		cmpi.w	#-$80,d0
00013EF8 64EE                       		bcc.s	Obj63_Display
00013EFA                            
00013EFA                            loc_12378:
00013EFA 1028 002F                  		move.b	$2F(a0),d0
00013EFE 6A00 B2C2                  		bpl.w	DeleteObject
00013F02 0240 007F                  		andi.w	#$7F,d0
00013F06 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013F0A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013F10 6000 B2B0                  		bra.w	DeleteObject
00013F14                            ; ===========================================================================
00013F14 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013F16 0000                       		dc.w loc_124B2-Obj63_Index
00013F18 0000                       		dc.w loc_124C2-Obj63_Index
00013F1A 0000                       		dc.w loc_124DE-Obj63_Index
00013F1C                            ; ===========================================================================
00013F1C                            
00013F1C                            Obj63_Main:				; XREF: Obj63_Index
00013F1C 1028 0028                  		move.b	$28(a0),d0
00013F20 6B00 0000                  		bmi.w	loc_12460
00013F24 5428 0024                  		addq.b	#2,$24(a0)
00013F28 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013F30 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013F36 0028 0004 0001             		ori.b	#4,1(a0)
00013F3C 117C 0010 0019             		move.b	#$10,$19(a0)
00013F42 117C 0004 0018             		move.b	#4,$18(a0)
00013F48 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013F4E 6600                       		bne.s	loc_123E2
00013F50 5828 0024                  		addq.b	#4,$24(a0)
00013F54 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013F5A 117C 0001 0018             		move.b	#1,$18(a0)
00013F60 6000 0000                  		bra.w	loc_124DE
00013F64                            ; ===========================================================================
00013F64                            
00013F64                            loc_123E2:
00013F64 117C 0004 001A             		move.b	#4,$1A(a0)
00013F6A 7000                       		moveq	#0,d0
00013F6C 1028 0028                  		move.b	$28(a0),d0
00013F70 3200                       		move.w	d0,d1
00013F72 E648                       		lsr.w	#3,d0
00013F74 0240 001E                  		andi.w	#$1E,d0
00013F78 45FA 0000                  		lea	Obj63_Data(pc),a2
00013F7C D4F2 0000                  		adda.w	(a2,d0.w),a2
00013F80 315A 0038                  		move.w	(a2)+,$38(a0)
00013F84 315A 0030                  		move.w	(a2)+,$30(a0)
00013F88 214A 003C                  		move.l	a2,$3C(a0)
00013F8C 0241 000F                  		andi.w	#$F,d1
00013F90 E549                       		lsl.w	#2,d1
00013F92 1141 0038                  		move.b	d1,$38(a0)
00013F96 117C 0004 003A             		move.b	#4,$3A(a0)
00013F9C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013FA0 6700                       		beq.s	loc_1244C
00013FA2 117C 0001 003B             		move.b	#1,$3B(a0)
00013FA8 4428 003A                  		neg.b	$3A(a0)
00013FAC 7200                       		moveq	#0,d1
00013FAE 1228 0038                  		move.b	$38(a0),d1
00013FB2 D228 003A                  		add.b	$3A(a0),d1
00013FB6 B228 0039                  		cmp.b	$39(a0),d1
00013FBA 6500                       		bcs.s	loc_12448
00013FBC 1001                       		move.b	d1,d0
00013FBE 7200                       		moveq	#0,d1
00013FC0 4A00                       		tst.b	d0
00013FC2 6A00                       		bpl.s	loc_12448
00013FC4 1228 0039                  		move.b	$39(a0),d1
00013FC8 5901                       		subq.b	#4,d1
00013FCA                            
00013FCA                            loc_12448:
00013FCA 1141 0038                  		move.b	d1,$38(a0)
00013FCE                            
00013FCE                            loc_1244C:
00013FCE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013FD4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013FDA 6100 0000                  		bsr.w	Obj63_ChangeDir
00013FDE 6000 0000                  		bra.w	loc_124B2
00013FE2                            ; ===========================================================================
00013FE2                            
00013FE2                            loc_12460:				; XREF: Obj63_Main
00013FE2 1140 002F                  		move.b	d0,$2F(a0)
00013FE6 0240 007F                  		andi.w	#$7F,d0
00013FEA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013FEE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013FF4 6600 B1CC                  		bne.w	DeleteObject
00013FF8 D040                       		add.w	d0,d0
00013FFA 0240 001E                  		andi.w	#$1E,d0
00013FFE 0640 0070                  		addi.w	#$70,d0
00014002 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014008 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001400C 321A                       		move.w	(a2)+,d1
0001400E 2248                       		movea.l	a0,a1
00014010 6000                       		bra.s	Obj63_MakePtfms
00014012                            ; ===========================================================================
00014012                            
00014012                            Obj63_Loop:
00014012 6100 B606                  		bsr.w	SingleObjLoad
00014016 6600                       		bne.s	loc_124AA
00014018                            
00014018                            Obj63_MakePtfms:			; XREF: loc_12460
00014018 12BC 0063                  		move.b	#$63,0(a1)
0001401C 335A 0008                  		move.w	(a2)+,8(a1)
00014020 335A 000C                  		move.w	(a2)+,$C(a1)
00014024 301A                       		move.w	(a2)+,d0
00014026 1340 0028                  		move.b	d0,$28(a1)
0001402A                            
0001402A                            loc_124AA:
0001402A 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001402E                            
0001402E 588F                       		addq.l	#4,sp
00014030 4E75                       		rts	
00014032                            ; ===========================================================================
00014032                            
00014032                            loc_124B2:				; XREF: Obj63_Index
00014032 7200                       		moveq	#0,d1
00014034 1228 0019                  		move.b	$19(a0),d1
00014038 4EB9 0000 8E42             		jsr	(PlatformObject).l
0001403E 6000 0000                  		bra.w	sub_12502
00014042                            ; ===========================================================================
00014042                            
00014042                            loc_124C2:				; XREF: Obj63_Index
00014042 7200                       		moveq	#0,d1
00014044 1228 0019                  		move.b	$19(a0),d1
00014048 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
0001404E 3F28 0008                  		move.w	8(a0),-(sp)
00014052 6100 0000                  		bsr.w	sub_12502
00014056 341F                       		move.w	(sp)+,d2
00014058 4EF9 0000 9520             		jmp	(MvSonicOnPtfm2).l
0001405E                            ; ===========================================================================
0001405E                            
0001405E                            loc_124DE:				; XREF: Obj63_Index
0001405E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014062 0240 0003                  		andi.w	#3,d0
00014066 6600                       		bne.s	loc_124FC
00014068 7201                       		moveq	#1,d1
0001406A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001406E 6700                       		beq.s	loc_124F2
00014070 4401                       		neg.b	d1
00014072                            
00014072                            loc_124F2:
00014072 D328 001A                  		add.b	d1,$1A(a0)
00014076 0228 0003 001A             		andi.b	#3,$1A(a0)
0001407C                            
0001407C                            loc_124FC:
0001407C 588F                       		addq.l	#4,sp
0001407E 6000 D1BC                  		bra.w	MarkObjGone
00014082                            
00014082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014082                            
00014082                            
00014082                            sub_12502:				; XREF: loc_124B2; loc_124C2
00014082 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00014086 6700                       		beq.s	loc_12520
00014088 4A28 003B                  		tst.b	$3B(a0)
0001408C 6600                       		bne.s	loc_12520
0001408E 117C 0001 003B             		move.b	#1,$3B(a0)
00014094 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001409A 4428 003A                  		neg.b	$3A(a0)
0001409E 6000                       		bra.s	loc_12534
000140A0                            ; ===========================================================================
000140A0                            
000140A0                            loc_12520:
000140A0 3028 0008                  		move.w	8(a0),d0
000140A4 B068 0034                  		cmp.w	$34(a0),d0
000140A8 6600                       		bne.s	loc_1256A
000140AA 3028 000C                  		move.w	$C(a0),d0
000140AE B068 0036                  		cmp.w	$36(a0),d0
000140B2 6600                       		bne.s	loc_1256A
000140B4                            
000140B4                            loc_12534:
000140B4 7200                       		moveq	#0,d1
000140B6 1228 0038                  		move.b	$38(a0),d1
000140BA D228 003A                  		add.b	$3A(a0),d1
000140BE B228 0039                  		cmp.b	$39(a0),d1
000140C2 6500                       		bcs.s	loc_12552
000140C4 1001                       		move.b	d1,d0
000140C6 7200                       		moveq	#0,d1
000140C8 4A00                       		tst.b	d0
000140CA 6A00                       		bpl.s	loc_12552
000140CC 1228 0039                  		move.b	$39(a0),d1
000140D0 5901                       		subq.b	#4,d1
000140D2                            
000140D2                            loc_12552:
000140D2 1141 0038                  		move.b	d1,$38(a0)
000140D6 2268 003C                  		movea.l	$3C(a0),a1
000140DA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000140E0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000140E6 6100 0000                  		bsr.w	Obj63_ChangeDir
000140EA                            
000140EA                            loc_1256A:
000140EA 6100 B080                  		bsr.w	SpeedToPos
000140EE 4E75                       		rts	
000140F0                            ; End of function sub_12502
000140F0                            
000140F0                            
000140F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140F0                            
000140F0                            
000140F0                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000140F0 7000                       		moveq	#0,d0
000140F2 343C FF00                  		move.w	#-$100,d2
000140F6 3028 0008                  		move.w	8(a0),d0
000140FA 9068 0034                  		sub.w	$34(a0),d0
000140FE 6400                       		bcc.s	loc_12584
00014100 4440                       		neg.w	d0
00014102 4442                       		neg.w	d2
00014104                            
00014104                            loc_12584:
00014104 7200                       		moveq	#0,d1
00014106 363C FF00                  		move.w	#-$100,d3
0001410A 3228 000C                  		move.w	$C(a0),d1
0001410E 9268 0036                  		sub.w	$36(a0),d1
00014112 6400                       		bcc.s	loc_12598
00014114 4441                       		neg.w	d1
00014116 4443                       		neg.w	d3
00014118                            
00014118                            loc_12598:
00014118 B240                       		cmp.w	d0,d1
0001411A 6500                       		bcs.s	loc_125C2
0001411C 3028 0008                  		move.w	8(a0),d0
00014120 9068 0034                  		sub.w	$34(a0),d0
00014124 6700                       		beq.s	loc_125AE
00014126 48C0                       		ext.l	d0
00014128 E180                       		asl.l	#8,d0
0001412A 81C1                       		divs.w	d1,d0
0001412C 4440                       		neg.w	d0
0001412E                            
0001412E                            loc_125AE:
0001412E 3140 0010                  		move.w	d0,$10(a0)
00014132 3143 0012                  		move.w	d3,$12(a0)
00014136 4840                       		swap	d0
00014138 3140 000A                  		move.w	d0,$A(a0)
0001413C 4268 000E                  		clr.w	$E(a0)
00014140 4E75                       		rts	
00014142                            ; ===========================================================================
00014142                            
00014142                            loc_125C2:				; XREF: Obj63_ChangeDir
00014142 3228 000C                  		move.w	$C(a0),d1
00014146 9268 0036                  		sub.w	$36(a0),d1
0001414A 6700                       		beq.s	loc_125D4
0001414C 48C1                       		ext.l	d1
0001414E E181                       		asl.l	#8,d1
00014150 83C0                       		divs.w	d0,d1
00014152 4441                       		neg.w	d1
00014154                            
00014154                            loc_125D4:
00014154 3141 0012                  		move.w	d1,$12(a0)
00014158 3142 0010                  		move.w	d2,$10(a0)
0001415C 4841                       		swap	d1
0001415E 3141 000E                  		move.w	d1,$E(a0)
00014162 4268 000A                  		clr.w	$A(a0)
00014166 4E75                       		rts	
00014168                            ; End of function Obj63_ChangeDir
00014168                            
00014168                            ; ===========================================================================
00014168 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001416A 0000                       		dc.w word_12610-Obj63_Data
0001416C 0000                       		dc.w word_12628-Obj63_Data
0001416E 0000                       		dc.w word_1263C-Obj63_Data
00014170 0000                       		dc.w word_12650-Obj63_Data
00014172 0000                       		dc.w word_12668-Obj63_Data
00014174 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014184 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014190 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000141A0 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000141A8 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000141BC 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000141D0 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000141E8 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000141FC                            
000141FC                            ; ---------------------------------------------------------------------------
000141FC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000141FC                            ; ---------------------------------------------------------------------------
000141FC                            Map_obj63:
000141FC                            	include "_maps\obj63.asm"
000141FC                            ; ---------------------------------------------------------------------------
000141FC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000141FC                            ; ---------------------------------------------------------------------------
000141FC 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00014200 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00014204 0000                       		dc.w byte_1269E-Map_obj63
00014206 01                         byte_12686:	dc.b 1
00014207 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001420C 01                         byte_1268C:	dc.b 1
0001420D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014212 01                         byte_12692:	dc.b 1
00014213 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014218 01                         byte_12698:	dc.b 1
00014219 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001421E 01                         byte_1269E:	dc.b 1
0001421F F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014224                            		even
00014224                            		even
00014224                            
00014224                            ; ===========================================================================
00014224                            ; ---------------------------------------------------------------------------
00014224                            ; Object 64 - bubbles (LZ)
00014224                            ; ---------------------------------------------------------------------------
00014224                            
00014224                            Obj64:					; XREF: Obj_Index
00014224 7000                       		moveq	#0,d0
00014226 1028 0024                  		move.b	$24(a0),d0
0001422A 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001422E 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00014232                            ; ===========================================================================
00014232 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00014234 0000                       		dc.w Obj64_Animate-Obj64_Index
00014236 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014238 0000                       		dc.w Obj64_Display2-Obj64_Index
0001423A 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001423C 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001423E                            ; ===========================================================================
0001423E                            
0001423E                            Obj64_Main:				; XREF: Obj64_Index
0001423E 5428 0024                  		addq.b	#2,$24(a0)
00014242 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001424A 317C 8348 0002             		move.w	#$8348,2(a0)
00014250 117C 0084 0001             		move.b	#$84,1(a0)
00014256 117C 0010 0019             		move.b	#$10,$19(a0)
0001425C 117C 0001 0018             		move.b	#1,$18(a0)
00014262 1028 0028                  		move.b	$28(a0),d0	; get object type
00014266 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00014268 5028 0024                  		addq.b	#8,$24(a0)
0001426C 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014270 1140 0032                  		move.b	d0,$32(a0)
00014274 1140 0033                  		move.b	d0,$33(a0)
00014278 117C 0006 001C             		move.b	#6,$1C(a0)
0001427E 6000 0000                  		bra.w	Obj64_BblMaker
00014282                            ; ===========================================================================
00014282                            
00014282                            Obj64_Bubble:				; XREF: Obj64_Main
00014282 1140 001C                  		move.b	d0,$1C(a0)
00014286 3168 0008 0030             		move.w	8(a0),$30(a0)
0001428C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00014292 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014298 1140 0026                  		move.b	d0,$26(a0)
0001429C                            
0001429C                            Obj64_Animate:				; XREF: Obj64_Index
0001429C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142A2 4EB9 0000 C138             		jsr	AnimateSprite
000142A8 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000142AE 6600                       		bne.s	Obj64_ChkWater
000142B0 117C 0001 002E             		move.b	#1,$2E(a0)
000142B6                            
000142B6                            Obj64_ChkWater:				; XREF: Obj64_Index
000142B6 3038 F646                  		move.w	($FFFFF646).w,d0
000142BA B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000142BE 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000142C0                            
000142C0                            Obj64_Burst:				; XREF: Obj64_Wobble
000142C0 117C 0006 0024             		move.b	#6,$24(a0)
000142C6 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000142CA 6000 0000                  		bra.w	Obj64_Display2
000142CE                            ; ===========================================================================
000142CE                            
000142CE                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000142CE 1028 0026                  		move.b	$26(a0),d0
000142D2 5228 0026                  		addq.b	#1,$26(a0)
000142D6 0240 007F                  		andi.w	#$7F,d0
000142DA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000142E0 1031 0000                  		move.b	(a1,d0.w),d0
000142E4 4880                       		ext.w	d0
000142E6 D068 0030                  		add.w	$30(a0),d0
000142EA 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000142EE 4A28 002E                  		tst.b	$2E(a0)
000142F2 6700                       		beq.s	Obj64_Display
000142F4 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000142F8 6700                       		beq.s	Obj64_Display	; if not, branch
000142FA                            
000142FA 6100 0000                  		bsr.w	StopDrowning	; cancel countdown music
000142FE 303C 00AD                  		move.w	#$AD,d0
00014302 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00014308 43F8 D000                  		lea	($FFFFD000).w,a1
0001430C 4269 0010                  		clr.w	$10(a1)
00014310 4269 0012                  		clr.w	$12(a1)
00014314 4269 0014                  		clr.w	$14(a1)
00014318 137C 0015 001C             		move.b	#$15,$1C(a1)
0001431E 337C 0023 003E             		move.w	#$23,$3E(a1)
00014324 137C 0000 003C             		move.b	#0,$3C(a1)
0001432A 08A9 0005 0022             		bclr	#5,$22(a1)
00014330 08A9 0004 0022             		bclr	#4,$22(a1)
00014336 0829 0002 0022             		btst	#2,$22(a1)
0001433C 6700 FF82                  		beq.w	Obj64_Burst
00014340 08A9 0002 0022             		bclr	#2,$22(a1)
00014346 137C 0013 0016             		move.b	#$13,$16(a1)
0001434C 137C 0009 0017             		move.b	#9,$17(a1)
00014352 5B69 000C                  		subq.w	#5,$C(a1)
00014356 6000 FF68                  		bra.w	Obj64_Burst
0001435A                            ; ===========================================================================
0001435A                            
0001435A                            Obj64_Display:				; XREF: Obj64_Wobble
0001435A 6100 AE10                  		bsr.w	SpeedToPos
0001435E 4A28 0001                  		tst.b	1(a0)
00014362 6A00                       		bpl.s	Obj64_Delete
00014364 4EFA AE20                  		jmp	DisplaySprite
00014368                            ; ===========================================================================
00014368                            
00014368                            Obj64_Delete:
00014368 4EFA AE58                  		jmp	DeleteObject
0001436C                            ; ===========================================================================
0001436C                            
0001436C                            Obj64_Display2:				; XREF: Obj64_Index
0001436C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014372 4EB9 0000 C138             		jsr	AnimateSprite
00014378 4A28 0001                  		tst.b	1(a0)
0001437C 6A00                       		bpl.s	Obj64_Delete2
0001437E 4EFA AE06                  		jmp	DisplaySprite
00014382                            ; ===========================================================================
00014382                            
00014382                            Obj64_Delete2:
00014382 4EFA AE3E                  		jmp	DeleteObject
00014386                            ; ===========================================================================
00014386                            
00014386                            Obj64_Delete3:				; XREF: Obj64_Index
00014386 6000 AE3A                  		bra.w	DeleteObject
0001438A                            ; ===========================================================================
0001438A                            
0001438A                            Obj64_BblMaker:				; XREF: Obj64_Index
0001438A 4A68 0036                  		tst.w	$36(a0)
0001438E 6600                       		bne.s	loc_12874
00014390 3038 F646                  		move.w	($FFFFF646).w,d0
00014394 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014398 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001439C 4A28 0001                  		tst.b	1(a0)
000143A0 6A00 0000                  		bpl.w	Obj64_ChkDel
000143A4 5368 0038                  		subq.w	#1,$38(a0)
000143A8 6A00 0000                  		bpl.w	loc_12914
000143AC 317C 0001 0036             		move.w	#1,$36(a0)
000143B2                            
000143B2                            loc_1283A:
000143B2 4EB9 0000 2B54             		jsr	(RandomNumber).l
000143B8 3200                       		move.w	d0,d1
000143BA 0240 0007                  		andi.w	#7,d0
000143BE 0C40 0006                  		cmpi.w	#6,d0
000143C2 64EE                       		bcc.s	loc_1283A
000143C4                            
000143C4 1140 0034                  		move.b	d0,$34(a0)
000143C8 0241 000C                  		andi.w	#$C,d1
000143CC 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000143D2 D2C1                       		adda.w	d1,a1
000143D4 2149 003C                  		move.l	a1,$3C(a0)
000143D8 5328 0032                  		subq.b	#1,$32(a0)
000143DC 6A00                       		bpl.s	loc_12872
000143DE 1168 0033 0032             		move.b	$33(a0),$32(a0)
000143E4 08E8 0007 0036             		bset	#7,$36(a0)
000143EA                            
000143EA                            loc_12872:
000143EA 6000                       		bra.s	loc_1287C
000143EC                            ; ===========================================================================
000143EC                            
000143EC                            loc_12874:				; XREF: Obj64_BblMaker
000143EC 5368 0038                  		subq.w	#1,$38(a0)
000143F0 6A00 0000                  		bpl.w	loc_12914
000143F4                            
000143F4                            loc_1287C:
000143F4 4EB9 0000 2B54             		jsr	(RandomNumber).l
000143FA 0240 001F                  		andi.w	#$1F,d0
000143FE 3140 0038                  		move.w	d0,$38(a0)
00014402 6100 B216                  		bsr.w	SingleObjLoad
00014406 6600                       		bne.s	loc_128F8
00014408 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001440C 3368 0008 0008             		move.w	8(a0),8(a1)
00014412 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014418 0240 000F                  		andi.w	#$F,d0
0001441C 5140                       		subq.w	#8,d0
0001441E D169 0008                  		add.w	d0,8(a1)
00014422 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014428 7000                       		moveq	#0,d0
0001442A 1028 0034                  		move.b	$34(a0),d0
0001442E 2468 003C                  		movea.l	$3C(a0),a2
00014432 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014438 0828 0007 0036             		btst	#7,$36(a0)
0001443E 6700                       		beq.s	loc_128F8
00014440 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014446 0240 0003                  		andi.w	#3,d0
0001444A 6600                       		bne.s	loc_128E4
0001444C 08E8 0006 0036             		bset	#6,$36(a0)
00014452 6600                       		bne.s	loc_128F8
00014454 137C 0002 0028             		move.b	#2,$28(a1)
0001445A                            
0001445A                            loc_128E4:
0001445A 4A28 0034                  		tst.b	$34(a0)
0001445E 6600                       		bne.s	loc_128F8
00014460 08E8 0006 0036             		bset	#6,$36(a0)
00014466 6600                       		bne.s	loc_128F8
00014468 137C 0002 0028             		move.b	#2,$28(a1)
0001446E                            
0001446E                            loc_128F8:
0001446E 5328 0034                  		subq.b	#1,$34(a0)
00014472 6A00                       		bpl.s	loc_12914
00014474 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001447A 0240 007F                  		andi.w	#$7F,d0
0001447E 0640 0080                  		addi.w	#$80,d0
00014482 D168 0038                  		add.w	d0,$38(a0)
00014486 4268 0036                  		clr.w	$36(a0)
0001448A                            
0001448A                            loc_12914:
0001448A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014490 4EB9 0000 C138             		jsr	AnimateSprite
00014496                            
00014496                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00014496 3028 0008                  		move.w	8(a0),d0
0001449A 0240 FF80                  		andi.w	#$FF80,d0
0001449E 3238 F700                  		move.w	($FFFFF700).w,d1
000144A2 0441 0080                  		subi.w	#$80,d1
000144A6 0241 FF80                  		andi.w	#$FF80,d1
000144AA 9041                       		sub.w	d1,d0
000144AC 0C40 0280                  		cmpi.w	#$280,d0
000144B0 6200 AD10                  		bhi.w	DeleteObject
000144B4 3038 F646                  		move.w	($FFFFF646).w,d0
000144B8 B068 000C                  		cmp.w	$C(a0),d0
000144BC 6500 ACC8                  		bcs.w	DisplaySprite
000144C0 4E75                       		rts	
000144C2                            ; ===========================================================================
000144C2                            ; bubble production sequence
000144C2                            
000144C2                            ; 0 = small bubble, 1 =	large bubble
000144C2                            
000144C2 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000144D4                            
000144D4                            ; ===========================================================================
000144D4                            
000144D4                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000144D4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000144D8 6B00                       		bmi.s	loc_12998
000144DA 43F8 D000                  		lea	($FFFFD000).w,a1
000144DE 3029 0008                  		move.w	8(a1),d0
000144E2 3228 0008                  		move.w	8(a0),d1
000144E6 0441 0010                  		subi.w	#$10,d1
000144EA B240                       		cmp.w	d0,d1
000144EC 6400                       		bcc.s	loc_12998
000144EE 0641 0020                  		addi.w	#$20,d1
000144F2 B240                       		cmp.w	d0,d1
000144F4 6500                       		bcs.s	loc_12998
000144F6 3029 000C                  		move.w	$C(a1),d0
000144FA 3228 000C                  		move.w	$C(a0),d1
000144FE B240                       		cmp.w	d0,d1
00014500 6400                       		bcc.s	loc_12998
00014502 0641 0010                  		addi.w	#$10,d1
00014506 B240                       		cmp.w	d0,d1
00014508 6500                       		bcs.s	loc_12998
0001450A 7001                       		moveq	#1,d0
0001450C 4E75                       		rts	
0001450E                            ; ===========================================================================
0001450E                            
0001450E                            loc_12998:
0001450E 7000                       		moveq	#0,d0
00014510 4E75                       		rts	
00014512                            ; ===========================================================================
00014512                            Ani_obj64:
00014512                            	include "_anim\obj64.asm"
00014512                            ; ---------------------------------------------------------------------------
00014512                            ; Animation script - bubbles (LZ)
00014512                            ; ---------------------------------------------------------------------------
00014512 0000                       		dc.w byte_129AA-Ani_obj64
00014514 0000                       		dc.w byte_129B0-Ani_obj64
00014516 0000                       		dc.w byte_129B6-Ani_obj64
00014518 0000                       		dc.w byte_129BE-Ani_obj64
0001451A 0000                       		dc.w byte_129BE-Ani_obj64
0001451C 0000                       		dc.w byte_129C0-Ani_obj64
0001451E 0000                       		dc.w byte_129C6-Ani_obj64
00014520 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014526 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001452C 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014534 04FC                       byte_129BE:	dc.b 4,	$FC
00014536 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001453C 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014542 00                         		even
00014542 00                         		even
00014542                            
00014542                            ; ---------------------------------------------------------------------------
00014542                            ; Sprite mappings - bubbles (LZ)
00014542                            ; ---------------------------------------------------------------------------
00014542                            Map_obj64:
00014542                            	include "_maps\obj64.asm"
00014542                            ; ---------------------------------------------------------------------------
00014542                            ; Sprite mappings - bubbles (LZ)
00014542                            ; ---------------------------------------------------------------------------
00014542 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00014546 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001454A 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001454E 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00014552 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00014556 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001455A 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001455E 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00014562 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00014566 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001456A 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001456E 0000                       		dc.w byte_12A9C-Map_obj64
00014570 01                         byte_129FA:	dc.b 1
00014571 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00014576 01                         byte_12A00:	dc.b 1
00014577 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001457C 01                         byte_12A06:	dc.b 1
0001457D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014582 01                         byte_12A0C:	dc.b 1
00014583 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014588 01                         byte_12A12:	dc.b 1
00014589 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001458E 01                         byte_12A18:	dc.b 1
0001458F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014594 01                         byte_12A1E:	dc.b 1
00014595 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001459A 04                         byte_12A24:	dc.b 4
0001459B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000145A0 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000145A5 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000145AA 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000145AF 04                         byte_12A39:	dc.b 4
000145B0 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000145B5 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000145BA 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000145BF 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000145C4 01                         byte_12A4E:	dc.b 1
000145C5 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000145CA 01                         byte_12A54:	dc.b 1
000145CB F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000145D0 01                         byte_12A5A:	dc.b 1
000145D1 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000145D6 01                         byte_12A60:	dc.b 1
000145D7 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000145DC 01                         byte_12A66:	dc.b 1
000145DD F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000145E2 01                         byte_12A6C:	dc.b 1
000145E3 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000145E8 01                         byte_12A72:	dc.b 1
000145E9 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000145EE 01                         byte_12A78:	dc.b 1
000145EF F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000145F4 01                         byte_12A7E:	dc.b 1
000145F5 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000145FA 01                         byte_12A84:	dc.b 1
000145FB F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014600 01                         byte_12A8A:	dc.b 1
00014601 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014606 01                         byte_12A90:	dc.b 1
00014607 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001460C 01                         byte_12A96:	dc.b 1
0001460D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014612 00                         byte_12A9C:	dc.b 0
00014614 00                         		even
00014614 00                         		even
00014614                            
00014614                            ; ===========================================================================
00014614                            ; ---------------------------------------------------------------------------
00014614                            ; Object 65 - waterfalls (LZ)
00014614                            ; ---------------------------------------------------------------------------
00014614                            
00014614                            Obj65:					; XREF: Obj_Index
00014614 7000                       		moveq	#0,d0
00014616 1028 0024                  		move.b	$24(a0),d0
0001461A 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001461E 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014622                            ; ===========================================================================
00014622 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014624 0000                       		dc.w Obj65_Animate-Obj65_Index
00014626 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014628 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001462A 0000                       		dc.w loc_12B36-Obj65_Index
0001462C                            ; ===========================================================================
0001462C                            
0001462C                            Obj65_Main:				; XREF: Obj65_Index
0001462C 5828 0024                  		addq.b	#4,$24(a0)
00014630 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014638 317C 4259 0002             		move.w	#$4259,2(a0)
0001463E 0028 0004 0001             		ori.b	#4,1(a0)
00014644 117C 0018 0019             		move.b	#$18,$19(a0)
0001464A 117C 0001 0018             		move.b	#1,$18(a0)
00014650 1028 0028                  		move.b	$28(a0),d0	; get object type
00014654 6A00                       		bpl.s	loc_12AE6
00014656 08E8 0007 0002             		bset	#7,2(a0)
0001465C                            
0001465C                            loc_12AE6:
0001465C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00014660 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00014664 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014668 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001466A 4228 0018                  		clr.b	$18(a0)
0001466E 5528 0024                  		subq.b	#2,$24(a0)
00014672 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00014678 6700                       		beq.s	loc_12B0A	; if not, branch
0001467A 117C 0006 0024             		move.b	#6,$24(a0)
00014680                            
00014680                            loc_12B0A:
00014680 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00014686 6700                       		beq.s	Obj65_Animate	; if not, branch
00014688 117C 0008 0024             		move.b	#8,$24(a0)
0001468E                            
0001468E                            Obj65_Animate:				; XREF: Obj65_Index
0001468E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00014694 4EB9 0000 C138             		jsr	AnimateSprite
0001469A                            
0001469A                            Obj65_ChkDel:				; XREF: Obj65_Index
0001469A 6000 CBA0                  		bra.w	MarkObjGone
0001469E                            ; ===========================================================================
0001469E                            
0001469E                            Obj65_FixHeight:			; XREF: Obj65_Index
0001469E 3038 F646                  		move.w	($FFFFF646).w,d0
000146A2 0440 0010                  		subi.w	#$10,d0
000146A6 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000146AA 60E2                       		bra.s	Obj65_Animate
000146AC                            ; ===========================================================================
000146AC                            
000146AC                            loc_12B36:				; XREF: Obj65_Index
000146AC 08A8 0007 0002             		bclr	#7,2(a0)
000146B2 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000146B8 6600                       		bne.s	Obj65_Animate2
000146BA 08E8 0007 0002             		bset	#7,2(a0)
000146C0                            
000146C0                            Obj65_Animate2:
000146C0 60CC                       		bra.s	Obj65_Animate
000146C2                            ; ===========================================================================
000146C2                            Ani_obj65:
000146C2                            	include "_anim\obj65.asm"
000146C2                            ; ---------------------------------------------------------------------------
000146C2                            ; Animation script - waterfall (LZ)
000146C2                            ; ---------------------------------------------------------------------------
000146C2 0000                       		dc.w byte_12B4E-Ani_obj65
000146C4 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000146CA 00                         		even
000146CA 00                         		even
000146CA                            
000146CA                            ; ---------------------------------------------------------------------------
000146CA                            ; Sprite mappings - waterfalls (LZ)
000146CA                            ; ---------------------------------------------------------------------------
000146CA                            Map_obj65:
000146CA                            	include "_maps\obj65.asm"
000146CA                            ; ---------------------------------------------------------------------------
000146CA                            ; Sprite mappings - waterfalls (LZ)
000146CA                            ; ---------------------------------------------------------------------------
000146CA 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000146CE 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000146D2 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000146D6 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000146DA 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000146DE 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000146E2 01                         byte_12B6C:	dc.b 1
000146E3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000146E8 02                         byte_12B72:	dc.b 2
000146E9 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000146EE 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000146F3 02                         byte_12B7D:	dc.b 2
000146F4 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000146F9 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000146FE 01                         byte_12B88:	dc.b 1
000146FF F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014704 02                         byte_12B8E:	dc.b 2
00014705 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001470A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001470F 01                         byte_12B99:	dc.b 1
00014710 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014715 01                         byte_12B9F:	dc.b 1
00014716 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001471B 01                         byte_12BA5:	dc.b 1
0001471C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014721 02                         byte_12BAB:	dc.b 2
00014722 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014727 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001472C 02                         byte_12BB6:	dc.b 2
0001472D F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014732 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014737 02                         byte_12BC1:	dc.b 2
00014738 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001473D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014742 02                         byte_12BCC:	dc.b 2
00014743 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014748 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001474E 00                         		even
0001474E 00                         		even
0001474E                            
0001474E                            SpinDash_dust:
0001474E                            	include "_inc\spindash_dust.asm"
0001474E                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
0001474E 7000                       		moveq	#0,d0
00014750 1028 0024                  		move.b	$24(a0),d0
00014754 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014758 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001475C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001475C 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
0001475E 0000                       		dc loc_1DD90-off_1DD2E; 1
00014760 0000                       		dc loc_1DE46-off_1DD2E; 2
00014762 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014764                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014764                            
00014764                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014764 5428 0024                  		addq.b	#2,$24(a0)
00014768 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014770 0028 0004 0001             		or.b	#4,1(a0)
00014776 117C 0001 0018             		move.b	#1,$18(a0)
0001477C 117C 0010 0019             		move.b	#$10,$19(a0)
00014782 317C 07A0 0002             		move	#$7A0,2(a0)
00014788 317C D000 003E             		move	#-$3000,$3E(a0)
0001478E 317C F400 003C             		move	#$F400,$3C(a0)
00014794 B0FC D1C0                  		cmp	#-$2E40,a0
00014798 6700                       		beq.s	loc_1DD8C
0001479A 117C 0001 0034             		move.b	#1,$34(a0)
000147A0                            ;		cmp	#2,($FFFFFF70).w
000147A0                            ;		beq.s	loc_1DD8C
000147A0                            ;		move	#$48C,2(a0)
000147A0                            ;		move	#-$4FC0,$3E(a0)
000147A0                            ;		move	#-$6E80,$3C(a0)
000147A0                            
000147A0                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000147A0                            ;		bsr.w	sub_16D6E
000147A0                            
000147A0                            loc_1DD90:				; DATA XREF: h+6DBA?o
000147A0 3468 003E                  		movea.w	$3E(a0),a2
000147A4 7000                       		moveq	#0,d0
000147A6 1028 001C                  		move.b	$1C(a0),d0
000147AA D040                       		add	d0,d0
000147AC 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000147B0 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000147B4                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147B4 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000147B6 0000                       		dc loc_1DDAC-off_1DDA4; 1
000147B8 0000                       		dc loc_1DDCC-off_1DDA4; 2
000147BA 0000                       		dc loc_1DE20-off_1DDA4; 3
000147BC                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147BC                            
000147BC                            loc_1DDAC:				; DATA XREF: h+6E30?o
000147BC 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000147C2 4A28 001D                  		tst.b	$1D(a0)
000147C6 6600                       		bne.s	loc_1DE28
000147C8 316A 0008 0008             		move	8(a2),8(a0)
000147CE 117C 0000 0022             		move.b	#0,$22(a0)
000147D4 0268 7FFF 0002             		and	#$7FFF,2(a0)
000147DA 6000                       		bra.s	loc_1DE28
000147DC                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147DC                            
000147DC                            loc_1DDCC:				; DATA XREF: h+6E30?o
000147DC                            ;		cmp.b	#$C,$28(a2)
000147DC                            ;		bcs.s	loc_1DE3E
000147DC 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000147E2 6400                       		bcc.s	loc_1DE3E
000147E4 4A2A 0039                  		tst.b	$39(a2)
000147E8 6700                       		beq.s	loc_1DE3E
000147EA 316A 0008 0008             		move	8(a2),8(a0)
000147F0 316A 000C 000C             		move	$C(a2),$C(a0)
000147F6 116A 0022 0022             		move.b	$22(a2),$22(a0)
000147FC 0228 0001 0022             		and.b	#1,$22(a0)
00014802 4A28 0034                  		tst.b	$34(a0)
00014806 6700                       		beq.s	loc_1DE06
00014808 5968 000C                  		sub	#4,$C(a0)
0001480C                            
0001480C                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001480C 4A28 001D                  		tst.b	$1D(a0)
00014810 6600                       		bne.s	loc_1DE28
00014812 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014818 4A6A 0002                  		tst	2(a2)
0001481C 6A00                       		bpl.s	loc_1DE28
0001481E 0068 8000 0002             		or	#-$8000,2(a0)
00014824                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014824                            
00014824                            loc_1DE20:				; DATA XREF: h+6E30?o
00014824                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014824 43F9 0000 0000             		lea	(off_1DF38).l,a1
0001482A 4EB9 0000 C138             		jsr	AnimateSprite
00014830 6100 0000                  		bsr.w	loc_1DEE4
00014834 4EFA A950                  		jmp	DisplaySprite
00014838                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014838                            
00014838                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014838 117C 0000 001C             		move.b	#0,$1C(a0)
0001483E 4E75                       		rts	
00014840                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014840                            
00014840                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014840 6000 A980                  		bra.w	DeleteObject
00014844                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014844                            
00014844                            
00014844                            
00014844                            loc_1DE4A:
00014844 3468 003E                  	movea.w	$3E(a0),a2
00014848 7210                       	moveq	#$10,d1
0001484A 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014850 6700                       	beq.s	loc_1DE64
00014852 7206                       	moveq	#$6,d1
00014854 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
0001485A 6700                       	beq.s	loc_1DE64
0001485C 117C 0002 0024             	move.b	#2,$24(a0)
00014862 117C 0000 0032             	move.b	#0,$32(a0)
00014868 4E75                       	rts
0001486A                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001486A                            
0001486A                            loc_1DE64:				; CODE XREF: h+6EE0?j
0001486A 5328 0032                  		subq.b	#1,$32(a0)
0001486E 6A00                       		bpl.s	loc_1DEE0
00014870 117C 0003 0032             		move.b	#3,$32(a0)
00014876 4EBA ADA2                  		jsr	SingleObjLoad
0001487A 6600                       		bne.s	loc_1DEE0
0001487C 1290                       		move.b	0(a0),0(a1)
0001487E 336A 0008 0008             		move	8(a2),8(a1)
00014884 336A 000C 000C             		move	$C(a2),$C(a1)
0001488A 4A28 0034                  		tst.b	$34(a0)
0001488E 6700                       		beq.s	loc_1DE9A
00014890 5941                       		sub	#4,d1
00014892                            
00014892                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014892 D369 000C                  		add	d1,$C(a1)
00014896 137C 0000 0022             		move.b	#0,$22(a1)
0001489C 137C 0003 001C             		move.b	#3,$1C(a1)
000148A2 5429 0024                  		addq.b	#2,$24(a1)
000148A6 2368 0004 0004             		move.l	4(a0),4(a1)
000148AC 1368 0001 0001             		move.b	1(a0),1(a1)
000148B2 137C 0001 0018             		move.b	#1,$18(a1)
000148B8 137C 0004 0019             		move.b	#4,$19(a1)
000148BE 3368 0002 0002             		move	2(a0),2(a1)
000148C4 3368 003E 003E             		move	$3E(a0),$3E(a1)
000148CA 0269 7FFF 0002             		and	#$7FFF,2(a1)
000148D0 4A6A 0002                  		tst	2(a2)
000148D4 6A00                       		bpl.s	loc_1DEE0
000148D6 0069 8000 0002             		or	#-$8000,2(a1)
000148DC                            
000148DC                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000148DC 6100                       		bsr.s	loc_1DEE4
000148DE 4E75                       		rts	
000148E0                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000148E0                            
000148E0                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000148E0 7000                       		moveq	#0,d0
000148E2 1028 001A                  		move.b	$1A(a0),d0
000148E6 B028 0030                  		cmp.b	$30(a0),d0
000148EA 6700 0000                  		beq.w	locret_1DF36
000148EE 1140 0030                  		move.b	d0,$30(a0)
000148F2 45F9 0000 0000             		lea	(off_1E074).l,a2
000148F8 D040                       		add	d0,d0
000148FA D4F2 0000                  		add	(a2,d0.w),a2
000148FE 3A1A                       		move	(a2)+,d5
00014900 5345                       		subq	#1,d5
00014902 6B00 0000                  		bmi.w	locret_1DF36
00014906 3828 003C                  		move $3C(a0),d4
0001490A                            
0001490A                            loc_1DF0A:				; CODE XREF: h+6FBE?j
0001490A 7200                       		moveq	#0,d1
0001490C 321A                       		move	(a2)+,d1
0001490E 3601                       		move	d1,d3
00014910 E04B                       		lsr.w	#8,d3
00014912 0243 00F0                  		and	#$F0,d3	; 'Ã°'
00014916 0643 0010                  		add	#$10,d3
0001491A 0241 0FFF                  		and	#$FFF,d1
0001491E EB89                       		lsl.l	#5,d1
00014920 0681 0000 0000             		add.l	#Art_Dust,d1
00014926 3404                       		move	d4,d2
00014928 D843                       		add	d3,d4
0001492A D843                       		add	d3,d4
0001492C 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00014932 51CD FFD6                  		dbf	d5,loc_1DF0A
00014936 4E75                           rts
00014938                            
00014938                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014938 4E75                       		rts	
0001493A                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001493A 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001493C 0000                       		dc byte_1DF43-off_1DF38; 1
0001493E 0000                       		dc byte_1DF4F-off_1DF38; 2
00014940 0000                       		dc byte_1DF58-off_1DF38; 3
00014942 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014945 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014951 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
0001495A 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014960                            ; -------------------------------------------------------------------------------
00014960                            ; Unknown Sprite Mappings
00014960                            ; -------------------------------------------------------------------------------
00014960                            MapUnc_1DF5E:
00014960 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014962 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014964 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014966 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014968 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001496A 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001496C 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001496E 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014970 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014972 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014974 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014976 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014978 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001497A 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001497C 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001497E 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014980 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014982 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014984 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014986 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014988 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001498A 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001498C 00                         word_1DF8A:	dc.b 0
0001498D 01                         word_1DF8C:	dc.b 1
0001498E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014993 01                         word_1DF96:	dc.b 1
00014994 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014999 01                         word_1DFA0:	dc.b 1
0001499A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001499F 01                         word_1DFAA:	dc.b 1
000149A0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000149A5 01                         word_1DFB4:	dc.b 1
000149A6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000149AB 01                         word_1DFBE:	dc.b 1
000149AC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000149B1 01                         word_1DFC8:	dc.b 1
000149B2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000149B7 01                         word_1DFD2:	dc.b 1
000149B8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000149BD 01                         word_1DFDC:	dc.b 1
000149BE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000149C3 01                         word_1DFE6:	dc.b 1
000149C4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000149C9 01                         word_1DFF0:	dc.b 1
000149CA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000149CF 01                         word_1DFFA:	dc.b 1
000149D0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000149D5 02                         word_1E004:	dc.b 2
000149D6 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000149DB 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000149E0 02                         word_1E016:	dc.b 2
000149E1 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000149E6 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000149EB 02                         word_1E028:	dc.b 2
000149EC F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000149F1 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000149F6 02                         word_1E03A:	dc.b 2
000149F7 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000149FC 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014A01 01                         word_1E04C:	dc.b 1
00014A02 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014A07 01                         word_1E056:	dc.b 1
00014A08 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014A0D 01                         word_1E060:	dc.b 1
00014A0E F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014A13 01                         word_1E06A:	dc.b 1
00014A14 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014A19 00                         	dc.b 0
00014A1A 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014A1C 0000                       	dc word_1E0A2-off_1E074; 1
00014A1E 0000                       	dc word_1E0A6-off_1E074; 2
00014A20 0000                       	dc word_1E0AA-off_1E074; 3
00014A22 0000                       	dc word_1E0AE-off_1E074; 4
00014A24 0000                       	dc word_1E0B2-off_1E074; 5
00014A26 0000                       	dc word_1E0B6-off_1E074; 6
00014A28 0000                       	dc word_1E0BA-off_1E074; 7
00014A2A 0000                       	dc word_1E0BE-off_1E074; 8
00014A2C 0000                       	dc word_1E0C2-off_1E074; 9
00014A2E 0000                       	dc word_1E0C6-off_1E074; 10
00014A30 0000                       	dc word_1E0CA-off_1E074; 11
00014A32 0000                       	dc word_1E0CE-off_1E074; 12
00014A34 0000                       	dc word_1E0D2-off_1E074; 13
00014A36 0000                       	dc word_1E0D8-off_1E074; 14
00014A38 0000                       	dc word_1E0DE-off_1E074; 15
00014A3A 0000                       	dc word_1E0E4-off_1E074; 16
00014A3C 0000                       	dc word_1E0EA-off_1E074; 17
00014A3E 0000                       	dc word_1E0EA-off_1E074; 18
00014A40 0000                       	dc word_1E0EA-off_1E074; 19
00014A42 0000                       	dc word_1E0EA-off_1E074; 20
00014A44 0000                       	dc word_1E0EC-off_1E074; 21
00014A46 0000                       word_1E0A0:	dc 0
00014A48 0001                       word_1E0A2:	dc 1
00014A4A 7000                       	dc $7000
00014A4C 0001                       word_1E0A6:	dc 1
00014A4E F008                       	dc $F008
00014A50 0001                       word_1E0AA:	dc 1
00014A52 F018                       	dc $F018
00014A54 0001                       word_1E0AE:	dc 1
00014A56 F028                       	dc $F028
00014A58 0001                       word_1E0B2:	dc 1
00014A5A F038                       	dc $F038
00014A5C 0001                       word_1E0B6:	dc 1
00014A5E F048                       	dc $F048
00014A60 0001                       word_1E0BA:	dc 1
00014A62 7058                       	dc $7058
00014A64 0001                       word_1E0BE:	dc 1
00014A66 7060                       	dc $7060
00014A68 0001                       word_1E0C2:	dc 1
00014A6A 7068                       	dc $7068
00014A6C 0001                       word_1E0C6:	dc 1
00014A6E 7070                       	dc $7070
00014A70 0001                       word_1E0CA:	dc 1
00014A72 7078                       	dc $7078
00014A74 0001                       word_1E0CE:	dc 1
00014A76 7080                       	dc $7080
00014A78 0002                       word_1E0D2:	dc 2
00014A7A 1088                       	dc $1088
00014A7C 708A                       	dc $708A
00014A7E 0002                       word_1E0D8:	dc 2
00014A80 3092                       	dc $3092
00014A82 7096                       	dc $7096
00014A84 0002                       word_1E0DE:	dc 2
00014A86 509E                       	dc $509E
00014A88 70A4                       	dc $70A4
00014A8A 0002                       word_1E0E4:	dc 2
00014A8C 50AC                       	dc $50AC
00014A8E 70B2                       	dc $70B2
00014A90 0000                       word_1E0EA:	dc 0
00014A92 0001                       word_1E0EC:	dc 1
00014A94 F0BA                       	dc $F0BA
00014A96                            	even
00014A96                            	even
00014A96                            
00014A96                            ; ===========================================================================
00014A96                            ; ---------------------------------------------------------------------------
00014A96                            ; Object 01 - Sonic
00014A96                            ; ---------------------------------------------------------------------------
00014A96                            ; ===========================================================================
00014A96 =00000039                  crawling								= $39			; CRAWLING IN MY SKIN!
00014A96 =0000003A                  biting									= $3A
00014A96                            ; ===========================================================================
00014A96                            Obj01_PhysicsTable:
00014A96 0600 000C 0080             		dc.w $600,   $C,  $80			; Normal
00014A9C 0300 0006 0040             		dc.w $300,    6,  $40			; Underwater
00014AA2 0C00 0018 0080             		dc.w $C00,  $18,  $80			; Speed shoes
00014AA8 0600 000C 0080             		dc.w $600,   $C,  $80			; Speed shoes underwater
00014AAE 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling
00014AB4 0060 000C 0012             		dc.w  $60,   $C,  $12			; Crawling underwater
00014ABA 0180 0030 0048             		dc.w $180,  $30,  $48			; Crawling with speed shoes
00014AC0 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling with speed shoes underwater
00014AC6                            ; ===========================================================================
00014AC6                            ; Get physics for Sonic
00014AC6                            ; ===========================================================================
00014AC6                            Obj01_GetPhysics:
00014AC6 7000                       		moveq	#0,d0
00014AC8 1028 0039                  		move.b	crawling(a0),d0
00014ACC E300                       		asl.b	#1,d0
00014ACE 8038 FE2E                  		or.b	($FFFFFE2E).w,d0
00014AD2 E300                       		asl.b	#1,d0
00014AD4 0828 0006 0022             		btst	#6,$22(a0)
00014ADA 6700                       		beq.s	@not_underwater
00014ADC 0000 0001                  		or.b	#1,d0
00014AE0                            		
00014AE0                            @not_underwater:
00014AE0 C0FC 0006                  		mulu.w	#6,d0
00014AE4 43FB 00B0                  		lea	Obj01_PhysicsTable(pc,d0.w),a1
00014AE8 31D9 F760                  		move.w	(a1)+,($FFFFF760).w
00014AEC 31D9 F762                  		move.w	(a1)+,($FFFFF762).w
00014AF0 31D1 F764                  		move.w	(a1),($FFFFF764).w
00014AF4 4E75                       		rts
00014AF6                            ; ===========================================================================
00014AF6                            ; Apply speed cap for Sonic
00014AF6                            ; ===========================================================================
00014AF6                            Obj01_ApplySpeedCap:
00014AF6 3228 0014                  		move.w	$14(a0),d1
00014AFA 4A41                       		tst.w	d1
00014AFC 6A00                       		bpl.s	@not_negative
00014AFE 4441                       		neg.w	d1
00014B00                            		
00014B00                            @not_negative:
00014B00 3438 F760                  		move.w	($FFFFF760).w,d2
00014B04 B242                       		cmp.w	d2,d1
00014B06 6F00                       		ble.s	@no_cap
00014B08 9278 F762                  		sub.w	($FFFFF762).w,d1
00014B0C 4A68 0014                  		tst.w	$14(a0)
00014B10 6A00                       		bpl.s	@not_negative2
00014B12 4441                       		neg.w	d1
00014B14                            		
00014B14                            @not_negative2:
00014B14 3141 0014                  		move.w	d1,$14(a0)
00014B18                            		
00014B18                            @no_cap:
00014B18 4E75                       		rts
00014B1A                            ; ===========================================================================
00014B1A                            
00014B1A                            Obj01:					; XREF: Obj_Index
00014B1A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014B1E 6700                       		beq.s	Obj01_Normal	; if not, branch
00014B20 4EF9 0000 0000             		jmp	DebugMode
00014B26                            ; ===========================================================================
00014B26                            
00014B26                            Obj01_Normal:
00014B26 7000                       		moveq	#0,d0
00014B28 1028 0024                  		move.b	$24(a0),d0
00014B2C 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014B30 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00014B34                            ; ===========================================================================
00014B34 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00014B36 0000                       		dc.w Obj01_Control-Obj01_Index
00014B38 0000                       		dc.w Obj01_Hurt-Obj01_Index
00014B3A 0000                       		dc.w Obj01_Death-Obj01_Index
00014B3C 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014B3E 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014B40                            ; ===========================================================================
00014B40                            
00014B40                            Obj01_Main:				; XREF: Obj01_Index
00014B40 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
00014B46 5428 0024                  		addq.b	#2,$24(a0)
00014B4A 117C 0013 0016             		move.b	#$13,$16(a0)
00014B50 117C 0009 0017             		move.b	#9,$17(a0)
00014B56 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014B5E 317C 0780 0002             		move.w	#$780,2(a0)
00014B64 117C 0002 0018             		move.b	#2,$18(a0)
00014B6A 117C 0018 0019             		move.b	#$18,$19(a0)
00014B70 117C 0004 0001             		move.b	#4,1(a0)
00014B76 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014B7C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00014B82 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00014B88 11FC 0005 D1C0             		move.b	#5,($FFFFD1C0).w
00014B8E                            
00014B8E                            Obj01_Control:				; XREF: Obj01_Index
00014B8E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014B92 6700                       		beq.s	loc_12C58	; if not, branch
00014B94 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00014B9A 6700                       		beq.s	loc_12C58	; if not, branch
00014B9C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014BA2 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014BA6 4E75                       		rts	
00014BA8                            ; ===========================================================================
00014BA8                            
00014BA8                            loc_12C58:
00014BA8 6100 FF1C                  		bsr.w	Obj01_GetPhysics
00014BAC 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00014BB0 6600                       		bne.s	loc_12C64	; if yes, branch
00014BB2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014BB8                            
00014BB8                            loc_12C64:
00014BB8 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00014BBE 6600                       		bne.s	loc_12C7E	; if yes, branch
00014BC0 6100 0000                  		bsr.w	Obj01_DoModes
00014BC4                            
00014BC4                            loc_12C7E:
00014BC4 4A28 0039                  		tst.b	crawling(a0)
00014BC8 6600                       		bne.s	@no_bite
00014BCA 4A28 003A                  		tst.b	biting(a0)
00014BCE 6600                       		bne.s	@chk_bite
00014BD0 0838 0006 F602             		btst	#6,($FFFFF602).w
00014BD6 6700                       		beq.s	@no_bite
00014BD8 4A38 FFBD                  		tst.b	($FFFFFFBD).w
00014BDC 6600                       		bne.s	@chk_bite
00014BDE 08A8 0005 0022             		bclr	#5,$22(a0)
00014BE4 117C 000D 003A             		move.b	#13,biting(a0)
00014BEA 11FC 0001 FFBD             		move.b	#1,($FFFFFFBD).w
00014BF0                            
00014BF0                            @chk_bite:
00014BF0 4A28 003A                  		tst.b	biting(a0)
00014BF4 6700                       		beq.s	@no_dec
00014BF6 117C 0009 001C             		move.b	#9,$1C(a0) ; Use "biting" animation
00014BFC 5328 003A                  		subq.b	#1,biting(a0)
00014C00 6000                       		bra.s	@no_dec
00014C02                            		
00014C02                            @no_bite:
00014C02 11FC 0000 FFBD             		move.b	#0,($FFFFFFBD).w
00014C08 117C 0000 003A             		move.b	#0,biting(a0)
00014C0E                            		
00014C0E                            @no_dec:
00014C0E 6100                       		bsr.s	Sonic_Display
00014C10 6100 0000                  		bsr.w	Sonic_RecordPos
00014C14 6100 0000                  		bsr.w	Sonic_Water
00014C18 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014C1E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014C24 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014C28 6700                       		beq.s	loc_12CA6
00014C2A 4A28 001C                  		tst.b	$1C(a0)
00014C2E 6600                       		bne.s	loc_12CA6
00014C30 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014C36                            
00014C36                            loc_12CA6:
00014C36 6100 0000                  		bsr.w	Sonic_Animate
00014C3A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014C3E 6B00                       		bmi.s	loc_12CB6
00014C40 4EB9 0000 0000             		jsr	TouchResponse
00014C46                            
00014C46                            loc_12CB6:
00014C46 6000 0000                  		bra.w	LoadSonicDynPLC
00014C4A                            ; ===========================================================================
00014C4A                            
00014C4A                            Obj01_DoModes:
00014C4A 7000                       		moveq	#0,d0
00014C4C 1028 0022                  		move.b	$22(a0),d0
00014C50 0240 0006                  		andi.w	#6,d0
00014C54 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014C58 4EFB 1000                  		jmp	Obj01_Modes(pc,d1.w)
00014C5C                            ; ===========================================================================
00014C5C                            
00014C5C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014C5E 0000                       		dc.w Obj01_MdAir-Obj01_Modes
00014C60 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014C62 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014C64                            ; ===========================================================================
00014C64                            
00014C64                            Sonic_Display:				; XREF: loc_12C7E
00014C64 3028 0030                  		move.w	$30(a0),d0
00014C68 6700                       		beq.s	Obj01_Display
00014C6A 5368 0030                  		subq.w	#1,$30(a0)
00014C6E E648                       		lsr.w	#3,d0
00014C70 6400                       		bcc.s	Obj01_ChkInvin
00014C72                            
00014C72                            Obj01_Display:
00014C72 4EBA A512                  		jsr	DisplaySprite
00014C76                            
00014C76                            Obj01_ChkInvin:
00014C76 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014C7A 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00014C7C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014C80 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014C82 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014C86 6600                       		bne.b	Obj01_ChkShoes
00014C88 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014C8E                            
00014C8E                            Obj01_ChkShoes:
00014C8E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00014C92 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00014C94 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014C98 6700                       		beq.s	Obj01_ExitChk
00014C9A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014C9E 6600                       		bne.s	Obj01_ExitChk
00014CA0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014CA6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014CAC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00014CB2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014CB8                            ; ===========================================================================
00014CB8                            
00014CB8                            Obj01_ExitChk:
00014CB8 4E75                       		rts
00014CBA                            
00014CBA                            ; ---------------------------------------------------------------------------
00014CBA                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014CBA                            ; ---------------------------------------------------------------------------
00014CBA                            
00014CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CBA                            
00014CBA                            
00014CBA                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014CBA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014CBE 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014CC2 43F1 0000                  		lea	(a1,d0.w),a1
00014CC6 32E8 0008                  		move.w	8(a0),(a1)+
00014CCA 32E8 000C                  		move.w	$C(a0),(a1)+
00014CCE 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014CD2 4E75                       		rts	
00014CD4                            ; End of function Sonic_RecordPos
00014CD4                            
00014CD4                            ; ---------------------------------------------------------------------------
00014CD4                            ; Subroutine for Sonic when he's underwater
00014CD4                            ; ---------------------------------------------------------------------------
00014CD4                            
00014CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CD4                            
00014CD4                            
00014CD4                            Sonic_Water:				; XREF: loc_12C7E
00014CD4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014CDA 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014CDC                            
00014CDC                            locret_12D80:
00014CDC 4E75                       		rts	
00014CDE                            ; ===========================================================================
00014CDE                            
00014CDE                            Obj01_InWater:
00014CDE 3038 F646                  		move.w	($FFFFF646).w,d0
00014CE2 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014CE6 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014CE8 08E8 0006 0022             		bset	#6,$22(a0)
00014CEE 66EC                       		bne.s	locret_12D80
00014CF0 6100 0000                  		bsr.w	StopDrowning
00014CF4 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014CFA 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014D00 E0E8 0010                  		asr	$10(a0)
00014D04 E0E8 0012                  		asr	$12(a0)
00014D08 E0E8 0012                  		asr	$12(a0)
00014D0C 67CE                       		beq.s	locret_12D80
00014D0E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014D14 303C 00AA                  		move.w	#$AA,d0
00014D18 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014D1E                            ; ===========================================================================
00014D1E                            
00014D1E                            Obj01_OutWater:
00014D1E 08A8 0006 0022             		bclr	#6,$22(a0)
00014D24 67B6                       		beq.s	locret_12D80
00014D26 6100 0000                  		bsr.w	StopDrowning
00014D2A E1E8 0012                  		asl	$12(a0)
00014D2E 6700 FFAC                  		beq.w	locret_12D80
00014D32 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014D38 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014D3E 6E00                       		bgt.s	loc_12E0E
00014D40 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014D46                            
00014D46                            loc_12E0E:
00014D46 303C 00AA                  		move.w	#$AA,d0
00014D4A 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014D50                            ; End of function Sonic_Water
00014D50                            
00014D50                            ; ===========================================================================
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            ; Modes	for controlling	Sonic
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            
00014D50                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014D50 6100 0000                  		bsr.w	Sonic_Jump
00014D54 4A28 0039                  		tst.b	crawling(a0)
00014D58 6600                       		bne.s	@is_crawling
00014D5A 6100 0000                  		bsr.w	Sonic_SlopeResist
00014D5E                            		
00014D5E                            @is_crawling:
00014D5E 6100 0000                  		bsr.w	Sonic_Move
00014D62 6100 0000                  		bsr.w	Sonic_LevelBound
00014D66 4EBA A404                  		jsr	SpeedToPos
00014D6A 6100 0000                  		bsr.w	Sonic_AnglePos
00014D6E 4A28 0039                  		tst.b	crawling(a0)
00014D72 6600                       		bne.s	@is_crawling2
00014D74 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014D78                            		
00014D78                            @is_crawling2:
00014D78 4A68 003E                  		tst.w	$3E(a0)
00014D7C 6700                       		beq.s	@no_movelock
00014D7E 5368 003E                  		subq.w	#1,$3E(a0)
00014D82                            		
00014D82                            @no_movelock:
00014D82 103C 0000                  		move.b	#0,d0
00014D86 0838 0001 F602             		btst	#1,($FFFFF602).w
00014D8C 6700                       		beq.s	@not_crawling
00014D8E 6100 FD66                  		bsr.w	Obj01_ApplySpeedCap
00014D92 103C 0001                  		move.b	#1,d0
00014D96                            		
00014D96                            @not_crawling:
00014D96 1140 0039                  		move.b	d0,crawling(a0)
00014D9A 4E75                       		rts	
00014D9C                            ; ===========================================================================
00014D9C                            
00014D9C                            Obj01_MdAir:				; XREF: Obj01_Modes
00014D9C 117C 0000 0039             		move.b	#0,crawling(a0)
00014DA2 6100 0000                  		bsr.w	Sonic_JumpHeight
00014DA6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014DAA 6100 0000                  		bsr.w	Sonic_LevelBound
00014DAE 4EBA A39C                  		jsr	ObjectFall
00014DB2 0828 0006 0022             		btst	#6,$22(a0)
00014DB8 6700                       		beq.s	loc_12E5C
00014DBA 0468 0028 0012             		subi.w	#$28,$12(a0)
00014DC0                            
00014DC0                            loc_12E5C:
00014DC0 6100 0000                  		bsr.w	Sonic_JumpAngle
00014DC4 6100 0000                  		bsr.w	Sonic_Floor
00014DC8 4E75                       		rts	
00014DCA                            ; ===========================================================================
00014DCA                            
00014DCA                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014DCA 4E75                       		rts					; Nothing to see here
00014DCC                            ; ===========================================================================
00014DCC                            
00014DCC                            Obj01_MdJump:				; XREF: Obj01_Modes
00014DCC 117C 0000 0039             		move.b	#0,crawling(a0)
00014DD2 6100 0000                  		bsr.w	Sonic_JumpHeight
00014DD6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014DDA 6100 0000                  		bsr.w	Sonic_LevelBound
00014DDE 6100 0000                  		bsr.w 	Sonic_JumpAnimate
00014DE2 4EBA A368                  		jsr	ObjectFall
00014DE6 0828 0006 0022             		btst	#6,$22(a0)
00014DEC 6700                       		beq.s	loc_12EA6
00014DEE 0468 0028 0012             		subi.w	#$28,$12(a0)
00014DF4                            
00014DF4                            loc_12EA6:
00014DF4 6100 0000                  		bsr.w	Sonic_JumpAngle
00014DF8 6100 0000                  		bsr.w	Sonic_Floor
00014DFC 4E75                       		rts	
00014DFE                            ; ---------------------------------------------------------------------------
00014DFE                            ; Subroutine to	make Sonic walk/run
00014DFE                            ; ---------------------------------------------------------------------------
00014DFE                            
00014DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DFE                            
00014DFE                            
00014DFE                            Sonic_Move:				; XREF: Obj01_MdNormal
00014DFE 3C38 F760                  		move.w	($FFFFF760).w,d6
00014E02 3A38 F762                  		move.w	($FFFFF762).w,d5
00014E06 3838 F764                  		move.w	($FFFFF764).w,d4
00014E0A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014E0E 6600 0000                  		bne.w	loc_12FEE
00014E12 4A68 003E                  		tst.w	$3E(a0)
00014E16 6600 0000                  		bne.w	Obj01_ResetScr
00014E1A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014E20 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014E22 6100 0000                  		bsr.w	Sonic_MoveLeft
00014E26                            
00014E26                            Obj01_NotLeft:
00014E26 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014E2C 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014E2E 6100 0000                  		bsr.w	Sonic_MoveRight
00014E32                            
00014E32                            Obj01_NotRight:
00014E32 1028 0026                  		move.b	$26(a0),d0
00014E36 0600 0020                  		addi.b	#$20,d0
00014E3A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014E3E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014E42 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014E46 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014E4A 08A8 0005 0022             		bclr	#5,$22(a0)
00014E50 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014E56 0828 0003 0022             		btst	#3,$22(a0)
00014E5C 6700                       		beq.s	Sonic_Balance
00014E5E 7000                       		moveq	#0,d0
00014E60 1028 003D                  		move.b	$3D(a0),d0
00014E64 ED48                       		lsl.w	#6,d0
00014E66 43F8 D000                  		lea	($FFFFD000).w,a1
00014E6A 43F1 0000                  		lea	(a1,d0.w),a1
00014E6E 4A29 0022                  		tst.b	$22(a1)
00014E72 6B00                       		bmi.s	Sonic_LookUp
00014E74 7200                       		moveq	#0,d1
00014E76 1229 0019                  		move.b	$19(a1),d1
00014E7A 3401                       		move.w	d1,d2
00014E7C D442                       		add.w	d2,d2
00014E7E 5942                       		subq.w	#4,d2
00014E80 D268 0008                  		add.w	8(a0),d1
00014E84 9269 0008                  		sub.w	8(a1),d1
00014E88 0C41 0004                  		cmpi.w	#4,d1
00014E8C 6D00                       		blt.s	loc_12F6A
00014E8E B242                       		cmp.w	d2,d1
00014E90 6C00                       		bge.s	loc_12F5A
00014E92 6000                       		bra.s	Sonic_LookUp
00014E94                            ; ===========================================================================
00014E94                            
00014E94                            Sonic_Balance:
00014E94 4EB9 0000 0000             		jsr	ObjHitFloor
00014E9A 0C41 000C                  		cmpi.w	#$C,d1
00014E9E 6D00                       		blt.s	Sonic_LookUp
00014EA0 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014EA6 6600                       		bne.s	loc_12F62
00014EA8                            
00014EA8                            loc_12F5A:
00014EA8 08A8 0000 0022             		bclr	#0,$22(a0)
00014EAE 6000                       		bra.s	loc_12F70
00014EB0                            ; ===========================================================================
00014EB0                            
00014EB0                            loc_12F62:
00014EB0 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014EB6 6600                       		bne.s	Sonic_LookUp
00014EB8                            
00014EB8                            loc_12F6A:
00014EB8 08E8 0000 0022             		bset	#0,$22(a0)
00014EBE                            
00014EBE                            loc_12F70:
00014EBE 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014EC4 6000                       		bra.s	Obj01_ResetScr
00014EC6                            ; ===========================================================================
00014EC6                            
00014EC6                            Sonic_LookUp:
00014EC6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014ECC 6700                       		beq.s	Sonic_Duck	; if not, branch
00014ECE 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014ED4 5238 C903                  		addq.b	#1,($FFFFC903).w
00014ED8 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00014EDE 6500                       		bcs.s	Obj01_ResetScr_Part2
00014EE0 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014EE6 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014EEC 6700                       		beq.s	loc_12FC2
00014EEE 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014EF2 6000                       		bra.s	loc_12FC2
00014EF4                            ; ===========================================================================
00014EF4                            
00014EF4                            Sonic_Duck:
00014EF4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014EFA 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014EFC 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014F02 5238 C903                  		addq.b	#1,($FFFFC903).w
00014F06 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00014F0C 6500                       		bcs.s	Obj01_ResetScr_Part2
00014F0E 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014F14 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014F1A 6700                       		beq.s	loc_12FC2
00014F1C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014F20 6000                       		bra.s	loc_12FC2
00014F22                            ; ===========================================================================
00014F22                            
00014F22                            Obj01_ResetScr:
00014F22 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00014F28                            		
00014F28                            Obj01_ResetScr_Part2:
00014F28 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014F2E 6700                       		beq.s	loc_12FC2	; if yes, branch
00014F30 6400                       		bcc.s	loc_12FBE
00014F32 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014F36                            
00014F36                            loc_12FBE:
00014F36 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014F3A                            
00014F3A                            loc_12FC2:
00014F3A 1038 F602                  		move.b	($FFFFF602).w,d0
00014F3E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014F42 6600                       		bne.s	loc_12FEE	; if yes, branch
00014F44 3028 0014                  		move.w	$14(a0),d0
00014F48 6700                       		beq.s	loc_12FEE
00014F4A 6B00                       		bmi.s	loc_12FE2
00014F4C 9045                       		sub.w	d5,d0
00014F4E 6400                       		bcc.s	loc_12FDC
00014F50 303C 0000                  		move.w	#0,d0
00014F54                            
00014F54                            loc_12FDC:
00014F54 3140 0014                  		move.w	d0,$14(a0)
00014F58 6000                       		bra.s	loc_12FEE
00014F5A                            ; ===========================================================================
00014F5A                            
00014F5A                            loc_12FE2:
00014F5A D045                       		add.w	d5,d0
00014F5C 6400                       		bcc.s	loc_12FEA
00014F5E 303C 0000                  		move.w	#0,d0
00014F62                            
00014F62                            loc_12FEA:
00014F62 3140 0014                  		move.w	d0,$14(a0)
00014F66                            
00014F66                            loc_12FEE:
00014F66 1028 0026                  		move.b	$26(a0),d0
00014F6A 4EB9 0000 2B7A             		jsr	(CalcSine).l
00014F70 C3E8 0014                  		muls.w	$14(a0),d1
00014F74 E081                       		asr.l	#8,d1
00014F76 3141 0010                  		move.w	d1,$10(a0)
00014F7A C1E8 0014                  		muls.w	$14(a0),d0
00014F7E E080                       		asr.l	#8,d0
00014F80 3140 0012                  		move.w	d0,$12(a0)
00014F84                            
00014F84                            loc_1300C:
00014F84 1028 0026                  		move.b	$26(a0),d0
00014F88 0600 0040                  		addi.b	#$40,d0
00014F8C 6B00                       		bmi.s	locret_1307C
00014F8E 123C 0040                  		move.b	#$40,d1
00014F92 4A68 0014                  		tst.w	$14(a0)
00014F96 6700                       		beq.s	locret_1307C
00014F98 6B00                       		bmi.s	loc_13024
00014F9A 4441                       		neg.w	d1
00014F9C                            
00014F9C                            loc_13024:
00014F9C 1028 0026                  		move.b	$26(a0),d0
00014FA0 D001                       		add.b	d1,d0
00014FA2 3F00                       		move.w	d0,-(sp)
00014FA4 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014FA8 301F                       		move.w	(sp)+,d0
00014FAA 4A41                       		tst.w	d1
00014FAC 6A00                       		bpl.s	locret_1307C
00014FAE E141                       		asl.w	#8,d1
00014FB0 0600 0020                  		addi.b	#$20,d0
00014FB4 0200 00C0                  		andi.b	#$C0,d0
00014FB8 6700                       		beq.s	loc_13078
00014FBA 0C00 0040                  		cmpi.b	#$40,d0
00014FBE 6700                       		beq.s	loc_13066
00014FC0 0C00 0080                  		cmpi.b	#$80,d0
00014FC4 6700                       		beq.s	loc_13060
00014FC6 D368 0010                  		add.w	d1,$10(a0)
00014FCA 08E8 0005 0022             		bset	#5,$22(a0)
00014FD0 317C 0000 0014             		move.w	#0,$14(a0)
00014FD6 4E75                       		rts	
00014FD8                            ; ===========================================================================
00014FD8                            
00014FD8                            loc_13060:
00014FD8 9368 0012                  		sub.w	d1,$12(a0)
00014FDC 4E75                       		rts	
00014FDE                            ; ===========================================================================
00014FDE                            
00014FDE                            loc_13066:
00014FDE 9368 0010                  		sub.w	d1,$10(a0)
00014FE2 08E8 0005 0022             		bset	#5,$22(a0)
00014FE8 317C 0000 0014             		move.w	#0,$14(a0)
00014FEE 4E75                       		rts	
00014FF0                            ; ===========================================================================
00014FF0                            
00014FF0                            loc_13078:
00014FF0 D368 0012                  		add.w	d1,$12(a0)
00014FF4                            
00014FF4                            locret_1307C:
00014FF4 4E75                       		rts	
00014FF6                            ; End of function Sonic_Move
00014FF6                            
00014FF6                            
00014FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FF6                            
00014FF6                            
00014FF6                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00014FF6 3028 0014                  		move.w	$14(a0),d0
00014FFA 6700                       		beq.s	loc_13086
00014FFC 6A00                       		bpl.s	loc_130B2
00014FFE                            
00014FFE                            loc_13086:
00014FFE 08E8 0000 0022             		bset	#0,$22(a0)
00015004 6600                       		bne.s	loc_1309A
00015006 08A8 0005 0022             		bclr	#5,$22(a0)
0001500C 117C 0001 001D             		move.b	#1,$1D(a0)
00015012                            
00015012                            loc_1309A:
00015012 9045                       		sub.w	d5,d0
00015014 3206                       		move.w	d6,d1
00015016 4441                       		neg.w	d1
00015018 B041                       		cmp.w	d1,d0
0001501A 6E00                       		bgt.s	loc_130A6
0001501C D045                       		add.w	d5,d0
0001501E B041                       		cmp.w	d1,d0
00015020 6F00                       		ble.s	loc_130A6
00015022 3001                       		move.w	d1,d0
00015024                            
00015024                            loc_130A6:
00015024 3140 0014                  		move.w	d0,$14(a0)
00015028 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001502E 4E75                       		rts
00015030                            ; ===========================================================================
00015030                            
00015030                            loc_130B2:				; XREF: Sonic_MoveLeft
00015030 9044                       		sub.w	d4,d0
00015032 6400                       		bcc.s	loc_130BA
00015034 303C FF80                  		move.w	#-$80,d0
00015038                            
00015038                            loc_130BA:
00015038 3140 0014                  		move.w	d0,$14(a0)
0001503C 1028 0026                  		move.b	$26(a0),d0
00015040 0600 0020                  		addi.b	#$20,d0
00015044 0200 00C0                  		andi.b	#$C0,d0
00015048 6600                       		bne.s	locret_130E8
0001504A 0C40 0400                  		cmpi.w	#$400,d0
0001504E 6D00                       		blt.s	locret_130E8
00015050 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00015056 08A8 0000 0022             		bclr	#0,$22(a0)
0001505C 303C 00A4                  		move.w	#$A4,d0
00015060 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
00015066                            
00015066                            locret_130E8:
00015066 4E75                       		rts	
00015068                            ; End of function Sonic_MoveLeft
00015068                            
00015068                            
00015068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015068                            
00015068                            
00015068                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00015068 3028 0014                  		move.w	$14(a0),d0
0001506C 6B00                       		bmi.s	loc_13118
0001506E 08A8 0000 0022             		bclr	#0,$22(a0)
00015074 6700                       		beq.s	loc_13104
00015076 08A8 0005 0022             		bclr	#5,$22(a0)
0001507C 117C 0001 001D             		move.b	#1,$1D(a0)
00015082                            
00015082                            loc_13104:
00015082 D045                       		add.w	d5,d0
00015084 B046                       		cmp.w	d6,d0
00015086 6D00                       		blt.s	loc_1310C
00015088 9045                       		sub.w	d5,d0
0001508A B046                       		cmp.w	d6,d0
0001508C 6C00                       		bge.s	loc_1310C
0001508E 3006                       		move.w	d6,d0
00015090                            
00015090                            loc_1310C:
00015090 3140 0014                  		move.w	d0,$14(a0)
00015094 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001509A 4E75                       		rts
0001509C                            ; ===========================================================================
0001509C                            
0001509C                            loc_13118:				; XREF: Sonic_MoveRight
0001509C D044                       		add.w	d4,d0
0001509E 6400                       		bcc.s	loc_13120
000150A0 303C 0080                  		move.w	#$80,d0
000150A4                            
000150A4                            loc_13120:
000150A4 3140 0014                  		move.w	d0,$14(a0)
000150A8 1028 0026                  		move.b	$26(a0),d0
000150AC 0600 0020                  		addi.b	#$20,d0
000150B0 0200 00C0                  		andi.b	#$C0,d0
000150B4 6600                       		bne.s	locret_1314E
000150B6 0C40 FC00                  		cmpi.w	#-$400,d0
000150BA 6E00                       		bgt.s	locret_1314E
000150BC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000150C2 08E8 0000 0022             		bset	#0,$22(a0)
000150C8 303C 00A4                  		move.w	#$A4,d0
000150CC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
000150D2                            
000150D2                            locret_1314E:
000150D2 4E75                       		rts	
000150D4                            ; End of function Sonic_MoveRight
000150D4                            
000150D4                            ; ---------------------------------------------------------------------------
000150D4                            ; Subroutine to	change Sonic's speed as he rolls
000150D4                            ; ---------------------------------------------------------------------------
000150D4                            
000150D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D4                            
000150D4                            
000150D4                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000150D4 3C38 F760                  		move.w	($FFFFF760).w,d6
000150D8 E346                       		asl.w	#1,d6
000150DA 3A38 F762                  		move.w	($FFFFF762).w,d5
000150DE E245                       		asr.w	#1,d5
000150E0 3838 F764                  		move.w	($FFFFF764).w,d4
000150E4 E444                       		asr.w	#2,d4
000150E6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000150EA 6600 0000                  		bne.w	loc_131CC
000150EE 4A68 003E                  		tst.w	$3E(a0)
000150F2 6600                       		bne.s	loc_13188
000150F4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000150FA 6700                       		beq.s	loc_1317C	; if not, branch
000150FC 6100 0000                  		bsr.w	Sonic_RollLeft
00015100                            
00015100                            loc_1317C:
00015100 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00015106 6700                       		beq.s	loc_13188	; if not, branch
00015108 6100 0000                  		bsr.w	Sonic_RollRight
0001510C                            
0001510C                            loc_13188:
0001510C 3028 0014                  		move.w	$14(a0),d0
00015110 6700                       		beq.s	loc_131AA
00015112 6B00                       		bmi.s	loc_1319E
00015114 9045                       		sub.w	d5,d0
00015116 6400                       		bcc.s	loc_13198
00015118 303C 0000                  		move.w	#0,d0
0001511C                            
0001511C                            loc_13198:
0001511C 3140 0014                  		move.w	d0,$14(a0)
00015120 6000                       		bra.s	loc_131AA
00015122                            ; ===========================================================================
00015122                            
00015122                            loc_1319E:				; XREF: Sonic_RollSpeed
00015122 D045                       		add.w	d5,d0
00015124 6400                       		bcc.s	loc_131A6
00015126 303C 0000                  		move.w	#0,d0
0001512A                            
0001512A                            loc_131A6:
0001512A 3140 0014                  		move.w	d0,$14(a0)
0001512E                            
0001512E                            loc_131AA:
0001512E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00015132 6600                       		bne.s	loc_131CC	; if yes, branch
00015134 08A8 0002 0022             		bclr	#2,$22(a0)
0001513A 117C 0013 0016             		move.b	#$13,$16(a0)
00015140 117C 0009 0017             		move.b	#9,$17(a0)
00015146 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001514C 5B68 000C                  		subq.w	#5,$C(a0)
00015150                            
00015150                            loc_131CC:
00015150 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015156 6700                       		beq.s	@cont2
00015158 6400                       		bcc.s	@cont1
0001515A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001515E                            		
0001515E                            @cont1:
0001515E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015162                            		
00015162                            @cont2:
00015162 1028 0026                  		move.b	$26(a0),d0
00015166 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001516C C1E8 0014                  		muls.w	$14(a0),d0
00015170 E080                       		asr.l	#8,d0
00015172 3140 0012                  		move.w	d0,$12(a0)
00015176 C3E8 0014                  		muls.w	$14(a0),d1
0001517A E081                       		asr.l	#8,d1
0001517C 0C41 1000                  		cmpi.w	#$1000,d1
00015180 6F00                       		ble.s	loc_131F0
00015182 323C 1000                  		move.w	#$1000,d1
00015186                            
00015186                            loc_131F0:
00015186 0C41 F000                  		cmpi.w	#-$1000,d1
0001518A 6C00                       		bge.s	loc_131FA
0001518C 323C F000                  		move.w	#-$1000,d1
00015190                            
00015190                            loc_131FA:
00015190 3141 0010                  		move.w	d1,$10(a0)
00015194 6000 FDEE                  		bra.w	loc_1300C
00015198                            ; End of function Sonic_RollSpeed
00015198                            
00015198                            
00015198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015198                            
00015198                            
00015198                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00015198 3028 0014                  		move.w	$14(a0),d0
0001519C 6700                       		beq.s	loc_1320A
0001519E 6A00                       		bpl.s	loc_13218
000151A0                            
000151A0                            loc_1320A:
000151A0 08E8 0000 0022             		bset	#0,$22(a0)
000151A6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000151AC 4E75                       		rts	
000151AE                            ; ===========================================================================
000151AE                            
000151AE                            loc_13218:
000151AE 9044                       		sub.w	d4,d0
000151B0 6400                       		bcc.s	loc_13220
000151B2 303C FF80                  		move.w	#-$80,d0
000151B6                            
000151B6                            loc_13220:
000151B6 3140 0014                  		move.w	d0,$14(a0)
000151BA 4E75                       		rts	
000151BC                            ; End of function Sonic_RollLeft
000151BC                            
000151BC                            
000151BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151BC                            
000151BC                            
000151BC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000151BC 3028 0014                  		move.w	$14(a0),d0
000151C0 6B00                       		bmi.s	loc_1323A
000151C2 08A8 0000 0022             		bclr	#0,$22(a0)
000151C8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000151CE 4E75                       		rts	
000151D0                            ; ===========================================================================
000151D0                            
000151D0                            loc_1323A:
000151D0 D044                       		add.w	d4,d0
000151D2 6400                       		bcc.s	loc_13242
000151D4 303C 0080                  		move.w	#$80,d0
000151D8                            
000151D8                            loc_13242:
000151D8 3140 0014                  		move.w	d0,$14(a0)
000151DC 4E75                       		rts	
000151DE                            ; End of function Sonic_RollRight
000151DE                            
000151DE                            ; ---------------------------------------------------------------------------
000151DE                            ; Subroutine to	change Sonic's direction while jumping
000151DE                            ; ---------------------------------------------------------------------------
000151DE                            
000151DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151DE                            
000151DE                            
000151DE                            Sonic_ChgJumpDir:		; XREF: Obj01_MdAir; Obj01_MdJump
000151DE 3C38 F760                  		move.w	($FFFFF760).w,d6
000151E2 3A38 F762                  		move.w	($FFFFF762).w,d5
000151E6 E345                       		asl.w	#1,d5
000151E8 0828 0004 0022             		btst	#4,$22(a0)	
000151EE 6600                       		bne.s	Obj01_ResetScr2	
000151F0 3028 0010                  		move.w	$10(a0),d0	
000151F4 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000151FA 6700                       		beq.s	loc_13278; if not, branch	
000151FC 08E8 0000 0022             		bset	#0,$22(a0)	
00015202 9045                       		sub.w	d5,d0	
00015204 3206                       		move.w	d6,d1	
00015206 4441                       		neg.w	d1	
00015208 B041                       		cmp.w	d1,d0	
0001520A 6E00                       		bgt.s	loc_13278	
0001520C D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001520E B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015210 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015212 3001                       		move.w	d1,d0
00015214                            
00015214                            loc_13278:
00015214 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
0001521A 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001521C 08A8 0000 0022             		bclr	#0,$22(a0)	
00015222 D045                       		add.w	d5,d0	
00015224 B046                       		cmp.w	d6,d0	
00015226 6D00                       		blt.s	Obj01_JumpMove
00015228 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
0001522A B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
0001522C 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001522E 3006                       		move.w	d6,d0
00015230                            
00015230                            Obj01_JumpMove:
00015230 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00015234                            
00015234                            Obj01_ResetScr2:
00015234 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001523A 6700                       		beq.s	loc_132A4	; if yes, branch
0001523C 6400                       		bcc.s	loc_132A0
0001523E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015242                            
00015242                            loc_132A0:
00015242 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015246                            
00015246                            loc_132A4:
00015246 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001524C 6500                       		bcs.s	locret_132D2	; if yes, branch
0001524E 3028 0010                  		move.w	$10(a0),d0
00015252 3200                       		move.w	d0,d1
00015254 EA41                       		asr.w	#5,d1
00015256 6700                       		beq.s	locret_132D2
00015258 6B00                       		bmi.s	loc_132C6
0001525A 9041                       		sub.w	d1,d0
0001525C 6400                       		bcc.s	loc_132C0
0001525E 303C 0000                  		move.w	#0,d0
00015262                            
00015262                            loc_132C0:
00015262 3140 0010                  		move.w	d0,$10(a0)
00015266 4E75                       		rts	
00015268                            ; ===========================================================================
00015268                            
00015268                            loc_132C6:
00015268 9041                       		sub.w	d1,d0
0001526A 6500                       		bcs.s	loc_132CE
0001526C 303C 0000                  		move.w	#0,d0
00015270                            
00015270                            loc_132CE:
00015270 3140 0010                  		move.w	d0,$10(a0)
00015274                            
00015274                            locret_132D2:
00015274 4E75                       		rts	
00015276                            ; End of function Sonic_ChgJumpDir
00015276                            
00015276                            ; ===========================================================================
00015276                            ; ---------------------------------------------------------------------------
00015276                            ; Unused subroutine to squash Sonic
00015276                            ; ---------------------------------------------------------------------------
00015276 1028 0026                  		move.b	$26(a0),d0
0001527A 0600 0020                  		addi.b	#$20,d0
0001527E 0200 00C0                  		andi.b	#$C0,d0
00015282 6600                       		bne.s	locret_13302
00015284 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015288 4A41                       		tst.w	d1
0001528A 6A00                       		bpl.s	locret_13302
0001528C 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00015292 317C 0000 0010             		move.w	#0,$10(a0)
00015298 317C 0000 0012             		move.w	#0,$12(a0)
0001529E 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000152A4                            
000152A4                            locret_13302:
000152A4 4E75                       		rts	
000152A6                            ; ---------------------------------------------------------------------------
000152A6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000152A6                            ; ---------------------------------------------------------------------------
000152A6                            
000152A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A6                            
000152A6                            
000152A6                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000152A6 2228 0008                  		move.l	8(a0),d1
000152AA 3028 0010                  		move.w	$10(a0),d0
000152AE 48C0                       		ext.l	d0
000152B0 E180                       		asl.l	#8,d0
000152B2 D280                       		add.l	d0,d1
000152B4 4841                       		swap	d1
000152B6 3038 F728                  		move.w	($FFFFF728).w,d0
000152BA 0640 0010                  		addi.w	#$10,d0
000152BE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000152C0 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000152C2 3038 F72A                  		move.w	($FFFFF72A).w,d0
000152C6 0640 0128                  		addi.w	#$128,d0
000152CA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000152CE 6600                       		bne.s	loc_13332
000152D0 0640 0040                  		addi.w	#$40,d0
000152D4                            
000152D4                            loc_13332:
000152D4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000152D6 6300                       		bls.s	Boundary_Sides	; if yes, branch
000152D8                            
000152D8                            loc_13336:
000152D8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152DC 0640 00E0                  		addi.w	#$E0,d0
000152E0 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000152E4 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000152E6 4E75                       		rts	
000152E8                            ; ===========================================================================
000152E8                            
000152E8                            Boundary_Bottom:
000152E8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000152EE 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000152F2 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000152F8 6500 0000                  		bcs.w	KillSonic
000152FC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00015300 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015306 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001530C 4E75                       		rts	
0001530E                            ; ===========================================================================
0001530E                            
0001530E                            Boundary_Sides:
0001530E 3140 0008                  		move.w	d0,8(a0)
00015312 317C 0000 000A             		move.w	#0,$A(a0)
00015318 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001531E 317C 0000 0014             		move.w	#0,$14(a0)
00015324 60B2                       		bra.s	loc_13336
00015326                            ; End of function Sonic_LevelBound
00015326                            
00015326                            ; ---------------------------------------------------------------------------
00015326                            ; Subroutine allowing Sonic to jump
00015326                            ; ---------------------------------------------------------------------------
00015326                            
00015326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015326                            
00015326                            
00015326                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015326 1038 F603                  		move.b	($FFFFF603).w,d0
0001532A 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001532E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015332 7000                       		moveq	#0,d0
00015334 1028 0026                  		move.b	$26(a0),d0
00015338 0600 0080                  		addi.b	#$80,d0
0001533C 6100 0000                  		bsr.w	sub_14D48
00015340 0C41 0006                  		cmpi.w	#6,d1
00015344 6D00 0000                  		blt.w	locret_1348E
00015348 343C 0680                  		move.w	#$680,d2
0001534C 0828 0006 0022             		btst	#6,$22(a0)
00015352 6700                       		beq.s	loc_1341C
00015354 343C 0380                  		move.w	#$380,d2
00015358                            
00015358                            loc_1341C:
00015358 7000                       		moveq	#0,d0
0001535A 1028 0026                  		move.b	$26(a0),d0
0001535E 0400 0040                  		subi.b	#$40,d0
00015362 4EB9 0000 2B7A             		jsr	(CalcSine).l
00015368 C3C2                       		muls.w	d2,d1
0001536A E081                       		asr.l	#8,d1
0001536C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00015370 C1C2                       		muls.w	d2,d0
00015372 E080                       		asr.l	#8,d0
00015374 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00015378 08E8 0001 0022             		bset	#1,$22(a0)
0001537E 08A8 0005 0022             		bclr	#5,$22(a0)
00015384 588F                       		addq.l	#4,sp
00015386 117C 0001 003C             		move.b	#1,$3C(a0)
0001538C 4228 0038                  		clr.b	$38(a0)
00015390 303C 00A0                  		move.w	#$A0,d0
00015394 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
0001539A 117C 0013 0016             		move.b	#$13,$16(a0)
000153A0 117C 0009 0017             		move.b	#9,$17(a0)
000153A6 0828 0002 0022             		btst	#2,$22(a0)
000153AC 6600                       		bne.s	loc_13490
000153AE 117C 000E 0016             		move.b	#$E,$16(a0)
000153B4 117C 0007 0017             		move.b	#7,$17(a0)
000153BA 117C 001F 001C             		move.b	#$1F,$1C(a0)	; use "jumping"	animation
000153C0 08E8 0002 0022             		bset	#2,$22(a0)
000153C6 5A68 000C                  		addq.w	#5,$C(a0)
000153CA                            
000153CA                            locret_1348E:
000153CA 4E75                       		rts	
000153CC                            ; ===========================================================================
000153CC                            
000153CC                            loc_13490:
000153CC 08E8 0004 0022             		bset	#4,$22(a0)
000153D2 4E75                       		rts	
000153D4                            ; End of function Sonic_Jump
000153D4                            
000153D4                            
000153D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153D4                            
000153D4                            
000153D4                            Sonic_JumpAnimate:
000153D4 103C 0020                  		move.b #$20,d0 ;animation down
000153D8 4A68 0012                  		tst.w $12(a0)
000153DC 6A00                       		bpl.s @positive
000153DE 103C 001F                  		move.b #$1F,d0 ;animation up
000153E2                            
000153E2                            @positive:
000153E2 1140 001C                  		move.b d0,$1C(a0)
000153E6 4E75                       		rts
000153E8                            
000153E8                            Sonic_JumpHeight:			; XREF: Obj01_MdAir; Obj01_MdJump
000153E8 4A28 003C                  		tst.b	$3C(a0)
000153EC 6700                       		beq.s	loc_134C4
000153EE 323C FC00                  		move.w	#-$400,d1
000153F2 0828 0006 0022             		btst	#6,$22(a0)
000153F8 6700                       		beq.s	loc_134AE
000153FA 323C FE00                  		move.w	#-$200,d1
000153FE                            
000153FE                            loc_134AE:
000153FE B268 0012                  		cmp.w	$12(a0),d1
00015402 6F00                       		ble.s	locret_134C2
00015404 1038 F602                  		move.b	($FFFFF602).w,d0
00015408 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001540C 6600                       		bne.s	locret_134C2	; if yes, branch
0001540E 3141 0012                  		move.w	d1,$12(a0)
00015412                            
00015412                            locret_134C2:
00015412 4E75                       		rts	
00015414                            ; ===========================================================================
00015414                            
00015414                            loc_134C4:
00015414 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
0001541A 6C00                       		bge.s	locret_134D2
0001541C 317C F040 0012             		move.w	#-$FC0,$12(a0)
00015422                            
00015422                            locret_134D2:
00015422 4E75                       		rts	
00015424                            ; End of function Sonic_JumpHeight
00015424                            
00015424                            ; ---------------------------------------------------------------------------
00015424                            ; Subroutine to	slow Sonic walking up a	slope
00015424                            ; ---------------------------------------------------------------------------
00015424                            
00015424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015424                            
00015424                            
00015424                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00015424 1028 0026                  		move.b	$26(a0),d0
00015428 0600 0060                  		addi.b	#$60,d0
0001542C 0C00 00C0                  		cmpi.b	#$C0,d0
00015430 6400                       		bcc.s	locret_13508
00015432 1028 0026                  		move.b	$26(a0),d0
00015436 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001543C C1FC 0020                  		muls.w	#$20,d0
00015440 E080                       		asr.l	#8,d0
00015442 4A68 0014                  		tst.w	$14(a0)
00015446 6700                       		beq.s	locret_13508
00015448 6B00                       		bmi.s	loc_13504
0001544A 4A40                       		tst.w	d0
0001544C 6700                       		beq.s	locret_13502
0001544E D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00015452                            
00015452                            locret_13502:
00015452 4E75                       		rts	
00015454                            ; ===========================================================================
00015454                            
00015454                            loc_13504:
00015454 D168 0014                  		add.w	d0,$14(a0)
00015458                            
00015458                            locret_13508:
00015458 4E75                       		rts	
0001545A                            ; End of function Sonic_SlopeResist
0001545A                            
0001545A                            ; ---------------------------------------------------------------------------
0001545A                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001545A                            ; ---------------------------------------------------------------------------
0001545A                            
0001545A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001545A                            
0001545A                            
0001545A                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001545A 1028 0026                  		move.b	$26(a0),d0
0001545E 0600 0060                  		addi.b	#$60,d0
00015462 0C00 00C0                  		cmpi.b	#-$40,d0
00015466 6400                       		bcc.s	locret_13544
00015468 1028 0026                  		move.b	$26(a0),d0
0001546C 4EB9 0000 2B7A             		jsr	(CalcSine).l
00015472 C1FC 0050                  		muls.w	#$50,d0
00015476 E080                       		asr.l	#8,d0
00015478 4A68 0014                  		tst.w	$14(a0)
0001547C 6B00                       		bmi.s	loc_1353A
0001547E 4A40                       		tst.w	d0
00015480 6A00                       		bpl.s	loc_13534
00015482 E480                       		asr.l	#2,d0
00015484                            
00015484                            loc_13534:
00015484 D168 0014                  		add.w	d0,$14(a0)
00015488 4E75                       		rts	
0001548A                            ; ===========================================================================
0001548A                            
0001548A                            loc_1353A:
0001548A 4A40                       		tst.w	d0
0001548C 6B00                       		bmi.s	loc_13540
0001548E E480                       		asr.l	#2,d0
00015490                            
00015490                            loc_13540:
00015490 D168 0014                  		add.w	d0,$14(a0)
00015494                            
00015494                            locret_13544:
00015494 4E75                       		rts	
00015496                            ; End of function Sonic_RollRepel
00015496                            
00015496                            ; ---------------------------------------------------------------------------
00015496                            ; Subroutine to	push Sonic down	a slope
00015496                            ; ---------------------------------------------------------------------------
00015496                            
00015496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015496                            
00015496                            
00015496                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00015496 4E71                       		nop	
00015498 4A28 0038                  		tst.b	$38(a0)
0001549C 6600                       		bne.s	locret_13580
0001549E 4A68 003E                  		tst.w	$3E(a0)
000154A2 6600                       		bne.s	locret_13580
000154A4 1028 0026                  		move.b	$26(a0),d0
000154A8 0600 0020                  		addi.b	#$20,d0
000154AC 0200 00C0                  		andi.b	#$C0,d0
000154B0 6700                       		beq.s	locret_13580
000154B2 3028 0014                  		move.w	$14(a0),d0
000154B6 6A00                       		bpl.s	loc_1356A
000154B8 4440                       		neg.w	d0
000154BA                            
000154BA                            loc_1356A:
000154BA 0C40 0280                  		cmpi.w	#$280,d0
000154BE 6400                       		bcc.s	locret_13580
000154C0 4268 0014                  		clr.w	$14(a0)
000154C4 08E8 0001 0022             		bset	#1,$22(a0)
000154CA 317C 001E 003E             		move.w	#$1E,$3E(a0)
000154D0                            
000154D0                            locret_13580:
000154D0 4E75                       		rts	
000154D2                            ; ===========================================================================
000154D2                            
000154D2                            loc_13582:
000154D2 4E75                       		rts	
000154D4                            ; End of function Sonic_SlopeRepel
000154D4                            
000154D4                            ; ---------------------------------------------------------------------------
000154D4                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000154D4                            ; ---------------------------------------------------------------------------
000154D4                            
000154D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D4                            
000154D4                            
000154D4                            Sonic_JumpAngle:			; XREF: Obj01_MdAir; Obj01_MdJump
000154D4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000154D8 6700                       		beq.s	locret_135A2	; if already 0,	branch
000154DA 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000154DC                            
000154DC 5400                       		addq.b	#2,d0		; increase angle
000154DE 6400                       		bcc.s	loc_13596
000154E0 7000                       		moveq	#0,d0
000154E2                            
000154E2                            loc_13596:
000154E2 6000                       		bra.s	loc_1359E
000154E4                            ; ===========================================================================
000154E4                            
000154E4                            loc_13598:
000154E4 5500                       		subq.b	#2,d0		; decrease angle
000154E6 6400                       		bcc.s	loc_1359E
000154E8 7000                       		moveq	#0,d0
000154EA                            
000154EA                            loc_1359E:
000154EA 1140 0026                  		move.b	d0,$26(a0)
000154EE                            
000154EE                            locret_135A2:
000154EE 4E75                       		rts	
000154F0                            ; End of function Sonic_JumpAngle
000154F0                            
000154F0                            ; ---------------------------------------------------------------------------
000154F0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000154F0                            ; ---------------------------------------------------------------------------
000154F0                            
000154F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F0                            
000154F0                            
000154F0                            Sonic_Floor:				; XREF: Obj01_MdAir; Obj01_MdJump
000154F0 3228 0010                  		move.w	$10(a0),d1
000154F4 3428 0012                  		move.w	$12(a0),d2
000154F8 4EB9 0000 2E48             		jsr	(CalcAngle).l
000154FE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015502 0400 0020                  		subi.b	#$20,d0
00015506 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001550A 0200 00C0                  		andi.b	#$C0,d0
0001550E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015512 0C00 0040                  		cmpi.b	#$40,d0
00015516 6700 0000                  		beq.w	loc_13680
0001551A 0C00 0080                  		cmpi.b	#$80,d0
0001551E 6700 0000                  		beq.w	loc_136E2
00015522 0C00 00C0                  		cmpi.b	#-$40,d0
00015526 6700 0000                  		beq.w	loc_1373E
0001552A 6100 0000                  		bsr.w	Sonic_HitWall
0001552E 4A41                       		tst.w	d1
00015530 6A00                       		bpl.s	loc_135F0
00015532 9368 0008                  		sub.w	d1,8(a0)
00015536 317C 0000 0010             		move.w	#0,$10(a0)
0001553C                            
0001553C                            loc_135F0:
0001553C 6100 0000                  		bsr.w	sub_14EB4
00015540 4A41                       		tst.w	d1
00015542 6A00                       		bpl.s	loc_13602
00015544 D368 0008                  		add.w	d1,8(a0)
00015548 317C 0000 0010             		move.w	#0,$10(a0)
0001554E                            
0001554E                            loc_13602:
0001554E 6100 0000                  		bsr.w	Sonic_HitFloor
00015552 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015556 4A41                       		tst.w	d1
00015558 6A00                       		bpl.s	locret_1367E
0001555A 1428 0012                  		move.b	$12(a0),d2
0001555E 5002                       		addq.b	#8,d2
00015560 4402                       		neg.b	d2
00015562 B202                       		cmp.b	d2,d1
00015564 6C00                       		bge.s	loc_1361E
00015566 B002                       		cmp.b	d2,d0
00015568 6D00                       		blt.s	locret_1367E
0001556A                            
0001556A                            loc_1361E:
0001556A D368 000C                  		add.w	d1,$C(a0)
0001556E 1143 0026                  		move.b	d3,$26(a0)
00015572 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015576 117C 0000 001C             		move.b	#0,$1C(a0)
0001557C 1003                       		move.b	d3,d0
0001557E 0600 0020                  		addi.b	#$20,d0
00015582 0200 0040                  		andi.b	#$40,d0
00015586 6600                       		bne.s	loc_1365C
00015588 1003                       		move.b	d3,d0
0001558A 0600 0010                  		addi.b	#$10,d0
0001558E 0200 0020                  		andi.b	#$20,d0
00015592 6700                       		beq.s	loc_1364E
00015594 E0E8 0012                  		asr	$12(a0)
00015598 6000                       		bra.s	loc_13670
0001559A                            ; ===========================================================================
0001559A                            
0001559A                            loc_1364E:
0001559A 317C 0000 0012             		move.w	#0,$12(a0)
000155A0 3168 0010 0014             		move.w	$10(a0),$14(a0)
000155A6 4E75                       		rts	
000155A8                            ; ===========================================================================
000155A8                            
000155A8                            loc_1365C:
000155A8 317C 0000 0010             		move.w	#0,$10(a0)
000155AE 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000155B4 6F00                       		ble.s	loc_13670
000155B6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000155BC                            
000155BC                            loc_13670:
000155BC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155C2 4A03                       		tst.b	d3
000155C4 6A00                       		bpl.s	locret_1367E
000155C6 4468 0014                  		neg.w	$14(a0)
000155CA                            
000155CA                            locret_1367E:
000155CA 4E75                       		rts	
000155CC                            ; ===========================================================================
000155CC                            
000155CC                            loc_13680:
000155CC 6100 0000                  		bsr.w	Sonic_HitWall
000155D0 4A41                       		tst.w	d1
000155D2 6A00                       		bpl.s	loc_1369A
000155D4 9368 0008                  		sub.w	d1,8(a0)
000155D8 317C 0000 0010             		move.w	#0,$10(a0)
000155DE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155E4 4E75                       		rts	
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            loc_1369A:
000155E6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000155EA 4A41                       		tst.w	d1
000155EC 6A00                       		bpl.s	loc_136B4
000155EE 9368 000C                  		sub.w	d1,$C(a0)
000155F2 4A68 0012                  		tst.w	$12(a0)
000155F6 6A00                       		bpl.s	locret_136B2
000155F8 317C 0000 0012             		move.w	#0,$12(a0)
000155FE                            
000155FE                            locret_136B2:
000155FE 4E75                       		rts	
00015600                            ; ===========================================================================
00015600                            
00015600                            loc_136B4:
00015600 4A68 0012                  		tst.w	$12(a0)
00015604 6B00                       		bmi.s	locret_136E0
00015606 6100 0000                  		bsr.w	Sonic_HitFloor
0001560A 4A41                       		tst.w	d1
0001560C 6A00                       		bpl.s	locret_136E0
0001560E D368 000C                  		add.w	d1,$C(a0)
00015612 1143 0026                  		move.b	d3,$26(a0)
00015616 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001561A 117C 0000 001C             		move.b	#0,$1C(a0)
00015620 317C 0000 0012             		move.w	#0,$12(a0)
00015626 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001562C                            
0001562C                            locret_136E0:
0001562C 4E75                       		rts	
0001562E                            ; ===========================================================================
0001562E                            
0001562E                            loc_136E2:
0001562E 6100 0000                  		bsr.w	Sonic_HitWall
00015632 4A41                       		tst.w	d1
00015634 6A00                       		bpl.s	loc_136F4
00015636 9368 0008                  		sub.w	d1,8(a0)
0001563A 317C 0000 0010             		move.w	#0,$10(a0)
00015640                            
00015640                            loc_136F4:
00015640 6100 0000                  		bsr.w	sub_14EB4
00015644 4A41                       		tst.w	d1
00015646 6A00                       		bpl.s	loc_13706
00015648 D368 0008                  		add.w	d1,8(a0)
0001564C 317C 0000 0010             		move.w	#0,$10(a0)
00015652                            
00015652                            loc_13706:
00015652 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015656 4A41                       		tst.w	d1
00015658 6A00                       		bpl.s	locret_1373C
0001565A 9368 000C                  		sub.w	d1,$C(a0)
0001565E 1003                       		move.b	d3,d0
00015660 0600 0020                  		addi.b	#$20,d0
00015664 0200 0040                  		andi.b	#$40,d0
00015668 6600                       		bne.s	loc_13726
0001566A 317C 0000 0012             		move.w	#0,$12(a0)
00015670 4E75                       		rts	
00015672                            ; ===========================================================================
00015672                            
00015672                            loc_13726:
00015672 1143 0026                  		move.b	d3,$26(a0)
00015676 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001567A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015680 4A03                       		tst.b	d3
00015682 6A00                       		bpl.s	locret_1373C
00015684 4468 0014                  		neg.w	$14(a0)
00015688                            
00015688                            locret_1373C:
00015688 4E75                       		rts	
0001568A                            ; ===========================================================================
0001568A                            
0001568A                            loc_1373E:
0001568A 6100 0000                  		bsr.w	sub_14EB4
0001568E 4A41                       		tst.w	d1
00015690 6A00                       		bpl.s	loc_13758
00015692 D368 0008                  		add.w	d1,8(a0)
00015696 317C 0000 0010             		move.w	#0,$10(a0)
0001569C 3168 0012 0014             		move.w	$12(a0),$14(a0)
000156A2 4E75                       		rts	
000156A4                            ; ===========================================================================
000156A4                            
000156A4                            loc_13758:
000156A4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000156A8 4A41                       		tst.w	d1
000156AA 6A00                       		bpl.s	loc_13772
000156AC 9368 000C                  		sub.w	d1,$C(a0)
000156B0 4A68 0012                  		tst.w	$12(a0)
000156B4 6A00                       		bpl.s	locret_13770
000156B6 317C 0000 0012             		move.w	#0,$12(a0)
000156BC                            
000156BC                            locret_13770:
000156BC 4E75                       		rts	
000156BE                            ; ===========================================================================
000156BE                            
000156BE                            loc_13772:
000156BE 4A68 0012                  		tst.w	$12(a0)
000156C2 6B00                       		bmi.s	locret_1379E
000156C4 6100 0000                  		bsr.w	Sonic_HitFloor
000156C8 4A41                       		tst.w	d1
000156CA 6A00                       		bpl.s	locret_1379E
000156CC D368 000C                  		add.w	d1,$C(a0)
000156D0 1143 0026                  		move.b	d3,$26(a0)
000156D4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000156D8 117C 0000 001C             		move.b	#0,$1C(a0)
000156DE 317C 0000 0012             		move.w	#0,$12(a0)
000156E4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000156EA                            
000156EA                            locret_1379E:
000156EA 4E75                       		rts	
000156EC                            ; End of function Sonic_Floor
000156EC                            
000156EC                            ; ---------------------------------------------------------------------------
000156EC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000156EC                            ; ---------------------------------------------------------------------------
000156EC                            
000156EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156EC                            
000156EC                            
000156EC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000156EC 0828 0004 0022             		btst	#4,$22(a0)
000156F2 6700                       		beq.s	loc_137AE
000156F4 4E71                       		nop	
000156F6 4E71                       		nop	
000156F8 4E71                       		nop	
000156FA                            
000156FA                            loc_137AE:
000156FA 08A8 0005 0022             		bclr	#5,$22(a0)
00015700 08A8 0001 0022             		bclr	#1,$22(a0)
00015706 08A8 0004 0022             		bclr	#4,$22(a0)
0001570C 0828 0002 0022             		btst	#2,$22(a0)
00015712 6700                       		beq.s	loc_137E4
00015714 08A8 0002 0022             		bclr	#2,$22(a0)
0001571A 117C 0013 0016             		move.b	#$13,$16(a0)
00015720 117C 0009 0017             		move.b	#9,$17(a0)
00015726 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001572C 5B68 000C                  		subq.w	#5,$C(a0)
00015730                            
00015730                            loc_137E4:
00015730 117C 0000 003C             		move.b	#0,$3C(a0)
00015736 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001573C 4E75                       		rts	
0001573E                            ; End of function Sonic_ResetOnFloor
0001573E                            
0001573E                            ; ===========================================================================
0001573E                            ; ---------------------------------------------------------------------------
0001573E                            ; Sonic	when he	gets hurt
0001573E                            ; ---------------------------------------------------------------------------
0001573E                            
0001573E                            Obj01_Hurt:				; XREF: Obj01_Index
0001573E 4EBA 9A2C                  		jsr	SpeedToPos
00015742 0668 0030 0012             		addi.w	#$30,$12(a0)
00015748 0828 0006 0022             		btst	#6,$22(a0)
0001574E 6700                       		beq.s	loc_1380C
00015750 0468 0020 0012             		subi.w	#$20,$12(a0)
00015756                            
00015756                            loc_1380C:
00015756 6100 0000                  		bsr.w	Sonic_HurtStop
0001575A 6100 FB4A                  		bsr.w	Sonic_LevelBound
0001575E 6100 F55A                  		bsr.w	Sonic_RecordPos
00015762 6100 0000                  		bsr.w	Sonic_Animate
00015766 6100 0000                  		bsr.w	LoadSonicDynPLC
0001576A 4EFA 9A1A                  		jmp	DisplaySprite
0001576E                            
0001576E                            ; ---------------------------------------------------------------------------
0001576E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001576E                            ; ---------------------------------------------------------------------------
0001576E                            
0001576E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001576E                            
0001576E                            
0001576E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001576E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015772 0640 00E0                  		addi.w	#$E0,d0
00015776 B068 000C                  		cmp.w	$C(a0),d0
0001577A 6500 0000                  		bcs.w	KillSonic
0001577E 6100 FD70                  		bsr.w	Sonic_Floor
00015782 0828 0001 0022             		btst	#1,$22(a0)
00015788 6600                       		bne.s	locret_13860
0001578A 7000                       		moveq	#0,d0
0001578C 3140 0012                  		move.w	d0,$12(a0)
00015790 3140 0010                  		move.w	d0,$10(a0)
00015794 3140 0014                  		move.w	d0,$14(a0)
00015798 117C 0000 001C             		move.b	#0,$1C(a0)
0001579E 5528 0024                  		subq.b	#2,$24(a0)
000157A2 317C 0078 0030             		move.w	#$78,$30(a0)
000157A8                            
000157A8                            locret_13860:
000157A8 4E75                       		rts	
000157AA                            ; End of function Sonic_HurtStop
000157AA                            
000157AA                            ; ===========================================================================
000157AA                            ; ---------------------------------------------------------------------------
000157AA                            ; Sonic	when he	dies
000157AA                            ; ---------------------------------------------------------------------------
000157AA                            
000157AA                            Obj01_Death:				; XREF: Obj01_Index
000157AA 6100 0000                  		bsr.w	GameOver
000157AE 4EBA 999C                  		jsr	ObjectFall
000157B2 6100 F506                  		bsr.w	Sonic_RecordPos
000157B6 6100 0000                  		bsr.w	Sonic_Animate
000157BA 6100 0000                  		bsr.w	LoadSonicDynPLC
000157BE 4EFA 99C6                  		jmp	DisplaySprite
000157C2                            
000157C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C2                            
000157C2                            
000157C2                            GameOver:				; XREF: Obj01_Death
000157C2 3038 F704                  		move.w	($FFFFF704).w,d0
000157C6 0640 0100                  		addi.w	#$100,d0
000157CA B068 000C                  		cmp.w	$C(a0),d0
000157CE 6A00 0000                  		bpl.w	locret_13900
000157D2 317C FFC8 0012             		move.w	#-$38,$12(a0)
000157D8 5428 0024                  		addq.b	#2,$24(a0)
000157DC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000157E0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000157E4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000157E8 6600                       		bne.s	loc_138D4
000157EA 317C 0000 003A             		move.w	#0,$3A(a0)
000157F0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000157F6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000157FC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00015802 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015806                            
00015806                            loc_138C2:
00015806 303C 008F                  		move.w	#$8F,d0
0001580A 4EB9 0000 12C6             		jsr	(PlaySound).l	; play game over music
00015810 7003                       		moveq	#3,d0
00015812 4EF9 0000 1586             		jmp	(LoadPLC).l	; load game over patterns
00015818                            ; ===========================================================================
00015818                            
00015818                            loc_138D4:
00015818 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001581E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00015822 6700                       		beq.s	locret_13900	; if not, branch
00015824 317C 0000 003A             		move.w	#0,$3A(a0)
0001582A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00015830 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015836 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001583C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00015842 60C2                       		bra.s	loc_138C2
00015844                            ; ===========================================================================
00015844                            
00015844                            locret_13900:
00015844 4E75                       		rts	
00015846                            ; End of function GameOver
00015846                            
00015846                            ; ===========================================================================
00015846                            ; ---------------------------------------------------------------------------
00015846                            ; Sonic	when the level is restarted
00015846                            ; ---------------------------------------------------------------------------
00015846                            
00015846                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015846 4A68 003A                  		tst.w	$3A(a0)
0001584A 6700                       		beq.s	locret_13914
0001584C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00015850 6600                       		bne.s	locret_13914
00015852 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015858                            
00015858                            locret_13914:
00015858 4E75                       		rts	
0001585A                            
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            ; Sonic when he's drowning
0001585A                            ; ---------------------------------------------------------------------------
0001585A                             
0001585A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001585A                             
0001585A                             
0001585A                            Sonic_Drowned:
0001585A 6100 9910                          bsr.w   SpeedToPos              ; Make Sonic able to move
0001585E 0668 0010 0012                     addi.w  #$10,$12(a0)          ; Apply gravity
00015864 6100 F454                          bsr.w   Sonic_RecordPos    ; Record position
00015868 6100                               bsr.s   Sonic_Animate           ; Animate Sonic
0001586A 6100 0000                          bsr.w   LoadSonicDynPLC           ; Load Sonic's DPLCs
0001586E 6000 9916                          bra.w   DisplaySprite           ; And finally, display Sonic
00015872                            
00015872                            ; ---------------------------------------------------------------------------
00015872                            ; Subroutine to	animate	Sonic's sprites
00015872                            ; ---------------------------------------------------------------------------
00015872                            
00015872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015872                            
00015872                            
00015872                            Sonic_Animate:				; XREF: Obj01_Control; et al
00015872 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015878 7000                       		moveq	#0,d0
0001587A 1028 001C                  		move.b	$1C(a0),d0
0001587E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00015882 6700                       		beq.s	SAnim_Do	; if not, branch
00015884 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015888 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001588E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015894                            
00015894                            SAnim_Do:
00015894 D040                       		add.w	d0,d0
00015896 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001589A 1011                       		move.b	(a1),d0
0001589C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001589E 1228 0022                  		move.b	$22(a0),d1
000158A2 0201 0001                  		andi.b	#1,d1
000158A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000158AC 8328 0001                  		or.b	d1,1(a0)
000158B0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000158B4 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000158B6 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000158BA                            
000158BA                            SAnim_Do2:
000158BA 7200                       		moveq	#0,d1
000158BC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000158C0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000158C4 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000158C6                            
000158C6                            SAnim_Next:
000158C6 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000158CA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000158CE                            
000158CE                            SAnim_Delay:
000158CE 4E75                       		rts	
000158D0                            ; ===========================================================================
000158D0                            
000158D0                            SAnim_End_FF:
000158D0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000158D2 6600                       		bne.s	SAnim_End_FE	; if not, branch
000158D4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000158DA 1029 0001                  		move.b	1(a1),d0	; read sprite number
000158DE 60E6                       		bra.s	SAnim_Next
000158E0                            ; ===========================================================================
000158E0                            
000158E0                            SAnim_End_FE:
000158E0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000158E2 6600                       		bne.s	SAnim_End_FD	; if not, branch
000158E4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000158E8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000158EC 9200                       		sub.b	d0,d1
000158EE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000158F2 60D2                       		bra.s	SAnim_Next
000158F4                            ; ===========================================================================
000158F4                            
000158F4                            SAnim_End_FD:
000158F4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000158F6 6600                       		bne.s	SAnim_End	; if not, branch
000158F8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000158FE                            
000158FE                            SAnim_End:
000158FE 4E75                       		rts	
00015900                            ; ===========================================================================
00015900                            
00015900                            SAnim_WalkRun:				; XREF: SAnim_Do
00015900 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015904 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015906 5200                       		addq.b	#1,d0		; is animation walking/running?
00015908 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001590C 7200                       		moveq	#0,d1
0001590E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015912 1428 0022                  		move.b	$22(a0),d2
00015916 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001591A 6600                       		bne.s	loc_13A70	; if yes, branch
0001591C 4600                       		not.b	d0		; reverse angle
0001591E                            
0001591E                            loc_13A70:
0001591E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00015922 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015924 7203                       		moveq	#3,d1
00015926                            
00015926                            loc_13A78:
00015926 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001592C B302                       		eor.b	d1,d2
0001592E 8528 0001                  		or.b	d2,1(a0)
00015932 0828 0005 0022             		btst	#5,$22(a0)
00015938 6600 0000                  		bne.w	SAnim_Push
0001593C E808                       		lsr.b	#4,d0		; divide angle by $10
0001593E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00015942 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015946 6A00                       		bpl.s	loc_13A9C
00015948 4442                       		neg.w	d2
0001594A                            
0001594A                            loc_13A9C:
0001594A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00015950 4A28 0039                  		tst.b	crawling(a0)
00015954 6600                       		bne.s	loc_13AB4
00015956 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001595A 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001595C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00015962 1200                       		move.b	d0,d1
00015964 E209                       		lsr.b	#1,d1
00015966 D001                       		add.b	d1,d0
00015968                            
00015968                            loc_13AB4:
00015968 D000                       		add.b	d0,d0
0001596A 1600                       		move.b	d0,d3
0001596C 4442                       		neg.w	d2
0001596E 0642 0800                  		addi.w	#$800,d2
00015972 6A00                       		bpl.s	loc_13AC2
00015974 7400                       		moveq	#0,d2
00015976                            
00015976                            loc_13AC2:
00015976 E04A                       		lsr.w	#8,d2
00015978 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001597C 6100 FF3C                  		bsr.w	SAnim_Do2
00015980 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00015984 4E75                       		rts	
00015986                            ; ===========================================================================
00015986                            
00015986                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00015986 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00015988 6600                       		bne.s	SAnim_Push	; if not, branch
0001598A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001598E 6A00                       		bpl.s	loc_13ADE
00015990 4442                       		neg.w	d2
00015992                            
00015992                            loc_13ADE:
00015992                            	;	lea	(SonAni_Roll2).l,a1 ; use fast animation
00015992                            	;	cmpi.w	#$600,d2	; is Sonic moving fast?
00015992                            	;	bcc.s	loc_13AF0	; if yes, branch
00015992                            	;	lea	(SonAni_Roll).l,a1 ; use slower	animation
00015992                            
00015992                            loc_13AF0:
00015992 4442                       		neg.w	d2
00015994 0642 0400                  		addi.w	#$400,d2
00015998 6A00                       		bpl.s	loc_13AFA
0001599A 7400                       		moveq	#0,d2
0001599C                            
0001599C                            loc_13AFA:
0001599C E04A                       		lsr.w	#8,d2
0001599E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000159A2 1228 0022                  		move.b	$22(a0),d1
000159A6 0201 0001                  		andi.b	#1,d1
000159AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000159B0 8328 0001                  		or.b	d1,1(a0)
000159B4 6000 FF04                  		bra.w	SAnim_Do2
000159B8                            ; ===========================================================================
000159B8                            
000159B8                            SAnim_Push:				; XREF: SAnim_RollJump
000159B8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000159BC 6B00                       		bmi.s	loc_13B1E
000159BE 4442                       		neg.w	d2
000159C0                            
000159C0                            loc_13B1E:
000159C0 0642 0800                  		addi.w	#$800,d2
000159C4 6A00                       		bpl.s	loc_13B26
000159C6 7400                       		moveq	#0,d2
000159C8                            
000159C8                            loc_13B26:
000159C8 EC4A                       		lsr.w	#6,d2
000159CA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000159CE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000159D4 1228 0022                  		move.b	$22(a0),d1
000159D8 0201 0001                  		andi.b	#1,d1
000159DC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000159E2 8328 0001                  		or.b	d1,1(a0)
000159E6 6000 FED2                  		bra.w	SAnim_Do2
000159EA                            ; End of function Sonic_Animate
000159EA                            
000159EA                            ; ===========================================================================
000159EA                            SonicAniData:
000159EA                            	include "_anim\Sonic.asm"
000159EA                            ; ---------------------------------------------------------------------------
000159EA                            ; Animation script - Sonic
000159EA                            ; ---------------------------------------------------------------------------
000159EA 0000                       		dc.w SonAni_Walk-SonicAniData ;0
000159EC 0000                       		dc.w SonAni_Run-SonicAniData ;1
000159EE 0000                       		dc.w SonAni_Blank-SonicAniData ;2
000159F0 0000                       		dc.w SonAni_Blank-SonicAniData ;3
000159F2 0000                       		dc.w SonAni_Push-SonicAniData ;4
000159F4 0000                       		dc.w SonAni_Wait-SonicAniData ;5
000159F6 0000                       		dc.w SonAni_Balance-SonicAniData ;6
000159F8 0000                       		dc.w SonAni_LookUp-SonicAniData ;7
000159FA 0000                       		dc.w SonAni_Duck-SonicAniData ;8
000159FC 0000                       		dc.w SonAni_Bite-SonicAniData ;9
000159FE 0000                       		dc.w SonAni_Blank-SonicAniData ;A
00015A00 0000                       		dc.w SonAni_Blank-SonicAniData ;B
00015A02 0000                       		dc.w SonAni_Blank-SonicAniData ;C
00015A04 0000                       		dc.w SonAni_Stop-SonicAniData ;D
00015A06 0000                       		dc.w SonAni_Float1-SonicAniData ;E
00015A08 0000                       		dc.w SonAni_Float2-SonicAniData ;F
00015A0A 0000                       		dc.w SonAni_Spring-SonicAniData ;10
00015A0C 0000                       		dc.w SonAni_LZHang-SonicAniData ;11
00015A0E 0000                       		dc.w SonAni_Blank-SonicAniData ;12
00015A10 0000                       		dc.w SonAni_Blank-SonicAniData ;13
00015A12 0000                       		dc.w SonAni_Blank-SonicAniData ;14
00015A14 0000                       		dc.w SonAni_Bubble-SonicAniData ;15
00015A16 0000                       		dc.w SonAni_Blank-SonicAniData ;16
00015A18 0000                       		dc.w SonAni_Drown-SonicAniData ;17
00015A1A 0000                       		dc.w SonAni_Death-SonicAniData ;18
00015A1C 0000                       		dc.w SonAni_Blank-SonicAniData ;19
00015A1E 0000                       		dc.w SonAni_Hurt-SonicAniData ;1A
00015A20 0000                       		dc.w SonAni_LZSlide-SonicAniData ;1B
00015A22 0000                       		dc.w SonAni_Blank-SonicAniData ;1C
00015A24 0000                       		dc.w SonAni_Float3-SonicAniData ;1D
00015A26 0000                       		dc.w SonAni_Float4-SonicAniData ;1E
00015A28 0000                       		dc.w SonAni_Jump1-SonicAniData ;1F
00015A2A 0000                       		dc.w SonAni_Jump2-SonicAniData ;20
00015A2C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0 ;Unused
00015A30 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015A38 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00015A40 FD3C 3D3E 3FFF FFFF        SonAni_Push:	dc.b $FD, $3C, $3D, $3E, $3F, $FF, $FF,	$FF
00015A48 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00015A5E 1F34 35FF                  SonAni_Balance:	dc.b $1F, $34, $35, $FF
00015A62 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015A66 3F33 FF00                  SonAni_Duck:	dc.b $3F, $33, $FF, 0
00015A6A 0201 2E2F 30FD 00          SonAni_Bite:	dc.b 2, 1, $2E, $2F, $30, $FD, 0
00015A71 0731 32FF                  SonAni_Stop:	dc.b 7,	$31, $32, $FF
00015A75 0736 FF                    SonAni_Float1:	dc.b 7,	$36, $FF
00015A78 0736 3742 3843 FF00        SonAni_Float2:	dc.b 7,	$36, $37, $42, $38, $43, $FF, 0
00015A80 2F39 FD00                  SonAni_Spring:	dc.b $2F, $39, $FD, 0
00015A84 043A 3BFF                  SonAni_LZHang:	dc.b 4,	$3A, $3B, $FF
00015A88 0B46 460A 0BFD 0000        SonAni_Bubble:	dc.b $B, $46, $46, $A, $B, $FD,	0, 0
00015A90 2F40 FF00                  SonAni_Drown:	dc.b $2F, $40, $FF, 0
00015A94 0341 FF00                  SonAni_Death:	dc.b 3,	$41, $FF, 0
00015A98 0744 45FF                  SonAni_Hurt:	dc.b 7, $44, $45, $FF
00015A9C 0744 45FF                  SonAni_LZSlide:	dc.b 7, $44, $45, $FF
00015AA0 0336 3742 3843 FF00        SonAni_Float3:	dc.b 3,	$36, $37, $42, $38, $43, $FF, 0
00015AA8 0336 FD00                  SonAni_Float4:	dc.b 3,	$36, $FD, 0 ;Unused?
00015AAC 0C47 48FE 0100             SonAni_Jump1:	dc.b $C, $47, $48, $FE, 1, 0
00015AB2 2F49 FD00                  SonAni_Jump2:	dc.b $2F, $49, $FD, 0
00015AB6                            		even
00015AB6                            		even
00015AB6                            
00015AB6                            ; ---------------------------------------------------------------------------
00015AB6                            ; Sonic	pattern	loading	subroutine
00015AB6                            ; ---------------------------------------------------------------------------
00015AB6                            
00015AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AB6                            
00015AB6                            
00015AB6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015AB6 7000                       		moveq	#0,d0
00015AB8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015ABC B038 F766                  		cmp.b	($FFFFF766).w,d0
00015AC0 6700                       		beq.s	locret_13C96
00015AC2 11C0 F766                  		move.b	d0,($FFFFF766).w
00015AC6 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015ACC D040                       		add.w	d0,d0
00015ACE D4F2 0000                  		adda.w	(a2,d0.w),a2
00015AD2 7A00                       		moveq	#0,d5
00015AD4 1A1A                       		move.b	(a2)+,d5
00015AD6 5345                       		subq.w	#1,d5
00015AD8 6B00                       		bmi.s	locret_13C96
00015ADA 383C F000                  		move.w	#$F000,d4
00015ADE 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015AE4                            
00015AE4                            SPLC_ReadEntry:
00015AE4 7200                       		moveq	#0,d1
00015AE6 121A                       		move.b	(a2)+,d1
00015AE8 E149                       		lsl.w	#8,d1
00015AEA 121A                       		move.b	(a2)+,d1
00015AEC 3601                       		move.w	d1,d3
00015AEE E04B                       		lsr.w	#8,d3
00015AF0 0243 00F0                  		andi.w	#$F0,d3
00015AF4 0643 0010                  		addi.w	#$10,d3
00015AF8 0241 0FFF                  		andi.w	#$FFF,d1
00015AFC EB89                       		lsl.l	#5,d1
00015AFE D286                       		add.l	d6,d1
00015B00 3404                       		move.w	d4,d2
00015B02 D843                       		add.w	d3,d4
00015B04 D843                       		add.w	d3,d4
00015B06 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00015B0C 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015B10                            
00015B10                            locret_13C96:
00015B10 4E75                       		rts	
00015B12                            ; End of function LoadSonicDynPLC
00015B12                            
00015B12                            ; ===========================================================================
00015B12                            ; ---------------------------------------------------------------------------
00015B12                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015B12                            ; ---------------------------------------------------------------------------
00015B12                            
00015B12                            Obj0A:					; XREF: Obj_Index
00015B12 7000                       		moveq	#0,d0
00015B14 1028 0024                  		move.b	$24(a0),d0
00015B18 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015B1C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015B20                            ; ===========================================================================
00015B20 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015B24 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015B28 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015B2C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015B30 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015B32                            ; ===========================================================================
00015B32                            
00015B32                            Obj0A_Main:				; XREF: Obj0A_Index
00015B32 5428 0024                  		addq.b	#2,$24(a0)
00015B36 217C 0001 4542 0004        		move.l	#Map_obj64,4(a0)
00015B3E 317C 8348 0002             		move.w	#$8348,2(a0)
00015B44 117C 0084 0001             		move.b	#$84,1(a0)
00015B4A 117C 0010 0019             		move.b	#$10,$19(a0)
00015B50 117C 0001 0018             		move.b	#1,$18(a0)
00015B56 1028 0028                  		move.b	$28(a0),d0
00015B5A 6A00                       		bpl.s	loc_13D00
00015B5C 5028 0024                  		addq.b	#8,$24(a0)
00015B60 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B68 317C 0440 0002             		move.w	#$440,2(a0)
00015B6E 0240 007F                  		andi.w	#$7F,d0
00015B72 1140 0033                  		move.b	d0,$33(a0)
00015B76 6000 0000                  		bra.w	Obj0A_Countdown
00015B7A                            ; ===========================================================================
00015B7A                            
00015B7A                            loc_13D00:
00015B7A 1140 001C                  		move.b	d0,$1C(a0)
00015B7E 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B84 317C FF78 0012             		move.w	#-$88,$12(a0)
00015B8A                            
00015B8A                            Obj0A_Animate:				; XREF: Obj0A_Index
00015B8A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B90 4EB9 0000 C138             		jsr	AnimateSprite
00015B96                            
00015B96                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015B96 3038 F646                  		move.w	($FFFFF646).w,d0
00015B9A B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015B9E 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00015BA0 117C 0006 0024             		move.b	#6,$24(a0)
00015BA6 5E28 001C                  		addq.b	#7,$1C(a0)
00015BAA 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015BB0 6700                       		beq.s	Obj0A_Display
00015BB2 6000                       		bra.s	Obj0A_Display
00015BB4                            ; ===========================================================================
00015BB4                            
00015BB4                            Obj0A_Wobble:
00015BB4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015BB8 6700                       		beq.s	loc_13D44
00015BBA 5868 0030                  		addq.w	#4,$30(a0)
00015BBE                            
00015BBE                            loc_13D44:
00015BBE 1028 0026                  		move.b	$26(a0),d0
00015BC2 5228 0026                  		addq.b	#1,$26(a0)
00015BC6 0240 007F                  		andi.w	#$7F,d0
00015BCA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015BD0 1031 0000                  		move.b	(a1,d0.w),d0
00015BD4 4880                       		ext.w	d0
00015BD6 D068 0030                  		add.w	$30(a0),d0
00015BDA 3140 0008                  		move.w	d0,8(a0)
00015BDE 6100                       		bsr.s	Obj0A_ShowNumber
00015BE0 4EBA 958A                  		jsr	SpeedToPos
00015BE4 4A28 0001                  		tst.b	1(a0)
00015BE8 6A00                       		bpl.s	Obj0A_Delete
00015BEA 4EFA 959A                  		jmp	DisplaySprite
00015BEE                            ; ===========================================================================
00015BEE                            
00015BEE                            Obj0A_Delete:
00015BEE 4EFA 95D2                  		jmp	DeleteObject
00015BF2                            ; ===========================================================================
00015BF2                            
00015BF2                            Obj0A_Display:				; XREF: Obj0A_Index
00015BF2 6100                       		bsr.s	Obj0A_ShowNumber
00015BF4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BFA 4EB9 0000 C138             		jsr	AnimateSprite
00015C00 4EFA 9584                  		jmp	DisplaySprite
00015C04                            ; ===========================================================================
00015C04                            
00015C04                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015C04 4EFA 95BC                  		jmp	DeleteObject
00015C08                            ; ===========================================================================
00015C08                            
00015C08                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015C08 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015C0E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015C10 5368 0038                  		subq.w	#1,$38(a0)
00015C14 6600                       		bne.s	Obj0A_Display2
00015C16 117C 000E 0024             		move.b	#$E,$24(a0)
00015C1C 5E28 001C                  		addq.b	#7,$1C(a0)
00015C20 60D0                       		bra.s	Obj0A_Display
00015C22                            ; ===========================================================================
00015C22                            
00015C22                            Obj0A_Display2:
00015C22 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C28 4EB9 0000 C138             		jsr	AnimateSprite
00015C2E 4A28 0001                  		tst.b	1(a0)
00015C32 6A00                       		bpl.s	Obj0A_Delete3
00015C34 4EFA 9550                  		jmp	DisplaySprite
00015C38                            ; ===========================================================================
00015C38                            
00015C38                            Obj0A_Delete3:
00015C38 4EFA 9588                  		jmp	DeleteObject
00015C3C                            ; ===========================================================================
00015C3C                            
00015C3C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015C3C 4A68 0038                  		tst.w	$38(a0)
00015C40 6700                       		beq.s	locret_13E1A
00015C42 5368 0038                  		subq.w	#1,$38(a0)
00015C46 6600                       		bne.s	locret_13E1A
00015C48 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015C4E 6400                       		bcc.s	locret_13E1A
00015C50 317C 000F 0038             		move.w	#$F,$38(a0)
00015C56 4268 0012                  		clr.w	$12(a0)
00015C5A 117C 0080 0001             		move.b	#$80,1(a0)
00015C60 3028 0008                  		move.w	8(a0),d0
00015C64 9078 F700                  		sub.w	($FFFFF700).w,d0
00015C68 0640 0080                  		addi.w	#$80,d0
00015C6C 3140 0008                  		move.w	d0,8(a0)
00015C70 3028 000C                  		move.w	$C(a0),d0
00015C74 9078 F704                  		sub.w	($FFFFF704).w,d0
00015C78 0640 0080                  		addi.w	#$80,d0
00015C7C 3140 000A                  		move.w	d0,$A(a0)
00015C80 117C 000C 0024             		move.b	#$C,$24(a0)
00015C86                            
00015C86                            locret_13E1A:
00015C86 4E75                       		rts	
00015C88                            ; ===========================================================================
00015C88                            Obj0A_WobbleData:
00015C88 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015C99 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015CAA 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015CBB 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015CCB FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015CD8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CE5 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CF2 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015CFF FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015D08                            ; ===========================================================================
00015D08                            
00015D08                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015D08 4A68 002C                  		tst.w	$2C(a0)
00015D0C 6600 0000                  		bne.w	loc_13F86
00015D10 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015D16 6400 0000                  		bcc.w	locret_1408C
00015D1A 0838 0006 D022             		btst	#6,($FFFFD022).w
00015D20 6700 0000                  		beq.w	locret_1408C
00015D24 5368 0038                  		subq.w	#1,$38(a0)
00015D28 6A00 0000                  		bpl.w	loc_13FAC
00015D2C 317C 003B 0038             		move.w	#59,$38(a0)
00015D32 317C 0001 0036             		move.w	#1,$36(a0)
00015D38 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015D3E 0240 0001                  		andi.w	#1,d0
00015D42 1140 0034                  		move.b	d0,$34(a0)
00015D46 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015D4A 0C40 0019                  		cmpi.w	#$19,d0
00015D4E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015D50 0C40 0014                  		cmpi.w	#$14,d0
00015D54 6700                       		beq.s	Obj0A_WarnSound
00015D56 0C40 000F                  		cmpi.w	#$F,d0
00015D5A 6700                       		beq.s	Obj0A_WarnSound
00015D5C 0C40 000C                  		cmpi.w	#$C,d0
00015D60 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015D62 5328 0032                  		subq.b	#1,$32(a0)
00015D66 6A00                       		bpl.s	Obj0A_ReduceAir
00015D68 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015D6E 08E8 0007 0036             		bset	#7,$36(a0)
00015D74 6000                       		bra.s	Obj0A_ReduceAir
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015D76 303C 00C2                  		move.w	#$C2,d0
00015D7A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015D80                            
00015D80                            Obj0A_ReduceAir:
00015D80 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015D84 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015D88 6100 0000                  		bsr.w	StopDrowning
00015D8C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015D92 303C 00B2                  		move.w	#$B2,d0
00015D96 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play drowning sound
00015D9C 117C 000A 0034             		move.b	#$A,$34(a0)
00015DA2 317C 0001 0036             		move.w	#1,$36(a0)
00015DA8 317C 0078 002C             		move.w	#$78,$2C(a0)
00015DAE 2F08                       		move.l	a0,-(sp)
00015DB0 41F8 D000                  		lea	($FFFFD000).w,a0
00015DB4 6100 F936                  		bsr.w	Sonic_ResetOnFloor
00015DB8 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015DBE 08E8 0001 0022             		bset	#1,$22(a0)
00015DC4 08E8 0007 0002             		bset	#7,2(a0)
00015DCA 317C 0000 0012             		move.w	#0,$12(a0)
00015DD0 317C 0000 0010             		move.w	#0,$10(a0)
00015DD6 317C 0000 0014             		move.w	#0,$14(a0)
00015DDC 117C 000A 0024             		move.b  #$A,$24(a0)       ; Force the character to drown
00015DE2 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015DE8 11FC 0000 FE1E             		move.b  #0,($FFFFFE1E).w      ; Stop the timer immediately
00015DEE 11FC 0001 FFBC             		move.b	#1,($FFFFFFBC).w	; Sonic drowned flag
00015DF4 205F                       		movea.l	(sp)+,a0
00015DF6 4E75                       		rts	
00015DF8                            ; ===========================================================================
00015DF8                            
00015DF8                            loc_13F86:
00015DF8 5368 002C                  		subq.w  #1,$2C(a0)
00015DFC 6600                       		bne.s   loc_13FAC                       ; Make it jump straight to this location
00015DFE 11FC 0006 D024             		move.b  #6,($FFFFD024).w
00015E04 4E75                       		rts
00015E06                            ; ===========================================================================
00015E06                            
00015E06                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015E06 6000                       		bra.s	Obj0A_MakeItem
00015E08                            ; ===========================================================================
00015E08                            
00015E08                            loc_13FAC:
00015E08 4A68 0036                  		tst.w	$36(a0)
00015E0C 6700 0000                  		beq.w	locret_1408C
00015E10 5368 003A                  		subq.w	#1,$3A(a0)
00015E14 6A00 0000                  		bpl.w	locret_1408C
00015E18                            
00015E18                            Obj0A_MakeItem:
00015E18 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015E1E 0240 000F                  		andi.w	#$F,d0
00015E22 3140 003A                  		move.w	d0,$3A(a0)
00015E26 4EBA 97F2                  		jsr	SingleObjLoad
00015E2A 6600 0000                  		bne.w	locret_1408C
00015E2E 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015E32 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015E38 7006                       		moveq	#6,d0
00015E3A 0838 0000 D022             		btst	#0,($FFFFD022).w
00015E40 6700                       		beq.s	loc_13FF2
00015E42 4440                       		neg.w	d0
00015E44 137C 0040 0026             		move.b	#$40,$26(a1)
00015E4A                            
00015E4A                            loc_13FF2:
00015E4A D169 0008                  		add.w	d0,8(a1)
00015E4E 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015E54 137C 0006 0028             		move.b	#6,$28(a1)
00015E5A 4A68 002C                  		tst.w	$2C(a0)
00015E5E 6700 0000                  		beq.w	loc_1403E
00015E62 0268 0007 003A             		andi.w	#7,$3A(a0)
00015E68 0668 0000 003A             		addi.w	#0,$3A(a0)
00015E6E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015E72 0440 000C                  		subi.w	#$C,d0
00015E76 3340 000C                  		move.w	d0,$C(a1)
00015E7A 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015E80 1340 0026                  		move.b	d0,$26(a1)
00015E84 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E88 0200 0003                  		andi.b	#3,d0
00015E8C 6600                       		bne.s	loc_14082
00015E8E 137C 000E 0028             		move.b	#$E,$28(a1)
00015E94 6000                       		bra.s	loc_14082
00015E96                            ; ===========================================================================
00015E96                            
00015E96                            loc_1403E:
00015E96 0828 0007 0036             		btst	#7,$36(a0)
00015E9C 6700                       		beq.s	loc_14082
00015E9E 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015EA2 E24A                       		lsr.w	#1,d2
00015EA4 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015EAA 0240 0003                  		andi.w	#3,d0
00015EAE 6600                       		bne.s	loc_1406A
00015EB0 08E8 0006 0036             		bset	#6,$36(a0)
00015EB6 6600                       		bne.s	loc_14082
00015EB8 1342 0028                  		move.b	d2,$28(a1)
00015EBC 337C 001C 0038             		move.w	#$1C,$38(a1)
00015EC2                            
00015EC2                            loc_1406A:
00015EC2 4A28 0034                  		tst.b	$34(a0)
00015EC6 6600                       		bne.s	loc_14082
00015EC8 08E8 0006 0036             		bset	#6,$36(a0)
00015ECE 6600                       		bne.s	loc_14082
00015ED0 1342 0028                  		move.b	d2,$28(a1)
00015ED4 337C 001C 0038             		move.w	#$1C,$38(a1)
00015EDA                            
00015EDA                            loc_14082:
00015EDA 5328 0034                  		subq.b	#1,$34(a0)
00015EDE 6A00                       		bpl.s	locret_1408C
00015EE0 4268 0036                  		clr.w	$36(a0)
00015EE4                            
00015EE4                            locret_1408C:
00015EE4 4E75                       		rts	
00015EE6                            
00015EE6                            ; ---------------------------------------------------------------------------
00015EE6                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015EE6                            ; ---------------------------------------------------------------------------
00015EE6                            
00015EE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EE6                            
00015EE6                            
00015EE6                            StopDrowning:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015EE6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015EEC 4238 D372                  		clr.b	($FFFFD372).w
00015EF0 4E75                       		rts	
00015EF2                            ; End of function StopDrowning
00015EF2                            
00015EF2                            ; ===========================================================================
00015EF2                            Ani_obj0A:
00015EF2                            	include "_anim\obj0A.asm"
00015EF2                            ; ---------------------------------------------------------------------------
00015EF2                            ; Animation script - countdown numbers and bubbles (LZ)
00015EF2                            ; ---------------------------------------------------------------------------
00015EF2 0000                       		dc.w byte_140D6-Ani_obj0A
00015EF4 0000                       		dc.w byte_140E0-Ani_obj0A
00015EF6 0000                       		dc.w byte_140EA-Ani_obj0A
00015EF8 0000                       		dc.w byte_140F4-Ani_obj0A
00015EFA 0000                       		dc.w byte_140FE-Ani_obj0A
00015EFC 0000                       		dc.w byte_14108-Ani_obj0A
00015EFE 0000                       		dc.w byte_14112-Ani_obj0A
00015F00 0000                       		dc.w byte_14118-Ani_obj0A
00015F02 0000                       		dc.w byte_14120-Ani_obj0A
00015F04 0000                       		dc.w byte_14128-Ani_obj0A
00015F06 0000                       		dc.w byte_14130-Ani_obj0A
00015F08 0000                       		dc.w byte_14138-Ani_obj0A
00015F0A 0000                       		dc.w byte_14140-Ani_obj0A
00015F0C 0000                       		dc.w byte_14148-Ani_obj0A
00015F0E 0000                       		dc.w byte_1414A-Ani_obj0A
00015F10 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015F1A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015F24 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015F2E 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015F38 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015F42 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015F4C 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015F52 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015F5A 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015F62 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015F6A 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015F72 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015F7A 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015F82 0EFC                       byte_14148:	dc.b $E, $FC
00015F84 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015F8A                            		even
00015F8A                            		even
00015F8A                            
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            ; Sprite mappings - drowning countdown numbers (LZ)
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            Map_obj0A:
00015F8A                            	include "_maps\obj0A.asm"
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            ; Sprite mappings - drowning countdown numbers (LZ)
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A 0000                       		dc.w byte_14152-Map_obj0A
00015F8C 01                         byte_14152:	dc.b 1
00015F8D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015F92                            		even
00015F92                            		even
00015F92                            ; ===========================================================================
00015F92                            LoadShieldDPLC:
00015F92 2C3C 0000 0000             		move.l	#Art_Shield,d6
00015F98 6000                       		bra.s	LoadShieldStarsDPLC
00015F9A                            		
00015F9A                            LoadStarsDPLC:
00015F9A 2C3C 0000 0000             		move.l	#Art_Stars,d6
00015FA0                            
00015FA0                            LoadShieldStarsDPLC:
00015FA0 45F9 0000 0000             		lea	(ShieldStarsDPLC).l,a2
00015FA6 383C A820                  		move.w	#$541*$20,d4
00015FAA 4EF9 0000 0000             		jmp	LoadDPLC
00015FB0                            ; ===========================================================================
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            ; Object 38 - shield and invincibility stars
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            
00015FB0                            Obj38:					; XREF: Obj_Index
00015FB0 7000                       		moveq	#0,d0
00015FB2 1028 0024                  		move.b	$24(a0),d0
00015FB6 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015FBA 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015FBE                            ; ===========================================================================
00015FBE 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015FC0 0000                       		dc.w Obj38_Shield-Obj38_Index
00015FC2 0000                       		dc.w Obj38_Stars-Obj38_Index
00015FC4                            ; ===========================================================================
00015FC4                            
00015FC4                            Obj38_Main:				; XREF: Obj38_Index
00015FC4 5428 0024                  		addq.b	#2,$24(a0)
00015FC8 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015FD0 117C 0004 0001             		move.b	#4,1(a0)
00015FD6 117C 0001 0018             		move.b	#1,$18(a0)
00015FDC 117C 0010 0019             		move.b	#$10,$19(a0)
00015FE2 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015FE8 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015FEC 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015FEE 4E75                       		rts	
00015FF0                            ; ===========================================================================
00015FF0                            
00015FF0                            Obj38_DoStars:
00015FF0 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015FF4 4E75                       		rts	
00015FF6                            ; ===========================================================================
00015FF6                            
00015FF6                            Obj38_Shield:				; XREF: Obj38_Index
00015FF6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015FFA 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015FFC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00016000 6700                       		beq.s	Obj38_Delete	; if not, branch
00016002 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00016008 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001600E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00016014 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001601A 4EB9 0000 C138             		jsr	AnimateSprite
00016020 4EBA FF70                  		jsr	LoadShieldDPLC
00016024 4EFA 9160                  		jmp	DisplaySprite
00016028                            ; ===========================================================================
00016028                            
00016028                            Obj38_RmvShield:
00016028 4E75                       		rts	
0001602A                            ; ===========================================================================
0001602A                            
0001602A                            Obj38_Delete:
0001602A 4EFA 9196                  		jmp	DeleteObject
0001602E                            ; ===========================================================================
0001602E                            
0001602E                            Obj38_Stars:				; XREF: Obj38_Index
0001602E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00016032 6700                       		beq.s	Obj38_Delete2	; if not, branch
00016034 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00016038 1228 001C                  		move.b	$1C(a0),d1
0001603C 5301                       		subq.b	#1,d1
0001603E 6000                       		bra.s	Obj38_StarTrail
00016040                            ; ===========================================================================
00016040 E909                       		lsl.b	#4,d1
00016042 5801                       		addq.b	#4,d1
00016044 9001                       		sub.b	d1,d0
00016046 1228 0030                  		move.b	$30(a0),d1
0001604A 9001                       		sub.b	d1,d0
0001604C 5801                       		addq.b	#4,d1
0001604E 0201 000F                  		andi.b	#$F,d1
00016052 1141 0030                  		move.b	d1,$30(a0)
00016056 6000                       		bra.s	Obj38_StarTrail2a
00016058                            ; ===========================================================================
00016058                            
00016058                            Obj38_StarTrail:			; XREF: Obj38_Stars
00016058 E709                       		lsl.b	#3,d1
0001605A 1401                       		move.b	d1,d2
0001605C D201                       		add.b	d1,d1
0001605E D202                       		add.b	d2,d1
00016060 5801                       		addq.b	#4,d1
00016062 9001                       		sub.b	d1,d0
00016064 1228 0030                  		move.b	$30(a0),d1
00016068 9001                       		sub.b	d1,d0
0001606A 5801                       		addq.b	#4,d1
0001606C 0C01 0018                  		cmpi.b	#$18,d1
00016070 6500                       		bcs.s	Obj38_StarTrail2
00016072 7200                       		moveq	#0,d1
00016074                            
00016074                            Obj38_StarTrail2:
00016074 1141 0030                  		move.b	d1,$30(a0)
00016078                            
00016078                            Obj38_StarTrail2a:
00016078 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001607C 43F1 0000                  		lea	(a1,d0.w),a1
00016080 3159 0008                  		move.w	(a1)+,8(a0)
00016084 3159 000C                  		move.w	(a1)+,$C(a0)
00016088 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001608E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00016094 4EB9 0000 C138             		jsr	AnimateSprite
0001609A 4EBA FEFE                  		jsr	LoadStarsDPLC
0001609E 4EFA 90E6                  		jmp	DisplaySprite
000160A2                            ; ===========================================================================
000160A2                            
000160A2                            Obj38_Delete2:				; XREF: Obj38_Stars
000160A2 4EFA 911E                  		jmp	DeleteObject
000160A6                            ; ===========================================================================
000160A6                            	
000160A6                            ShieldStarsDPLC:
000160A6                            		include "_inc/obj38_DPLC.asm"
000160A6                            ; --------------------------------------------------------------------------------
000160A6                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
000160A6                            
000160A6                            SME_wct8N:	
000160A6 0000 0000                  		dc.w SME_wct8N_84-SME_wct8N, SME_wct8N_85-SME_wct8N	
000160AA 0000 0000                  		dc.w SME_wct8N_8E-SME_wct8N, SME_wct8N_97-SME_wct8N	
000160AE 0000 0000                  		dc.w SME_wct8N_A0-SME_wct8N, SME_wct8N_A9-SME_wct8N	
000160B2 0000 0000                  		dc.w SME_wct8N_B2-SME_wct8N, SME_wct8N_BB-SME_wct8N	
000160B6 0000 0000                  		dc.w SME_wct8N_C4-SME_wct8N, SME_wct8N_C9-SME_wct8N	
000160BA 0000 0000                  		dc.w SME_wct8N_D2-SME_wct8N, SME_wct8N_D7-SME_wct8N	
000160BE 0000 0000                  		dc.w SME_wct8N_DE-SME_wct8N, SME_wct8N_E9-SME_wct8N	
000160C2 0000 0000                  		dc.w SME_wct8N_F6-SME_wct8N, SME_wct8N_FF-SME_wct8N	
000160C6 0000 0000                  		dc.w SME_wct8N_10A-SME_wct8N, SME_wct8N_113-SME_wct8N	
000160CA 0000 0000                  		dc.w SME_wct8N_11E-SME_wct8N, SME_wct8N_127-SME_wct8N	
000160CE 0000 0000                  		dc.w SME_wct8N_12C-SME_wct8N, SME_wct8N_131-SME_wct8N	
000160D2 0000 0000                  		dc.w SME_wct8N_13A-SME_wct8N, SME_wct8N_13F-SME_wct8N	
000160D6 0000 0000                  		dc.w SME_wct8N_146-SME_wct8N, SME_wct8N_153-SME_wct8N	
000160DA 0000 0000                  		dc.w SME_wct8N_160-SME_wct8N, SME_wct8N_169-SME_wct8N	
000160DE 0000 0000                  		dc.w SME_wct8N_174-SME_wct8N, SME_wct8N_17D-SME_wct8N	
000160E2 0000 0000                  		dc.w SME_wct8N_188-SME_wct8N, SME_wct8N_18D-SME_wct8N	
000160E6 0000 0000                  		dc.w SME_wct8N_192-SME_wct8N, SME_wct8N_197-SME_wct8N	
000160EA 0000 0000                  		dc.w SME_wct8N_19C-SME_wct8N, SME_wct8N_1A5-SME_wct8N	
000160EE 0000 0000                  		dc.w SME_wct8N_1AE-SME_wct8N, SME_wct8N_1BB-SME_wct8N	
000160F2 0000 0000                  		dc.w SME_wct8N_1C8-SME_wct8N, SME_wct8N_1CD-SME_wct8N	
000160F6 0000 0000                  		dc.w SME_wct8N_1D2-SME_wct8N, SME_wct8N_1D7-SME_wct8N	
000160FA 0000 0000                  		dc.w SME_wct8N_1DC-SME_wct8N, SME_wct8N_1E5-SME_wct8N	
000160FE 0000 0000                  		dc.w SME_wct8N_1EC-SME_wct8N, SME_wct8N_1F5-SME_wct8N	
00016102 0000 0000                  		dc.w SME_wct8N_1FC-SME_wct8N, SME_wct8N_201-SME_wct8N	
00016106 0000 0000                  		dc.w SME_wct8N_20A-SME_wct8N, SME_wct8N_211-SME_wct8N	
0001610A 0000 0000                  		dc.w SME_wct8N_216-SME_wct8N, SME_wct8N_21F-SME_wct8N	
0001610E 0000 0000                  		dc.w SME_wct8N_228-SME_wct8N, SME_wct8N_22F-SME_wct8N	
00016112 0000 0000                  		dc.w SME_wct8N_236-SME_wct8N, SME_wct8N_23D-SME_wct8N	
00016116 0000 0000                  		dc.w SME_wct8N_240-SME_wct8N, SME_wct8N_247-SME_wct8N	
0001611A 0000 0000                  		dc.w SME_wct8N_24E-SME_wct8N, SME_wct8N_257-SME_wct8N	
0001611E 0000 0000                  		dc.w SME_wct8N_260-SME_wct8N, SME_wct8N_265-SME_wct8N	
00016122 0000 0000                  		dc.w SME_wct8N_26C-SME_wct8N, SME_wct8N_271-SME_wct8N	
00016126 0000 0000                  		dc.w SME_wct8N_278-SME_wct8N, SME_wct8N_283-SME_wct8N	
0001612A 00                         SME_wct8N_84:	dc.b 0	
0001612B 0480 0080 0980 0080 09     SME_wct8N_85:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016134 0480 1280 1280 1280 12     SME_wct8N_8E:	dc.b 4, $80, $12, $80, $12, $80, $12, $80, $12	
0001613D 0480 0080 0980 0080 09     SME_wct8N_97:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016146 0480 0080 0980 0080 09     SME_wct8N_A0:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
0001614F 0480 0080 0980 0080 09     SME_wct8N_A9:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016158 0480 1280 1B80 1280 1B     SME_wct8N_B2:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
00016161 0480 1280 1B80 1280 1B     SME_wct8N_BB:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
0001616A 0250 5280 58               SME_wct8N_C4:	dc.b 2, $50, $52, $80, $58	
0001616F 0450 5250 6150 6710 6D     SME_wct8N_C9:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00016178 0250 52B0 6F               SME_wct8N_D2:	dc.b 2, $50, $52, $B0, $6F	
0001617D 0370 3030 7B50 7F          SME_wct8N_D7:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00016184 0550 8B20 9150 9400 9A53+  SME_wct8N_DE:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
0001618F 0650 8510 9B30 9D50 A130+  SME_wct8N_E9:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
0001619C 0450 AC10 B270 B420 BC     SME_wct8N_F6:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
000161A5 0530 C570 C920 D110 D453+  SME_wct8N_FF:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
000161B0 0450 BF10 D670 D820 E0     SME_wct8N_10A:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
000161B9 0550 8510 9B00 9170 E320+  SME_wct8N_113:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
000161C4 0470 EE50 F610 FC50 FE     SME_wct8N_11E:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
000161CD 0270 EEB1 04               SME_wct8N_127:	dc.b 2, $70, $EE, $B1, 4	
000161D2 0251 1081 16               SME_wct8N_12C:	dc.b 2, $51, $10, $81, $16	
000161D7 0451 1051 1F11 2551 27     SME_wct8N_131:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
000161E0 0251 10B1 2D               SME_wct8N_13A:	dc.b 2, $51, $10, $B1, $2D	
000161E5 0370 EE01 0481 39          SME_wct8N_13F:	dc.b 3, $70, $EE, 1, 4, $81, $39	
000161EC 0611 4811 4A81 4C01 5501+  SME_wct8N_146:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
000161F9 0651 4221 5711 5A11 5C81+  SME_wct8N_153:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00016206 0451 6711 6D81 6F11 78     SME_wct8N_160:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
0001620F 0521 8011 8371 8521 8D53+  SME_wct8N_169:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
0001621A 0451 7A11 9081 9211 9B     SME_wct8N_174:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00016223 0551 4281 9D11 5C11 A603+  SME_wct8N_17D:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
0001622E 0251 A8B1 AE               SME_wct8N_188:	dc.b 2, $51, $A8, $B1, $AE	
00016233 0250 52B1 BA               SME_wct8N_18D:	dc.b 2, $50, $52, $B1, $BA	
00016238 0251 A8B1 C6               SME_wct8N_192:	dc.b 2, $51, $A8, $B1, $C6	
0001623D 0250 52B1 D2               SME_wct8N_197:	dc.b 2, $50, $52, $B1, $D2	
00016242 0451 DE11 E4B1 E601 F2     SME_wct8N_19C:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
0001624B 0451 F311 F9B1 FB03 26     SME_wct8N_1A5:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00016254 0612 07B2 0913 9803 9A13+  SME_wct8N_1AE:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00016261 06B2 1513 2713 A313 C913+  SME_wct8N_1BB:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
0001626E 0252 21B2 27               SME_wct8N_1C8:	dc.b 2, $52, $21, $B2, $27	
00016273 0251 10B2 33               SME_wct8N_1CD:	dc.b 2, $51, $10, $B2, $33	
00016278 0252 21B2 3F               SME_wct8N_1D2:	dc.b 2, $52, $21, $B2, $3F	
0001627D 0251 10B2 4B               SME_wct8N_1D7:	dc.b 2, $51, $10, $B2, $4B	
00016282 0452 5712 5DB2 5F02 6B     SME_wct8N_1DC:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
0001628B 0372 6CB2 7403 DF          SME_wct8N_1E5:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00016292 0412 80B2 8202 6B53 D9     SME_wct8N_1EC:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
0001629B 03B2 8E03 D073 D1          SME_wct8N_1F5:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
000162A2 0234 57B4 4B               SME_wct8N_1FC:	dc.b 2, $34, $57, $B4, $4B	
000162A7 0434 6A74 5B34 6324 67     SME_wct8N_201:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
000162B0 0334 7DB4 6E24 7A          SME_wct8N_20A:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
000162B7 0252 9AB2 A0               SME_wct8N_211:	dc.b 2, $52, $9A, $B2, $A0	
000162BC 0452 AC72 B212 BA02 BC     SME_wct8N_216:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
000162C5 0412 BD72 BF22 C702 CA     SME_wct8N_21F:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
000162CE 0322 CB22 CEF2 D1          SME_wct8N_228:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
000162D5 03B2 E172 ED00 6F          SME_wct8N_22F:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
000162DC 0372 F532 FD23 01          SME_wct8N_236:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
000162E3 0183 04                    SME_wct8N_23D:	dc.b 1, $83, 4	
000162E6 0373 0D03 1533 16          SME_wct8N_240:	dc.b 3, $73, $D, 3, $15, $33, $16	
000162ED 03B3 2913 3503 37          SME_wct8N_247:	dc.b 3, $B3, $29, $13, $35, 3, $37	
000162F4 04B3 3833 4403 4803 49     SME_wct8N_24E:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
000162FD 04B3 4A33 5603 5A03 5B     SME_wct8N_257:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00016306 0283 5C73 65               SME_wct8N_260:	dc.b 2, $83, $5C, $73, $65	
0001630B 0383 6D23 7613 79          SME_wct8N_265:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00016312 0283 7B73 84               SME_wct8N_26C:	dc.b 2, $83, $7B, $73, $84	
00016317 0383 6D23 8C13 8F          SME_wct8N_271:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
0001631E 0573 A613 AE53 B033 B603+  SME_wct8N_278:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00016329 0573 BB13 AE53 C333 B603+  SME_wct8N_283:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00016334                            		even
00016334                            		even
00016334                            ; ===========================================================================
00016334                            ; ---------------------------------------------------------------------------
00016334                            ; Object 4A - special stage entry from beta
00016334                            ; ---------------------------------------------------------------------------
00016334                            
00016334                            Obj4A:					; XREF: Obj_Index
00016334 7000                       		moveq	#0,d0
00016336 1028 0024                  		move.b	$24(a0),d0
0001633A 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001633E 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00016342                            ; ===========================================================================
00016342 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00016344 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00016346 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00016348                            ; ===========================================================================
00016348                            
00016348                            Obj4A_Main:				; XREF: Obj4A_Index
00016348 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001634C 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001634E 4E75                       		rts	
00016350                            ; ===========================================================================
00016350                            
00016350                            Obj4A_Main2:
00016350 5428 0024                  		addq.b	#2,$24(a0)
00016354 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001635C 117C 0004 0001             		move.b	#4,1(a0)
00016362 117C 0001 0018             		move.b	#1,$18(a0)
00016368 117C 0038 0019             		move.b	#$38,$19(a0)
0001636E 317C 0541 0002             		move.w	#$541,2(a0)
00016374 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001637A                            
0001637A                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001637A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00016380 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00016386 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001638C 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00016392 4EB9 0000 C138             		jsr	AnimateSprite
00016398 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001639E 6600                       		bne.s	Obj4A_Display
000163A0 4A38 D000                  		tst.b	($FFFFD000).w
000163A4 6700                       		beq.s	Obj4A_Display
000163A6 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000163AC 303C 00A8                  		move.w	#$A8,d0
000163B0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000163B6                            
000163B6                            Obj4A_Display:
000163B6 4EFA 8DCE                  		jmp	DisplaySprite
000163BA                            ; ===========================================================================
000163BA                            
000163BA                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000163BA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000163BE 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000163C0 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000163C6 4EFA 8DFA                  		jmp	DeleteObject
000163CA                            ; ===========================================================================
000163CA                            
000163CA                            Obj4A_Wait:
000163CA 4E75                       		rts	
000163CC                            ; ===========================================================================
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            ; Object 08 - water splash (LZ)
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            
000163CC                            Obj08:					; XREF: Obj_Index
000163CC 7000                       		moveq	#0,d0
000163CE 1028 0024                  		move.b	$24(a0),d0
000163D2 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000163D6 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000163DA                            ; ===========================================================================
000163DA 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000163DC 0000                       		dc.w Obj08_Display-Obj08_Index
000163DE 0000                       		dc.w Obj08_Delete-Obj08_Index
000163E0                            ; ===========================================================================
000163E0                            
000163E0                            Obj08_Main:				; XREF: Obj08_Index
000163E0 5428 0024                  		addq.b	#2,$24(a0)
000163E4 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000163EC 0028 0004 0001             		ori.b	#4,1(a0)
000163F2 117C 0001 0018             		move.b	#1,$18(a0)
000163F8 117C 0010 0019             		move.b	#$10,$19(a0)
000163FE 317C 4259 0002             		move.w	#$4259,2(a0)
00016404 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001640A                            
0001640A                            Obj08_Display:				; XREF: Obj08_Index
0001640A 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00016410 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016416 4EB9 0000 C138             		jsr	AnimateSprite
0001641C 4EFA 8D68                  		jmp	DisplaySprite
00016420                            ; ===========================================================================
00016420                            
00016420                            Obj08_Delete:				; XREF: Obj08_Index
00016420 4EFA 8DA0                  		jmp	DeleteObject	; delete when animation	is complete
00016424                            ; ===========================================================================
00016424                            Ani_obj38:
00016424                            	include "_anim\obj38.asm"
00016424                            ; ---------------------------------------------------------------------------
00016424                            ; Animation script - shield and invincibility stars
00016424                            ; ---------------------------------------------------------------------------
00016424 0000                       		dc.w byte_14356-Ani_obj38
00016426 0000                       		dc.w byte_1435E-Ani_obj38
00016428 0000                       		dc.w byte_14364-Ani_obj38
0001642A 0000                       		dc.w byte_1437E-Ani_obj38
0001642C 0000                       		dc.w byte_14398-Ani_obj38
0001642E 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016436 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001643C 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001644D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00016456 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00016467 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00016470 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00016481 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001648A                            		even
0001648A                            		even
0001648A                            
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            ; Sprite mappings - shield and invincibility stars
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            Map_obj38:
0001648A                            	include "_maps\obj38.asm"
0001648A                            ; --------------------------------------------------------------------------------
0001648A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001648A                            ; --------------------------------------------------------------------------------
0001648A                            
0001648A                            SME_yYnGN:	
0001648A 0000 0000                  		dc.w SME_yYnGN_10-SME_yYnGN, SME_yYnGN_11-SME_yYnGN	
0001648E 0000 0000                  		dc.w SME_yYnGN_26-SME_yYnGN, SME_yYnGN_3B-SME_yYnGN	
00016492 0000 0000                  		dc.w SME_yYnGN_50-SME_yYnGN, SME_yYnGN_65-SME_yYnGN	
00016496 0000 0000                  		dc.w SME_yYnGN_7A-SME_yYnGN, SME_yYnGN_8F-SME_yYnGN	
0001649A 00                         SME_yYnGN_10:	dc.b 0	
0001649B 04                         SME_yYnGN_11:	dc.b 4	
0001649C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000164A1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000164A6 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000164AB 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000164B0 04                         SME_yYnGN_26:	dc.b 4	
000164B1 E80A 0800 E8               		dc.b $E8, $A, 8, 0, $E8	
000164B6 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000164BB 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000164C0 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000164C5 04                         SME_yYnGN_3B:	dc.b 4	
000164C6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000164CB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000164D0 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000164D5 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000164DA 04                         SME_yYnGN_50:	dc.b 4	
000164DB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000164E0 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000164E5 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000164EA 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000164EF 04                         SME_yYnGN_65:	dc.b 4	
000164F0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000164F5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000164FA 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000164FF 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
00016504 04                         SME_yYnGN_7A:	dc.b 4	
00016505 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001650A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001650F 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016514 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016519 04                         SME_yYnGN_8F:	dc.b 4	
0001651A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001651F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016524 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016529 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001652E                            		even
0001652E                            		even
0001652E                            
0001652E                            Ani_obj4A:
0001652E                            	include "_anim\obj4A.asm"
0001652E                            ; ---------------------------------------------------------------------------
0001652E                            ; Animation script - special stage entry effect from beta
0001652E                            ; ---------------------------------------------------------------------------
0001652E 0000                       		dc.w byte_14458-Ani_obj4A
00016530 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00016544                            		even
00016544                            		even
00016544                            
00016544                            ; ---------------------------------------------------------------------------
00016544                            ; Sprite mappings - special stage entry	from beta
00016544                            ; ---------------------------------------------------------------------------
00016544                            Map_obj4A:
00016544                            	include "_maps\obj4A.asm"
00016544                            ; ---------------------------------------------------------------------------
00016544                            ; Sprite mappings - special stage entry	from beta
00016544                            ; ---------------------------------------------------------------------------
00016544 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00016548 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001654C 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00016550 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00016554 03                         byte_1447C:	dc.b 3
00016555 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001655A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001655F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00016564 03                         byte_1448C:	dc.b 3
00016565 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001656A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001656F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00016574 05                         byte_1449C:	dc.b 5
00016575 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001657A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001657F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00016584 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00016589 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001658E 09                         byte_144B6:	dc.b 9
0001658F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00016594 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00016599 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001659E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000165A3 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000165A8 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000165AD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000165B2 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000165B7 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000165BC 12                         byte_144E4:	dc.b $12
000165BD 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000165C2 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000165C7 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000165CC 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000165D1 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000165D6 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000165DB 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000165E0 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000165E5 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000165EA 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000165EF 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000165F4 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000165F9 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000165FE F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00016603 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00016608 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001660D 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00016612 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00016617 11                         byte_1453F:	dc.b $11
00016618 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001661D F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00016622 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00016627 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001662C 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00016631 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00016636 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001663B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00016640 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00016645 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001664A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001664F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00016654 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00016659 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001665E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00016663 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00016668 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001666D 09                         byte_14595:	dc.b 9
0001666E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00016673 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00016678 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001667D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00016682 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00016687 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001668C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00016691 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00016696 04                         		dc.b 4
00016697 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001669C                            		even
0001669C                            		even
0001669C                            
0001669C                            Ani_obj08:
0001669C                            	include "_anim\obj08.asm"
0001669C                            ; ---------------------------------------------------------------------------
0001669C                            ; Animation script - water splash (LZ)
0001669C                            ; ---------------------------------------------------------------------------
0001669C 0000                       		dc.w byte_145C6-Ani_obj08
0001669E 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000166A4                            		even
000166A4                            		even
000166A4                            
000166A4                            ; ---------------------------------------------------------------------------
000166A4                            ; Sprite mappings - water splash (LZ)
000166A4                            ; ---------------------------------------------------------------------------
000166A4                            Map_obj08:
000166A4                            	include "_maps\obj08.asm"
000166A4                            ; ---------------------------------------------------------------------------
000166A4                            ; Sprite mappings - water splash (LZ)
000166A4                            ; ---------------------------------------------------------------------------
000166A4 0000                       		dc.w byte_145D2-Map_obj08
000166A6 0000                       		dc.w byte_145DD-Map_obj08
000166A8 0000                       		dc.w byte_145E8-Map_obj08
000166AA 02                         byte_145D2:	dc.b 2
000166AB F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000166B0 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000166B5 02                         byte_145DD:	dc.b 2
000166B6 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000166BB EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000166C0 01                         byte_145E8:	dc.b 1
000166C1 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000166C6                            		even
000166C6                            		even
000166C6                            
000166C6                            
000166C6                            
000166C6                            
000166C6                            
000166C6                            
000166C6                            ; ===========================================================================
000166C6                            ; ---------------------------------------------------------------------------
000166C6                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000166C6                            ; ---------------------------------------------------------------------------
000166C6                            
000166C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166C6                            
000166C6                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000166C6 21F8 FFD0 F796             		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
000166CC 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
000166D0 6700                       		beq.s	SAP_First				; MJ: if not, branch
000166D2 21F8 FFD4 F796             		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
000166D8                            
000166D8                            SAP_First:
000166D8 0828 0003 0022             		btst	#3,$22(a0)
000166DE 6700                       		beq.s	loc_14602
000166E0 7000                       		moveq	#0,d0
000166E2 11C0 F768                  		move.b	d0,($FFFFF768).w
000166E6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166EA 4E75                       		rts	
000166EC                            ; ===========================================================================
000166EC                            
000166EC                            loc_14602:
000166EC 7003                       		moveq	#3,d0
000166EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000166F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166F6 1028 0026                  		move.b	$26(a0),d0
000166FA 0600 0020                  		addi.b	#$20,d0
000166FE 6A00                       		bpl.s	loc_14624
00016700 1028 0026                  		move.b	$26(a0),d0
00016704 6A00                       		bpl.s	loc_1461E
00016706 5300                       		subq.b	#1,d0
00016708                            
00016708                            loc_1461E:
00016708 0600 0020                  		addi.b	#$20,d0
0001670C 6000                       		bra.s	loc_14630
0001670E                            ; ===========================================================================
0001670E                            
0001670E                            loc_14624:
0001670E 1028 0026                  		move.b	$26(a0),d0
00016712 6A00                       		bpl.s	loc_1462C
00016714 5200                       		addq.b	#1,d0
00016716                            
00016716                            loc_1462C:
00016716 0600 001F                  		addi.b	#$1F,d0
0001671A                            
0001671A                            loc_14630:
0001671A 0200 00C0                  		andi.b	#$C0,d0
0001671E 0C00 0040                  		cmpi.b	#$40,d0
00016722 6700 0000                  		beq.w	Sonic_WalkVertL
00016726 0C00 0080                  		cmpi.b	#$80,d0
0001672A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001672E 0C00 00C0                  		cmpi.b	#$C0,d0
00016732 6700 0000                  		beq.w	Sonic_WalkVertR
00016736 3428 000C                  		move.w	$C(a0),d2
0001673A 3628 0008                  		move.w	8(a0),d3
0001673E 7000                       		moveq	#0,d0
00016740 1028 0016                  		move.b	$16(a0),d0
00016744 4880                       		ext.w	d0
00016746 D440                       		add.w	d0,d2
00016748 1028 0017                  		move.b	$17(a0),d0
0001674C 4880                       		ext.w	d0
0001674E D640                       		add.w	d0,d3
00016750 49F8 F768                  		lea	($FFFFF768).w,a4
00016754 367C 0010                  		movea.w	#$10,a3
00016758 3C3C 0000                  		move.w	#0,d6
0001675C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001675E 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00016762 3F01                       		move.w	d1,-(sp)
00016764 3428 000C                  		move.w	$C(a0),d2
00016768 3628 0008                  		move.w	8(a0),d3
0001676C 7000                       		moveq	#0,d0
0001676E 1028 0016                  		move.b	$16(a0),d0
00016772 4880                       		ext.w	d0
00016774 D440                       		add.w	d0,d2
00016776 1028 0017                  		move.b	$17(a0),d0
0001677A 4880                       		ext.w	d0
0001677C 4440                       		neg.w	d0
0001677E D640                       		add.w	d0,d3
00016780 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016784 367C 0010                  		movea.w	#$10,a3
00016788 3C3C 0000                  		move.w	#0,d6
0001678C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001678E 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00016792 301F                       		move.w	(sp)+,d0
00016794 6100 0000                  		bsr.w	Sonic_Angle
00016798 4A41                       		tst.w	d1
0001679A 6700                       		beq.s	locret_146BE
0001679C 6A00                       		bpl.s	loc_146C0
0001679E 0C41 FFF2                  		cmpi.w	#-$E,d1
000167A2 6D00                       		blt.s	locret_146E6
000167A4 D368 000C                  		add.w	d1,$C(a0)
000167A8                            
000167A8                            locret_146BE:
000167A8 4E75                       		rts	
000167AA                            ; ===========================================================================
000167AA                            
000167AA                            loc_146C0:
000167AA 0C41 000E                  		cmpi.w	#$E,d1
000167AE 6E00                       		bgt.s	loc_146CC
000167B0                            
000167B0                            loc_146C6:
000167B0 D368 000C                  		add.w	d1,$C(a0)
000167B4 4E75                       		rts	
000167B6                            ; ===========================================================================
000167B6                            
000167B6                            loc_146CC:
000167B6 4A28 0038                  		tst.b	$38(a0)
000167BA 66F4                       		bne.s	loc_146C6
000167BC 08E8 0001 0022             		bset	#1,$22(a0)
000167C2 08A8 0005 0022             		bclr	#5,$22(a0)
000167C8 117C 0001 001D             		move.b	#1,$1D(a0)
000167CE 4E75                       		rts	
000167D0                            ; ===========================================================================
000167D0                            
000167D0                            locret_146E6:
000167D0 4E75                       		rts	
000167D2                            ; End of function Sonic_AnglePos
000167D2                            
000167D2                            ; ===========================================================================
000167D2 2428 0008                  		move.l	8(a0),d2
000167D6 3028 0010                  		move.w	$10(a0),d0
000167DA 48C0                       		ext.l	d0
000167DC E180                       		asl.l	#8,d0
000167DE 9480                       		sub.l	d0,d2
000167E0 2142 0008                  		move.l	d2,8(a0)
000167E4 303C 0038                  		move.w	#$38,d0
000167E8 48C0                       		ext.l	d0
000167EA E180                       		asl.l	#8,d0
000167EC 9680                       		sub.l	d0,d3
000167EE 2143 000C                  		move.l	d3,$C(a0)
000167F2 4E75                       		rts	
000167F4                            ; ===========================================================================
000167F4                            
000167F4                            locret_1470A:
000167F4 4E75                       		rts	
000167F6                            ; ===========================================================================
000167F6 2628 000C                  		move.l	$C(a0),d3
000167FA 3028 0012                  		move.w	$12(a0),d0
000167FE 0440 0038                  		subi.w	#$38,d0
00016802 3140 0012                  		move.w	d0,$12(a0)
00016806 48C0                       		ext.l	d0
00016808 E180                       		asl.l	#8,d0
0001680A 9680                       		sub.l	d0,d3
0001680C 2143 000C                  		move.l	d3,$C(a0)
00016810 4E75                       		rts	
00016812 4E75                       		rts	
00016814                            ; ===========================================================================
00016814 2428 0008                  		move.l	8(a0),d2
00016818 2628 000C                  		move.l	$C(a0),d3
0001681C 3028 0010                  		move.w	$10(a0),d0
00016820 48C0                       		ext.l	d0
00016822 E180                       		asl.l	#8,d0
00016824 9480                       		sub.l	d0,d2
00016826 3028 0012                  		move.w	$12(a0),d0
0001682A 48C0                       		ext.l	d0
0001682C E180                       		asl.l	#8,d0
0001682E 9680                       		sub.l	d0,d3
00016830 2142 0008                  		move.l	d2,8(a0)
00016834 2143 000C                  		move.l	d3,$C(a0)
00016838 4E75                       		rts	
0001683A                            
0001683A                            ; ---------------------------------------------------------------------------
0001683A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001683A                            ; ---------------------------------------------------------------------------
0001683A                            
0001683A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001683A                            
0001683A                            
0001683A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001683A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001683E B240                       		cmp.w	d0,d1
00016840 6F00                       		ble.s	loc_1475E
00016842 1438 F768                  		move.b	($FFFFF768).w,d2
00016846 3200                       		move.w	d0,d1
00016848                            
00016848                            loc_1475E:
00016848 0802 0000                  		btst	#0,d2
0001684C 6600                       		bne.s	loc_1476A
0001684E 1142 0026                  		move.b	d2,$26(a0)
00016852 4E75                       		rts	
00016854                            ; ===========================================================================
00016854                            
00016854                            loc_1476A:
00016854 1428 0026                  		move.b	$26(a0),d2
00016858 0602 0020                  		addi.b	#$20,d2
0001685C 0202 00C0                  		andi.b	#$C0,d2
00016860 1142 0026                  		move.b	d2,$26(a0)
00016864 4E75                       		rts	
00016866                            ; End of function Sonic_Angle
00016866                            
00016866                            ; ---------------------------------------------------------------------------
00016866                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016866                            ; ---------------------------------------------------------------------------
00016866                            
00016866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016866                            
00016866                            
00016866                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016866 3428 000C                  		move.w	$C(a0),d2
0001686A 3628 0008                  		move.w	8(a0),d3
0001686E 7000                       		moveq	#0,d0
00016870 1028 0017                  		move.b	$17(a0),d0
00016874 4880                       		ext.w	d0
00016876 4440                       		neg.w	d0
00016878 D440                       		add.w	d0,d2
0001687A 1028 0016                  		move.b	$16(a0),d0
0001687E 4880                       		ext.w	d0
00016880 D640                       		add.w	d0,d3
00016882 49F8 F768                  		lea	($FFFFF768).w,a4
00016886 367C 0010                  		movea.w	#$10,a3
0001688A 3C3C 0000                  		move.w	#0,d6
0001688E 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016890 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016894 3F01                       		move.w	d1,-(sp)
00016896 3428 000C                  		move.w	$C(a0),d2
0001689A 3628 0008                  		move.w	8(a0),d3
0001689E 7000                       		moveq	#0,d0
000168A0 1028 0017                  		move.b	$17(a0),d0
000168A4 4880                       		ext.w	d0
000168A6 D440                       		add.w	d0,d2
000168A8 1028 0016                  		move.b	$16(a0),d0
000168AC 4880                       		ext.w	d0
000168AE D640                       		add.w	d0,d3
000168B0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000168B4 367C 0010                  		movea.w	#$10,a3
000168B8 3C3C 0000                  		move.w	#0,d6
000168BC 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000168BE 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000168C2 301F                       		move.w	(sp)+,d0
000168C4 6100 FF74                  		bsr.w	Sonic_Angle
000168C8 4A41                       		tst.w	d1
000168CA 6700                       		beq.s	locret_147F0
000168CC 6A00                       		bpl.s	loc_147F2
000168CE 0C41 FFF2                  		cmpi.w	#-$E,d1
000168D2 6D00 FF20                  		blt.w	locret_1470A
000168D6 D368 0008                  		add.w	d1,8(a0)
000168DA                            
000168DA                            locret_147F0:
000168DA 4E75                       		rts	
000168DC                            ; ===========================================================================
000168DC                            
000168DC                            loc_147F2:
000168DC 0C41 000E                  		cmpi.w	#$E,d1
000168E0 6E00                       		bgt.s	loc_147FE
000168E2                            
000168E2                            loc_147F8:
000168E2 D368 0008                  		add.w	d1,8(a0)
000168E6 4E75                       		rts	
000168E8                            ; ===========================================================================
000168E8                            
000168E8                            loc_147FE:
000168E8 4A28 0038                  		tst.b	$38(a0)
000168EC 66F4                       		bne.s	loc_147F8
000168EE 08E8 0001 0022             		bset	#1,$22(a0)
000168F4 08A8 0005 0022             		bclr	#5,$22(a0)
000168FA 117C 0001 001D             		move.b	#1,$1D(a0)
00016900 4E75                       		rts	
00016902                            ; End of function Sonic_WalkVertR
00016902                            
00016902                            ; ---------------------------------------------------------------------------
00016902                            ; Subroutine allowing Sonic to walk upside-down
00016902                            ; ---------------------------------------------------------------------------
00016902                            
00016902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016902                            
00016902                            
00016902                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00016902 3428 000C                  		move.w	$C(a0),d2
00016906 3628 0008                  		move.w	8(a0),d3
0001690A 7000                       		moveq	#0,d0
0001690C 1028 0016                  		move.b	$16(a0),d0
00016910 4880                       		ext.w	d0
00016912 9440                       		sub.w	d0,d2
00016914 0A42 000F                  		eori.w	#$F,d2
00016918 1028 0017                  		move.b	$17(a0),d0
0001691C 4880                       		ext.w	d0
0001691E D640                       		add.w	d0,d3
00016920 49F8 F768                  		lea	($FFFFF768).w,a4
00016924 367C FFF0                  		movea.w	#-$10,a3
00016928 3C3C 0800                  		move.w	#$0800,d6
0001692C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001692E 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00016932 3F01                       		move.w	d1,-(sp)
00016934 3428 000C                  		move.w	$C(a0),d2
00016938 3628 0008                  		move.w	8(a0),d3
0001693C 7000                       		moveq	#0,d0
0001693E 1028 0016                  		move.b	$16(a0),d0
00016942 4880                       		ext.w	d0
00016944 9440                       		sub.w	d0,d2
00016946 0A42 000F                  		eori.w	#$F,d2
0001694A 1028 0017                  		move.b	$17(a0),d0
0001694E 4880                       		ext.w	d0
00016950 9640                       		sub.w	d0,d3
00016952 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016956 367C FFF0                  		movea.w	#-$10,a3
0001695A 3C3C 0800                  		move.w	#$0800,d6
0001695E 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016960 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00016964 301F                       		move.w	(sp)+,d0
00016966 6100 FED2                  		bsr.w	Sonic_Angle
0001696A 4A41                       		tst.w	d1
0001696C 6700                       		beq.s	locret_14892
0001696E 6A00                       		bpl.s	loc_14894
00016970 0C41 FFF2                  		cmpi.w	#-$E,d1
00016974 6D00 FE5A                  		blt.w	locret_146E6
00016978 9368 000C                  		sub.w	d1,$C(a0)
0001697C                            
0001697C                            locret_14892:
0001697C 4E75                       		rts	
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            loc_14894:
0001697E 0C41 000E                  		cmpi.w	#$E,d1
00016982 6E00                       		bgt.s	loc_148A0
00016984                            
00016984                            loc_1489A:
00016984 9368 000C                  		sub.w	d1,$C(a0)
00016988 4E75                       		rts	
0001698A                            ; ===========================================================================
0001698A                            
0001698A                            loc_148A0:
0001698A 4A28 0038                  		tst.b	$38(a0)
0001698E 66F4                       		bne.s	loc_1489A
00016990 08E8 0001 0022             		bset	#1,$22(a0)
00016996 08A8 0005 0022             		bclr	#5,$22(a0)
0001699C 117C 0001 001D             		move.b	#1,$1D(a0)
000169A2 4E75                       		rts	
000169A4                            ; End of function Sonic_WalkCeiling
000169A4                            
000169A4                            ; ---------------------------------------------------------------------------
000169A4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000169A4                            ; ---------------------------------------------------------------------------
000169A4                            
000169A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169A4                            
000169A4                            
000169A4                            Sonic_WalkVertL:
000169A4 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
000169A8 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
000169AC 7000                       		moveq	#0,d0					; MJ: clear d0
000169AE 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
000169B2 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000169B4 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
000169B6 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
000169BA 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000169BC 9640                       		sub.w	d0,d3					; MJ: subtract from X position
000169BE 0A43 000F                  		eori.w	#$F,d3
000169C2 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
000169C6 367C FFF0                  		movea.w	#-$10,a3
000169CA 3C3C 0400                  		move.w	#$400,d6
000169CE 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000169D0 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000169D4 3F01                       		move.w	d1,-(sp)
000169D6 3428 000C                  		move.w	$C(a0),d2
000169DA 3628 0008                  		move.w	8(a0),d3
000169DE 7000                       		moveq	#0,d0
000169E0 1028 0017                  		move.b	$17(a0),d0
000169E4 4880                       		ext.w	d0
000169E6 D440                       		add.w	d0,d2
000169E8 1028 0016                  		move.b	$16(a0),d0
000169EC 4880                       		ext.w	d0
000169EE 9640                       		sub.w	d0,d3
000169F0 0A43 000F                  		eori.w	#$F,d3
000169F4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169F8 367C FFF0                  		movea.w	#-$10,a3
000169FC 3C3C 0400                  		move.w	#$400,d6
00016A00 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016A02 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016A06 301F                       		move.w	(sp)+,d0
00016A08 6100 FE30                  		bsr.w	Sonic_Angle
00016A0C 4A41                       		tst.w	d1
00016A0E 6700                       		beq.s	locret_14934
00016A10 6A00                       		bpl.s	loc_14936
00016A12 0C41 FFF2                  		cmpi.w	#-$E,d1
00016A16 6D00 FDDC                  		blt.w	locret_1470A
00016A1A 9368 0008                  		sub.w	d1,8(a0)
00016A1E                            
00016A1E                            locret_14934:
00016A1E 4E75                       		rts
00016A20                            
00016A20                            ; ===========================================================================
00016A20                            
00016A20                            loc_14936:
00016A20 0C41 000E                  		cmpi.w	#$E,d1
00016A24 6E00                       		bgt.s	loc_14942
00016A26                            
00016A26                            loc_1493C:
00016A26 9368 0008                  		sub.w	d1,8(a0)
00016A2A 4E75                       		rts	
00016A2C                            
00016A2C                            ; ===========================================================================
00016A2C                            
00016A2C                            loc_14942:
00016A2C 4A28 0038                  		tst.b	$38(a0)
00016A30 66F4                       		bne.s	loc_1493C
00016A32 08E8 0001 0022             		bset	#1,$22(a0)
00016A38 08A8 0005 0022             		bclr	#5,$22(a0)
00016A3E 117C 0001 001D             		move.b	#1,$1D(a0)
00016A44 4E75                       		rts	
00016A46                            ; End of function Sonic_WalkVertL
00016A46                            
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            ; Subroutine to	find which tile	the object is standing on
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            
00016A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A46                            
00016A46                            Floor_ChkTile:				; XREF: FindFloor; et al
00016A46 3002                       		move.w	d2,d0					; MJ: load Y position
00016A48 0240 0780                  		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
00016A4C D040                       		add.w	d0,d0					; MJ: multiply by 2
00016A4E 3203                       		move.w	d3,d1					; MJ: load X position
00016A50 EE49                       		lsr.w	#7,d1					; MJ: shift to right side
00016A52 0241 007F                  		andi.w	#$007F,d1				; MJ: get within 7F
00016A56 D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
00016A58 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
00016A5A 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
00016A5E 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
00016A62 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
00016A66 EF49                       		lsl.w	#$07,d1					; MJ: multiply by 80
00016A68 3002                       		move.w	d2,d0					; MJ: load Y position
00016A6A 0240 0070                  		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
00016A6E D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00016A70 3003                       		move.w	d3,d0					; MJ: load X position
00016A72 E648                       		lsr.w	#3,d0					; MJ: divide by 8
00016A74 0240 000E                  		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
00016A78 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00016A7A                            
00016A7A                            loc_14996:
00016A7A 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
00016A7C 4E75                       		rts						; MJ: return
00016A7E                            ; ===========================================================================
00016A7E                            
00016A7E                            loc_1499A:
00016A7E 0241 007F                  		andi.w	#$7F,d1
00016A82 0828 0006 0001             		btst	#6,1(a0)
00016A88 6700                       		beq.s	loc_149B2
00016A8A 5241                       		addq.w	#1,d1
00016A8C 0C41 0029                  		cmpi.w	#$29,d1
00016A90 6600                       		bne.s	loc_149B2
00016A92 323C 0051                  		move.w	#$51,d1
00016A96                            
00016A96                            loc_149B2:
00016A96 EE59                       		ror.w	#7,d1
00016A98 E459                       		ror.w	#2,d1
00016A9A 3002                       		move.w	d2,d0
00016A9C D040                       		add.w	d0,d0
00016A9E 0240 0070                  		andi.w	#$070,d0
00016AA2 D240                       		add.w	d0,d1
00016AA4 3003                       		move.w	d3,d0
00016AA6 E648                       		lsr.w	#3,d0
00016AA8 0240 000E                  		andi.w	#$0E,d0
00016AAC D240                       		add.w	d0,d1
00016AAE 2241                       		movea.l	d1,a1
00016AB0 4E75                       		rts
00016AB2                            ; End of function Floor_ChkTile
00016AB2                            
00016AB2                            
00016AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AB2                            
00016AB2                            
00016AB2                            ColisionChkLayer:
00016AB2 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
00016AB6 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
00016AB8 3800                       		move.w	d0,d4					; MJ: load block ID to d4
00016ABA 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
00016ABE 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00016AC2 E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00016AC4 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
00016AC6                            
00016AC6                            CCL_NoChange:
00016AC6 4E75                       		rts						; MJ: return
00016AC8                            
00016AC8                            
00016AC8                            FindFloor:
00016AC8 6100 FF7C                  		bsr.w	Floor_ChkTile
00016ACC 3011                       		move.w	(a1),d0
00016ACE 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
00016AD0 3800                       		move.w	d0,d4
00016AD2 0240 03FF                  		andi.w	#$3FF,d0
00016AD6 6700                       		beq.s	loc_149DE
00016AD8 0B04                       		btst	d5,d4
00016ADA 6600                       		bne.s	loc_149EC
00016ADC                            
00016ADC                            loc_149DE:
00016ADC D44B                       		add.w	a3,d2
00016ADE 6100 0000                  		bsr.w	FindFloor2
00016AE2 944B                       		sub.w	a3,d2
00016AE4 0641 0010                  		addi.w	#$10,d1
00016AE8 4E75                       		rts	
00016AEA                            ; ===========================================================================
00016AEA                            
00016AEA                            loc_149EC:
00016AEA 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
00016AEE 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
00016AF2 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
00016AF6 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
00016AF8 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016AFE 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
00016B02 E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
00016B04 3203                       		move.w	d3,d1					; MJ: load X position
00016B06 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
00016B0A 6700                       		beq.s	loc_14A12				; MJ: if not, branch
00016B0C 4641                       		not.w	d1					; MJ: reverse bits of the X position
00016B0E 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00016B10                            
00016B10                            loc_14A12:
00016B10 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
00016B14 6700                       		beq.s	loc_14A22				; MJ: if not, branch
00016B16 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
00016B1A 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00016B1C 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00016B20                            
00016B20                            loc_14A22:
00016B20 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00016B24 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
00016B26 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
00016B2C 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
00016B30 4880                       		ext.w	d0					; MJ: clear left byte
00016B32 BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
00016B34 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
00016B38 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
00016B3A 4440                       		neg.w	d0					; MJ: reverse solid value
00016B3C                            
00016B3C                            loc_14A3E:
00016B3C 4A40                       		tst.w	d0					; MJ: is the solid data null?
00016B3E 679C                       		beq.s	loc_149DE				; MJ: if so, branch
00016B40 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
00016B42 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
00016B46 6700                       		beq.s	loc_14A66				; MJ: if so, branch
00016B48 3202                       		move.w	d2,d1					; MJ: load Y position
00016B4A 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
00016B4E D041                       		add.w	d1,d0					; MJ: add to solid value
00016B50 323C 000F                  		move.w	#$F,d1					; MJ: set F
00016B54 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
00016B56 4E75                       		rts			; d1 = position?	; MJ: return
00016B58                            
00016B58                            ; ===========================================================================
00016B58                            
00016B58                            loc_14A5A:
00016B58 3202                       		move.w	d2,d1
00016B5A 0241 000F                  		andi.w	#$F,d1
00016B5E D041                       		add.w	d1,d0
00016B60 6A00 FF7A                  		bpl.w	loc_149DE
00016B64                            
00016B64                            loc_14A66:
00016B64 944B                       		sub.w	a3,d2
00016B66 6100 0000                  		bsr.w	FindFloor2
00016B6A D44B                       		add.w	a3,d2
00016B6C 0441 0010                  		subi.w	#$10,d1
00016B70 4E75                       		rts	
00016B72                            ; End of function FindFloor
00016B72                            
00016B72                            
00016B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B72                            
00016B72                            
00016B72                            FindFloor2:				; XREF: FindFloor
00016B72 6100 FED2                  		bsr.w	Floor_ChkTile
00016B76 3011                       		move.w	(a1),d0
00016B78 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016B7C 3800                       		move.w	d0,d4
00016B7E 0240 03FF                  		andi.w	#$3FF,d0
00016B82 6700                       		beq.s	loc_14A86
00016B84 0B04                       		btst	d5,d4
00016B86 6600                       		bne.s	loc_14A94
00016B88                            
00016B88                            loc_14A86:
00016B88 323C 000F                  		move.w	#$F,d1
00016B8C 3002                       		move.w	d2,d0
00016B8E 0240 000F                  		andi.w	#$F,d0
00016B92 9240                       		sub.w	d0,d1
00016B94 4E75                       		rts	
00016B96                            ; ===========================================================================
00016B96                            
00016B96                            loc_14A94:
00016B96 2478 F796                  		movea.l	($FFFFF796).w,a2
00016B9A 1032 0000                  		move.b	(a2,d0.w),d0
00016B9E 0240 00FF                  		andi.w	#$FF,d0
00016BA2 67E4                       		beq.s	loc_14A86
00016BA4 45F9 0000 0000             		lea	(AngleMap).l,a2
00016BAA 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016BAE E948                       		lsl.w	#4,d0
00016BB0 3203                       		move.w	d3,d1
00016BB2 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016BB6 6700                       		beq.s	loc_14ABA
00016BB8 4641                       		not.w	d1
00016BBA 4414                       		neg.b	(a4)
00016BBC                            
00016BBC                            loc_14ABA:
00016BBC 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016BC0 6700                       		beq.s	loc_14ACA
00016BC2 0614 0040                  		addi.b	#$40,(a4)
00016BC6 4414                       		neg.b	(a4)
00016BC8 0414 0040                  		subi.b	#$40,(a4)
00016BCC                            
00016BCC                            loc_14ACA:
00016BCC 0241 000F                  		andi.w	#$F,d1
00016BD0 D240                       		add.w	d0,d1
00016BD2 45F9 0000 0000             		lea	(CollArray1).l,a2
00016BD8 1032 1000                  		move.b	(a2,d1.w),d0
00016BDC 4880                       		ext.w	d0
00016BDE BD44                       		eor.w	d6,d4
00016BE0 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016BE4 6700                       		beq.s	loc_14AE6
00016BE6 4440                       		neg.w	d0
00016BE8                            
00016BE8                            loc_14AE6:
00016BE8 4A40                       		tst.w	d0
00016BEA 679C                       		beq.s	loc_14A86
00016BEC 6B00                       		bmi.s	loc_14AFC
00016BEE 3202                       		move.w	d2,d1
00016BF0 0241 000F                  		andi.w	#$F,d1
00016BF4 D041                       		add.w	d1,d0
00016BF6 323C 000F                  		move.w	#$F,d1
00016BFA 9240                       		sub.w	d0,d1
00016BFC 4E75                       		rts	
00016BFE                            ; ===========================================================================
00016BFE                            
00016BFE                            loc_14AFC:
00016BFE 3202                       		move.w	d2,d1
00016C00 0241 000F                  		andi.w	#$F,d1
00016C04 D041                       		add.w	d1,d0
00016C06 6A00 FF80                  		bpl.w	loc_14A86
00016C0A 4641                       		not.w	d1
00016C0C 4E75                       		rts	
00016C0E                            ; End of function FindFloor2
00016C0E                            
00016C0E                            
00016C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C0E                            
00016C0E                            
00016C0E                            FindWall:
00016C0E 6100 FE36                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
00016C12 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
00016C14 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016C18 3800                       		move.w	d0,d4					; MJ: copy to d4
00016C1A 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00016C1E 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00016C20 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00016C22 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00016C24                            
00016C24                            loc_14B1E:
00016C24 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
00016C26 6100 0000                  		bsr.w	FindWall2
00016C2A 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
00016C2C 0641 0010                  		addi.w	#$10,d1
00016C30 4E75                       		rts	
00016C32                            ; ===========================================================================
00016C32                            
00016C32                            loc_14B2C:
00016C32 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
00016C36 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
00016C3A 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
00016C3E 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
00016C40 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016C46 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00016C4A E948                       		lsl.w	#4,d0					; MJ: multiply by 10
00016C4C 3202                       		move.w	d2,d1					; MJ: load Y position
00016C4E 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
00016C52 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
00016C54 4641                       		not.w	d1
00016C56 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00016C5A 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016C5C 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
00016C60                            
00016C60                            loc_14B5A:
00016C60 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
00016C64 6700                       		beq.s	loc_14B62				; MJ: if not, branch
00016C66 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016C68                            
00016C68                            loc_14B62:
00016C68 0241 000F                  		andi.w	#$F,d1
00016C6C D240                       		add.w	d0,d1
00016C6E 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C74 1032 1000                  		move.b	(a2,d1.w),d0
00016C78 4880                       		ext.w	d0
00016C7A BD44                       		eor.w	d6,d4
00016C7C 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016C80 6700                       		beq.s	loc_14B7E
00016C82 4440                       		neg.w	d0
00016C84                            
00016C84                            loc_14B7E:
00016C84 4A40                       		tst.w	d0
00016C86 679C                       		beq.s	loc_14B1E
00016C88 6B00                       		bmi.s	loc_14B9A
00016C8A 0C00 0010                  		cmpi.b	#$10,d0
00016C8E 6700                       		beq.s	loc_14BA6
00016C90 3203                       		move.w	d3,d1
00016C92 0241 000F                  		andi.w	#$F,d1
00016C96 D041                       		add.w	d1,d0
00016C98 323C 000F                  		move.w	#$F,d1
00016C9C 9240                       		sub.w	d0,d1
00016C9E 4E75                       		rts	
00016CA0                            ; ===========================================================================
00016CA0                            
00016CA0                            loc_14B9A:
00016CA0 3203                       		move.w	d3,d1
00016CA2 0241 000F                  		andi.w	#$F,d1
00016CA6 D041                       		add.w	d1,d0
00016CA8 6A00 FF7A                  		bpl.w	loc_14B1E
00016CAC                            
00016CAC                            loc_14BA6:
00016CAC 964B                       		sub.w	a3,d3
00016CAE 6100 0000                  		bsr.w	FindWall2
00016CB2 D64B                       		add.w	a3,d3
00016CB4 0441 0010                  		subi.w	#$10,d1
00016CB8 4E75                       		rts	
00016CBA                            ; End of function FindWall
00016CBA                            
00016CBA                            
00016CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CBA                            
00016CBA                            
00016CBA                            FindWall2:				; XREF: FindWall
00016CBA 6100 FD8A                  		bsr.w	Floor_ChkTile
00016CBE 3011                       		move.w	(a1),d0
00016CC0 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016CC4 3800                       		move.w	d0,d4
00016CC6 0240 03FF                  		andi.w	#$3FF,d0
00016CCA 6700                       		beq.s	loc_14BC6
00016CCC 0B04                       		btst	d5,d4
00016CCE 6600                       		bne.s	loc_14BD4
00016CD0                            
00016CD0                            loc_14BC6:
00016CD0 323C 000F                  		move.w	#$F,d1
00016CD4 3003                       		move.w	d3,d0
00016CD6 0240 000F                  		andi.w	#$F,d0
00016CDA 9240                       		sub.w	d0,d1
00016CDC 4E75                       		rts	
00016CDE                            ; ===========================================================================
00016CDE                            
00016CDE                            loc_14BD4:
00016CDE 2478 F796                  		movea.l	($FFFFF796).w,a2
00016CE2 1032 0000                  		move.b	(a2,d0.w),d0
00016CE6 0240 00FF                  		andi.w	#$FF,d0
00016CEA 67E4                       		beq.s	loc_14BC6
00016CEC 45F9 0000 0000             		lea	(AngleMap).l,a2
00016CF2 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016CF6 E948                       		lsl.w	#4,d0
00016CF8 3202                       		move.w	d2,d1
00016CFA 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016CFE 6700                       		beq.s	loc_14C02
00016D00 4641                       		not.w	d1
00016D02 0614 0040                  		addi.b	#$40,(a4)
00016D06 4414                       		neg.b	(a4)
00016D08 0414 0040                  		subi.b	#$40,(a4)
00016D0C                            
00016D0C                            loc_14C02:
00016D0C 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016D10 6700                       		beq.s	loc_14C0A
00016D12 4414                       		neg.b	(a4)
00016D14                            
00016D14                            loc_14C0A:
00016D14 0241 000F                  		andi.w	#$F,d1
00016D18 D240                       		add.w	d0,d1
00016D1A 45F9 0000 0000             		lea	(CollArray2).l,a2
00016D20 1032 1000                  		move.b	(a2,d1.w),d0
00016D24 4880                       		ext.w	d0
00016D26 BD44                       		eor.w	d6,d4
00016D28 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016D2C 6700                       		beq.s	loc_14C26
00016D2E 4440                       		neg.w	d0
00016D30                            
00016D30                            loc_14C26:
00016D30 4A40                       		tst.w	d0
00016D32 679C                       		beq.s	loc_14BC6
00016D34 6B00                       		bmi.s	loc_14C3C
00016D36 3203                       		move.w	d3,d1
00016D38 0241 000F                  		andi.w	#$F,d1
00016D3C D041                       		add.w	d1,d0
00016D3E 323C 000F                  		move.w	#$F,d1
00016D42 9240                       		sub.w	d0,d1
00016D44 4E75                       		rts	
00016D46                            ; ===========================================================================
00016D46                            
00016D46                            loc_14C3C:
00016D46 3203                       		move.w	d3,d1
00016D48 0241 000F                  		andi.w	#$F,d1
00016D4C D041                       		add.w	d1,d0
00016D4E 6A00 FF80                  		bpl.w	loc_14BC6
00016D52 4641                       		not.w	d1
00016D54 4E75                       		rts	
00016D56                            ; End of function FindWall2
00016D56                            
00016D56                            ; ---------------------------------------------------------------------------
00016D56                            ; Unused floor/wall subroutine - logs something	to do with collision
00016D56                            ; ---------------------------------------------------------------------------
00016D56                            
00016D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D56                            
00016D56                            
00016D56                            FloorLog_Unk:				; XREF: Level
00016D56 4E75                       		rts	
00016D58                            
00016D58 43F9 0000 0000             		lea	(CollArray1).l,a1
00016D5E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016D64 363C 00FF                  		move.w	#$FF,d3
00016D68                            
00016D68                            loc_14C5E:
00016D68 7A10                       		moveq	#$10,d5
00016D6A 343C 000F                  		move.w	#$F,d2
00016D6E                            
00016D6E                            loc_14C64:
00016D6E 7800                       		moveq	#0,d4
00016D70 323C 000F                  		move.w	#$F,d1
00016D74                            
00016D74                            loc_14C6A:
00016D74 3019                       		move.w	(a1)+,d0
00016D76 EAA8                       		lsr.l	d5,d0
00016D78 D944                       		addx.w	d4,d4
00016D7A 51C9 FFF8                  		dbf	d1,loc_14C6A
00016D7E                            
00016D7E 34C4                       		move.w	d4,(a2)+
00016D80 92FC 0020                  		suba.w	#$20,a1
00016D84 5345                       		subq.w	#1,d5
00016D86 51CA FFE6                  		dbf	d2,loc_14C64
00016D8A                            
00016D8A D2FC 0020                  		adda.w	#$20,a1
00016D8E 51CB FFD8                  		dbf	d3,loc_14C5E
00016D92                            
00016D92 43F9 0000 0000             		lea	(CollArray1).l,a1
00016D98 45F9 0000 0000             		lea	(CollArray2).l,a2
00016D9E 6100                       		bsr.s	FloorLog_Unk2
00016DA0 43F9 0000 0000             		lea	(CollArray1).l,a1
00016DA6 45F9 0000 0000             		lea	(CollArray1).l,a2
00016DAC                            
00016DAC                            ; End of function FloorLog_Unk
00016DAC                            
00016DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DAC                            
00016DAC                            
00016DAC                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016DAC 363C 0FFF                  		move.w	#$FFF,d3
00016DB0                            
00016DB0                            loc_14CA6:
00016DB0 7400                       		moveq	#0,d2
00016DB2 323C 000F                  		move.w	#$F,d1
00016DB6 3019                       		move.w	(a1)+,d0
00016DB8 6700                       		beq.s	loc_14CD4
00016DBA 6B00                       		bmi.s	loc_14CBE
00016DBC                            
00016DBC                            loc_14CB2:
00016DBC E248                       		lsr.w	#1,d0
00016DBE 6400                       		bcc.s	loc_14CB8
00016DC0 5202                       		addq.b	#1,d2
00016DC2                            
00016DC2                            loc_14CB8:
00016DC2 51C9 FFF8                  		dbf	d1,loc_14CB2
00016DC6                            
00016DC6 6000                       		bra.s	loc_14CD6
00016DC8                            ; ===========================================================================
00016DC8                            
00016DC8                            loc_14CBE:
00016DC8 0C40 FFFF                  		cmpi.w	#-1,d0
00016DCC 6700                       		beq.s	loc_14CD0
00016DCE                            
00016DCE                            loc_14CC4:
00016DCE E348                       		lsl.w	#1,d0
00016DD0 6400                       		bcc.s	loc_14CCA
00016DD2 5302                       		subq.b	#1,d2
00016DD4                            
00016DD4                            loc_14CCA:
00016DD4 51C9 FFF8                  		dbf	d1,loc_14CC4
00016DD8                            
00016DD8 6000                       		bra.s	loc_14CD6
00016DDA                            ; ===========================================================================
00016DDA                            
00016DDA                            loc_14CD0:
00016DDA 303C 0010                  		move.w	#$10,d0
00016DDE                            
00016DDE                            loc_14CD4:
00016DDE 3400                       		move.w	d0,d2
00016DE0                            
00016DE0                            loc_14CD6:
00016DE0 14C2                       		move.b	d2,(a2)+
00016DE2 51CB FFCC                  		dbf	d3,loc_14CA6
00016DE6                            
00016DE6 4E75                       		rts	
00016DE8                            
00016DE8                            ; End of function FloorLog_Unk2
00016DE8                            
00016DE8                            
00016DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DE8                            
00016DE8                            
00016DE8                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016DE8 2628 0008                  		move.l	8(a0),d3
00016DEC 2428 000C                  		move.l	$C(a0),d2
00016DF0 3228 0010                  		move.w	$10(a0),d1
00016DF4 48C1                       		ext.l	d1
00016DF6 E181                       		asl.l	#8,d1
00016DF8 D681                       		add.l	d1,d3
00016DFA 3228 0012                  		move.w	$12(a0),d1
00016DFE 48C1                       		ext.l	d1
00016E00 E181                       		asl.l	#8,d1
00016E02 D481                       		add.l	d1,d2
00016E04 4842                       		swap	d2
00016E06 4843                       		swap	d3
00016E08 11C0 F768                  		move.b	d0,($FFFFF768).w
00016E0C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016E10 1200                       		move.b	d0,d1
00016E12 0600 0020                  		addi.b	#$20,d0
00016E16 6A00                       		bpl.s	loc_14D1A
00016E18 1001                       		move.b	d1,d0
00016E1A 6A00                       		bpl.s	loc_14D14
00016E1C 5300                       		subq.b	#1,d0
00016E1E                            
00016E1E                            loc_14D14:
00016E1E 0600 0020                  		addi.b	#$20,d0
00016E22 6000                       		bra.s	loc_14D24
00016E24                            ; ===========================================================================
00016E24                            
00016E24                            loc_14D1A:
00016E24 1001                       		move.b	d1,d0
00016E26 6A00                       		bpl.s	loc_14D20
00016E28 5200                       		addq.b	#1,d0
00016E2A                            
00016E2A                            loc_14D20:
00016E2A 0600 001F                  		addi.b	#$1F,d0
00016E2E                            
00016E2E                            loc_14D24:
00016E2E 0200 00C0                  		andi.b	#$C0,d0
00016E32 6700 0000                  		beq.w	loc_14DF0
00016E36 0C00 0080                  		cmpi.b	#$80,d0
00016E3A 6700 0000                  		beq.w	loc_14F7C
00016E3E 0201 0038                  		andi.b	#$38,d1
00016E42 6600                       		bne.s	loc_14D3C
00016E44 5042                       		addq.w	#8,d2
00016E46                            
00016E46                            loc_14D3C:
00016E46 0C00 0040                  		cmpi.b	#$40,d0
00016E4A 6700 0000                  		beq.w	loc_1504A
00016E4E 6000 0000                  		bra.w	loc_14EBC
00016E52                            
00016E52                            ; End of function Sonic_WalkSpeed
00016E52                            
00016E52                            
00016E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E52                            
00016E52                            
00016E52                            sub_14D48:				; XREF: Sonic_Jump
00016E52 11C0 F768                  		move.b	d0,($FFFFF768).w
00016E56 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016E5A 0600 0020                  		addi.b	#$20,d0
00016E5E 0200 00C0                  		andi.b	#$C0,d0
00016E62 0C00 0040                  		cmpi.b	#$40,d0
00016E66 6700 0000                  		beq.w	loc_14FD6
00016E6A 0C00 0080                  		cmpi.b	#$80,d0
00016E6E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016E72 0C00 00C0                  		cmpi.b	#$C0,d0
00016E76 6700 0000                  		beq.w	sub_14E50
00016E7A                            
00016E7A                            ; End of function sub_14D48
00016E7A                            
00016E7A                            ; ---------------------------------------------------------------------------
00016E7A                            ; Subroutine to	make Sonic land	on the floor after jumping
00016E7A                            ; ---------------------------------------------------------------------------
00016E7A                            
00016E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E7A                            
00016E7A                            
00016E7A                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016E7A 3428 000C                  		move.w	$C(a0),d2
00016E7E 3628 0008                  		move.w	8(a0),d3
00016E82 7000                       		moveq	#0,d0
00016E84 1028 0016                  		move.b	$16(a0),d0
00016E88 4880                       		ext.w	d0
00016E8A D440                       		add.w	d0,d2
00016E8C 1028 0017                  		move.b	$17(a0),d0
00016E90 4880                       		ext.w	d0
00016E92 D640                       		add.w	d0,d3
00016E94 49F8 F768                  		lea	($FFFFF768).w,a4
00016E98 367C 0010                  		movea.w	#$10,a3
00016E9C 3C3C 0000                  		move.w	#0,d6
00016EA0 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016EA2 6100 FC24                  		bsr.w	FindFloor				; MJ: check solidity
00016EA6 3F01                       		move.w	d1,-(sp)
00016EA8 3428 000C                  		move.w	$C(a0),d2
00016EAC 3628 0008                  		move.w	8(a0),d3
00016EB0 7000                       		moveq	#0,d0
00016EB2 1028 0016                  		move.b	$16(a0),d0
00016EB6 4880                       		ext.w	d0
00016EB8 D440                       		add.w	d0,d2
00016EBA 1028 0017                  		move.b	$17(a0),d0
00016EBE 4880                       		ext.w	d0
00016EC0 9640                       		sub.w	d0,d3
00016EC2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016EC6 367C 0010                  		movea.w	#$10,a3
00016ECA 3C3C 0000                  		move.w	#0,d6
00016ECE 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016ED0 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00016ED4 301F                       		move.w	(sp)+,d0
00016ED6 143C 0000                  		move.b	#0,d2
00016EDA                            
00016EDA                            loc_14DD0:
00016EDA 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016EDE B240                       		cmp.w	d0,d1
00016EE0 6F00                       		ble.s	loc_14DDE
00016EE2 1638 F768                  		move.b	($FFFFF768).w,d3
00016EE6 C141                       		exg	d0,d1
00016EE8                            
00016EE8                            loc_14DDE:
00016EE8 0803 0000                  		btst	#0,d3
00016EEC 6700                       		beq.s	locret_14DE6
00016EEE 1602                       		move.b	d2,d3
00016EF0                            
00016EF0                            locret_14DE6:
00016EF0 4E75                       		rts	
00016EF2                            
00016EF2                            ; End of function Sonic_HitFloor
00016EF2                            
00016EF2                            ; ===========================================================================
00016EF2 3428 000C                  		move.w	$C(a0),d2
00016EF6 3628 0008                  		move.w	8(a0),d3
00016EFA                            
00016EFA                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016EFA 0642 000A                  		addi.w	#$A,d2
00016EFE 49F8 F768                  		lea	($FFFFF768).w,a4
00016F02 367C 0010                  		movea.w	#$10,a3
00016F06 3C3C 0000                  		move.w	#0,d6
00016F0A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F0C 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00016F10 143C 0000                  		move.b	#0,d2
00016F14                            
00016F14                            loc_14E0A:				; XREF: sub_14EB4
00016F14 1638 F768                  		move.b	($FFFFF768).w,d3
00016F18 0803 0000                  		btst	#0,d3
00016F1C 6700                       		beq.s	locret_14E16
00016F1E 1602                       		move.b	d2,d3
00016F20                            
00016F20                            locret_14E16:
00016F20 4E75                       		rts	
00016F22                            
00016F22                            ; ---------------------------------------------------------------------------
00016F22                            ; Subroutine allowing objects to interact with the floor
00016F22                            ; ---------------------------------------------------------------------------
00016F22                            
00016F22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F22                            
00016F22                            
00016F22                            ObjHitFloor:
00016F22 3628 0008                  		move.w	8(a0),d3
00016F26                            
00016F26                            ; End of function ObjHitFloor
00016F26                            
00016F26                            
00016F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F26                            
00016F26                            
00016F26                            ObjHitFloor2:
00016F26 3428 000C                  		move.w	$C(a0),d2
00016F2A 7000                       		moveq	#0,d0
00016F2C 1028 0016                  		move.b	$16(a0),d0
00016F30 4880                       		ext.w	d0
00016F32 D440                       		add.w	d0,d2
00016F34 49F8 F768                  		lea	($FFFFF768).w,a4
00016F38 18BC 0000                  		move.b	#0,(a4)
00016F3C 367C 0010                  		movea.w	#$10,a3
00016F40 3C3C 0000                  		move.w	#0,d6
00016F44 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016F46 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00016F4A 1638 F768                  		move.b	($FFFFF768).w,d3
00016F4E 0803 0000                  		btst	#0,d3
00016F52 6700                       		beq.s	locret_14E4E
00016F54 163C 0000                  		move.b	#0,d3
00016F58                            
00016F58                            locret_14E4E:
00016F58 4E75                       		rts	
00016F5A                            ; End of function ObjHitFloor2
00016F5A                            
00016F5A                            
00016F5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F5A                            
00016F5A                            
00016F5A                            sub_14E50:				; XREF: sub_14D48
00016F5A 3428 000C                  		move.w	$C(a0),d2
00016F5E 3628 0008                  		move.w	8(a0),d3
00016F62 7000                       		moveq	#0,d0
00016F64 1028 0017                  		move.b	$17(a0),d0
00016F68 4880                       		ext.w	d0
00016F6A 9440                       		sub.w	d0,d2
00016F6C 1028 0016                  		move.b	$16(a0),d0
00016F70 4880                       		ext.w	d0
00016F72 D640                       		add.w	d0,d3
00016F74 49F8 F768                  		lea	($FFFFF768).w,a4
00016F78 367C 0010                  		movea.w	#$10,a3
00016F7C 3C3C 0000                  		move.w	#0,d6
00016F80 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F82 6100 FC8A                  		bsr.w	FindWall				; MJ: check solidity
00016F86 3F01                       		move.w	d1,-(sp)
00016F88 3428 000C                  		move.w	$C(a0),d2
00016F8C 3628 0008                  		move.w	8(a0),d3
00016F90 7000                       		moveq	#0,d0
00016F92 1028 0017                  		move.b	$17(a0),d0
00016F96 4880                       		ext.w	d0
00016F98 D440                       		add.w	d0,d2
00016F9A 1028 0016                  		move.b	$16(a0),d0
00016F9E 4880                       		ext.w	d0
00016FA0 D640                       		add.w	d0,d3
00016FA2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FA6 367C 0010                  		movea.w	#$10,a3
00016FAA 3C3C 0000                  		move.w	#0,d6
00016FAE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FB0 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00016FB4 301F                       		move.w	(sp)+,d0
00016FB6 143C 00C0                  		move.b	#-$40,d2
00016FBA 6000 FF1E                  		bra.w	loc_14DD0
00016FBE                            
00016FBE                            ; End of function sub_14E50
00016FBE                            
00016FBE                            
00016FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FBE                            
00016FBE                            
00016FBE                            sub_14EB4:				; XREF: Sonic_Floor
00016FBE 3428 000C                  		move.w	$C(a0),d2
00016FC2 3628 0008                  		move.w	8(a0),d3
00016FC6                            
00016FC6                            loc_14EBC:
00016FC6 0643 000A                  		addi.w	#$A,d3
00016FCA 49F8 F768                  		lea	($FFFFF768).w,a4
00016FCE 367C 0010                  		movea.w	#$10,a3
00016FD2 3C3C 0000                  		move.w	#0,d6
00016FD6 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FD8 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00016FDC 143C 00C0                  		move.b	#-$40,d2
00016FE0 6000 FF32                  		bra.w	loc_14E0A
00016FE4                            
00016FE4                            ; End of function sub_14EB4
00016FE4                            
00016FE4                            ; ---------------------------------------------------------------------------
00016FE4                            ; Subroutine to	detect when an object hits a wall to its right
00016FE4                            ; ---------------------------------------------------------------------------
00016FE4                            
00016FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FE4                            
00016FE4                            
00016FE4                            ObjHitWallRight:
00016FE4 D668 0008                  		add.w	8(a0),d3
00016FE8 3428 000C                  		move.w	$C(a0),d2
00016FEC 49F8 F768                  		lea	($FFFFF768).w,a4
00016FF0 18BC 0000                  		move.b	#0,(a4)
00016FF4 367C 0010                  		movea.w	#$10,a3
00016FF8 3C3C 0000                  		move.w	#0,d6
00016FFC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FFE 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00017002 1638 F768                  		move.b	($FFFFF768).w,d3
00017006 0803 0000                  		btst	#0,d3
0001700A 6700                       		beq.s	locret_14F06
0001700C 163C 00C0                  		move.b	#-$40,d3
00017010                            
00017010                            locret_14F06:
00017010 4E75                       		rts	
00017012                            
00017012                            ; End of function ObjHitWallRight
00017012                            
00017012                            ; ---------------------------------------------------------------------------
00017012                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017012                            ; touches them
00017012                            ; ---------------------------------------------------------------------------
00017012                            
00017012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017012                            
00017012                            
00017012                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00017012 3428 000C                  		move.w	$C(a0),d2
00017016 3628 0008                  		move.w	8(a0),d3
0001701A 7000                       		moveq	#0,d0
0001701C 1028 0016                  		move.b	$16(a0),d0
00017020 4880                       		ext.w	d0
00017022 9440                       		sub.w	d0,d2
00017024 0A42 000F                  		eori.w	#$F,d2
00017028 1028 0017                  		move.b	$17(a0),d0
0001702C 4880                       		ext.w	d0
0001702E D640                       		add.w	d0,d3
00017030 49F8 F768                  		lea	($FFFFF768).w,a4
00017034 367C FFF0                  		movea.w	#-$10,a3
00017038 3C3C 0800                  		move.w	#$0800,d6
0001703C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001703E 6100 FA88                  		bsr.w	FindFloor				; MJ: check solidity
00017042 3F01                       		move.w	d1,-(sp)
00017044 3428 000C                  		move.w	$C(a0),d2
00017048 3628 0008                  		move.w	8(a0),d3
0001704C 7000                       		moveq	#0,d0
0001704E 1028 0016                  		move.b	$16(a0),d0
00017052 4880                       		ext.w	d0
00017054 9440                       		sub.w	d0,d2
00017056 0A42 000F                  		eori.w	#$F,d2
0001705A 1028 0017                  		move.b	$17(a0),d0
0001705E 4880                       		ext.w	d0
00017060 9640                       		sub.w	d0,d3
00017062 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017066 367C FFF0                  		movea.w	#-$10,a3
0001706A 3C3C 0800                  		move.w	#$0800,d6
0001706E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00017070 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00017074 301F                       		move.w	(sp)+,d0
00017076 143C 0080                  		move.b	#-$80,d2
0001707A 6000 FE5E                  		bra.w	loc_14DD0
0001707E                            ; End of function Sonic_DontRunOnWalls
0001707E                            
0001707E                            ; ===========================================================================
0001707E 3428 000C                  		move.w	$C(a0),d2
00017082 3628 0008                  		move.w	8(a0),d3
00017086                            
00017086                            loc_14F7C:
00017086 0442 000A                  		subi.w	#$A,d2
0001708A 0A42 000F                  		eori.w	#$F,d2
0001708E 49F8 F768                  		lea	($FFFFF768).w,a4
00017092 367C FFF0                  		movea.w	#-$10,a3
00017096 3C3C 0800                  		move.w	#$0800,d6
0001709A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001709C 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
000170A0 143C 0080                  		move.b	#-$80,d2
000170A4 6000 FE6E                  		bra.w	loc_14E0A
000170A8                            
000170A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170A8                            
000170A8                            
000170A8                            ObjHitCeiling:
000170A8 3428 000C                  		move.w	$C(a0),d2
000170AC 3628 0008                  		move.w	8(a0),d3
000170B0 7000                       		moveq	#0,d0
000170B2 1028 0016                  		move.b	$16(a0),d0
000170B6 4880                       		ext.w	d0
000170B8 9440                       		sub.w	d0,d2
000170BA 0A42 000F                  		eori.w	#$F,d2
000170BE 49F8 F768                  		lea	($FFFFF768).w,a4
000170C2 367C FFF0                  		movea.w	#-$10,a3
000170C6 3C3C 0800                  		move.w	#$0800,d6
000170CA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170CC 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
000170D0 1638 F768                  		move.b	($FFFFF768).w,d3
000170D4 0803 0000                  		btst	#0,d3
000170D8 6700                       		beq.s	locret_14FD4
000170DA 163C 0080                  		move.b	#-$80,d3
000170DE                            
000170DE                            locret_14FD4:
000170DE 4E75                       		rts	
000170E0                            ; End of function ObjHitCeiling
000170E0                            
000170E0                            ; ===========================================================================
000170E0                            
000170E0                            loc_14FD6:				; XREF: sub_14D48
000170E0 3428 000C                  		move.w	$C(a0),d2
000170E4 3628 0008                  		move.w	8(a0),d3
000170E8 7000                       		moveq	#0,d0
000170EA 1028 0017                  		move.b	$17(a0),d0
000170EE 4880                       		ext.w	d0
000170F0 9440                       		sub.w	d0,d2
000170F2 1028 0016                  		move.b	$16(a0),d0
000170F6 4880                       		ext.w	d0
000170F8 9640                       		sub.w	d0,d3
000170FA 0A43 000F                  		eori.w	#$F,d3
000170FE 49F8 F768                  		lea	($FFFFF768).w,a4
00017102 367C FFF0                  		movea.w	#-$10,a3
00017106 3C3C 0400                  		move.w	#$400,d6
0001710A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001710C 6100 FB00                  		bsr.w	FindWall				; MJ: check solidity
00017110 3F01                       		move.w	d1,-(sp)
00017112 3428 000C                  		move.w	$C(a0),d2
00017116 3628 0008                  		move.w	8(a0),d3
0001711A 7000                       		moveq	#0,d0
0001711C 1028 0017                  		move.b	$17(a0),d0
00017120 4880                       		ext.w	d0
00017122 D440                       		add.w	d0,d2
00017124 1028 0016                  		move.b	$16(a0),d0
00017128 4880                       		ext.w	d0
0001712A 9640                       		sub.w	d0,d3
0001712C 0A43 000F                  		eori.w	#$F,d3
00017130 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017134 367C FFF0                  		movea.w	#-$10,a3
00017138 3C3C 0400                  		move.w	#$400,d6
0001713C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001713E 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00017142 301F                       		move.w	(sp)+,d0
00017144 143C 0040                  		move.b	#$40,d2
00017148 6000 FD90                  		bra.w	loc_14DD0
0001714C                            
0001714C                            ; ---------------------------------------------------------------------------
0001714C                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001714C                            ; ---------------------------------------------------------------------------
0001714C                            
0001714C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001714C                            
0001714C                            
0001714C                            Sonic_HitWall:				; XREF: Sonic_Floor
0001714C 3428 000C                  		move.w	$C(a0),d2
00017150 3628 0008                  		move.w	8(a0),d3
00017154                            
00017154                            loc_1504A:
00017154 0443 000A                  		subi.w	#$A,d3
00017158 0A43 000F                  		eori.w	#$F,d3
0001715C 49F8 F768                  		lea	($FFFFF768).w,a4
00017160 367C FFF0                  		movea.w	#-$10,a3
00017164 3C3C 0400                  		move.w	#$400,d6
00017168 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001716A 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
0001716E 143C 0040                  		move.b	#$40,d2
00017172 6000 FDA0                  		bra.w	loc_14E0A
00017176                            ; End of function Sonic_HitWall
00017176                            
00017176                            ; ---------------------------------------------------------------------------
00017176                            ; Subroutine to	detect when an object hits a wall to its left
00017176                            ; ---------------------------------------------------------------------------
00017176                            
00017176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017176                            
00017176                            
00017176                            ObjHitWallLeft:
00017176 D668 0008                  		add.w	8(a0),d3
0001717A 3428 000C                  		move.w	$C(a0),d2
0001717E 49F8 F768                  		lea	($FFFFF768).w,a4
00017182 18BC 0000                  		move.b	#0,(a4)
00017186 367C FFF0                  		movea.w	#-$10,a3
0001718A 3C3C 0400                  		move.w	#$400,d6
0001718E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00017190 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
00017194 1638 F768                  		move.b	($FFFFF768).w,d3
00017198 0803 0000                  		btst	#0,d3
0001719C 6700                       		beq.s	locret_15098
0001719E 163C 0040                  		move.b	#$40,d3
000171A2                            
000171A2                            locret_15098:
000171A2 4E75                       		rts	
000171A4                            ; End of function ObjHitWallLeft
000171A4                            
000171A4                            ; ===========================================================================
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            
000171A4                            ; ===========================================================================
000171A4                            ; ---------------------------------------------------------------------------
000171A4                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000171A4                            ; ---------------------------------------------------------------------------
000171A4                            
000171A4                            Obj66:					; XREF: Obj_Index
000171A4 7000                       		moveq	#0,d0
000171A6 1028 0024                  		move.b	$24(a0),d0
000171AA 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000171AE 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000171B2                            ; ===========================================================================
000171B2 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000171B4 0000                       		dc.w Obj66_Action-Obj66_Index
000171B6 0000                       		dc.w Obj66_Display-Obj66_Index
000171B8 0000                       		dc.w Obj66_Release-Obj66_Index
000171BA                            ; ===========================================================================
000171BA                            
000171BA                            Obj66_Main:				; XREF: Obj66_Index
000171BA 5428 0024                  		addq.b	#2,$24(a0)
000171BE 323C 0001                  		move.w	#1,d1
000171C2 2248                       		movea.l	a0,a1
000171C4 6000                       		bra.s	Obj66_MakeItem
000171C6                            ; ===========================================================================
000171C6                            
000171C6                            Obj66_Loop:
000171C6 6100 8452                  		bsr.w	SingleObjLoad
000171CA 6600                       		bne.s	loc_150FE
000171CC 12BC 0066                  		move.b	#$66,0(a1)
000171D0 5829 0024                  		addq.b	#4,$24(a1)
000171D4 3368 0008 0008             		move.w	8(a0),8(a1)
000171DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000171E0 137C 0003 0018             		move.b	#3,$18(a1)
000171E6 137C 0010 001A             		move.b	#$10,$1A(a1)
000171EC                            
000171EC                            Obj66_MakeItem:				; XREF: Obj66_Main
000171EC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000171F4 337C 4348 0002             		move.w	#$4348,2(a1)
000171FA 0029 0004 0001             		ori.b	#4,1(a1)
00017200 137C 0038 0019             		move.b	#$38,$19(a1)
00017206                            
00017206                            loc_150FE:
00017206 51C9 FFBE                  		dbf	d1,Obj66_Loop
0001720A                            
0001720A 117C 0030 0019             		move.b	#$30,$19(a0)
00017210 117C 0004 0018             		move.b	#4,$18(a0)
00017216 317C 003C 0030             		move.w	#$3C,$30(a0)
0001721C 117C 0001 0034             		move.b	#1,$34(a0)
00017222 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017228                            
00017228                            Obj66_Action:				; XREF: Obj66_Index
00017228 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001722C 4A28 0001                  		tst.b	1(a0)
00017230 6A00 0000                  		bpl.w	Obj66_Display
00017234 323C 0030                  		move.w	#$30,d1
00017238 3401                       		move.w	d1,d2
0001723A 3602                       		move.w	d2,d3
0001723C 5243                       		addq.w	#1,d3
0001723E 3828 0008                  		move.w	8(a0),d4
00017242 6100 A320                  		bsr.w	SolidObject
00017246 0828 0005 0022             		btst	#5,$22(a0)
0001724C 6700 0000                  		beq.w	Obj66_Display
00017250 43F8 D000                  		lea	($FFFFD000).w,a1
00017254 720E                       		moveq	#$E,d1
00017256 3029 0008                  		move.w	8(a1),d0
0001725A B068 0008                  		cmp.w	8(a0),d0
0001725E 6500                       		bcs.s	Obj66_GrabSonic
00017260 7207                       		moveq	#7,d1
00017262                            
00017262                            Obj66_GrabSonic:
00017262 B228 001A                  		cmp.b	$1A(a0),d1
00017266 6600                       		bne.s	Obj66_Display
00017268 1141 0032                  		move.b	d1,$32(a0)
0001726C 5828 0024                  		addq.b	#4,$24(a0)
00017270 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00017276 137C 0015 001C             		move.b	#$15,$1C(a1)	; make Sonic use "bubble" animation
0001727C 337C 0800 0014             		move.w	#$800,$14(a1)
00017282 337C 0000 0010             		move.w	#0,$10(a1)
00017288 337C 0000 0012             		move.w	#0,$12(a1)
0001728E 08A8 0005 0022             		bclr	#5,$22(a0)
00017294 08A9 0005 0022             		bclr	#5,$22(a1)
0001729A 08E9 0001 0022             		bset	#1,$22(a1)
000172A0 3429 0008                  		move.w	8(a1),d2
000172A4 3629 000C                  		move.w	$C(a1),d3
000172A8 6100 0000                  		bsr.w	Obj66_ChgPos
000172AC D569 0008                  		add.w	d2,8(a1)
000172B0 D769 000C                  		add.w	d3,$C(a1)
000172B4 E0E9 0008                  		asr	8(a1)
000172B8 E0E9 000C                  		asr	$C(a1)
000172BC                            
000172BC                            Obj66_Display:				; XREF: Obj66_Index
000172BC 6000 9F7E                  		bra.w	MarkObjGone
000172C0                            ; ===========================================================================
000172C0                            
000172C0                            Obj66_Release:				; XREF: Obj66_Index
000172C0 1028 001A                  		move.b	$1A(a0),d0
000172C4 0C00 0004                  		cmpi.b	#4,d0
000172C8 6700                       		beq.s	loc_151C8
000172CA 0C00 0007                  		cmpi.b	#7,d0
000172CE 6600                       		bne.s	loc_151F8
000172D0                            
000172D0                            loc_151C8:
000172D0 B028 0032                  		cmp.b	$32(a0),d0
000172D4 6700                       		beq.s	loc_151F8
000172D6 43F8 D000                  		lea	($FFFFD000).w,a1
000172DA 337C 0000 0010             		move.w	#0,$10(a1)
000172E0 337C 0800 0012             		move.w	#$800,$12(a1)
000172E6 0C00 0004                  		cmpi.b	#4,d0
000172EA 6700                       		beq.s	loc_151F0
000172EC 337C 0800 0010             		move.w	#$800,$10(a1)
000172F2 337C 0800 0012             		move.w	#$800,$12(a1)
000172F8                            
000172F8                            loc_151F0:
000172F8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000172FC 5928 0024                  		subq.b	#4,$24(a0)
00017300                            
00017300                            loc_151F8:
00017300 6100                       		bsr.s	Obj66_ChkSwitch
00017302 6100                       		bsr.s	Obj66_ChgPos
00017304 6000 9F36                  		bra.w	MarkObjGone
00017308                            
00017308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017308                            
00017308                            
00017308                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017308 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001730C 7000                       		moveq	#0,d0
0001730E 1028 0038                  		move.b	$38(a0),d0
00017312 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017318 6700                       		beq.s	loc_15224	; if not, branch
0001731A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001731E 6600                       		bne.s	Obj66_Animate	; if yes, branch
00017320 4428 0034                  		neg.b	$34(a0)
00017324 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001732A 6000                       		bra.s	Obj66_Animate
0001732C                            ; ===========================================================================
0001732C                            
0001732C                            loc_15224:
0001732C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00017330                            
00017330                            Obj66_Animate:
00017330 5328 001E                  		subq.b	#1,$1E(a0)
00017334 6A00                       		bpl.s	locret_15246
00017336 117C 0007 001E             		move.b	#7,$1E(a0)
0001733C 1228 0034                  		move.b	$34(a0),d1
00017340 1028 001A                  		move.b	$1A(a0),d0
00017344 D001                       		add.b	d1,d0
00017346 0200 000F                  		andi.b	#$F,d0
0001734A 1140 001A                  		move.b	d0,$1A(a0)
0001734E                            
0001734E                            locret_15246:
0001734E 4E75                       		rts	
00017350                            ; End of function Obj66_ChkSwitch
00017350                            
00017350                            
00017350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017350                            
00017350                            
00017350                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00017350 43F8 D000                  		lea	($FFFFD000).w,a1
00017354 7000                       		moveq	#0,d0
00017356 1028 001A                  		move.b	$1A(a0),d0
0001735A D040                       		add.w	d0,d0
0001735C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00017360 101A                       		move.b	(a2)+,d0
00017362 4880                       		ext.w	d0
00017364 D068 0008                  		add.w	8(a0),d0
00017368 3340 0008                  		move.w	d0,8(a1)
0001736C 101A                       		move.b	(a2)+,d0
0001736E 4880                       		ext.w	d0
00017370 D068 000C                  		add.w	$C(a0),d0
00017374 3340 000C                  		move.w	d0,$C(a1)
00017378 4E75                       		rts	
0001737A                            ; End of function Obj66_ChgPos
0001737A                            
0001737A                            ; ===========================================================================
0001737A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001737E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00017382 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00017386 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001738A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001738E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00017392 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00017396 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001739A                            ; ---------------------------------------------------------------------------
0001739A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001739A                            ; ---------------------------------------------------------------------------
0001739A                            Map_obj66:
0001739A                            	include "_maps\obj66.asm"
0001739A                            ; ---------------------------------------------------------------------------
0001739A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001739A                            ; ---------------------------------------------------------------------------
0001739A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001739E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000173A2 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000173A6 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000173AA 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000173AE 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000173B2 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000173B6 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000173BA 0000                       		dc.w byte_154A4-Map_obj66
000173BC 06                         byte_152B4:	dc.b 6
000173BD E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000173C2 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000173C7 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000173CC E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000173D1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000173D6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000173DB 06                         byte_152D3:	dc.b 6
000173DC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000173E1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000173E6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000173EB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000173F0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000173F5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000173FA 06                         byte_152F2:	dc.b 6
000173FB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00017400 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017405 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001740A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001740F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017414 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017419 06                         byte_15311:	dc.b 6
0001741A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001741F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017424 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017429 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001742E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00017433 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017438 06                         byte_15330:	dc.b 6
00017439 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001743E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00017443 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017448 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001744D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00017452 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017457 06                         byte_1534F:	dc.b 6
00017458 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001745D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00017462 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00017467 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001746C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00017471 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00017476 06                         byte_1536E:	dc.b 6
00017477 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001747C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00017481 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00017486 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001748B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017490 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00017495 06                         byte_1538D:	dc.b 6
00017496 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001749B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000174A0 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000174A5 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000174AA 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000174AF 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000174B4 06                         byte_153AC:	dc.b 6
000174B5 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000174BA 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000174BF E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000174C4 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000174C9 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000174CE 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000174D3 06                         byte_153CB:	dc.b 6
000174D4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000174D9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000174DE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000174E3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000174E8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000174ED F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000174F2 06                         byte_153EA:	dc.b 6
000174F3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000174F8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000174FD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00017502 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017507 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001750C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00017511 06                         byte_15409:	dc.b 6
00017512 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017517 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001751C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00017521 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017526 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001752B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00017530 06                         byte_15428:	dc.b 6
00017531 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017536 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001753B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00017540 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017545 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001754A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001754F 06                         byte_15447:	dc.b 6
00017550 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017555 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001755A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001755F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00017564 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017569 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001756E 06                         byte_15466:	dc.b 6
0001756F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017574 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017579 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001757E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00017583 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017588 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001758D 06                         byte_15485:	dc.b 6
0001758E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00017593 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00017598 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001759D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000175A2 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000175A7 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000175AC 0C                         byte_154A4:	dc.b $C
000175AD C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000175B2 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000175B7 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000175BC C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000175C1 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000175C6 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000175CB 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000175D0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000175D5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000175DA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000175DF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000175E4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000175EA 00                         		even
000175EA 00                         		even
000175EA                            
000175EA                            ; ===========================================================================
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            ; Object 67 - disc that	you run	around (SBZ)
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            
000175EA                            Obj67:					; XREF: Obj_Index
000175EA 7000                       		moveq	#0,d0
000175EC 1028 0024                  		move.b	$24(a0),d0
000175F0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000175F4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000175F8                            ; ===========================================================================
000175F8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000175FA 0000                       		dc.w Obj67_Action-Obj67_Index
000175FC                            ; ===========================================================================
000175FC                            
000175FC                            Obj67_Main:				; XREF: Obj67_Index
000175FC 5428 0024                  		addq.b	#2,$24(a0)
00017600 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017608 317C C344 0002             		move.w	#$C344,2(a0)
0001760E 117C 0004 0001             		move.b	#4,1(a0)
00017614 117C 0004 0018             		move.b	#4,$18(a0)
0001761A 117C 0008 0019             		move.b	#8,$19(a0)
00017620 3168 0008 0032             		move.w	8(a0),$32(a0)
00017626 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001762C 117C 0018 0034             		move.b	#$18,$34(a0)
00017632 117C 0048 0038             		move.b	#$48,$38(a0)
00017638 1228 0028                  		move.b	$28(a0),d1	; get object type
0001763C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017640 6700                       		beq.s	loc_15546
00017642 117C 0010 0034             		move.b	#$10,$34(a0)
00017648 117C 0038 0038             		move.b	#$38,$38(a0)
0001764E                            
0001764E                            loc_15546:
0001764E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017652 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017656 4881                       		ext.w	d1
00017658 E741                       		asl.w	#3,d1
0001765A 3141 0036                  		move.w	d1,$36(a0)
0001765E 1028 0022                  		move.b	$22(a0),d0
00017662 E418                       		ror.b	#2,d0
00017664 0200 00C0                  		andi.b	#-$40,d0
00017668 1140 0026                  		move.b	d0,$26(a0)
0001766C                            
0001766C                            Obj67_Action:				; XREF: Obj67_Index
0001766C 6100 0000                  		bsr.w	Obj67_MoveSonic
00017670 6100 0000                  		bsr.w	Obj67_MoveSpot
00017674 6000 0000                  		bra.w	Obj67_ChkDel
00017678                            ; ===========================================================================
00017678                            
00017678                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017678 7400                       		moveq	#0,d2
0001767A 1428 0038                  		move.b	$38(a0),d2
0001767E 3602                       		move.w	d2,d3
00017680 D643                       		add.w	d3,d3
00017682 43F8 D000                  		lea	($FFFFD000).w,a1
00017686 3029 0008                  		move.w	8(a1),d0
0001768A 9068 0032                  		sub.w	$32(a0),d0
0001768E D042                       		add.w	d2,d0
00017690 B043                       		cmp.w	d3,d0
00017692 6400                       		bcc.s	loc_155A8
00017694 3229 000C                  		move.w	$C(a1),d1
00017698 9268 0030                  		sub.w	$30(a0),d1
0001769C D242                       		add.w	d2,d1
0001769E B243                       		cmp.w	d3,d1
000176A0 6400                       		bcc.s	loc_155A8
000176A2 0829 0001 0022             		btst	#1,$22(a1)
000176A8 6700                       		beq.s	loc_155B8
000176AA 4228 003A                  		clr.b	$3A(a0)
000176AE 4E75                       		rts	
000176B0                            ; ===========================================================================
000176B0                            
000176B0                            loc_155A8:
000176B0 4A28 003A                  		tst.b	$3A(a0)
000176B4 6700                       		beq.s	locret_155B6
000176B6 4229 0038                  		clr.b	$38(a1)
000176BA 4228 003A                  		clr.b	$3A(a0)
000176BE                            
000176BE                            locret_155B6:
000176BE 4E75                       		rts	
000176C0                            ; ===========================================================================
000176C0                            
000176C0                            loc_155B8:
000176C0 4A28 003A                  		tst.b	$3A(a0)
000176C4 6600                       		bne.s	loc_155E2
000176C6 117C 0001 003A             		move.b	#1,$3A(a0)
000176CC 0829 0002 0022             		btst	#2,$22(a1)
000176D2 6600                       		bne.s	loc_155D0
000176D4 4229 001C                  		clr.b	$1C(a1)
000176D8                            
000176D8                            loc_155D0:
000176D8 08A9 0005 0022             		bclr	#5,$22(a1)
000176DE 137C 0001 001D             		move.b	#1,$1D(a1)
000176E4 137C 0001 0038             		move.b	#1,$38(a1)
000176EA                            
000176EA                            loc_155E2:
000176EA 3029 0014                  		move.w	$14(a1),d0
000176EE 4A68 0036                  		tst.w	$36(a0)
000176F2 6A00                       		bpl.s	loc_15608
000176F4 0C40 FC00                  		cmpi.w	#-$400,d0
000176F8 6F00                       		ble.s	loc_155FA
000176FA 337C FC00 0014             		move.w	#-$400,$14(a1)
00017700 4E75                       		rts	
00017702                            ; ===========================================================================
00017702                            
00017702                            loc_155FA:
00017702 0C40 F100                  		cmpi.w	#-$F00,d0
00017706 6C00                       		bge.s	locret_15606
00017708 337C F100 0014             		move.w	#-$F00,$14(a1)
0001770E                            
0001770E                            locret_15606:
0001770E 4E75                       		rts	
00017710                            ; ===========================================================================
00017710                            
00017710                            loc_15608:
00017710 0C40 0400                  		cmpi.w	#$400,d0
00017714 6C00                       		bge.s	loc_15616
00017716 337C 0400 0014             		move.w	#$400,$14(a1)
0001771C 4E75                       		rts	
0001771E                            ; ===========================================================================
0001771E                            
0001771E                            loc_15616:
0001771E 0C40 0F00                  		cmpi.w	#$F00,d0
00017722 6F00                       		ble.s	locret_15622
00017724 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001772A                            
0001772A                            locret_15622:
0001772A 4E75                       		rts	
0001772C                            ; ===========================================================================
0001772C                            
0001772C                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001772C 3028 0036                  		move.w	$36(a0),d0
00017730 D168 0026                  		add.w	d0,$26(a0)
00017734 1028 0026                  		move.b	$26(a0),d0
00017738 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001773E 3428 0030                  		move.w	$30(a0),d2
00017742 3628 0032                  		move.w	$32(a0),d3
00017746 7800                       		moveq	#0,d4
00017748 1828 0034                  		move.b	$34(a0),d4
0001774C E14C                       		lsl.w	#8,d4
0001774E 2A04                       		move.l	d4,d5
00017750 C9C0                       		muls.w	d0,d4
00017752 4844                       		swap	d4
00017754 CBC1                       		muls.w	d1,d5
00017756 4845                       		swap	d5
00017758 D842                       		add.w	d2,d4
0001775A DA43                       		add.w	d3,d5
0001775C 3144 000C                  		move.w	d4,$C(a0)
00017760 3145 0008                  		move.w	d5,8(a0)
00017764 4E75                       		rts	
00017766                            ; ===========================================================================
00017766                            
00017766                            Obj67_ChkDel:				; XREF: Obj67_Action
00017766 3028 0032                  		move.w	$32(a0),d0
0001776A 0240 FF80                  		andi.w	#-$80,d0
0001776E 3238 F700                  		move.w	($FFFFF700).w,d1
00017772 0441 0080                  		subi.w	#$80,d1
00017776 0241 FF80                  		andi.w	#-$80,d1
0001777A 9041                       		sub.w	d1,d0
0001777C 0C40 0280                  		cmpi.w	#$280,d0
00017780 6200                       		bhi.s	Obj67_Delete
00017782 4EF9 0000 F186             		jmp	DisplaySprite
00017788                            ; ===========================================================================
00017788                            
00017788                            Obj67_Delete:
00017788 4EF9 0000 F1C2             		jmp	DeleteObject
0001778E                            ; ===========================================================================
0001778E                            ; ---------------------------------------------------------------------------
0001778E                            ; Sprite mappings - disc that you run around (SBZ)
0001778E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001778E                            ; part of the level tiles.)
0001778E                            ; ---------------------------------------------------------------------------
0001778E                            Map_obj67:
0001778E                            	include "_maps\obj67.asm"
0001778E                            ; ---------------------------------------------------------------------------
0001778E                            ; Sprite mappings - disc that you run around (SBZ)
0001778E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001778E                            ; part of the level tiles.)
0001778E                            ; ---------------------------------------------------------------------------
0001778E 0000                       		dc.w byte_15688-Map_obj67
00017790 01                         byte_15688:	dc.b 1
00017791 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017796                            		even
00017796                            		even
00017796                            
00017796                            ; ===========================================================================
00017796                            ; ---------------------------------------------------------------------------
00017796                            ; Object 68 - conveyor belts (SBZ)
00017796                            ; ---------------------------------------------------------------------------
00017796                            
00017796                            Obj68:					; XREF: Obj_Index
00017796 7000                       		moveq	#0,d0
00017798 1028 0024                  		move.b	$24(a0),d0
0001779C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000177A0 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000177A4                            ; ===========================================================================
000177A4 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000177A6 0000                       		dc.w Obj68_Action-Obj68_Index
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            Obj68_Main:				; XREF: Obj68_Index
000177A8 5428 0024                  		addq.b	#2,$24(a0)
000177AC 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000177B2 1228 0028                  		move.b	$28(a0),d1	; get object type
000177B6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000177BA 6700                       		beq.s	loc_156BA	; if zero, branch
000177BC 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000177C2                            
000177C2                            loc_156BA:
000177C2 1228 0028                  		move.b	$28(a0),d1	; get object type
000177C6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000177CA 4881                       		ext.w	d1
000177CC E841                       		asr.w	#4,d1
000177CE 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000177D2                            
000177D2                            Obj68_Action:				; XREF: Obj68_Index
000177D2 6100                       		bsr.s	Obj68_MoveSonic
000177D4 3028 0008                  		move.w	8(a0),d0
000177D8 0240 FF80                  		andi.w	#$FF80,d0
000177DC 3238 F700                  		move.w	($FFFFF700).w,d1
000177E0 0441 0080                  		subi.w	#$80,d1
000177E4 0241 FF80                  		andi.w	#$FF80,d1
000177E8 9041                       		sub.w	d1,d0
000177EA 0C40 0280                  		cmpi.w	#$280,d0
000177EE 6200                       		bhi.s	Obj68_Delete
000177F0 4E75                       		rts	
000177F2                            ; ===========================================================================
000177F2                            
000177F2                            Obj68_Delete:
000177F2 4EF9 0000 F1C2             		jmp	DeleteObject
000177F8                            ; ===========================================================================
000177F8                            
000177F8                            Obj68_MoveSonic:			; XREF: Obj68_Action
000177F8 7400                       		moveq	#0,d2
000177FA 1428 0038                  		move.b	$38(a0),d2
000177FE 3602                       		move.w	d2,d3
00017800 D643                       		add.w	d3,d3
00017802 43F8 D000                  		lea	($FFFFD000).w,a1
00017806 3029 0008                  		move.w	8(a1),d0
0001780A 9068 0008                  		sub.w	8(a0),d0
0001780E D042                       		add.w	d2,d0
00017810 B043                       		cmp.w	d3,d0
00017812 6400                       		bcc.s	locret_1572E
00017814 3229 000C                  		move.w	$C(a1),d1
00017818 9268 000C                  		sub.w	$C(a0),d1
0001781C 0641 0030                  		addi.w	#$30,d1
00017820 0C41 0030                  		cmpi.w	#$30,d1
00017824 6400                       		bcc.s	locret_1572E
00017826 0829 0001 0022             		btst	#1,$22(a1)
0001782C 6600                       		bne.s	locret_1572E
0001782E 3028 0036                  		move.w	$36(a0),d0
00017832 D169 0008                  		add.w	d0,8(a1)
00017836                            
00017836                            locret_1572E:
00017836 4E75                       		rts	
00017838                            
00017838                            ; ===========================================================================
00017838                            ; ---------------------------------------------------------------------------
00017838                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017838                            ; ---------------------------------------------------------------------------
00017838                            
00017838                            Obj69:					; XREF: Obj_Index
00017838 7000                       		moveq	#0,d0
0001783A 1028 0024                  		move.b	$24(a0),d0
0001783E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017842 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017846                            ; ===========================================================================
00017846 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017848 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001784A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001784C                            ; ===========================================================================
0001784C                            
0001784C                            Obj69_Main:				; XREF: Obj69_Index
0001784C 5428 0024                  		addq.b	#2,$24(a0)
00017850 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017858 317C 4492 0002             		move.w	#$4492,2(a0)
0001785E 0028 0004 0001             		ori.b	#4,1(a0)
00017864 117C 0080 0019             		move.b	#$80,$19(a0)
0001786A 7000                       		moveq	#0,d0
0001786C 1028 0028                  		move.b	$28(a0),d0
00017870 0240 000F                  		andi.w	#$F,d0
00017874 C0FC 003C                  		mulu.w	#$3C,d0
00017878 3140 0032                  		move.w	d0,$32(a0)
0001787C 4A28 0028                  		tst.b	$28(a0)
00017880 6A00                       		bpl.s	Obj69_Trapdoor
00017882 5428 0024                  		addq.b	#2,$24(a0)
00017886 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001788E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017894 117C 0010 0019             		move.b	#$10,$19(a0)
0001789A 117C 0002 001C             		move.b	#2,$1C(a0)
000178A0 7000                       		moveq	#0,d0
000178A2 1028 0028                  		move.b	$28(a0),d0	; get object type
000178A6 3200                       		move.w	d0,d1
000178A8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000178AC C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000178B0 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000178B4 3140 0032                  		move.w	d0,$32(a0)
000178B8 0241 0070                  		andi.w	#$70,d1
000178BC 0641 0010                  		addi.w	#$10,d1
000178C0 E549                       		lsl.w	#2,d1
000178C2 5341                       		subq.w	#1,d1
000178C4 3141 0036                  		move.w	d1,$36(a0)
000178C8 6000                       		bra.s	Obj69_Spinner
000178CA                            ; ===========================================================================
000178CA                            
000178CA                            Obj69_Trapdoor:				; XREF: Obj69_Index
000178CA 5368 0030                  		subq.w	#1,$30(a0)
000178CE 6A00                       		bpl.s	Obj69_Animate
000178D0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000178D6 0868 0000 001C             		bchg	#0,$1C(a0)
000178DC 4A28 0001                  		tst.b	1(a0)
000178E0 6A00                       		bpl.s	Obj69_Animate
000178E2 303C 00BB                  		move.w	#$BB,d0
000178E6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
000178EC                            
000178EC                            Obj69_Animate:
000178EC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000178F2 4EB9 0000 C138             		jsr	AnimateSprite
000178F8 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000178FC 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000178FE 323C 004B                  		move.w	#$4B,d1
00017902 343C 000C                  		move.w	#$C,d2
00017906 3602                       		move.w	d2,d3
00017908 5243                       		addq.w	#1,d3
0001790A 3828 0008                  		move.w	8(a0),d4
0001790E 6100 9C54                  		bsr.w	SolidObject
00017912 6000 9928                  		bra.w	MarkObjGone
00017916                            ; ===========================================================================
00017916                            
00017916                            Obj69_NotSolid:
00017916 0828 0003 0022             		btst	#3,$22(a0)
0001791C 6700                       		beq.s	Obj69_Display
0001791E 43F8 D000                  		lea	($FFFFD000).w,a1
00017922 08A9 0003 0022             		bclr	#3,$22(a1)
00017928 08A8 0003 0022             		bclr	#3,$22(a0)
0001792E 4228 0025                  		clr.b	$25(a0)
00017932                            
00017932                            Obj69_Display:
00017932 6000 9908                  		bra.w	MarkObjGone
00017936                            ; ===========================================================================
00017936                            
00017936                            Obj69_Spinner:				; XREF: Obj69_Index
00017936 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001793A C068 0036                  		and.w	$36(a0),d0
0001793E 6600                       		bne.s	Obj69_Delay
00017940 117C 0001 0034             		move.b	#1,$34(a0)
00017946                            
00017946                            Obj69_Delay:
00017946 4A28 0034                  		tst.b	$34(a0)
0001794A 6700                       		beq.s	Obj69_Animate2
0001794C 5368 0030                  		subq.w	#1,$30(a0)
00017950 6A00                       		bpl.s	Obj69_Animate2
00017952 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017958 4228 0034                  		clr.b	$34(a0)
0001795C 0868 0000 001C             		bchg	#0,$1C(a0)
00017962                            
00017962                            Obj69_Animate2:
00017962 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017968 4EB9 0000 C138             		jsr	AnimateSprite
0001796E 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017972 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017974 323C 001B                  		move.w	#$1B,d1
00017978 343C 0007                  		move.w	#7,d2
0001797C 3602                       		move.w	d2,d3
0001797E 5243                       		addq.w	#1,d3
00017980 3828 0008                  		move.w	8(a0),d4
00017984 6100 9BDE                  		bsr.w	SolidObject
00017988 6000 98B2                  		bra.w	MarkObjGone
0001798C                            ; ===========================================================================
0001798C                            
0001798C                            Obj69_NotSolid2:
0001798C 0828 0003 0022             		btst	#3,$22(a0)
00017992 6700                       		beq.s	Obj69_Display2
00017994 43F8 D000                  		lea	($FFFFD000).w,a1
00017998 08A9 0003 0022             		bclr	#3,$22(a1)
0001799E 08A8 0003 0022             		bclr	#3,$22(a0)
000179A4 4228 0025                  		clr.b	$25(a0)
000179A8                            
000179A8                            Obj69_Display2:
000179A8 6000 9892                  		bra.w	MarkObjGone
000179AC                            ; ===========================================================================
000179AC                            Ani_obj69:
000179AC                            	include "_anim\obj69.asm"
000179AC                            ; ---------------------------------------------------------------------------
000179AC                            ; Animation script - trapdoor (SBZ)
000179AC                            ; ---------------------------------------------------------------------------
000179AC 0000                       		dc.w byte_158AC-Ani_obj69
000179AE 0000                       		dc.w byte_158B2-Ani_obj69
000179B0 0000                       		dc.w byte_158B8-Ani_obj69
000179B2 0000                       		dc.w byte_158CC-Ani_obj69
000179B4 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000179BA 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000179C0 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000179CD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000179D4 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000179E1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000179E8                            		even
000179E8                            		even
000179E8                            
000179E8                            ; ---------------------------------------------------------------------------
000179E8                            ; Sprite mappings - trapdoor (SBZ)
000179E8                            ; ---------------------------------------------------------------------------
000179E8                            Map_obj69:
000179E8                            	include "_maps\obj69.asm"
000179E8                            ; ---------------------------------------------------------------------------
000179E8                            ; Sprite mappings - trapdoor (SBZ)
000179E8                            ; ---------------------------------------------------------------------------
000179E8 0000                       		dc.w byte_158E6-Map_obj69
000179EA 0000                       		dc.w byte_158FB-Map_obj69
000179EC 0000                       		dc.w byte_15924-Map_obj69
000179EE 04                         byte_158E6:	dc.b 4
000179EF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000179F4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000179F9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000179FE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017A03 08                         byte_158FB:	dc.b 8
00017A04 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017A09 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017A0E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00017A13 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017A18 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017A1D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00017A22 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017A27 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017A2C 04                         byte_15924:	dc.b 4
00017A2D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017A32 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017A37 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017A3C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017A42 00                         		even
00017A42 00                         		even
00017A42                            
00017A42                            ; ---------------------------------------------------------------------------
00017A42                            ; Sprite mappings - spinning platforms (SBZ)
00017A42                            ; ---------------------------------------------------------------------------
00017A42                            Map_obj69a:
00017A42                            	include "_maps\obj69a.asm"
00017A42                            ; ---------------------------------------------------------------------------
00017A42                            ; Sprite mappings - spinning platforms (SBZ)
00017A42                            ; ---------------------------------------------------------------------------
00017A42 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017A46 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017A4A 0000                       		dc.w byte_15970-Map_obj69a
00017A4C 02                         byte_15944:	dc.b 2
00017A4D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017A52 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017A57 02                         byte_1594F:	dc.b 2
00017A58 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017A5D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017A62 02                         byte_1595A:	dc.b 2
00017A63 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017A68 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017A6D 02                         byte_15965:	dc.b 2
00017A6E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017A73 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017A78 02                         byte_15970:	dc.b 2
00017A79 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017A7E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017A84 00                         		even
00017A84 00                         		even
00017A84                            
00017A84                            ; ===========================================================================
00017A84                            ; ---------------------------------------------------------------------------
00017A84                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017A84                            ; ---------------------------------------------------------------------------
00017A84                            
00017A84                            Obj6A:					; XREF: Obj_Index
00017A84 7000                       		moveq	#0,d0
00017A86 1028 0024                  		move.b	$24(a0),d0
00017A8A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017A8E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017A92                            ; ===========================================================================
00017A92 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017A94 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017A96                            ; ===========================================================================
00017A96                            
00017A96                            Obj6A_Main:				; XREF: Obj6A_Index
00017A96 5428 0024                  		addq.b	#2,$24(a0)
00017A9A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017AA2 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017AA8 117C 0004 0001             		move.b	#4,1(a0)
00017AAE 117C 0004 0018             		move.b	#4,$18(a0)
00017AB4 117C 0020 0019             		move.b	#$20,$19(a0)
00017ABA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017AC0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017AC6 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017ACC 6400                       		bcc.s	Obj6A_Action
00017ACE 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017AD4                            
00017AD4                            Obj6A_Action:				; XREF: Obj6A_Index
00017AD4 7000                       		moveq	#0,d0
00017AD6 1028 0028                  		move.b	$28(a0),d0
00017ADA 0240 0007                  		andi.w	#7,d0
00017ADE D040                       		add.w	d0,d0
00017AE0 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017AE4 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017AE8 3028 003A                  		move.w	$3A(a0),d0
00017AEC 0240 FF80                  		andi.w	#$FF80,d0
00017AF0 3238 F700                  		move.w	($FFFFF700).w,d1
00017AF4 0441 0080                  		subi.w	#$80,d1
00017AF8 0241 FF80                  		andi.w	#$FF80,d1
00017AFC 9041                       		sub.w	d1,d0
00017AFE 0C40 0280                  		cmpi.w	#$280,d0
00017B02 6200                       		bhi.s	Obj6A_Delete
00017B04 4EF9 0000 F186             		jmp	DisplaySprite
00017B0A                            ; ===========================================================================
00017B0A                            
00017B0A                            Obj6A_Delete:
00017B0A 4EF9 0000 F1C2             		jmp	DeleteObject
00017B10                            ; ===========================================================================
00017B10 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017B14 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017B18 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017B1A                            ; ===========================================================================
00017B1A                            
00017B1A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017B1A 4E75                       		rts	
00017B1C                            ; ===========================================================================
00017B1C                            
00017B1C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017B1C 323C 0060                  		move.w	#$60,d1
00017B20 7000                       		moveq	#0,d0
00017B22 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017B26 0828 0000 0022             		btst	#0,$22(a0)
00017B2C 6700                       		beq.s	Obj6A_Animate01
00017B2E 4440                       		neg.w	d0
00017B30 D041                       		add.w	d1,d0
00017B32                            
00017B32                            Obj6A_Animate01:
00017B32 3228 003A                  		move.w	$3A(a0),d1
00017B36 9240                       		sub.w	d0,d1
00017B38 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017B3C 5328 001E                  		subq.b	#1,$1E(a0)
00017B40 6A00                       		bpl.s	loc_15A46
00017B42 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017B48 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017B4E                            
00017B4E                            loc_15A46:
00017B4E 4A28 0001                  		tst.b	1(a0)
00017B52 6A00                       		bpl.s	locret_15A60
00017B54 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B58 0240 000F                  		andi.w	#$F,d0
00017B5C 6600                       		bne.s	locret_15A60
00017B5E 303C 00B0                  		move.w	#$B0,d0
00017B62 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017B68                            
00017B68                            locret_15A60:
00017B68 4E75                       		rts	
00017B6A                            ; ===========================================================================
00017B6A                            
00017B6A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017B6A 323C 0030                  		move.w	#$30,d1
00017B6E 7000                       		moveq	#0,d0
00017B70 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017B74 0828 0000 0022             		btst	#0,$22(a0)
00017B7A 6700                       		beq.s	Obj6A_Animate02
00017B7C 4440                       		neg.w	d0
00017B7E 0640 0080                  		addi.w	#$80,d0
00017B82                            
00017B82                            Obj6A_Animate02:
00017B82 3228 0038                  		move.w	$38(a0),d1
00017B86 9240                       		sub.w	d0,d1
00017B88 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017B8C 5328 001E                  		subq.b	#1,$1E(a0)
00017B90 6A00                       		bpl.s	loc_15A96
00017B92 117C 0002 001E             		move.b	#2,$1E(a0)
00017B98 0868 0000 001A             		bchg	#0,$1A(a0)
00017B9E                            
00017B9E                            loc_15A96:
00017B9E 4A28 0001                  		tst.b	1(a0)
00017BA2 6A00                       		bpl.s	locret_15AB0
00017BA4 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017BA8 0C00 0018                  		cmpi.b	#$18,d0
00017BAC 6600                       		bne.s	locret_15AB0
00017BAE 303C 00B0                  		move.w	#$B0,d0
00017BB2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017BB8                            
00017BB8                            locret_15AB0:
00017BB8 4E75                       		rts	
00017BBA                            ; ===========================================================================
00017BBA                            
00017BBA                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017BBA 4A28 003D                  		tst.b	$3D(a0)
00017BBE 6600                       		bne.s	Obj6A_Animate03
00017BC0 3038 D008                  		move.w	($FFFFD008).w,d0
00017BC4 0440 00C0                  		subi.w	#$C0,d0
00017BC8 6500                       		bcs.s	loc_15B02
00017BCA 9068 0008                  		sub.w	8(a0),d0
00017BCE 6500                       		bcs.s	loc_15B02
00017BD0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017BD4 0440 0080                  		subi.w	#$80,d0
00017BD8 B068 000C                  		cmp.w	$C(a0),d0
00017BDC 6400                       		bcc.s	locret_15B04
00017BDE 0640 0100                  		addi.w	#$100,d0
00017BE2 B068 000C                  		cmp.w	$C(a0),d0
00017BE6 6500                       		bcs.s	locret_15B04
00017BE8 117C 0001 003D             		move.b	#1,$3D(a0)
00017BEE 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017BF4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017BFA 117C 0002 001A             		move.b	#2,$1A(a0)
00017C00 303C 00B0                  		move.w	#$B0,d0
00017C04 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017C0A                            
00017C0A                            loc_15B02:
00017C0A 588F                       		addq.l	#4,sp
00017C0C                            
00017C0C                            locret_15B04:
00017C0C 4E75                       		rts	
00017C0E                            ; ===========================================================================
00017C0E                            
00017C0E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017C0E 4EB9 0000 F16C             		jsr	SpeedToPos
00017C14 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017C1A 5328 001E                  		subq.b	#1,$1E(a0)
00017C1E 6A00                       		bpl.s	locret_15B24
00017C20 117C 0002 001E             		move.b	#2,$1E(a0)
00017C26 0868 0000 001A             		bchg	#0,$1A(a0)
00017C2C                            
00017C2C                            locret_15B24:
00017C2C 4E75                       		rts	
00017C2E                            ; ===========================================================================
00017C2E                            
00017C2E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017C2E 4A28 003D                  		tst.b	$3D(a0)
00017C32 6600                       		bne.s	Obj6A_Animate04
00017C34 3038 D008                  		move.w	($FFFFD008).w,d0
00017C38 0640 00E0                  		addi.w	#$E0,d0
00017C3C 9068 0008                  		sub.w	8(a0),d0
00017C40 6400                       		bcc.s	loc_15B74
00017C42 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017C46 0440 0080                  		subi.w	#$80,d0
00017C4A B068 000C                  		cmp.w	$C(a0),d0
00017C4E 6400                       		bcc.s	locret_15B76
00017C50 0640 0100                  		addi.w	#$100,d0
00017C54 B068 000C                  		cmp.w	$C(a0),d0
00017C58 6500                       		bcs.s	locret_15B76
00017C5A 117C 0001 003D             		move.b	#1,$3D(a0)
00017C60 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017C66 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017C6C 117C 0002 001A             		move.b	#2,$1A(a0)
00017C72 303C 00B0                  		move.w	#$B0,d0
00017C76 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017C7C                            
00017C7C                            loc_15B74:
00017C7C 588F                       		addq.l	#4,sp
00017C7E                            
00017C7E                            locret_15B76:
00017C7E 4E75                       		rts	
00017C80                            ; ===========================================================================
00017C80                            
00017C80                            Obj6A_Animate04:
00017C80 4EB9 0000 F16C             		jsr	SpeedToPos
00017C86 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017C8C 5328 001E                  		subq.b	#1,$1E(a0)
00017C90 6A00                       		bpl.s	locret_15B96
00017C92 117C 0002 001E             		move.b	#2,$1E(a0)
00017C98 0868 0000 001A             		bchg	#0,$1A(a0)
00017C9E                            
00017C9E                            locret_15B96:
00017C9E 4E75                       		rts	
00017CA0                            ; ===========================================================================
00017CA0                            ; ---------------------------------------------------------------------------
00017CA0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017CA0                            ; ---------------------------------------------------------------------------
00017CA0                            Map_obj6A:
00017CA0                            	include "_maps\obj6A.asm"
00017CA0                            ; ---------------------------------------------------------------------------
00017CA0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017CA0                            ; ---------------------------------------------------------------------------
00017CA0 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017CA4 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017CA8 07                         byte_15BA0:	dc.b 7
00017CA9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017CAE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017CB3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017CB8 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017CBD E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017CC2 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017CC7 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017CCC 07                         byte_15BC4:	dc.b 7
00017CCD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017CD2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017CD7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017CDC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017CE1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017CE6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017CEB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017CF0 04                         byte_15BE8:	dc.b 4
00017CF1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017CF6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017CFB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017D00 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017D05 04                         byte_15BFD:	dc.b 4
00017D06 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017D0B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017D10 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017D15 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017D1A                            		even
00017D1A                            		even
00017D1A                            
00017D1A                            ; ===========================================================================
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            ; Object 6B - stomper (SBZ)
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            
00017D1A                            Obj6B:					; XREF: Obj_Index
00017D1A 7000                       		moveq	#0,d0
00017D1C 1028 0024                  		move.b	$24(a0),d0
00017D20 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017D24 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017D28                            ; ===========================================================================
00017D28 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017D2A 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017D2C                            
00017D2C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017D30 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017D34 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017D38 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017D3C 8040 0005                  		dc.b  $80, $40,	  0,   5
00017D40                            ; ===========================================================================
00017D40                            
00017D40                            Obj6B_Main:				; XREF: Obj6B_Index
00017D40 5428 0024                  		addq.b	#2,$24(a0)
00017D44 7000                       		moveq	#0,d0
00017D46 1028 0028                  		move.b	$28(a0),d0
00017D4A E448                       		lsr.w	#2,d0
00017D4C 0240 001C                  		andi.w	#$1C,d0
00017D50 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017D54 115B 0019                  		move.b	(a3)+,$19(a0)
00017D58 115B 0016                  		move.b	(a3)+,$16(a0)
00017D5C E448                       		lsr.w	#2,d0
00017D5E 1140 001A                  		move.b	d0,$1A(a0)
00017D62 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017D6A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017D70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017D76 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017D78 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017D7E 6700                       		beq.s	Obj6B_SBZ3
00017D80                            
00017D80                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017D80 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D84 7000                       		moveq	#0,d0
00017D86 1028 0023                  		move.b	$23(a0),d0
00017D8A 6700                       		beq.s	Obj6B_Delete
00017D8C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D92                            
00017D92                            Obj6B_Delete:
00017D92 4EF9 0000 F1C2             		jmp	DeleteObject
00017D98                            ; ===========================================================================
00017D98                            
00017D98                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017D98 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017D9E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017DA4 6600                       		bne.s	Obj6B_SBZ12
00017DA6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017DAA 7000                       		moveq	#0,d0
00017DAC 1028 0023                  		move.b	$23(a0),d0
00017DB0 6700                       		beq.s	Obj6B_SBZ12
00017DB2 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017DB8 6700                       		beq.s	Obj6B_SBZ12
00017DBA 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017DBE 60C0                       		bra.s	Obj6B_ChkGone
00017DC0                            ; ===========================================================================
00017DC0                            
00017DC0                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017DC0 0028 0004 0001             		ori.b	#4,1(a0)
00017DC6 117C 0004 0018             		move.b	#4,$18(a0)
00017DCC 3168 0008 0034             		move.w	8(a0),$34(a0)
00017DD2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017DD8 7000                       		moveq	#0,d0
00017DDA 101B                       		move.b	(a3)+,d0
00017DDC 3140 003C                  		move.w	d0,$3C(a0)
00017DE0 7000                       		moveq	#0,d0
00017DE2 1028 0028                  		move.b	$28(a0),d0
00017DE6 6A00                       		bpl.s	Obj6B_Action
00017DE8 0200 000F                  		andi.b	#$F,d0
00017DEC 1140 003E                  		move.b	d0,$3E(a0)
00017DF0 1153 0028                  		move.b	(a3),$28(a0)
00017DF4 0C13 0005                  		cmpi.b	#5,(a3)
00017DF8 6600                       		bne.s	Obj6B_ChkGone2
00017DFA 08E8 0004 0001             		bset	#4,1(a0)
00017E00                            
00017E00                            Obj6B_ChkGone2:
00017E00 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E04 7000                       		moveq	#0,d0
00017E06 1028 0023                  		move.b	$23(a0),d0
00017E0A 6700                       		beq.s	Obj6B_Action
00017E0C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017E12                            
00017E12                            Obj6B_Action:				; XREF: Obj6B_Index
00017E12 3F28 0008                  		move.w	8(a0),-(sp)
00017E16 7000                       		moveq	#0,d0
00017E18 1028 0028                  		move.b	$28(a0),d0
00017E1C 0240 000F                  		andi.w	#$F,d0
00017E20 D040                       		add.w	d0,d0
00017E22 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017E26 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017E2A 381F                       		move.w	(sp)+,d4
00017E2C 4A28 0001                  		tst.b	1(a0)
00017E30 6A00                       		bpl.s	Obj6B_ChkDel
00017E32 7200                       		moveq	#0,d1
00017E34 1228 0019                  		move.b	$19(a0),d1
00017E38 0641 000B                  		addi.w	#$B,d1
00017E3C 7400                       		moveq	#0,d2
00017E3E 1428 0016                  		move.b	$16(a0),d2
00017E42 3602                       		move.w	d2,d3
00017E44 5243                       		addq.w	#1,d3
00017E46 6100 971C                  		bsr.w	SolidObject
00017E4A                            
00017E4A                            Obj6B_ChkDel:
00017E4A 3028 0034                  		move.w	$34(a0),d0
00017E4E 0240 FF80                  		andi.w	#$FF80,d0
00017E52 3238 F700                  		move.w	($FFFFF700).w,d1
00017E56 0441 0080                  		subi.w	#$80,d1
00017E5A 0241 FF80                  		andi.w	#$FF80,d1
00017E5E 9041                       		sub.w	d1,d0
00017E60 0C40 0280                  		cmpi.w	#$280,d0
00017E64 6200                       		bhi.s	loc_15D64
00017E66 4EF9 0000 F186             		jmp	DisplaySprite
00017E6C                            ; ===========================================================================
00017E6C                            
00017E6C                            loc_15D64:
00017E6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017E72 6600                       		bne.s	Obj6B_Delete2
00017E74 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017E78 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E7C 7000                       		moveq	#0,d0
00017E7E 1028 0023                  		move.b	$23(a0),d0
00017E82 6700                       		beq.s	Obj6B_Delete2
00017E84 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017E8A                            
00017E8A                            Obj6B_Delete2:
00017E8A 4EF9 0000 F1C2             		jmp	DeleteObject
00017E90                            ; ===========================================================================
00017E90 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017E94 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017E98 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017E9C                            ; ===========================================================================
00017E9C                            
00017E9C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017E9C 4E75                       		rts	
00017E9E                            ; ===========================================================================
00017E9E                            
00017E9E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017E9E 4A28 0038                  		tst.b	$38(a0)
00017EA2 6600                       		bne.s	loc_15DB4
00017EA4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017EA8 7000                       		moveq	#0,d0
00017EAA 1028 003E                  		move.b	$3E(a0),d0
00017EAE 0832 0000 0000             		btst	#0,(a2,d0.w)
00017EB4 6700                       		beq.s	loc_15DC2
00017EB6 117C 0001 0038             		move.b	#1,$38(a0)
00017EBC                            
00017EBC                            loc_15DB4:
00017EBC 3028 003C                  		move.w	$3C(a0),d0
00017EC0 B068 003A                  		cmp.w	$3A(a0),d0
00017EC4 6700                       		beq.s	loc_15DE0
00017EC6 5468 003A                  		addq.w	#2,$3A(a0)
00017ECA                            
00017ECA                            loc_15DC2:
00017ECA 3028 003A                  		move.w	$3A(a0),d0
00017ECE 0828 0000 0022             		btst	#0,$22(a0)
00017ED4 6700                       		beq.s	loc_15DD4
00017ED6 4440                       		neg.w	d0
00017ED8 0640 0080                  		addi.w	#$80,d0
00017EDC                            
00017EDC                            loc_15DD4:
00017EDC 3228 0034                  		move.w	$34(a0),d1
00017EE0 9240                       		sub.w	d0,d1
00017EE2 3141 0008                  		move.w	d1,8(a0)
00017EE6 4E75                       		rts	
00017EE8                            ; ===========================================================================
00017EE8                            
00017EE8                            loc_15DE0:
00017EE8 5228 0028                  		addq.b	#1,$28(a0)
00017EEC 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017EF2 4228 0038                  		clr.b	$38(a0)
00017EF6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017EFA 7000                       		moveq	#0,d0
00017EFC 1028 0023                  		move.b	$23(a0),d0
00017F00 67C8                       		beq.s	loc_15DC2
00017F02 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017F08 60C0                       		bra.s	loc_15DC2
00017F0A                            ; ===========================================================================
00017F0A                            
00017F0A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017F0A 4A28 0038                  		tst.b	$38(a0)
00017F0E 6600                       		bne.s	loc_15E14
00017F10 5368 0036                  		subq.w	#1,$36(a0)
00017F14 6600                       		bne.s	loc_15E1E
00017F16 117C 0001 0038             		move.b	#1,$38(a0)
00017F1C                            
00017F1C                            loc_15E14:
00017F1C 4A68 003A                  		tst.w	$3A(a0)
00017F20 6700                       		beq.s	loc_15E3C
00017F22 5568 003A                  		subq.w	#2,$3A(a0)
00017F26                            
00017F26                            loc_15E1E:
00017F26 3028 003A                  		move.w	$3A(a0),d0
00017F2A 0828 0000 0022             		btst	#0,$22(a0)
00017F30 6700                       		beq.s	loc_15E30
00017F32 4440                       		neg.w	d0
00017F34 0640 0080                  		addi.w	#$80,d0
00017F38                            
00017F38                            loc_15E30:
00017F38 3228 0034                  		move.w	$34(a0),d1
00017F3C 9240                       		sub.w	d0,d1
00017F3E 3141 0008                  		move.w	d1,8(a0)
00017F42 4E75                       		rts	
00017F44                            ; ===========================================================================
00017F44                            
00017F44                            loc_15E3C:
00017F44 5328 0028                  		subq.b	#1,$28(a0)
00017F48 4228 0038                  		clr.b	$38(a0)
00017F4C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017F50 7000                       		moveq	#0,d0
00017F52 1028 0023                  		move.b	$23(a0),d0
00017F56 67CE                       		beq.s	loc_15E1E
00017F58 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017F5E 60C6                       		bra.s	loc_15E1E
00017F60                            ; ===========================================================================
00017F60                            
00017F60                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017F60 4A28 0038                  		tst.b	$38(a0)
00017F64 6600                       		bne.s	loc_15E7C
00017F66 4A68 003A                  		tst.w	$3A(a0)
00017F6A 6700                       		beq.s	loc_15E6A
00017F6C 5368 003A                  		subq.w	#1,$3A(a0)
00017F70 6000                       		bra.s	loc_15E8E
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            loc_15E6A:
00017F72 5368 0036                  		subq.w	#1,$36(a0)
00017F76 6A00                       		bpl.s	loc_15E8E
00017F78 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F7E 117C 0001 0038             		move.b	#1,$38(a0)
00017F84                            
00017F84                            loc_15E7C:
00017F84 5068 003A                  		addq.w	#8,$3A(a0)
00017F88 3028 003A                  		move.w	$3A(a0),d0
00017F8C B068 003C                  		cmp.w	$3C(a0),d0
00017F90 6600                       		bne.s	loc_15E8E
00017F92 4228 0038                  		clr.b	$38(a0)
00017F96                            
00017F96                            loc_15E8E:
00017F96 3028 003A                  		move.w	$3A(a0),d0
00017F9A 0828 0000 0022             		btst	#0,$22(a0)
00017FA0 6700                       		beq.s	loc_15EA0
00017FA2 4440                       		neg.w	d0
00017FA4 0640 0038                  		addi.w	#$38,d0
00017FA8                            
00017FA8                            loc_15EA0:
00017FA8 3228 0030                  		move.w	$30(a0),d1
00017FAC D240                       		add.w	d0,d1
00017FAE 3141 000C                  		move.w	d1,$C(a0)
00017FB2 4E75                       		rts	
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017FB4 4A28 0038                  		tst.b	$38(a0)
00017FB8 6600                       		bne.s	loc_15ED0
00017FBA 4A68 003A                  		tst.w	$3A(a0)
00017FBE 6700                       		beq.s	loc_15EBE
00017FC0 5168 003A                  		subq.w	#8,$3A(a0)
00017FC4 6000                       		bra.s	loc_15EF0
00017FC6                            ; ===========================================================================
00017FC6                            
00017FC6                            loc_15EBE:
00017FC6 5368 0036                  		subq.w	#1,$36(a0)
00017FCA 6A00                       		bpl.s	loc_15EF0
00017FCC 317C 003C 0036             		move.w	#$3C,$36(a0)
00017FD2 117C 0001 0038             		move.b	#1,$38(a0)
00017FD8                            
00017FD8                            loc_15ED0:
00017FD8 3028 003A                  		move.w	$3A(a0),d0
00017FDC B068 003C                  		cmp.w	$3C(a0),d0
00017FE0 6700                       		beq.s	loc_15EE0
00017FE2 5068 003A                  		addq.w	#8,$3A(a0)
00017FE6 6000                       		bra.s	loc_15EF0
00017FE8                            ; ===========================================================================
00017FE8                            
00017FE8                            loc_15EE0:
00017FE8 5368 0036                  		subq.w	#1,$36(a0)
00017FEC 6A00                       		bpl.s	loc_15EF0
00017FEE 317C 003C 0036             		move.w	#$3C,$36(a0)
00017FF4 4228 0038                  		clr.b	$38(a0)
00017FF8                            
00017FF8                            loc_15EF0:
00017FF8 3028 003A                  		move.w	$3A(a0),d0
00017FFC 0828 0000 0022             		btst	#0,$22(a0)
00018002 6700                       		beq.s	loc_15F02
00018004 4440                       		neg.w	d0
00018006 0640 0038                  		addi.w	#$38,d0
0001800A                            
0001800A                            loc_15F02:
0001800A 3228 0030                  		move.w	$30(a0),d1
0001800E D240                       		add.w	d0,d1
00018010 3141 000C                  		move.w	d1,$C(a0)
00018014 4E75                       		rts	
00018016                            ; ===========================================================================
00018016                            
00018016                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00018016 4A28 0038                  		tst.b	$38(a0)
0001801A 6600                       		bne.s	loc_15F3E
0001801C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00018020 7000                       		moveq	#0,d0
00018022 1028 003E                  		move.b	$3E(a0),d0
00018026 0832 0000 0000             		btst	#0,(a2,d0.w)
0001802C 6700                       		beq.s	locret_15F5C
0001802E 117C 0001 0038             		move.b	#1,$38(a0)
00018034 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018038 7000                       		moveq	#0,d0
0001803A 1028 0023                  		move.b	$23(a0),d0
0001803E 6700                       		beq.s	loc_15F3E
00018040 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018046                            
00018046                            loc_15F3E:
00018046 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001804E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00018056 3168 0008 0034             		move.w	8(a0),$34(a0)
0001805C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00018062 6700                       		beq.s	loc_15F5E
00018064                            
00018064                            locret_15F5C:
00018064 4E75                       		rts	
00018066                            ; ===========================================================================
00018066                            
00018066                            loc_15F5E:
00018066 4228 0028                  		clr.b	$28(a0)
0001806A 4228 0038                  		clr.b	$38(a0)
0001806E 4E75                       		rts	
00018070                            ; ===========================================================================
00018070                            ; ---------------------------------------------------------------------------
00018070                            ; Sprite mappings - stomper and	platforms (SBZ)
00018070                            ; ---------------------------------------------------------------------------
00018070                            Map_obj6B:
00018070                            	include "_maps\obj6B.asm"
00018070                            ; ---------------------------------------------------------------------------
00018070                            ; Sprite mappings - stomper and	platforms (SBZ)
00018070                            ; ---------------------------------------------------------------------------
00018070 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00018074 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00018078 0000                       		dc.w byte_15FB0-Map_obj6B
0001807A 04                         byte_15F72:	dc.b 4
0001807B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00018080 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018085 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001808A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001808F 08                         byte_15F87:	dc.b 8
00018090 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00018095 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001809A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001809F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000180A4 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000180A9 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000180AE 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000180B3 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000180B8 0E                         byte_15FB0:	dc.b $E
000180B9 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000180BE C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000180C3 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000180C8 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000180CD C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000180D2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000180D7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000180DC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000180E1 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000180E6 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000180EB E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000180F0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000180F5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000180FA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018100 00                         		even
00018100 00                         		even
00018100                            
00018100                            ; ===========================================================================
00018100                            ; ---------------------------------------------------------------------------
00018100                            ; Object 6C - vanishing	platforms (SBZ)
00018100                            ; ---------------------------------------------------------------------------
00018100                            
00018100                            Obj6C:					; XREF: Obj_Index
00018100 7000                       		moveq	#0,d0
00018102 1028 0024                  		move.b	$24(a0),d0
00018106 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001810A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001810E                            ; ===========================================================================
0001810E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00018110 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018112 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018114 0000                       		dc.w loc_16068-Obj6C_Index
00018116                            ; ===========================================================================
00018116                            
00018116                            Obj6C_Main:				; XREF: Obj6C_Index
00018116 5C28 0024                  		addq.b	#6,$24(a0)
0001811A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00018122 317C 44C3 0002             		move.w	#$44C3,2(a0)
00018128 0028 0004 0001             		ori.b	#4,1(a0)
0001812E 117C 0010 0019             		move.b	#$10,$19(a0)
00018134 117C 0004 0018             		move.b	#4,$18(a0)
0001813A 7000                       		moveq	#0,d0
0001813C 1028 0028                  		move.b	$28(a0),d0	; get object type
00018140 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018144 5240                       		addq.w	#1,d0		; add 1
00018146 EF48                       		lsl.w	#7,d0		; multiply by $80
00018148 3200                       		move.w	d0,d1
0001814A 5340                       		subq.w	#1,d0
0001814C 3140 0030                  		move.w	d0,$30(a0)
00018150 3140 0032                  		move.w	d0,$32(a0)
00018154 7000                       		moveq	#0,d0
00018156 1028 0028                  		move.b	$28(a0),d0	; get object type
0001815A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001815E 0641 0080                  		addi.w	#$80,d1
00018162 C0C1                       		mulu.w	d1,d0
00018164 E088                       		lsr.l	#8,d0
00018166 3140 0036                  		move.w	d0,$36(a0)
0001816A 5341                       		subq.w	#1,d1
0001816C 3141 0038                  		move.w	d1,$38(a0)
00018170                            
00018170                            loc_16068:				; XREF: Obj6C_Index
00018170 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018174 9068 0036                  		sub.w	$36(a0),d0
00018178 C068 0038                  		and.w	$38(a0),d0
0001817C 6600                       		bne.s	Obj6C_Animate
0001817E 5928 0024                  		subq.b	#4,$24(a0)
00018182 6000                       		bra.s	Obj6C_Vanish
00018184                            ; ===========================================================================
00018184                            
00018184                            Obj6C_Animate:
00018184 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001818A 4EB9 0000 C138             		jsr	AnimateSprite
00018190 6000 90AA                  		bra.w	MarkObjGone
00018194                            ; ===========================================================================
00018194                            
00018194                            Obj6C_Vanish:				; XREF: Obj6C_Index
00018194 5368 0030                  		subq.w	#1,$30(a0)
00018198 6A00                       		bpl.s	loc_160AA
0001819A 317C 007F 0030             		move.w	#127,$30(a0)
000181A0 4A28 001C                  		tst.b	$1C(a0)
000181A4 6700                       		beq.s	loc_160A4
000181A6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000181AC                            
000181AC                            loc_160A4:
000181AC 0868 0000 001C             		bchg	#0,$1C(a0)
000181B2                            
000181B2                            loc_160AA:
000181B2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000181B8 4EB9 0000 C138             		jsr	AnimateSprite
000181BE 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000181C4 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000181C6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000181CC 6600                       		bne.s	loc_160D6
000181CE 7200                       		moveq	#0,d1
000181D0 1228 0019                  		move.b	$19(a0),d1
000181D4 4EB9 0000 8E42             		jsr	(PlatformObject).l
000181DA 6000 9060                  		bra.w	MarkObjGone
000181DE                            ; ===========================================================================
000181DE                            
000181DE                            loc_160D6:
000181DE 7200                       		moveq	#0,d1
000181E0 1228 0019                  		move.b	$19(a0),d1
000181E4 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
000181EA 3428 0008                  		move.w	8(a0),d2
000181EE 4EB9 0000 9520             		jsr	(MvSonicOnPtfm2).l
000181F4 6000 9046                  		bra.w	MarkObjGone
000181F8                            ; ===========================================================================
000181F8                            
000181F8                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000181F8 0828 0003 0022             		btst	#3,$22(a0)
000181FE 6700                       		beq.s	Obj6C_Display
00018200 43F8 D000                  		lea	($FFFFD000).w,a1
00018204 08A9 0003 0022             		bclr	#3,$22(a1)
0001820A 08A8 0003 0022             		bclr	#3,$22(a0)
00018210 117C 0002 0024             		move.b	#2,$24(a0)
00018216 4228 0025                  		clr.b	$25(a0)
0001821A                            
0001821A                            Obj6C_Display:
0001821A 6000 9020                  		bra.w	MarkObjGone
0001821E                            ; ===========================================================================
0001821E                            Ani_obj6C:
0001821E                            	include "_anim\obj6C.asm"
0001821E                            ; ---------------------------------------------------------------------------
0001821E                            ; Animation script - vanishing platforms (SBZ)
0001821E                            ; ---------------------------------------------------------------------------
0001821E 0000                       		dc.w byte_1611A-Ani_obj6C
00018220 0000                       		dc.w byte_16122-Ani_obj6C
00018222 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001822A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00018232                            		even
00018232                            		even
00018232                            
00018232                            ; ---------------------------------------------------------------------------
00018232                            ; Sprite mappings - vanishing platforms	(SBZ)
00018232                            ; ---------------------------------------------------------------------------
00018232                            Map_obj6C:
00018232                            	include "_maps\obj6C.asm"
00018232                            ; ---------------------------------------------------------------------------
00018232                            ; Sprite mappings - vanishing platforms	(SBZ)
00018232                            ; ---------------------------------------------------------------------------
00018232 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018236 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001823A 01                         byte_16132:	dc.b 1
0001823B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018240 01                         byte_16138:	dc.b 1
00018241 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018246 01                         byte_1613E:	dc.b 1
00018247 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001824C 00                         byte_16144:	dc.b 0
0001824E 00                         		even
0001824E 00                         		even
0001824E                            
0001824E                            ; ===========================================================================
0001824E                            ; ---------------------------------------------------------------------------
0001824E                            ; Object 6E - electrocution orbs (SBZ)
0001824E                            ; ---------------------------------------------------------------------------
0001824E                            
0001824E                            Obj6E:					; XREF: Obj_Index
0001824E 7000                       		moveq	#0,d0
00018250 1028 0024                  		move.b	$24(a0),d0
00018254 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00018258 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001825C                            ; ===========================================================================
0001825C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001825E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00018260                            ; ===========================================================================
00018260                            
00018260                            Obj6E_Main:				; XREF: Obj6E_Index
00018260 5428 0024                  		addq.b	#2,$24(a0)
00018264 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001826C 317C 047E 0002             		move.w	#$47E,2(a0)
00018272 0028 0004 0001             		ori.b	#4,1(a0)
00018278 117C 0028 0019             		move.b	#$28,$19(a0)
0001827E 7000                       		moveq	#0,d0
00018280 1028 0028                  		move.b	$28(a0),d0	; read object type
00018284 E948                       		lsl.w	#4,d0		; multiply by $10
00018286 5340                       		subq.w	#1,d0
00018288 3140 0034                  		move.w	d0,$34(a0)
0001828C                            
0001828C                            Obj6E_Shock:				; XREF: Obj6E_Index
0001828C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018290 C068 0034                  		and.w	$34(a0),d0
00018294 6600                       		bne.s	Obj6E_Animate
00018296 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001829C 4A28 0001                  		tst.b	1(a0)
000182A0 6A00                       		bpl.s	Obj6E_Animate
000182A2 303C 00B1                  		move.w	#$B1,d0
000182A6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play electricity sound
000182AC                            
000182AC                            Obj6E_Animate:
000182AC 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000182B2 4EB9 0000 C138             		jsr	AnimateSprite
000182B8 117C 0000 0020             		move.b	#0,$20(a0)
000182BE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000182C4 6600                       		bne.s	Obj6E_Display	; if not, branch
000182C6 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000182CC                            
000182CC                            Obj6E_Display:
000182CC 6000 8F6E                  		bra.w	MarkObjGone
000182D0                            ; ===========================================================================
000182D0                            Ani_obj6E:
000182D0                            	include "_anim\obj6E.asm"
000182D0                            ; ---------------------------------------------------------------------------
000182D0                            ; Animation script - electrocution orbs (SBZ)
000182D0                            ; ---------------------------------------------------------------------------
000182D0 0000                       		dc.w byte_161CC-Ani_obj6E
000182D2 0000                       		dc.w byte_161D0-Ani_obj6E
000182D4 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000182D8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000182E8                            		even
000182E8                            		even
000182E8                            
000182E8                            ; ---------------------------------------------------------------------------
000182E8                            ; Sprite mappings - electrocution orbs (SBZ)
000182E8                            ; ---------------------------------------------------------------------------
000182E8                            Map_obj6E:
000182E8                            	include "_maps\obj6E.asm"
000182E8                            ; ---------------------------------------------------------------------------
000182E8                            ; Sprite mappings - electrocution orbs (SBZ)
000182E8                            ; ---------------------------------------------------------------------------
000182E8 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000182EC 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000182F0 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000182F4 02                         byte_161EC:	dc.b 2
000182F5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000182FA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000182FF 03                         byte_161F7:	dc.b 3
00018300 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018305 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001830A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001830F 05                         byte_16207:	dc.b 5
00018310 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018315 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001831A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001831F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018324 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018329 04                         byte_16221:	dc.b 4
0001832A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001832F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018334 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018339 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001833E 06                         byte_16236:	dc.b 6
0001833F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018344 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018349 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001834E F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00018353 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018358 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001835D 04                         byte_16255:	dc.b 4
0001835E F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018363 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018368 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0001836D F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00018372                            		even
00018372                            		even
00018372                            
00018372                            ; ===========================================================================
00018372                            ; ---------------------------------------------------------------------------
00018372                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00018372                            ; ---------------------------------------------------------------------------
00018372                            
00018372                            Obj6F:					; XREF: Obj_Index
00018372 7000                       		moveq	#0,d0
00018374 1028 0024                  		move.b	$24(a0),d0
00018378 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001837C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00018380 3028 0030                  		move.w	$30(a0),d0
00018384 0240 FF80                  		andi.w	#$FF80,d0
00018388 3238 F700                  		move.w	($FFFFF700).w,d1
0001838C 0441 0080                  		subi.w	#$80,d1
00018390 0241 FF80                  		andi.w	#$FF80,d1
00018394 9041                       		sub.w	d1,d0
00018396 0C40 0280                  		cmpi.w	#$280,d0
0001839A 6200                       		bhi.s	loc_1629A
0001839C                            
0001839C                            Obj6F_Display:
0001839C 4EF9 0000 F186             		jmp	DisplaySprite
000183A2                            ; ===========================================================================
000183A2                            
000183A2                            loc_1629A:
000183A2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000183A8 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000183AA 0C40 FF80                  		cmpi.w	#-$80,d0
000183AE 64EC                       		bcc.s	Obj6F_Display
000183B0                            
000183B0                            Obj6F_Act1or2:
000183B0 1028 002F                  		move.b	$2F(a0),d0
000183B4 6A00                       		bpl.s	Obj6F_Delete
000183B6 0240 007F                  		andi.w	#$7F,d0
000183BA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000183BE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000183C4                            
000183C4                            Obj6F_Delete:
000183C4 4EF9 0000 F1C2             		jmp	DeleteObject
000183CA                            ; ===========================================================================
000183CA 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000183CC 0000                       		dc.w loc_163D8-Obj6F_Index
000183CE                            ; ===========================================================================
000183CE                            
000183CE                            Obj6F_Main:				; XREF: Obj6F_Index
000183CE 1028 0028                  		move.b	$28(a0),d0
000183D2 6B00 0000                  		bmi.w	loc_16380
000183D6 5428 0024                  		addq.b	#2,$24(a0)
000183DA 217C 0001 7A42 0004        		move.l	#Map_obj69a,4(a0)
000183E2 317C 04DF 0002             		move.w	#$4DF,2(a0)
000183E8 117C 0010 0019             		move.b	#$10,$19(a0)
000183EE 0028 0004 0001             		ori.b	#4,1(a0)
000183F4 117C 0004 0018             		move.b	#4,$18(a0)
000183FA 7000                       		moveq	#0,d0
000183FC 1028 0028                  		move.b	$28(a0),d0
00018400 3200                       		move.w	d0,d1
00018402 E648                       		lsr.w	#3,d0
00018404 0240 001E                  		andi.w	#$1E,d0
00018408 45FA 0000                  		lea	off_164A6(pc),a2
0001840C D4F2 0000                  		adda.w	(a2,d0.w),a2
00018410 315A 0038                  		move.w	(a2)+,$38(a0)
00018414 315A 0030                  		move.w	(a2)+,$30(a0)
00018418 214A 003C                  		move.l	a2,$3C(a0)
0001841C 0241 000F                  		andi.w	#$F,d1
00018420 E549                       		lsl.w	#2,d1
00018422 1141 0038                  		move.b	d1,$38(a0)
00018426 117C 0004 003A             		move.b	#4,$3A(a0)
0001842C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00018430 6700                       		beq.s	loc_16356
00018432 117C 0001 003B             		move.b	#1,$3B(a0)
00018438 4428 003A                  		neg.b	$3A(a0)
0001843C 7200                       		moveq	#0,d1
0001843E 1228 0038                  		move.b	$38(a0),d1
00018442 D228 003A                  		add.b	$3A(a0),d1
00018446 B228 0039                  		cmp.b	$39(a0),d1
0001844A 6500                       		bcs.s	loc_16352
0001844C 1001                       		move.b	d1,d0
0001844E 7200                       		moveq	#0,d1
00018450 4A00                       		tst.b	d0
00018452 6A00                       		bpl.s	loc_16352
00018454 1228 0039                  		move.b	$39(a0),d1
00018458 5901                       		subq.b	#4,d1
0001845A                            
0001845A                            loc_16352:
0001845A 1141 0038                  		move.b	d1,$38(a0)
0001845E                            
0001845E                            loc_16356:
0001845E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00018464 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001846A 4A41                       		tst.w	d1
0001846C 6600                       		bne.s	loc_1636C
0001846E 117C 0001 001C             		move.b	#1,$1C(a0)
00018474                            
00018474                            loc_1636C:
00018474 0C41 0008                  		cmpi.w	#8,d1
00018478 6600                       		bne.s	loc_16378
0001847A 117C 0000 001C             		move.b	#0,$1C(a0)
00018480                            
00018480                            loc_16378:
00018480 6100 BC6E                  		bsr.w	Obj63_ChangeDir
00018484 6000 0000                  		bra.w	loc_163D8
00018488                            ; ===========================================================================
00018488                            
00018488                            loc_16380:				; XREF: Obj6F_Main
00018488 1140 002F                  		move.b	d0,$2F(a0)
0001848C 0240 007F                  		andi.w	#$7F,d0
00018490 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018494 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001849A 6700                       		beq.s	loc_1639A
0001849C 4EF9 0000 F1C2             		jmp	DeleteObject
000184A2                            ; ===========================================================================
000184A2                            
000184A2                            loc_1639A:
000184A2 D040                       		add.w	d0,d0
000184A4 0240 001E                  		andi.w	#$1E,d0
000184A8 0640 0080                  		addi.w	#$80,d0
000184AC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000184B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000184B6 321A                       		move.w	(a2)+,d1
000184B8 2248                       		movea.l	a0,a1
000184BA 6000                       		bra.s	Obj6F_LoadPform
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            Obj6F_Loop:
000184BC 4EB9 0000 F61A             		jsr	SingleObjLoad
000184C2 6600                       		bne.s	loc_163D0
000184C4                            
000184C4                            Obj6F_LoadPform:			; XREF: loc_1639A
000184C4 12BC 006F                  		move.b	#$6F,0(a1)
000184C8 335A 0008                  		move.w	(a2)+,8(a1)
000184CC 335A 000C                  		move.w	(a2)+,$C(a1)
000184D0 301A                       		move.w	(a2)+,d0
000184D2 1340 0028                  		move.b	d0,$28(a1)
000184D6                            
000184D6                            loc_163D0:
000184D6 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000184DA                            
000184DA 588F                       		addq.l	#4,sp
000184DC 4E75                       		rts	
000184DE                            ; ===========================================================================
000184DE                            
000184DE                            loc_163D8:				; XREF: Obj6F_Index
000184DE 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000184E4 4EB9 0000 C138             		jsr	AnimateSprite
000184EA 4A28 001A                  		tst.b	$1A(a0)
000184EE 6600                       		bne.s	loc_16404
000184F0 3F28 0008                  		move.w	8(a0),-(sp)
000184F4 6100 0000                  		bsr.w	loc_16424
000184F8 323C 001B                  		move.w	#$1B,d1
000184FC 343C 0007                  		move.w	#7,d2
00018500 3602                       		move.w	d2,d3
00018502 5243                       		addq.w	#1,d3
00018504 381F                       		move.w	(sp)+,d4
00018506 6000 905C                  		bra.w	SolidObject
0001850A                            ; ===========================================================================
0001850A                            
0001850A                            loc_16404:
0001850A 0828 0003 0022             		btst	#3,$22(a0)
00018510 6700                       		beq.s	loc_16420
00018512 43F8 D000                  		lea	($FFFFD000).w,a1
00018516 08A9 0003 0022             		bclr	#3,$22(a1)
0001851C 08A8 0003 0022             		bclr	#3,$22(a0)
00018522 4228 0025                  		clr.b	$25(a0)
00018526                            
00018526                            loc_16420:
00018526 6000 0002                  		bra.w	*+4
0001852A                            
0001852A                            loc_16424:
0001852A 3028 0008                  		move.w	8(a0),d0
0001852E B068 0034                  		cmp.w	$34(a0),d0
00018532 6600                       		bne.s	loc_16484
00018534 3028 000C                  		move.w	$C(a0),d0
00018538 B068 0036                  		cmp.w	$36(a0),d0
0001853C 6600                       		bne.s	loc_16484
0001853E 7200                       		moveq	#0,d1
00018540 1228 0038                  		move.b	$38(a0),d1
00018544 D228 003A                  		add.b	$3A(a0),d1
00018548 B228 0039                  		cmp.b	$39(a0),d1
0001854C 6500                       		bcs.s	loc_16456
0001854E 1001                       		move.b	d1,d0
00018550 7200                       		moveq	#0,d1
00018552 4A00                       		tst.b	d0
00018554 6A00                       		bpl.s	loc_16456
00018556 1228 0039                  		move.b	$39(a0),d1
0001855A 5901                       		subq.b	#4,d1
0001855C                            
0001855C                            loc_16456:
0001855C 1141 0038                  		move.b	d1,$38(a0)
00018560 2268 003C                  		movea.l	$3C(a0),a1
00018564 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001856A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00018570 4A41                       		tst.w	d1
00018572 6600                       		bne.s	loc_16474
00018574 117C 0001 001C             		move.b	#1,$1C(a0)
0001857A                            
0001857A                            loc_16474:
0001857A 0C41 0008                  		cmpi.w	#8,d1
0001857E 6600                       		bne.s	loc_16480
00018580 117C 0000 001C             		move.b	#0,$1C(a0)
00018586                            
00018586                            loc_16480:
00018586 6100 BB68                  		bsr.w	Obj63_ChangeDir
0001858A                            
0001858A                            loc_16484:
0001858A 4EF9 0000 F16C             		jmp	SpeedToPos
00018590                            ; ===========================================================================
00018590                            Ani_obj6F:
00018590                            	include "_anim\obj6F.asm"
00018590                            ; ---------------------------------------------------------------------------
00018590                            ; Animation script - platform on conveyor belt (SBZ)
00018590                            ; ---------------------------------------------------------------------------
00018590 0000                       		dc.w byte_1648E-Ani_obj6F
00018592 0000                       		dc.w byte_164A2-Ani_obj6F
00018594 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000185A1 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000185A8 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000185AC 00                         		even
000185AC 00                         		even
000185AC                            
000185AC 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000185B2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000185B8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000185CC 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000185E0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000185F4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018608 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001861C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00018630                            ; ===========================================================================
00018630                            ; ---------------------------------------------------------------------------
00018630                            ; Object 70 - large girder block (SBZ)
00018630                            ; ---------------------------------------------------------------------------
00018630                            
00018630                            Obj70:					; XREF: Obj_Index
00018630 7000                       		moveq	#0,d0
00018632 1028 0024                  		move.b	$24(a0),d0
00018636 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001863A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001863E                            ; ===========================================================================
0001863E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00018640 0000                       		dc.w Obj70_Action-Obj70_Index
00018642                            ; ===========================================================================
00018642                            
00018642                            Obj70_Main:				; XREF: Obj70_Index
00018642 5428 0024                  		addq.b	#2,$24(a0)
00018646 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001864E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018654 0028 0004 0001             		ori.b	#4,1(a0)
0001865A 117C 0004 0018             		move.b	#4,$18(a0)
00018660 117C 0060 0019             		move.b	#$60,$19(a0)
00018666 117C 0018 0016             		move.b	#$18,$16(a0)
0001866C 3168 0008 0032             		move.w	8(a0),$32(a0)
00018672 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018678 6100 0000                  		bsr.w	Obj70_Move2
0001867C                            
0001867C                            Obj70_Action:				; XREF: Obj70_Index
0001867C 3F28 0008                  		move.w	8(a0),-(sp)
00018680 4A68 003A                  		tst.w	$3A(a0)
00018684 6700                       		beq.s	Obj70_Move
00018686 5368 003A                  		subq.w	#1,$3A(a0)
0001868A 6600                       		bne.s	Obj70_Solid
0001868C                            
0001868C                            Obj70_Move:
0001868C 4EB9 0000 F16C             		jsr	SpeedToPos
00018692 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00018696 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00018698 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
0001869C                            
0001869C                            Obj70_Solid:
0001869C 381F                       		move.w	(sp)+,d4
0001869E 4A28 0001                  		tst.b	1(a0)
000186A2 6A00                       		bpl.s	Obj70_ChkDel
000186A4 7200                       		moveq	#0,d1
000186A6 1228 0019                  		move.b	$19(a0),d1
000186AA 0641 000B                  		addi.w	#$B,d1
000186AE 7400                       		moveq	#0,d2
000186B0 1428 0016                  		move.b	$16(a0),d2
000186B4 3602                       		move.w	d2,d3
000186B6 5243                       		addq.w	#1,d3
000186B8 6100 8EAA                  		bsr.w	SolidObject
000186BC                            
000186BC                            Obj70_ChkDel:
000186BC 3028 0032                  		move.w	$32(a0),d0
000186C0 0240 FF80                  		andi.w	#$FF80,d0
000186C4 3238 F700                  		move.w	($FFFFF700).w,d1
000186C8 0441 0080                  		subi.w	#$80,d1
000186CC 0241 FF80                  		andi.w	#$FF80,d1
000186D0 9041                       		sub.w	d1,d0
000186D2 0C40 0280                  		cmpi.w	#$280,d0
000186D6 6200                       		bhi.s	Obj70_Delete
000186D8 4EF9 0000 F186             		jmp	DisplaySprite
000186DE                            ; ===========================================================================
000186DE                            
000186DE                            Obj70_Delete:
000186DE 4EF9 0000 F1C2             		jmp	DeleteObject
000186E4                            ; ===========================================================================
000186E4                            
000186E4                            Obj70_Move2:				; XREF: Obj70_Main
000186E4 1028 0038                  		move.b	$38(a0),d0
000186E8 0240 0018                  		andi.w	#$18,d0
000186EC 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000186F2 43F1 0000                  		lea	(a1,d0.w),a1
000186F6 3159 0010                  		move.w	(a1)+,$10(a0)
000186FA 3159 0012                  		move.w	(a1)+,$12(a0)
000186FE 3159 0034                  		move.w	(a1)+,$34(a0)
00018702 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018706 317C 0007 003A             		move.w	#7,$3A(a0)
0001870C 4E75                       		rts	
0001870E                            ; ===========================================================================
0001870E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018716 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001871E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018726 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001872E                            ; ---------------------------------------------------------------------------
0001872E                            ; Sprite mappings - large girder block (SBZ)
0001872E                            ; ---------------------------------------------------------------------------
0001872E                            Map_obj70:
0001872E                            	include "_maps\obj70.asm"
0001872E                            ; ---------------------------------------------------------------------------
0001872E                            ; Sprite mappings - large girder block (SBZ)
0001872E                            ; ---------------------------------------------------------------------------
0001872E 0000                       		dc.w byte_1662A-Map_obj70
00018730 0C                         byte_1662A:	dc.b $C
00018731 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018736 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001873B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018740 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018745 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001874A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001874F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018754 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018759 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001875E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018763 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018768 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001876E 00                         		even
0001876E 00                         		even
0001876E                            
0001876E                            ; ===========================================================================
0001876E                            ; ---------------------------------------------------------------------------
0001876E                            ; Object 72 - teleporter (SBZ)
0001876E                            ; ---------------------------------------------------------------------------
0001876E                            
0001876E                            Obj72:					; XREF: Obj_Index
0001876E 7000                       		moveq	#0,d0
00018770 1028 0024                  		move.b	$24(a0),d0
00018774 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018778 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001877C 3028 0008                  		move.w	8(a0),d0
00018780 0240 FF80                  		andi.w	#$FF80,d0
00018784 3238 F700                  		move.w	($FFFFF700).w,d1
00018788 0441 0080                  		subi.w	#$80,d1
0001878C 0241 FF80                  		andi.w	#$FF80,d1
00018790 9041                       		sub.w	d1,d0
00018792 0C40 0280                  		cmpi.w	#$280,d0
00018796 6200                       		bhi.s	Obj72_Delete
00018798 4E75                       		rts	
0001879A                            ; ===========================================================================
0001879A                            
0001879A                            Obj72_Delete:
0001879A 4EF9 0000 F1C2             		jmp	DeleteObject
000187A0                            ; ===========================================================================
000187A0 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000187A2 0000                       		dc.w loc_166C8-Obj72_Index
000187A4 0000                       		dc.w loc_1675E-Obj72_Index
000187A6 0000                       		dc.w loc_16798-Obj72_Index
000187A8                            ; ===========================================================================
000187A8                            
000187A8                            Obj72_Main:				; XREF: Obj72_Index
000187A8 5428 0024                  		addq.b	#2,$24(a0)
000187AC 1028 0028                  		move.b	$28(a0),d0
000187B0 D040                       		add.w	d0,d0
000187B2 0240 001E                  		andi.w	#$1E,d0
000187B6 45FA 0000                  		lea	Obj72_Data(pc),a2
000187BA D4F2 0000                  		adda.w	(a2,d0.w),a2
000187BE 315A 003A                  		move.w	(a2)+,$3A(a0)
000187C2 214A 003C                  		move.l	a2,$3C(a0)
000187C6 315A 0036                  		move.w	(a2)+,$36(a0)
000187CA 315A 0038                  		move.w	(a2)+,$38(a0)
000187CE                            
000187CE                            loc_166C8:				; XREF: Obj72_Index
000187CE 43F8 D000                  		lea	($FFFFD000).w,a1
000187D2 3029 0008                  		move.w	8(a1),d0
000187D6 9068 0008                  		sub.w	8(a0),d0
000187DA 0828 0000 0022             		btst	#0,$22(a0)
000187E0 6700                       		beq.s	loc_166E0
000187E2 0640 000F                  		addi.w	#$F,d0
000187E6                            
000187E6                            loc_166E0:
000187E6 0C40 0010                  		cmpi.w	#$10,d0
000187EA 6400                       		bcc.s	locret_1675C
000187EC 3229 000C                  		move.w	$C(a1),d1
000187F0 9268 000C                  		sub.w	$C(a0),d1
000187F4 0641 0020                  		addi.w	#$20,d1
000187F8 0C41 0040                  		cmpi.w	#$40,d1
000187FC 6400                       		bcc.s	locret_1675C
000187FE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018802 6600                       		bne.s	locret_1675C
00018804 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001880A 6600                       		bne.s	loc_1670E
0001880C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00018812 6500                       		bcs.s	locret_1675C
00018814                            
00018814                            loc_1670E:
00018814 5428 0024                  		addq.b	#2,$24(a0)
00018818 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001881E 137C 001A 001C             		move.b	#$1A,$1C(a1)	; use Sonic's hurt animation
00018824 337C 0800 0014             		move.w	#$800,$14(a1)
0001882A 337C 0000 0010             		move.w	#0,$10(a1)
00018830 337C 0000 0012             		move.w	#0,$12(a1)
00018836 08A8 0005 0022             		bclr	#5,$22(a0)
0001883C 08A9 0005 0022             		bclr	#5,$22(a1)
00018842 08E9 0001 0022             		bset	#1,$22(a1)
00018848 3368 0008 0008             		move.w	8(a0),8(a1)
0001884E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018854 4228 0032                  		clr.b	$32(a0)
00018858 303C 00BE                  		move.w	#$BE,d0
0001885C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018862                            
00018862                            locret_1675C:
00018862 4E75                       		rts	
00018864                            ; ===========================================================================
00018864                            
00018864                            loc_1675E:				; XREF: Obj72_Index
00018864 43F8 D000                  		lea	($FFFFD000).w,a1
00018868 1028 0032                  		move.b	$32(a0),d0
0001886C 5428 0032                  		addq.b	#2,$32(a0)
00018870 4EB9 0000 2B7A             		jsr	(CalcSine).l
00018876 EA40                       		asr.w	#5,d0
00018878 3428 000C                  		move.w	$C(a0),d2
0001887C 9440                       		sub.w	d0,d2
0001887E 3342 000C                  		move.w	d2,$C(a1)
00018882 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018888 6600                       		bne.s	locret_16796
0001888A 6100 0000                  		bsr.w	sub_1681C
0001888E 5428 0024                  		addq.b	#2,$24(a0)
00018892 303C 00BC                  		move.w	#$BC,d0
00018896 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play teleport sound
0001889C                            
0001889C                            locret_16796:
0001889C 4E75                       		rts	
0001889E                            ; ===========================================================================
0001889E                            
0001889E                            loc_16798:				; XREF: Obj72_Index
0001889E 588F                       		addq.l	#4,sp
000188A0 43F8 D000                  		lea	($FFFFD000).w,a1
000188A4 5328 002E                  		subq.b	#1,$2E(a0)
000188A8 6A00                       		bpl.s	loc_167DA
000188AA 3368 0036 0008             		move.w	$36(a0),8(a1)
000188B0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000188B6 7200                       		moveq	#0,d1
000188B8 1228 003A                  		move.b	$3A(a0),d1
000188BC 5801                       		addq.b	#4,d1
000188BE B228 003B                  		cmp.b	$3B(a0),d1
000188C2 6500                       		bcs.s	loc_167C2
000188C4 7200                       		moveq	#0,d1
000188C6 6000                       		bra.s	loc_16800
000188C8                            ; ===========================================================================
000188C8                            
000188C8                            loc_167C2:
000188C8 1141 003A                  		move.b	d1,$3A(a0)
000188CC 2468 003C                  		movea.l	$3C(a0),a2
000188D0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000188D6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000188DC 6000 0000                  		bra.w	sub_1681C
000188E0                            ; ===========================================================================
000188E0                            
000188E0                            loc_167DA:
000188E0 2429 0008                  		move.l	8(a1),d2
000188E4 2629 000C                  		move.l	$C(a1),d3
000188E8 3029 0010                  		move.w	$10(a1),d0
000188EC 48C0                       		ext.l	d0
000188EE E180                       		asl.l	#8,d0
000188F0 D480                       		add.l	d0,d2
000188F2 3029 0012                  		move.w	$12(a1),d0
000188F6 48C0                       		ext.l	d0
000188F8 E180                       		asl.l	#8,d0
000188FA D680                       		add.l	d0,d3
000188FC 2342 0008                  		move.l	d2,8(a1)
00018900 2343 000C                  		move.l	d3,$C(a1)
00018904 4E75                       		rts	
00018906                            ; ===========================================================================
00018906                            
00018906                            loc_16800:
00018906 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001890C 4228 0024                  		clr.b	$24(a0)
00018910 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018914 337C 0000 0010             		move.w	#0,$10(a1)
0001891A 337C 0200 0012             		move.w	#$200,$12(a1)
00018920 4E75                       		rts	
00018922                            
00018922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018922                            
00018922                            
00018922                            sub_1681C:
00018922 7000                       		moveq	#0,d0
00018924 343C 1000                  		move.w	#$1000,d2
00018928 3028 0036                  		move.w	$36(a0),d0
0001892C 9069 0008                  		sub.w	8(a1),d0
00018930 6C00                       		bge.s	loc_16830
00018932 4440                       		neg.w	d0
00018934 4442                       		neg.w	d2
00018936                            
00018936                            loc_16830:
00018936 7200                       		moveq	#0,d1
00018938 363C 1000                  		move.w	#$1000,d3
0001893C 3228 0038                  		move.w	$38(a0),d1
00018940 9269 000C                  		sub.w	$C(a1),d1
00018944 6C00                       		bge.s	loc_16844
00018946 4441                       		neg.w	d1
00018948 4443                       		neg.w	d3
0001894A                            
0001894A                            loc_16844:
0001894A B240                       		cmp.w	d0,d1
0001894C 6500                       		bcs.s	loc_1687A
0001894E 7200                       		moveq	#0,d1
00018950 3228 0038                  		move.w	$38(a0),d1
00018954 9269 000C                  		sub.w	$C(a1),d1
00018958 4841                       		swap	d1
0001895A 83C3                       		divs.w	d3,d1
0001895C 7000                       		moveq	#0,d0
0001895E 3028 0036                  		move.w	$36(a0),d0
00018962 9069 0008                  		sub.w	8(a1),d0
00018966 6700                       		beq.s	loc_16866
00018968 4840                       		swap	d0
0001896A 81C1                       		divs.w	d1,d0
0001896C                            
0001896C                            loc_16866:
0001896C 3340 0010                  		move.w	d0,$10(a1)
00018970 3343 0012                  		move.w	d3,$12(a1)
00018974 4A41                       		tst.w	d1
00018976 6A00                       		bpl.s	loc_16874
00018978 4441                       		neg.w	d1
0001897A                            
0001897A                            loc_16874:
0001897A 3141 002E                  		move.w	d1,$2E(a0)
0001897E 4E75                       		rts	
00018980                            ; ===========================================================================
00018980                            
00018980                            loc_1687A:
00018980 7000                       		moveq	#0,d0
00018982 3028 0036                  		move.w	$36(a0),d0
00018986 9069 0008                  		sub.w	8(a1),d0
0001898A 4840                       		swap	d0
0001898C 81C2                       		divs.w	d2,d0
0001898E 7200                       		moveq	#0,d1
00018990 3228 0038                  		move.w	$38(a0),d1
00018994 9269 000C                  		sub.w	$C(a1),d1
00018998 6700                       		beq.s	loc_16898
0001899A 4841                       		swap	d1
0001899C 83C0                       		divs.w	d0,d1
0001899E                            
0001899E                            loc_16898:
0001899E 3341 0012                  		move.w	d1,$12(a1)
000189A2 3342 0010                  		move.w	d2,$10(a1)
000189A6 4A40                       		tst.w	d0
000189A8 6A00                       		bpl.s	loc_168A6
000189AA 4440                       		neg.w	d0
000189AC                            
000189AC                            loc_168A6:
000189AC 3140 002E                  		move.w	d0,$2E(a0)
000189B0 4E75                       		rts	
000189B2                            ; End of function sub_1681C
000189B2                            
000189B2                            ; ===========================================================================
000189B2 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000189B8 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000189BE 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000189C2 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000189C8 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000189CE 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000189D4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000189DA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000189E0 0884 0298 0894             		dc.w $884, $298, $894
000189E6 0270 0894 0190             		dc.w $270, $894, $190
000189EC 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000189F2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000189F8 1184 0498 1158             		dc.w $1184, $498, $1158
000189FE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018A04 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018A0A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00018A10 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018A16 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018A1C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018A22 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018A28 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018A2E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018A34 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018A3A                            ; ===========================================================================
00018A3A                            ; ---------------------------------------------------------------------------
00018A3A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018A3A                            ; ---------------------------------------------------------------------------
00018A3A                            
00018A3A                            Obj78:					; XREF: Obj_Index
00018A3A 7000                       		moveq	#0,d0
00018A3C 1028 0024                  		move.b	$24(a0),d0
00018A40 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018A44 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018A48                            ; ===========================================================================
00018A48 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018A4A 0000                       		dc.w Obj78_Action-Obj78_Index
00018A4C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018A4E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018A50 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018A52 0000                       		dc.w Obj78_Delete-Obj78_Index
00018A54 0000                       		dc.w loc_16CC0-Obj78_Index
00018A56                            ; ===========================================================================
00018A56                            
00018A56                            locret_16950:
00018A56 4E75                       		rts	
00018A58                            ; ===========================================================================
00018A58                            
00018A58                            Obj78_Main:				; XREF: Obj78_Index
00018A58 117C 0007 0016             		move.b	#7,$16(a0)
00018A5E 117C 0008 0017             		move.b	#8,$17(a0)
00018A64 4EB9 0000 F14C             		jsr	ObjectFall
00018A6A 4EBA E4B6                  		jsr	ObjHitFloor
00018A6E 4A41                       		tst.w	d1
00018A70 6AE4                       		bpl.s	locret_16950
00018A72 D368 000C                  		add.w	d1,$C(a0)
00018A76 4268 0012                  		clr.w	$12(a0)
00018A7A 5428 0024                  		addq.b	#2,$24(a0)
00018A7E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018A86 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018A8C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018A92 6700                       		beq.s	loc_16996
00018A94 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018A9A                            
00018A9A                            loc_16996:
00018A9A 0228 0003 0001             		andi.b	#3,1(a0)
00018AA0 0028 0004 0001             		ori.b	#4,1(a0)
00018AA6 1168 0001 0022             		move.b	1(a0),$22(a0)
00018AAC 117C 0004 0018             		move.b	#4,$18(a0)
00018AB2 117C 0008 0019             		move.b	#8,$19(a0)
00018AB8 117C 000B 0020             		move.b	#$B,$20(a0)
00018ABE 3428 0008                  		move.w	8(a0),d2
00018AC2 7A0C                       		moveq	#$C,d5
00018AC4 0828 0000 0022             		btst	#0,$22(a0)
00018ACA 6700                       		beq.s	loc_169CA
00018ACC 4445                       		neg.w	d5
00018ACE                            
00018ACE                            loc_169CA:
00018ACE 1C3C 0004                  		move.b	#4,d6
00018AD2 7600                       		moveq	#0,d3
00018AD4 7804                       		moveq	#4,d4
00018AD6 2448                       		movea.l	a0,a2
00018AD8 7202                       		moveq	#2,d1
00018ADA                            
00018ADA                            Obj78_LoadBody:
00018ADA 4EB9 0000 F630             		jsr	SingleObjLoad2
00018AE0 6600                       		bne.s	Obj78_QuitLoad
00018AE2 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018AE6 1346 0024                  		move.b	d6,$24(a1)
00018AEA 5406                       		addq.b	#2,d6
00018AEC 2368 0004 0004             		move.l	4(a0),4(a1)
00018AF2 3368 0002 0002             		move.w	2(a0),2(a1)
00018AF8 137C 0005 0018             		move.b	#5,$18(a1)
00018AFE 137C 0008 0019             		move.b	#8,$19(a1)
00018B04 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018B0A D445                       		add.w	d5,d2
00018B0C 3342 0008                  		move.w	d2,8(a1)
00018B10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B16 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018B1C 1368 0022 0001             		move.b	$22(a0),1(a1)
00018B22 137C 0008 001A             		move.b	#8,$1A(a1)
00018B28 234A 003C                  		move.l	a2,$3C(a1)
00018B2C 1344 003C                  		move.b	d4,$3C(a1)
00018B30 5804                       		addq.b	#4,d4
00018B32 2449                       		movea.l	a1,a2
00018B34                            
00018B34                            Obj78_QuitLoad:
00018B34 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018B38                            
00018B38 117C 0007 002A             		move.b	#7,$2A(a0)
00018B3E 4228 003C                  		clr.b	$3C(a0)
00018B42                            
00018B42                            Obj78_Action:				; XREF: Obj78_Index
00018B42 4A28 0022                  		tst.b	$22(a0)
00018B46 6B00 0000                  		bmi.w	loc_16C96
00018B4A 7000                       		moveq	#0,d0
00018B4C 1028 0025                  		move.b	$25(a0),d0
00018B50 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018B54 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018B58 1228 002B                  		move.b	$2B(a0),d1
00018B5C 6A00                       		bpl.s	Obj78_Display
00018B5E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018B64 1028 0026                  		move.b	$26(a0),d0
00018B68 0240 007F                  		andi.w	#$7F,d0
00018B6C 5828 0026                  		addq.b	#4,$26(a0)
00018B70 1031 0000                  		move.b	(a1,d0.w),d0
00018B74 6A00                       		bpl.s	Obj78_AniHead
00018B76 08A8 0007 002B             		bclr	#7,$2B(a0)
00018B7C 6000                       		bra.s	Obj78_Display
00018B7E                            ; ===========================================================================
00018B7E                            
00018B7E                            Obj78_AniHead:
00018B7E 0201 0010                  		andi.b	#$10,d1
00018B82 D001                       		add.b	d1,d0
00018B84 1140 001A                  		move.b	d0,$1A(a0)
00018B88                            
00018B88                            Obj78_Display:
00018B88 3028 0008                  		move.w	8(a0),d0
00018B8C 0240 FF80                  		andi.w	#$FF80,d0
00018B90 3238 F700                  		move.w	($FFFFF700).w,d1
00018B94 0441 0080                  		subi.w	#$80,d1
00018B98 0241 FF80                  		andi.w	#$FF80,d1
00018B9C 9041                       		sub.w	d1,d0
00018B9E 0C40 0280                  		cmpi.w	#$280,d0
00018BA2 6200 0000                  		bhi.w	Obj78_ChkGone
00018BA6 4EF9 0000 F186             		jmp	DisplaySprite
00018BAC                            ; ===========================================================================
00018BAC                            
00018BAC                            Obj78_ChkGone:
00018BAC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018BB0 7000                       		moveq	#0,d0
00018BB2 1028 0023                  		move.b	$23(a0),d0
00018BB6 6700                       		beq.s	loc_16ABC
00018BB8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018BBE                            
00018BBE                            loc_16ABC:
00018BBE 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018BC4 4E75                       		rts	
00018BC6                            ; ===========================================================================
00018BC6                            
00018BC6                            Obj78_Delete:				; XREF: Obj78_Index
00018BC6 4EF9 0000 F1C2             		jmp	DeleteObject
00018BCC                            ; ===========================================================================
00018BCC 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018BCE 0000                       		dc.w loc_16B02-Obj78_Index2
00018BD0                            ; ===========================================================================
00018BD0                            
00018BD0                            Obj78_Move:				; XREF: Obj78_Index2
00018BD0 5328 002A                  		subq.b	#1,$2A(a0)
00018BD4 6B00                       		bmi.s	Obj78_Move2
00018BD6 4E75                       		rts	
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            Obj78_Move2:
00018BD8 5428 0025                  		addq.b	#2,$25(a0)
00018BDC 117C 0010 002A             		move.b	#$10,$2A(a0)
00018BE2 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018BE8 317C 0040 0014             		move.w	#$40,$14(a0)
00018BEE 0868 0004 002B             		bchg	#4,$2B(a0)
00018BF4 6600                       		bne.s	loc_16AFC
00018BF6 4268 0010                  		clr.w	$10(a0)
00018BFA 4468 0014                  		neg.w	$14(a0)
00018BFE                            
00018BFE                            loc_16AFC:
00018BFE 08E8 0007 002B             		bset	#7,$2B(a0)
00018C04                            
00018C04                            loc_16B02:				; XREF: Obj78_Index2
00018C04 5328 002A                  		subq.b	#1,$2A(a0)
00018C08 6B00                       		bmi.s	loc_16B5E
00018C0A 2F28 0008                  		move.l	8(a0),-(sp)
00018C0E 2428 0008                  		move.l	8(a0),d2
00018C12 3028 0010                  		move.w	$10(a0),d0
00018C16 0828 0000 0022             		btst	#0,$22(a0)
00018C1C 6700                       		beq.s	loc_16B1E
00018C1E 4440                       		neg.w	d0
00018C20                            
00018C20                            loc_16B1E:
00018C20 48C0                       		ext.l	d0
00018C22 E180                       		asl.l	#8,d0
00018C24 D480                       		add.l	d0,d2
00018C26 2142 0008                  		move.l	d2,8(a0)
00018C2A 4EBA E2F6                  		jsr	ObjHitFloor
00018C2E 241F                       		move.l	(sp)+,d2
00018C30 0C41 FFF8                  		cmpi.w	#-8,d1
00018C34 6D00                       		blt.s	loc_16B70
00018C36 0C41 000C                  		cmpi.w	#$C,d1
00018C3A 6C00                       		bge.s	loc_16B70
00018C3C D368 000C                  		add.w	d1,$C(a0)
00018C40 4842                       		swap	d2
00018C42 B468 0008                  		cmp.w	8(a0),d2
00018C46 6700                       		beq.s	locret_16B5C
00018C48 7000                       		moveq	#0,d0
00018C4A 1028 003C                  		move.b	$3C(a0),d0
00018C4E 5228 003C                  		addq.b	#1,$3C(a0)
00018C52 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C58 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C5C                            
00018C5C                            locret_16B5C:
00018C5C 4E75                       		rts	
00018C5E                            ; ===========================================================================
00018C5E                            
00018C5E                            loc_16B5E:
00018C5E 5528 0025                  		subq.b	#2,$25(a0)
00018C62 117C 0007 002A             		move.b	#7,$2A(a0)
00018C68 317C 0000 0010             		move.w	#0,$10(a0)
00018C6E 4E75                       		rts	
00018C70                            ; ===========================================================================
00018C70                            
00018C70                            loc_16B70:
00018C70 2142 0008                  		move.l	d2,8(a0)
00018C74 0868 0000 0022             		bchg	#0,$22(a0)
00018C7A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018C80 7000                       		moveq	#0,d0
00018C82 1028 003C                  		move.b	$3C(a0),d0
00018C86 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018C8C 5228 003C                  		addq.b	#1,$3C(a0)
00018C90 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C96 4E75                       		rts	
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018C98 2268 003C                  		movea.l	$3C(a0),a1
00018C9C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018CA2 6A00                       		bpl.s	Obj78_BodySeg1
00018CA4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018CAA 1028 0026                  		move.b	$26(a0),d0
00018CAE 0240 007F                  		andi.w	#$7F,d0
00018CB2 5828 0026                  		addq.b	#4,$26(a0)
00018CB6 4A31 0004                  		tst.b	4(a1,d0.w)
00018CBA 6A00                       		bpl.s	Obj78_AniBody
00018CBC 5828 0026                  		addq.b	#4,$26(a0)
00018CC0                            
00018CC0                            Obj78_AniBody:
00018CC0 1031 0000                  		move.b	(a1,d0.w),d0
00018CC4 5000                       		addq.b	#8,d0
00018CC6 1140 001A                  		move.b	d0,$1A(a0)
00018CCA                            
00018CCA                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018CCA 2268 003C                  		movea.l	$3C(a0),a1
00018CCE 4A28 0022                  		tst.b	$22(a0)
00018CD2 6B00 0000                  		bmi.w	loc_16C90
00018CD6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018CDC 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018CE2 6700 0000                  		beq.w	loc_16C64
00018CE6 3169 0014 0014             		move.w	$14(a1),$14(a0)
00018CEC 3029 0010                  		move.w	$10(a1),d0
00018CF0 D069 0014                  		add.w	$14(a1),d0
00018CF4 3140 0010                  		move.w	d0,$10(a0)
00018CF8 2428 0008                  		move.l	8(a0),d2
00018CFC 2602                       		move.l	d2,d3
00018CFE 3028 0010                  		move.w	$10(a0),d0
00018D02 0828 0000 0022             		btst	#0,$22(a0)
00018D08 6700                       		beq.s	loc_16C0C
00018D0A 4440                       		neg.w	d0
00018D0C                            
00018D0C                            loc_16C0C:
00018D0C 48C0                       		ext.l	d0
00018D0E E180                       		asl.l	#8,d0
00018D10 D480                       		add.l	d0,d2
00018D12 2142 0008                  		move.l	d2,8(a0)
00018D16 4843                       		swap	d3
00018D18 B668 0008                  		cmp.w	8(a0),d3
00018D1C 6700                       		beq.s	loc_16C64
00018D1E 7000                       		moveq	#0,d0
00018D20 1028 003C                  		move.b	$3C(a0),d0
00018D24 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018D28 0C01 0080                  		cmpi.b	#-$80,d1
00018D2C 6600                       		bne.s	loc_16C50
00018D2E 4843                       		swap	d3
00018D30 2143 0008                  		move.l	d3,8(a0)
00018D34 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018D38 0868 0000 0022             		bchg	#0,$22(a0)
00018D3E 1168 0022 0001             		move.b	$22(a0),1(a0)
00018D44 5228 003C                  		addq.b	#1,$3C(a0)
00018D48 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018D4E 6000                       		bra.s	loc_16C64
00018D50                            ; ===========================================================================
00018D50                            
00018D50                            loc_16C50:
00018D50 4881                       		ext.w	d1
00018D52 D368 000C                  		add.w	d1,$C(a0)
00018D56 5228 003C                  		addq.b	#1,$3C(a0)
00018D5A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018D60 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018D64                            
00018D64                            loc_16C64:
00018D64 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018D6A 6700                       		beq.s	loc_16C90
00018D6C 0C11 0027                  		cmpi.b	#$27,0(a1)
00018D70 6700                       		beq.s	loc_16C7C
00018D72 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018D78 6600                       		bne.s	loc_16C82
00018D7A                            
00018D7A                            loc_16C7C:
00018D7A 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018D7E 117C 000A 0024             		move.b	#$A,$24(a0)
00018D84                            
00018D84                            loc_16C82:
00018D84 4EF9 0000 F186             		jmp	DisplaySprite
00018D8A                            
00018D8A                            ; ===========================================================================
00018D8A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018D92                            ; ===========================================================================
00018D92                            
00018D92                            loc_16C90:
00018D92 08E9 0007 0022             		bset	#7,$22(a1)
00018D98                            
00018D98                            loc_16C96:
00018D98 7000                       		moveq	#0,d0
00018D9A 1028 0024                  		move.b	$24(a0),d0
00018D9E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018DA2 0828 0000 0022             		btst	#0,$22(a0)
00018DA8 6700                       		beq.s	loc_16CAA
00018DAA 4440                       		neg.w	d0
00018DAC                            
00018DAC                            loc_16CAA:
00018DAC 3140 0010                  		move.w	d0,$10(a0)
00018DB0 317C FC00 0012             		move.w	#-$400,$12(a0)
00018DB6 117C 000C 0024             		move.b	#$C,$24(a0)
00018DBC 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018DC2                            
00018DC2                            loc_16CC0:				; XREF: Obj78_Index
00018DC2 4EB9 0000 F14C             		jsr	ObjectFall
00018DC8 4A68 0012                  		tst.w	$12(a0)
00018DCC 6B00                       		bmi.s	loc_16CE0
00018DCE 4EBA E152                  		jsr	ObjHitFloor
00018DD2 4A41                       		tst.w	d1
00018DD4 6A00                       		bpl.s	loc_16CE0
00018DD6 D368 000C                  		add.w	d1,$C(a0)
00018DDA 317C FC00 0012             		move.w	#-$400,$12(a0)
00018DE0                            
00018DE0                            loc_16CE0:
00018DE0 4A28 0001                  		tst.b	1(a0)
00018DE4 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018DE8 4EF9 0000 F186             		jmp	DisplaySprite
00018DEE                            ; ===========================================================================
00018DEE                            Ani_obj78:
00018DEE                            	include "_anim\obj78.asm"
00018DEE                            ; ---------------------------------------------------------------------------
00018DEE                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018DEE                            ; ---------------------------------------------------------------------------
00018DEE 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018DFE 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018E0E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018E1E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018E2E 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018E3E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018E4E 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018E5E 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018E6E                            	even
00018E6E                            	even
00018E6E                            
00018E6E                            ; ---------------------------------------------------------------------------
00018E6E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018E6E                            ; ---------------------------------------------------------------------------
00018E6E                            Map_obj78:
00018E6E                            	include "_maps\obj78.asm"
00018E6E                            ; ---------------------------------------------------------------------------
00018E6E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018E6E                            ; ---------------------------------------------------------------------------
00018E6E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018E72 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018E76 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018E7A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018E7E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018E82 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018E86 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018E8A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018E8E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018E92 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018E96 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018E9A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018E9E 01                         byte_16D9E:	dc.b 1
00018E9F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018EA4 01                         byte_16DA4:	dc.b 1
00018EA5 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018EAA 01                         byte_16DAA:	dc.b 1
00018EAB F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018EB0 01                         byte_16DB0:	dc.b 1
00018EB1 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018EB6 01                         byte_16DB6:	dc.b 1
00018EB7 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018EBC 01                         byte_16DBC:	dc.b 1
00018EBD ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018EC2 01                         byte_16DC2:	dc.b 1
00018EC3 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018EC8 01                         byte_16DC8:	dc.b 1
00018EC9 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018ECE 01                         byte_16DCE:	dc.b 1
00018ECF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018ED4 01                         byte_16DD4:	dc.b 1
00018ED5 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018EDA 01                         byte_16DDA:	dc.b 1
00018EDB F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018EE0 01                         byte_16DE0:	dc.b 1
00018EE1 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018EE6 01                         byte_16DE6:	dc.b 1
00018EE7 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018EEC 01                         byte_16DEC:	dc.b 1
00018EED F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018EF2 01                         byte_16DF2:	dc.b 1
00018EF3 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018EF8 01                         byte_16DF8:	dc.b 1
00018EF9 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018EFE 01                         byte_16DFE:	dc.b 1
00018EFF F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018F04 01                         byte_16E04:	dc.b 1
00018F05 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018F0A 01                         byte_16E0A:	dc.b 1
00018F0B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018F10 01                         byte_16E10:	dc.b 1
00018F11 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018F16 01                         byte_16E16:	dc.b 1
00018F17 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018F1C 01                         byte_16E1C:	dc.b 1
00018F1D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018F22 01                         byte_16E22:	dc.b 1
00018F23 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018F28 01                         byte_16E28:	dc.b 1
00018F29 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018F2E                            		even
00018F2E                            		even
00018F2E                            
00018F2E                            ; ===========================================================================
00018F2E                            ; ---------------------------------------------------------------------------
00018F2E                            ; Object 79 - lamppost
00018F2E                            ; ---------------------------------------------------------------------------
00018F2E                            
00018F2E                            Obj79:					; XREF: Obj_Index
00018F2E 7000                       		moveq	#0,d0
00018F30 1028 0024                  		move.b	$24(a0),d0
00018F34 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018F38 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018F3C 4EFA 82FE                  		jmp	MarkObjGone
00018F40                            ; ===========================================================================
00018F40 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018F42 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018F44 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018F46 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018F48                            ; ===========================================================================
00018F48                            
00018F48                            Obj79_Main:				; XREF: Obj79_Index
00018F48 5428 0024                  		addq.b	#2,$24(a0)
00018F4C 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018F54 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018F5A 117C 0004 0001             		move.b	#4,1(a0)
00018F60 117C 0008 0019             		move.b	#8,$19(a0)
00018F66 117C 0005 0018             		move.b	#5,$18(a0)
00018F6C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018F70 7000                       		moveq	#0,d0
00018F72 1028 0023                  		move.b	$23(a0),d0
00018F76 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018F7C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018F82 6600                       		bne.s	Obj79_RedLamp
00018F84 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018F88 0201 007F                  		andi.b	#$7F,d1
00018F8C 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018F90 0202 007F                  		andi.b	#$7F,d2
00018F94 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018F96 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018F98                            
00018F98                            Obj79_RedLamp:
00018F98 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018F9E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018FA4 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018FAA 4E75                       		rts	
00018FAC                            ; ===========================================================================
00018FAC                            
00018FAC                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018FAC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018FB0 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018FB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018FB8 6B00 0000                  		bmi.w	locret_16F90
00018FBC 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018FC0 0201 007F                  		andi.b	#$7F,d1
00018FC4 1428 0028                  		move.b	$28(a0),d2
00018FC8 0202 007F                  		andi.b	#$7F,d2
00018FCC B202                       		cmp.b	d2,d1
00018FCE 6500                       		bcs.s	Obj79_HitLamp
00018FD0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018FD4 7000                       		moveq	#0,d0
00018FD6 1028 0023                  		move.b	$23(a0),d0
00018FDA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018FE0 117C 0004 0024             		move.b	#4,$24(a0)
00018FE6 117C 0003 001A             		move.b	#3,$1A(a0)
00018FEC 6000 0000                  		bra.w	locret_16F90
00018FF0                            ; ===========================================================================
00018FF0                            
00018FF0                            Obj79_HitLamp:
00018FF0 3038 D008                  		move.w	($FFFFD008).w,d0
00018FF4 9068 0008                  		sub.w	8(a0),d0
00018FF8 5040                       		addq.w	#8,d0
00018FFA 0C40 0010                  		cmpi.w	#$10,d0
00018FFE 6400 0000                  		bcc.w	locret_16F90
00019002 3038 D00C                  		move.w	($FFFFD00C).w,d0
00019006 9068 000C                  		sub.w	$C(a0),d0
0001900A 0640 0040                  		addi.w	#$40,d0
0001900E 0C40 0068                  		cmpi.w	#$68,d0
00019012 6400                       		bcc.s	locret_16F90
00019014 303C 00A1                  		move.w	#$A1,d0
00019018 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001901E 5428 0024                  		addq.b	#2,$24(a0)
00019022 4EB9 0000 F61A             		jsr	SingleObjLoad
00019028 6600                       		bne.s	loc_16F76
0001902A 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001902E 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00019034 3368 0008 0030             		move.w	8(a0),$30(a1)
0001903A 3368 000C 0032             		move.w	$C(a0),$32(a1)
00019040 0469 0018 0032             		subi.w	#$18,$32(a1)
00019046 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001904E 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019054 137C 0004 0001             		move.b	#4,1(a1)
0001905A 137C 0008 0019             		move.b	#8,$19(a1)
00019060 137C 0004 0018             		move.b	#4,$18(a1)
00019066 137C 0002 001A             		move.b	#2,$1A(a1)
0001906C 337C 0020 0036             		move.w	#$20,$36(a1)
00019072                            
00019072                            loc_16F76:
00019072 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00019078 6100 0000                  		bsr.w	Obj79_StoreInfo
0001907C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00019080 7000                       		moveq	#0,d0
00019082 1028 0023                  		move.b	$23(a0),d0
00019086 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001908C                            
0001908C                            locret_16F90:
0001908C 4E75                       		rts	
0001908E                            ; ===========================================================================
0001908E                            
0001908E                            Obj79_AfterHit:				; XREF: Obj79_Index
0001908E 4E75                       		rts	
00019090                            ; ===========================================================================
00019090                            
00019090                            Obj79_Twirl:				; XREF: Obj79_Index
00019090 5368 0036                  		subq.w	#1,$36(a0)
00019094 6A00                       		bpl.s	loc_16FA0
00019096 117C 0004 0024             		move.b	#4,$24(a0)
0001909C                            
0001909C                            loc_16FA0:
0001909C 1028 0026                  		move.b	$26(a0),d0
000190A0 0428 0010 0026             		subi.b	#$10,$26(a0)
000190A6 0400 0040                  		subi.b	#$40,d0
000190AA 4EB9 0000 2B7A             		jsr	(CalcSine).l
000190B0 C3FC 0C00                  		muls.w	#$C00,d1
000190B4 4841                       		swap	d1
000190B6 D268 0030                  		add.w	$30(a0),d1
000190BA 3141 0008                  		move.w	d1,8(a0)
000190BE C1FC 0C00                  		muls.w	#$C00,d0
000190C2 4840                       		swap	d0
000190C4 D068 0032                  		add.w	$32(a0),d0
000190C8 3140 000C                  		move.w	d0,$C(a0)
000190CC 4E75                       		rts	
000190CE                            ; ===========================================================================
000190CE                            ; ---------------------------------------------------------------------------
000190CE                            ; Subroutine to	store information when you hit a lamppost
000190CE                            ; ---------------------------------------------------------------------------
000190CE                            
000190CE                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000190CE 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000190D4 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000190DA 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000190E0 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000190E6 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000190EC 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000190F2 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000190F8 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000190FE 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00019104 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001910A 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00019110 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00019116 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001911C 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00019122 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00019128 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001912E 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019134 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001913A 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00019140 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00019146 4E75                       		rts	
00019148                            
00019148                            ; ---------------------------------------------------------------------------
00019148                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019148                            ; ---------------------------------------------------------------------------
00019148                            
00019148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019148                            
00019148                            
00019148                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00019148 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001914E 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00019154 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001915A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00019160 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00019166 4278 FE20                  		clr.w	($FFFFFE20).w
0001916A 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001916E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00019174 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001917A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001917E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00019184 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001918A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00019190 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00019196 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001919C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000191A2 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000191A8 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000191AE 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000191B4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000191BA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000191C0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000191C6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000191CC 6600                       		bne.s	loc_170E4
000191CE 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000191D4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000191DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000191E0                            
000191E0                            loc_170E4:
000191E0 4A38 FE30                  		tst.b	($FFFFFE30).w
000191E4 6A00                       		bpl.s	locret_170F6
000191E6 3038 FE32                  		move.w	($FFFFFE32).w,d0
000191EA 0440 00A0                  		subi.w	#$A0,d0
000191EE 31C0 F728                  		move.w	d0,($FFFFF728).w
000191F2                            
000191F2                            locret_170F6:
000191F2 4E75                       		rts	
000191F4                            ; End of function Obj79_LoadInfo
000191F4                            
000191F4                            ; ===========================================================================
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            ; Sprite mappings - lamppost
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            Map_obj79:
000191F4                            	include "_maps\obj79.asm"
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            ; Sprite mappings - lamppost
000191F4                            ; ---------------------------------------------------------------------------
000191F4 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000191F8 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000191FC 06                         byte_17100:	dc.b 6
000191FD E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019202 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019207 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001920C F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019211 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019216 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001921B 04                         byte_1711F:	dc.b 4
0001921C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019221 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019226 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001922B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019230 02                         byte_17134:	dc.b 2
00019231 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019236 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001923B 06                         byte_1713F:	dc.b 6
0001923C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019241 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019246 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001924B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019250 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00019255 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001925A                            		even
0001925A                            		even
0001925A                            
0001925A                            ; ===========================================================================
0001925A                            ; ---------------------------------------------------------------------------
0001925A                            ; Object 7D - hidden points at the end of a level
0001925A                            ; ---------------------------------------------------------------------------
0001925A                            
0001925A                            Obj7D:					; XREF: Obj_Index
0001925A 7000                       		moveq	#0,d0
0001925C 1028 0024                  		move.b	$24(a0),d0
00019260 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00019264 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00019268                            ; ===========================================================================
00019268 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001926A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001926C                            ; ===========================================================================
0001926C                            
0001926C                            Obj7D_Main:				; XREF: Obj7D_Index
0001926C 7410                       		moveq	#$10,d2
0001926E 3602                       		move.w	d2,d3
00019270 D643                       		add.w	d3,d3
00019272 43F8 D000                  		lea	($FFFFD000).w,a1
00019276 3029 0008                  		move.w	8(a1),d0
0001927A 9068 0008                  		sub.w	8(a0),d0
0001927E D042                       		add.w	d2,d0
00019280 B043                       		cmp.w	d3,d0
00019282 6400                       		bcc.s	Obj7D_ChkDel
00019284 3229 000C                  		move.w	$C(a1),d1
00019288 9268 000C                  		sub.w	$C(a0),d1
0001928C D242                       		add.w	d2,d1
0001928E B243                       		cmp.w	d3,d1
00019290 6400                       		bcc.s	Obj7D_ChkDel
00019292 4A78 FE08                  		tst.w	($FFFFFE08).w
00019296 6600                       		bne.s	Obj7D_ChkDel
00019298 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001929C 6600                       		bne.s	Obj7D_ChkDel
0001929E 5428 0024                  		addq.b	#2,$24(a0)
000192A2 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000192AA 317C 84B6 0002             		move.w	#$84B6,2(a0)
000192B0 0028 0004 0001             		ori.b	#4,1(a0)
000192B6 117C 0000 0018             		move.b	#0,$18(a0)
000192BC 117C 0010 0019             		move.b	#$10,$19(a0)
000192C2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000192C8 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000192CE 303C 00C9                  		move.w	#$C9,d0
000192D2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bonus sound
000192D8 7000                       		moveq	#0,d0
000192DA 1028 0028                  		move.b	$28(a0),d0
000192DE D040                       		add.w	d0,d0
000192E0 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000192E4 4EB9 0000 0000             		jsr	AddPoints
000192EA                            
000192EA                            Obj7D_ChkDel:
000192EA 3028 0008                  		move.w	8(a0),d0
000192EE 0240 FF80                  		andi.w	#$FF80,d0
000192F2 3238 F700                  		move.w	($FFFFF700).w,d1
000192F6 0441 0080                  		subi.w	#$80,d1
000192FA 0241 FF80                  		andi.w	#$FF80,d1
000192FE 9041                       		sub.w	d1,d0
00019300 0C40 0280                  		cmpi.w	#$280,d0
00019304 6200                       		bhi.s	Obj7D_Delete
00019306 4E75                       		rts	
00019308                            ; ===========================================================================
00019308                            
00019308                            Obj7D_Delete:
00019308 4EF9 0000 F1C2             		jmp	DeleteObject
0001930E                            ; ===========================================================================
0001930E 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00019310 03E8                       		dc.w 1000
00019312 0064                       		dc.w 100
00019314 000A                       		dc.w 10
00019316                            ; ===========================================================================
00019316                            
00019316                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019316 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001931A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001931C 3028 0008                  		move.w	8(a0),d0
00019320 0240 FF80                  		andi.w	#-$80,d0
00019324 3238 F700                  		move.w	($FFFFF700).w,d1
00019328 0441 0080                  		subi.w	#$80,d1
0001932C 0241 FF80                  		andi.w	#-$80,d1
00019330 9041                       		sub.w	d1,d0
00019332 0C40 0280                  		cmpi.w	#$280,d0
00019336 6200                       		bhi.s	Obj7D_Delete2
00019338 4EF9 0000 F186             		jmp	DisplaySprite
0001933E                            ; ===========================================================================
0001933E                            
0001933E                            Obj7D_Delete2:
0001933E 4EF9 0000 F1C2             		jmp	DeleteObject
00019344                            ; ===========================================================================
00019344                            ; ---------------------------------------------------------------------------
00019344                            ; Sprite mappings - hidden points at the end of	a level
00019344                            ; ---------------------------------------------------------------------------
00019344                            Map_obj7D:
00019344                            	include "_maps\obj7D.asm"
00019344                            ; ---------------------------------------------------------------------------
00019344                            ; Sprite mappings - hidden points at the end of	a level
00019344                            ; ---------------------------------------------------------------------------
00019344 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00019348 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001934C 00                         byte_17250:	dc.b 0
0001934D 01                         byte_17251:	dc.b 1
0001934E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00019353 01                         byte_17257:	dc.b 1
00019354 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00019359 01                         byte_1725D:	dc.b 1
0001935A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00019360 00                         		even
00019360 00                         		even
00019360                            
00019360                            ; ===========================================================================
00019360                            ; ---------------------------------------------------------------------------
00019360                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00019360                            ; ---------------------------------------------------------------------------
00019360                            
00019360                            Obj8A:					; XREF: Obj_Index
00019360 7000                       		moveq	#0,d0
00019362 1028 0024                  		move.b	$24(a0),d0
00019366 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001936A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001936E                            ; ===========================================================================
0001936E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00019370 0000                       		dc.w Obj8A_Display-Obj8A_Index
00019372                            ; ===========================================================================
00019372                            
00019372                            Obj8A_Main:				; XREF: Obj8A_Index
00019372 5428 0024                  		addq.b	#2,$24(a0)
00019376 317C 0120 0008             		move.w	#$120,8(a0)
0001937C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00019382 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001938A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00019390 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00019394 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00019398 117C 0000 0001             		move.b	#0,1(a0)
0001939E 117C 0000 0018             		move.b	#0,$18(a0)
000193A4 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000193AA 6600                       		bne.s	Obj8A_Display	; if not, branch
000193AC 317C 00A6 0002             		move.w	#$A6,2(a0)
000193B2 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000193B8 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000193BC 6700                       		beq.s	Obj8A_Display	; if not, branch
000193BE 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000193C4 6600                       		bne.s	Obj8A_Display	; if not, branch
000193C6 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd Palette, 1st entry = white
000193CC 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd Palette, 2nd entry = cyan
000193D2 4EF9 0000 F1C2             		jmp	DeleteObject
000193D8                            ; ===========================================================================
000193D8                            
000193D8                            Obj8A_Display:				; XREF: Obj8A_Index
000193D8 4EF9 0000 F186             		jmp	DisplaySprite
000193DE                            ; ===========================================================================
000193DE                            ; ---------------------------------------------------------------------------
000193DE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000193DE                            ; ---------------------------------------------------------------------------
000193DE                            Map_obj8A:
000193DE                            	include "_maps\obj8A.asm"
000193DE                            ; ---------------------------------------------------------------------------
000193DE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000193DE                            ; ---------------------------------------------------------------------------
000193DE 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000193E2 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000193E6 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000193EA 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000193EE 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000193F2 0000                       		dc.w byte_176A9-Map_obj8A
000193F4 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
000193F5 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
000193FA F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
000193FF F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019404 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019409 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001940E F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00019413 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019418 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001941D F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00019422 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019427 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001942C F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00019431 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019436 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001943B 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001943C D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00019441 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00019446 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
0001944B D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00019450 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00019455 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
0001945A D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001945F D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00019464 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00019469 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001946E 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00019473 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00019478 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001947D 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00019482 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00019487 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
0001948C 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
0001948D D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00019492 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00019497 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
0001949C D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000194A1 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000194A6 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000194AB D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000194B0 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000194B5 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000194BA 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000194BF 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000194C0 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000194C5 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000194CA D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000194CF D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000194D4 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000194D9 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000194DE D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000194E3 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000194E8 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000194ED D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000194F2 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
000194F7 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
000194FC D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00019501 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019506 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
0001950B 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00019510 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019515 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0001951A 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001951F 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019524 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019529 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001952E 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00019533 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019538 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019539 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001953E D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00019543 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00019548 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001954D D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00019552 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00019557 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001955C 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00019561 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00019566 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
0001956B 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00019570 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00019575 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
0001957A 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001957F 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00019584 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00019589 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
0001958E 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00019593 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00019598 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
0001959D 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
0001959E D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000195A3 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000195A8 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000195AD D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000195B2 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000195B7 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000195BC D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000195C1 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000195C6 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000195CB D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000195D0 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000195D5 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000195DA 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000195DF 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000195E4 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000195E9 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000195EE 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000195F3 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
000195F8 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
000195FD 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00019602 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019607 0805 0004 28               		dc.b 8,	5, 0, 4, $28
0001960C 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00019611 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019616 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0001961B 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00019620 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00019621 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019626 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001962B D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00019630 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019635 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001963A D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001963F D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00019644 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00019649 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001964E D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00019653 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00019658 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001965D 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019662 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019667 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001966C 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00019671 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00019676 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001967B 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00019680 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00019685 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001968A 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001968F 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00019694 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00019695 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
0001969A D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
0001969F D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000196A4 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000196A9 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000196AE D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000196B3 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000196B8 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000196BD D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000196C2 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000196C7 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000196CC D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000196D1 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000196D6 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000196DB 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000196E0 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000196E5 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000196EA 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000196EF 0009 0008 00               		dc.b 0,	9, 0, 8, 0
000196F4 0001 0046 14               		dc.b 0,	1, 0, $46, $14
000196F9 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
000196FE 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00019703 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019708 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
0001970D 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00019712 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019717 0001 0046 74               		dc.b 0,	1, 0, $46, $74
0001971C 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00019721 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019726 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
0001972B 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019730 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019731 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019736 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001973B F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019740 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019745 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001974A F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001974F F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019754 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019759 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001975E F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019763 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019768 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001976D F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019772 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019777 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001977C 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001977D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019782 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019787 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001978C 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019791 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019796 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001979B 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000197A0 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000197A5 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000197A6 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000197AB E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000197B0 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000197B5 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000197BA E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000197BF E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000197C4 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000197C9 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000197CE E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000197D3 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000197D8 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000197DD 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000197E2 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000197E7 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000197EC 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000197F1 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000197F6 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000197FC 00                         		even
000197FC 00                         		even
000197FC                            
000197FC                            ; ===========================================================================
000197FC                            ; ---------------------------------------------------------------------------
000197FC                            ; Object 3D - Eggman (GHZ)
000197FC                            ; ---------------------------------------------------------------------------
000197FC                            
000197FC                            Obj3D:					; XREF: Obj_Index
000197FC 7000                       		moveq	#0,d0
000197FE 1028 0024                  		move.b	$24(a0),d0
00019802 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019806 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001980A                            ; ===========================================================================
0001980A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001980C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001980E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00019810 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00019812                            
00019812 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019814 0401                       		dc.b 4,	1
00019816 0607                       		dc.b 6,	7
00019818                            ; ===========================================================================
00019818                            
00019818                            Obj3D_Main:				; XREF: Obj3D_Index
00019818 45F9 0001 9812             		lea	(Obj3D_ObjData).l,a2
0001981E 2248                       		movea.l	a0,a1
00019820 7202                       		moveq	#2,d1
00019822 6000                       		bra.s	Obj3D_LoadBoss
00019824                            ; ===========================================================================
00019824                            
00019824                            Obj3D_Loop:
00019824 4EB9 0000 F630             		jsr	SingleObjLoad2
0001982A 6600                       		bne.s	loc_17772
0001982C                            
0001982C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001982C 135A 0024                  		move.b	(a2)+,$24(a1)
00019830 12BC 003D                  		move.b	#$3D,0(a1)
00019834 3368 0008 0008             		move.w	8(a0),8(a1)
0001983A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019840 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019848 337C 0400 0002             		move.w	#$400,2(a1)
0001984E 137C 0004 0001             		move.b	#4,1(a1)
00019854 137C 0020 0019             		move.b	#$20,$19(a1)
0001985A 137C 0003 0018             		move.b	#3,$18(a1)
00019860 135A 001C                  		move.b	(a2)+,$1C(a1)
00019864 2348 0034                  		move.l	a0,$34(a1)
00019868 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001986C                            
0001986C                            loc_17772:
0001986C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019872 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019878 117C 000F 0020             		move.b	#$F,$20(a0)
0001987E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019884                            
00019884                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019884 7000                       		moveq	#0,d0
00019886 1028 0025                  		move.b	$25(a0),d0
0001988A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001988E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019892 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019898 4EB9 0000 C138             		jsr	AnimateSprite
0001989E 1028 0022                  		move.b	$22(a0),d0
000198A2 0200 0003                  		andi.b	#3,d0
000198A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198AC 8128 0001                  		or.b	d0,1(a0)
000198B0 4EF9 0000 F186             		jmp	DisplaySprite
000198B6                            ; ===========================================================================
000198B6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000198B8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000198BA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000198BC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000198BE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000198C0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000198C2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000198C4                            ; ===========================================================================
000198C4                            
000198C4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000198C4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000198CA 6100 0000                  		bsr.w	BossMove
000198CE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000198D4 6600                       		bne.s	loc_177E6
000198D6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000198DC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000198E0                            
000198E0                            loc_177E6:
000198E0 1028 003F                  		move.b	$3F(a0),d0
000198E4 4EB9 0000 2B7A             		jsr	(CalcSine).l
000198EA EC40                       		asr.w	#6,d0
000198EC D068 0038                  		add.w	$38(a0),d0
000198F0 3140 000C                  		move.w	d0,$C(a0)
000198F4 3168 0030 0008             		move.w	$30(a0),8(a0)
000198FA 5428 003F                  		addq.b	#2,$3F(a0)
000198FE 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019904 6400                       		bcc.s	locret_1784A
00019906 4A28 0022                  		tst.b	$22(a0)
0001990A 6B00                       		bmi.s	loc_1784C
0001990C 4A28 0020                  		tst.b	$20(a0)
00019910 6600                       		bne.s	locret_1784A
00019912 4A28 003E                  		tst.b	$3E(a0)
00019916 6600                       		bne.s	Obj3D_ShipFlash
00019918 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001991E 303C 00AC                  		move.w	#$AC,d0
00019922 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019928                            
00019928                            Obj3D_ShipFlash:
00019928 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd Palette, 2nd	entry
0001992C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001992E 4A51                       		tst.w	(a1)
00019930 6600                       		bne.s	loc_1783C
00019932 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019936                            
00019936                            loc_1783C:
00019936 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019938 5328 003E                  		subq.b	#1,$3E(a0)
0001993C 6600                       		bne.s	locret_1784A
0001993E 117C 000F 0020             		move.b	#$F,$20(a0)
00019944                            
00019944                            locret_1784A:
00019944 4E75                       		rts	
00019946                            ; ===========================================================================
00019946                            
00019946                            loc_1784C:				; XREF: loc_177E6
00019946 7064                       		moveq	#100,d0
00019948 6100 0000                  		bsr.w	AddPoints
0001994C 117C 0008 0025             		move.b	#8,$25(a0)
00019952 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019958 4E75                       		rts	
0001995A                            
0001995A                            ; ---------------------------------------------------------------------------
0001995A                            ; Defeated boss	subroutine
0001995A                            ; ---------------------------------------------------------------------------
0001995A                            
0001995A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001995A                            
0001995A                            
0001995A                            BossDefeated:
0001995A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001995E 0200 0007                  		andi.b	#7,d0
00019962 6600                       		bne.s	locret_178A2
00019964 4EB9 0000 F61A             		jsr	SingleObjLoad
0001996A 6600                       		bne.s	locret_178A2
0001996C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019970 3368 0008 0008             		move.w	8(a0),8(a1)
00019976 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001997C 4EB9 0000 2B54             		jsr	(RandomNumber).l
00019982 3200                       		move.w	d0,d1
00019984 7200                       		moveq	#0,d1
00019986 1200                       		move.b	d0,d1
00019988 E409                       		lsr.b	#2,d1
0001998A 0441 0020                  		subi.w	#$20,d1
0001998E D369 0008                  		add.w	d1,8(a1)
00019992 E048                       		lsr.w	#8,d0
00019994 E608                       		lsr.b	#3,d0
00019996 D169 000C                  		add.w	d0,$C(a1)
0001999A                            
0001999A                            locret_178A2:
0001999A 4E75                       		rts	
0001999C                            ; End of function BossDefeated
0001999C                            
0001999C                            ; ---------------------------------------------------------------------------
0001999C                            ; Subroutine to	move a boss
0001999C                            ; ---------------------------------------------------------------------------
0001999C                            
0001999C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001999C                            
0001999C                            
0001999C                            BossMove:
0001999C 2428 0030                  		move.l	$30(a0),d2
000199A0 2628 0038                  		move.l	$38(a0),d3
000199A4 3028 0010                  		move.w	$10(a0),d0
000199A8 48C0                       		ext.l	d0
000199AA E180                       		asl.l	#8,d0
000199AC D480                       		add.l	d0,d2
000199AE 3028 0012                  		move.w	$12(a0),d0
000199B2 48C0                       		ext.l	d0
000199B4 E180                       		asl.l	#8,d0
000199B6 D680                       		add.l	d0,d3
000199B8 2142 0030                  		move.l	d2,$30(a0)
000199BC 2143 0038                  		move.l	d3,$38(a0)
000199C0 4E75                       		rts	
000199C2                            ; End of function BossMove
000199C2                            
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000199C2 317C FF00 0010             		move.w	#-$100,$10(a0)
000199C8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000199CE 6100 FFCC                  		bsr.w	BossMove
000199D2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000199D8 6600                       		bne.s	loc_17916
000199DA 317C 0000 0010             		move.w	#0,$10(a0)
000199E0 317C 0000 0012             		move.w	#0,$12(a0)
000199E6 5428 0025                  		addq.b	#2,$25(a0)
000199EA 4EB9 0000 F630             		jsr	SingleObjLoad2
000199F0 6600                       		bne.s	loc_17910
000199F2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000199F6 3368 0030 0008             		move.w	$30(a0),8(a1)
000199FC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019A02 2348 0034                  		move.l	a0,$34(a1)
00019A06                            
00019A06                            loc_17910:
00019A06 317C 0077 003C             		move.w	#$77,$3C(a0)
00019A0C                            
00019A0C                            loc_17916:
00019A0C 6000 FED2                  		bra.w	loc_177E6
00019A10                            ; ===========================================================================
00019A10                            
00019A10                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019A10 5368 003C                  		subq.w	#1,$3C(a0)
00019A14 6A00                       		bpl.s	Obj3D_Reverse
00019A16 5428 0025                  		addq.b	#2,$25(a0)
00019A1A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019A20 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019A26 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019A2C 6600                       		bne.s	Obj3D_Reverse
00019A2E 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019A34 317C 0040 0010             		move.w	#$40,$10(a0)
00019A3A                            
00019A3A                            Obj3D_Reverse:
00019A3A 0828 0000 0022             		btst	#0,$22(a0)
00019A40 6600                       		bne.s	loc_17950
00019A42 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019A46                            
00019A46                            loc_17950:
00019A46 6000 FE98                  		bra.w	loc_177E6
00019A4A                            ; ===========================================================================
00019A4A                            
00019A4A                            loc_17954:				; XREF: Obj3D_ShipIndex
00019A4A 5368 003C                  		subq.w	#1,$3C(a0)
00019A4E 6B00                       		bmi.s	loc_17960
00019A50 6100 FF4A                  		bsr.w	BossMove
00019A54 6000                       		bra.s	loc_17976
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            loc_17960:
00019A56 0868 0000 0022             		bchg	#0,$22(a0)
00019A5C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019A62 5528 0025                  		subq.b	#2,$25(a0)
00019A66 317C 0000 0010             		move.w	#0,$10(a0)
00019A6C                            
00019A6C                            loc_17976:
00019A6C 6000 FE72                  		bra.w	loc_177E6
00019A70                            ; ===========================================================================
00019A70                            
00019A70                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019A70 5368 003C                  		subq.w	#1,$3C(a0)
00019A74 6B00                       		bmi.s	loc_17984
00019A76 6000 FEE2                  		bra.w	BossDefeated
00019A7A                            ; ===========================================================================
00019A7A                            
00019A7A                            loc_17984:
00019A7A 08E8 0000 0022             		bset	#0,$22(a0)
00019A80 08A8 0007 0022             		bclr	#7,$22(a0)
00019A86 4268 0010                  		clr.w	$10(a0)
00019A8A 5428 0025                  		addq.b	#2,$25(a0)
00019A8E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019A94 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019A98 6600                       		bne.s	locret_179AA
00019A9A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AA0                            
00019AA0                            locret_179AA:
00019AA0 4E75                       		rts	
00019AA2                            ; ===========================================================================
00019AA2                            
00019AA2                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019AA2 5268 003C                  		addq.w	#1,$3C(a0)
00019AA6 6700                       		beq.s	loc_179BC
00019AA8 6A00                       		bpl.s	loc_179C2
00019AAA 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AB0 6000                       		bra.s	loc_179EE
00019AB2                            ; ===========================================================================
00019AB2                            
00019AB2                            loc_179BC:
00019AB2 4268 0012                  		clr.w	$12(a0)
00019AB6 6000                       		bra.s	loc_179EE
00019AB8                            ; ===========================================================================
00019AB8                            
00019AB8                            loc_179C2:
00019AB8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019ABE 6500                       		bcs.s	loc_179DA
00019AC0 6700                       		beq.s	loc_179E0
00019AC2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019AC8 6500                       		bcs.s	loc_179EE
00019ACA 5428 0025                  		addq.b	#2,$25(a0)
00019ACE 6000                       		bra.s	loc_179EE
00019AD0                            ; ===========================================================================
00019AD0                            
00019AD0                            loc_179DA:
00019AD0 5168 0012                  		subq.w	#8,$12(a0)
00019AD4 6000                       		bra.s	loc_179EE
00019AD6                            ; ===========================================================================
00019AD6                            
00019AD6                            loc_179E0:
00019AD6 4268 0012                  		clr.w	$12(a0)
00019ADA                            		
00019ADA 6100 0000                  		bsr.w	BossEnd
00019ADE                            
00019ADE                            loc_179EE:
00019ADE 6100 FEBC                  		bsr.w	BossMove
00019AE2 6000 FDFC                  		bra.w	loc_177E6
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019AE6 317C 0400 0010             		move.w	#$400,$10(a0)
00019AEC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AF2 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019AF8 6700                       		beq.s	loc_17A10
00019AFA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AFE 6000                       		bra.s	loc_17A16
00019B00                            ; ===========================================================================
00019B00                            
00019B00                            loc_17A10:
00019B00 4A28 0001                  		tst.b	1(a0)
00019B04 6A00                       		bpl.s	Obj3D_ShipDel
00019B06                            
00019B06                            loc_17A16:
00019B06 6100 FE94                  		bsr.w	BossMove
00019B0A 6000 FDD4                  		bra.w	loc_177E6
00019B0E                            ; ===========================================================================
00019B0E                            
00019B0E                            Obj3D_ShipDel:
00019B0E 4EF9 0000 F1C2             		jmp	DeleteObject
00019B14                            ; ===========================================================================
00019B14                            
00019B14                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019B14 7000                       		moveq	#0,d0
00019B16 7201                       		moveq	#1,d1
00019B18 2268 0034                  		movea.l	$34(a0),a1
00019B1C 1029 0025                  		move.b	$25(a1),d0
00019B20 5900                       		subq.b	#4,d0
00019B22 6600                       		bne.s	loc_17A3E
00019B24 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019B2A 6600                       		bne.s	loc_17A46
00019B2C 7204                       		moveq	#4,d1
00019B2E                            
00019B2E                            loc_17A3E:
00019B2E 5D00                       		subq.b	#6,d0
00019B30 6B00                       		bmi.s	loc_17A46
00019B32 720A                       		moveq	#$A,d1
00019B34 6000                       		bra.s	loc_17A5A
00019B36                            ; ===========================================================================
00019B36                            
00019B36                            loc_17A46:
00019B36 4A29 0020                  		tst.b	$20(a1)
00019B3A 6600                       		bne.s	loc_17A50
00019B3C 7205                       		moveq	#5,d1
00019B3E 6000                       		bra.s	loc_17A5A
00019B40                            ; ===========================================================================
00019B40                            
00019B40                            loc_17A50:
00019B40 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B46 6500                       		bcs.s	loc_17A5A
00019B48 7204                       		moveq	#4,d1
00019B4A                            
00019B4A                            loc_17A5A:
00019B4A 1141 001C                  		move.b	d1,$1C(a0)
00019B4E 5500                       		subq.b	#2,d0
00019B50 6600                       		bne.s	Obj3D_FaceDisp
00019B52 117C 0006 001C             		move.b	#6,$1C(a0)
00019B58 4A28 0001                  		tst.b	1(a0)
00019B5C 6A00                       		bpl.s	Obj3D_FaceDel
00019B5E                            
00019B5E                            Obj3D_FaceDisp:
00019B5E 6000                       		bra.s	Obj3D_Display
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            Obj3D_FaceDel:
00019B60 4EF9 0000 F1C2             		jmp	DeleteObject
00019B66                            ; ===========================================================================
00019B66                            
00019B66                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019B66 117C 0007 001C             		move.b	#7,$1C(a0)
00019B6C 2268 0034                  		movea.l	$34(a0),a1
00019B70 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019B76 6600                       		bne.s	loc_17A96
00019B78 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B7E 4A28 0001                  		tst.b	1(a0)
00019B82 6A00                       		bpl.s	Obj3D_FlameDel
00019B84 6000                       		bra.s	Obj3D_FlameDisp
00019B86                            ; ===========================================================================
00019B86                            
00019B86                            loc_17A96:
00019B86 3029 0010                  		move.w	$10(a1),d0
00019B8A 6700                       		beq.s	Obj3D_FlameDisp
00019B8C 117C 0008 001C             		move.b	#8,$1C(a0)
00019B92                            
00019B92                            Obj3D_FlameDisp:
00019B92 6000                       		bra.s	Obj3D_Display
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            Obj3D_FlameDel:
00019B94 4EF9 0000 F1C2             		jmp	DeleteObject
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019B9A 2268 0034                  		movea.l	$34(a0),a1
00019B9E 3169 0008 0008             		move.w	8(a1),8(a0)
00019BA4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BAA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BB0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019BB6 4EB9 0000 C138             		jsr	AnimateSprite
00019BBC 1028 0022                  		move.b	$22(a0),d0
00019BC0 0200 0003                  		andi.b	#3,d0
00019BC4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BCA 8128 0001                  		or.b	d0,1(a0)
00019BCE 4EF9 0000 F186             		jmp	DisplaySprite
00019BD4                            ; ===========================================================================
00019BD4                            
00019BD4                            BossEnd:
00019BD4 7000                       		moveq	#0,d0
00019BD6 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00019BDA 4E75                       		rts
00019BDC                            ; ===========================================================================
00019BDC                            ; LEVEL MUSIC CONTROLLER
00019BDC                            ; ===========================================================================
00019BDC                            
00019BDC                            CtrlLevelMusic:
00019BDC 4A38 FFBC                  		tst.b	($FFFFFFBC).w		; Has Sonic drowned?
00019BE0 6600                       		bne.s	@end				; If so, skip all this
00019BE2 1038 FFFE                  		move.b	($FFFFFFFE).w,d0	; Level music
00019BE6 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019BEA 6700                       		beq.s	@chk_spdshoes		; If not, check if he has speed shoes
00019BEC 103C 0087                  		move.b	#$87,d0				; Invincibility music
00019BF0                            		
00019BF0                            @chk_spdshoes:
00019BF0 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does he have speed shoes?
00019BF4 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019BF6 103C 0095                  		move.b	#$95,d0				; Speed shoes music
00019BFA 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019BFE 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019C00 103C 0096                  		move.b	#$96,d0				; Speed shoes + invincibility music
00019C04                            		
00019C04                            @chk_boss:
00019C04 4A38 FFFF                  		tst.b	($FFFFFFFF).w		; Is there a boss?
00019C08 6700                       		beq.s	@chk_drowning		; If not, check if Sonic is drowning
00019C0A 7200                       		moveq	#0,d1				; Clear d1
00019C0C 1238 FE10                  		move.b	($FFFFFE10).w,d1	; Set boss number
00019C10 43F9 0000 50FC             		lea	(MusicList_Bosses).l,a1	; Load Music Playlist for bosses
00019C16 1031 1000                  		move.b	(a1,d1.w),d0		; Set music ID
00019C1A                            		
00019C1A                            @chk_drowning:
00019C1A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w	; Check air remaining
00019C20 6400                       		bcc.s	@chk_value			; If air is above $C, branch
00019C22 103C 0092                  		move.b	#$92,d0				; Drowning music
00019C26                            		
00019C26                            @chk_value:
00019C26 1238 FFFC                  		move.b	($FFFFFFFC).w,d1	; Get current music playing
00019C2A B200                       		cmp.b	d0,d1				; If the value is the same,
00019C2C 6600                       		bne.s	@play				; don't play it again
00019C2E                            		
00019C2E                            @end:
00019C2E 4E75                       		rts							; Return
00019C30                            		
00019C30                            @play:
00019C30 4EF9 0000 12B6             		jmp	(PlayMusic).l			; Play music and return
00019C36                            ; ===========================================================================
00019C36                            ; ---------------------------------------------------------------------------
00019C36                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019C36                            ; ---------------------------------------------------------------------------
00019C36                            
00019C36                            Obj48:					; XREF: Obj_Index
00019C36 7000                       		moveq	#0,d0
00019C38 1028 0024                  		move.b	$24(a0),d0
00019C3C 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019C40 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019C44                            ; ===========================================================================
00019C44 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019C46 0000                       		dc.w Obj48_Base-Obj48_Index
00019C48 0000                       		dc.w Obj48_Display2-Obj48_Index
00019C4A 0000                       		dc.w loc_17C68-Obj48_Index
00019C4C 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019C4E                            ; ===========================================================================
00019C4E                            
00019C4E                            Obj48_Main:				; XREF: Obj48_Index
00019C4E 5428 0024                  		addq.b	#2,$24(a0)
00019C52 317C 4080 0026             		move.w	#$4080,$26(a0)
00019C58 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019C5E 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019C66 317C 046C 0002             		move.w	#$46C,2(a0)
00019C6C 45E8 0028                  		lea	$28(a0),a2
00019C70 14FC 0000                  		move.b	#0,(a2)+
00019C74 7205                       		moveq	#5,d1
00019C76 2248                       		movea.l	a0,a1
00019C78 6000                       		bra.s	loc_17B60
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A                            Obj48_MakeLinks:
00019C7A 4EB9 0000 F630             		jsr	SingleObjLoad2
00019C80 6600                       		bne.s	Obj48_MakeBall
00019C82 3368 0008 0008             		move.w	8(a0),8(a1)
00019C88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C8E 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019C92 137C 0006 0024             		move.b	#6,$24(a1)
00019C98 237C 0000 963A 0004        		move.l	#Map_obj15,4(a1)
00019CA0 337C 0380 0002             		move.w	#$380,2(a1)
00019CA6 137C 0001 001A             		move.b	#1,$1A(a1)
00019CAC 5228 0028                  		addq.b	#1,$28(a0)
00019CB0                            
00019CB0                            loc_17B60:				; XREF: Obj48_Main
00019CB0 3A09                       		move.w	a1,d5
00019CB2 0445 D000                  		subi.w	#$D000,d5
00019CB6 EC4D                       		lsr.w	#6,d5
00019CB8 0245 007F                  		andi.w	#$7F,d5
00019CBC 14C5                       		move.b	d5,(a2)+
00019CBE 137C 0004 0001             		move.b	#4,1(a1)
00019CC4 137C 0008 0019             		move.b	#8,$19(a1)
00019CCA 137C 0006 0018             		move.b	#6,$18(a1)
00019CD0 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019CD6 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019CDA                            
00019CDA                            Obj48_MakeBall:
00019CDA 137C 0008 0024             		move.b	#8,$24(a1)
00019CE0 237C 0000 9B98 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019CE8 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019CEE 137C 0001 001A             		move.b	#1,$1A(a1)
00019CF4 137C 0005 0018             		move.b	#5,$18(a1)
00019CFA 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019D00 4E75                       		rts	
00019D02                            ; ===========================================================================
00019D02                            
00019D02 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019D08                            
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            Obj48_Base:				; XREF: Obj48_Index
00019D08 47F9 0001 9D02             		lea	(Obj48_PosData).l,a3
00019D0E 45E8 0028                  		lea	$28(a0),a2
00019D12 7C00                       		moveq	#0,d6
00019D14 1C1A                       		move.b	(a2)+,d6
00019D16                            
00019D16                            loc_17BC6:
00019D16 7800                       		moveq	#0,d4
00019D18 181A                       		move.b	(a2)+,d4
00019D1A ED4C                       		lsl.w	#6,d4
00019D1C 0684 00FF D000             		addi.l	#$FFD000,d4
00019D22 2244                       		movea.l	d4,a1
00019D24 101B                       		move.b	(a3)+,d0
00019D26 B029 003C                  		cmp.b	$3C(a1),d0
00019D2A 6700                       		beq.s	loc_17BE0
00019D2C 5229 003C                  		addq.b	#1,$3C(a1)
00019D30                            
00019D30                            loc_17BE0:
00019D30 51CE FFE4                  		dbf	d6,loc_17BC6
00019D34                            
00019D34 B029 003C                  		cmp.b	$3C(a1),d0
00019D38 6600                       		bne.s	loc_17BFA
00019D3A 2268 0034                  		movea.l	$34(a0),a1
00019D3E 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019D44 6600                       		bne.s	loc_17BFA
00019D46 5428 0024                  		addq.b	#2,$24(a0)
00019D4A                            
00019D4A                            loc_17BFA:
00019D4A 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019D50 6700                       		beq.s	Obj48_Display
00019D52 5268 0032                  		addq.w	#1,$32(a0)
00019D56                            
00019D56                            Obj48_Display:
00019D56 6100 0000                  		bsr.w	sub_17C2A
00019D5A 1028 0026                  		move.b	$26(a0),d0
00019D5E 4EB9 0000 95AC             		jsr	(Obj15_Move2).l
00019D64 4EF9 0000 F186             		jmp	DisplaySprite
00019D6A                            ; ===========================================================================
00019D6A                            
00019D6A                            Obj48_Display2:				; XREF: Obj48_Index
00019D6A 6100 0000                  		bsr.w	sub_17C2A
00019D6E 4EB9 0000 956C             		jsr	(Obj48_Move).l
00019D74 4EF9 0000 F186             		jmp	DisplaySprite
00019D7A                            
00019D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D7A                            
00019D7A                            
00019D7A                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019D7A 2268 0034                  		movea.l	$34(a0),a1
00019D7E 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019D84 6400                       		bcc.s	loc_17C3C
00019D86 0868 0000 001A             		bchg	#0,$1A(a0)
00019D8C                            
00019D8C                            loc_17C3C:
00019D8C 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019D92 3029 000C                  		move.w	$C(a1),d0
00019D96 D068 0032                  		add.w	$32(a0),d0
00019D9A 3140 0038                  		move.w	d0,$38(a0)
00019D9E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019DA4 4A29 0022                  		tst.b	$22(a1)
00019DA8 6A00                       		bpl.s	locret_17C66
00019DAA 10BC 003F                  		move.b	#$3F,0(a0)
00019DAE 117C 0000 0024             		move.b	#0,$24(a0)
00019DB4                            
00019DB4                            locret_17C66:
00019DB4 4E75                       		rts	
00019DB6                            ; End of function sub_17C2A
00019DB6                            
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_17C68:				; XREF: Obj48_Index
00019DB6 2268 0034                  		movea.l	$34(a0),a1
00019DBA 4A29 0022                  		tst.b	$22(a1)
00019DBE 6A00                       		bpl.s	Obj48_Display3
00019DC0 10BC 003F                  		move.b	#$3F,0(a0)
00019DC4 117C 0000 0024             		move.b	#0,$24(a0)
00019DCA                            
00019DCA                            Obj48_Display3:
00019DCA 4EF9 0000 F186             		jmp	DisplaySprite
00019DD0                            ; ===========================================================================
00019DD0                            
00019DD0                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019DD0 7000                       		moveq	#0,d0
00019DD2 4A28 001A                  		tst.b	$1A(a0)
00019DD6 6600                       		bne.s	Obj48_Vanish
00019DD8 5200                       		addq.b	#1,d0
00019DDA                            
00019DDA                            Obj48_Vanish:
00019DDA 1140 001A                  		move.b	d0,$1A(a0)
00019DDE 2268 0034                  		movea.l	$34(a0),a1
00019DE2 4A29 0022                  		tst.b	$22(a1)
00019DE6 6A00                       		bpl.s	Obj48_Display4
00019DE8 117C 0000 0020             		move.b	#0,$20(a0)
00019DEE 6100 FB6A                  		bsr.w	BossDefeated
00019DF2 5328 003C                  		subq.b	#1,$3C(a0)
00019DF6 6A00                       		bpl.s	Obj48_Display4
00019DF8 10BC 003F                  		move.b	#$3F,(a0)
00019DFC 117C 0000 0024             		move.b	#0,$24(a0)
00019E02                            
00019E02                            Obj48_Display4:
00019E02 4EF9 0000 F186             		jmp	DisplaySprite
00019E08                            ; ===========================================================================
00019E08                            Ani_Eggman:
00019E08                            	include "_anim\Eggman.asm"
00019E08                            ; ---------------------------------------------------------------------------
00019E08                            ; Animation script - Eggman (bosses)
00019E08                            ; ---------------------------------------------------------------------------
00019E08 0000                       		dc.w byte_17CD4-Ani_Eggman
00019E0A 0000                       		dc.w byte_17CD8-Ani_Eggman
00019E0C 0000                       		dc.w byte_17CDC-Ani_Eggman
00019E0E 0000                       		dc.w byte_17CE0-Ani_Eggman
00019E10 0000                       		dc.w byte_17CE4-Ani_Eggman
00019E12 0000                       		dc.w byte_17CE8-Ani_Eggman
00019E14 0000                       		dc.w byte_17CEC-Ani_Eggman
00019E16 0000                       		dc.w byte_17CF0-Ani_Eggman
00019E18 0000                       		dc.w byte_17CF4-Ani_Eggman
00019E1A 0000                       		dc.w byte_17CF8-Ani_Eggman
00019E1C 0000                       		dc.w byte_17CFC-Ani_Eggman
00019E1E 0000                       		dc.w byte_17D00-Ani_Eggman
00019E20 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019E24 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019E28 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019E2C 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019E30 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019E34 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019E38 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019E3C 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019E40 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019E44 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019E48 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019E4C 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019E58                            		even
00019E58                            		even
00019E58                            
00019E58                            ; ---------------------------------------------------------------------------
00019E58                            ; Sprite mappings - Eggman (boss levels)
00019E58                            ; ---------------------------------------------------------------------------
00019E58                            Map_Eggman:
00019E58                            	include "_maps\Eggman.asm"
00019E58                            ; ---------------------------------------------------------------------------
00019E58                            ; Sprite mappings - Eggman (boss levels)
00019E58                            ; ---------------------------------------------------------------------------
00019E58 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019E5C 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019E60 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019E64 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019E68 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019E6C 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019E70 0000                       		dc.w byte_17DC8-Map_Eggman
00019E72 06                         byte_17D26:	dc.b 6
00019E73 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019E78 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019E7D FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019E82 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019E87 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019E8C 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019E91 02                         byte_17D45:	dc.b 2
00019E92 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019E97 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019E9C 02                         byte_17D50:	dc.b 2
00019E9D E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019EA2 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019EA7 03                         byte_17D5B:	dc.b 3
00019EA8 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019EAD EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019EB2 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019EB7 03                         byte_17D6B:	dc.b 3
00019EB8 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019EBD EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019EC2 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019EC7 03                         byte_17D7B:	dc.b 3
00019EC8 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019ECD EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019ED2 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019ED7 03                         byte_17D8B:	dc.b 3
00019ED8 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019EDD E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019EE2 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019EE7 04                         byte_17D9B:	dc.b 4
00019EE8 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019EED E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019EF2 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019EF7 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019EFC 01                         byte_17DB0:	dc.b 1
00019EFD 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019F02 01                         byte_17DB6:	dc.b 1
00019F03 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019F08 00                         byte_17DBC:	dc.b 0
00019F09 02                         byte_17DBD:	dc.b 2
00019F0A 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019F0F 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019F14 02                         byte_17DC8:	dc.b 2
00019F15 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019F1A 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019F20 00                         		even
00019F20 00                         		even
00019F20                            
00019F20                            ; ---------------------------------------------------------------------------
00019F20                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019F20                            ; ---------------------------------------------------------------------------
00019F20                            Map_BossItems:
00019F20                            	include "_maps\Boss items.asm"
00019F20                            ; ---------------------------------------------------------------------------
00019F20                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019F20                            ; ---------------------------------------------------------------------------
00019F20 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019F24 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019F28 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019F2C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019F30 01                         byte_17DE4:	dc.b 1
00019F31 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019F36 02                         byte_17DEA:	dc.b 2
00019F37 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019F3C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019F41 00                         		dc.b 0
00019F42 01                         byte_17DF6:	dc.b 1
00019F43 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019F48 01                         byte_17DFC:	dc.b 1
00019F49 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019F4E 01                         byte_17E02:	dc.b 1
00019F4F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019F54 04                         byte_17E08:	dc.b 4
00019F55 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019F5A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019F5F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019F64 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019F69 00                         		dc.b 0
00019F6A 02                         byte_17E1E:	dc.b 2
00019F6B 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019F70 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019F75 00                         		dc.b 0
00019F76 02                         byte_17E2A:	dc.b 2
00019F77 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019F7C 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019F82 00                         		even
00019F82 00                         		even
00019F82                            
00019F82                            ; ===========================================================================
00019F82                            ; ---------------------------------------------------------------------------
00019F82                            ; Object 77 - Eggman (LZ)
00019F82                            ; ---------------------------------------------------------------------------
00019F82                            
00019F82                            Obj77:					; XREF: Obj_Index
00019F82 7000                       		moveq	#0,d0
00019F84 1028 0024                  		move.b	$24(a0),d0
00019F88 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019F8C 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019F90                            ; ===========================================================================
00019F90 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019F92 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019F94 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019F96 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019F98                            
00019F98 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019F9A 0401                       		dc.b 4,	1
00019F9C 0607                       		dc.b 6,	7
00019F9E                            ; ===========================================================================
00019F9E                            
00019F9E                            Obj77_Main:				; XREF: Obj77_Index
00019F9E 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019FA4 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019FAA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019FB0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019FB6 117C 000F 0020             		move.b	#$F,$20(a0)
00019FBC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019FC2 117C 0004 0018             		move.b	#4,$18(a0)
00019FC8 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019FCC 2248                       		movea.l	a0,a1
00019FCE 7202                       		moveq	#2,d1
00019FD0 6000                       		bra.s	Obj77_LoadBoss
00019FD2                            ; ===========================================================================
00019FD2                            
00019FD2                            Obj77_Loop:
00019FD2 4EB9 0000 F630             		jsr	SingleObjLoad2
00019FD8 6600                       		bne.s	Obj77_ShipMain
00019FDA 12BC 0077                  		move.b	#$77,0(a1)
00019FDE 3368 0008 0008             		move.w	8(a0),8(a1)
00019FE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019FEA                            
00019FEA                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019FEA 08A8 0000 0022             		bclr	#0,$22(a0)
00019FF0 4229 0025                  		clr.b	$25(a1)
00019FF4 135A 0024                  		move.b	(a2)+,$24(a1)
00019FF8 135A 001C                  		move.b	(a2)+,$1C(a1)
00019FFC 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001A002 237C 0001 9E58 0004        		move.l	#Map_Eggman,4(a1)
0001A00A 337C 0400 0002             		move.w	#$400,2(a1)
0001A010 137C 0004 0001             		move.b	#4,1(a1)
0001A016 137C 0020 0019             		move.b	#$20,$19(a1)
0001A01C 2348 0034                  		move.l	a0,$34(a1)
0001A020 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001A024                            
0001A024                            Obj77_ShipMain:
0001A024 43F8 D000                  		lea	($FFFFD000).w,a1
0001A028 7000                       		moveq	#0,d0
0001A02A 1028 0025                  		move.b	$25(a0),d0
0001A02E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001A032 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001A036 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001A03C 4EB9 0000 C138             		jsr	AnimateSprite
0001A042 7003                       		moveq	#3,d0
0001A044 C028 0022                  		and.b	$22(a0),d0
0001A048 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A04E 8128 0001                  		or.b	d0,1(a0)
0001A052 4EF9 0000 F186             		jmp	DisplaySprite
0001A058                            ; ===========================================================================
0001A058 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001A05C 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001A060 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001A064 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001A068 3029 0008                  		move.w	8(a1),d0
0001A06C 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001A070 6500                       		bcs.s	loc_17F38
0001A072 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A078 317C 0060 0010             		move.w	#$60,$10(a0)
0001A07E 5428 0025                  		addq.b	#2,$25(a0)
0001A082                            
0001A082                            loc_17F38:
0001A082 6100 F918                  		bsr.w	BossMove
0001A086 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A08C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A092                            
0001A092                            loc_17F48:
0001A092 4A28 003D                  		tst.b	$3D(a0)
0001A096 6600                       		bne.s	loc_17F8E
0001A098 4A28 0022                  		tst.b	$22(a0)
0001A09C 6B00                       		bmi.s	loc_17F92
0001A09E 4A28 0020                  		tst.b	$20(a0)
0001A0A2 6600                       		bne.s	locret_17F8C
0001A0A4 4A28 003E                  		tst.b	$3E(a0)
0001A0A8 6600                       		bne.s	loc_17F70
0001A0AA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A0B0 303C 00AC                  		move.w	#$AC,d0
0001A0B4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001A0BA                            
0001A0BA                            loc_17F70:
0001A0BA 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A0BE 7000                       		moveq	#0,d0
0001A0C0 4A51                       		tst.w	(a1)
0001A0C2 6600                       		bne.s	loc_17F7E
0001A0C4 303C 0EEE                  		move.w	#$EEE,d0
0001A0C8                            
0001A0C8                            loc_17F7E:
0001A0C8 3280                       		move.w	d0,(a1)
0001A0CA 5328 003E                  		subq.b	#1,$3E(a0)
0001A0CE 6600                       		bne.s	locret_17F8C
0001A0D0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0D6                            
0001A0D6                            locret_17F8C:
0001A0D6 4E75                       		rts	
0001A0D8                            ; ===========================================================================
0001A0D8                            
0001A0D8                            loc_17F8E:				; XREF: loc_17F48
0001A0D8 6000 F880                  		bra.w	BossDefeated
0001A0DC                            ; ===========================================================================
0001A0DC                            
0001A0DC                            loc_17F92:				; XREF: loc_17F48
0001A0DC 7064                       		moveq	#100,d0
0001A0DE 6100 0000                  		bsr.w	AddPoints
0001A0E2 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A0E8 4E75                       		rts	
0001A0EA                            ; ===========================================================================
0001A0EA                            
0001A0EA                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001A0EA 70FE                       		moveq	#-2,d0
0001A0EC 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001A0F2 6500                       		bcs.s	loc_17FB6
0001A0F4 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001A0FA 4268 0010                  		clr.w	$10(a0)
0001A0FE 5240                       		addq.w	#1,d0
0001A100                            
0001A100                            loc_17FB6:
0001A100 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A106 6E00                       		bgt.s	loc_17FCA
0001A108 317C 0500 0038             		move.w	#$500,$38(a0)
0001A10E 4268 0012                  		clr.w	$12(a0)
0001A112 5240                       		addq.w	#1,d0
0001A114                            
0001A114                            loc_17FCA:
0001A114 6600                       		bne.s	loc_17FDC
0001A116 317C 0140 0010             		move.w	#$140,$10(a0)
0001A11C 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A122 5428 0025                  		addq.b	#2,$25(a0)
0001A126                            
0001A126                            loc_17FDC:
0001A126 6000 FF5A                  		bra.w	loc_17F38
0001A12A                            ; ===========================================================================
0001A12A                            
0001A12A                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A12A 70FE                       		moveq	#-2,d0
0001A12C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A132 6500                       		bcs.s	loc_17FF6
0001A134 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A13A 4268 0010                  		clr.w	$10(a0)
0001A13E 5240                       		addq.w	#1,d0
0001A140                            
0001A140                            loc_17FF6:
0001A140 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A146 6E00                       		bgt.s	loc_1800A
0001A148 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A14E 4268 0012                  		clr.w	$12(a0)
0001A152 5240                       		addq.w	#1,d0
0001A154                            
0001A154                            loc_1800A:
0001A154 6600                       		bne.s	loc_1801A
0001A156 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A15C 5428 0025                  		addq.b	#2,$25(a0)
0001A160 4228 003F                  		clr.b	$3F(a0)
0001A164                            
0001A164                            loc_1801A:
0001A164 6000 FF1C                  		bra.w	loc_17F38
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A168 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A16E 6E00                       		bgt.s	loc_1804E
0001A170 317C 0100 0038             		move.w	#$100,$38(a0)
0001A176 317C 0140 0010             		move.w	#$140,$10(a0)
0001A17C 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A182 4A28 003D                  		tst.b	$3D(a0)
0001A186 6700                       		beq.s	loc_18046
0001A188 E1E8 0010                  		asl	$10(a0)
0001A18C E1E8 0012                  		asl	$12(a0)
0001A190                            
0001A190                            loc_18046:
0001A190 5428 0025                  		addq.b	#2,$25(a0)
0001A194 6000 FEEC                  		bra.w	loc_17F38
0001A198                            ; ===========================================================================
0001A198                            
0001A198                            loc_1804E:
0001A198 08E8 0000 0022             		bset	#0,$22(a0)
0001A19E 5428 003F                  		addq.b	#2,$3F(a0)
0001A1A2 1028 003F                  		move.b	$3F(a0),d0
0001A1A6 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001A1AC 4A41                       		tst.w	d1
0001A1AE 6A00                       		bpl.s	loc_1806C
0001A1B0 08A8 0000 0022             		bclr	#0,$22(a0)
0001A1B6                            
0001A1B6                            loc_1806C:
0001A1B6 E840                       		asr.w	#4,d0
0001A1B8 4840                       		swap	d0
0001A1BA 4240                       		clr.w	d0
0001A1BC D0A8 0030                  		add.l	$30(a0),d0
0001A1C0 4840                       		swap	d0
0001A1C2 3140 0008                  		move.w	d0,8(a0)
0001A1C6 3028 0012                  		move.w	$12(a0),d0
0001A1CA 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A1CE 9268 000C                  		sub.w	$C(a0),d1
0001A1D2 6500                       		bcs.s	loc_180A2
0001A1D4 0441 0048                  		subi.w	#$48,d1
0001A1D8 6500                       		bcs.s	loc_180A2
0001A1DA E240                       		asr.w	#1,d0
0001A1DC 0441 0028                  		subi.w	#$28,d1
0001A1E0 6500                       		bcs.s	loc_180A2
0001A1E2 E240                       		asr.w	#1,d0
0001A1E4 0441 0028                  		subi.w	#$28,d1
0001A1E8 6500                       		bcs.s	loc_180A2
0001A1EA 7000                       		moveq	#0,d0
0001A1EC                            
0001A1EC                            loc_180A2:
0001A1EC 48C0                       		ext.l	d0
0001A1EE E180                       		asl.l	#8,d0
0001A1F0 4A28 003D                  		tst.b	$3D(a0)
0001A1F4 6700                       		beq.s	loc_180AE
0001A1F6 D080                       		add.l	d0,d0
0001A1F8                            
0001A1F8                            loc_180AE:
0001A1F8 D1A8 0038                  		add.l	d0,$38(a0)
0001A1FC 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A202 6000 FE8E                  		bra.w	loc_17F48
0001A206                            ; ===========================================================================
0001A206                            
0001A206                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A206 70FE                       		moveq	#-2,d0
0001A208 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A20E 6500                       		bcs.s	loc_180D2
0001A210 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A216 4268 0010                  		clr.w	$10(a0)
0001A21A 5240                       		addq.w	#1,d0
0001A21C                            
0001A21C                            loc_180D2:
0001A21C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A222 6E00                       		bgt.s	loc_180E6
0001A224 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A22A 4268 0012                  		clr.w	$12(a0)
0001A22E 5240                       		addq.w	#1,d0
0001A230                            
0001A230                            loc_180E6:
0001A230 6600                       		bne.s	loc_180F2
0001A232 5428 0025                  		addq.b	#2,$25(a0)
0001A236 08A8 0000 0022             		bclr	#0,$22(a0)
0001A23C                            
0001A23C                            loc_180F2:
0001A23C 6000 FE44                  		bra.w	loc_17F38
0001A240                            ; ===========================================================================
0001A240                            
0001A240                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A240 4A28 003D                  		tst.b	$3D(a0)
0001A244 6600                       		bne.s	loc_18112
0001A246 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A24C 6D00                       		blt.s	loc_18126
0001A24E 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A254 6E00                       		bgt.s	loc_18126
0001A256 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A25C                            
0001A25C                            loc_18112:
0001A25C                            		
0001A25C 6100 F976                  		bsr.w	BossEnd
0001A260                            		
0001A260 08E8 0000 0022             		bset	#0,$22(a0)
0001A266 5428 0025                  		addq.b	#2,$25(a0)
0001A26A                            
0001A26A                            loc_18126:
0001A26A 6000 FE16                  		bra.w	loc_17F38
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A26E 4A28 003D                  		tst.b	$3D(a0)
0001A272 6600                       		bne.s	loc_18136
0001A274 5328 003C                  		subq.b	#1,$3C(a0)
0001A278 6600                       		bne.s	loc_1814E
0001A27A                            
0001A27A                            loc_18136:
0001A27A 4228 003C                  		clr.b	$3C(a0)
0001A27E 317C 0400 0010             		move.w	#$400,$10(a0)
0001A284 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A28A 4228 003D                  		clr.b	$3D(a0)
0001A28E 5428 0025                  		addq.b	#2,$25(a0)
0001A292                            
0001A292                            loc_1814E:
0001A292 6000 FDEE                  		bra.w	loc_17F38
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            loc_18152:				; XREF: Obj77_ShipIndex
0001A296 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A29C 6400                       		bcc.s	loc_18160
0001A29E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A2A2 6000                       		bra.s	loc_18166
0001A2A4                            ; ===========================================================================
0001A2A4                            
0001A2A4                            loc_18160:
0001A2A4 4A28 0001                  		tst.b	1(a0)
0001A2A8 6A00                       		bpl.s	Obj77_ShipDel
0001A2AA                            
0001A2AA                            loc_18166:
0001A2AA 6000 FDD6                  		bra.w	loc_17F38
0001A2AE                            ; ===========================================================================
0001A2AE                            
0001A2AE                            Obj77_ShipDel:
0001A2AE 4EF9 0000 F1C2             		jmp	DeleteObject
0001A2B4                            ; ===========================================================================
0001A2B4                            
0001A2B4                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A2B4 2268 0034                  		movea.l	$34(a0),a1
0001A2B8 1011                       		move.b	(a1),d0
0001A2BA B010                       		cmp.b	(a0),d0
0001A2BC 6600                       		bne.s	Obj77_FaceDel
0001A2BE 7000                       		moveq	#0,d0
0001A2C0 1029 0025                  		move.b	$25(a1),d0
0001A2C4 7201                       		moveq	#1,d1
0001A2C6 4A28 003D                  		tst.b	$3D(a0)
0001A2CA 6700                       		beq.s	loc_1818C
0001A2CC 720A                       		moveq	#$A,d1
0001A2CE 6000                       		bra.s	loc_181A0
0001A2D0                            ; ===========================================================================
0001A2D0                            
0001A2D0                            loc_1818C:
0001A2D0 4A29 0020                  		tst.b	$20(a1)
0001A2D4 6600                       		bne.s	loc_18196
0001A2D6 7205                       		moveq	#5,d1
0001A2D8 6000                       		bra.s	loc_181A0
0001A2DA                            ; ===========================================================================
0001A2DA                            
0001A2DA                            loc_18196:
0001A2DA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A2E0 6500                       		bcs.s	loc_181A0
0001A2E2 7204                       		moveq	#4,d1
0001A2E4                            
0001A2E4                            loc_181A0:
0001A2E4 1141 001C                  		move.b	d1,$1C(a0)
0001A2E8 0C00 000E                  		cmpi.b	#$E,d0
0001A2EC 6600                       		bne.s	loc_181B6
0001A2EE 117C 0006 001C             		move.b	#6,$1C(a0)
0001A2F4 4A28 0001                  		tst.b	1(a0)
0001A2F8 6A00                       		bpl.s	Obj77_FaceDel
0001A2FA                            
0001A2FA                            loc_181B6:
0001A2FA 6000                       		bra.s	Obj77_Display
0001A2FC                            ; ===========================================================================
0001A2FC                            
0001A2FC                            Obj77_FaceDel:
0001A2FC 4EF9 0000 F1C2             		jmp	DeleteObject
0001A302                            ; ===========================================================================
0001A302                            
0001A302                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A302 117C 0007 001C             		move.b	#7,$1C(a0)
0001A308 2268 0034                  		movea.l	$34(a0),a1
0001A30C 1011                       		move.b	(a1),d0
0001A30E B010                       		cmp.b	(a0),d0
0001A310 6600                       		bne.s	Obj77_FlameDel
0001A312 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A318 6600                       		bne.s	loc_181F0
0001A31A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A320 4A28 0001                  		tst.b	1(a0)
0001A324 6A00                       		bpl.s	Obj77_FlameDel
0001A326 6000                       		bra.s	loc_181F0
0001A328                            ; ===========================================================================
0001A328 4A69 0010                  		tst.w	$10(a1)
0001A32C 6700                       		beq.s	loc_181F0
0001A32E 117C 0008 001C             		move.b	#8,$1C(a0)
0001A334                            
0001A334                            loc_181F0:
0001A334 6000                       		bra.s	Obj77_Display
0001A336                            ; ===========================================================================
0001A336                            
0001A336                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A336 4EF9 0000 F1C2             		jmp	DeleteObject
0001A33C                            ; ===========================================================================
0001A33C                            
0001A33C                            Obj77_Display:
0001A33C 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001A342 4EB9 0000 C138             		jsr	AnimateSprite
0001A348 2268 0034                  		movea.l	$34(a0),a1
0001A34C 3169 0008 0008             		move.w	8(a1),8(a0)
0001A352 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A358 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A35E 7003                       		moveq	#3,d0
0001A360 C028 0022                  		and.b	$22(a0),d0
0001A364 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A36A 8128 0001                  		or.b	d0,1(a0)
0001A36E 4EF9 0000 F186             		jmp	DisplaySprite
0001A374                            ; ===========================================================================
0001A374                            ; ---------------------------------------------------------------------------
0001A374                            ; Object 73 - Eggman (MZ)
0001A374                            ; ---------------------------------------------------------------------------
0001A374                            
0001A374                            Obj73:					; XREF: Obj_Index
0001A374 7000                       		moveq	#0,d0
0001A376 1028 0024                  		move.b	$24(a0),d0
0001A37A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A37E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A382                            ; ===========================================================================
0001A382 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A384 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A386 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A388 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A38A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A38C                            
0001A38C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A38F 0401 04                    		dc.b 4,	1, 4
0001A392 0607 04                    		dc.b 6,	7, 4
0001A395 0800 03                    		dc.b 8,	0, 3
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            Obj73_Main:				; XREF: Obj73_Index
0001A398 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A39E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A3A4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3AA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A3B0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A3B4 2248                       		movea.l	a0,a1
0001A3B6 7203                       		moveq	#3,d1
0001A3B8 6000                       		bra.s	Obj73_LoadBoss
0001A3BA                            ; ===========================================================================
0001A3BA                            
0001A3BA                            Obj73_Loop:
0001A3BA 4EB9 0000 F630             		jsr	SingleObjLoad2
0001A3C0 6600                       		bne.s	Obj73_ShipMain
0001A3C2 12BC 0073                  		move.b	#$73,0(a1)
0001A3C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3D2                            
0001A3D2                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A3D2 08A8 0000 0022             		bclr	#0,$22(a0)
0001A3D8 4229 0025                  		clr.b	$25(a1)
0001A3DC 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3E0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3E4 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3E8 237C 0001 9E58 0004        		move.l	#Map_Eggman,4(a1)
0001A3F0 337C 0400 0002             		move.w	#$400,2(a1)
0001A3F6 137C 0004 0001             		move.b	#4,1(a1)
0001A3FC 137C 0020 0019             		move.b	#$20,$19(a1)
0001A402 2348 0034                  		move.l	a0,$34(a1)
0001A406 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A40A                            
0001A40A                            Obj73_ShipMain:
0001A40A 7000                       		moveq	#0,d0
0001A40C 1028 0025                  		move.b	$25(a0),d0
0001A410 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A414 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A418 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001A41E 4EB9 0000 C138             		jsr	AnimateSprite
0001A424 7003                       		moveq	#3,d0
0001A426 C028 0022                  		and.b	$22(a0),d0
0001A42A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A430 8128 0001                  		or.b	d0,1(a0)
0001A434 4EF9 0000 F186             		jmp	DisplaySprite
0001A43A                            ; ===========================================================================
0001A43A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A43C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A43E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A440 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A442 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A444                            ; ===========================================================================
0001A444                            
0001A444                            loc_18302:				; XREF: Obj73_ShipIndex
0001A444 1028 003F                  		move.b	$3F(a0),d0
0001A448 5428 003F                  		addq.b	#2,$3F(a0)
0001A44C 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001A452 E440                       		asr.w	#2,d0
0001A454 3140 0012                  		move.w	d0,$12(a0)
0001A458 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A45E 6100 F53C                  		bsr.w	BossMove
0001A462 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A468 6600                       		bne.s	loc_18334
0001A46A 5428 0025                  		addq.b	#2,$25(a0)
0001A46E 4228 0028                  		clr.b	$28(a0)
0001A472 42A8 0010                  		clr.l	$10(a0)
0001A476                            
0001A476                            loc_18334:
0001A476 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A47C 1140 0034                  		move.b	d0,$34(a0)
0001A480                            
0001A480                            loc_1833E:
0001A480 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A486 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A48C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A492 6400                       		bcc.s	locret_18390
0001A494 4A28 0022                  		tst.b	$22(a0)
0001A498 6B00                       		bmi.s	loc_18392
0001A49A 4A28 0020                  		tst.b	$20(a0)
0001A49E 6600                       		bne.s	locret_18390
0001A4A0 4A28 003E                  		tst.b	$3E(a0)
0001A4A4 6600                       		bne.s	loc_18374
0001A4A6 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A4AC 303C 00AC                  		move.w	#$AC,d0
0001A4B0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A4B6                            
0001A4B6                            loc_18374:
0001A4B6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A4BA 7000                       		moveq	#0,d0
0001A4BC 4A51                       		tst.w	(a1)
0001A4BE 6600                       		bne.s	loc_18382
0001A4C0 303C 0EEE                  		move.w	#$EEE,d0
0001A4C4                            
0001A4C4                            loc_18382:
0001A4C4 3280                       		move.w	d0,(a1)
0001A4C6 5328 003E                  		subq.b	#1,$3E(a0)
0001A4CA 6600                       		bne.s	locret_18390
0001A4CC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A4D2                            
0001A4D2                            locret_18390:
0001A4D2 4E75                       		rts	
0001A4D4                            ; ===========================================================================
0001A4D4                            
0001A4D4                            loc_18392:				; XREF: loc_1833E
0001A4D4 7064                       		moveq	#100,d0
0001A4D6 6100 0000                  		bsr.w	AddPoints
0001A4DA 117C 0004 0025             		move.b	#4,$25(a0)
0001A4E0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A4E6 4268 0010                  		clr.w	$10(a0)
0001A4EA 4E75                       		rts	
0001A4EC                            ; ===========================================================================
0001A4EC                            
0001A4EC                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A4EC 7000                       		moveq	#0,d0
0001A4EE 1028 0028                  		move.b	$28(a0),d0
0001A4F2 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A4F6 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A4FA 0228 0006 0028             		andi.b	#6,$28(a0)
0001A500 6000 FF7E                  		bra.w	loc_1833E
0001A504                            ; ===========================================================================
0001A504 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A506 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A508 0000                       		dc.w loc_183CA-off_183C2
0001A50A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            loc_183CA:				; XREF: off_183C2
0001A50C 4A68 0010                  		tst.w	$10(a0)
0001A510 6600                       		bne.s	loc_183FE
0001A512 7040                       		moveq	#$40,d0
0001A514 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A51A 6700                       		beq.s	loc_183E6
0001A51C 6500                       		bcs.s	loc_183DE
0001A51E 4440                       		neg.w	d0
0001A520                            
0001A520                            loc_183DE:
0001A520 3140 0012                  		move.w	d0,$12(a0)
0001A524 6000 F476                  		bra.w	BossMove
0001A528                            ; ===========================================================================
0001A528                            
0001A528                            loc_183E6:
0001A528 317C 0200 0010             		move.w	#$200,$10(a0)
0001A52E 317C 0100 0012             		move.w	#$100,$12(a0)
0001A534 0828 0000 0022             		btst	#0,$22(a0)
0001A53A 6600                       		bne.s	loc_183FE
0001A53C 4468 0010                  		neg.w	$10(a0)
0001A540                            
0001A540                            loc_183FE:
0001A540 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A546 6400                       		bcc.s	Obj73_MakeLava
0001A548 6100 F452                  		bsr.w	BossMove
0001A54C 5968 0012                  		subq.w	#4,$12(a0)
0001A550                            
0001A550                            Obj73_MakeLava:
0001A550 5328 0034                  		subq.b	#1,$34(a0)
0001A554 6400                       		bcc.s	loc_1845C
0001A556 4EB9 0000 F61A             		jsr	SingleObjLoad
0001A55C 6600                       		bne.s	loc_1844A
0001A55E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A562 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A568 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A56E 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A574 80FC 0050                  		divu.w	#$50,d0
0001A578 4840                       		swap	d0
0001A57A 0640 1878                  		addi.w	#$1878,d0
0001A57E 3340 0008                  		move.w	d0,8(a1)
0001A582 EE09                       		lsr.b	#7,d1
0001A584 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A58A                            
0001A58A                            loc_1844A:
0001A58A 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A590 0200 001F                  		andi.b	#$1F,d0
0001A594 0600 0040                  		addi.b	#$40,d0
0001A598 1140 0034                  		move.b	d0,$34(a0)
0001A59C                            
0001A59C                            loc_1845C:
0001A59C 0828 0000 0022             		btst	#0,$22(a0)
0001A5A2 6700                       		beq.s	loc_18474
0001A5A4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A5AA 6D00                       		blt.s	locret_1849C
0001A5AC 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A5B2 6000                       		bra.s	loc_18482
0001A5B4                            ; ===========================================================================
0001A5B4                            
0001A5B4                            loc_18474:
0001A5B4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A5BA 6E00                       		bgt.s	locret_1849C
0001A5BC 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A5C2                            
0001A5C2                            loc_18482:
0001A5C2 4268 0010                  		clr.w	$10(a0)
0001A5C6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A5CC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A5D2 6400                       		bcc.s	loc_18498
0001A5D4 4468 0012                  		neg.w	$12(a0)
0001A5D8                            
0001A5D8                            loc_18498:
0001A5D8 5428 0028                  		addq.b	#2,$28(a0)
0001A5DC                            
0001A5DC                            locret_1849C:
0001A5DC 4E75                       		rts	
0001A5DE                            ; ===========================================================================
0001A5DE                            
0001A5DE                            Obj73_MakeLava2:			; XREF: off_183C2
0001A5DE 6100 F3BC                  		bsr.w	BossMove
0001A5E2 3028 0038                  		move.w	$38(a0),d0
0001A5E6 0440 022C                  		subi.w	#$22C,d0
0001A5EA 6E00                       		bgt.s	locret_184F4
0001A5EC 303C 022C                  		move.w	#$22C,d0
0001A5F0 4A68 0012                  		tst.w	$12(a0)
0001A5F4 6700                       		beq.s	loc_184EA
0001A5F6 4268 0012                  		clr.w	$12(a0)
0001A5FA 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A600 0868 0000 0022             		bchg	#0,$22(a0)
0001A606 4EB9 0000 F61A             		jsr	SingleObjLoad
0001A60C 6600                       		bne.s	loc_184EA
0001A60E 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A614 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A61A 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A620 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A624 137C 0001 0028             		move.b	#1,$28(a1)
0001A62A                            
0001A62A                            loc_184EA:
0001A62A 5368 003C                  		subq.w	#1,$3C(a0)
0001A62E 6600                       		bne.s	locret_184F4
0001A630 5428 0028                  		addq.b	#2,$28(a0)
0001A634                            
0001A634                            locret_184F4:
0001A634 4E75                       		rts	
0001A636                            ; ===========================================================================
0001A636                            
0001A636                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A636 5368 003C                  		subq.w	#1,$3C(a0)
0001A63A 6B00                       		bmi.s	loc_18500
0001A63C 6000 F31C                  		bra.w	BossDefeated
0001A640                            ; ===========================================================================
0001A640                            
0001A640                            loc_18500:
0001A640 08E8 0000 0022             		bset	#0,$22(a0)
0001A646 08A8 0007 0022             		bclr	#7,$22(a0)
0001A64C 4268 0010                  		clr.w	$10(a0)
0001A650 5428 0025                  		addq.b	#2,$25(a0)
0001A654 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A65A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A65E 6600                       		bne.s	locret_1852A
0001A660 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A666 4268 0012                  		clr.w	$12(a0)
0001A66A                            
0001A66A                            locret_1852A:
0001A66A 4E75                       		rts	
0001A66C                            ; ===========================================================================
0001A66C                            
0001A66C                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A66C 5268 003C                  		addq.w	#1,$3C(a0)
0001A670 6700                       		beq.s	loc_18544
0001A672 6A00                       		bpl.s	loc_1854E
0001A674 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A67A 6400                       		bcc.s	loc_18544
0001A67C 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A682 6000                       		bra.s	loc_1857A
0001A684                            ; ===========================================================================
0001A684                            
0001A684                            loc_18544:
0001A684 4268 0012                  		clr.w	$12(a0)
0001A688 4268 003C                  		clr.w	$3C(a0)
0001A68C 6000                       		bra.s	loc_1857A
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            loc_1854E:
0001A68E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A694 6500                       		bcs.s	loc_18566
0001A696 6700                       		beq.s	loc_1856C
0001A698 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A69E 6500                       		bcs.s	loc_1857A
0001A6A0 5428 0025                  		addq.b	#2,$25(a0)
0001A6A4 6000                       		bra.s	loc_1857A
0001A6A6                            ; ===========================================================================
0001A6A6                            
0001A6A6                            loc_18566:
0001A6A6 5168 0012                  		subq.w	#8,$12(a0)
0001A6AA 6000                       		bra.s	loc_1857A
0001A6AC                            ; ===========================================================================
0001A6AC                            
0001A6AC                            loc_1856C:
0001A6AC 4268 0012                  		clr.w	$12(a0)
0001A6B0 6100 F522                  		bsr.w	BossEnd
0001A6B4                            
0001A6B4                            loc_1857A:
0001A6B4 6100 F2E6                  		bsr.w	BossMove
0001A6B8 6000 FDC6                  		bra.w	loc_1833E
0001A6BC                            ; ===========================================================================
0001A6BC                            
0001A6BC                            loc_18582:				; XREF: Obj73_ShipIndex
0001A6BC 317C 0500 0010             		move.w	#$500,$10(a0)
0001A6C2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A6C8 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A6CE 6400                       		bcc.s	loc_1859C
0001A6D0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A6D4 6000                       		bra.s	loc_185A2
0001A6D6                            ; ===========================================================================
0001A6D6                            
0001A6D6                            loc_1859C:
0001A6D6 4A28 0001                  		tst.b	1(a0)
0001A6DA 6A00                       		bpl.s	Obj73_ShipDel
0001A6DC                            
0001A6DC                            loc_185A2:
0001A6DC 6100 F2BE                  		bsr.w	BossMove
0001A6E0 6000 FD9E                  		bra.w	loc_1833E
0001A6E4                            ; ===========================================================================
0001A6E4                            
0001A6E4                            Obj73_ShipDel:
0001A6E4 4EF9 0000 F1C2             		jmp	DeleteObject
0001A6EA                            ; ===========================================================================
0001A6EA                            
0001A6EA                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A6EA 7000                       		moveq	#0,d0
0001A6EC 7201                       		moveq	#1,d1
0001A6EE 2268 0034                  		movea.l	$34(a0),a1
0001A6F2 1029 0025                  		move.b	$25(a1),d0
0001A6F6 5540                       		subq.w	#2,d0
0001A6F8 6600                       		bne.s	loc_185D2
0001A6FA 0829 0001 0028             		btst	#1,$28(a1)
0001A700 6700                       		beq.s	loc_185DA
0001A702 4A69 0012                  		tst.w	$12(a1)
0001A706 6600                       		bne.s	loc_185DA
0001A708 7204                       		moveq	#4,d1
0001A70A 6000                       		bra.s	loc_185EE
0001A70C                            ; ===========================================================================
0001A70C                            
0001A70C                            loc_185D2:
0001A70C 5500                       		subq.b	#2,d0
0001A70E 6B00                       		bmi.s	loc_185DA
0001A710 720A                       		moveq	#$A,d1
0001A712 6000                       		bra.s	loc_185EE
0001A714                            ; ===========================================================================
0001A714                            
0001A714                            loc_185DA:
0001A714 4A29 0020                  		tst.b	$20(a1)
0001A718 6600                       		bne.s	loc_185E4
0001A71A 7205                       		moveq	#5,d1
0001A71C 6000                       		bra.s	loc_185EE
0001A71E                            ; ===========================================================================
0001A71E                            
0001A71E                            loc_185E4:
0001A71E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A724 6500                       		bcs.s	loc_185EE
0001A726 7204                       		moveq	#4,d1
0001A728                            
0001A728                            loc_185EE:
0001A728 1141 001C                  		move.b	d1,$1C(a0)
0001A72C 5900                       		subq.b	#4,d0
0001A72E 6600                       		bne.s	loc_18602
0001A730 117C 0006 001C             		move.b	#6,$1C(a0)
0001A736 4A28 0001                  		tst.b	1(a0)
0001A73A 6A00                       		bpl.s	Obj73_FaceDel
0001A73C                            
0001A73C                            loc_18602:
0001A73C 6000                       		bra.s	Obj73_Display
0001A73E                            ; ===========================================================================
0001A73E                            
0001A73E                            Obj73_FaceDel:
0001A73E 4EF9 0000 F1C2             		jmp	DeleteObject
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A744 117C 0007 001C             		move.b	#7,$1C(a0)
0001A74A 2268 0034                  		movea.l	$34(a0),a1
0001A74E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A754 6D00                       		blt.s	loc_1862A
0001A756 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A75C 4A28 0001                  		tst.b	1(a0)
0001A760 6A00                       		bpl.s	Obj73_FlameDel
0001A762 6000                       		bra.s	loc_18636
0001A764                            ; ===========================================================================
0001A764                            
0001A764                            loc_1862A:
0001A764 4A69 0010                  		tst.w	$10(a1)
0001A768 6700                       		beq.s	loc_18636
0001A76A 117C 0008 001C             		move.b	#8,$1C(a0)
0001A770                            
0001A770                            loc_18636:
0001A770 6000                       		bra.s	Obj73_Display
0001A772                            ; ===========================================================================
0001A772                            
0001A772                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A772 4EF9 0000 F1C2             		jmp	DeleteObject
0001A778                            ; ===========================================================================
0001A778                            
0001A778                            Obj73_Display:
0001A778 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001A77E 4EB9 0000 C138             		jsr	AnimateSprite
0001A784                            
0001A784                            loc_1864A:
0001A784 2268 0034                  		movea.l	$34(a0),a1
0001A788 3169 0008 0008             		move.w	8(a1),8(a0)
0001A78E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A794 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A79A 7003                       		moveq	#3,d0
0001A79C C028 0022                  		and.b	$22(a0),d0
0001A7A0 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A7A6 8128 0001                  		or.b	d0,1(a0)
0001A7AA 4EF9 0000 F186             		jmp	DisplaySprite
0001A7B0                            ; ===========================================================================
0001A7B0                            
0001A7B0                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A7B0 2268 0034                  		movea.l	$34(a0),a1
0001A7B4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A7BA 6600                       		bne.s	loc_18688
0001A7BC 4A28 0001                  		tst.b	1(a0)
0001A7C0 6A00                       		bpl.s	Obj73_TubeDel
0001A7C2                            
0001A7C2                            loc_18688:
0001A7C2 217C 0001 9F20 0004        		move.l	#Map_BossItems,4(a0)
0001A7CA 317C 246C 0002             		move.w	#$246C,2(a0)
0001A7D0 117C 0004 001A             		move.b	#4,$1A(a0)
0001A7D6 60AC                       		bra.s	loc_1864A
0001A7D8                            ; ===========================================================================
0001A7D8                            
0001A7D8                            Obj73_TubeDel:
0001A7D8 4EF9 0000 F1C2             		jmp	DeleteObject
0001A7DE                            ; ===========================================================================
0001A7DE                            ; ---------------------------------------------------------------------------
0001A7DE                            ; Object 74 - lava that	Eggman drops (MZ)
0001A7DE                            ; ---------------------------------------------------------------------------
0001A7DE                            
0001A7DE                            Obj74:					; XREF: Obj_Index
0001A7DE 7000                       		moveq	#0,d0
0001A7E0 1028 0024                  		move.b	$24(a0),d0
0001A7E4 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A7E8 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A7EC 4EF9 0000 F186             		jmp	DisplaySprite
0001A7F2                            ; ===========================================================================
0001A7F2 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A7F4 0000                       		dc.w Obj74_Action-Obj74_Index
0001A7F6 0000                       		dc.w loc_18886-Obj74_Index
0001A7F8 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A7FA                            ; ===========================================================================
0001A7FA                            
0001A7FA                            Obj74_Main:				; XREF: Obj74_Index
0001A7FA 117C 0008 0016             		move.b	#8,$16(a0)
0001A800 117C 0008 0017             		move.b	#8,$17(a0)
0001A806 217C 0000 CD8A 0004        		move.l	#Map_obj14,4(a0)
0001A80E 317C 0345 0002             		move.w	#$345,2(a0)
0001A814 117C 0004 0001             		move.b	#4,1(a0)
0001A81A 117C 0005 0018             		move.b	#5,$18(a0)
0001A820 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A826 117C 0008 0019             		move.b	#8,$19(a0)
0001A82C 5428 0024                  		addq.b	#2,$24(a0)
0001A830 4A28 0028                  		tst.b	$28(a0)
0001A834 6600                       		bne.s	loc_1870A
0001A836 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A83C 5428 0024                  		addq.b	#2,$24(a0)
0001A840 6000 0000                  		bra.w	loc_18886
0001A844                            ; ===========================================================================
0001A844                            
0001A844                            loc_1870A:
0001A844 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A84A 303C 00AE                  		move.w	#$AE,d0
0001A84E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava sound
0001A854                            
0001A854                            Obj74_Action:				; XREF: Obj74_Index
0001A854 7000                       		moveq	#0,d0
0001A856 1028 0025                  		move.b	$25(a0),d0
0001A85A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A85E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A862 4EB9 0000 F16C             		jsr	SpeedToPos
0001A868 43F9 0001 005E             		lea	(Ani_obj14).l,a1
0001A86E 4EB9 0000 C138             		jsr	AnimateSprite
0001A874 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A87A 6200                       		bhi.s	Obj74_Delete
0001A87C 4E75                       		rts	
0001A87E                            ; ===========================================================================
0001A87E                            
0001A87E                            Obj74_Delete:
0001A87E 4EF9 0000 F1C2             		jmp	DeleteObject
0001A884                            ; ===========================================================================
0001A884 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A886 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A888 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A88A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            Obj74_Drop:				; XREF: Obj74_Index2
0001A88C 08E8 0001 0022             		bset	#1,$22(a0)
0001A892 5328 0029                  		subq.b	#1,$29(a0)
0001A896 6A00                       		bpl.s	locret_18780
0001A898 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A89E 4228 0028                  		clr.b	$28(a0)
0001A8A2 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A8A8 08A8 0001 0022             		bclr	#1,$22(a0)
0001A8AE 6100 C672                  		bsr.w	ObjHitFloor
0001A8B2 4A41                       		tst.w	d1
0001A8B4 6A00                       		bpl.s	locret_18780
0001A8B6 5428 0025                  		addq.b	#2,$25(a0)
0001A8BA                            
0001A8BA                            locret_18780:
0001A8BA 4E75                       		rts	
0001A8BC                            ; ===========================================================================
0001A8BC                            
0001A8BC                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A8BC 5568 000C                  		subq.w	#2,$C(a0)
0001A8C0 08E8 0007 0002             		bset	#7,2(a0)
0001A8C6 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A8CC 4268 0012                  		clr.w	$12(a0)
0001A8D0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A8D6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A8DC 117C 0003 0029             		move.b	#3,$29(a0)
0001A8E2 4EB9 0000 F630             		jsr	SingleObjLoad2
0001A8E8 6600                       		bne.s	loc_187CA
0001A8EA 47D1                       		lea	(a1),a3
0001A8EC 45D0                       		lea	(a0),a2
0001A8EE 7003                       		moveq	#3,d0
0001A8F0                            
0001A8F0                            Obj74_Loop:
0001A8F0 26DA                       		move.l	(a2)+,(a3)+
0001A8F2 26DA                       		move.l	(a2)+,(a3)+
0001A8F4 26DA                       		move.l	(a2)+,(a3)+
0001A8F6 26DA                       		move.l	(a2)+,(a3)+
0001A8F8 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A8FC                            
0001A8FC 4469 0010                  		neg.w	$10(a1)
0001A900 5429 0025                  		addq.b	#2,$25(a1)
0001A904                            
0001A904                            loc_187CA:
0001A904 5428 0025                  		addq.b	#2,$25(a0)
0001A908 4E75                       		rts	
0001A90A                            
0001A90A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A90A                            
0001A90A                            
0001A90A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A90A 4EB9 0000 F630             		jsr	SingleObjLoad2
0001A910 6600                       		bne.s	locret_187EE
0001A912 3368 0008 0008             		move.w	8(a0),8(a1)
0001A918 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A91E 12BC 0074                  		move.b	#$74,(a1)
0001A922 337C 0067 0028             		move.w	#$67,$28(a1)
0001A928                            
0001A928                            locret_187EE:
0001A928 4E75                       		rts	
0001A92A                            ; End of function Obj74_Duplicate2
0001A92A                            
0001A92A                            ; ===========================================================================
0001A92A                            
0001A92A                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A92A 6100 C5F6                  		bsr.w	ObjHitFloor
0001A92E 4A41                       		tst.w	d1
0001A930 6A00                       		bpl.s	loc_18826
0001A932 3028 0008                  		move.w	8(a0),d0
0001A936 0C40 1940                  		cmpi.w	#$1940,d0
0001A93A 6E00                       		bgt.s	loc_1882C
0001A93C 3228 0030                  		move.w	$30(a0),d1
0001A940 B240                       		cmp.w	d0,d1
0001A942 6700                       		beq.s	loc_1881E
0001A944 0240 0010                  		andi.w	#$10,d0
0001A948 0241 0010                  		andi.w	#$10,d1
0001A94C B240                       		cmp.w	d0,d1
0001A94E 6700                       		beq.s	loc_1881E
0001A950 61B8                       		bsr.s	Obj74_Duplicate2
0001A952 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A958                            
0001A958                            loc_1881E:
0001A958 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A95E 4E75                       		rts	
0001A960                            ; ===========================================================================
0001A960                            
0001A960                            loc_18826:
0001A960 5428 0025                  		addq.b	#2,$25(a0)
0001A964 4E75                       		rts	
0001A966                            ; ===========================================================================
0001A966                            
0001A966                            loc_1882C:
0001A966 5428 0024                  		addq.b	#2,$24(a0)
0001A96A 4E75                       		rts	
0001A96C                            ; ===========================================================================
0001A96C                            
0001A96C                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A96C 08A8 0001 0022             		bclr	#1,$22(a0)
0001A972 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A978 3028 0008                  		move.w	8(a0),d0
0001A97C 9068 0032                  		sub.w	$32(a0),d0
0001A980 6A00                       		bpl.s	loc_1884A
0001A982 4440                       		neg.w	d0
0001A984                            
0001A984                            loc_1884A:
0001A984 0C40 0012                  		cmpi.w	#$12,d0
0001A988 6600                       		bne.s	loc_18856
0001A98A 08A8 0007 0002             		bclr	#7,2(a0)
0001A990                            
0001A990                            loc_18856:
0001A990 6100 C590                  		bsr.w	ObjHitFloor
0001A994 4A41                       		tst.w	d1
0001A996 6A00                       		bpl.s	locret_1887E
0001A998 5328 0029                  		subq.b	#1,$29(a0)
0001A99C 6700                       		beq.s	Obj74_Delete2
0001A99E 4268 0012                  		clr.w	$12(a0)
0001A9A2 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A9A8 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A9AE 08E8 0007 0002             		bset	#7,2(a0)
0001A9B4 5528 0025                  		subq.b	#2,$25(a0)
0001A9B8                            
0001A9B8                            locret_1887E:
0001A9B8 4E75                       		rts	
0001A9BA                            ; ===========================================================================
0001A9BA                            
0001A9BA                            Obj74_Delete2:
0001A9BA 4EF9 0000 F1C2             		jmp	DeleteObject
0001A9C0                            ; ===========================================================================
0001A9C0                            
0001A9C0                            loc_18886:				; XREF: Obj74_Index
0001A9C0 08E8 0007 0002             		bset	#7,2(a0)
0001A9C6 5328 0029                  		subq.b	#1,$29(a0)
0001A9CA 6600                       		bne.s	Obj74_Animate
0001A9CC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A9D2 5968 000C                  		subq.w	#4,$C(a0)
0001A9D6 4228 0020                  		clr.b	$20(a0)
0001A9DA                            
0001A9DA                            Obj74_Animate:
0001A9DA 43F9 0001 005E             		lea	(Ani_obj14).l,a1
0001A9E0 4EF9 0000 C138             		jmp	AnimateSprite
0001A9E6                            ; ===========================================================================
0001A9E6                            
0001A9E6                            Obj74_Delete3:				; XREF: Obj74_Index
0001A9E6 4EF9 0000 F1C2             		jmp	DeleteObject
0001A9EC                            ; ===========================================================================
0001A9EC                            
0001A9EC                            Obj7A_Delete:
0001A9EC 4EF9 0000 F1C2             		jmp	DeleteObject
0001A9F2                            ; ===========================================================================
0001A9F2                            ; ---------------------------------------------------------------------------
0001A9F2                            ; Object 7A - Eggman (SLZ)
0001A9F2                            ; ---------------------------------------------------------------------------
0001A9F2                            
0001A9F2                            Obj7A:					; XREF: Obj_Index
0001A9F2 7000                       		moveq	#0,d0
0001A9F4 1028 0024                  		move.b	$24(a0),d0
0001A9F8 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A9FC 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001AA00                            ; ===========================================================================
0001AA00 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001AA02 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001AA04 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001AA06 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001AA08 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001AA0A                            
0001AA0A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001AA0D 0401 04                    		dc.b 4,	1, 4
0001AA10 0607 04                    		dc.b 6,	7, 4
0001AA13 0800 03                    		dc.b 8,	0, 3
0001AA16                            ; ===========================================================================
0001AA16                            
0001AA16                            Obj7A_Main:				; XREF: Obj7A_Index
0001AA16 317C 2188 0008             		move.w	#$2188,8(a0)
0001AA1C 317C 0228 000C             		move.w	#$228,$C(a0)
0001AA22 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA28 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AA2E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA34 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AA3A 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001AA3E 2248                       		movea.l	a0,a1
0001AA40 7203                       		moveq	#3,d1
0001AA42 6000                       		bra.s	Obj7A_LoadBoss
0001AA44                            ; ===========================================================================
0001AA44                            
0001AA44                            Obj7A_Loop:
0001AA44 4EB9 0000 F630             		jsr	SingleObjLoad2
0001AA4A 6600                       		bne.s	loc_1895C
0001AA4C 12BC 007A                  		move.b	#$7A,0(a1)
0001AA50 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA56 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA5C                            
0001AA5C                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001AA5C 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA62 4229 0025                  		clr.b	$25(a1)
0001AA66 135A 0024                  		move.b	(a2)+,$24(a1)
0001AA6A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AA6E 135A 0018                  		move.b	(a2)+,$18(a1)
0001AA72 237C 0001 9E58 0004        		move.l	#Map_Eggman,4(a1)
0001AA7A 337C 0400 0002             		move.w	#$400,2(a1)
0001AA80 137C 0004 0001             		move.b	#4,1(a1)
0001AA86 137C 0020 0019             		move.b	#$20,$19(a1)
0001AA8C 2348 0034                  		move.l	a0,$34(a1)
0001AA90 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001AA94                            
0001AA94                            loc_1895C:
0001AA94 43F8 D040                  		lea	($FFFFD040).w,a1
0001AA98 45E8 002A                  		lea	$2A(a0),a2
0001AA9C 705E                       		moveq	#$5E,d0
0001AA9E 723E                       		moveq	#$3E,d1
0001AAA0                            
0001AAA0                            loc_18968:
0001AAA0 B011                       		cmp.b	(a1),d0
0001AAA2 6600                       		bne.s	loc_18974
0001AAA4 4A29 0028                  		tst.b	$28(a1)
0001AAA8 6700                       		beq.s	loc_18974
0001AAAA 34C9                       		move.w	a1,(a2)+
0001AAAC                            
0001AAAC                            loc_18974:
0001AAAC D2FC 0040                  		adda.w	#$40,a1
0001AAB0 51C9 FFEE                  		dbf	d1,loc_18968
0001AAB4                            
0001AAB4                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001AAB4 7000                       		moveq	#0,d0
0001AAB6 1028 0025                  		move.b	$25(a0),d0
0001AABA 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001AABE 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001AAC2 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001AAC8 4EB9 0000 C138             		jsr	AnimateSprite
0001AACE 7003                       		moveq	#3,d0
0001AAD0 C028 0022                  		and.b	$22(a0),d0
0001AAD4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AADA 8128 0001                  		or.b	d0,1(a0)
0001AADE 4EF9 0000 F186             		jmp	DisplaySprite
0001AAE4                            ; ===========================================================================
0001AAE4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AAE6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AAE8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AAEA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AAEC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AAEE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AAF0                            ; ===========================================================================
0001AAF0                            
0001AAF0                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AAF0 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AAF6 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AAFC 6400                       		bcc.s	loc_189CA
0001AAFE 5428 0025                  		addq.b	#2,$25(a0)
0001AB02                            
0001AB02                            loc_189CA:
0001AB02 6100 EE98                  		bsr.w	BossMove
0001AB06 1028 003F                  		move.b	$3F(a0),d0
0001AB0A 5428 003F                  		addq.b	#2,$3F(a0)
0001AB0E 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001AB14 EC40                       		asr.w	#6,d0
0001AB16 D068 0038                  		add.w	$38(a0),d0
0001AB1A 3140 000C                  		move.w	d0,$C(a0)
0001AB1E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB24 6000                       		bra.s	loc_189FE
0001AB26                            ; ===========================================================================
0001AB26                            
0001AB26                            loc_189EE:
0001AB26 6100 EE74                  		bsr.w	BossMove
0001AB2A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AB30 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB36                            
0001AB36                            loc_189FE:
0001AB36 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AB3C 6400                       		bcc.s	locret_18A44
0001AB3E 4A28 0022                  		tst.b	$22(a0)
0001AB42 6B00                       		bmi.s	loc_18A46
0001AB44 4A28 0020                  		tst.b	$20(a0)
0001AB48 6600                       		bne.s	locret_18A44
0001AB4A 4A28 003E                  		tst.b	$3E(a0)
0001AB4E 6600                       		bne.s	loc_18A28
0001AB50 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AB56 303C 00AC                  		move.w	#$AC,d0
0001AB5A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB60                            
0001AB60                            loc_18A28:
0001AB60 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AB64 7000                       		moveq	#0,d0
0001AB66 4A51                       		tst.w	(a1)
0001AB68 6600                       		bne.s	loc_18A36
0001AB6A 303C 0EEE                  		move.w	#$EEE,d0
0001AB6E                            
0001AB6E                            loc_18A36:
0001AB6E 3280                       		move.w	d0,(a1)
0001AB70 5328 003E                  		subq.b	#1,$3E(a0)
0001AB74 6600                       		bne.s	locret_18A44
0001AB76 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB7C                            
0001AB7C                            locret_18A44:
0001AB7C 4E75                       		rts	
0001AB7E                            ; ===========================================================================
0001AB7E                            
0001AB7E                            loc_18A46:
0001AB7E 7064                       		moveq	#100,d0
0001AB80 6100 0000                  		bsr.w	AddPoints
0001AB84 117C 0006 0025             		move.b	#6,$25(a0)
0001AB8A 117C 0078 003C             		move.b	#$78,$3C(a0)
0001AB90 4268 0010                  		clr.w	$10(a0)
0001AB94 4E75                       		rts	
0001AB96                            ; ===========================================================================
0001AB96                            
0001AB96                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001AB96 3028 0030                  		move.w	$30(a0),d0
0001AB9A 317C 0200 0010             		move.w	#$200,$10(a0)
0001ABA0 0828 0000 0022             		btst	#0,$22(a0)
0001ABA6 6600                       		bne.s	loc_18A7C
0001ABA8 4468 0010                  		neg.w	$10(a0)
0001ABAC 0C40 2008                  		cmpi.w	#$2008,d0
0001ABB0 6E00                       		bgt.s	loc_18A88
0001ABB2 6000                       		bra.s	loc_18A82
0001ABB4                            ; ===========================================================================
0001ABB4                            
0001ABB4                            loc_18A7C:
0001ABB4 0C40 2138                  		cmpi.w	#$2138,d0
0001ABB8 6D00                       		blt.s	loc_18A88
0001ABBA                            
0001ABBA                            loc_18A82:
0001ABBA 0868 0000 0022             		bchg	#0,$22(a0)
0001ABC0                            
0001ABC0                            loc_18A88:
0001ABC0 3028 0008                  		move.w	8(a0),d0
0001ABC4 72FF                       		moveq	#-1,d1
0001ABC6 7402                       		moveq	#2,d2
0001ABC8 45E8 002A                  		lea	$2A(a0),a2
0001ABCC 7828                       		moveq	#$28,d4
0001ABCE 4A68 0010                  		tst.w	$10(a0)
0001ABD2 6A00                       		bpl.s	loc_18A9E
0001ABD4 4444                       		neg.w	d4
0001ABD6                            
0001ABD6                            loc_18A9E:
0001ABD6 321A                       		move.w	(a2)+,d1
0001ABD8 2641                       		movea.l	d1,a3
0001ABDA 082B 0003 0022             		btst	#3,$22(a3)
0001ABE0 6600                       		bne.s	loc_18AB4
0001ABE2 362B 0008                  		move.w	8(a3),d3
0001ABE6 D644                       		add.w	d4,d3
0001ABE8 9640                       		sub.w	d0,d3
0001ABEA 6700                       		beq.s	loc_18AC0
0001ABEC                            
0001ABEC                            loc_18AB4:
0001ABEC 51CA FFE8                  		dbf	d2,loc_18A9E
0001ABF0                            
0001ABF0 1142 0028                  		move.b	d2,$28(a0)
0001ABF4 6000 FF0C                  		bra.w	loc_189CA
0001ABF8                            ; ===========================================================================
0001ABF8                            
0001ABF8                            loc_18AC0:
0001ABF8 1142 0028                  		move.b	d2,$28(a0)
0001ABFC 5428 0025                  		addq.b	#2,$25(a0)
0001AC00 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AC06 6000 FEFA                  		bra.w	loc_189CA
0001AC0A                            ; ===========================================================================
0001AC0A                            
0001AC0A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AC0A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AC10 6600                       		bne.s	loc_18B36
0001AC12 70FF                       		moveq	#-1,d0
0001AC14 1028 0028                  		move.b	$28(a0),d0
0001AC18 4880                       		ext.w	d0
0001AC1A 6B00                       		bmi.s	loc_18B40
0001AC1C 5540                       		subq.w	#2,d0
0001AC1E 4440                       		neg.w	d0
0001AC20 D040                       		add.w	d0,d0
0001AC22 43E8 002A                  		lea	$2A(a0),a1
0001AC26 3031 0000                  		move.w	(a1,d0.w),d0
0001AC2A 2440                       		movea.l	d0,a2
0001AC2C 43F8 D040                  		lea	($FFFFD040).w,a1
0001AC30 723E                       		moveq	#$3E,d1
0001AC32                            
0001AC32                            loc_18AFA:
0001AC32 B0A9 003C                  		cmp.l	$3C(a1),d0
0001AC36 6700                       		beq.s	loc_18B40
0001AC38 D2FC 0040                  		adda.w	#$40,a1
0001AC3C 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AC40                            
0001AC40 2F08                       		move.l	a0,-(sp)
0001AC42 41D2                       		lea	(a2),a0
0001AC44 4EB9 0000 F630             		jsr	SingleObjLoad2
0001AC4A 205F                       		movea.l	(sp)+,a0
0001AC4C 6600                       		bne.s	loc_18B40
0001AC4E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AC52 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC58 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AC5E 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AC64 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AC6A 234A 003C                  		move.l	a2,$3C(a1)
0001AC6E                            
0001AC6E                            loc_18B36:
0001AC6E 5328 003C                  		subq.b	#1,$3C(a0)
0001AC72 6700                       		beq.s	loc_18B40
0001AC74 6000 FEC0                  		bra.w	loc_189FE
0001AC78                            ; ===========================================================================
0001AC78                            
0001AC78                            loc_18B40:
0001AC78 5528 0025                  		subq.b	#2,$25(a0)
0001AC7C 6000 FE84                  		bra.w	loc_189CA
0001AC80                            ; ===========================================================================
0001AC80                            
0001AC80                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AC80 5328 003C                  		subq.b	#1,$3C(a0)
0001AC84 6B00                       		bmi.s	loc_18B52
0001AC86 6000 ECD2                  		bra.w	BossDefeated
0001AC8A                            ; ===========================================================================
0001AC8A                            
0001AC8A                            loc_18B52:
0001AC8A 5428 0025                  		addq.b	#2,$25(a0)
0001AC8E 4268 0012                  		clr.w	$12(a0)
0001AC92 08E8 0000 0022             		bset	#0,$22(a0)
0001AC98 08A8 0007 0022             		bclr	#7,$22(a0)
0001AC9E 4268 0010                  		clr.w	$10(a0)
0001ACA2 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001ACA8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001ACAC 6600                       		bne.s	loc_18B7C
0001ACAE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001ACB4                            
0001ACB4                            loc_18B7C:
0001ACB4 6000 FE80                  		bra.w	loc_189FE
0001ACB8                            ; ===========================================================================
0001ACB8                            
0001ACB8                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001ACB8 5228 003C                  		addq.b	#1,$3C(a0)
0001ACBC 6700                       		beq.s	loc_18B90
0001ACBE 6A00                       		bpl.s	loc_18B96
0001ACC0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001ACC6 6000                       		bra.s	loc_18BC2
0001ACC8                            ; ===========================================================================
0001ACC8                            
0001ACC8                            loc_18B90:
0001ACC8 4268 0012                  		clr.w	$12(a0)
0001ACCC 6000                       		bra.s	loc_18BC2
0001ACCE                            ; ===========================================================================
0001ACCE                            
0001ACCE                            loc_18B96:
0001ACCE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001ACD4 6500                       		bcs.s	loc_18BAE
0001ACD6 6700                       		beq.s	loc_18BB4
0001ACD8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001ACDE 6500                       		bcs.s	loc_18BC2
0001ACE0 5428 0025                  		addq.b	#2,$25(a0)
0001ACE4 6000                       		bra.s	loc_18BC2
0001ACE6                            ; ===========================================================================
0001ACE6                            
0001ACE6                            loc_18BAE:
0001ACE6 5168 0012                  		subq.w	#8,$12(a0)
0001ACEA 6000                       		bra.s	loc_18BC2
0001ACEC                            ; ===========================================================================
0001ACEC                            
0001ACEC                            loc_18BB4:
0001ACEC 4268 0012                  		clr.w	$12(a0)
0001ACF0 6100 EEE2                  		bsr.w	BossEnd
0001ACF4                            
0001ACF4                            loc_18BC2:
0001ACF4 6000 FE30                  		bra.w	loc_189EE
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001ACF8 317C 0400 0010             		move.w	#$400,$10(a0)
0001ACFE 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AD04 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AD0A 6400                       		bcc.s	loc_18BE0
0001AD0C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AD10 6000                       		bra.s	loc_18BE8
0001AD12                            ; ===========================================================================
0001AD12                            
0001AD12                            loc_18BE0:
0001AD12 4A28 0001                  		tst.b	1(a0)
0001AD16 6A00 FCD4                  		bpl.w	Obj7A_Delete
0001AD1A                            
0001AD1A                            loc_18BE8:
0001AD1A 6100 EC80                  		bsr.w	BossMove
0001AD1E 6000 FDE2                  		bra.w	loc_189CA
0001AD22                            ; ===========================================================================
0001AD22                            
0001AD22                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AD22 7000                       		moveq	#0,d0
0001AD24 7201                       		moveq	#1,d1
0001AD26 2268 0034                  		movea.l	$34(a0),a1
0001AD2A 1029 0025                  		move.b	$25(a1),d0
0001AD2E 0C00 0006                  		cmpi.b	#6,d0
0001AD32 6B00                       		bmi.s	loc_18C06
0001AD34 720A                       		moveq	#$A,d1
0001AD36 6000                       		bra.s	loc_18C1A
0001AD38                            ; ===========================================================================
0001AD38                            
0001AD38                            loc_18C06:
0001AD38 4A29 0020                  		tst.b	$20(a1)
0001AD3C 6600                       		bne.s	loc_18C10
0001AD3E 7205                       		moveq	#5,d1
0001AD40 6000                       		bra.s	loc_18C1A
0001AD42                            ; ===========================================================================
0001AD42                            
0001AD42                            loc_18C10:
0001AD42 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AD48 6500                       		bcs.s	loc_18C1A
0001AD4A 7204                       		moveq	#4,d1
0001AD4C                            
0001AD4C                            loc_18C1A:
0001AD4C 1141 001C                  		move.b	d1,$1C(a0)
0001AD50 0C00 000A                  		cmpi.b	#$A,d0
0001AD54 6600                       		bne.s	loc_18C32
0001AD56 117C 0006 001C             		move.b	#6,$1C(a0)
0001AD5C 4A28 0001                  		tst.b	1(a0)
0001AD60 6A00 FC8A                  		bpl.w	Obj7A_Delete
0001AD64                            
0001AD64                            loc_18C32:
0001AD64 6000                       		bra.s	loc_18C6C
0001AD66                            ; ===========================================================================
0001AD66                            
0001AD66                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AD66 117C 0008 001C             		move.b	#8,$1C(a0)
0001AD6C 2268 0034                  		movea.l	$34(a0),a1
0001AD70 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AD76 6600                       		bne.s	loc_18C56
0001AD78 4A28 0001                  		tst.b	1(a0)
0001AD7C 6A00 FC6E                  		bpl.w	Obj7A_Delete
0001AD80 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD86 6000                       		bra.s	loc_18C6C
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88                            loc_18C56:
0001AD88 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001AD8E 6E00                       		bgt.s	loc_18C6C
0001AD90 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AD96 6D00                       		blt.s	loc_18C6C
0001AD98 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD9E                            
0001AD9E                            loc_18C6C:
0001AD9E 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001ADA4 4EB9 0000 C138             		jsr	AnimateSprite
0001ADAA                            
0001ADAA                            loc_18C78:
0001ADAA 2268 0034                  		movea.l	$34(a0),a1
0001ADAE 3169 0008 0008             		move.w	8(a1),8(a0)
0001ADB4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ADBA 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ADC0 7003                       		moveq	#3,d0
0001ADC2 C028 0022                  		and.b	$22(a0),d0
0001ADC6 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ADCC 8128 0001                  		or.b	d0,1(a0)
0001ADD0 4EF9 0000 F186             		jmp	DisplaySprite
0001ADD6                            ; ===========================================================================
0001ADD6                            
0001ADD6                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001ADD6 2268 0034                  		movea.l	$34(a0),a1
0001ADDA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ADE0 6600                       		bne.s	loc_18CB8
0001ADE2 4A28 0001                  		tst.b	1(a0)
0001ADE6 6A00 FC04                  		bpl.w	Obj7A_Delete
0001ADEA                            
0001ADEA                            loc_18CB8:
0001ADEA 217C 0001 9F20 0004        		move.l	#Map_BossItems,4(a0)
0001ADF2 317C 246C 0002             		move.w	#$246C,2(a0)
0001ADF8 117C 0003 001A             		move.b	#3,$1A(a0)
0001ADFE 60AA                       		bra.s	loc_18C78
0001AE00                            ; ===========================================================================
0001AE00                            ; ---------------------------------------------------------------------------
0001AE00                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AE00                            ; ---------------------------------------------------------------------------
0001AE00                            
0001AE00                            Obj7B:					; XREF: Obj_Index
0001AE00 7000                       		moveq	#0,d0
0001AE02 1028 0024                  		move.b	$24(a0),d0
0001AE06 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AE0A 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AE0E 3028 0030                  		move.w	$30(a0),d0
0001AE12 0240 FF80                  		andi.w	#$FF80,d0
0001AE16 3238 F700                  		move.w	($FFFFF700).w,d1
0001AE1A 0441 0080                  		subi.w	#$80,d1
0001AE1E 0241 FF80                  		andi.w	#$FF80,d1
0001AE22 9041                       		sub.w	d1,d0
0001AE24 6B00 FBC6                  		bmi.w	Obj7A_Delete
0001AE28 0C40 0280                  		cmpi.w	#$280,d0
0001AE2C 6200 FBBE                  		bhi.w	Obj7A_Delete
0001AE30 4EF9 0000 F186             		jmp	DisplaySprite
0001AE36                            ; ===========================================================================
0001AE36 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AE38 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AE3A 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AE3C 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AE3E 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AE40 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AE42                            ; ===========================================================================
0001AE42                            
0001AE42                            Obj7B_Main:				; XREF: Obj7B_Index
0001AE42 217C 0001 3576 0004        		move.l	#Map_obj5Ea,4(a0)
0001AE4A 317C 0518 0002             		move.w	#$518,2(a0)
0001AE50 117C 0001 001A             		move.b	#1,$1A(a0)
0001AE56 0028 0004 0001             		ori.b	#4,1(a0)
0001AE5C 117C 0004 0018             		move.b	#4,$18(a0)
0001AE62 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AE68 117C 000C 0019             		move.b	#$C,$19(a0)
0001AE6E 2268 003C                  		movea.l	$3C(a0),a1
0001AE72 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AE78 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AE7E 08E8 0000 0022             		bset	#0,$22(a0)
0001AE84 3028 0008                  		move.w	8(a0),d0
0001AE88 B069 0008                  		cmp.w	8(a1),d0
0001AE8C 6E00                       		bgt.s	loc_18D68
0001AE8E 08A8 0000 0022             		bclr	#0,$22(a0)
0001AE94 117C 0002 003A             		move.b	#2,$3A(a0)
0001AE9A                            
0001AE9A                            loc_18D68:
0001AE9A 5428 0024                  		addq.b	#2,$24(a0)
0001AE9E                            
0001AE9E                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AE9E 4EB9 0000 F14C             		jsr	ObjectFall
0001AEA4 2268 003C                  		movea.l	$3C(a0),a1
0001AEA8 45F9 0000 0000             		lea	(word_19018).l,a2
0001AEAE 7000                       		moveq	#0,d0
0001AEB0 1029 001A                  		move.b	$1A(a1),d0
0001AEB4 3228 0008                  		move.w	8(a0),d1
0001AEB8 9268 0030                  		sub.w	$30(a0),d1
0001AEBC 6400                       		bcc.s	loc_18D8E
0001AEBE 5440                       		addq.w	#2,d0
0001AEC0                            
0001AEC0                            loc_18D8E:
0001AEC0 D040                       		add.w	d0,d0
0001AEC2 3228 0034                  		move.w	$34(a0),d1
0001AEC6 D272 0000                  		add.w	(a2,d0.w),d1
0001AECA B268 000C                  		cmp.w	$C(a0),d1
0001AECE 6E00                       		bgt.s	locret_18DC4
0001AED0 2268 003C                  		movea.l	$3C(a0),a1
0001AED4 7202                       		moveq	#2,d1
0001AED6 0828 0000 0022             		btst	#0,$22(a0)
0001AEDC 6700                       		beq.s	loc_18DAE
0001AEDE 7200                       		moveq	#0,d1
0001AEE0                            
0001AEE0                            loc_18DAE:
0001AEE0 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AEE6 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AEEC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AEF2 6000 0000                  		bra.w	loc_18FA2
0001AEF6                            ; ===========================================================================
0001AEF6                            
0001AEF6                            locret_18DC4:
0001AEF6 4E75                       		rts	
0001AEF8                            ; ===========================================================================
0001AEF8                            
0001AEF8                            loc_18DC6:				; XREF: Obj7B_Index
0001AEF8 2268 003C                  		movea.l	$3C(a0),a1
0001AEFC 7000                       		moveq	#0,d0
0001AEFE 1028 003A                  		move.b	$3A(a0),d0
0001AF02 9029 003A                  		sub.b	$3A(a1),d0
0001AF06 6700                       		beq.s	loc_18E2A
0001AF08 6400                       		bcc.s	loc_18DDA
0001AF0A 4400                       		neg.b	d0
0001AF0C                            
0001AF0C                            loc_18DDA:
0001AF0C 323C F7E8                  		move.w	#-$818,d1
0001AF10 343C FEEC                  		move.w	#-$114,d2
0001AF14 0C00 0001                  		cmpi.b	#1,d0
0001AF18 6700                       		beq.s	loc_18E00
0001AF1A 323C F6A0                  		move.w	#-$960,d1
0001AF1E 343C FF0C                  		move.w	#-$F4,d2
0001AF22 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AF28 6D00                       		blt.s	loc_18E00
0001AF2A 323C F5E0                  		move.w	#-$A20,d1
0001AF2E 343C FF80                  		move.w	#-$80,d2
0001AF32                            
0001AF32                            loc_18E00:
0001AF32 3141 0012                  		move.w	d1,$12(a0)
0001AF36 3142 0010                  		move.w	d2,$10(a0)
0001AF3A 3028 0008                  		move.w	8(a0),d0
0001AF3E 9068 0030                  		sub.w	$30(a0),d0
0001AF42 6400                       		bcc.s	loc_18E16
0001AF44 4468 0010                  		neg.w	$10(a0)
0001AF48                            
0001AF48                            loc_18E16:
0001AF48 117C 0001 001A             		move.b	#1,$1A(a0)
0001AF4E 317C 0020 0028             		move.w	#$20,$28(a0)
0001AF54 5428 0024                  		addq.b	#2,$24(a0)
0001AF58 6000 0000                  		bra.w	loc_18EAA
0001AF5C                            ; ===========================================================================
0001AF5C                            
0001AF5C                            loc_18E2A:				; XREF: loc_18DC6
0001AF5C 45F9 0000 0000             		lea	(word_19018).l,a2
0001AF62 7000                       		moveq	#0,d0
0001AF64 1029 001A                  		move.b	$1A(a1),d0
0001AF68 343C 0028                  		move.w	#$28,d2
0001AF6C 3228 0008                  		move.w	8(a0),d1
0001AF70 9268 0030                  		sub.w	$30(a0),d1
0001AF74 6400                       		bcc.s	loc_18E48
0001AF76 4442                       		neg.w	d2
0001AF78 5440                       		addq.w	#2,d0
0001AF7A                            
0001AF7A                            loc_18E48:
0001AF7A D040                       		add.w	d0,d0
0001AF7C 3228 0034                  		move.w	$34(a0),d1
0001AF80 D272 0000                  		add.w	(a2,d0.w),d1
0001AF84 3141 000C                  		move.w	d1,$C(a0)
0001AF88 D468 0030                  		add.w	$30(a0),d2
0001AF8C 3142 0008                  		move.w	d2,8(a0)
0001AF90 4268 000E                  		clr.w	$E(a0)
0001AF94 4268 000A                  		clr.w	$A(a0)
0001AF98 5368 0028                  		subq.w	#1,$28(a0)
0001AF9C 6600                       		bne.s	loc_18E7A
0001AF9E 317C 0020 0028             		move.w	#$20,$28(a0)
0001AFA4 117C 0008 0024             		move.b	#8,$24(a0)
0001AFAA 4E75                       		rts	
0001AFAC                            ; ===========================================================================
0001AFAC                            
0001AFAC                            loc_18E7A:
0001AFAC 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AFB2 6600                       		bne.s	loc_18E88
0001AFB4 117C 0005 001F             		move.b	#5,$1F(a0)
0001AFBA                            
0001AFBA                            loc_18E88:
0001AFBA 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AFC0 6600                       		bne.s	loc_18E96
0001AFC2 117C 0002 001F             		move.b	#2,$1F(a0)
0001AFC8                            
0001AFC8                            loc_18E96:
0001AFC8 5328 001E                  		subq.b	#1,$1E(a0)
0001AFCC 6E00                       		bgt.s	locret_18EA8
0001AFCE 0868 0000 001A             		bchg	#0,$1A(a0)
0001AFD4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AFDA                            
0001AFDA                            locret_18EA8:
0001AFDA 4E75                       		rts	
0001AFDC                            ; ===========================================================================
0001AFDC                            
0001AFDC                            loc_18EAA:				; XREF: Obj7B_Index
0001AFDC 43F8 D040                  		lea	($FFFFD040).w,a1
0001AFE0 707A                       		moveq	#$7A,d0
0001AFE2 7240                       		moveq	#$40,d1
0001AFE4 743E                       		moveq	#$3E,d2
0001AFE6                            
0001AFE6                            loc_18EB4:
0001AFE6 B011                       		cmp.b	(a1),d0
0001AFE8 6700                       		beq.s	loc_18EC0
0001AFEA D2C1                       		adda.w	d1,a1
0001AFEC 51CA FFF8                  		dbf	d2,loc_18EB4
0001AFF0                            
0001AFF0 6000                       		bra.s	loc_18F38
0001AFF2                            ; ===========================================================================
0001AFF2                            
0001AFF2                            loc_18EC0:
0001AFF2 3029 0008                  		move.w	8(a1),d0
0001AFF6 3229 000C                  		move.w	$C(a1),d1
0001AFFA 3428 0008                  		move.w	8(a0),d2
0001AFFE 3628 000C                  		move.w	$C(a0),d3
0001B002 45FA 0000                  		lea	byte_19022(pc),a2
0001B006 47FA 0000                  		lea	byte_19026(pc),a3
0001B00A 181A                       		move.b	(a2)+,d4
0001B00C 4884                       		ext.w	d4
0001B00E D044                       		add.w	d4,d0
0001B010 181B                       		move.b	(a3)+,d4
0001B012 4884                       		ext.w	d4
0001B014 D444                       		add.w	d4,d2
0001B016 B440                       		cmp.w	d0,d2
0001B018 6500                       		bcs.s	loc_18F38
0001B01A 181A                       		move.b	(a2)+,d4
0001B01C 4884                       		ext.w	d4
0001B01E D044                       		add.w	d4,d0
0001B020 181B                       		move.b	(a3)+,d4
0001B022 4884                       		ext.w	d4
0001B024 D444                       		add.w	d4,d2
0001B026 B042                       		cmp.w	d2,d0
0001B028 6500                       		bcs.s	loc_18F38
0001B02A 181A                       		move.b	(a2)+,d4
0001B02C 4884                       		ext.w	d4
0001B02E D244                       		add.w	d4,d1
0001B030 181B                       		move.b	(a3)+,d4
0001B032 4884                       		ext.w	d4
0001B034 D644                       		add.w	d4,d3
0001B036 B641                       		cmp.w	d1,d3
0001B038 6500                       		bcs.s	loc_18F38
0001B03A 181A                       		move.b	(a2)+,d4
0001B03C 4884                       		ext.w	d4
0001B03E D244                       		add.w	d4,d1
0001B040 181B                       		move.b	(a3)+,d4
0001B042 4884                       		ext.w	d4
0001B044 D644                       		add.w	d4,d3
0001B046 B243                       		cmp.w	d3,d1
0001B048 6500                       		bcs.s	loc_18F38
0001B04A 5428 0024                  		addq.b	#2,$24(a0)
0001B04E 4268 0028                  		clr.w	$28(a0)
0001B052 4229 0020                  		clr.b	$20(a1)
0001B056 5329 0021                  		subq.b	#1,$21(a1)
0001B05A 6600                       		bne.s	loc_18F38
0001B05C 08E9 0007 0022             		bset	#7,$22(a1)
0001B062 4268 0010                  		clr.w	$10(a0)
0001B066 4268 0012                  		clr.w	$12(a0)
0001B06A                            
0001B06A                            loc_18F38:
0001B06A 4A68 0012                  		tst.w	$12(a0)
0001B06E 6A00                       		bpl.s	loc_18F5C
0001B070 4EB9 0000 F14C             		jsr	ObjectFall
0001B076 3028 0034                  		move.w	$34(a0),d0
0001B07A 0440 002F                  		subi.w	#$2F,d0
0001B07E B068 000C                  		cmp.w	$C(a0),d0
0001B082 6E00                       		bgt.s	loc_18F58
0001B084 4EB9 0000 F14C             		jsr	ObjectFall
0001B08A                            
0001B08A                            loc_18F58:
0001B08A 6000 FF20                  		bra.w	loc_18E7A
0001B08E                            ; ===========================================================================
0001B08E                            
0001B08E                            loc_18F5C:
0001B08E 4EB9 0000 F14C             		jsr	ObjectFall
0001B094 2268 003C                  		movea.l	$3C(a0),a1
0001B098 45F9 0000 0000             		lea	(word_19018).l,a2
0001B09E 7000                       		moveq	#0,d0
0001B0A0 1029 001A                  		move.b	$1A(a1),d0
0001B0A4 3228 0008                  		move.w	8(a0),d1
0001B0A8 9268 0030                  		sub.w	$30(a0),d1
0001B0AC 6400                       		bcc.s	loc_18F7E
0001B0AE 5440                       		addq.w	#2,d0
0001B0B0                            
0001B0B0                            loc_18F7E:
0001B0B0 D040                       		add.w	d0,d0
0001B0B2 3228 0034                  		move.w	$34(a0),d1
0001B0B6 D272 0000                  		add.w	(a2,d0.w),d1
0001B0BA B268 000C                  		cmp.w	$C(a0),d1
0001B0BE 6ECA                       		bgt.s	loc_18F58
0001B0C0 2268 003C                  		movea.l	$3C(a0),a1
0001B0C4 7202                       		moveq	#2,d1
0001B0C6 4A68 0010                  		tst.w	$10(a0)
0001B0CA 6B00                       		bmi.s	loc_18F9C
0001B0CC 7200                       		moveq	#0,d1
0001B0CE                            
0001B0CE                            loc_18F9C:
0001B0CE 317C 0000 0028             		move.w	#0,$28(a0)
0001B0D4                            
0001B0D4                            loc_18FA2:
0001B0D4 1341 003A                  		move.b	d1,$3A(a1)
0001B0D8 1141 003A                  		move.b	d1,$3A(a0)
0001B0DC B229 001A                  		cmp.b	$1A(a1),d1
0001B0E0 6700                       		beq.s	loc_19008
0001B0E2 08A9 0003 0022             		bclr	#3,$22(a1)
0001B0E8 6700                       		beq.s	loc_19008
0001B0EA 4229 0025                  		clr.b	$25(a1)
0001B0EE 137C 0002 0024             		move.b	#2,$24(a1)
0001B0F4 45F8 D000                  		lea	($FFFFD000).w,a2
0001B0F8 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B0FE 446A 0012                  		neg.w	$12(a2)
0001B102 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B108 6600                       		bne.s	loc_18FDC
0001B10A E0EA 0012                  		asr	$12(a2)
0001B10E                            
0001B10E                            loc_18FDC:
0001B10E 08EA 0001 0022             		bset	#1,$22(a2)
0001B114 08AA 0003 0022             		bclr	#3,$22(a2)
0001B11A 422A 003C                  		clr.b	$3C(a2)
0001B11E 2F08                       		move.l	a0,-(sp)
0001B120 41D2                       		lea	(a2),a0
0001B122                            	;	jsr	Obj01_ChkRoll
0001B122 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001B128 205F                       		movea.l	(sp)+,a0
0001B12A 157C 0002 0024             		move.b	#2,$24(a2)
0001B130 303C 00CC                  		move.w	#$CC,d0
0001B134 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B13A                            
0001B13A                            loc_19008:
0001B13A 4268 0010                  		clr.w	$10(a0)
0001B13E 4268 0012                  		clr.w	$12(a0)
0001B142 5428 0024                  		addq.b	#2,$24(a0)
0001B146 6000 FE64                  		bra.w	loc_18E7A
0001B14A                            ; ===========================================================================
0001B14A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B154                            		even
0001B154 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B158                            		even
0001B158 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B15C                            		even
0001B15C                            ; ===========================================================================
0001B15C                            
0001B15C                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B15C 10BC 003F                  		move.b	#$3F,(a0)
0001B160 4228 0024                  		clr.b	$24(a0)
0001B164 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B16A 6700                       		beq.s	Obj7B_MakeFrag
0001B16C 4E75                       		rts	
0001B16E                            ; ===========================================================================
0001B16E                            
0001B16E                            Obj7B_MakeFrag:
0001B16E 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B174 7203                       		moveq	#3,d1
0001B176 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B17A                            
0001B17A                            Obj7B_Loop:
0001B17A 4EB9 0000 F61A             		jsr	SingleObjLoad
0001B180 6600                       		bne.s	loc_1909A
0001B182 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B186 137C 000A 0024             		move.b	#$A,$24(a1)
0001B18C 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B194 137C 0003 0018             		move.b	#3,$18(a1)
0001B19A 337C 0518 0002             		move.w	#$518,2(a1)
0001B1A0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1AC 335A 0010                  		move.w	(a2)+,$10(a1)
0001B1B0 335A 0012                  		move.w	(a2)+,$12(a1)
0001B1B4 137C 0098 0020             		move.b	#$98,$20(a1)
0001B1BA 0029 0004 0001             		ori.b	#4,1(a1)
0001B1C0 08E9 0007 0001             		bset	#7,1(a1)
0001B1C6 137C 000C 0019             		move.b	#$C,$19(a1)
0001B1CC                            
0001B1CC                            loc_1909A:
0001B1CC 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B1D0                            
0001B1D0 4E75                       		rts	
0001B1D2                            ; ===========================================================================
0001B1D2 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B1D6 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B1DA 0100 FCC0                  		dc.w $100, $FCC0
0001B1DE 00A0 FDC0                  		dc.w $A0, $FDC0
0001B1E2                            ; ===========================================================================
0001B1E2                            
0001B1E2                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B1E2 4EB9 0000 F16C             		jsr	SpeedToPos
0001B1E8 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B1EE 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B1F4 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B1FA 7004                       		moveq	#4,d0
0001B1FC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B200 E448                       		lsr.w	#2,d0
0001B202 1140 001A                  		move.b	d0,$1A(a0)
0001B206 4A28 0001                  		tst.b	1(a0)
0001B20A 6A00 F7E0                  		bpl.w	Obj7A_Delete
0001B20E 4E75                       		rts	
0001B210                            ; ===========================================================================
0001B210                            ; ---------------------------------------------------------------------------
0001B210                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B210                            ; ---------------------------------------------------------------------------
0001B210                            Map_obj7B:
0001B210                            	include "_maps\obj7B.asm"
0001B210                            ; ---------------------------------------------------------------------------
0001B210                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B210                            ; ---------------------------------------------------------------------------
0001B210 0000                       		dc.w byte_190E2-Map_obj7B
0001B212 0000                       		dc.w byte_190E8-Map_obj7B
0001B214 01                         byte_190E2:	dc.b 1
0001B215 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B21A 01                         byte_190E8:	dc.b 1
0001B21B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B220                            		even
0001B220                            		even
0001B220                            
0001B220                            ; ===========================================================================
0001B220                            ; ---------------------------------------------------------------------------
0001B220                            ; Object 75 - Eggman (SYZ)
0001B220                            ; ---------------------------------------------------------------------------
0001B220                            
0001B220                            Obj75:					; XREF: Obj_Index
0001B220 7000                       		moveq	#0,d0
0001B222 1028 0024                  		move.b	$24(a0),d0
0001B226 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B22A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B22E                            ; ===========================================================================
0001B22E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B230 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B232 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B234 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B236 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B238                            
0001B238 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B23B 0401 05                    		dc.b 4,	1, 5
0001B23E 0607 05                    		dc.b 6,	7, 5
0001B241 0800 05                    		dc.b 8,	0, 5
0001B244                            ; ===========================================================================
0001B244                            
0001B244                            Obj75_Main:				; XREF: Obj75_Index
0001B244 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B24A 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B250 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B256 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B25C 117C 000F 0020             		move.b	#$F,$20(a0)
0001B262 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B268 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B26C 2248                       		movea.l	a0,a1
0001B26E 7203                       		moveq	#3,d1
0001B270 6000                       		bra.s	Obj75_LoadBoss
0001B272                            ; ===========================================================================
0001B272                            
0001B272                            Obj75_Loop:
0001B272 4EB9 0000 F630             		jsr	SingleObjLoad2
0001B278 6600                       		bne.s	Obj75_ShipMain
0001B27A 12BC 0075                  		move.b	#$75,(a1)
0001B27E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B284 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B28A                            
0001B28A                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B28A 08A8 0000 0022             		bclr	#0,$22(a0)
0001B290 4229 0025                  		clr.b	$25(a1)
0001B294 135A 0024                  		move.b	(a2)+,$24(a1)
0001B298 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B29C 135A 0018                  		move.b	(a2)+,$18(a1)
0001B2A0 237C 0001 9E58 0004        		move.l	#Map_Eggman,4(a1)
0001B2A8 337C 0400 0002             		move.w	#$400,2(a1)
0001B2AE 137C 0004 0001             		move.b	#4,1(a1)
0001B2B4 137C 0020 0019             		move.b	#$20,$19(a1)
0001B2BA 2348 0034                  		move.l	a0,$34(a1)
0001B2BE 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B2C2                            
0001B2C2                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B2C2 7000                       		moveq	#0,d0
0001B2C4 1028 0025                  		move.b	$25(a0),d0
0001B2C8 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B2CC 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B2D0 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001B2D6 4EB9 0000 C138             		jsr	AnimateSprite
0001B2DC 7003                       		moveq	#3,d0
0001B2DE C028 0022                  		and.b	$22(a0),d0
0001B2E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B2E8 8128 0001                  		or.b	d0,1(a0)
0001B2EC 4EF9 0000 F186             		jmp	DisplaySprite
0001B2F2                            ; ===========================================================================
0001B2F2 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B2F6 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B2FA 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B2FE 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B304 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B30A 6400                       		bcc.s	loc_191DE
0001B30C 5428 0025                  		addq.b	#2,$25(a0)
0001B310                            
0001B310                            loc_191DE:
0001B310 1028 003F                  		move.b	$3F(a0),d0
0001B314 5428 003F                  		addq.b	#2,$3F(a0)
0001B318 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001B31E E440                       		asr.w	#2,d0
0001B320 3140 0012                  		move.w	d0,$12(a0)
0001B324                            
0001B324                            loc_191F2:
0001B324 6100 E676                  		bsr.w	BossMove
0001B328 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B32E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B334                            
0001B334                            loc_19202:
0001B334 3028 0008                  		move.w	8(a0),d0
0001B338 0440 2C00                  		subi.w	#$2C00,d0
0001B33C EA48                       		lsr.w	#5,d0
0001B33E 1140 0034                  		move.b	d0,$34(a0)
0001B342 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B348 6400                       		bcc.s	locret_19256
0001B34A 4A28 0022                  		tst.b	$22(a0)
0001B34E 6B00                       		bmi.s	loc_19258
0001B350 4A28 0020                  		tst.b	$20(a0)
0001B354 6600                       		bne.s	locret_19256
0001B356 4A28 003E                  		tst.b	$3E(a0)
0001B35A 6600                       		bne.s	loc_1923A
0001B35C 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B362 303C 00AC                  		move.w	#$AC,d0
0001B366 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B36C                            
0001B36C                            loc_1923A:
0001B36C 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B370 7000                       		moveq	#0,d0
0001B372 4A51                       		tst.w	(a1)
0001B374 6600                       		bne.s	loc_19248
0001B376 303C 0EEE                  		move.w	#$EEE,d0
0001B37A                            
0001B37A                            loc_19248:
0001B37A 3280                       		move.w	d0,(a1)
0001B37C 5328 003E                  		subq.b	#1,$3E(a0)
0001B380 6600                       		bne.s	locret_19256
0001B382 117C 000F 0020             		move.b	#$F,$20(a0)
0001B388                            
0001B388                            locret_19256:
0001B388 4E75                       		rts	
0001B38A                            ; ===========================================================================
0001B38A                            
0001B38A                            loc_19258:				; XREF: loc_19202
0001B38A 7064                       		moveq	#100,d0
0001B38C 6100 0000                  		bsr.w	AddPoints
0001B390 117C 0006 0025             		move.b	#6,$25(a0)
0001B396 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B39C 4268 0010                  		clr.w	$10(a0)
0001B3A0 4E75                       		rts	
0001B3A2                            ; ===========================================================================
0001B3A2                            
0001B3A2                            loc_19270:				; XREF: Obj75_ShipIndex
0001B3A2 3028 0030                  		move.w	$30(a0),d0
0001B3A6 317C 0140 0010             		move.w	#$140,$10(a0)
0001B3AC 0828 0000 0022             		btst	#0,$22(a0)
0001B3B2 6600                       		bne.s	loc_1928E
0001B3B4 4468 0010                  		neg.w	$10(a0)
0001B3B8 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B3BC 6E00                       		bgt.s	loc_1929E
0001B3BE 6000                       		bra.s	loc_19294
0001B3C0                            ; ===========================================================================
0001B3C0                            
0001B3C0                            loc_1928E:
0001B3C0 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B3C4 6D00                       		blt.s	loc_1929E
0001B3C6                            
0001B3C6                            loc_19294:
0001B3C6 0868 0000 0022             		bchg	#0,$22(a0)
0001B3CC 4228 003D                  		clr.b	$3D(a0)
0001B3D0                            
0001B3D0                            loc_1929E:
0001B3D0 0440 2C10                  		subi.w	#$2C10,d0
0001B3D4 0240 001F                  		andi.w	#$1F,d0
0001B3D8 0440 001F                  		subi.w	#$1F,d0
0001B3DC 6A00                       		bpl.s	loc_192AE
0001B3DE 4440                       		neg.w	d0
0001B3E0                            
0001B3E0                            loc_192AE:
0001B3E0 5340                       		subq.w	#1,d0
0001B3E2 6E00                       		bgt.s	loc_192E8
0001B3E4 4A28 003D                  		tst.b	$3D(a0)
0001B3E8 6600                       		bne.s	loc_192E8
0001B3EA 3238 D008                  		move.w	($FFFFD008).w,d1
0001B3EE 0441 2C00                  		subi.w	#$2C00,d1
0001B3F2 EA41                       		asr.w	#5,d1
0001B3F4 B228 0034                  		cmp.b	$34(a0),d1
0001B3F8 6600                       		bne.s	loc_192E8
0001B3FA 7000                       		moveq	#0,d0
0001B3FC 1028 0034                  		move.b	$34(a0),d0
0001B400 EB40                       		asl.w	#5,d0
0001B402 0640 2C10                  		addi.w	#$2C10,d0
0001B406 3140 0030                  		move.w	d0,$30(a0)
0001B40A 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B40E 5428 0025                  		addq.b	#2,$25(a0)
0001B412 4268 0028                  		clr.w	$28(a0)
0001B416 4268 0010                  		clr.w	$10(a0)
0001B41A                            
0001B41A                            loc_192E8:
0001B41A 6000 FEF4                  		bra.w	loc_191DE
0001B41E                            ; ===========================================================================
0001B41E                            
0001B41E                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B41E 7000                       		moveq	#0,d0
0001B420 1028 0028                  		move.b	$28(a0),d0
0001B424 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B428 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B42C                            ; ===========================================================================
0001B42C 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B42E 0000                       		dc.w loc_19348-off_192FA
0001B430 0000                       		dc.w loc_1938E-off_192FA
0001B432 0000                       		dc.w loc_193D0-off_192FA
0001B434                            ; ===========================================================================
0001B434                            
0001B434                            loc_19302:				; XREF: off_192FA
0001B434 317C 0180 0012             		move.w	#$180,$12(a0)
0001B43A 3028 0038                  		move.w	$38(a0),d0
0001B43E 0C40 0556                  		cmpi.w	#$556,d0
0001B442 6500                       		bcs.s	loc_19344
0001B444 317C 0556 0038             		move.w	#$556,$38(a0)
0001B44A 4268 003C                  		clr.w	$3C(a0)
0001B44E 70FF                       		moveq	#-1,d0
0001B450 3028 0036                  		move.w	$36(a0),d0
0001B454 6700                       		beq.s	loc_1933C
0001B456 2240                       		movea.l	d0,a1
0001B458 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B45E 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B464 2348 0034                  		move.l	a0,$34(a1)
0001B468 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B46E                            
0001B46E                            loc_1933C:
0001B46E 4268 0012                  		clr.w	$12(a0)
0001B472 5428 0028                  		addq.b	#2,$28(a0)
0001B476                            
0001B476                            loc_19344:
0001B476 6000 FEAC                  		bra.w	loc_191F2
0001B47A                            ; ===========================================================================
0001B47A                            
0001B47A                            loc_19348:				; XREF: off_192FA
0001B47A 5368 003C                  		subq.w	#1,$3C(a0)
0001B47E 6A00                       		bpl.s	loc_19366
0001B480 5428 0028                  		addq.b	#2,$28(a0)
0001B484 317C F800 0012             		move.w	#-$800,$12(a0)
0001B48A 4A68 0036                  		tst.w	$36(a0)
0001B48E 6600                       		bne.s	loc_19362
0001B490 E0E8 0012                  		asr	$12(a0)
0001B494                            
0001B494                            loc_19362:
0001B494 7000                       		moveq	#0,d0
0001B496 6000                       		bra.s	loc_1937C
0001B498                            ; ===========================================================================
0001B498                            
0001B498                            loc_19366:
0001B498 7000                       		moveq	#0,d0
0001B49A 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B4A0 6E00                       		bgt.s	loc_1937C
0001B4A2 7002                       		moveq	#2,d0
0001B4A4 0828 0001 003D             		btst	#1,$3D(a0)
0001B4AA 6700                       		beq.s	loc_1937C
0001B4AC 4440                       		neg.w	d0
0001B4AE                            
0001B4AE                            loc_1937C:
0001B4AE D068 0038                  		add.w	$38(a0),d0
0001B4B2 3140 000C                  		move.w	d0,$C(a0)
0001B4B6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B4BC 6000 FE76                  		bra.w	loc_19202
0001B4C0                            ; ===========================================================================
0001B4C0                            
0001B4C0                            loc_1938E:				; XREF: off_192FA
0001B4C0 303C 04DA                  		move.w	#$4DA,d0
0001B4C4 4A68 0036                  		tst.w	$36(a0)
0001B4C8 6700                       		beq.s	loc_1939C
0001B4CA 0440 0018                  		subi.w	#$18,d0
0001B4CE                            
0001B4CE                            loc_1939C:
0001B4CE B068 0038                  		cmp.w	$38(a0),d0
0001B4D2 6D00                       		blt.s	loc_193BE
0001B4D4 317C 0008 003C             		move.w	#8,$3C(a0)
0001B4DA 4A68 0036                  		tst.w	$36(a0)
0001B4DE 6700                       		beq.s	loc_193B4
0001B4E0 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B4E6                            
0001B4E6                            loc_193B4:
0001B4E6 5428 0028                  		addq.b	#2,$28(a0)
0001B4EA 4268 0012                  		clr.w	$12(a0)
0001B4EE 6000                       		bra.s	loc_193CC
0001B4F0                            ; ===========================================================================
0001B4F0                            
0001B4F0                            loc_193BE:
0001B4F0 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B4F6 6C00                       		bge.s	loc_193CC
0001B4F8 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B4FE                            
0001B4FE                            loc_193CC:
0001B4FE 6000 FE24                  		bra.w	loc_191F2
0001B502                            ; ===========================================================================
0001B502                            
0001B502                            loc_193D0:				; XREF: off_192FA
0001B502 5368 003C                  		subq.w	#1,$3C(a0)
0001B506 6E00                       		bgt.s	loc_19406
0001B508 6B00                       		bmi.s	loc_193EE
0001B50A 70FF                       		moveq	#-1,d0
0001B50C 3028 0036                  		move.w	$36(a0),d0
0001B510 6700                       		beq.s	loc_193E8
0001B512 2240                       		movea.l	d0,a1
0001B514 137C 000A 0029             		move.b	#$A,$29(a1)
0001B51A                            
0001B51A                            loc_193E8:
0001B51A 4268 0036                  		clr.w	$36(a0)
0001B51E 6000                       		bra.s	loc_19406
0001B520                            ; ===========================================================================
0001B520                            
0001B520                            loc_193EE:
0001B520 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B526 6600                       		bne.s	loc_19406
0001B528 4228 0029                  		clr.b	$29(a0)
0001B52C 5528 0025                  		subq.b	#2,$25(a0)
0001B530 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B536 6000                       		bra.s	loc_19446
0001B538                            ; ===========================================================================
0001B538                            
0001B538                            loc_19406:
0001B538 7001                       		moveq	#1,d0
0001B53A 4A68 0036                  		tst.w	$36(a0)
0001B53E 6700                       		beq.s	loc_19410
0001B540 7002                       		moveq	#2,d0
0001B542                            
0001B542                            loc_19410:
0001B542 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B548 6700                       		beq.s	loc_19424
0001B54A 6D00                       		blt.s	loc_1941C
0001B54C 4440                       		neg.w	d0
0001B54E                            
0001B54E                            loc_1941C:
0001B54E 4A68 0036                  		tst.w	$36(a0)
0001B552 D168 0038                  		add.w	d0,$38(a0)
0001B556                            
0001B556                            loc_19424:
0001B556 7000                       		moveq	#0,d0
0001B558 4A68 0036                  		tst.w	$36(a0)
0001B55C 6700                       		beq.s	loc_19438
0001B55E 7002                       		moveq	#2,d0
0001B560 0828 0000 003D             		btst	#0,$3D(a0)
0001B566 6700                       		beq.s	loc_19438
0001B568 4440                       		neg.w	d0
0001B56A                            
0001B56A                            loc_19438:
0001B56A D068 0038                  		add.w	$38(a0),d0
0001B56E 3140 000C                  		move.w	d0,$C(a0)
0001B572 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B578                            
0001B578                            loc_19446:
0001B578 6000 FDBA                  		bra.w	loc_19202
0001B57C                            
0001B57C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B57C                            
0001B57C                            
0001B57C                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B57C 4268 0036                  		clr.w	$36(a0)
0001B580 43F8 D040                  		lea	($FFFFD040).w,a1
0001B584 703E                       		moveq	#$3E,d0
0001B586 7276                       		moveq	#$76,d1
0001B588 1428 0034                  		move.b	$34(a0),d2
0001B58C                            
0001B58C                            Obj75_FindLoop:
0001B58C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B58E 6600                       		bne.s	loc_1946A	; if not, branch
0001B590 B429 0028                  		cmp.b	$28(a1),d2
0001B594 6600                       		bne.s	loc_1946A
0001B596 3149 0036                  		move.w	a1,$36(a0)
0001B59A 6000                       		bra.s	locret_19472
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            loc_1946A:
0001B59C 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B5A0 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B5A4                            
0001B5A4                            locret_19472:
0001B5A4 4E75                       		rts	
0001B5A6                            ; End of function Obj75_FindBlocks
0001B5A6                            
0001B5A6                            ; ===========================================================================
0001B5A6                            
0001B5A6                            loc_19474:				; XREF: Obj75_ShipIndex
0001B5A6 5368 003C                  		subq.w	#1,$3C(a0)
0001B5AA 6B00                       		bmi.s	loc_1947E
0001B5AC 6000 E3AC                  		bra.w	BossDefeated
0001B5B0                            ; ===========================================================================
0001B5B0                            
0001B5B0                            loc_1947E:
0001B5B0 5428 0025                  		addq.b	#2,$25(a0)
0001B5B4 4268 0012                  		clr.w	$12(a0)
0001B5B8 08E8 0000 0022             		bset	#0,$22(a0)
0001B5BE 08A8 0007 0022             		bclr	#7,$22(a0)
0001B5C4 4268 0010                  		clr.w	$10(a0)
0001B5C8 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B5CE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B5D2 6600                       		bne.s	loc_194A8
0001B5D4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B5DA                            
0001B5DA                            loc_194A8:
0001B5DA 6000 FD58                  		bra.w	loc_19202
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B5DE 5268 003C                  		addq.w	#1,$3C(a0)
0001B5E2 6700                       		beq.s	loc_194BC
0001B5E4 6A00                       		bpl.s	loc_194C2
0001B5E6 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B5EC 6000                       		bra.s	loc_194EE
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_194BC:
0001B5EE 4268 0012                  		clr.w	$12(a0)
0001B5F2 6000                       		bra.s	loc_194EE
0001B5F4                            ; ===========================================================================
0001B5F4                            
0001B5F4                            loc_194C2:
0001B5F4 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B5FA 6500                       		bcs.s	loc_194DA
0001B5FC 6700                       		beq.s	loc_194E0
0001B5FE 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B604 6500                       		bcs.s	loc_194EE
0001B606 5428 0025                  		addq.b	#2,$25(a0)
0001B60A 6000                       		bra.s	loc_194EE
0001B60C                            ; ===========================================================================
0001B60C                            
0001B60C                            loc_194DA:
0001B60C 5168 0012                  		subq.w	#8,$12(a0)
0001B610 6000                       		bra.s	loc_194EE
0001B612                            ; ===========================================================================
0001B612                            
0001B612                            loc_194E0:
0001B612 4268 0012                  		clr.w	$12(a0)
0001B616 6100 E5BC                  		bsr.w	BossEnd
0001B61A                            
0001B61A                            loc_194EE:
0001B61A 6000 FD08                  		bra.w	loc_191F2
0001B61E                            ; ===========================================================================
0001B61E                            
0001B61E                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B61E 317C 0400 0010             		move.w	#$400,$10(a0)
0001B624 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B62A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B630 6400                       		bcc.s	loc_1950C
0001B632 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B636 6000                       		bra.s	loc_19512
0001B638                            ; ===========================================================================
0001B638                            
0001B638                            loc_1950C:
0001B638 4A28 0001                  		tst.b	1(a0)
0001B63C 6A00                       		bpl.s	Obj75_ShipDelete
0001B63E                            
0001B63E                            loc_19512:
0001B63E 6100 E35C                  		bsr.w	BossMove
0001B642 6000 FCCC                  		bra.w	loc_191DE
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            Obj75_ShipDelete:
0001B646 4EF9 0000 F1C2             		jmp	DeleteObject
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B64C 7201                       		moveq	#1,d1
0001B64E 2268 0034                  		movea.l	$34(a0),a1
0001B652 7000                       		moveq	#0,d0
0001B654 1029 0025                  		move.b	$25(a1),d0
0001B658 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B65C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B660 1141 001C                  		move.b	d1,$1C(a0)
0001B664 1010                       		move.b	(a0),d0
0001B666 B011                       		cmp.b	(a1),d0
0001B668 6600                       		bne.s	Obj75_FaceDelete
0001B66A 6000                       		bra.s	loc_195BE
0001B66C                            ; ===========================================================================
0001B66C                            
0001B66C                            Obj75_FaceDelete:
0001B66C 4EF9 0000 F1C2             		jmp	DeleteObject
0001B672                            ; ===========================================================================
0001B672 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B676 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B67A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B67E                            ; ===========================================================================
0001B67E                            
0001B67E                            loc_19552:				; XREF: off_19546
0001B67E 720A                       		moveq	#$A,d1
0001B680 4E75                       		rts	
0001B682                            ; ===========================================================================
0001B682                            
0001B682                            loc_19556:				; XREF: off_19546
0001B682 7206                       		moveq	#6,d1
0001B684 4E75                       		rts	
0001B686                            ; ===========================================================================
0001B686                            
0001B686                            loc_1955A:				; XREF: off_19546
0001B686 7000                       		moveq	#0,d0
0001B688 1029 0028                  		move.b	$28(a1),d0
0001B68C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B690 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B694                            ; ===========================================================================
0001B694 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B698 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B69C                            ; ===========================================================================
0001B69C                            
0001B69C                            loc_19570:				; XREF: off_19568
0001B69C 6000                       		bra.s	loc_19574
0001B69E                            ; ===========================================================================
0001B69E                            
0001B69E                            loc_19572:				; XREF: off_19568
0001B69E 7206                       		moveq	#6,d1
0001B6A0                            
0001B6A0                            loc_19574:				; XREF: off_19546
0001B6A0 4A29 0020                  		tst.b	$20(a1)
0001B6A4 6600                       		bne.s	loc_1957E
0001B6A6 7205                       		moveq	#5,d1
0001B6A8 4E75                       		rts	
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            loc_1957E:
0001B6AA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B6B0 6500                       		bcs.s	locret_19588
0001B6B2 7204                       		moveq	#4,d1
0001B6B4                            
0001B6B4                            locret_19588:
0001B6B4 4E75                       		rts	
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B6B6 117C 0007 001C             		move.b	#7,$1C(a0)
0001B6BC 2268 0034                  		movea.l	$34(a0),a1
0001B6C0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B6C6 6600                       		bne.s	loc_195AA
0001B6C8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B6CE 4A28 0001                  		tst.b	1(a0)
0001B6D2 6A00                       		bpl.s	Obj75_FlameDelete
0001B6D4 6000                       		bra.s	loc_195B6
0001B6D6                            ; ===========================================================================
0001B6D6                            
0001B6D6                            loc_195AA:
0001B6D6 4A69 0010                  		tst.w	$10(a1)
0001B6DA 6700                       		beq.s	loc_195B6
0001B6DC 117C 0008 001C             		move.b	#8,$1C(a0)
0001B6E2                            
0001B6E2                            loc_195B6:
0001B6E2 6000                       		bra.s	loc_195BE
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            Obj75_FlameDelete:
0001B6E4 4EF9 0000 F1C2             		jmp	DeleteObject
0001B6EA                            ; ===========================================================================
0001B6EA                            
0001B6EA                            loc_195BE:
0001B6EA 43F9 0001 9E08             		lea	(Ani_Eggman).l,a1
0001B6F0 4EB9 0000 C138             		jsr	AnimateSprite
0001B6F6 2268 0034                  		movea.l	$34(a0),a1
0001B6FA 3169 0008 0008             		move.w	8(a1),8(a0)
0001B700 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B706                            
0001B706                            loc_195DA:
0001B706 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B70C 7003                       		moveq	#3,d0
0001B70E C028 0022                  		and.b	$22(a0),d0
0001B712 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B718 8128 0001                  		or.b	d0,1(a0)
0001B71C 4EF9 0000 F186             		jmp	DisplaySprite
0001B722                            ; ===========================================================================
0001B722                            
0001B722                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B722 217C 0001 9F20 0004        		move.l	#Map_BossItems,4(a0)
0001B72A 317C 246C 0002             		move.w	#$246C,2(a0)
0001B730 117C 0005 001A             		move.b	#5,$1A(a0)
0001B736 2268 0034                  		movea.l	$34(a0),a1
0001B73A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B740 6600                       		bne.s	loc_1961C
0001B742 4A28 0001                  		tst.b	1(a0)
0001B746 6A00                       		bpl.s	Obj75_SpikeDelete
0001B748                            
0001B748                            loc_1961C:
0001B748 3169 0008 0008             		move.w	8(a1),8(a0)
0001B74E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B754 3028 003C                  		move.w	$3C(a0),d0
0001B758 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B75E 6600                       		bne.s	loc_19652
0001B760 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B766 6700                       		beq.s	loc_1964C
0001B768 4A29 0028                  		tst.b	$28(a1)
0001B76C 6600                       		bne.s	loc_19658
0001B76E 0C40 0094                  		cmpi.w	#$94,d0
0001B772 6C00                       		bge.s	loc_19658
0001B774 5E40                       		addq.w	#7,d0
0001B776 6000                       		bra.s	loc_19658
0001B778                            ; ===========================================================================
0001B778                            
0001B778                            loc_1964C:
0001B778 4A69 003C                  		tst.w	$3C(a1)
0001B77C 6A00                       		bpl.s	loc_19658
0001B77E                            
0001B77E                            loc_19652:
0001B77E 4A40                       		tst.w	d0
0001B780 6F00                       		ble.s	loc_19658
0001B782 5B40                       		subq.w	#5,d0
0001B784                            
0001B784                            loc_19658:
0001B784 3140 003C                  		move.w	d0,$3C(a0)
0001B788 E440                       		asr.w	#2,d0
0001B78A D168 000C                  		add.w	d0,$C(a0)
0001B78E 117C 0008 0019             		move.b	#8,$19(a0)
0001B794 117C 000C 0016             		move.b	#$C,$16(a0)
0001B79A 4228 0020                  		clr.b	$20(a0)
0001B79E 2268 0034                  		movea.l	$34(a0),a1
0001B7A2 4A29 0020                  		tst.b	$20(a1)
0001B7A6 6700                       		beq.s	loc_19688
0001B7A8 4A29 0029                  		tst.b	$29(a1)
0001B7AC 6600                       		bne.s	loc_19688
0001B7AE 117C 0084 0020             		move.b	#$84,$20(a0)
0001B7B4                            
0001B7B4                            loc_19688:
0001B7B4 6000 FF50                  		bra.w	loc_195DA
0001B7B8                            ; ===========================================================================
0001B7B8                            
0001B7B8                            Obj75_SpikeDelete:
0001B7B8 4EF9 0000 F1C2             		jmp	DeleteObject
0001B7BE                            ; ===========================================================================
0001B7BE                            ; ---------------------------------------------------------------------------
0001B7BE                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B7BE                            ; ---------------------------------------------------------------------------
0001B7BE                            
0001B7BE                            Obj76:					; XREF: Obj_Index
0001B7BE 7000                       		moveq	#0,d0
0001B7C0 1028 0024                  		move.b	$24(a0),d0
0001B7C4 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B7C8 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B7CC                            ; ===========================================================================
0001B7CC 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B7CE 0000                       		dc.w Obj76_Action-Obj76_Index
0001B7D0 0000                       		dc.w loc_19762-Obj76_Index
0001B7D2                            ; ===========================================================================
0001B7D2                            
0001B7D2                            Obj76_Main:				; XREF: Obj76_Index
0001B7D2 7800                       		moveq	#0,d4
0001B7D4 3A3C 2C10                  		move.w	#$2C10,d5
0001B7D8 7C09                       		moveq	#9,d6
0001B7DA 43D0                       		lea	(a0),a1
0001B7DC 6000                       		bra.s	Obj76_MakeBlock
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            Obj76_Loop:
0001B7DE 4EB9 0000 F61A             		jsr	SingleObjLoad
0001B7E4 6600                       		bne.s	Obj76_ExitLoop
0001B7E6                            
0001B7E6                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B7E6 12BC 0076                  		move.b	#$76,(a1)
0001B7EA 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B7F2 337C 4000 0002             		move.w	#$4000,2(a1)
0001B7F8 137C 0004 0001             		move.b	#4,1(a1)
0001B7FE 137C 0010 0019             		move.b	#$10,$19(a1)
0001B804 137C 0010 0016             		move.b	#$10,$16(a1)
0001B80A 137C 0003 0018             		move.b	#3,$18(a1)
0001B810 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B814 337C 0582 000C             		move.w	#$582,$C(a1)
0001B81A 3344 0028                  		move.w	d4,$28(a1)
0001B81E 0644 0101                  		addi.w	#$101,d4
0001B822 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B826 5429 0024                  		addq.b	#2,$24(a1)
0001B82A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B82E                            
0001B82E                            Obj76_ExitLoop:
0001B82E 4E75                       		rts	
0001B830                            ; ===========================================================================
0001B830                            
0001B830                            Obj76_Action:				; XREF: Obj76_Index
0001B830 1028 0029                  		move.b	$29(a0),d0
0001B834 B028 0028                  		cmp.b	$28(a0),d0
0001B838 6700                       		beq.s	Obj76_Solid
0001B83A 4A00                       		tst.b	d0
0001B83C 6B00                       		bmi.s	loc_19718
0001B83E                            
0001B83E                            loc_19712:
0001B83E 6100 0000                  		bsr.w	Obj76_Break
0001B842 6000                       		bra.s	Obj76_Display
0001B844                            ; ===========================================================================
0001B844                            
0001B844                            loc_19718:
0001B844 2268 0034                  		movea.l	$34(a0),a1
0001B848 4A29 0021                  		tst.b	$21(a1)
0001B84C 67F0                       		beq.s	loc_19712
0001B84E 3169 0008 0008             		move.w	8(a1),8(a0)
0001B854 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B85A 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B860 B2C8                       		cmpa.w	a0,a1
0001B862 6500                       		bcs.s	Obj76_Display
0001B864 3029 0012                  		move.w	$12(a1),d0
0001B868 48C0                       		ext.l	d0
0001B86A E080                       		asr.l	#8,d0
0001B86C D168 000C                  		add.w	d0,$C(a0)
0001B870 6000                       		bra.s	Obj76_Display
0001B872                            ; ===========================================================================
0001B872                            
0001B872                            Obj76_Solid:				; XREF: Obj76_Action
0001B872 323C 001B                  		move.w	#$1B,d1
0001B876 343C 0010                  		move.w	#$10,d2
0001B87A 363C 0011                  		move.w	#$11,d3
0001B87E 3828 0008                  		move.w	8(a0),d4
0001B882 4EB9 0001 1564             		jsr	SolidObject
0001B888                            
0001B888                            Obj76_Display:				; XREF: Obj76_Action
0001B888 4EF9 0000 F186             		jmp	DisplaySprite
0001B88E                            ; ===========================================================================
0001B88E                            
0001B88E                            loc_19762:				; XREF: Obj76_Index
0001B88E 4A28 0001                  		tst.b	1(a0)
0001B892 6A00                       		bpl.s	Obj76_Delete
0001B894 4EB9 0000 F14C             		jsr	ObjectFall
0001B89A 4EF9 0000 F186             		jmp	DisplaySprite
0001B8A0                            ; ===========================================================================
0001B8A0                            
0001B8A0                            Obj76_Delete:
0001B8A0 4EF9 0000 F1C2             		jmp	DeleteObject
0001B8A6                            
0001B8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8A6                            
0001B8A6                            
0001B8A6                            Obj76_Break:				; XREF: Obj76_Action
0001B8A6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B8AA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B8AE 7801                       		moveq	#1,d4
0001B8B0 7203                       		moveq	#3,d1
0001B8B2 7438                       		moveq	#$38,d2
0001B8B4 5428 0024                  		addq.b	#2,$24(a0)
0001B8B8 117C 0008 0019             		move.b	#8,$19(a0)
0001B8BE 117C 0008 0016             		move.b	#8,$16(a0)
0001B8C4 43D0                       		lea	(a0),a1
0001B8C6 6000                       		bra.s	Obj76_MakeFrag
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            Obj76_LoopFrag:
0001B8C8 4EB9 0000 F630             		jsr	SingleObjLoad2
0001B8CE 6600                       		bne.s	loc_197D4
0001B8D0                            
0001B8D0                            Obj76_MakeFrag:
0001B8D0 45D0                       		lea	(a0),a2
0001B8D2 47D1                       		lea	(a1),a3
0001B8D4 7603                       		moveq	#3,d3
0001B8D6                            
0001B8D6                            loc_197AA:
0001B8D6 26DA                       		move.l	(a2)+,(a3)+
0001B8D8 26DA                       		move.l	(a2)+,(a3)+
0001B8DA 26DA                       		move.l	(a2)+,(a3)+
0001B8DC 26DA                       		move.l	(a2)+,(a3)+
0001B8DE 51CB FFF6                  		dbf	d3,loc_197AA
0001B8E2                            
0001B8E2 335C 0010                  		move.w	(a4)+,$10(a1)
0001B8E6 335C 0012                  		move.w	(a4)+,$12(a1)
0001B8EA 361D                       		move.w	(a5)+,d3
0001B8EC D769 0008                  		add.w	d3,8(a1)
0001B8F0 361D                       		move.w	(a5)+,d3
0001B8F2 D769 000C                  		add.w	d3,$C(a1)
0001B8F6 1344 001A                  		move.b	d4,$1A(a1)
0001B8FA 5244                       		addq.w	#1,d4
0001B8FC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B900                            
0001B900                            loc_197D4:
0001B900 303C 00CB                  		move.w	#$CB,d0
0001B904 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B90A                            ; End of function Obj76_Break
0001B90A                            
0001B90A                            ; ===========================================================================
0001B90A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B90E 0180 FE00                  		dc.w $180, $FE00
0001B912 FF00 FF00                  		dc.w $FF00, $FF00
0001B916 0100 FF00                  		dc.w $100, $FF00
0001B91A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B91E 0010 0000                  		dc.w $10, 0
0001B922 0000 0010                  		dc.w 0,	$10
0001B926 0010 0010                  		dc.w $10, $10
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A                            Map_obj76:
0001B92A                            	include "_maps\obj76.asm"
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B92E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B932 0000                       		dc.w byte_19826-Map_obj76
0001B934 02                         byte_19808:	dc.b 2
0001B935 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B93A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B93F 00                         		dc.b 0
0001B940 01                         byte_19814:	dc.b 1
0001B941 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B946 01                         byte_1981A:	dc.b 1
0001B947 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B94C 01                         byte_19820:	dc.b 1
0001B94D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B952 01                         byte_19826:	dc.b 1
0001B953 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B958                            		even
0001B958                            		even
0001B958                            
0001B958                            ; ===========================================================================
0001B958                            
0001B958                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B958 4EF9 0000 F1C2             		jmp	DeleteObject
0001B95E                            ; ===========================================================================
0001B95E                            ; ---------------------------------------------------------------------------
0001B95E                            ; Object 82 - Eggman (SBZ2)
0001B95E                            ; ---------------------------------------------------------------------------
0001B95E                            
0001B95E                            Obj82:					; XREF: Obj_Index
0001B95E 7000                       		moveq	#0,d0
0001B960 1028 0024                  		move.b	$24(a0),d0
0001B964 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B968 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B96C                            ; ===========================================================================
0001B96C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B96E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B970 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B972                            
0001B972 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B975 0400 03                    		dc.b 4,	0, 3
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            Obj82_Main:				; XREF: Obj82_Index
0001B978 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B97C 317C 2160 0008             		move.w	#$2160,8(a0)
0001B982 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B988 117C 000F 0020             		move.b	#$F,$20(a0)
0001B98E 117C 0010 0021             		move.b	#$10,$21(a0)
0001B994 08A8 0000 0022             		bclr	#0,$22(a0)
0001B99A 4228 0025                  		clr.b	$25(a0)
0001B99E 115A 0024                  		move.b	(a2)+,$24(a0)
0001B9A2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B9A6 115A 0018                  		move.b	(a2)+,$18(a0)
0001B9AA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B9B2 317C 0400 0002             		move.w	#$400,2(a0)
0001B9B8 117C 0004 0001             		move.b	#4,1(a0)
0001B9BE 08E8 0007 0001             		bset	#7,1(a0)
0001B9C4 117C 0020 0019             		move.b	#$20,$19(a0)
0001B9CA 4EB9 0000 F630             		jsr	SingleObjLoad2
0001B9D0 6600                       		bne.s	Obj82_Eggman
0001B9D2 2348 0034                  		move.l	a0,$34(a1)
0001B9D6 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B9DA 337C 2130 0008             		move.w	#$2130,8(a1)
0001B9E0 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B9E6 4228 0025                  		clr.b	$25(a0)
0001B9EA 135A 0024                  		move.b	(a2)+,$24(a1)
0001B9EE 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B9F2 135A 0018                  		move.b	(a2)+,$18(a1)
0001B9F6 237C 0000 D8BA 0004        		move.l	#Map_obj32,4(a1)
0001B9FE 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001BA04 137C 0004 0001             		move.b	#4,1(a1)
0001BA0A 08E9 0007 0001             		bset	#7,1(a1)
0001BA10 137C 0010 0019             		move.b	#$10,$19(a1)
0001BA16 137C 0000 001A             		move.b	#0,$1A(a1)
0001BA1C                            
0001BA1C                            Obj82_Eggman:				; XREF: Obj82_Index
0001BA1C 7000                       		moveq	#0,d0
0001BA1E 1028 0025                  		move.b	$25(a0),d0
0001BA22 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001BA26 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001BA2A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001BA2E 4EB9 0000 C138             		jsr	AnimateSprite
0001BA34 4EF9 0000 F186             		jmp	DisplaySprite
0001BA3A                            ; ===========================================================================
0001BA3A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001BA3C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001BA3E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001BA40 0000                       		dc.w loc_19934-Obj82_EggIndex
0001BA42                            ; ===========================================================================
0001BA42                            
0001BA42                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001BA42 3028 0008                  		move.w	8(a0),d0
0001BA46 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA4A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001BA4E 6400                       		bcc.s	loc_19934	; if not, branch
0001BA50 5428 0025                  		addq.b	#2,$25(a0)
0001BA54 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001BA5A 117C 0001 001C             		move.b	#1,$1C(a0)
0001BA60                            
0001BA60                            loc_19934:				; XREF: Obj82_EggIndex
0001BA60 4EF9 0000 F16C             		jmp	SpeedToPos
0001BA66                            ; ===========================================================================
0001BA66                            
0001BA66                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001BA66 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001BA6A 6600                       		bne.s	loc_19954	; if time remains, branch
0001BA6C 5428 0025                  		addq.b	#2,$25(a0)
0001BA70 117C 0002 001C             		move.b	#2,$1C(a0)
0001BA76 5868 000C                  		addq.w	#4,$C(a0)
0001BA7A 317C 000F 003C             		move.w	#15,$3C(a0)
0001BA80                            
0001BA80                            loc_19954:
0001BA80 60DE                       		bra.s	loc_19934
0001BA82                            ; ===========================================================================
0001BA82                            
0001BA82                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001BA82 5368 003C                  		subq.w	#1,$3C(a0)
0001BA86 6E00                       		bgt.s	loc_199D0
0001BA88 6600                       		bne.s	loc_1996A
0001BA8A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001BA90 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001BA96                            
0001BA96                            loc_1996A:
0001BA96 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001BA9C 6E00                       		bgt.s	loc_19976
0001BA9E 4268 0010                  		clr.w	$10(a0)
0001BAA2                            
0001BAA2                            loc_19976:
0001BAA2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001BAA8 4A68 0012                  		tst.w	$12(a0)
0001BAAC 6B00                       		bmi.s	Obj82_FindBlocks
0001BAAE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001BAB4 6500                       		bcs.s	Obj82_FindBlocks
0001BAB6 317C 5357 0028             		move.w	#$5357,$28(a0)
0001BABC 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BAC2 6500                       		bcs.s	Obj82_FindBlocks
0001BAC4 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BACA 4268 0012                  		clr.w	$12(a0)
0001BACE                            
0001BACE                            Obj82_FindBlocks:
0001BACE 3028 0010                  		move.w	$10(a0),d0
0001BAD2 8068 0012                  		or.w	$12(a0),d0
0001BAD6 6600                       		bne.s	loc_199D0
0001BAD8 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BADC 703E                       		moveq	#$3E,d0
0001BADE 7240                       		moveq	#$40,d1
0001BAE0                            
0001BAE0                            Obj82_FindLoop:	
0001BAE0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BAE2 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BAE6 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BAEA                            
0001BAEA 6600                       		bne.s	loc_199D0
0001BAEC 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BAF2 5428 0025                  		addq.b	#2,$25(a0)
0001BAF6 117C 0001 001C             		move.b	#1,$1C(a0)
0001BAFC                            
0001BAFC                            loc_199D0:
0001BAFC 6000 FF62                  		bra.w	loc_19934
0001BB00                            ; ===========================================================================
0001BB00                            
0001BB00                            Obj82_Switch:				; XREF: Obj82_Index
0001BB00 7000                       		moveq	#0,d0
0001BB02 1028 0025                  		move.b	$25(a0),d0
0001BB06 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BB0A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BB0E                            ; ===========================================================================
0001BB0E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BB10 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BB12                            ; ===========================================================================
0001BB12                            
0001BB12                            loc_199E6:				; XREF: Obj82_SwIndex
0001BB12 2268 0034                  		movea.l	$34(a0),a1
0001BB16 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BB1C 6600                       		bne.s	Obj82_SwDisplay
0001BB1E 117C 0001 001A             		move.b	#1,$1A(a0)
0001BB24 5428 0025                  		addq.b	#2,$25(a0)
0001BB28                            
0001BB28                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BB28 4EF9 0000 F186             		jmp	DisplaySprite
0001BB2E                            ; ===========================================================================
0001BB2E                            Ani_obj82:
0001BB2E                            	include "_anim\obj82.asm"
0001BB2E                            ; ---------------------------------------------------------------------------
0001BB2E                            ; Animation script - Eggman (SBZ2)
0001BB2E                            ; ---------------------------------------------------------------------------
0001BB2E 0000                       		dc.w byte_19A10-Ani_obj82
0001BB30 0000                       		dc.w byte_19A14-Ani_obj82
0001BB32 0000                       		dc.w byte_19A18-Ani_obj82
0001BB34 0000                       		dc.w byte_19A20-Ani_obj82
0001BB36 0000                       		dc.w byte_19A24-Ani_obj82
0001BB38 0000                       		dc.w byte_19A2A-Ani_obj82
0001BB3A 0000                       		dc.w byte_19A30-Ani_obj82
0001BB3C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BB40 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BB44 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BB4C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BB50 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BB56 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BB5C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BB60                            		even
0001BB60                            		even
0001BB60                            
0001BB60                            ; ---------------------------------------------------------------------------
0001BB60                            ; Sprite mappings - Eggman (SBZ2)
0001BB60                            ; ---------------------------------------------------------------------------
0001BB60                            Map_obj82:
0001BB60                            	include "_maps\obj82.asm"
0001BB60                            ; ---------------------------------------------------------------------------
0001BB60                            ; Sprite mappings - Eggman (SBZ2)
0001BB60                            ; ---------------------------------------------------------------------------
0001BB60 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BB64 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BB68 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BB6C 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BB70 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BB74 0000                       		dc.w byte_19B4F-Map_obj82
0001BB76 03                         byte_19A4A:	dc.b 3
0001BB77 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BB7C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB81 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BB86 04                         byte_19A5A:	dc.b 4
0001BB87 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BB8C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB91 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BB96 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BB9B 00                         		dc.b 0
0001BB9C 04                         byte_19A70:	dc.b 4
0001BB9D E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BBA2 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BBA7 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BBAC FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BBB1 00                         		dc.b 0
0001BBB2 04                         byte_19A86:	dc.b 4
0001BBB3 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BBB8 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BBBD 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BBC2 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BBC7 00                         		dc.b 0
0001BBC8 04                         byte_19A9C:	dc.b 4
0001BBC9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BBCE F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BBD3 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BBD8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBDD 00                         		dc.b 0
0001BBDE 04                         byte_19AB2:	dc.b 4
0001BBDF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BBE4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BBE9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBEE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BBF3 00                         		dc.b 0
0001BBF4 07                         byte_19AC8:	dc.b 7
0001BBF5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BBFA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BBFF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BC04 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BC09 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC0E F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BC13 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BC18 05                         byte_19AEC:	dc.b 5
0001BC19 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC1E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BC23 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BC28 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BC2D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC32 06                         byte_19B06:	dc.b 6
0001BC33 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BC38 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BC3D 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BC42 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BC47 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BC4C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BC51 00                         		dc.b 0
0001BC52 08                         byte_19B26:	dc.b 8
0001BC53 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BC58 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BC5D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC62 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BC67 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BC6C F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BC71 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BC76 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BC7B 03                         byte_19B4F:	dc.b 3
0001BC7C EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BC81 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BC86 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BC8C 00                         		even
0001BC8C 00                         		even
0001BC8C                            
0001BC8C                            ; ===========================================================================
0001BC8C                            ; ---------------------------------------------------------------------------
0001BC8C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BC8C                            ; ---------------------------------------------------------------------------
0001BC8C                            
0001BC8C                            Obj83:					; XREF: Obj_Index
0001BC8C 7000                       		moveq	#0,d0
0001BC8E 1028 0024                  		move.b	$24(a0),d0
0001BC92 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BC96 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BC9A                            ; ===========================================================================
0001BC9A 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BC9C 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BC9E 0000                       		dc.w loc_19C36-Obj83_Index
0001BCA0 0000                       		dc.w loc_19C62-Obj83_Index
0001BCA2 0000                       		dc.w loc_19C72-Obj83_Index
0001BCA4 0000                       		dc.w loc_19C80-Obj83_Index
0001BCA6                            ; ===========================================================================
0001BCA6                            
0001BCA6                            Obj83_Main:				; XREF: Obj83_Index
0001BCA6 317C 2080 0008             		move.w	#$2080,8(a0)
0001BCAC 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BCB2 117C 0080 0019             		move.b	#$80,$19(a0)
0001BCB8 117C 0010 0016             		move.b	#$10,$16(a0)
0001BCBE 117C 0004 0001             		move.b	#4,1(a0)
0001BCC4 08E8 0007 0001             		bset	#7,1(a0)
0001BCCA 7800                       		moveq	#0,d4
0001BCCC 3A3C 2010                  		move.w	#$2010,d5
0001BCD0 7C07                       		moveq	#7,d6
0001BCD2 45E8 0030                  		lea	$30(a0),a2
0001BCD6                            
0001BCD6                            Obj83_MakeBlock:
0001BCD6 4EB9 0000 F61A             		jsr	SingleObjLoad
0001BCDC 6600                       		bne.s	Obj83_ExitMake
0001BCDE 34C9                       		move.w	a1,(a2)+
0001BCE0 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BCE4 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BCEC 337C 4518 0002             		move.w	#$4518,2(a1)
0001BCF2 137C 0004 0001             		move.b	#4,1(a1)
0001BCF8 137C 0010 0019             		move.b	#$10,$19(a1)
0001BCFE 137C 0010 0016             		move.b	#$10,$16(a1)
0001BD04 137C 0003 0018             		move.b	#3,$18(a1)
0001BD0A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BD0E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BD14 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BD18 137C 0008 0024             		move.b	#8,$24(a1)
0001BD1E 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BD22                            
0001BD22                            Obj83_ExitMake:
0001BD22 5428 0024                  		addq.b	#2,$24(a0)
0001BD26 4E75                       		rts	
0001BD28                            ; ===========================================================================
0001BD28                            
0001BD28                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BD28 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BD2E 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BD30 4228 001A                  		clr.b	$1A(a0)
0001BD34 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BD38                            
0001BD38                            Obj83_Solid:
0001BD38 7000                       		moveq	#0,d0
0001BD3A 1028 001A                  		move.b	$1A(a0),d0
0001BD3E 4400                       		neg.b	d0
0001BD40 4880                       		ext.w	d0
0001BD42 5040                       		addq.w	#8,d0
0001BD44 E940                       		asl.w	#4,d0
0001BD46 383C 2100                  		move.w	#$2100,d4
0001BD4A 9840                       		sub.w	d0,d4
0001BD4C 1140 0019                  		move.b	d0,$19(a0)
0001BD50 3144 0008                  		move.w	d4,8(a0)
0001BD54 720B                       		moveq	#$B,d1
0001BD56 D240                       		add.w	d0,d1
0001BD58 7410                       		moveq	#$10,d2
0001BD5A 7611                       		moveq	#$11,d3
0001BD5C 4EF9 0001 1564             		jmp	SolidObject
0001BD62                            ; ===========================================================================
0001BD62                            
0001BD62                            loc_19C36:				; XREF: Obj83_Index
0001BD62 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BD68 6400                       		bcc.s	Obj83_Solid2
0001BD6A 70FF                       		moveq	#-1,d0
0001BD6C 1028 001A                  		move.b	$1A(a0),d0
0001BD70 4880                       		ext.w	d0
0001BD72 D040                       		add.w	d0,d0
0001BD74 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BD78 2240                       		movea.l	d0,a1
0001BD7A 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BD80 5228 001A                  		addq.b	#1,$1A(a0)
0001BD84 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BD8A 6700                       		beq.s	loc_19C62
0001BD8C                            
0001BD8C                            Obj83_Solid2:
0001BD8C 60AA                       		bra.s	Obj83_Solid
0001BD8E                            ; ===========================================================================
0001BD8E                            
0001BD8E                            loc_19C62:				; XREF: Obj83_Index
0001BD8E 08A8 0003 0022             		bclr	#3,$22(a0)
0001BD94 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BD9A 6000 FBBC                  		bra.w	loc_1982C
0001BD9E                            ; ===========================================================================
0001BD9E                            
0001BD9E                            loc_19C72:				; XREF: Obj83_Index
0001BD9E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BDA4 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BDA6 4EF9 0000 F186             		jmp	DisplaySprite
0001BDAC                            ; ===========================================================================
0001BDAC                            
0001BDAC                            loc_19C80:				; XREF: Obj83_Index
0001BDAC 4A28 0001                  		tst.b	1(a0)
0001BDB0 6A00 FBA6                  		bpl.w	loc_1982C
0001BDB4 4EB9 0000 F14C             		jsr	ObjectFall
0001BDBA 4EF9 0000 F186             		jmp	DisplaySprite
0001BDC0                            ; ===========================================================================
0001BDC0                            
0001BDC0                            Obj83_Break:				; XREF: loc_19C72
0001BDC0 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BDC4 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BDC8 7801                       		moveq	#1,d4
0001BDCA 7203                       		moveq	#3,d1
0001BDCC 7438                       		moveq	#$38,d2
0001BDCE 5428 0024                  		addq.b	#2,$24(a0)
0001BDD2 117C 0008 0019             		move.b	#8,$19(a0)
0001BDD8 117C 0008 0016             		move.b	#8,$16(a0)
0001BDDE 43D0                       		lea	(a0),a1
0001BDE0 6000                       		bra.s	Obj83_MakeFrag
0001BDE2                            ; ===========================================================================
0001BDE2                            
0001BDE2                            Obj83_LoopFrag:
0001BDE2 4EB9 0000 F630             		jsr	SingleObjLoad2
0001BDE8 6600                       		bne.s	Obj83_BreakSnd
0001BDEA                            
0001BDEA                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BDEA 45D0                       		lea	(a0),a2
0001BDEC 47D1                       		lea	(a1),a3
0001BDEE 7603                       		moveq	#3,d3
0001BDF0                            
0001BDF0                            loc_19CC4:
0001BDF0 26DA                       		move.l	(a2)+,(a3)+
0001BDF2 26DA                       		move.l	(a2)+,(a3)+
0001BDF4 26DA                       		move.l	(a2)+,(a3)+
0001BDF6 26DA                       		move.l	(a2)+,(a3)+
0001BDF8 51CB FFF6                  		dbf	d3,loc_19CC4
0001BDFC                            
0001BDFC 335C 0012                  		move.w	(a4)+,$12(a1)
0001BE00 361D                       		move.w	(a5)+,d3
0001BE02 D769 0008                  		add.w	d3,8(a1)
0001BE06 361D                       		move.w	(a5)+,d3
0001BE08 D769 000C                  		add.w	d3,$C(a1)
0001BE0C 1344 001A                  		move.b	d4,$1A(a1)
0001BE10 5244                       		addq.w	#1,d4
0001BE12 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BE16                            
0001BE16                            Obj83_BreakSnd:
0001BE16 303C 00CB                  		move.w	#$CB,d0
0001BE1A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BE20 4EF9 0000 F186             		jmp	DisplaySprite
0001BE26                            ; ===========================================================================
0001BE26 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BE2A 0120 00C0                  		dc.w $120, $C0
0001BE2E FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BE32 0010 0000                  		dc.w $10, 0
0001BE36 0000 0010                  		dc.w 0,	$10
0001BE3A 0010 0010                  		dc.w $10, $10
0001BE3E                            ; ---------------------------------------------------------------------------
0001BE3E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BE3E                            ; ---------------------------------------------------------------------------
0001BE3E                            Map_obj83:
0001BE3E                            	include "_maps\obj83.asm"
0001BE3E                            ; ---------------------------------------------------------------------------
0001BE3E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BE3E                            ; ---------------------------------------------------------------------------
0001BE3E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BE42 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BE46 0000                       		dc.w byte_19D46-Map_obj83
0001BE48 01                         byte_19D1C:	dc.b 1
0001BE49 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BE4E 02                         byte_19D22:	dc.b 2
0001BE4F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BE54 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BE59 00                         		dc.b 0
0001BE5A 02                         byte_19D2E:	dc.b 2
0001BE5B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BE60 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BE65 00                         		dc.b 0
0001BE66 02                         byte_19D3A:	dc.b 2
0001BE67 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BE6C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BE71 00                         		dc.b 0
0001BE72 02                         byte_19D46:	dc.b 2
0001BE73 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BE78 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BE7E 00                         		even
0001BE7E 00                         		even
0001BE7E                            
0001BE7E                            ; ===========================================================================
0001BE7E                            ; ---------------------------------------------------------------------------
0001BE7E                            ; Object 85 - Eggman (FZ)
0001BE7E                            ; ---------------------------------------------------------------------------
0001BE7E                            
0001BE7E                            Obj85_Delete:
0001BE7E 4EF9 0000 F1C2             		jmp	DeleteObject
0001BE84                            ; ===========================================================================
0001BE84                            
0001BE84                            Obj85:					; XREF: Obj_Index
0001BE84 7000                       		moveq	#0,d0
0001BE86 1028 0024                  		move.b	$24(a0),d0
0001BE8A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BE8E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BE92                            ; ===========================================================================
0001BE92 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BE94 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BE96 0000                       		dc.w loc_1A38E-Obj85_Index
0001BE98 0000                       		dc.w loc_1A346-Obj85_Index
0001BE9A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BE9C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BE9E 0000                       		dc.w loc_1A264-Obj85_Index
0001BEA0                            
0001BEA0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BEA6 0001 BB60                  		dc.l Map_obj82		; mappings pointer
0001BEAA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BEB0 0000 0000                  		dc.l Map_obj84
0001BEB4 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BEBA 0000 0000                  		dc.l Map_FZBoss
0001BEBE 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BEC4 0001 BB60                  		dc.l Map_obj82
0001BEC8 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BECE 0001 9E58                  		dc.l Map_Eggman
0001BED2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BED8 0001 9E58                  		dc.l Map_Eggman
0001BEDC                            
0001BEDC 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BEE1 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BEE6 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BEEB 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BEF0 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BEF5 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BEFA                            ; ===========================================================================
0001BEFA                            
0001BEFA                            Obj85_Main:				; XREF: Obj85_Index
0001BEFA 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BEFE 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BF02 2248                       		movea.l	a0,a1
0001BF04 7205                       		moveq	#5,d1
0001BF06 6000                       		bra.s	Obj85_LoadBoss
0001BF08                            ; ===========================================================================
0001BF08                            
0001BF08                            Obj85_Loop:
0001BF08 4EB9 0000 F630             		jsr	SingleObjLoad2
0001BF0E 6600                       		bne.s	loc_19E20
0001BF10                            
0001BF10                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BF10 12BC 0085                  		move.b	#$85,(a1)
0001BF14 335A 0008                  		move.w	(a2)+,8(a1)
0001BF18 335A 000C                  		move.w	(a2)+,$C(a1)
0001BF1C 335A 0002                  		move.w	(a2)+,2(a1)
0001BF20 235A 0004                  		move.l	(a2)+,4(a1)
0001BF24 135B 0024                  		move.b	(a3)+,$24(a1)
0001BF28 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BF2C 135B 0018                  		move.b	(a3)+,$18(a1)
0001BF30 135B 0017                  		move.b	(a3)+,$17(a1)
0001BF34 135B 0016                  		move.b	(a3)+,$16(a1)
0001BF38 137C 0004 0001             		move.b	#4,1(a1)
0001BF3E 08E8 0007 0001             		bset	#7,1(a0)
0001BF44 2348 0034                  		move.l	a0,$34(a1)
0001BF48 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BF4C                            
0001BF4C                            loc_19E20:
0001BF4C 45E8 0036                  		lea	$36(a0),a2
0001BF50 4EB9 0000 F61A             		jsr	SingleObjLoad
0001BF56 6600                       		bne.s	loc_19E5A
0001BF58 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BF5C 3489                       		move.w	a1,(a2)
0001BF5E 2348 0034                  		move.l	a0,$34(a1)
0001BF62 45E8 0038                  		lea	$38(a0),a2
0001BF66 7400                       		moveq	#0,d2
0001BF68 7203                       		moveq	#3,d1
0001BF6A                            
0001BF6A                            loc_19E3E:
0001BF6A 4EB9 0000 F630             		jsr	SingleObjLoad2
0001BF70 6600                       		bne.s	loc_19E5A
0001BF72 34C9                       		move.w	a1,(a2)+
0001BF74 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BF78 2348 0034                  		move.l	a0,$34(a1)
0001BF7C 1342 0028                  		move.b	d2,$28(a1)
0001BF80 5442                       		addq.w	#2,d2
0001BF82 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BF86                            
0001BF86                            loc_19E5A:
0001BF86 317C 0000 0034             		move.w	#0,$34(a0)
0001BF8C 117C 0001 0021             		move.b	#1,$21(a0)	; set number of	hits to	1
0001BF92 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BF98                            
0001BF98                            Obj85_Eggman:				; XREF: Obj85_Index
0001BF98 7000                       		moveq	#0,d0
0001BF9A 1028 0034                  		move.b	$34(a0),d0
0001BF9E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BFA2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BFA6 4EF9 0000 F186             		jmp	DisplaySprite
0001BFAC                            ; ===========================================================================
0001BFAC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BFB0 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BFB4 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BFB8 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BFBC                            ; ===========================================================================
0001BFBC                            
0001BFBC                            loc_19E90:				; XREF: off_19E80
0001BFBC 4AB8 F680                  		tst.l	($FFFFF680).w
0001BFC0 6600                       		bne.s	loc_19EA2
0001BFC2 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BFC8 6500                       		bcs.s	loc_19EA2
0001BFCA 5428 0034                  		addq.b	#2,$34(a0)
0001BFCE                            
0001BFCE                            loc_19EA2:
0001BFCE 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BFD2 4E75                       		rts	
0001BFD4                            ; ===========================================================================
0001BFD4                            
0001BFD4                            loc_19EA8:				; XREF: off_19E80
0001BFD4 4A68 0030                  		tst.w	$30(a0)
0001BFD8 6A00                       		bpl.s	loc_19F10
0001BFDA 4268 0030                  		clr.w	$30(a0)
0001BFDE 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001BFE4 0240 000C                  		andi.w	#$C,d0
0001BFE8 3200                       		move.w	d0,d1
0001BFEA 5441                       		addq.w	#2,d1
0001BFEC 4A80                       		tst.l	d0
0001BFEE 6A00                       		bpl.s	loc_19EC6
0001BFF0 C141                       		exg	d1,d0
0001BFF2                            
0001BFF2                            loc_19EC6:
0001BFF2 43FA 0000                  		lea	word_19FD6(pc),a1
0001BFF6 3031 0000                  		move.w	(a1,d0.w),d0
0001BFFA 3231 1000                  		move.w	(a1,d1.w),d1
0001BFFE 3140 0030                  		move.w	d0,$30(a0)
0001C002 74FF                       		moveq	#-1,d2
0001C004 3430 0038                  		move.w	$38(a0,d0.w),d2
0001C008 2242                       		movea.l	d2,a1
0001C00A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C010 337C FFFF 0030             		move.w	#-1,$30(a1)
0001C016 3430 1038                  		move.w	$38(a0,d1.w),d2
0001C01A 2242                       		movea.l	d2,a1
0001C01C 137C 0001 0029             		move.b	#1,$29(a1)
0001C022 337C 0000 0030             		move.w	#0,$30(a1)
0001C028 317C 0001 0032             		move.w	#1,$32(a0)
0001C02E 4228 0035                  		clr.b	$35(a0)
0001C032 303C 00B7                  		move.w	#$B7,d0
0001C036 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001C03C                            
0001C03C                            loc_19F10:
0001C03C 4A68 0032                  		tst.w	$32(a0)
0001C040 6B00 0000                  		bmi.w	loc_19FA6
0001C044 08A8 0000 0022             		bclr	#0,$22(a0)
0001C04A 3038 D008                  		move.w	($FFFFD008).w,d0
0001C04E 9068 0008                  		sub.w	8(a0),d0
0001C052 6500                       		bcs.s	loc_19F2E
0001C054 08E8 0000 0022             		bset	#0,$22(a0)
0001C05A                            
0001C05A                            loc_19F2E:
0001C05A 323C 002B                  		move.w	#$2B,d1
0001C05E 343C 0014                  		move.w	#$14,d2
0001C062 363C 0014                  		move.w	#$14,d3
0001C066 3828 0008                  		move.w	8(a0),d4
0001C06A 4EB9 0001 1564             		jsr	SolidObject
0001C070 4A44                       		tst.w	d4
0001C072 6E00                       		bgt.s	loc_19F50
0001C074                            
0001C074                            loc_19F48:
0001C074 4A28 0035                  		tst.b	$35(a0)
0001C078 6600                       		bne.s	loc_19F88
0001C07A 6000                       		bra.s	loc_19F96
0001C07C                            ; ===========================================================================
0001C07C                            
0001C07C                            loc_19F50:
0001C07C 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001C080 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001C086 66EC                       		bne.s	loc_19F48
0001C088 303C 0300                  		move.w	#$300,d0
0001C08C 0828 0000 0022             		btst	#0,$22(a0)
0001C092 6600                       		bne.s	loc_19F6A
0001C094 4440                       		neg.w	d0
0001C096                            
0001C096                            loc_19F6A:
0001C096 31C0 D010                  		move.w	d0,($FFFFD010).w
0001C09A 4A28 0035                  		tst.b	$35(a0)
0001C09E 6600                       		bne.s	loc_19F88
0001C0A0 5328 0021                  		subq.b	#1,$21(a0)
0001C0A4 117C 0064 0035             		move.b	#$64,$35(a0)
0001C0AA 303C 00AC                  		move.w	#$AC,d0
0001C0AE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C0B4                            
0001C0B4                            loc_19F88:
0001C0B4 5328 0035                  		subq.b	#1,$35(a0)
0001C0B8 6700                       		beq.s	loc_19F96
0001C0BA 117C 0003 001C             		move.b	#3,$1C(a0)
0001C0C0 6000                       		bra.s	loc_19F9C
0001C0C2                            ; ===========================================================================
0001C0C2                            
0001C0C2                            loc_19F96:
0001C0C2 117C 0001 001C             		move.b	#1,$1C(a0)
0001C0C8                            
0001C0C8                            loc_19F9C:
0001C0C8 43FA FA64                  		lea	Ani_obj82(pc),a1
0001C0CC 4EF9 0000 C138             		jmp	AnimateSprite
0001C0D2                            ; ===========================================================================
0001C0D2                            
0001C0D2                            loc_19FA6:
0001C0D2 4A28 0021                  		tst.b	$21(a0)
0001C0D6 6700                       		beq.s	loc_19FBC
0001C0D8 5428 0034                  		addq.b	#2,$34(a0)
0001C0DC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C0E2 4268 0032                  		clr.w	$32(a0)
0001C0E6 4E75                       		rts	
0001C0E8                            ; ===========================================================================
0001C0E8                            
0001C0E8                            loc_19FBC:
0001C0E8 117C 0006 0034             		move.b	#6,$34(a0)
0001C0EE 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C0F4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C0FA 117C 0014 0016             		move.b	#$14,$16(a0)
0001C100 4E75                       		rts	
0001C102                            ; ===========================================================================
0001C102 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C112                            ; ===========================================================================
0001C112                            
0001C112                            loc_19FE6:				; XREF: off_19E80
0001C112 70FF                       		moveq	#-1,d0
0001C114 3028 0036                  		move.w	$36(a0),d0
0001C118 2240                       		movea.l	d0,a1
0001C11A 4A68 0030                  		tst.w	$30(a0)
0001C11E 6A00                       		bpl.s	loc_1A000
0001C120 4268 0030                  		clr.w	$30(a0)
0001C124 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C12A 6100                       		bsr.s	loc_1A020
0001C12C                            
0001C12C                            loc_1A000:
0001C12C 700F                       		moveq	#$F,d0
0001C12E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C132 6600                       		bne.s	loc_1A00A
0001C134 6100                       		bsr.s	loc_1A020
0001C136                            
0001C136                            loc_1A00A:
0001C136 4A68 0032                  		tst.w	$32(a0)
0001C13A 6700                       		beq.s	locret_1A01E
0001C13C 5528 0034                  		subq.b	#2,$34(a0)
0001C140 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C146 4268 0032                  		clr.w	$32(a0)
0001C14A                            
0001C14A                            locret_1A01E:
0001C14A 4E75                       		rts	
0001C14C                            ; ===========================================================================
0001C14C                            
0001C14C                            loc_1A020:
0001C14C 303C 00B1                  		move.w	#$B1,d0
0001C150 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C156                            ; ===========================================================================
0001C156                            
0001C156                            loc_1A02A:				; XREF: off_19E80
0001C156 117C 0030 0017             		move.b	#$30,$17(a0)
0001C15C 08E8 0000 0022             		bset	#0,$22(a0)
0001C162 4EB9 0000 F16C             		jsr	SpeedToPos
0001C168 117C 0006 001A             		move.b	#6,$1A(a0)
0001C16E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C174 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C17A 6500                       		bcs.s	loc_1A070
0001C17C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C182 5428 0034                  		addq.b	#2,$34(a0)
0001C186 117C 0020 0017             		move.b	#$20,$17(a0)
0001C18C 317C 0100 0010             		move.w	#$100,$10(a0)
0001C192 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C198 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C19C                            
0001C19C                            loc_1A070:
0001C19C 6000 0000                  		bra.w	loc_1A166
0001C1A0                            ; ===========================================================================
0001C1A0                            
0001C1A0                            loc_1A074:				; XREF: off_19E80
0001C1A0 08E8 0000 0022             		bset	#0,$22(a0)
0001C1A6 117C 0004 001C             		move.b	#4,$1C(a0)
0001C1AC 4EB9 0000 F16C             		jsr	SpeedToPos
0001C1B2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C1B8 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C1BE 6500                       		bcs.s	loc_1A09A
0001C1C0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C1C6                            
0001C1C6                            loc_1A09A:
0001C1C6 317C 0400 0010             		move.w	#$400,$10(a0)
0001C1CC 3028 0008                  		move.w	8(a0),d0
0001C1D0 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C1D4 6A00                       		bpl.s	loc_1A0B4
0001C1D6 317C 0500 0010             		move.w	#$500,$10(a0)
0001C1DC 6000 0000                  		bra.w	loc_1A0F2
0001C1E0                            ; ===========================================================================
0001C1E0                            
0001C1E0                            loc_1A0B4:
0001C1E0 0440 0070                  		subi.w	#$70,d0
0001C1E4 6500                       		bcs.s	loc_1A0F2
0001C1E6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C1EC 5140                       		subq.w	#8,d0
0001C1EE 6500                       		bcs.s	loc_1A0F2
0001C1F0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C1F6 5140                       		subq.w	#8,d0
0001C1F8 6500                       		bcs.s	loc_1A0F2
0001C1FA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C200 5140                       		subq.w	#8,d0
0001C202 6500                       		bcs.s	loc_1A0F2
0001C204 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C20A 5140                       		subq.w	#8,d0
0001C20C 6500                       		bcs.s	loc_1A0F2
0001C20E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C214 0440 0038                  		subi.w	#$38,d0
0001C218 6500                       		bcs.s	loc_1A0F2
0001C21A 4268 0010                  		clr.w	$10(a0)
0001C21E                            
0001C21E                            loc_1A0F2:
0001C21E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C224 6500                       		bcs.s	loc_1A110
0001C226 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C22C 317C 0240 0010             		move.w	#$240,$10(a0)
0001C232 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C238 5428 0034                  		addq.b	#2,$34(a0)
0001C23C                            
0001C23C                            loc_1A110:
0001C23C 6000                       		bra.s	loc_1A15C
0001C23E                            ; ===========================================================================
0001C23E                            
0001C23E                            loc_1A112:				; XREF: off_19E80
0001C23E 4EB9 0000 F16C             		jsr	SpeedToPos
0001C244 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C24A 6500                       		bcs.s	loc_1A124
0001C24C 4268 0010                  		clr.w	$10(a0)
0001C250                            
0001C250                            loc_1A124:
0001C250 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C256 4A68 0012                  		tst.w	$12(a0)
0001C25A 6B00                       		bmi.s	loc_1A142
0001C25C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C262 6500                       		bcs.s	loc_1A142
0001C264 317C 0592 000C             		move.w	#$592,$C(a0)
0001C26A 4268 0012                  		clr.w	$12(a0)
0001C26E                            
0001C26E                            loc_1A142:
0001C26E 3028 0010                  		move.w	$10(a0),d0
0001C272 8068 0012                  		or.w	$12(a0),d0
0001C276 6600                       		bne.s	loc_1A15C
0001C278 5428 0034                  		addq.b	#2,$34(a0)
0001C27C 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C282 117C 0001 0021             		move.b	#1,$21(a0)
0001C288                            
0001C288                            loc_1A15C:
0001C288 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001C28C 4EB9 0000 C138             		jsr	AnimateSprite
0001C292                            
0001C292                            loc_1A166:
0001C292 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C298 6C00                       		bge.s	loc_1A172
0001C29A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C29E                            
0001C29E                            loc_1A172:
0001C29E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C2A4 6C00                       		bge.s	locret_1A190
0001C2A6 323C 001B                  		move.w	#$1B,d1
0001C2AA 343C 0070                  		move.w	#$70,d2
0001C2AE 363C 0071                  		move.w	#$71,d3
0001C2B2 3828 0008                  		move.w	8(a0),d4
0001C2B6 4EF9 0001 1564             		jmp	SolidObject
0001C2BC                            ; ===========================================================================
0001C2BC                            
0001C2BC                            locret_1A190:
0001C2BC 4E75                       		rts	
0001C2BE                            ; ===========================================================================
0001C2BE                            
0001C2BE                            loc_1A192:				; XREF: off_19E80
0001C2BE 217C 0001 9E58 0004        		move.l	#Map_Eggman,4(a0)
0001C2C6 317C 0400 0002             		move.w	#$400,2(a0)
0001C2CC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C2D2 08E8 0000 0022             		bset	#0,$22(a0)
0001C2D8 4EB9 0000 F16C             		jsr	SpeedToPos
0001C2DE 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C2E4 6400                       		bcc.s	loc_1A1D0
0001C2E6 317C 0180 0010             		move.w	#$180,$10(a0)
0001C2EC 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C2F2 117C 000F 0020             		move.b	#$F,$20(a0)
0001C2F8 5428 0034                  		addq.b	#2,$34(a0)
0001C2FC                            
0001C2FC                            loc_1A1D0:
0001C2FC 6000 FF8A                  		bra.w	loc_1A15C
0001C300                            ; ===========================================================================
0001C300                            
0001C300                            loc_1A1D4:				; XREF: off_19E80
0001C300 08E8 0000 0022             		bset	#0,$22(a0)
0001C306 4EB9 0000 F16C             		jsr	SpeedToPos
0001C30C 4A68 0030                  		tst.w	$30(a0)
0001C310 6600                       		bne.s	loc_1A1FC
0001C312 4A28 0020                  		tst.b	$20(a0)
0001C316 6600                       		bne.s	loc_1A216
0001C318 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C31E 303C 00AC                  		move.w	#$AC,d0
0001C322 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C328                            
0001C328                            loc_1A1FC:
0001C328 5368 0030                  		subq.w	#1,$30(a0)
0001C32C 6600                       		bne.s	loc_1A216
0001C32E 4A28 0022                  		tst.b	$22(a0)
0001C332 6A00                       		bpl.s	loc_1A210
0001C334 317C 0060 0012             		move.w	#$60,$12(a0)
0001C33A 6000                       		bra.s	loc_1A216
0001C33C                            ; ===========================================================================
0001C33C                            
0001C33C                            loc_1A210:
0001C33C 117C 000F 0020             		move.b	#$F,$20(a0)
0001C342                            
0001C342                            loc_1A216:
0001C342 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C348 6D00                       		blt.s	loc_1A23A
0001C34A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C350 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C356 4278 D014                  		clr.w	($FFFFD014).w
0001C35A 4A68 0012                  		tst.w	$12(a0)
0001C35E 6A00                       		bpl.s	loc_1A248
0001C360 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C366                            
0001C366                            loc_1A23A:
0001C366 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C36C 6D00                       		blt.s	loc_1A248
0001C36E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C374                            
0001C374                            loc_1A248:
0001C374 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C37A 6500                       		bcs.s	loc_1A260
0001C37C 4A28 0001                  		tst.b	1(a0)
0001C380 6B00                       		bmi.s	loc_1A260
0001C382 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C388 6000 FAF4                  		bra.w	Obj85_Delete
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            loc_1A260:
0001C38C 6000 FEFA                  		bra.w	loc_1A15C
0001C390                            ; ===========================================================================
0001C390                            
0001C390                            loc_1A264:				; XREF: Obj85_Index
0001C390 2268 0034                  		movea.l	$34(a0),a1
0001C394 1011                       		move.b	(a1),d0
0001C396 B010                       		cmp.b	(a0),d0
0001C398 6600 FAE4                  		bne.w	Obj85_Delete
0001C39C 117C 0007 001C             		move.b	#7,$1C(a0)
0001C3A2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C3A8 6C00                       		bge.s	loc_1A280
0001C3AA 6000                       		bra.s	loc_1A2A6
0001C3AC                            ; ===========================================================================
0001C3AC                            
0001C3AC                            loc_1A280:
0001C3AC 4A69 0010                  		tst.w	$10(a1)
0001C3B0 6700                       		beq.s	loc_1A28C
0001C3B2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C3B8                            
0001C3B8                            loc_1A28C:
0001C3B8 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001C3BC 4EB9 0000 C138             		jsr	AnimateSprite
0001C3C2                            
0001C3C2                            loc_1A296:
0001C3C2 2268 0034                  		movea.l	$34(a0),a1
0001C3C6 3169 0008 0008             		move.w	8(a1),8(a0)
0001C3CC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C3D2                            
0001C3D2                            loc_1A2A6:
0001C3D2 2268 0034                  		movea.l	$34(a0),a1
0001C3D6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C3DC 7003                       		moveq	#3,d0
0001C3DE C028 0022                  		and.b	$22(a0),d0
0001C3E2 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C3E8 8128 0001                  		or.b	d0,1(a0)
0001C3EC 4EF9 0000 F186             		jmp	DisplaySprite
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            loc_1A2C6:				; XREF: Obj85_Index
0001C3F2 2268 0034                  		movea.l	$34(a0),a1
0001C3F6 1011                       		move.b	(a1),d0
0001C3F8 B010                       		cmp.b	(a0),d0
0001C3FA 6600 FA82                  		bne.w	Obj85_Delete
0001C3FE 0CA9 0001 9E58 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C406 6700                       		beq.s	loc_1A2E4
0001C408 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C40E 60C2                       		bra.s	loc_1A2A6
0001C410                            ; ===========================================================================
0001C410                            
0001C410                            loc_1A2E4:
0001C410 117C 0001 001C             		move.b	#1,$1C(a0)
0001C416 4A29 0021                  		tst.b	$21(a1)
0001C41A 6F00                       		ble.s	loc_1A312
0001C41C 117C 0006 001C             		move.b	#6,$1C(a0)
0001C422 217C 0001 9E58 0004        		move.l	#Map_Eggman,4(a0)
0001C42A 317C 0400 0002             		move.w	#$400,2(a0)
0001C430 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001C434 4EB9 0000 C138             		jsr	AnimateSprite
0001C43A 6000 FF86                  		bra.w	loc_1A296
0001C43E                            ; ===========================================================================
0001C43E                            
0001C43E                            loc_1A312:
0001C43E 4A28 0001                  		tst.b	1(a0)
0001C442 6A00 FA3A                  		bpl.w	Obj85_Delete
0001C446 6100 D512                  		bsr.w	BossDefeated
0001C44A 117C 0002 0018             		move.b	#2,$18(a0)
0001C450 117C 0000 001C             		move.b	#0,$1C(a0)
0001C456 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C45E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C464 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C468 4EB9 0000 C138             		jsr	AnimateSprite
0001C46E 6000 FF52                  		bra.w	loc_1A296
0001C472                            ; ===========================================================================
0001C472                            
0001C472                            loc_1A346:				; XREF: Obj85_Index
0001C472 08E8 0000 0022             		bset	#0,$22(a0)
0001C478 2268 0034                  		movea.l	$34(a0),a1
0001C47C 0CA9 0001 9E58 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C484 6700                       		beq.s	loc_1A35E
0001C486 6000 FF4A                  		bra.w	loc_1A2A6
0001C48A                            ; ===========================================================================
0001C48A                            
0001C48A                            loc_1A35E:
0001C48A 3169 0008 0008             		move.w	8(a1),8(a0)
0001C490 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C496 4A28 001E                  		tst.b	$1E(a0)
0001C49A 6600                       		bne.s	loc_1A376
0001C49C 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C4A2                            
0001C4A2                            loc_1A376:
0001C4A2 5328 001E                  		subq.b	#1,$1E(a0)
0001C4A6 6E00                       		bgt.s	loc_1A38A
0001C4A8 5228 001A                  		addq.b	#1,$1A(a0)
0001C4AC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C4B2 6E00 F9CA                  		bgt.w	Obj85_Delete
0001C4B6                            
0001C4B6                            loc_1A38A:
0001C4B6 6000 FF0A                  		bra.w	loc_1A296
0001C4BA                            ; ===========================================================================
0001C4BA                            
0001C4BA                            loc_1A38E:				; XREF: Obj85_Index
0001C4BA 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C4C0 3038 D008                  		move.w	($FFFFD008).w,d0
0001C4C4 9068 0008                  		sub.w	8(a0),d0
0001C4C8 6500                       		bcs.s	loc_1A3A6
0001C4CA 4A28 0001                  		tst.b	1(a0)
0001C4CE 6A00 F9AE                  		bpl.w	Obj85_Delete
0001C4D2                            
0001C4D2                            loc_1A3A6:
0001C4D2 4EF9 0000 F186             		jmp	DisplaySprite
0001C4D8                            ; ===========================================================================
0001C4D8                            
0001C4D8                            loc_1A3AC:				; XREF: Obj85_Index
0001C4D8 117C 0000 001A             		move.b	#0,$1A(a0)
0001C4DE 08E8 0000 0022             		bset	#0,$22(a0)
0001C4E4 2268 0034                  		movea.l	$34(a0),a1
0001C4E8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C4EE 6600                       		bne.s	loc_1A3D0
0001C4F0 0CA9 0001 9E58 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C4F8 6700 F984                  		beq.w	Obj85_Delete
0001C4FC                            
0001C4FC                            loc_1A3D0:
0001C4FC 6000 FED4                  		bra.w	loc_1A2A6
0001C500                            ; ===========================================================================
0001C500                            Ani_obj85:
0001C500                            	include "_anim\obj85.asm"
0001C500                            ; ---------------------------------------------------------------------------
0001C500                            ; Animation script - Eggman (FZ)
0001C500                            ; ---------------------------------------------------------------------------
0001C500 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C502 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C506                            		even
0001C506                            		even
0001C506                            
0001C506                            Map_Eggman2:
0001C506                            	include "_maps\Eggman2.asm"
0001C506                            ; ---------------------------------------------------------------------------
0001C506                            ; Sprite mappings - Eggman (FZ)
0001C506                            ; ---------------------------------------------------------------------------
0001C506 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C508 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C50A 06                         byte_1A3DE:	dc.b 6
0001C50B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C510 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C515 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C51A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C51F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C524 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C529 06                         byte_1A3FD:	dc.b 6
0001C52A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C52F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C534 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C539 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C53E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C543 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C548                            		even
0001C548                            		even
0001C548                            
0001C548                            Map_FZBoss:
0001C548                            	include "_maps\FZ boss.asm"
0001C548                            ; ---------------------------------------------------------------------------
0001C548                            ; Sprite mappings - boss (FZ)
0001C548                            ; ---------------------------------------------------------------------------
0001C548 0000                       		dc.w byte_1A422-Map_FZBoss
0001C54A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C54C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C54E 02                         byte_1A422:	dc.b 2
0001C54F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C554 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C559 03                         byte_1A42D:	dc.b 3
0001C55A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C55F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C564 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C569 02                         byte_1A43D:	dc.b 2
0001C56A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C56F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C574                            		even
0001C574                            		even
0001C574                            
0001C574                            ; ===========================================================================
0001C574                            
0001C574                            Obj84_Delete:
0001C574 4EF9 0000 F1C2             		jmp	DeleteObject
0001C57A                            ; ===========================================================================
0001C57A                            ; ---------------------------------------------------------------------------
0001C57A                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C57A                            ; ---------------------------------------------------------------------------
0001C57A                            
0001C57A                            Obj84:					; XREF: Obj_Index
0001C57A 7000                       		moveq	#0,d0
0001C57C 1028 0024                  		move.b	$24(a0),d0
0001C580 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C584 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C588                            ; ===========================================================================
0001C588 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C58A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C58C 0000                       		dc.w loc_1A57E-Obj84_Index
0001C58E                            
0001C58E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C592 2550 0620                  		dc.w $2550, $620
0001C596 2490 04C0                  		dc.w $2490, $4C0
0001C59A 2510 04C0                  		dc.w $2510, $4C0
0001C59E                            ; ===========================================================================
0001C59E                            
0001C59E                            Obj84_Main:				; XREF: Obj84_Index
0001C59E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C5A2 7000                       		moveq	#0,d0
0001C5A4 1028 0028                  		move.b	$28(a0),d0
0001C5A8 D040                       		add.w	d0,d0
0001C5AA D2C0                       		adda.w	d0,a1
0001C5AC 117C 0004 0001             		move.b	#4,1(a0)
0001C5B2 08E8 0007 0001             		bset	#7,1(a0)
0001C5B8 08E8 0004 0001             		bset	#4,1(a0)
0001C5BE 317C 0300 0002             		move.w	#$300,2(a0)
0001C5C4 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C5CC 3159 0008                  		move.w	(a1)+,8(a0)
0001C5D0 3151 000C                  		move.w	(a1),$C(a0)
0001C5D4 3159 0038                  		move.w	(a1)+,$38(a0)
0001C5D8 117C 0020 0016             		move.b	#$20,$16(a0)
0001C5DE 117C 0060 0017             		move.b	#$60,$17(a0)
0001C5E4 117C 0020 0019             		move.b	#$20,$19(a0)
0001C5EA 117C 0060 0016             		move.b	#$60,$16(a0)
0001C5F0 117C 0003 0018             		move.b	#3,$18(a0)
0001C5F6 5428 0024                  		addq.b	#2,$24(a0)
0001C5FA                            
0001C5FA                            loc_1A4CE:				; XREF: Obj84_Index
0001C5FA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C600 6F00                       		ble.s	loc_1A4DC
0001C602 08E8 0001 0001             		bset	#1,1(a0)
0001C608                            
0001C608                            loc_1A4DC:
0001C608 42A8 003C                  		clr.l	$3C(a0)
0001C60C 4A28 0029                  		tst.b	$29(a0)
0001C610 6700                       		beq.s	loc_1A4EA
0001C612 5428 0024                  		addq.b	#2,$24(a0)
0001C616                            
0001C616                            loc_1A4EA:
0001C616 2028 003C                  		move.l	$3C(a0),d0
0001C61A 2228 0038                  		move.l	$38(a0),d1
0001C61E D280                       		add.l	d0,d1
0001C620 4841                       		swap	d1
0001C622 3141 000C                  		move.w	d1,$C(a0)
0001C626 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C62C 6600                       		bne.s	loc_1A524
0001C62E 4A68 0030                  		tst.w	$30(a0)
0001C632 6A00                       		bpl.s	loc_1A524
0001C634 70F6                       		moveq	#-$A,d0
0001C636 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C63C 6F00                       		ble.s	loc_1A514
0001C63E 700E                       		moveq	#$E,d0
0001C640                            
0001C640                            loc_1A514:
0001C640 D240                       		add.w	d0,d1
0001C642 2268 0034                  		movea.l	$34(a0),a1
0001C646 3341 000C                  		move.w	d1,$C(a1)
0001C64A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C650                            
0001C650                            loc_1A524:
0001C650 323C 002B                  		move.w	#$2B,d1
0001C654 343C 0060                  		move.w	#$60,d2
0001C658 363C 0061                  		move.w	#$61,d3
0001C65C 3828 0008                  		move.w	8(a0),d4
0001C660 4EB9 0001 1564             		jsr	SolidObject
0001C666 7000                       		moveq	#0,d0
0001C668 3228 003C                  		move.w	$3C(a0),d1
0001C66C 6A00                       		bpl.s	loc_1A550
0001C66E 4441                       		neg.w	d1
0001C670 5141                       		subq.w	#8,d1
0001C672 6500                       		bcs.s	loc_1A55C
0001C674 5200                       		addq.b	#1,d0
0001C676 E841                       		asr.w	#4,d1
0001C678 D041                       		add.w	d1,d0
0001C67A 6000                       		bra.s	loc_1A55C
0001C67C                            ; ===========================================================================
0001C67C                            
0001C67C                            loc_1A550:
0001C67C 0441 0027                  		subi.w	#$27,d1
0001C680 6500                       		bcs.s	loc_1A55C
0001C682 5200                       		addq.b	#1,d0
0001C684 E841                       		asr.w	#4,d1
0001C686 D041                       		add.w	d1,d0
0001C688                            
0001C688                            loc_1A55C:
0001C688 1140 001A                  		move.b	d0,$1A(a0)
0001C68C 3038 D008                  		move.w	($FFFFD008).w,d0
0001C690 9068 0008                  		sub.w	8(a0),d0
0001C694 6B00                       		bmi.s	loc_1A578
0001C696 0440 0140                  		subi.w	#$140,d0
0001C69A 6B00                       		bmi.s	loc_1A578
0001C69C 4A28 0001                  		tst.b	1(a0)
0001C6A0 6A00 FED2                  		bpl.w	Obj84_Delete
0001C6A4                            
0001C6A4                            loc_1A578:
0001C6A4 4EF9 0000 F186             		jmp	DisplaySprite
0001C6AA                            ; ===========================================================================
0001C6AA                            
0001C6AA                            loc_1A57E:				; XREF: Obj84_Index
0001C6AA 7000                       		moveq	#0,d0
0001C6AC 1028 0028                  		move.b	$28(a0),d0
0001C6B0 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C6B4 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C6B8 6000 FF5C                  		bra.w	loc_1A4EA
0001C6BC                            ; ===========================================================================
0001C6BC 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C6BE 0000                       		dc.w loc_1A598-off_1A590
0001C6C0 0000                       		dc.w loc_1A604-off_1A590
0001C6C2 0000                       		dc.w loc_1A604-off_1A590
0001C6C4                            ; ===========================================================================
0001C6C4                            
0001C6C4                            loc_1A598:				; XREF: off_1A590
0001C6C4 4A28 0029                  		tst.b	$29(a0)
0001C6C8 6600                       		bne.s	loc_1A5D4
0001C6CA 2268 0034                  		movea.l	$34(a0),a1
0001C6CE 4A29 0021                  		tst.b	$21(a1)
0001C6D2 6600                       		bne.s	loc_1A5B4
0001C6D4 6100 D284                  		bsr.w	BossDefeated
0001C6D8 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C6E0                            
0001C6E0                            loc_1A5B4:
0001C6E0 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C6E8 6400                       		bcc.s	locret_1A602
0001C6EA 42A8 003C                  		clr.l	$3C(a0)
0001C6EE 2268 0034                  		movea.l	$34(a0),a1
0001C6F2 5369 0032                  		subq.w	#1,$32(a1)
0001C6F6 4269 0030                  		clr.w	$30(a1)
0001C6FA 5528 0024                  		subq.b	#2,$24(a0)
0001C6FE 4E75                       		rts	
0001C700                            ; ===========================================================================
0001C700                            
0001C700                            loc_1A5D4:
0001C700 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C706 6C00                       		bge.s	loc_1A5E4
0001C708 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C710                            
0001C710                            loc_1A5E4:
0001C710 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C718 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C71E 6E00                       		bgt.s	locret_1A602
0001C720 4268 003E                  		clr.w	$3E(a0)
0001C724 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C72A 4228 0029                  		clr.b	$29(a0)
0001C72E                            
0001C72E                            locret_1A602:
0001C72E 4E75                       		rts	
0001C730                            ; ===========================================================================
0001C730                            
0001C730                            loc_1A604:				; XREF: off_1A590
0001C730 08E8 0001 0001             		bset	#1,1(a0)
0001C736 4A28 0029                  		tst.b	$29(a0)
0001C73A 6600                       		bne.s	loc_1A646
0001C73C 2268 0034                  		movea.l	$34(a0),a1
0001C740 4A29 0021                  		tst.b	$21(a1)
0001C744 6600                       		bne.s	loc_1A626
0001C746 6100 D212                  		bsr.w	BossDefeated
0001C74A 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C752                            
0001C752                            loc_1A626:
0001C752 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C75A 6400                       		bcc.s	locret_1A674
0001C75C 42A8 003C                  		clr.l	$3C(a0)
0001C760 2268 0034                  		movea.l	$34(a0),a1
0001C764 5369 0032                  		subq.w	#1,$32(a1)
0001C768 4269 0030                  		clr.w	$30(a1)
0001C76C 5528 0024                  		subq.b	#2,$24(a0)
0001C770 4E75                       		rts	
0001C772                            ; ===========================================================================
0001C772                            
0001C772                            loc_1A646:
0001C772 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C778 6D00                       		blt.s	loc_1A656
0001C77A 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C782                            
0001C782                            loc_1A656:
0001C782 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C78A 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C790 6D00                       		blt.s	locret_1A674
0001C792 4268 003E                  		clr.w	$3E(a0)
0001C796 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C79C 4228 0029                  		clr.b	$29(a0)
0001C7A0                            
0001C7A0                            locret_1A674:
0001C7A0 4E75                       		rts	
0001C7A2                            ; ===========================================================================
0001C7A2                            ; ---------------------------------------------------------------------------
0001C7A2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C7A2                            ; ---------------------------------------------------------------------------
0001C7A2                            Map_obj84:
0001C7A2                            	include "_maps\obj84.asm"
0001C7A2                            ; ---------------------------------------------------------------------------
0001C7A2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C7A2                            ; ---------------------------------------------------------------------------
0001C7A2 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C7A6 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C7AA 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C7AE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C7B2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C7B6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C7BA 06                         byte_1A68E:	dc.b 6
0001C7BB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7C0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7C5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7CA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7CF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7D4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C7D9 08                         byte_1A6AD:	dc.b 8
0001C7DA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7DF A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7E4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7E9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7EE B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7F3 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C7F8 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C7FD D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C802 0A                         byte_1A6D6:	dc.b $A
0001C803 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C808 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C80D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C812 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C817 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C81C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C821 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C826 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C82B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C830 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C835 0C                         byte_1A709:	dc.b $C
0001C836 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C83B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C840 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C845 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C84A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C84F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C854 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C859 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C85E F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C863 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C868 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C86D 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C872 0D                         byte_1A746:	dc.b $D
0001C873 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C878 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C87D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C882 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C887 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C88C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C891 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C896 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C89B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C8A0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C8A5 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C8AA 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C8AF 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C8B4 0E                         byte_1A788:	dc.b $E
0001C8B5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C8BA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C8BF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C8C4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C8C9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C8CE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C8D3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C8D8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C8DD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C8E2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C8E7 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C8EC 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C8F1 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C8F6 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C8FB 02                         byte_1A7CF:	dc.b 2
0001C8FC F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C901 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C906                            		even
0001C906                            		even
0001C906                            
0001C906                            ; ===========================================================================
0001C906                            ; ---------------------------------------------------------------------------
0001C906                            ; Object 86 - energy balls (FZ)
0001C906                            ; ---------------------------------------------------------------------------
0001C906                            
0001C906                            Obj86:					; XREF: Obj_Index
0001C906 7000                       		moveq	#0,d0
0001C908 1028 0024                  		move.b	$24(a0),d0
0001C90C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C910 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C914                            ; ===========================================================================
0001C914 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C916 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C918 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C91A 0000                       		dc.w loc_1A962-Obj86_Index
0001C91C 0000                       		dc.w loc_1A982-Obj86_Index
0001C91E                            ; ===========================================================================
0001C91E                            
0001C91E                            Obj86_Main:				; XREF: Obj86_Index
0001C91E 317C 2588 0008             		move.w	#$2588,8(a0)
0001C924 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C92A 317C 0300 0002             		move.w	#$300,2(a0)
0001C930 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C938 117C 0000 001C             		move.b	#0,$1C(a0)
0001C93E 117C 0003 0018             		move.b	#3,$18(a0)
0001C944 117C 0008 0017             		move.b	#8,$17(a0)
0001C94A 117C 0008 0016             		move.b	#8,$16(a0)
0001C950 117C 0004 0001             		move.b	#4,1(a0)
0001C956 08E8 0007 0001             		bset	#7,1(a0)
0001C95C 5428 0024                  		addq.b	#2,$24(a0)
0001C960                            
0001C960                            Obj86_Generator:			; XREF: Obj86_Index
0001C960 2268 0034                  		movea.l	$34(a0),a1
0001C964 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C96A 6600                       		bne.s	loc_1A850
0001C96C 10BC 003F                  		move.b	#$3F,(a0)
0001C970 117C 0000 0024             		move.b	#0,$24(a0)
0001C976 4EF9 0000 F186             		jmp	DisplaySprite
0001C97C                            ; ===========================================================================
0001C97C                            
0001C97C                            loc_1A850:
0001C97C 117C 0000 001C             		move.b	#0,$1C(a0)
0001C982 4A28 0029                  		tst.b	$29(a0)
0001C986 6700                       		beq.s	loc_1A86C
0001C988 5428 0024                  		addq.b	#2,$24(a0)
0001C98C 117C 0001 001C             		move.b	#1,$1C(a0)
0001C992 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C998                            
0001C998                            loc_1A86C:
0001C998 323C 0013                  		move.w	#$13,d1
0001C99C 343C 0008                  		move.w	#8,d2
0001C9A0 363C 0011                  		move.w	#$11,d3
0001C9A4 3828 0008                  		move.w	8(a0),d4
0001C9A8 4EB9 0001 1564             		jsr	SolidObject
0001C9AE 3038 D008                  		move.w	($FFFFD008).w,d0
0001C9B2 9068 0008                  		sub.w	8(a0),d0
0001C9B6 6B00                       		bmi.s	loc_1A89A
0001C9B8 0440 0140                  		subi.w	#$140,d0
0001C9BC 6B00                       		bmi.s	loc_1A89A
0001C9BE 4A28 0001                  		tst.b	1(a0)
0001C9C2 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C9C6                            
0001C9C6                            loc_1A89A:
0001C9C6 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C9CA 4EB9 0000 C138             		jsr	AnimateSprite
0001C9D0 4EF9 0000 F186             		jmp	DisplaySprite
0001C9D6                            ; ===========================================================================
0001C9D6                            
0001C9D6                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C9D6 4A28 0029                  		tst.b	$29(a0)
0001C9DA 6700 0000                  		beq.w	loc_1A954
0001C9DE 4228 0029                  		clr.b	$29(a0)
0001C9E2 D068 0030                  		add.w	$30(a0),d0
0001C9E6 0240 001E                  		andi.w	#$1E,d0
0001C9EA D4C0                       		adda.w	d0,a2
0001C9EC 5868 0030                  		addq.w	#4,$30(a0)
0001C9F0 4268 0032                  		clr.w	$32(a0)
0001C9F4 7403                       		moveq	#3,d2
0001C9F6                            
0001C9F6                            Obj86_Loop:
0001C9F6 4EB9 0000 F630             		jsr	SingleObjLoad2
0001C9FC 6600 0000                  		bne.w	loc_1A954
0001CA00 12BC 0086                  		move.b	#$86,(a1)
0001CA04 3368 0008 0008             		move.w	8(a0),8(a1)
0001CA0A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001CA10 137C 0008 0024             		move.b	#8,$24(a1)
0001CA16 337C 2300 0002             		move.w	#$2300,2(a1)
0001CA1C 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001CA24 137C 000C 0016             		move.b	#$C,$16(a1)
0001CA2A 137C 000C 0017             		move.b	#$C,$17(a1)
0001CA30 137C 0000 0020             		move.b	#0,$20(a1)
0001CA36 137C 0003 0018             		move.b	#3,$18(a1)
0001CA3C 337C 003E 0028             		move.w	#$3E,$28(a1)
0001CA42 137C 0004 0001             		move.b	#4,1(a1)
0001CA48 08E9 0007 0001             		bset	#7,1(a1)
0001CA4E 2348 0034                  		move.l	a0,$34(a1)
0001CA52 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CA58 3228 0032                  		move.w	$32(a0),d1
0001CA5C C3FC FFB1                  		muls.w	#-$4F,d1
0001CA60 0641 2578                  		addi.w	#$2578,d1
0001CA64 0240 001F                  		andi.w	#$1F,d0
0001CA68 0440 0010                  		subi.w	#$10,d0
0001CA6C D041                       		add.w	d1,d0
0001CA6E 3340 0030                  		move.w	d0,$30(a1)
0001CA72 5268 0032                  		addq.w	#1,$32(a0)
0001CA76 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001CA7C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001CA80                            
0001CA80                            loc_1A954:
0001CA80 4A68 0032                  		tst.w	$32(a0)
0001CA84 6600                       		bne.s	loc_1A95E
0001CA86 5428 0024                  		addq.b	#2,$24(a0)
0001CA8A                            
0001CA8A                            loc_1A95E:
0001CA8A 6000 FF0C                  		bra.w	loc_1A86C
0001CA8E                            ; ===========================================================================
0001CA8E                            
0001CA8E                            loc_1A962:				; XREF: Obj86_Index
0001CA8E 117C 0002 001C             		move.b	#2,$1C(a0)
0001CA94 4A68 0038                  		tst.w	$38(a0)
0001CA98 6600                       		bne.s	loc_1A97E
0001CA9A 117C 0002 0024             		move.b	#2,$24(a0)
0001CAA0 2268 0034                  		movea.l	$34(a0),a1
0001CAA4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001CAAA                            
0001CAAA                            loc_1A97E:
0001CAAA 6000 FEEC                  		bra.w	loc_1A86C
0001CAAE                            ; ===========================================================================
0001CAAE                            
0001CAAE                            loc_1A982:				; XREF: Obj86_Index
0001CAAE 7000                       		moveq	#0,d0
0001CAB0 1028 0025                  		move.b	$25(a0),d0
0001CAB4 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001CAB8 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001CABC 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001CAC0 4EB9 0000 C138             		jsr	AnimateSprite
0001CAC6 4EF9 0000 F186             		jmp	DisplaySprite
0001CACC                            ; ===========================================================================
0001CACC 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CACE 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CAD0 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CAD2                            ; ===========================================================================
0001CAD2                            
0001CAD2                            loc_1A9A6:				; XREF: Obj86_Index2
0001CAD2 3028 0030                  		move.w	$30(a0),d0
0001CAD6 9068 0008                  		sub.w	8(a0),d0
0001CADA E940                       		asl.w	#4,d0
0001CADC 3140 0010                  		move.w	d0,$10(a0)
0001CAE0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CAE6 5428 0025                  		addq.b	#2,$25(a0)
0001CAEA 4E75                       		rts	
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            loc_1A9C0:				; XREF: Obj86_Index2
0001CAEC 4A68 0010                  		tst.w	$10(a0)
0001CAF0 6700                       		beq.s	loc_1A9E6
0001CAF2 4EB9 0000 F16C             		jsr	SpeedToPos
0001CAF8 3028 0008                  		move.w	8(a0),d0
0001CAFC 9068 0030                  		sub.w	$30(a0),d0
0001CB00 6400                       		bcc.s	loc_1A9E6
0001CB02 4268 0010                  		clr.w	$10(a0)
0001CB06 D168 0008                  		add.w	d0,8(a0)
0001CB0A 2268 0034                  		movea.l	$34(a0),a1
0001CB0E 5369 0032                  		subq.w	#1,$32(a1)
0001CB12                            
0001CB12                            loc_1A9E6:
0001CB12 117C 0000 001C             		move.b	#0,$1C(a0)
0001CB18 5368 0028                  		subq.w	#1,$28(a0)
0001CB1C 6600                       		bne.s	locret_1AA1C
0001CB1E 5428 0025                  		addq.b	#2,$25(a0)
0001CB22 117C 0001 001C             		move.b	#1,$1C(a0)
0001CB28 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CB2E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CB34 7000                       		moveq	#0,d0
0001CB36 3038 D008                  		move.w	($FFFFD008).w,d0
0001CB3A 9068 0008                  		sub.w	8(a0),d0
0001CB3E 3140 0010                  		move.w	d0,$10(a0)
0001CB42 317C 0140 0012             		move.w	#$140,$12(a0)
0001CB48                            
0001CB48                            locret_1AA1C:
0001CB48 4E75                       		rts	
0001CB4A                            ; ===========================================================================
0001CB4A                            
0001CB4A                            loc_1AA1E:				; XREF: Obj86_Index2
0001CB4A 4EB9 0000 F16C             		jsr	SpeedToPos
0001CB50 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CB56 6400                       		bcc.s	loc_1AA34
0001CB58 5368 0028                  		subq.w	#1,$28(a0)
0001CB5C 6700                       		beq.s	loc_1AA34
0001CB5E 4E75                       		rts	
0001CB60                            ; ===========================================================================
0001CB60                            
0001CB60                            loc_1AA34:
0001CB60 2268 0034                  		movea.l	$34(a0),a1
0001CB64 5369 0038                  		subq.w	#1,$38(a1)
0001CB68 6000 FA0A                  		bra.w	Obj84_Delete
0001CB6C                            ; ===========================================================================
0001CB6C                            Ani_obj86:
0001CB6C                            	include "_anim\obj86.asm"
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C                            ; Animation script - energy ball launcher (FZ)
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C 0000                       		dc.w byte_1AA46-Ani_obj86
0001CB6E 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CB70 0000                       		dc.w byte_1AA50-Ani_obj86
0001CB72 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CB76 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CB7C 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CB82                            		even
0001CB82                            		even
0001CB82                            
0001CB82                            ; ---------------------------------------------------------------------------
0001CB82                            ; Sprite mappings - energy ball	launcher (FZ)
0001CB82                            ; ---------------------------------------------------------------------------
0001CB82                            Map_obj86:
0001CB82                            	include "_maps\obj86.asm"
0001CB82                            ; ---------------------------------------------------------------------------
0001CB82                            ; Sprite mappings - energy ball	launcher (FZ)
0001CB82                            ; ---------------------------------------------------------------------------
0001CB82 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CB86 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CB8A 01                         byte_1AA5E:	dc.b 1
0001CB8B F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CB90 01                         byte_1AA64:	dc.b 1
0001CB91 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CB96 01                         byte_1AA6A:	dc.b 1
0001CB97 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CB9C 01                         byte_1AA70:	dc.b 1
0001CB9D F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CBA2                            		even
0001CBA2                            		even
0001CBA2                            
0001CBA2                            Ani_obj86a:
0001CBA2                            	include "_anim\obj86a.asm"
0001CBA2                            ; ---------------------------------------------------------------------------
0001CBA2                            ; Animation script - energy balls (FZ)
0001CBA2                            ; ---------------------------------------------------------------------------
0001CBA2 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CBA4 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CBA6 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CBB5 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CBC4 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CBC8 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CBD2                            		even
0001CBD2                            		even
0001CBD2                            
0001CBD2                            ; ---------------------------------------------------------------------------
0001CBD2                            ; Sprite mappings - energy balls (FZ)
0001CBD2                            ; ---------------------------------------------------------------------------
0001CBD2                            Map_obj86a:
0001CBD2                            	include "_maps\obj86a.asm"
0001CBD2                            ; ---------------------------------------------------------------------------
0001CBD2                            ; Sprite mappings - energy balls (FZ)
0001CBD2                            ; ---------------------------------------------------------------------------
0001CBD2 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CBD6 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CBDA 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CBDE 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CBE2 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CBE6 0000                       		dc.w byte_1AB20-Map_obj86a
0001CBE8 02                         byte_1AABC:	dc.b 2
0001CBE9 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CBEE 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CBF3 02                         byte_1AAC7:	dc.b 2
0001CBF4 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CBF9 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CBFE 02                         byte_1AAD2:	dc.b 2
0001CBFF F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CC04 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CC09 02                         byte_1AADD:	dc.b 2
0001CC0A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CC0F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CC14 02                         byte_1AAE8:	dc.b 2
0001CC15 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CC1A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CC1F 02                         byte_1AAF3:	dc.b 2
0001CC20 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CC25 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CC2A 01                         byte_1AAFE:	dc.b 1
0001CC2B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CC30 01                         byte_1AB04:	dc.b 1
0001CC31 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CC36 02                         byte_1AB0A:	dc.b 2
0001CC37 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CC3C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CC41 02                         byte_1AB15:	dc.b 2
0001CC42 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CC47 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CC4C 00                         byte_1AB20:	dc.b 0
0001CC4E 00                         		even
0001CC4E 00                         		even
0001CC4E                            
0001CC4E                            ; ===========================================================================
0001CC4E                            ; ---------------------------------------------------------------------------
0001CC4E                            ; Object 3E - prison capsule
0001CC4E                            ; ---------------------------------------------------------------------------
0001CC4E                            
0001CC4E                            Obj3E:					; XREF: Obj_Index
0001CC4E 7000                       		moveq	#0,d0
0001CC50 1028 0024                  		move.b	$24(a0),d0
0001CC54 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CC58 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CC5C 3028 0008                  		move.w	8(a0),d0
0001CC60 0240 FF80                  		andi.w	#$FF80,d0
0001CC64 3238 F700                  		move.w	($FFFFF700).w,d1
0001CC68 0441 0080                  		subi.w	#$80,d1
0001CC6C 0241 FF80                  		andi.w	#$FF80,d1
0001CC70 9041                       		sub.w	d1,d0
0001CC72 0C40 0280                  		cmpi.w	#$280,d0
0001CC76 6200                       		bhi.s	Obj3E_Delete
0001CC78 4EF9 0000 F186             		jmp	DisplaySprite
0001CC7E                            ; ===========================================================================
0001CC7E                            
0001CC7E                            Obj3E_Delete:
0001CC7E 4EF9 0000 F1C2             		jmp	DeleteObject
0001CC84                            ; ===========================================================================
0001CC84 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CC86 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CC88 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CC8A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CC8C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CC8E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CC90 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CC92 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CC94                            
0001CC94 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CC98 040C 0501                  		dc.b 4,	$C, 5, 1
0001CC9C 0610 0403                  		dc.b 6,	$10, 4,	3
0001CCA0 0810 0305                  		dc.b 8,	$10, 3,	5
0001CCA4                            ; ===========================================================================
0001CCA4                            
0001CCA4                            Obj3E_Main:				; XREF: Obj3E_Index
0001CCA4 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CCAC 317C 049D 0002             		move.w	#$49D,2(a0)
0001CCB2 117C 0004 0001             		move.b	#4,1(a0)
0001CCB8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CCBE 7000                       		moveq	#0,d0
0001CCC0 1028 0028                  		move.b	$28(a0),d0
0001CCC4 E548                       		lsl.w	#2,d0
0001CCC6 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CCCA 1159 0024                  		move.b	(a1)+,$24(a0)
0001CCCE 1159 0019                  		move.b	(a1)+,$19(a0)
0001CCD2 1159 0018                  		move.b	(a1)+,$18(a0)
0001CCD6 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CCDA 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CCDE 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CCE0 117C 0006 0020             		move.b	#6,$20(a0)
0001CCE6 117C 0008 0021             		move.b	#8,$21(a0)
0001CCEC                            
0001CCEC                            Obj3E_Not02:
0001CCEC 4E75                       		rts	
0001CCEE                            ; ===========================================================================
0001CCEE                            
0001CCEE                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CCEE 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CCF4 6700                       		beq.s	Obj3E_ChkOpened
0001CCF6 323C 002B                  		move.w	#$2B,d1
0001CCFA 343C 0018                  		move.w	#$18,d2
0001CCFE 363C 0018                  		move.w	#$18,d3
0001CD02 3828 0008                  		move.w	8(a0),d4
0001CD06 4EF9 0001 1564             		jmp	SolidObject
0001CD0C                            ; ===========================================================================
0001CD0C                            
0001CD0C                            Obj3E_ChkOpened:
0001CD0C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CD10 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CD12 4228 0025                  		clr.b	$25(a0)
0001CD16 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CD1C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CD22                            
0001CD22                            Obj3E_DoOpen:
0001CD22 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CD28 4E75                       		rts	
0001CD2A                            ; ===========================================================================
0001CD2A                            
0001CD2A                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CD2A 323C 0017                  		move.w	#$17,d1
0001CD2E 343C 0008                  		move.w	#8,d2
0001CD32 363C 0008                  		move.w	#8,d3
0001CD36 3828 0008                  		move.w	8(a0),d4
0001CD3A 4EB9 0001 1564             		jsr	SolidObject
0001CD40 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CD46 4EB9 0000 C138             		jsr	AnimateSprite
0001CD4C 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CD52 4A28 0025                  		tst.b	$25(a0)
0001CD56 6700                       		beq.s	locret_1AC60
0001CD58 5068 000C                  		addq.w	#8,$C(a0)
0001CD5C 117C 000A 0024             		move.b	#$A,$24(a0)
0001CD62 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CD68 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CD6C 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CD70 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CD76 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CD7C 4228 0025                  		clr.b	$25(a0)
0001CD80 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CD86 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CD8C                            
0001CD8C                            locret_1AC60:
0001CD8C 4E75                       		rts	
0001CD8E                            ; ===========================================================================
0001CD8E                            
0001CD8E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CD8E 7007                       		moveq	#7,d0
0001CD90 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CD94 6600                       		bne.s	loc_1ACA0
0001CD96 4EB9 0000 F61A             		jsr	SingleObjLoad
0001CD9C 6600                       		bne.s	loc_1ACA0
0001CD9E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CDA2 3368 0008 0008             		move.w	8(a0),8(a1)
0001CDA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CDAE 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CDB4 7200                       		moveq	#0,d1
0001CDB6 1200                       		move.b	d0,d1
0001CDB8 E409                       		lsr.b	#2,d1
0001CDBA 0441 0020                  		subi.w	#$20,d1
0001CDBE D369 0008                  		add.w	d1,8(a1)
0001CDC2 E048                       		lsr.w	#8,d0
0001CDC4 E608                       		lsr.b	#3,d0
0001CDC6 D169 000C                  		add.w	d0,$C(a1)
0001CDCA                            
0001CDCA                            loc_1ACA0:
0001CDCA 5368 001E                  		subq.w	#1,$1E(a0)
0001CDCE 6700                       		beq.s	Obj3E_MakeAnimal
0001CDD0 4E75                       		rts	
0001CDD2                            ; ===========================================================================
0001CDD2                            
0001CDD2                            Obj3E_MakeAnimal:
0001CDD2 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CDD8 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CDDE 117C 0006 001A             		move.b	#6,$1A(a0)
0001CDE4 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CDEA 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CDF0 7C07                       		moveq	#7,d6
0001CDF2 3A3C 009A                  		move.w	#$9A,d5
0001CDF6 78E4                       		moveq	#-$1C,d4
0001CDF8                            
0001CDF8                            Obj3E_Loop:
0001CDF8 4EB9 0000 F61A             		jsr	SingleObjLoad
0001CDFE 6600                       		bne.s	locret_1ACF8
0001CE00 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CE04 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE10 D969 0008                  		add.w	d4,8(a1)
0001CE14 5E44                       		addq.w	#7,d4
0001CE16 3345 0036                  		move.w	d5,$36(a1)
0001CE1A 5145                       		subq.w	#8,d5
0001CE1C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CE20                            
0001CE20                            locret_1ACF8:
0001CE20 4E75                       		rts	
0001CE22                            ; ===========================================================================
0001CE22                            
0001CE22                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CE22 7007                       		moveq	#7,d0
0001CE24 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CE28 6600                       		bne.s	loc_1AD38
0001CE2A 4EB9 0000 F61A             		jsr	SingleObjLoad
0001CE30 6600                       		bne.s	loc_1AD38
0001CE32 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CE36 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE3C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE42 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CE48 0240 001F                  		andi.w	#$1F,d0
0001CE4C 5D40                       		subq.w	#6,d0
0001CE4E 4A41                       		tst.w	d1
0001CE50 6A00                       		bpl.s	loc_1AD2E
0001CE52 4440                       		neg.w	d0
0001CE54                            
0001CE54                            loc_1AD2E:
0001CE54 D169 0008                  		add.w	d0,8(a1)
0001CE58 337C 000C 0036             		move.w	#$C,$36(a1)
0001CE5E                            
0001CE5E                            loc_1AD38:
0001CE5E 5368 001E                  		subq.w	#1,$1E(a0)
0001CE62 6600                       		bne.s	locret_1AD48
0001CE64 5428 0024                  		addq.b	#2,$24(a0)
0001CE68 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CE6E                            
0001CE6E                            locret_1AD48:
0001CE6E 4E75                       		rts	
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CE70 703E                       		moveq	#$3E,d0
0001CE72 7228                       		moveq	#$28,d1
0001CE74 7440                       		moveq	#$40,d2
0001CE76 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CE7A                            
0001CE7A                            Obj3E_FindObj28:
0001CE7A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CE7C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CE7E D2C2                       		adda.w	d2,a1		; next object RAM
0001CE80 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CE84                            
0001CE84 4EB9 0001 0820             		jsr	GotThroughAct
0001CE8A 4EF9 0000 F1C2             		jmp	DeleteObject
0001CE90                            ; ===========================================================================
0001CE90                            
0001CE90                            Obj3E_Obj28Found:
0001CE90 4E75                       		rts	
0001CE92                            ; ===========================================================================
0001CE92                            Ani_obj3E:
0001CE92                            	include "_anim\obj3E.asm"
0001CE92                            ; ---------------------------------------------------------------------------
0001CE92                            ; Animation script - prison capsule
0001CE92                            ; ---------------------------------------------------------------------------
0001CE92 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CE94 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CE96 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CE9A                            		even
0001CE9A                            		even
0001CE9A                            
0001CE9A                            ; ---------------------------------------------------------------------------
0001CE9A                            ; Sprite mappings - prison capsule
0001CE9A                            ; ---------------------------------------------------------------------------
0001CE9A                            Map_obj3E:
0001CE9A                            	include "_maps\obj3E.asm"
0001CE9A                            ; ---------------------------------------------------------------------------
0001CE9A                            ; Sprite mappings - prison capsule
0001CE9A                            ; ---------------------------------------------------------------------------
0001CE9A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CE9E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CEA2 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CEA6 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CEA8 07                         byte_1AD82:	dc.b 7
0001CEA9 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CEAE E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CEB3 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CEB8 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CEBD F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CEC2 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CEC7 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CECC 01                         byte_1ADA6:	dc.b 1
0001CECD F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CED2 06                         byte_1ADAC:	dc.b 6
0001CED3 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CED8 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CEDD 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CEE2 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CEE7 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CEEC 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CEF1 01                         byte_1ADCB:	dc.b 1
0001CEF2 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CEF7 02                         byte_1ADD1:	dc.b 2
0001CEF8 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CEFD 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CF02 01                         byte_1ADDC:	dc.b 1
0001CF03 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CF08 00                         byte_1ADE2:	dc.b 0
0001CF0A 00                         		even
0001CF0A 00                         		even
0001CF0A                            
0001CF0A                            ; ---------------------------------------------------------------------------
0001CF0A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CF0A                            ; ---------------------------------------------------------------------------
0001CF0A                            
0001CF0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF0A                            
0001CF0A                            
0001CF0A                            TouchResponse:				; XREF: Obj01
0001CF0A 4E71                       		nop	
0001CF0C 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CF10 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CF14 5142                       		subq.w	#8,d2
0001CF16 7A00                       		moveq	#0,d5
0001CF18 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CF1C 5705                       		subq.b	#3,d5
0001CF1E 9645                       		sub.w	d5,d3
0001CF20 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CF26 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CF28 0643 000C                  		addi.w	#$C,d3
0001CF2C 7A0A                       		moveq	#$A,d5
0001CF2E                            
0001CF2E                            Touch_NoDuck:
0001CF2E 383C 0010                  		move.w	#$10,d4
0001CF32 DA45                       		add.w	d5,d5
0001CF34 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CF38 3C3C 005F                  		move.w	#$5F,d6
0001CF3C                            
0001CF3C                            Touch_Loop:
0001CF3C 4A29 0001                  		tst.b	1(a1)
0001CF40 6A00                       		bpl.s	Touch_NextObj
0001CF42 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CF46 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CF48                            
0001CF48                            Touch_NextObj:
0001CF48 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CF4C 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CF50                            
0001CF50 7000                       		moveq	#0,d0
0001CF52 4E75                       		rts	
0001CF54                            ; ===========================================================================
0001CF54 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CF56 0C14                       		dc.b   $C, $14
0001CF58 140C                       		dc.b  $14,  $C
0001CF5A 0410                       		dc.b	4, $10
0001CF5C 0C12                       		dc.b   $C, $12
0001CF5E 1010                       		dc.b  $10, $10
0001CF60 0606                       		dc.b	6,   6
0001CF62 180C                       		dc.b  $18,  $C
0001CF64 0C10                       		dc.b   $C, $10
0001CF66 100C                       		dc.b  $10,  $C
0001CF68 0808                       		dc.b	8,   8
0001CF6A 1410                       		dc.b  $14, $10
0001CF6C 1408                       		dc.b  $14,   8
0001CF6E 0E0E                       		dc.b   $E,  $E
0001CF70 1818                       		dc.b  $18, $18
0001CF72 2810                       		dc.b  $28, $10
0001CF74 1018                       		dc.b  $10, $18
0001CF76 0810                       		dc.b	8, $10
0001CF78 2070                       		dc.b  $20, $70
0001CF7A 4020                       		dc.b  $40, $20
0001CF7C 8020                       		dc.b  $80, $20
0001CF7E 2020                       		dc.b  $20, $20
0001CF80 0808                       		dc.b	8,   8
0001CF82 0404                       		dc.b	4,   4
0001CF84 2008                       		dc.b  $20,   8
0001CF86 0C0C                       		dc.b   $C,  $C
0001CF88 0804                       		dc.b	8,   4
0001CF8A 1804                       		dc.b  $18,   4
0001CF8C 2804                       		dc.b  $28,   4
0001CF8E 0408                       		dc.b	4,   8
0001CF90 0418                       		dc.b	4, $18
0001CF92 0428                       		dc.b	4, $28
0001CF94 0420                       		dc.b	4, $20
0001CF96 1818                       		dc.b  $18, $18
0001CF98 0C18                       		dc.b   $C, $18
0001CF9A 4808                       		dc.b  $48,   8
0001CF9C                            ; ===========================================================================
0001CF9C                            
0001CF9C                            Touch_Height:				; XREF: TouchResponse
0001CF9C 0240 003F                  		andi.w	#$3F,d0
0001CFA0 D040                       		add.w	d0,d0
0001CFA2 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CFA6 7200                       		moveq	#0,d1
0001CFA8 121A                       		move.b	(a2)+,d1
0001CFAA 4A28 003A                  		tst.b	biting(a0)
0001CFAE 6700                       		beq.s	@not_biting
0001CFB0 5801                       		addq.b	#4,d1
0001CFB2                            		
0001CFB2                            @not_biting:
0001CFB2 3029 0008                  		move.w	8(a1),d0
0001CFB6 9041                       		sub.w	d1,d0
0001CFB8 9042                       		sub.w	d2,d0
0001CFBA 6400                       		bcc.s	loc_1AE98
0001CFBC D241                       		add.w	d1,d1
0001CFBE D041                       		add.w	d1,d0
0001CFC0 6500                       		bcs.s	Touch_Width
0001CFC2 6000 FF84                  		bra.w	Touch_NextObj
0001CFC6                            ; ===========================================================================
0001CFC6                            
0001CFC6                            loc_1AE98:
0001CFC6 B044                       		cmp.w	d4,d0
0001CFC8 6200 FF7E                  		bhi.w	Touch_NextObj
0001CFCC                            
0001CFCC                            Touch_Width:
0001CFCC 7200                       		moveq	#0,d1
0001CFCE 121A                       		move.b	(a2)+,d1
0001CFD0 3029 000C                  		move.w	$C(a1),d0
0001CFD4 9041                       		sub.w	d1,d0
0001CFD6 9043                       		sub.w	d3,d0
0001CFD8 6400                       		bcc.s	loc_1AEB6
0001CFDA D241                       		add.w	d1,d1
0001CFDC D240                       		add.w	d0,d1
0001CFDE 6500                       		bcs.s	Touch_ChkValue
0001CFE0 6000 FF66                  		bra.w	Touch_NextObj
0001CFE4                            ; ===========================================================================
0001CFE4                            
0001CFE4                            loc_1AEB6:
0001CFE4 B045                       		cmp.w	d5,d0
0001CFE6 6200 FF60                  		bhi.w	Touch_NextObj
0001CFEA                            
0001CFEA                            Touch_ChkValue:
0001CFEA 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CFEE 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CFF2 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CFF6 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CFFA 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CFFE 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001D000 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001D004                            
0001D004                            ; touch	response is $40-$7F
0001D004                            
0001D004 1029 0020                  		move.b	$20(a1),d0
0001D008 0200 003F                  		andi.b	#$3F,d0
0001D00C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001D010 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001D012 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001D018 6400 0000                  		bcc.w	locret_1AEF2
0001D01C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001D020                            
0001D020                            locret_1AEF2:
0001D020 4E75                       		rts	
0001D022                            ; ===========================================================================
0001D022                            
0001D022                            Touch_Monitor:
0001D022 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001D026 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001D028 3028 000C                  		move.w	$C(a0),d0
0001D02C 0440 0010                  		subi.w	#$10,d0
0001D030 B069 000C                  		cmp.w	$C(a1),d0
0001D034 6500                       		bcs.s	locret_1AF2E
0001D036 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D03A 337C FE80 0012             		move.w	#-$180,$12(a1)
0001D040 4A29 0025                  		tst.b	$25(a1)
0001D044 6600                       		bne.s	locret_1AF2E
0001D046 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001D04A 4E75                       		rts
0001D04C                            ; ===========================================================================
0001D04C                            
0001D04C                            loc_1AF1E:
0001D04C 4A28 003A                  		tst.b	biting(a0)
0001D050 6700 0000                  		beq.w	locret_1AF2E
0001D054 3029 0008                  		move.w	8(a1),d0
0001D058 3228 0008                  		move.w	8(a0),d1
0001D05C 0828 0000 0022             		btst	#0,$22(a0)
0001D062 6600                       		bne.s	@left
0001D064 B240                       		cmp.w	d0,d1
0001D066 6F00                       		ble.s	@do
0001D068 4E75                       		rts
0001D06A                            		
0001D06A                            	@left:
0001D06A B240                       		cmp.w	d0,d1
0001D06C 6C00                       		bge.s	@do
0001D06E 4E75                       		rts
0001D070                            		
0001D070                            	@do:
0001D070 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001D074                            
0001D074                            locret_1AF2E:
0001D074 4E75                       		rts	
0001D076                            ; ===========================================================================
0001D076                            
0001D076                            Touch_Enemy:				; XREF: Touch_ChkValue
0001D076 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D07A 6600                       		bne.s	loc_1AF40	; if yes, branch
0001D07C 4A28 003A                  		tst.b	biting(a0)
0001D080 6700 0000                  		beq.w	Touch_ChkHurt
0001D084 3029 0008                  		move.w	8(a1),d0
0001D088 3228 0008                  		move.w	8(a0),d1
0001D08C 0828 0000 0022             		btst	#0,$22(a0)
0001D092 6600                       		bne.s	@left
0001D094 B240                       		cmp.w	d0,d1
0001D096 6F00                       		ble.s	loc_1AF40
0001D098 6000 0000                  		bra.w	Touch_ChkHurt
0001D09C                            		
0001D09C                            	@left:
0001D09C B240                       		cmp.w	d0,d1
0001D09E 6C00                       		bge.s	loc_1AF40
0001D0A0 6000 0000                  		bra.w	Touch_ChkHurt
0001D0A4                            
0001D0A4                            loc_1AF40:
0001D0A4 4A29 0021                  		tst.b	$21(a1)
0001D0A8 6700                       		beq.s	Touch_KillEnemy
0001D0AA 137C 0000 0020             		move.b	#0,$20(a1)
0001D0B0 5329 0021                  		subq.b	#1,$21(a1)
0001D0B4 6600                       		bne.s	locret_1AF68
0001D0B6 08E9 0007 0022             		bset	#7,$22(a1)
0001D0BC                            
0001D0BC                            locret_1AF68:
0001D0BC 4E75                       		rts	
0001D0BE                            ; ===========================================================================
0001D0BE                            
0001D0BE                            Touch_KillEnemy:
0001D0BE 08E9 0007 0022             		bset	#7,$22(a1)
0001D0C4 7000                       		moveq	#0,d0
0001D0C6 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D0CA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D0CE 0C40 0006                  		cmpi.w	#6,d0
0001D0D2 6500                       		bcs.s	loc_1AF82
0001D0D4 7006                       		moveq	#6,d0
0001D0D6                            
0001D0D6                            loc_1AF82:
0001D0D6 3340 003E                  		move.w	d0,$3E(a1)
0001D0DA 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D0DE 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D0E4 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D0E6 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D0EA 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D0F0                            
0001D0F0                            loc_1AF9C:
0001D0F0 6100 0000                  		bsr.w	AddPoints
0001D0F4 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D0F8 137C 0000 0024             		move.b	#0,$24(a1)
0001D0FE 4E75                       		rts	
0001D100                            ; ===========================================================================
0001D100 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D108                            ; ===========================================================================
0001D108                            
0001D108                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D108 08E9 0007 0022             		bset	#7,$22(a1)
0001D10E                            
0001D10E                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D10E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D112 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D114                            
0001D114                            loc_1AFE6:				; XREF: Touch_Hurt
0001D114 70FF                       		moveq	#-1,d0
0001D116 4E75                       		rts	
0001D118                            ; ===========================================================================
0001D118                            
0001D118                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D118 4E71                       		nop	
0001D11A 4A68 0030                  		tst.w	$30(a0)
0001D11E 66F4                       		bne.s	loc_1AFE6
0001D120 2449                       		movea.l	a1,a2
0001D122                            
0001D122                            ; End of function TouchResponse
0001D122                            ; continue straight to HurtSonic
0001D122                            
0001D122                            ; ---------------------------------------------------------------------------
0001D122                            ; Hurting Sonic	subroutine
0001D122                            ; ---------------------------------------------------------------------------
0001D122                            
0001D122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D122                            
0001D122                            
0001D122                            HurtSonic:
0001D122 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D126 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D128 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D12C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D130 4EB9 0000 F61A             		jsr	SingleObjLoad
0001D136 6600                       		bne.s	Hurt_Shield
0001D138 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D13C 3368 0008 0008             		move.w	8(a0),8(a1)
0001D142 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D148                            
0001D148                            Hurt_Shield:
0001D148 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D14E 117C 0004 0024             		move.b	#4,$24(a0)
0001D154 6100 8596                  		bsr.w	Sonic_ResetOnFloor
0001D158 08E8 0001 0022             		bset	#1,$22(a0)
0001D15E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D164 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D16A 0828 0006 0022             		btst	#6,$22(a0)
0001D170 6700                       		beq.s	Hurt_Reverse
0001D172 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D178 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D17E                            
0001D17E                            Hurt_Reverse:
0001D17E 3028 0008                  		move.w	8(a0),d0
0001D182 B06A 0008                  		cmp.w	8(a2),d0
0001D186 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D188 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D18C                            
0001D18C                            Hurt_ChkSpikes:
0001D18C 317C 0000 0014             		move.w	#0,$14(a0)
0001D192 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D198 317C 0078 0030             		move.w	#$78,$30(a0)
0001D19E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D1A2 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D1A6 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D1A8 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D1AC 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D1AE 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D1B2                            
0001D1B2                            Hurt_Sound:
0001D1B2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D1B8 70FF                       		moveq	#-1,d0
0001D1BA 4E75                       		rts	
0001D1BC                            ; ===========================================================================
0001D1BC                            
0001D1BC                            Hurt_NoRings:
0001D1BC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D1C0 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D1C4                            ; End of function HurtSonic
0001D1C4                            
0001D1C4                            ; ---------------------------------------------------------------------------
0001D1C4                            ; Subroutine to	kill Sonic
0001D1C4                            ; ---------------------------------------------------------------------------
0001D1C4                            
0001D1C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1C4                            
0001D1C4                            
0001D1C4                            KillSonic:
0001D1C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D1C8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001D1CA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D1D0 117C 0006 0024             		move.b	#6,$24(a0)
0001D1D6 6100 8514                  		bsr.w	Sonic_ResetOnFloor
0001D1DA 08E8 0001 0022             		bset	#1,$22(a0)
0001D1E0 317C F900 0012             		move.w	#-$700,$12(a0)
0001D1E6 317C 0000 0010             		move.w	#0,$10(a0)
0001D1EC 317C 0000 0014             		move.w	#0,$14(a0)
0001D1F2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D1F8 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D1FE 08E8 0007 0002             		bset	#7,2(a0)
0001D204 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D208 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D20C 6600                       		bne.s	Kill_Sound
0001D20E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D212                            
0001D212                            Kill_Sound:
0001D212 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D218                            
0001D218                            Kill_NoDeath:
0001D218 70FF                       		moveq	#-1,d0
0001D21A 4E75                       		rts	
0001D21C                            ; End of function KillSonic
0001D21C                            
0001D21C                            
0001D21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D21C                            
0001D21C                            
0001D21C                            Touch_Special:				; XREF: Touch_ChkValue
0001D21C 1229 0020                  		move.b	$20(a1),d1
0001D220 0201 003F                  		andi.b	#$3F,d1
0001D224 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D228 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D22A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D22E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D230 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D234 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D236 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D23A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D23C 4E75                       		rts	
0001D23E                            ; ===========================================================================
0001D23E                            
0001D23E                            Touch_CatKiller:			; XREF: Touch_Special
0001D23E 6000 FEC8                  		bra.w	loc_1AFDA
0001D242                            ; ===========================================================================
0001D242                            
0001D242                            Touch_Yadrin:				; XREF: Touch_Special
0001D242 9A40                       		sub.w	d0,d5
0001D244 0C45 0008                  		cmpi.w	#8,d5
0001D248 6400                       		bcc.s	loc_1B144
0001D24A 3029 0008                  		move.w	8(a1),d0
0001D24E 5940                       		subq.w	#4,d0
0001D250 0829 0000 0022             		btst	#0,$22(a1)
0001D256 6700                       		beq.s	loc_1B130
0001D258 0440 0010                  		subi.w	#$10,d0
0001D25C                            
0001D25C                            loc_1B130:
0001D25C 9042                       		sub.w	d2,d0
0001D25E 6400                       		bcc.s	loc_1B13C
0001D260 0640 0018                  		addi.w	#$18,d0
0001D264 6500                       		bcs.s	loc_1B140
0001D266 6000                       		bra.s	loc_1B144
0001D268                            ; ===========================================================================
0001D268                            
0001D268                            loc_1B13C:
0001D268 B044                       		cmp.w	d4,d0
0001D26A 6200                       		bhi.s	loc_1B144
0001D26C                            
0001D26C                            loc_1B140:
0001D26C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001D270                            ; ===========================================================================
0001D270                            
0001D270                            loc_1B144:
0001D270 6000 FE04                  		bra.w	Touch_Enemy
0001D274                            ; ===========================================================================
0001D274                            
0001D274                            Touch_D7orE1:				; XREF: Touch_Special
0001D274 5229 0021                  		addq.b	#1,$21(a1)
0001D278 4E75                       		rts	
0001D27A                            ; End of function Touch_Special
0001D27A                            
0001D27A                            ; ---------------------------------------------------------------------------
0001D27A                            ; Subroutine to	show the special stage layout
0001D27A                            ; ---------------------------------------------------------------------------
0001D27A                            
0001D27A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D27A                            
0001D27A                            
0001D27A                            SS_ShowLayout:				; XREF: SpecialStage
0001D27A 6100 0000                  		bsr.w	SS_AniWallsRings
0001D27E 6100 0000                  		bsr.w	SS_AniItems
0001D282 3F05                       		move.w	d5,-(sp)
0001D284 43F8 8000                  		lea	($FFFF8000).w,a1
0001D288 1038 F780                  		move.b	($FFFFF780).w,d0
0001D28C 0200 00FC                  		andi.b	#$FC,d0
0001D290 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001D296 3800                       		move.w	d0,d4
0001D298 3A01                       		move.w	d1,d5
0001D29A C9FC 0018                  		muls.w	#$18,d4
0001D29E CBFC 0018                  		muls.w	#$18,d5
0001D2A2 7400                       		moveq	#0,d2
0001D2A4 3438 F700                  		move.w	($FFFFF700).w,d2
0001D2A8 84FC 0018                  		divu.w	#$18,d2
0001D2AC 4842                       		swap	d2
0001D2AE 4442                       		neg.w	d2
0001D2B0 0642 FF4C                  		addi.w	#-$B4,d2
0001D2B4 7600                       		moveq	#0,d3
0001D2B6 3638 F704                  		move.w	($FFFFF704).w,d3
0001D2BA 86FC 0018                  		divu.w	#$18,d3
0001D2BE 4843                       		swap	d3
0001D2C0 4443                       		neg.w	d3
0001D2C2 0643 FF4C                  		addi.w	#-$B4,d3
0001D2C6 3E3C 000F                  		move.w	#$F,d7
0001D2CA                            
0001D2CA                            loc_1B19E:
0001D2CA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D2CE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D2D2 4440                       		neg.w	d0
0001D2D4 C3C2                       		muls.w	d2,d1
0001D2D6 C1C3                       		muls.w	d3,d0
0001D2D8 2C00                       		move.l	d0,d6
0001D2DA DC81                       		add.l	d1,d6
0001D2DC 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D2E0 C1C2                       		muls.w	d2,d0
0001D2E2 C3C3                       		muls.w	d3,d1
0001D2E4 D280                       		add.l	d0,d1
0001D2E6 2406                       		move.l	d6,d2
0001D2E8 3C3C 000F                  		move.w	#$F,d6
0001D2EC                            
0001D2EC                            loc_1B1C0:
0001D2EC 2002                       		move.l	d2,d0
0001D2EE E080                       		asr.l	#8,d0
0001D2F0 32C0                       		move.w	d0,(a1)+
0001D2F2 2001                       		move.l	d1,d0
0001D2F4 E080                       		asr.l	#8,d0
0001D2F6 32C0                       		move.w	d0,(a1)+
0001D2F8 D485                       		add.l	d5,d2
0001D2FA D284                       		add.l	d4,d1
0001D2FC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D300                            
0001D300 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D304 0643 0018                  		addi.w	#$18,d3
0001D308 51CF FFC0                  		dbf	d7,loc_1B19E
0001D30C                            
0001D30C 3A1F                       		move.w	(sp)+,d5
0001D30E 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D314 7000                       		moveq	#0,d0
0001D316 3038 F704                  		move.w	($FFFFF704).w,d0
0001D31A 80FC 0018                  		divu.w	#$18,d0
0001D31E C0FC 0080                  		mulu.w	#$80,d0
0001D322 D1C0                       		adda.l	d0,a0
0001D324 7000                       		moveq	#0,d0
0001D326 3038 F700                  		move.w	($FFFFF700).w,d0
0001D32A 80FC 0018                  		divu.w	#$18,d0
0001D32E D0C0                       		adda.w	d0,a0
0001D330 49F8 8000                  		lea	($FFFF8000).w,a4
0001D334 3E3C 000F                  		move.w	#$F,d7
0001D338                            
0001D338                            loc_1B20C:
0001D338 3C3C 000F                  		move.w	#$F,d6
0001D33C                            
0001D33C                            loc_1B210:
0001D33C 7000                       		moveq	#0,d0
0001D33E 1018                       		move.b	(a0)+,d0
0001D340 6700                       		beq.s	loc_1B268
0001D342 0C00 004E                  		cmpi.b	#$4E,d0
0001D346 6200                       		bhi.s	loc_1B268
0001D348 3614                       		move.w	(a4),d3
0001D34A 0643 0120                  		addi.w	#$120,d3
0001D34E 0C43 0070                  		cmpi.w	#$70,d3
0001D352 6500                       		bcs.s	loc_1B268
0001D354 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D358 6400                       		bcc.s	loc_1B268
0001D35A 342C 0002                  		move.w	2(a4),d2
0001D35E 0642 00F0                  		addi.w	#$F0,d2
0001D362 0C42 0070                  		cmpi.w	#$70,d2
0001D366 6500                       		bcs.s	loc_1B268
0001D368 0C42 0170                  		cmpi.w	#$170,d2
0001D36C 6400                       		bcc.s	loc_1B268
0001D36E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D374 E748                       		lsl.w	#3,d0
0001D376 4BF5 0000                  		lea	(a5,d0.w),a5
0001D37A 225D                       		movea.l	(a5)+,a1
0001D37C 321D                       		move.w	(a5)+,d1
0001D37E D241                       		add.w	d1,d1
0001D380 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D384 365D                       		movea.w	(a5)+,a3
0001D386 7200                       		moveq	#0,d1
0001D388 1219                       		move.b	(a1)+,d1
0001D38A 5301                       		subq.b	#1,d1
0001D38C 6B00                       		bmi.s	loc_1B268
0001D38E 4EB9 0000 F2E4             		jsr	sub_D762
0001D394                            
0001D394                            loc_1B268:
0001D394 584C                       		addq.w	#4,a4
0001D396 51CE FFA4                  		dbf	d6,loc_1B210
0001D39A                            
0001D39A 41E8 0070                  		lea	$70(a0),a0
0001D39E 51CF FF98                  		dbf	d7,loc_1B20C
0001D3A2                            
0001D3A2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D3A6 0C05 0050                  		cmpi.b	#$50,d5
0001D3AA 6700                       		beq.s	loc_1B288
0001D3AC 24BC 0000 0000             		move.l	#0,(a2)
0001D3B2 4E75                       		rts	
0001D3B4                            ; ===========================================================================
0001D3B4                            
0001D3B4                            loc_1B288:
0001D3B4 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D3BA 4E75                       		rts	
0001D3BC                            ; End of function SS_ShowLayout
0001D3BC                            
0001D3BC                            ; ---------------------------------------------------------------------------
0001D3BC                            ; Subroutine to	animate	walls and rings	in the special stage
0001D3BC                            ; ---------------------------------------------------------------------------
0001D3BC                            
0001D3BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3BC                            
0001D3BC                            
0001D3BC                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D3BC 43F9 00FF 400C             		lea	($FF400C).l,a1
0001D3C2 7000                       		moveq	#0,d0
0001D3C4 1038 F780                  		move.b	($FFFFF780).w,d0
0001D3C8 E408                       		lsr.b	#2,d0
0001D3CA 0240 000F                  		andi.w	#$F,d0
0001D3CE 7223                       		moveq	#$23,d1
0001D3D0                            
0001D3D0                            loc_1B2A4:
0001D3D0 3280                       		move.w	d0,(a1)
0001D3D2 5049                       		addq.w	#8,a1
0001D3D4 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001D3D8                            
0001D3D8 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D3DE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D3E2 6A00                       		bpl.s	loc_1B2C8
0001D3E4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D3EA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D3EE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D3F4                            
0001D3F4                            loc_1B2C8:
0001D3F4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D3FA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D3FE 6A00                       		bpl.s	loc_1B2E4
0001D400 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D406 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D40A 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D410                            
0001D410                            loc_1B2E4:
0001D410 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D414 1340 0138                  		move.b	d0,$138(a1)
0001D418 1340 0160                  		move.b	d0,$160(a1)
0001D41C 1340 0148                  		move.b	d0,$148(a1)
0001D420 1340 0150                  		move.b	d0,$150(a1)
0001D424 1340 01D8                  		move.b	d0,$1D8(a1)
0001D428 1340 01E0                  		move.b	d0,$1E0(a1)
0001D42C 1340 01E8                  		move.b	d0,$1E8(a1)
0001D430 1340 01F0                  		move.b	d0,$1F0(a1)
0001D434 1340 01F8                  		move.b	d0,$1F8(a1)
0001D438 1340 0200                  		move.b	d0,$200(a1)
0001D43C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D440 6A00                       		bpl.s	loc_1B326
0001D442 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D448 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D44C 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D452                            
0001D452                            loc_1B326:
0001D452 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D456 1340 0168                  		move.b	d0,$168(a1)
0001D45A 1340 0170                  		move.b	d0,$170(a1)
0001D45E 1340 0178                  		move.b	d0,$178(a1)
0001D462 1340 0180                  		move.b	d0,$180(a1)
0001D466 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D46A 6A00                       		bpl.s	loc_1B350
0001D46C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D472 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D476 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D47C                            
0001D47C                            loc_1B350:
0001D47C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D482 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D488 7000                       		moveq	#0,d0
0001D48A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D48E D040                       		add.w	d0,d0
0001D490 41F0 0000                  		lea	(a0,d0.w),a0
0001D494 3290                       		move.w	(a0),(a1)
0001D496 3368 0002 0008             		move.w	2(a0),8(a1)
0001D49C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D4A2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D4A8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D4AE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D4B4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D4BA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D4C0 D0FC 0020                  		adda.w	#$20,a0
0001D4C4 D2FC 0048                  		adda.w	#$48,a1
0001D4C8 3290                       		move.w	(a0),(a1)
0001D4CA 3368 0002 0008             		move.w	2(a0),8(a1)
0001D4D0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D4D6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D4DC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D4E2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D4E8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D4EE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D4F4 D0FC 0020                  		adda.w	#$20,a0
0001D4F8 D2FC 0048                  		adda.w	#$48,a1
0001D4FC 3290                       		move.w	(a0),(a1)
0001D4FE 3368 0002 0008             		move.w	2(a0),8(a1)
0001D504 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D50A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D510 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D516 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D51C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D522 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D528 D0FC 0020                  		adda.w	#$20,a0
0001D52C D2FC 0048                  		adda.w	#$48,a1
0001D530 3290                       		move.w	(a0),(a1)
0001D532 3368 0002 0008             		move.w	2(a0),8(a1)
0001D538 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D53E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D544 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D54A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D550 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D556 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D55C D0FC 0020                  		adda.w	#$20,a0
0001D560 D2FC 0048                  		adda.w	#$48,a1
0001D564 4E75                       		rts	
0001D566                            ; End of function SS_AniWallsRings
0001D566                            
0001D566                            ; ===========================================================================
0001D566 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D576 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D586 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D596 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D5A6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D5B6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D5C6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D5D6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D5E6                            ; ---------------------------------------------------------------------------
0001D5E6                            ; Subroutine to	remove items when you collect them in the special stage
0001D5E6                            ; ---------------------------------------------------------------------------
0001D5E6                            
0001D5E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5E6                            
0001D5E6                            
0001D5E6                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D5E6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D5EC 303C 001F                  		move.w	#$1F,d0
0001D5F0                            
0001D5F0                            loc_1B4C4:
0001D5F0 4A12                       		tst.b	(a2)
0001D5F2 6700                       		beq.s	locret_1B4CE
0001D5F4 504A                       		addq.w	#8,a2
0001D5F6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D5FA                            
0001D5FA                            locret_1B4CE:
0001D5FA 4E75                       		rts	
0001D5FC                            ; End of function SS_RemoveCollectedItem
0001D5FC                            
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            ; Subroutine to	animate	special	stage items when you touch them
0001D5FC                            ; ---------------------------------------------------------------------------
0001D5FC                            
0001D5FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5FC                            
0001D5FC                            
0001D5FC                            SS_AniItems:				; XREF: SS_ShowLayout
0001D5FC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D602 3E3C 001F                  		move.w	#$1F,d7
0001D606                            
0001D606                            loc_1B4DA:
0001D606 7000                       		moveq	#0,d0
0001D608 1010                       		move.b	(a0),d0
0001D60A 6700                       		beq.s	loc_1B4E8
0001D60C E548                       		lsl.w	#2,d0
0001D60E 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D612 4E91                       		jsr	(a1)
0001D614                            
0001D614                            loc_1B4E8:
0001D614 5048                       		addq.w	#8,a0
0001D616                            
0001D616                            loc_1B4EA:
0001D616 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D61A                            
0001D61A 4E75                       		rts	
0001D61C                            ; End of function SS_AniItems
0001D61C                            
0001D61C                            ; ===========================================================================
0001D61C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D620 0000 0000                  		dc.l SS_AniBumper
0001D624 0000 0000                  		dc.l SS_Ani1Up
0001D628 0000 0000                  		dc.l SS_AniReverse
0001D62C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D630 0000 0000                  		dc.l SS_AniGlassBlock
0001D634                            ; ===========================================================================
0001D634                            
0001D634                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D634 5328 0002                  		subq.b	#1,2(a0)
0001D638 6A00                       		bpl.s	locret_1B530
0001D63A 117C 0005 0002             		move.b	#5,2(a0)
0001D640 7000                       		moveq	#0,d0
0001D642 1028 0003                  		move.b	3(a0),d0
0001D646 5228 0003                  		addq.b	#1,3(a0)
0001D64A 2268 0004                  		movea.l	4(a0),a1
0001D64E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D652 1280                       		move.b	d0,(a1)
0001D654 6600                       		bne.s	locret_1B530
0001D656 4290                       		clr.l	(a0)
0001D658 42A8 0004                  		clr.l	4(a0)
0001D65C                            
0001D65C                            locret_1B530:
0001D65C 4E75                       		rts	
0001D65E                            ; ===========================================================================
0001D65E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D664                            ; ===========================================================================
0001D664                            
0001D664                            SS_AniBumper:				; XREF: SS_AniIndex
0001D664 5328 0002                  		subq.b	#1,2(a0)
0001D668 6A00                       		bpl.s	locret_1B566
0001D66A 117C 0007 0002             		move.b	#7,2(a0)
0001D670 7000                       		moveq	#0,d0
0001D672 1028 0003                  		move.b	3(a0),d0
0001D676 5228 0003                  		addq.b	#1,3(a0)
0001D67A 2268 0004                  		movea.l	4(a0),a1
0001D67E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D682 6600                       		bne.s	loc_1B564
0001D684 4290                       		clr.l	(a0)
0001D686 42A8 0004                  		clr.l	4(a0)
0001D68A 12BC 0025                  		move.b	#$25,(a1)
0001D68E 4E75                       		rts	
0001D690                            ; ===========================================================================
0001D690                            
0001D690                            loc_1B564:
0001D690 1280                       		move.b	d0,(a1)
0001D692                            
0001D692                            locret_1B566:
0001D692 4E75                       		rts	
0001D694                            ; ===========================================================================
0001D694 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D69A                            ; ===========================================================================
0001D69A                            
0001D69A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D69A 5328 0002                  		subq.b	#1,2(a0)
0001D69E 6A00                       		bpl.s	locret_1B596
0001D6A0 117C 0005 0002             		move.b	#5,2(a0)
0001D6A6 7000                       		moveq	#0,d0
0001D6A8 1028 0003                  		move.b	3(a0),d0
0001D6AC 5228 0003                  		addq.b	#1,3(a0)
0001D6B0 2268 0004                  		movea.l	4(a0),a1
0001D6B4 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D6B8 1280                       		move.b	d0,(a1)
0001D6BA 6600                       		bne.s	locret_1B596
0001D6BC 4290                       		clr.l	(a0)
0001D6BE 42A8 0004                  		clr.l	4(a0)
0001D6C2                            
0001D6C2                            locret_1B596:
0001D6C2 4E75                       		rts	
0001D6C4                            ; ===========================================================================
0001D6C4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D6CA                            ; ===========================================================================
0001D6CA                            
0001D6CA                            SS_AniReverse:				; XREF: SS_AniIndex
0001D6CA 5328 0002                  		subq.b	#1,2(a0)
0001D6CE 6A00                       		bpl.s	locret_1B5CC
0001D6D0 117C 0007 0002             		move.b	#7,2(a0)
0001D6D6 7000                       		moveq	#0,d0
0001D6D8 1028 0003                  		move.b	3(a0),d0
0001D6DC 5228 0003                  		addq.b	#1,3(a0)
0001D6E0 2268 0004                  		movea.l	4(a0),a1
0001D6E4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D6E8 6600                       		bne.s	loc_1B5CA
0001D6EA 4290                       		clr.l	(a0)
0001D6EC 42A8 0004                  		clr.l	4(a0)
0001D6F0 12BC 002B                  		move.b	#$2B,(a1)
0001D6F4 4E75                       		rts	
0001D6F6                            ; ===========================================================================
0001D6F6                            
0001D6F6                            loc_1B5CA:
0001D6F6 1280                       		move.b	d0,(a1)
0001D6F8                            
0001D6F8                            locret_1B5CC:
0001D6F8 4E75                       		rts	
0001D6FA                            ; ===========================================================================
0001D6FA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D700                            ; ===========================================================================
0001D700                            
0001D700                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D700 5328 0002                  		subq.b	#1,2(a0)
0001D704 6A00                       		bpl.s	locret_1B60C
0001D706 117C 0005 0002             		move.b	#5,2(a0)
0001D70C 7000                       		moveq	#0,d0
0001D70E 1028 0003                  		move.b	3(a0),d0
0001D712 5228 0003                  		addq.b	#1,3(a0)
0001D716 2268 0004                  		movea.l	4(a0),a1
0001D71A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D71E 1280                       		move.b	d0,(a1)
0001D720 6600                       		bne.s	locret_1B60C
0001D722 4290                       		clr.l	(a0)
0001D724 42A8 0004                  		clr.l	4(a0)
0001D728 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D72E 303C 00A8                  		move.w	#$A8,d0
0001D732 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D738                            
0001D738                            locret_1B60C:
0001D738 4E75                       		rts	
0001D73A                            ; ===========================================================================
0001D73A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D740                            ; ===========================================================================
0001D740                            
0001D740                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D740 5328 0002                  		subq.b	#1,2(a0)
0001D744 6A00                       		bpl.s	locret_1B640
0001D746 117C 0001 0002             		move.b	#1,2(a0)
0001D74C 7000                       		moveq	#0,d0
0001D74E 1028 0003                  		move.b	3(a0),d0
0001D752 5228 0003                  		addq.b	#1,3(a0)
0001D756 2268 0004                  		movea.l	4(a0),a1
0001D75A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D75E 1280                       		move.b	d0,(a1)
0001D760 6600                       		bne.s	locret_1B640
0001D762 12A8 0004                  		move.b	4(a0),(a1)
0001D766 4290                       		clr.l	(a0)
0001D768 42A8 0004                  		clr.l	4(a0)
0001D76C                            
0001D76C                            locret_1B640:
0001D76C 4E75                       		rts	
0001D76E                            ; ===========================================================================
0001D76E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D778                            ; ---------------------------------------------------------------------------
0001D778                            ; Special stage	layout pointers
0001D778                            ; ---------------------------------------------------------------------------
0001D778                            SS_LayoutIndex:
0001D778                            	include "_inc\Special stage layout pointers.asm"
0001D778                            ; ---------------------------------------------------------------------------
0001D778                            ; Special stage	layout pointers
0001D778                            ; ---------------------------------------------------------------------------
0001D778 0000 0000                  	dc.l SS_1
0001D77C 0000 0000                  	dc.l SS_2
0001D780 0000 0000                  	dc.l SS_3
0001D784 0000 0000                  	dc.l SS_4
0001D788 0000 0000                  	dc.l SS_5
0001D78C 0000 0000                  	dc.l SS_6
0001D790                            	even
0001D790                            	even
0001D790                            
0001D790                            ; ---------------------------------------------------------------------------
0001D790                            ; Special stage	start locations
0001D790                            ; ---------------------------------------------------------------------------
0001D790                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D7A8                            		even
0001D7A8                            
0001D7A8                            ; ---------------------------------------------------------------------------
0001D7A8                            ; Subroutine to	load special stage layout
0001D7A8                            ; ---------------------------------------------------------------------------
0001D7A8                            
0001D7A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7A8                            
0001D7A8                            
0001D7A8                            SS_Load:				; XREF: SpecialStage
0001D7A8 7000                       		moveq	#0,d0
0001D7AA 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D7AE 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D7B2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D7B8 6500                       		bcs.s	SS_ChkEmldNum
0001D7BA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D7C0                            
0001D7C0                            SS_ChkEmldNum:
0001D7C0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D7C6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D7C8 7200                       		moveq	#0,d1
0001D7CA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D7CE 5301                       		subq.b	#1,d1
0001D7D0 6500                       		bcs.s	SS_LoadData
0001D7D2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D7D6                            
0001D7D6                            SS_ChkEmldLoop:	
0001D7D6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D7DA 6600                       		bne.s	SS_ChkEmldRepeat
0001D7DC 60CA                       		bra.s	SS_Load
0001D7DE                            ; ===========================================================================
0001D7DE                            
0001D7DE                            SS_ChkEmldRepeat:
0001D7DE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D7E2                            
0001D7E2                            SS_LoadData:
0001D7E2 E548                       		lsl.w	#2,d0
0001D7E4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D7E8 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D7EC 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D7F0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D7F4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D7FA 303C 0000                  		move.w	#0,d0
0001D7FE 4EB9 0000 1724             		jsr	(EniDec).l
0001D804 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D80A 303C 0FFF                  		move.w	#$FFF,d0
0001D80E                            
0001D80E                            SS_ClrRAM3:
0001D80E 4299                       		clr.l	(a1)+
0001D810 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D814                            
0001D814 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D81A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D820 723F                       		moveq	#$3F,d1
0001D822                            
0001D822                            loc_1B6F6:
0001D822 743F                       		moveq	#$3F,d2
0001D824                            
0001D824                            loc_1B6F8:
0001D824 12D8                       		move.b	(a0)+,(a1)+
0001D826 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D82A                            
0001D82A 43E9 0040                  		lea	$40(a1),a1
0001D82E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D832                            
0001D832 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D838 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D83E 724D                       		moveq	#$4D,d1
0001D840                            
0001D840                            loc_1B714:
0001D840 22D8                       		move.l	(a0)+,(a1)+
0001D842 32FC 0000                  		move.w	#0,(a1)+
0001D846 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D84C 32D8                       		move.w	(a0)+,(a1)+
0001D84E 51C9 FFF0                  		dbf	d1,loc_1B714
0001D852                            
0001D852 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D858 323C 003F                  		move.w	#$3F,d1
0001D85C                            
0001D85C                            loc_1B730:
0001D85C                            
0001D85C 4299                       		clr.l	(a1)+
0001D85E 51C9 FFFC                  		dbf	d1,loc_1B730
0001D862                            
0001D862 4E75                       		rts	
0001D864                            ; End of function SS_Load
0001D864                            
0001D864                            ; ===========================================================================
0001D864                            ; ---------------------------------------------------------------------------
0001D864                            ; Special stage	mappings and VRAM pointers
0001D864                            ; ---------------------------------------------------------------------------
0001D864                            SS_MapIndex:
0001D864                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D864                            ; ---------------------------------------------------------------------------
0001D864                            ; Special stage	mappings and VRAM pointers
0001D864                            ; ---------------------------------------------------------------------------
0001D864 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D868 0142                       	dc.w $142		; VRAM setting
0001D86A 0000 0000                  	dc.l Map_SSWalls
0001D86E 0142                       	dc.w $142
0001D870 0000 0000                  	dc.l Map_SSWalls
0001D874 0142                       	dc.w $142
0001D876 0000 0000                  	dc.l Map_SSWalls
0001D87A 0142                       	dc.w $142
0001D87C 0000 0000                  	dc.l Map_SSWalls
0001D880 0142                       	dc.w $142
0001D882 0000 0000                  	dc.l Map_SSWalls
0001D886 0142                       	dc.w $142
0001D888 0000 0000                  	dc.l Map_SSWalls
0001D88C 0142                       	dc.w $142
0001D88E 0000 0000                  	dc.l Map_SSWalls
0001D892 0142                       	dc.w $142
0001D894 0000 0000                  	dc.l Map_SSWalls
0001D898 0142                       	dc.w $142
0001D89A 0000 0000                  	dc.l Map_SSWalls
0001D89E 2142                       	dc.w $2142
0001D8A0 0000 0000                  	dc.l Map_SSWalls
0001D8A4 2142                       	dc.w $2142
0001D8A6 0000 0000                  	dc.l Map_SSWalls
0001D8AA 2142                       	dc.w $2142
0001D8AC 0000 0000                  	dc.l Map_SSWalls
0001D8B0 2142                       	dc.w $2142
0001D8B2 0000 0000                  	dc.l Map_SSWalls
0001D8B6 2142                       	dc.w $2142
0001D8B8 0000 0000                  	dc.l Map_SSWalls
0001D8BC 2142                       	dc.w $2142
0001D8BE 0000 0000                  	dc.l Map_SSWalls
0001D8C2 2142                       	dc.w $2142
0001D8C4 0000 0000                  	dc.l Map_SSWalls
0001D8C8 2142                       	dc.w $2142
0001D8CA 0000 0000                  	dc.l Map_SSWalls
0001D8CE 2142                       	dc.w $2142
0001D8D0 0000 0000                  	dc.l Map_SSWalls
0001D8D4 4142                       	dc.w $4142
0001D8D6 0000 0000                  	dc.l Map_SSWalls
0001D8DA 4142                       	dc.w $4142
0001D8DC 0000 0000                  	dc.l Map_SSWalls
0001D8E0 4142                       	dc.w $4142
0001D8E2 0000 0000                  	dc.l Map_SSWalls
0001D8E6 4142                       	dc.w $4142
0001D8E8 0000 0000                  	dc.l Map_SSWalls
0001D8EC 4142                       	dc.w $4142
0001D8EE 0000 0000                  	dc.l Map_SSWalls
0001D8F2 4142                       	dc.w $4142
0001D8F4 0000 0000                  	dc.l Map_SSWalls
0001D8F8 4142                       	dc.w $4142
0001D8FA 0000 0000                  	dc.l Map_SSWalls
0001D8FE 4142                       	dc.w $4142
0001D900 0000 0000                  	dc.l Map_SSWalls
0001D904 4142                       	dc.w $4142
0001D906 0000 0000                  	dc.l Map_SSWalls
0001D90A 6142                       	dc.w $6142
0001D90C 0000 0000                  	dc.l Map_SSWalls
0001D910 6142                       	dc.w $6142
0001D912 0000 0000                  	dc.l Map_SSWalls
0001D916 6142                       	dc.w $6142
0001D918 0000 0000                  	dc.l Map_SSWalls
0001D91C 6142                       	dc.w $6142
0001D91E 0000 0000                  	dc.l Map_SSWalls
0001D922 6142                       	dc.w $6142
0001D924 0000 0000                  	dc.l Map_SSWalls
0001D928 6142                       	dc.w $6142
0001D92A 0000 0000                  	dc.l Map_SSWalls
0001D92E 6142                       	dc.w $6142
0001D930 0000 0000                  	dc.l Map_SSWalls
0001D934 6142                       	dc.w $6142
0001D936 0000 0000                  	dc.l Map_SSWalls
0001D93A 6142                       	dc.w $6142
0001D93C 0001 0698                  	dc.l Map_obj47
0001D940 023B                       	dc.w $23B
0001D942 0000 0000                  	dc.l Map_SS_R
0001D946 0570                       	dc.w $570
0001D948 0000 0000                  	dc.l Map_SS_R
0001D94C 0251                       	dc.w $251
0001D94E 0000 0000                  	dc.l Map_SS_R
0001D952 0370                       	dc.w $370
0001D954 0000 0000                  	dc.l Map_SS_Up
0001D958 0263                       	dc.w $263
0001D95A 0000 0000                  	dc.l Map_SS_Down
0001D95E 0263                       	dc.w $263
0001D960 0000 0000                  	dc.l Map_SS_R
0001D964 22F0                       	dc.w $22F0
0001D966 0000 0000                  	dc.l Map_SS_Glass
0001D96A 0470                       	dc.w $470
0001D96C 0000 0000                  	dc.l Map_SS_Glass
0001D970 05F0                       	dc.w $5F0
0001D972 0000 0000                  	dc.l Map_SS_Glass
0001D976 65F0                       	dc.w $65F0
0001D978 0000 0000                  	dc.l Map_SS_Glass
0001D97C 25F0                       	dc.w $25F0
0001D97E 0000 0000                  	dc.l Map_SS_Glass
0001D982 45F0                       	dc.w $45F0
0001D984 0000 0000                  	dc.l Map_SS_R
0001D988 02F0                       	dc.w $2F0
0001D98A 0101 0698                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D98E 023B                       	dc.w $23B
0001D990 0201 0698                  	dc.l Map_obj47+$2000000
0001D994 023B                       	dc.w $23B
0001D996 0000 0000                  	dc.l Map_SS_R
0001D99A 0797                       	dc.w $797
0001D99C 0000 0000                  	dc.l Map_SS_R
0001D9A0 07A0                       	dc.w $7A0
0001D9A2 0000 0000                  	dc.l Map_SS_R
0001D9A6 07A9                       	dc.w $7A9
0001D9A8 0000 0000                  	dc.l Map_SS_R
0001D9AC 0797                       	dc.w $797
0001D9AE 0000 0000                  	dc.l Map_SS_R
0001D9B2 07A0                       	dc.w $7A0
0001D9B4 0000 0000                  	dc.l Map_SS_R
0001D9B8 07A9                       	dc.w $7A9
0001D9BA 0000 B9AE                  	dc.l Map_obj25
0001D9BE 27B2                       	dc.w $27B2
0001D9C0 0000 0000                  	dc.l Map_SS_Chaos3
0001D9C4 0770                       	dc.w $770
0001D9C6 0000 0000                  	dc.l Map_SS_Chaos3
0001D9CA 2770                       	dc.w $2770
0001D9CC 0000 0000                  	dc.l Map_SS_Chaos3
0001D9D0 4770                       	dc.w $4770
0001D9D2 0000 0000                  	dc.l Map_SS_Chaos3
0001D9D6 6770                       	dc.w $6770
0001D9D8 0000 0000                  	dc.l Map_SS_Chaos1
0001D9DC 0770                       	dc.w $770
0001D9DE 0000 0000                  	dc.l Map_SS_Chaos2
0001D9E2 0770                       	dc.w $770
0001D9E4 0000 0000                  	dc.l Map_SS_R
0001D9E8 04F0                       	dc.w $4F0
0001D9EA 0400 B9AE                  	dc.l Map_obj25+$4000000
0001D9EE 27B2                       	dc.w $27B2
0001D9F0 0500 B9AE                  	dc.l Map_obj25+$5000000
0001D9F4 27B2                       	dc.w $27B2
0001D9F6 0600 B9AE                  	dc.l Map_obj25+$6000000
0001D9FA 27B2                       	dc.w $27B2
0001D9FC 0700 B9AE                  	dc.l Map_obj25+$7000000
0001DA00 27B2                       	dc.w $27B2
0001DA02 0000 0000                  	dc.l Map_SS_Glass
0001DA06 23F0                       	dc.w $23F0
0001DA08 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DA0C 23F0                       	dc.w $23F0
0001DA0E 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DA12 23F0                       	dc.w $23F0
0001DA14 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DA18 23F0                       	dc.w $23F0
0001DA1A 0000 0000                  	dc.l Map_SS_R+$2000000
0001DA1E 04F0                       	dc.w $4F0
0001DA20 0000 0000                  	dc.l Map_SS_Glass
0001DA24 05F0                       	dc.w $5F0
0001DA26 0000 0000                  	dc.l Map_SS_Glass
0001DA2A 65F0                       	dc.w $65F0
0001DA2C 0000 0000                  	dc.l Map_SS_Glass
0001DA30 25F0                       	dc.w $25F0
0001DA32 0000 0000                  	dc.l Map_SS_Glass
0001DA36 45F0                       	dc.w $45F0
0001DA36 45F0                       	dc.w $45F0
0001DA38                            
0001DA38                            ; ---------------------------------------------------------------------------
0001DA38                            ; Sprite mappings - special stage "R" block
0001DA38                            ; ---------------------------------------------------------------------------
0001DA38                            Map_SS_R:
0001DA38                            	include "_maps\SSRblock.asm"
0001DA38                            ; ---------------------------------------------------------------------------
0001DA38                            ; Sprite mappings - special stage "R" block
0001DA38                            ; ---------------------------------------------------------------------------
0001DA38 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DA3C 0000                       		dc.w byte_1B91E-Map_SS_R
0001DA3E 01                         byte_1B912:	dc.b 1
0001DA3F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DA44 01                         byte_1B918:	dc.b 1
0001DA45 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DA4A 00                         byte_1B91E:	dc.b 0
0001DA4C 00                         		even
0001DA4C 00                         		even
0001DA4C                            
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            Map_SS_Glass:
0001DA4C                            	include "_maps\SSglassblock.asm"
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DA50 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DA54 01                         byte_1B928:	dc.b 1
0001DA55 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DA5A 01                         byte_1B92E:	dc.b 1
0001DA5B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DA60 01                         byte_1B934:	dc.b 1
0001DA61 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DA66 01                         byte_1B93A:	dc.b 1
0001DA67 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DA6C                            		even
0001DA6C                            		even
0001DA6C                            
0001DA6C                            ; ---------------------------------------------------------------------------
0001DA6C                            ; Sprite mappings - special stage "UP" block
0001DA6C                            ; ---------------------------------------------------------------------------
0001DA6C                            Map_SS_Up:
0001DA6C                            	include "_maps\SSUPblock.asm"
0001DA6C                            ; ---------------------------------------------------------------------------
0001DA6C                            ; Sprite mappings - special stage "UP" block
0001DA6C                            ; ---------------------------------------------------------------------------
0001DA6C 0000                       		dc.w byte_1B944-Map_SS_Up
0001DA6E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DA70 01                         byte_1B944:	dc.b 1
0001DA71 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DA76 01                         byte_1B94A:	dc.b 1
0001DA77 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DA7C                            		even
0001DA7C                            		even
0001DA7C                            
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            ; Sprite mappings - special stage "DOWN" block
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            Map_SS_Down:
0001DA7C                            	include "_maps\SSDOWNblock.asm"
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            ; Sprite mappings - special stage "DOWN" block
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C 0000                       		dc.w byte_1B954-Map_SS_Down
0001DA7E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DA80 01                         byte_1B954:	dc.b 1
0001DA81 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DA86 01                         byte_1B95A:	dc.b 1
0001DA87 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DA8C                            		even
0001DA8C                            		even
0001DA8C                            
0001DA8C                            ; ---------------------------------------------------------------------------
0001DA8C                            ; Sprite mappings - special stage chaos	emeralds
0001DA8C                            ; ---------------------------------------------------------------------------
0001DA8C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DA8E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DA90 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DA92 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DA94 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DA96 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DA98 01                         byte_1B96C:	dc.b 1
0001DA99 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DA9E 01                         byte_1B972:	dc.b 1
0001DA9F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DAA4 01                         byte_1B978:	dc.b 1
0001DAA5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DAAA 01                         byte_1B97E:	dc.b 1
0001DAAB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DAB0                            		even
0001DAB0                            ; ===========================================================================
0001DAB0                            ; ---------------------------------------------------------------------------
0001DAB0                            ; Object 09 - Sonic (special stage)
0001DAB0                            ; ---------------------------------------------------------------------------
0001DAB0                            
0001DAB0                            Obj09:					; XREF: Obj_Index
0001DAB0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DAB4 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DAB6 6100 0000                  		bsr.w	SS_FixCamera
0001DABA 6000 0000                  		bra.w	DebugMode
0001DABE                            ; ===========================================================================
0001DABE                            
0001DABE                            Obj09_Normal:
0001DABE 7000                       		moveq	#0,d0
0001DAC0 1028 0024                  		move.b	$24(a0),d0
0001DAC4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DAC8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DACC                            ; ===========================================================================
0001DACC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DACE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DAD0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DAD2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DAD4                            ; ===========================================================================
0001DAD4                            
0001DAD4                            Obj09_Main:				; XREF: Obj09_Index
0001DAD4 5428 0024                  		addq.b	#2,$24(a0)
0001DAD8 117C 000E 0016             		move.b	#$E,$16(a0)
0001DADE 117C 0007 0017             		move.b	#7,$17(a0)
0001DAE4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DAEC 317C 0780 0002             		move.w	#$780,2(a0)
0001DAF2 117C 0004 0001             		move.b	#4,1(a0)
0001DAF8 117C 0000 0018             		move.b	#0,$18(a0)
0001DAFE 117C 0018 001C             		move.b	#$18,$1C(a0)
0001DB04 08E8 0002 0022             		bset	#2,$22(a0)
0001DB0A 08E8 0001 0022             		bset	#1,$22(a0)
0001DB10                            
0001DB10                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DB10 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DB14 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DB16 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DB1C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DB1E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DB24                            
0001DB24                            Obj09_NoDebug:
0001DB24 117C 0000 0030             		move.b	#0,$30(a0)
0001DB2A 7000                       		moveq	#0,d0
0001DB2C 1028 0022                  		move.b	$22(a0),d0
0001DB30 0240 0002                  		andi.w	#2,d0
0001DB34 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DB38 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DB3C 4EB9 0001 5AB6             		jsr	LoadSonicDynPLC
0001DB42 4EF9 0000 F186             		jmp	DisplaySprite
0001DB48                            ; ===========================================================================
0001DB48 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DB4A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DB4C                            ; ===========================================================================
0001DB4C                            
0001DB4C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DB4C 6100 0000                  		bsr.w	Obj09_Jump
0001DB50 6100 0000                  		bsr.w	Obj09_Move
0001DB54 6100 0000                  		bsr.w	Obj09_Fall
0001DB58 6000                       		bra.s	Obj09_Display
0001DB5A                            ; ===========================================================================
0001DB5A                            
0001DB5A                            Obj09_InAir:				; XREF: Obj09_Modes
0001DB5A 6100 0000                  		bsr.w	nullsub_2
0001DB5E 6100 0000                  		bsr.w	Obj09_Move
0001DB62 6100 0000                  		bsr.w	Obj09_Fall
0001DB66                            
0001DB66                            Obj09_Display:				; XREF: Obj09_OnWall
0001DB66 6100 0000                  		bsr.w	Obj09_ChkItems
0001DB6A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DB6E 4EB9 0000 F16C             		jsr	SpeedToPos
0001DB74 6100 0000                  		bsr.w	SS_FixCamera
0001DB78 3038 F780                  		move.w	($FFFFF780).w,d0
0001DB7C D078 F782                  		add.w	($FFFFF782).w,d0
0001DB80 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DB84 4EB9 0001 5872             		jsr	Sonic_Animate
0001DB8A 4E75                       		rts	
0001DB8C                            
0001DB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB8C                            
0001DB8C                            
0001DB8C                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DB8C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DB92 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DB94 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DB98                            
0001DB98                            Obj09_ChkRight:
0001DB98 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DB9E 6700                       		beq.s	loc_1BA78	; if not, branch
0001DBA0 6100 0000                  		bsr.w	Obj09_MoveRight
0001DBA4                            
0001DBA4                            loc_1BA78:
0001DBA4 1038 F602                  		move.b	($FFFFF602).w,d0
0001DBA8 0200 000C                  		andi.b	#$C,d0
0001DBAC 6600                       		bne.s	loc_1BAA8
0001DBAE 3028 0014                  		move.w	$14(a0),d0
0001DBB2 6700                       		beq.s	loc_1BAA8
0001DBB4 6B00                       		bmi.s	loc_1BA9A
0001DBB6 0440 000C                  		subi.w	#$C,d0
0001DBBA 6400                       		bcc.s	loc_1BA94
0001DBBC 303C 0000                  		move.w	#0,d0
0001DBC0                            
0001DBC0                            loc_1BA94:
0001DBC0 3140 0014                  		move.w	d0,$14(a0)
0001DBC4 6000                       		bra.s	loc_1BAA8
0001DBC6                            ; ===========================================================================
0001DBC6                            
0001DBC6                            loc_1BA9A:
0001DBC6 0640 000C                  		addi.w	#$C,d0
0001DBCA 6400                       		bcc.s	loc_1BAA4
0001DBCC 303C 0000                  		move.w	#0,d0
0001DBD0                            
0001DBD0                            loc_1BAA4:
0001DBD0 3140 0014                  		move.w	d0,$14(a0)
0001DBD4                            
0001DBD4                            loc_1BAA8:
0001DBD4 1038 F780                  		move.b	($FFFFF780).w,d0
0001DBD8 0600 0020                  		addi.b	#$20,d0
0001DBDC 0200 00C0                  		andi.b	#$C0,d0
0001DBE0 4400                       		neg.b	d0
0001DBE2 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DBE8 C3E8 0014                  		muls.w	$14(a0),d1
0001DBEC D3A8 0008                  		add.l	d1,8(a0)
0001DBF0 C1E8 0014                  		muls.w	$14(a0),d0
0001DBF4 D1A8 000C                  		add.l	d0,$C(a0)
0001DBF8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DBFC 2428 000C                  		move.l	$C(a0),d2
0001DC00 2628 0008                  		move.l	8(a0),d3
0001DC04 6100 0000                  		bsr.w	sub_1BCE8
0001DC08 6700                       		beq.s	loc_1BAF2
0001DC0A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DC0E 93A8 0008                  		sub.l	d1,8(a0)
0001DC12 91A8 000C                  		sub.l	d0,$C(a0)
0001DC16 317C 0000 0014             		move.w	#0,$14(a0)
0001DC1C 4E75                       		rts	
0001DC1E                            ; ===========================================================================
0001DC1E                            
0001DC1E                            loc_1BAF2:
0001DC1E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DC22 4E75                       		rts	
0001DC24                            ; End of function Obj09_Move
0001DC24                            
0001DC24                            
0001DC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC24                            
0001DC24                            
0001DC24                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DC24 08E8 0000 0022             		bset	#0,$22(a0)
0001DC2A 3028 0014                  		move.w	$14(a0),d0
0001DC2E 6700                       		beq.s	loc_1BB06
0001DC30 6A00                       		bpl.s	loc_1BB1A
0001DC32                            
0001DC32                            loc_1BB06:
0001DC32 0440 000C                  		subi.w	#$C,d0
0001DC36 0C40 F800                  		cmpi.w	#-$800,d0
0001DC3A 6E00                       		bgt.s	loc_1BB14
0001DC3C 303C F800                  		move.w	#-$800,d0
0001DC40                            
0001DC40                            loc_1BB14:
0001DC40 3140 0014                  		move.w	d0,$14(a0)
0001DC44 4E75                       		rts	
0001DC46                            ; ===========================================================================
0001DC46                            
0001DC46                            loc_1BB1A:
0001DC46 0440 0040                  		subi.w	#$40,d0
0001DC4A 6400                       		bcc.s	loc_1BB22
0001DC4C 4E71                       		nop	
0001DC4E                            
0001DC4E                            loc_1BB22:
0001DC4E 3140 0014                  		move.w	d0,$14(a0)
0001DC52 4E75                       		rts	
0001DC54                            ; End of function Obj09_MoveLeft
0001DC54                            
0001DC54                            
0001DC54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC54                            
0001DC54                            
0001DC54                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DC54 08A8 0000 0022             		bclr	#0,$22(a0)
0001DC5A 3028 0014                  		move.w	$14(a0),d0
0001DC5E 6B00                       		bmi.s	loc_1BB48
0001DC60 0640 000C                  		addi.w	#$C,d0
0001DC64 0C40 0800                  		cmpi.w	#$800,d0
0001DC68 6D00                       		blt.s	loc_1BB42
0001DC6A 303C 0800                  		move.w	#$800,d0
0001DC6E                            
0001DC6E                            loc_1BB42:
0001DC6E 3140 0014                  		move.w	d0,$14(a0)
0001DC72 6000                       		bra.s	locret_1BB54
0001DC74                            ; ===========================================================================
0001DC74                            
0001DC74                            loc_1BB48:
0001DC74 0640 0040                  		addi.w	#$40,d0
0001DC78 6400                       		bcc.s	loc_1BB50
0001DC7A 4E71                       		nop	
0001DC7C                            
0001DC7C                            loc_1BB50:
0001DC7C 3140 0014                  		move.w	d0,$14(a0)
0001DC80                            
0001DC80                            locret_1BB54:
0001DC80 4E75                       		rts	
0001DC82                            ; End of function Obj09_MoveRight
0001DC82                            
0001DC82                            
0001DC82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC82                            
0001DC82                            
0001DC82                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DC82 1038 F603                  		move.b	($FFFFF603).w,d0
0001DC86 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DC8A 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DC8C 1038 F780                  		move.b	($FFFFF780).w,d0
0001DC90 0200 00FC                  		andi.b	#$FC,d0
0001DC94 4400                       		neg.b	d0
0001DC96 0400 0040                  		subi.b	#$40,d0
0001DC9A 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DCA0 C3FC 0680                  		muls.w	#$680,d1
0001DCA4 E081                       		asr.l	#8,d1
0001DCA6 3141 0010                  		move.w	d1,$10(a0)
0001DCAA C1FC 0680                  		muls.w	#$680,d0
0001DCAE E080                       		asr.l	#8,d0
0001DCB0 3140 0012                  		move.w	d0,$12(a0)
0001DCB4 08E8 0001 0022             		bset	#1,$22(a0)
0001DCBA 303C 00A0                  		move.w	#$A0,d0
0001DCBE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DCC4                            
0001DCC4                            Obj09_NoJump:
0001DCC4 4E75                       		rts	
0001DCC6                            ; End of function Obj09_Jump
0001DCC6                            
0001DCC6                            
0001DCC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCC6                            
0001DCC6                            
0001DCC6                            nullsub_2:				; XREF: Obj09_InAir
0001DCC6 4E75                       		rts	
0001DCC8                            ; End of function nullsub_2
0001DCC8                            
0001DCC8                            ; ===========================================================================
0001DCC8                            ; ---------------------------------------------------------------------------
0001DCC8                            ; unused subroutine to limit Sonic's upward vertical speed
0001DCC8                            ; ---------------------------------------------------------------------------
0001DCC8 323C FC00                  		move.w	#-$400,d1
0001DCCC B268 0012                  		cmp.w	$12(a0),d1
0001DCD0 6F00                       		ble.s	locret_1BBB4
0001DCD2 1038 F602                  		move.b	($FFFFF602).w,d0
0001DCD6 0200 0070                  		andi.b	#$70,d0
0001DCDA 6600                       		bne.s	locret_1BBB4
0001DCDC 3141 0012                  		move.w	d1,$12(a0)
0001DCE0                            
0001DCE0                            locret_1BBB4:
0001DCE0 4E75                       		rts	
0001DCE2                            ; ---------------------------------------------------------------------------
0001DCE2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DCE2                            ; ---------------------------------------------------------------------------
0001DCE2                            
0001DCE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCE2                            
0001DCE2                            
0001DCE2                            SS_FixCamera:				; XREF: Obj09
0001DCE2 3428 000C                  		move.w	$C(a0),d2
0001DCE6 3628 0008                  		move.w	8(a0),d3
0001DCEA 3038 F700                  		move.w	($FFFFF700).w,d0
0001DCEE 0443 00A0                  		subi.w	#$A0,d3
0001DCF2 6500                       		bcs.s	loc_1BBCE
0001DCF4 9043                       		sub.w	d3,d0
0001DCF6 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DCFA                            
0001DCFA                            loc_1BBCE:
0001DCFA 3038 F704                  		move.w	($FFFFF704).w,d0
0001DCFE 0442 0070                  		subi.w	#$70,d2
0001DD02 6500                       		bcs.s	locret_1BBDE
0001DD04 9042                       		sub.w	d2,d0
0001DD06 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DD0A                            
0001DD0A                            locret_1BBDE:
0001DD0A 4E75                       		rts	
0001DD0C                            ; End of function SS_FixCamera
0001DD0C                            
0001DD0C                            ; ===========================================================================
0001DD0C                            
0001DD0C                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DD0C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DD12 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DD18 6600                       		bne.s	loc_1BBF4
0001DD1A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DD20                            
0001DD20                            loc_1BBF4:
0001DD20 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DD26 6D00                       		blt.s	loc_1BC12
0001DD28 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DD2E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DD34 5428 0024                  		addq.b	#2,$24(a0)
0001DD38 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DD3E                            
0001DD3E                            loc_1BC12:
0001DD3E 3038 F780                  		move.w	($FFFFF780).w,d0
0001DD42 D078 F782                  		add.w	($FFFFF782).w,d0
0001DD46 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DD4A 4EB9 0001 5872             		jsr	Sonic_Animate
0001DD50 4EB9 0001 5AB6             		jsr	LoadSonicDynPLC
0001DD56 6100 FF8A                  		bsr.w	SS_FixCamera
0001DD5A 4EF9 0000 F186             		jmp	DisplaySprite
0001DD60                            ; ===========================================================================
0001DD60                            
0001DD60                            Obj09_Exit2:				; XREF: Obj09_Index
0001DD60 5368 0038                  		subq.w	#1,$38(a0)
0001DD64 6600                       		bne.s	loc_1BC40
0001DD66 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DD6C                            
0001DD6C                            loc_1BC40:
0001DD6C 4EB9 0001 5872             		jsr	Sonic_Animate
0001DD72 4EB9 0001 5AB6             		jsr	LoadSonicDynPLC
0001DD78 6100 FF68                  		bsr.w	SS_FixCamera
0001DD7C 4EF9 0000 F186             		jmp	DisplaySprite
0001DD82                            
0001DD82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD82                            
0001DD82                            
0001DD82                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DD82 2428 000C                  		move.l	$C(a0),d2
0001DD86 2628 0008                  		move.l	8(a0),d3
0001DD8A 1038 F780                  		move.b	($FFFFF780).w,d0
0001DD8E 0200 00FC                  		andi.b	#$FC,d0
0001DD92 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DD98 3828 0010                  		move.w	$10(a0),d4
0001DD9C 48C4                       		ext.l	d4
0001DD9E E184                       		asl.l	#8,d4
0001DDA0 C1FC 002A                  		muls.w	#$2A,d0
0001DDA4 D084                       		add.l	d4,d0
0001DDA6 3828 0012                  		move.w	$12(a0),d4
0001DDAA 48C4                       		ext.l	d4
0001DDAC E184                       		asl.l	#8,d4
0001DDAE C3FC 002A                  		muls.w	#$2A,d1
0001DDB2 D284                       		add.l	d4,d1
0001DDB4 D680                       		add.l	d0,d3
0001DDB6 6100 0000                  		bsr.w	sub_1BCE8
0001DDBA 6700                       		beq.s	loc_1BCB0
0001DDBC 9680                       		sub.l	d0,d3
0001DDBE 7000                       		moveq	#0,d0
0001DDC0 3140 0010                  		move.w	d0,$10(a0)
0001DDC4 08A8 0001 0022             		bclr	#1,$22(a0)
0001DDCA D481                       		add.l	d1,d2
0001DDCC 6100 0000                  		bsr.w	sub_1BCE8
0001DDD0 6700                       		beq.s	loc_1BCC6
0001DDD2 9481                       		sub.l	d1,d2
0001DDD4 7200                       		moveq	#0,d1
0001DDD6 3141 0012                  		move.w	d1,$12(a0)
0001DDDA 4E75                       		rts	
0001DDDC                            ; ===========================================================================
0001DDDC                            
0001DDDC                            loc_1BCB0:
0001DDDC D481                       		add.l	d1,d2
0001DDDE 6100 0000                  		bsr.w	sub_1BCE8
0001DDE2 6700                       		beq.s	loc_1BCD4
0001DDE4 9481                       		sub.l	d1,d2
0001DDE6 7200                       		moveq	#0,d1
0001DDE8 3141 0012                  		move.w	d1,$12(a0)
0001DDEC 08A8 0001 0022             		bclr	#1,$22(a0)
0001DDF2                            
0001DDF2                            loc_1BCC6:
0001DDF2 E080                       		asr.l	#8,d0
0001DDF4 E081                       		asr.l	#8,d1
0001DDF6 3140 0010                  		move.w	d0,$10(a0)
0001DDFA 3141 0012                  		move.w	d1,$12(a0)
0001DDFE 4E75                       		rts	
0001DE00                            ; ===========================================================================
0001DE00                            
0001DE00                            loc_1BCD4:
0001DE00 E080                       		asr.l	#8,d0
0001DE02 E081                       		asr.l	#8,d1
0001DE04 3140 0010                  		move.w	d0,$10(a0)
0001DE08 3141 0012                  		move.w	d1,$12(a0)
0001DE0C 08E8 0001 0022             		bset	#1,$22(a0)
0001DE12 4E75                       		rts	
0001DE14                            ; End of function Obj09_Fall
0001DE14                            
0001DE14                            
0001DE14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE14                            
0001DE14                            
0001DE14                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DE14 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DE1A 7800                       		moveq	#0,d4
0001DE1C 4842                       		swap	d2
0001DE1E 3802                       		move.w	d2,d4
0001DE20 4842                       		swap	d2
0001DE22 0644 0044                  		addi.w	#$44,d4
0001DE26 88FC 0018                  		divu.w	#$18,d4
0001DE2A C8FC 0080                  		mulu.w	#$80,d4
0001DE2E D3C4                       		adda.l	d4,a1
0001DE30 7800                       		moveq	#0,d4
0001DE32 4843                       		swap	d3
0001DE34 3803                       		move.w	d3,d4
0001DE36 4843                       		swap	d3
0001DE38 0644 0014                  		addi.w	#$14,d4
0001DE3C 88FC 0018                  		divu.w	#$18,d4
0001DE40 D2C4                       		adda.w	d4,a1
0001DE42 7A00                       		moveq	#0,d5
0001DE44 1819                       		move.b	(a1)+,d4
0001DE46 6100                       		bsr.s	sub_1BD30
0001DE48 1819                       		move.b	(a1)+,d4
0001DE4A 6100                       		bsr.s	sub_1BD30
0001DE4C D2FC 007E                  		adda.w	#$7E,a1
0001DE50 1819                       		move.b	(a1)+,d4
0001DE52 6100                       		bsr.s	sub_1BD30
0001DE54 1819                       		move.b	(a1)+,d4
0001DE56 6100                       		bsr.s	sub_1BD30
0001DE58 4A05                       		tst.b	d5
0001DE5A 4E75                       		rts	
0001DE5C                            ; End of function sub_1BCE8
0001DE5C                            
0001DE5C                            
0001DE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE5C                            
0001DE5C                            
0001DE5C                            sub_1BD30:				; XREF: sub_1BCE8
0001DE5C 6700                       		beq.s	locret_1BD44
0001DE5E 0C04 0028                  		cmpi.b	#$28,d4
0001DE62 6700                       		beq.s	locret_1BD44
0001DE64 0C04 003A                  		cmpi.b	#$3A,d4
0001DE68 6500                       		bcs.s	loc_1BD46
0001DE6A 0C04 004B                  		cmpi.b	#$4B,d4
0001DE6E 6400                       		bcc.s	loc_1BD46
0001DE70                            
0001DE70                            locret_1BD44:
0001DE70 4E75                       		rts	
0001DE72                            ; ===========================================================================
0001DE72                            
0001DE72                            loc_1BD46:
0001DE72 1144 0030                  		move.b	d4,$30(a0)
0001DE76 2149 0032                  		move.l	a1,$32(a0)
0001DE7A 7AFF                       		moveq	#-1,d5
0001DE7C 4E75                       		rts	
0001DE7E                            ; End of function sub_1BD30
0001DE7E                            
0001DE7E                            
0001DE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE7E                            
0001DE7E                            
0001DE7E                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DE7E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DE84 7800                       		moveq	#0,d4
0001DE86 3828 000C                  		move.w	$C(a0),d4
0001DE8A 0644 0050                  		addi.w	#$50,d4
0001DE8E 88FC 0018                  		divu.w	#$18,d4
0001DE92 C8FC 0080                  		mulu.w	#$80,d4
0001DE96 D3C4                       		adda.l	d4,a1
0001DE98 7800                       		moveq	#0,d4
0001DE9A 3828 0008                  		move.w	8(a0),d4
0001DE9E 0644 0020                  		addi.w	#$20,d4
0001DEA2 88FC 0018                  		divu.w	#$18,d4
0001DEA6 D2C4                       		adda.w	d4,a1
0001DEA8 1811                       		move.b	(a1),d4
0001DEAA 6600                       		bne.s	Obj09_ChkCont
0001DEAC 4A28 003A                  		tst.b	$3A(a0)
0001DEB0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DEB4 7800                       		moveq	#0,d4
0001DEB6 4E75                       		rts	
0001DEB8                            ; ===========================================================================
0001DEB8                            
0001DEB8                            Obj09_ChkCont:
0001DEB8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DEBC 6600                       		bne.s	Obj09_Chk1Up
0001DEBE 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DEC2 6600                       		bne.s	Obj09_GetCont
0001DEC4 14BC 0001                  		move.b	#1,(a2)
0001DEC8 2549 0004                  		move.l	a1,4(a2)
0001DECC                            
0001DECC                            Obj09_GetCont:
0001DECC 4EB9 0000 B64A             		jsr	CollectRing
0001DED2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DED8 6500                       		bcs.s	Obj09_NoCont
0001DEDA 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DEE0 6600                       		bne.s	Obj09_NoCont
0001DEE2 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DEE6 303C 00BF                  		move.w	#$BF,d0
0001DEEA 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra continue sound
0001DEF0                            
0001DEF0                            Obj09_NoCont:
0001DEF0 7800                       		moveq	#0,d4
0001DEF2 4E75                       		rts	
0001DEF4                            ; ===========================================================================
0001DEF4                            
0001DEF4                            Obj09_Chk1Up:
0001DEF4 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DEF8 6600                       		bne.s	Obj09_ChkEmer
0001DEFA 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001DEFE 6600                       		bne.s	Obj09_Get1Up
0001DF00 14BC 0003                  		move.b	#3,(a2)
0001DF04 2549 0004                  		move.l	a1,4(a2)
0001DF08                            
0001DF08                            Obj09_Get1Up:
0001DF08 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DF0C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DF10 303C 0088                  		move.w	#$88,d0
0001DF14 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra life music
0001DF1A 7800                       		moveq	#0,d4
0001DF1C 4E75                       		rts	
0001DF1E                            ; ===========================================================================
0001DF1E                            
0001DF1E                            Obj09_ChkEmer:
0001DF1E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DF22 6500                       		bcs.s	Obj09_ChkGhost
0001DF24 0C04 0040                  		cmpi.b	#$40,d4
0001DF28 6200                       		bhi.s	Obj09_ChkGhost
0001DF2A 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001DF2E 6600                       		bne.s	Obj09_GetEmer
0001DF30 14BC 0005                  		move.b	#5,(a2)
0001DF34 2549 0004                  		move.l	a1,4(a2)
0001DF38                            
0001DF38                            Obj09_GetEmer:
0001DF38 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DF3E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DF40 0404 003B                  		subi.b	#$3B,d4
0001DF44 7000                       		moveq	#0,d0
0001DF46 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DF4A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DF4E 1584 0000                  		move.b	d4,(a2,d0.w)
0001DF52 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DF56                            
0001DF56                            Obj09_NoEmer:
0001DF56 303C 0093                  		move.w	#$93,d0
0001DF5A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play emerald music
0001DF60 7800                       		moveq	#0,d4
0001DF62 4E75                       		rts	
0001DF64                            ; ===========================================================================
0001DF64                            
0001DF64                            Obj09_ChkGhost:
0001DF64 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DF68 6600                       		bne.s	Obj09_ChkGhostTag
0001DF6A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DF70                            
0001DF70                            Obj09_ChkGhostTag:
0001DF70 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DF74 6600                       		bne.s	Obj09_NoGhost
0001DF76 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DF7C 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DF7E 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DF84                            
0001DF84                            Obj09_NoGhost:
0001DF84 78FF                       		moveq	#-1,d4
0001DF86 4E75                       		rts	
0001DF88                            ; ===========================================================================
0001DF88                            
0001DF88                            Obj09_MakeGhostSolid:
0001DF88 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DF8E 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DF90 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DF96 723F                       		moveq	#$3F,d1
0001DF98                            
0001DF98                            Obj09_GhostLoop2:
0001DF98 743F                       		moveq	#$3F,d2
0001DF9A                            
0001DF9A                            Obj09_GhostLoop:
0001DF9A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DF9E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DFA0 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DFA4                            
0001DFA4                            Obj09_NoReplace:
0001DFA4 5249                       		addq.w	#1,a1
0001DFA6 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DFAA 43E9 0040                  		lea	$40(a1),a1
0001DFAE 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DFB2                            
0001DFB2                            Obj09_GhostNotSolid:
0001DFB2 4228 003A                  		clr.b	$3A(a0)
0001DFB6 7800                       		moveq	#0,d4
0001DFB8 4E75                       		rts	
0001DFBA                            ; End of function Obj09_ChkItems
0001DFBA                            
0001DFBA                            
0001DFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFBA                            
0001DFBA                            
0001DFBA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DFBA 1028 0030                  		move.b	$30(a0),d0
0001DFBE 6600                       		bne.s	Obj09_ChkBumper
0001DFC0 5328 0036                  		subq.b	#1,$36(a0)
0001DFC4 6A00                       		bpl.s	loc_1BEA0
0001DFC6 117C 0000 0036             		move.b	#0,$36(a0)
0001DFCC                            
0001DFCC                            loc_1BEA0:
0001DFCC 5328 0037                  		subq.b	#1,$37(a0)
0001DFD0 6A00                       		bpl.s	locret_1BEAC
0001DFD2 117C 0000 0037             		move.b	#0,$37(a0)
0001DFD8                            
0001DFD8                            locret_1BEAC:
0001DFD8 4E75                       		rts	
0001DFDA                            ; ===========================================================================
0001DFDA                            
0001DFDA                            Obj09_ChkBumper:
0001DFDA 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DFDE 6600                       		bne.s	Obj09_GOAL
0001DFE0 2228 0032                  		move.l	$32(a0),d1
0001DFE4 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DFEA 3401                       		move.w	d1,d2
0001DFEC 0241 007F                  		andi.w	#$7F,d1
0001DFF0 C2FC 0018                  		mulu.w	#$18,d1
0001DFF4 0441 0014                  		subi.w	#$14,d1
0001DFF8 EE4A                       		lsr.w	#7,d2
0001DFFA 0242 007F                  		andi.w	#$7F,d2
0001DFFE C4FC 0018                  		mulu.w	#$18,d2
0001E002 0442 0044                  		subi.w	#$44,d2
0001E006 9268 0008                  		sub.w	8(a0),d1
0001E00A 9468 000C                  		sub.w	$C(a0),d2
0001E00E 4EB9 0000 2E48             		jsr	(CalcAngle).l
0001E014 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001E01A C3FC F900                  		muls.w	#-$700,d1
0001E01E E081                       		asr.l	#8,d1
0001E020 3141 0010                  		move.w	d1,$10(a0)
0001E024 C1FC F900                  		muls.w	#-$700,d0
0001E028 E080                       		asr.l	#8,d0
0001E02A 3140 0012                  		move.w	d0,$12(a0)
0001E02E 08E8 0001 0022             		bset	#1,$22(a0)
0001E034 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001E038 6600                       		bne.s	Obj09_BumpSnd
0001E03A 14BC 0002                  		move.b	#2,(a2)
0001E03E 2028 0032                  		move.l	$32(a0),d0
0001E042 5380                       		subq.l	#1,d0
0001E044 2540 0004                  		move.l	d0,4(a2)
0001E048                            
0001E048                            Obj09_BumpSnd:
0001E048 303C 00B4                  		move.w	#$B4,d0
0001E04C 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E052                            ; ===========================================================================
0001E052                            
0001E052                            Obj09_GOAL:
0001E052 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E056 6600                       		bne.s	Obj09_UPblock
0001E058 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E05C 303C 00A8                  		move.w	#$A8,d0		; change item
0001E060 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E066 4E75                       		rts	
0001E068                            ; ===========================================================================
0001E068                            
0001E068                            Obj09_UPblock:
0001E068 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E06C 6600                       		bne.s	Obj09_DOWNblock
0001E06E 4A28 0036                  		tst.b	$36(a0)
0001E072 6600 0000                  		bne.w	Obj09_NoGlass
0001E076 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E07C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E082 6700                       		beq.s	Obj09_UPsnd
0001E084 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E088 2268 0032                  		movea.l	$32(a0),a1
0001E08C 5389                       		subq.l	#1,a1
0001E08E 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E092                            
0001E092                            Obj09_UPsnd:
0001E092 303C 00A9                  		move.w	#$A9,d0
0001E096 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E09C                            ; ===========================================================================
0001E09C                            
0001E09C                            Obj09_DOWNblock:
0001E09C 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E0A0 6600                       		bne.s	Obj09_Rblock
0001E0A2 4A28 0036                  		tst.b	$36(a0)
0001E0A6 6600 0000                  		bne.w	Obj09_NoGlass
0001E0AA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E0B0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E0B6 6600                       		bne.s	Obj09_DOWNsnd
0001E0B8 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E0BC 2268 0032                  		movea.l	$32(a0),a1
0001E0C0 5389                       		subq.l	#1,a1
0001E0C2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E0C6                            
0001E0C6                            Obj09_DOWNsnd:
0001E0C6 303C 00A9                  		move.w	#$A9,d0
0001E0CA 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E0D0                            ; ===========================================================================
0001E0D0                            
0001E0D0                            Obj09_Rblock:
0001E0D0 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E0D4 6600                       		bne.s	Obj09_ChkGlass
0001E0D6 4A28 0037                  		tst.b	$37(a0)
0001E0DA 6600 0000                  		bne.w	Obj09_NoGlass
0001E0DE 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E0E4 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001E0E8 6600                       		bne.s	Obj09_RevStage
0001E0EA 14BC 0004                  		move.b	#4,(a2)
0001E0EE 2028 0032                  		move.l	$32(a0),d0
0001E0F2 5380                       		subq.l	#1,d0
0001E0F4 2540 0004                  		move.l	d0,4(a2)
0001E0F8                            
0001E0F8                            Obj09_RevStage:
0001E0F8 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E0FC 303C 00A9                  		move.w	#$A9,d0
0001E100 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play sound
0001E106                            ; ===========================================================================
0001E106                            
0001E106                            Obj09_ChkGlass:
0001E106 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E10A 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E10C 0C00 002E                  		cmpi.b	#$2E,d0
0001E110 6700                       		beq.s	Obj09_Glass
0001E112 0C00 002F                  		cmpi.b	#$2F,d0
0001E116 6700                       		beq.s	Obj09_Glass
0001E118 0C00 0030                  		cmpi.b	#$30,d0
0001E11C 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001E11E                            
0001E11E                            Obj09_Glass:
0001E11E 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001E122 6600                       		bne.s	Obj09_GlassSnd
0001E124 14BC 0006                  		move.b	#6,(a2)
0001E128 2268 0032                  		movea.l	$32(a0),a1
0001E12C 5389                       		subq.l	#1,a1
0001E12E 2549 0004                  		move.l	a1,4(a2)
0001E132 1011                       		move.b	(a1),d0
0001E134 5200                       		addq.b	#1,d0		; change glass type when touched
0001E136 0C00 0030                  		cmpi.b	#$30,d0
0001E13A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E13C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E13E                            
0001E13E                            Obj09_GlassUpdate:
0001E13E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E142                            
0001E142                            Obj09_GlassSnd:
0001E142 303C 00BA                  		move.w	#$BA,d0
0001E146 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E14C                            ; ===========================================================================
0001E14C                            
0001E14C                            Obj09_NoGlass:
0001E14C 4E75                       		rts	
0001E14E                            ; End of function Obj09_ChkItems2
0001E14E                            
0001E14E                            ; ===========================================================================
0001E14E                            ; ---------------------------------------------------------------------------
0001E14E                            ; Object 10 - blank
0001E14E                            ; ---------------------------------------------------------------------------
0001E14E                            
0001E14E                            Obj10:					; XREF: Obj_Index
0001E14E 4E75                       		rts	
0001E150                            
0001E150                            ; ===========================================================================
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            
0001E150                            Obj03:
0001E150 7000                       		moveq	#0,d0
0001E152 1028 0024                  		move.b	$24(a0),d0
0001E156 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001E15A 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001E15E 3028 0008                  		move.w	8(a0),d0
0001E162 0240 FF80                  		andi.w	#$FF80,d0
0001E166 3238 F700                  		move.w	($FFFFF700).w,d1
0001E16A 0441 0080                  		subi.w	#$80,d1
0001E16E 0241 FF80                  		andi.w	#$FF80,d1
0001E172 9041                       		sub.w	d1,d0
0001E174 0C40 0280                  		cmpi.w	#$280,d0
0001E178 6200                       		bhi.s	Obj03_MarkChkGone
0001E17A 4E75                       		rts
0001E17C                            
0001E17C                            Obj03_MarkChkGone:
0001E17C 4EF9 0001 125E             		jmp	Mark_ChkGone
0001E182                            ; ===========================================================================
0001E182                            ; ---------------------------------------------------------------------------
0001E182 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001E184 0000                       		dc.w Obj03_MainX-Obj03_Index
0001E186 0000                       		dc.w Obj03_MainY-Obj03_Index
0001E188                            ; ---------------------------------------------------------------------------
0001E188                            ; ===========================================================================
0001E188                            ; ---------------------------------------------------------------------------
0001E188                            ; Initiation
0001E188                            ; ---------------------------------------------------------------------------
0001E188                            
0001E188                            Obj03_Init:
0001E188 5428 0024                  		addq.b	#2,$24(a0)
0001E18C 217C 0000 0000 0004        		move.l	#$00000000,$04(a0)
0001E194 317C 26BC 0002             		move.w	#$26BC,$02(a0)
0001E19A 0028 0004 0001             		ori.b	#4,$01(a0)
0001E1A0 117C 0010 0019             		move.b	#$10,$19(a0)
0001E1A6 117C 0005 0018             		move.b	#5,$18(a0)
0001E1AC 1028 0028                  		move.b	$28(a0),d0
0001E1B0 0800 0002                  		btst	#2,d0
0001E1B4 6700                       		beq.s	Obj03_Init_CheckX
0001E1B6                            
0001E1B6                            ;Obj03_Init_CheckY:
0001E1B6 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001E1BA 0240 0007                  		andi.w	#7,d0
0001E1BE 1140 001A                  		move.b	d0,$1A(a0)
0001E1C2 0240 0003                  		andi.w	#3,d0
0001E1C6 D040                       		add.w	d0,d0
0001E1C8 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E1CE 3228 000C                  		move.w	$0C(a0),d1
0001E1D2 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E1D6 B269 000C                  		cmp.w	$0C(a1),d1
0001E1DA 6400                       		bcc.s	Obj03_Init_Next
0001E1DC 117C 0001 0034             		move.b	#1,$34(a0)
0001E1E2                            Obj03_Init_Next:
0001E1E2                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E1E2                            	;	cmp.w	$0C(a1),d1
0001E1E2                            	;	bcc.s	+
0001E1E2                            	;	move.b	#1,$35(a0)
0001E1E2                            ;+
0001E1E2 6000 0000                  		bra.w	Obj03_MainY
0001E1E6                            ; ===========================================================================
0001E1E6                            word_1FD68:
0001E1E6 0020                       	dc.w  $020
0001E1E8 0040                       	dc.w  $040	; 1
0001E1EA 0080                       	dc.w  $080	; 2
0001E1EC 0100                       	dc.w  $100	; 3
0001E1EE                            ; ===========================================================================
0001E1EE                            ; loc_1FD70:
0001E1EE                            Obj03_Init_CheckX:
0001E1EE 0240 0003                  		andi.w	#3,d0
0001E1F2 1140 001A                  		move.b	d0,$1A(a0)
0001E1F6 D040                       		add.w	d0,d0
0001E1F8 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E1FE 3228 0008                  		move.w	$08(a0),d1
0001E202 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E206 B269 0008                  		cmp.w	$08(a1),d1
0001E20A 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001E20C 117C 0001 0034             		move.b	#1,$34(a0)
0001E212                            Obj03_Init_CheckX_Next:
0001E212                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E212                            	;	cmp.w	$08(a1),d1
0001E212                            	;	bcc.s	+
0001E212                            	;	move.b	#1,$35(a0)
0001E212                            ;+
0001E212                            
0001E212                            Obj03_MainX:
0001E212 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E216 6600 0000                  		bne.w	return_1FEAC
0001E21A 3228 0008                  		move.w	$08(a0),d1
0001E21E 45E8 0034                  		lea	$34(a0),a2
0001E222 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E226                            ;		bsr.s	+
0001E226                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E226                            
0001E226                            ;+
0001E226 4A1A                       		tst.b	(a2)+
0001E228 6600                       		bne.s	Obj03_MainX_Alt
0001E22A B269 0008                  		cmp.w	$08(a1),d1
0001E22E 6200 0000                  		bhi.w	return_1FEAC
0001E232 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E238 3428 000C                  		move.w	$0C(a0),d2
0001E23C 3602                       		move.w	d2,d3
0001E23E 3828 0032                  		move.w	$32(a0),d4
0001E242 9444                       		sub.w	d4,d2
0001E244 D644                       		add.w	d4,d3
0001E246 3829 000C                  		move.w	$0C(a1),d4
0001E24A B842                       		cmp.w	d2,d4
0001E24C 6D00 0000                  		blt.w	return_1FEAC
0001E250 B843                       		cmp.w	d3,d4
0001E252 6C00 0000                  		bge.w	return_1FEAC
0001E256 1028 0028                  		move.b	$28(a0),d0
0001E25A 6A00                       		bpl.s	Obj03_ICX_B1
0001E25C 0829 0001 002B             		btst	#1,$2B(a1)
0001E262 6600 0000                  		bne.w	return_1FEAC
0001E266                            
0001E266                            Obj03_ICX_B1:
0001E266 0828 0000 0001             		btst	#0,$01(a0)
0001E26C 6600                       		bne.s	Obj03_ICX_B2
0001E26E 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E274                            	;	move.b	#$C,$3E(a1)
0001E274                            	;	move.b	#$D,$3F(a1)
0001E274 0800 0003                  		btst	#3,d0
0001E278 6700                       		beq.s	Obj03_ICX_B2
0001E27A 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E280                            	;	move.b	#$E,$3E(a1)
0001E280                            	;	move.b	#$F,$3F(a1)
0001E280                            
0001E280                            Obj03_ICX_B2:
0001E280 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E286 0800 0005                  		btst	#5,d0
0001E28A 6700                       		beq.s	return_1FEAC
0001E28C 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E292 6000                       		bra.s	return_1FEAC
0001E294                            ; ===========================================================================
0001E294                            
0001E294                            Obj03_MainX_Alt:
0001E294 B269 0008                  		cmp.w	$08(a1),d1
0001E298 6300 0000                  		bls.w	return_1FEAC
0001E29C 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E2A2 3428 000C                  		move.w	$0C(a0),d2
0001E2A6 3602                       		move.w	d2,d3
0001E2A8 3828 0032                  		move.w	$32(a0),d4
0001E2AC 9444                       		sub.w	d4,d2
0001E2AE D644                       		add.w	d4,d3
0001E2B0 3829 000C                  		move.w	$0C(a1),d4
0001E2B4 B842                       		cmp.w	d2,d4
0001E2B6 6D00 0000                  		blt.w	return_1FEAC
0001E2BA B843                       		cmp.w	d3,d4
0001E2BC 6C00 0000                  		bge.w	return_1FEAC
0001E2C0 1028 0028                  		move.b	$28(a0),d0
0001E2C4 6A00                       		bpl.s	Obj03_MXA_B1
0001E2C6 0829 0001 002B             		btst	#1,$2B(a1)
0001E2CC 6600 0000                  		bne.w	return_1FEAC
0001E2D0                            
0001E2D0                            Obj03_MXA_B1:
0001E2D0 0828 0000 0001             		btst	#0,$01(a0)
0001E2D6 6600                       		bne.s	Obj03_MXA_B2
0001E2D8 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E2DE                            	;	move.b	#$C,$3E(a1)
0001E2DE                            	;	move.b	#$D,$3F(a1)
0001E2DE 0800 0004                  		btst	#4,d0
0001E2E2 6700                       		beq.s	Obj03_MXA_B2
0001E2E4 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E2EA                            	;	move.b	#$E,$3E(a1)
0001E2EA                            	;	move.b	#$F,$3F(a1)
0001E2EA                            
0001E2EA                            Obj03_MXA_B2:
0001E2EA 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E2F0 0800 0006                  		btst	#6,d0
0001E2F4 6700                       		beq.s	return_1FEAC
0001E2F6 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E2FC                            
0001E2FC                            return_1FEAC:
0001E2FC 4E75                       		rts
0001E2FE                            
0001E2FE                            ; ===========================================================================
0001E2FE                            
0001E2FE                            Obj03_MainY:
0001E2FE 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E302 6600 0000                  		bne.w	return_1FFB6
0001E306 3228 000C                  		move.w	$0C(a0),d1
0001E30A 45E8 0034                  		lea	$34(a0),a2
0001E30E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E312                            ;		bsr.s	+
0001E312                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E312                            
0001E312                            ;+
0001E312 4A1A                       		tst.b	(a2)+
0001E314 6600                       		bne.s	Obj03_MainY_Alt
0001E316 B269 000C                  		cmp.w	$0C(a1),d1
0001E31A 6200 0000                  		bhi.w	return_1FFB6
0001E31E 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E324 3428 0008                  		move.w	$08(a0),d2
0001E328 3602                       		move.w	d2,d3
0001E32A 3828 0032                  		move.w	$32(a0),d4
0001E32E 9444                       		sub.w	d4,d2
0001E330 D644                       		add.w	d4,d3
0001E332 3829 0008                  		move.w	$08(a1),d4
0001E336 B842                       		cmp.w	d2,d4
0001E338 6D00 0000                  		blt.w	return_1FFB6
0001E33C B843                       		cmp.w	d3,d4
0001E33E 6C00 0000                  		bge.w	return_1FFB6
0001E342 1028 0028                  		move.b	$28(a0),d0
0001E346 6A00                       		bpl.s	Obj03_MY_B1
0001E348 0829 0001 002B             		btst	#1,$2B(a1)
0001E34E 6600 0000                  		bne.w	return_1FFB6
0001E352                            
0001E352                            Obj03_MY_B1:
0001E352 0828 0000 0001             		btst	#0,$01(a0)
0001E358 6600                       		bne.s	Obj03_MY_B2
0001E35A 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E360                            	;	move.b	#$C,$3E(a1)
0001E360                            	;	move.b	#$D,$3F(a1)
0001E360 0800 0003                  		btst	#3,d0
0001E364 6700                       		beq.s	Obj03_MY_B2
0001E366 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E36C                            	;	move.b	#$E,$3E(a1)
0001E36C                            	;	move.b	#$F,$3F(a1)
0001E36C                            
0001E36C                            Obj03_MY_B2:
0001E36C 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E372 0800 0005                  		btst	#5,d0
0001E376 6700                       		beq.s	return_1FFB6
0001E378 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E37E 6000                       		bra.s	return_1FFB6
0001E380                            
0001E380                            ; ===========================================================================
0001E380                            
0001E380                            Obj03_MainY_Alt:
0001E380 B269 000C                  		cmp.w	$0C(a1),d1
0001E384 6300 0000                  		bls.w	return_1FFB6
0001E388 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E38E 3428 0008                  		move.w	$08(a0),d2
0001E392 3602                       		move.w	d2,d3
0001E394 3828 0032                  		move.w	$32(a0),d4
0001E398 9444                       		sub.w	d4,d2
0001E39A D644                       		add.w	d4,d3
0001E39C 3829 0008                  		move.w	$08(a1),d4
0001E3A0 B842                       		cmp.w	d2,d4
0001E3A2 6D00 0000                  		blt.w	return_1FFB6
0001E3A6 B843                       		cmp.w	d3,d4
0001E3A8 6C00 0000                  		bge.w	return_1FFB6
0001E3AC 1028 0028                  		move.b	$28(a0),d0
0001E3B0 6A00                       		bpl.s	Obj03_MYA_B1
0001E3B2 0829 0001 002B             		btst	#1,$2B(a1)
0001E3B8 6600 0000                  		bne.w	return_1FFB6
0001E3BC                            
0001E3BC                            Obj03_MYA_B1
0001E3BC 0828 0000 0001             		btst	#0,$01(a0)
0001E3C2 6600                       		bne.s	Obj03_MYA_B2
0001E3C4 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E3CA                            	;	move.b	#$C,$3E(a1)
0001E3CA                            	;	move.b	#$D,$3F(a1)
0001E3CA 0800 0004                  		btst	#4,d0
0001E3CE 6700                       		beq.s	Obj03_MYA_B2
0001E3D0 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E3D6                            	;	move.b	#$E,$3E(a1)
0001E3D6                            	;	move.b	#$F,$3F(a1)
0001E3D6                            
0001E3D6                            Obj03_MYA_B2:
0001E3D6 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E3DC 0800 0006                  		btst	#6,d0
0001E3E0 6700                       		beq.s	return_1FFB6
0001E3E2 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E3E8                            
0001E3E8                            return_1FFB6:
0001E3E8 4E75                       		rts
0001E3EA                            
0001E3EA                            ; ===========================================================================
0001E3EA                            ; ---------------------------------------------------------------------------
0001E3EA                            ; Subroutine to	animate	level graphics
0001E3EA                            ; ---------------------------------------------------------------------------
0001E3EA                            
0001E3EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3EA                            
0001E3EA                            
0001E3EA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E3EA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E3EE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E3F0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E3F6 6100 0000                  		bsr.w	AniArt_GiantRing
0001E3FA 7000                       		moveq	#0,d0
0001E3FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E400 D040                       		add.w	d0,d0
0001E402 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E406 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E40A                            ; ===========================================================================
0001E40A                            
0001E40A                            AniArt_Pause:
0001E40A 4E75                       		rts	
0001E40C                            ; End of function AniArt_Load
0001E40C                            
0001E40C                            ; ===========================================================================
0001E40C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E410 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E414 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E418 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E41A                            ; ===========================================================================
0001E41A                            ; ---------------------------------------------------------------------------
0001E41A                            ; Animated pattern routine - Green Hill
0001E41A                            ; ---------------------------------------------------------------------------
0001E41A                            
0001E41A                            AniArt_GHZ:				; XREF: AniArt_Index
0001E41A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E41E 6A00                       		bpl.s	loc_1C08A
0001E420 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E426 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E42C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E430 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E434 0240 0001                  		andi.w	#1,d0
0001E438 6700                       		beq.s	loc_1C078
0001E43A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E43E                            
0001E43E                            loc_1C078:
0001E43E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E448 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E44C 6000 0000                  		bra.w	LoadTiles
0001E450                            ; ===========================================================================
0001E450                            
0001E450                            loc_1C08A:
0001E450 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E454 6A00                       		bpl.s	loc_1C0C0
0001E456 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E45C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E462 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E466 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E46A 0240 0001                  		andi.w	#1,d0
0001E46E 6700                       		beq.s	loc_1C0AE
0001E470 43E9 0200                  		lea	$200(a1),a1
0001E474                            
0001E474                            loc_1C0AE:
0001E474 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E47E 323C 000F                  		move.w	#$F,d1
0001E482 6000 0000                  		bra.w	LoadTiles
0001E486                            ; ===========================================================================
0001E486                            
0001E486                            loc_1C0C0:
0001E486 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E48A 6A00                       		bpl.s	locret_1C10C
0001E48C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E492 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E496 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E49A 0240 0003                  		andi.w	#3,d0
0001E49E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E4A2 0800 0000                  		btst	#0,d0
0001E4A6 6600                       		bne.s	loc_1C0E8
0001E4A8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E4AE                            
0001E4AE                            loc_1C0E8:
0001E4AE EF48                       		lsl.w	#7,d0
0001E4B0 3200                       		move.w	d0,d1
0001E4B2 D040                       		add.w	d0,d0
0001E4B4 D041                       		add.w	d1,d0
0001E4B6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E4C0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E4C6 43F1 0000                  		lea	(a1,d0.w),a1
0001E4CA 323C 000B                  		move.w	#$B,d1
0001E4CE 6100 0000                  		bsr.w	LoadTiles
0001E4D2                            
0001E4D2                            locret_1C10C:
0001E4D2 4E75                       		rts	
0001E4D4                            ; ===========================================================================
0001E4D4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E4D8                            ; ===========================================================================
0001E4D8                            ; ---------------------------------------------------------------------------
0001E4D8                            ; Animated pattern routine - Marble
0001E4D8                            ; ---------------------------------------------------------------------------
0001E4D8                            
0001E4D8                            AniArt_MZ:				; XREF: AniArt_Index
0001E4D8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E4DC 6A00                       		bpl.s	loc_1C150
0001E4DE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E4E4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E4EA 7000                       		moveq	#0,d0
0001E4EC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E4F0 5200                       		addq.b	#1,d0
0001E4F2 0C00 0003                  		cmpi.b	#3,d0
0001E4F6 6600                       		bne.s	loc_1C134
0001E4F8 7000                       		moveq	#0,d0
0001E4FA                            
0001E4FA                            loc_1C134:
0001E4FA 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E4FE C0FC 0100                  		mulu.w	#$100,d0
0001E502 D2C0                       		adda.w	d0,a1
0001E504 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E50E 323C 0007                  		move.w	#7,d1
0001E512 6100 0000                  		bsr.w	LoadTiles
0001E516                            
0001E516                            loc_1C150:
0001E516 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E51A 6A00                       		bpl.s	loc_1C1AE
0001E51C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E522 7000                       		moveq	#0,d0
0001E524 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E528 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E52E EE58                       		ror.w	#7,d0
0001E530 D8C0                       		adda.w	d0,a4
0001E532 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E53C 7600                       		moveq	#0,d3
0001E53E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E542 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E546 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E54A 343C 0003                  		move.w	#3,d2
0001E54E                            
0001E54E                            loc_1C188:
0001E54E 3003                       		move.w	d3,d0
0001E550 D040                       		add.w	d0,d0
0001E552 0240 001E                  		andi.w	#$1E,d0
0001E556 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E55C 3033 0000                  		move.w	(a3,d0.w),d0
0001E560 47F3 0000                  		lea	(a3,d0.w),a3
0001E564 224C                       		movea.l	a4,a1
0001E566 323C 001F                  		move.w	#$1F,d1
0001E56A 4E93                       		jsr	(a3)
0001E56C 5843                       		addq.w	#4,d3
0001E56E 51CA FFDE                  		dbf	d2,loc_1C188
0001E572 4E75                       		rts	
0001E574                            ; ===========================================================================
0001E574                            
0001E574                            loc_1C1AE:
0001E574 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E578 6A00 0000                  		bpl.w	locret_1C1EA
0001E57C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E582 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E588 7000                       		moveq	#0,d0
0001E58A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E58E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E592 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E598 C0FC 00C0                  		mulu.w	#$C0,d0
0001E59C D2C0                       		adda.w	d0,a1
0001E59E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E5A8 323C 0005                  		move.w	#5,d1
0001E5AC 6000 0000                  		bra.w	LoadTiles
0001E5B0                            ; ===========================================================================
0001E5B0                            
0001E5B0                            locret_1C1EA:
0001E5B0 4E75                       		rts	
0001E5B2                            ; ===========================================================================
0001E5B2                            ; ---------------------------------------------------------------------------
0001E5B2                            ; Animated pattern routine - Scrap Brain
0001E5B2                            ; ---------------------------------------------------------------------------
0001E5B2                            
0001E5B2                            AniArt_SBZ:				; XREF: AniArt_Index
0001E5B2 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E5B6 6700                       		beq.s	loc_1C1F8
0001E5B8 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E5BC 6000                       		bra.s	loc_1C250
0001E5BE                            ; ===========================================================================
0001E5BE                            
0001E5BE                            loc_1C1F8:
0001E5BE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E5C2 6A00                       		bpl.s	loc_1C250
0001E5C4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E5CA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E5D0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E5DA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E5DE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E5E2 0240 0007                  		andi.w	#7,d0
0001E5E6 6700                       		beq.s	loc_1C234
0001E5E8 5340                       		subq.w	#1,d0
0001E5EA C0FC 0180                  		mulu.w	#$180,d0
0001E5EE 43F1 0000                  		lea	(a1,d0.w),a1
0001E5F2 323C 000B                  		move.w	#$B,d1
0001E5F6 6000 0000                  		bra.w	LoadTiles
0001E5FA                            ; ===========================================================================
0001E5FA                            
0001E5FA                            loc_1C234:
0001E5FA 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E600                            
0001E600                            loc_1C23A:
0001E600 323C 0005                  		move.w	#5,d1
0001E604 6100 0000                  		bsr.w	LoadTiles
0001E608 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E60E 323C 0005                  		move.w	#5,d1
0001E612 6000 0000                  		bra.w	LoadTiles
0001E616                            ; ===========================================================================
0001E616                            
0001E616                            loc_1C250:
0001E616 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E61A 6700                       		beq.s	loc_1C25C
0001E61C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E620 6000                       		bra.s	locret_1C2A0
0001E622                            ; ===========================================================================
0001E622                            
0001E622                            loc_1C25C:
0001E622 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E626 6A00                       		bpl.s	locret_1C2A0
0001E628 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E62E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E634 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E63E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E642 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E646 0240 0007                  		andi.w	#7,d0
0001E64A 6700                       		beq.s	loc_1C298
0001E64C 5340                       		subq.w	#1,d0
0001E64E C0FC 0180                  		mulu.w	#$180,d0
0001E652 43F1 0000                  		lea	(a1,d0.w),a1
0001E656 323C 000B                  		move.w	#$B,d1
0001E65A 6000 0000                  		bra.w	LoadTiles
0001E65E                            ; ===========================================================================
0001E65E                            
0001E65E                            loc_1C298:
0001E65E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E664 609A                       		bra.s	loc_1C23A
0001E666                            ; ===========================================================================
0001E666                            
0001E666                            locret_1C2A0:
0001E666 4E75                       		rts	
0001E668                            ; ===========================================================================
0001E668                            ; ---------------------------------------------------------------------------
0001E668                            ; Animated pattern routine - ending sequence
0001E668                            ; ---------------------------------------------------------------------------
0001E668                            
0001E668                            AniArt_Ending:				; XREF: AniArt_Index
0001E668 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E66C 6A00                       		bpl.s	loc_1C2F4
0001E66E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E674 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E67A 45F8 9400                  		lea	($FFFF9400).w,a2
0001E67E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E682 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E686 0240 0001                  		andi.w	#1,d0
0001E68A 6700                       		beq.s	loc_1C2CE
0001E68C 43E9 0200                  		lea	$200(a1),a1
0001E690 45EA 0200                  		lea	$200(a2),a2
0001E694                            
0001E694                            loc_1C2CE:
0001E694 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E69E 323C 000F                  		move.w	#$F,d1
0001E6A2 6100 0000                  		bsr.w	LoadTiles
0001E6A6 224A                       		movea.l	a2,a1
0001E6A8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E6B2 323C 000F                  		move.w	#$F,d1
0001E6B6 6000 0000                  		bra.w	LoadTiles
0001E6BA                            ; ===========================================================================
0001E6BA                            
0001E6BA                            loc_1C2F4:
0001E6BA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E6BE 6A00                       		bpl.s	loc_1C33C
0001E6C0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E6C6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E6CA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E6CE 0240 0007                  		andi.w	#7,d0
0001E6D2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E6D6 EF48                       		lsl.w	#7,d0
0001E6D8 3200                       		move.w	d0,d1
0001E6DA D040                       		add.w	d0,d0
0001E6DC D041                       		add.w	d1,d0
0001E6DE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E6E8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E6EE 43F1 0000                  		lea	(a1,d0.w),a1
0001E6F2 323C 000B                  		move.w	#$B,d1
0001E6F6 6000 0000                  		bra.w	LoadTiles
0001E6FA                            ; ===========================================================================
0001E6FA 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E702                            ; ===========================================================================
0001E702                            
0001E702                            loc_1C33C:
0001E702 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E706 6A00                       		bpl.s	loc_1C37A
0001E708 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E70E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E712 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E716 0240 0003                  		andi.w	#3,d0
0001E71A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E71E E148                       		lsl.w	#8,d0
0001E720 D040                       		add.w	d0,d0
0001E722 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E72C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E730 43F1 0000                  		lea	(a1,d0.w),a1
0001E734 323C 000F                  		move.w	#$F,d1
0001E738 6000 0000                  		bra.w	LoadTiles
0001E73C                            ; ===========================================================================
0001E73C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E740                            ; ===========================================================================
0001E740                            
0001E740                            loc_1C37A:
0001E740 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E744 6A00                       		bpl.s	locret_1C3B4
0001E746 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E74C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E750 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E754 0240 0003                  		andi.w	#3,d0
0001E758 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E75C E148                       		lsl.w	#8,d0
0001E75E D040                       		add.w	d0,d0
0001E760 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E76A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E76E 43F1 0000                  		lea	(a1,d0.w),a1
0001E772 323C 000F                  		move.w	#$F,d1
0001E776 6000 0000                  		bra.w	LoadTiles
0001E77A                            ; ===========================================================================
0001E77A                            
0001E77A                            locret_1C3B4:
0001E77A 4E75                       		rts	
0001E77C                            ; ===========================================================================
0001E77C                            
0001E77C                            AniArt_none:				; XREF: AniArt_Index
0001E77C 4E75                       		rts	
0001E77E                            
0001E77E                            ; ---------------------------------------------------------------------------
0001E77E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E77E                            ; ---------------------------------------------------------------------------
0001E77E                            
0001E77E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E77E                            
0001E77E                            
0001E77E                            LoadTiles:
0001E77E 2C99                       		move.l	(a1)+,(a6)
0001E780 2C99                       		move.l	(a1)+,(a6)
0001E782 2C99                       		move.l	(a1)+,(a6)
0001E784 2C99                       		move.l	(a1)+,(a6)
0001E786 2C99                       		move.l	(a1)+,(a6)
0001E788 2C99                       		move.l	(a1)+,(a6)
0001E78A 2C99                       		move.l	(a1)+,(a6)
0001E78C 2C99                       		move.l	(a1)+,(a6)
0001E78E 51C9 FFEE                  		dbf	d1,LoadTiles
0001E792 4E75                       		rts	
0001E794                            ; End of function LoadTiles
0001E794                            
0001E794                            ; ===========================================================================
0001E794                            ; ---------------------------------------------------------------------------
0001E794                            ; Animated pattern routine - more Marble Zone
0001E794                            ; ---------------------------------------------------------------------------
0001E794 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E798 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E79C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E7A0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E7A4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E7A8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E7AC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E7B0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E7B4                            ; ===========================================================================
0001E7B4                            
0001E7B4                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E7B4 2C91                       		move.l	(a1),(a6)
0001E7B6 43E9 0010                  		lea	$10(a1),a1
0001E7BA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E7BE 4E75                       		rts	
0001E7C0                            ; ===========================================================================
0001E7C0                            
0001E7C0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E7C0 2029 0002                  		move.l	2(a1),d0
0001E7C4 1029 0001                  		move.b	1(a1),d0
0001E7C8 E098                       		ror.l	#8,d0
0001E7CA 2C80                       		move.l	d0,(a6)
0001E7CC 43E9 0010                  		lea	$10(a1),a1
0001E7D0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E7D4 4E75                       		rts	
0001E7D6                            ; ===========================================================================
0001E7D6                            
0001E7D6                            loc_1C410:				; XREF: AniArt_MZextra
0001E7D6 2CA9 0002                  		move.l	2(a1),(a6)
0001E7DA 43E9 0010                  		lea	$10(a1),a1
0001E7DE 51C9 FFF6                  		dbf	d1,loc_1C410
0001E7E2 4E75                       		rts	
0001E7E4                            ; ===========================================================================
0001E7E4                            
0001E7E4                            loc_1C41E:				; XREF: AniArt_MZextra
0001E7E4 2029 0004                  		move.l	4(a1),d0
0001E7E8 1029 0003                  		move.b	3(a1),d0
0001E7EC E098                       		ror.l	#8,d0
0001E7EE 2C80                       		move.l	d0,(a6)
0001E7F0 43E9 0010                  		lea	$10(a1),a1
0001E7F4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E7F8 4E75                       		rts	
0001E7FA                            ; ===========================================================================
0001E7FA                            
0001E7FA                            loc_1C434:				; XREF: AniArt_MZextra
0001E7FA 2CA9 0004                  		move.l	4(a1),(a6)
0001E7FE 43E9 0010                  		lea	$10(a1),a1
0001E802 51C9 FFF6                  		dbf	d1,loc_1C434
0001E806 4E75                       		rts	
0001E808                            ; ===========================================================================
0001E808                            
0001E808                            loc_1C442:				; XREF: AniArt_MZextra
0001E808 2029 0006                  		move.l	6(a1),d0
0001E80C 1029 0005                  		move.b	5(a1),d0
0001E810 E098                       		ror.l	#8,d0
0001E812 2C80                       		move.l	d0,(a6)
0001E814 43E9 0010                  		lea	$10(a1),a1
0001E818 51C9 FFEE                  		dbf	d1,loc_1C442
0001E81C 4E75                       		rts	
0001E81E                            ; ===========================================================================
0001E81E                            
0001E81E                            loc_1C458:				; XREF: AniArt_MZextra
0001E81E 2CA9 0006                  		move.l	6(a1),(a6)
0001E822 43E9 0010                  		lea	$10(a1),a1
0001E826 51C9 FFF6                  		dbf	d1,loc_1C458
0001E82A 4E75                       		rts	
0001E82C                            ; ===========================================================================
0001E82C                            
0001E82C                            loc_1C466:				; XREF: AniArt_MZextra
0001E82C 2029 0008                  		move.l	8(a1),d0
0001E830 1029 0007                  		move.b	7(a1),d0
0001E834 E098                       		ror.l	#8,d0
0001E836 2C80                       		move.l	d0,(a6)
0001E838 43E9 0010                  		lea	$10(a1),a1
0001E83C 51C9 FFEE                  		dbf	d1,loc_1C466
0001E840 4E75                       		rts	
0001E842                            ; ===========================================================================
0001E842                            
0001E842                            loc_1C47C:				; XREF: AniArt_MZextra
0001E842 2CA9 0008                  		move.l	8(a1),(a6)
0001E846 43E9 0010                  		lea	$10(a1),a1
0001E84A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E84E 4E75                       		rts	
0001E850                            ; ===========================================================================
0001E850                            
0001E850                            loc_1C48A:				; XREF: AniArt_MZextra
0001E850 2029 000A                  		move.l	$A(a1),d0
0001E854 1029 0009                  		move.b	9(a1),d0
0001E858 E098                       		ror.l	#8,d0
0001E85A 2C80                       		move.l	d0,(a6)
0001E85C 43E9 0010                  		lea	$10(a1),a1
0001E860 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E864 4E75                       		rts	
0001E866                            ; ===========================================================================
0001E866                            
0001E866                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E866 2CA9 000A                  		move.l	$A(a1),(a6)
0001E86A 43E9 0010                  		lea	$10(a1),a1
0001E86E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E872 4E75                       		rts	
0001E874                            ; ===========================================================================
0001E874                            
0001E874                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E874 2029 000C                  		move.l	$C(a1),d0
0001E878 1029 000B                  		move.b	$B(a1),d0
0001E87C E098                       		ror.l	#8,d0
0001E87E 2C80                       		move.l	d0,(a6)
0001E880 43E9 0010                  		lea	$10(a1),a1
0001E884 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E888 4E75                       		rts	
0001E88A                            ; ===========================================================================
0001E88A                            
0001E88A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E88A 2CA9 000C                  		move.l	$C(a1),(a6)
0001E88E 43E9 0010                  		lea	$10(a1),a1
0001E892 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E896 4E75                       		rts	
0001E898                            ; ===========================================================================
0001E898                            
0001E898                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E898 2029 000C                  		move.l	$C(a1),d0
0001E89C E198                       		rol.l	#8,d0
0001E89E 1011                       		move.b	0(a1),d0
0001E8A0 2C80                       		move.l	d0,(a6)
0001E8A2 43E9 0010                  		lea	$10(a1),a1
0001E8A6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E8AA 4E75                       		rts	
0001E8AC                            ; ===========================================================================
0001E8AC                            
0001E8AC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E8AC 3CA9 000E                  		move.w	$E(a1),(a6)
0001E8B0 3C91                       		move.w	0(a1),(a6)
0001E8B2 43E9 0010                  		lea	$10(a1),a1
0001E8B6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E8BA 4E75                       		rts	
0001E8BC                            ; ===========================================================================
0001E8BC                            
0001E8BC                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E8BC 2011                       		move.l	0(a1),d0
0001E8BE 1029 000F                  		move.b	$F(a1),d0
0001E8C2 E098                       		ror.l	#8,d0
0001E8C4 2C80                       		move.l	d0,(a6)
0001E8C6 43E9 0010                  		lea	$10(a1),a1
0001E8CA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E8CE 4E75                       		rts	
0001E8D0                            
0001E8D0                            ; ---------------------------------------------------------------------------
0001E8D0                            ; Animated pattern routine - giant ring
0001E8D0                            ; ---------------------------------------------------------------------------
0001E8D0                            
0001E8D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8D0                            
0001E8D0                            
0001E8D0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E8D0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E8D4 6600                       		bne.s	loc_1C518
0001E8D6 4E75                       		rts	
0001E8D8                            ; ===========================================================================
0001E8D8                            
0001E8D8                            loc_1C518:
0001E8D8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E8DE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E8E4 7000                       		moveq	#0,d0
0001E8E6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E8EA 43F1 0000                  		lea	(a1,d0.w),a1
0001E8EE 0640 8000                  		addi.w	#$8000,d0
0001E8F2 E588                       		lsl.l	#2,d0
0001E8F4 E448                       		lsr.w	#2,d0
0001E8F6 0040 4000                  		ori.w	#$4000,d0
0001E8FA 4840                       		swap	d0
0001E8FC 2D40 0004                  		move.l	d0,4(a6)
0001E900 323C 000D                  		move.w	#$D,d1
0001E904 6000 FE78                  		bra.w	LoadTiles
0001E908                            ; End of function AniArt_GiantRing
0001E908                            
0001E908                            ; ===========================================================================
0001E908                            ; ---------------------------------------------------------------------------
0001E908                            ; Object 21 - SCORE, TIME, RINGS
0001E908                            ; ---------------------------------------------------------------------------
0001E908                            
0001E908                            Obj21:					; XREF: Obj_Index
0001E908 7000                       		moveq	#0,d0
0001E90A 1028 0024                  		move.b	$24(a0),d0
0001E90E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001E912 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001E916                            ; ===========================================================================
0001E916 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001E918 0000                       		dc.w Obj21_Flash-Obj21_Index
0001E91A                            ; ===========================================================================
0001E91A                            
0001E91A                            Obj21_Main:				; XREF: Obj21_Main
0001E91A 5428 0024                  		addq.b	#2,$24(a0)
0001E91E 317C 0090 0008             		move.w	#$90,8(a0)
0001E924 317C 0108 000A             		move.w	#$108,$A(a0)
0001E92A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001E932 317C 86CA 0002             		move.w	#$86CA,2(a0)
0001E938 117C 0000 0001             		move.b	#0,1(a0)
0001E93E 117C 0000 0018             		move.b	#0,$18(a0)
0001E944                            
0001E944                            Obj21_Flash:				; XREF: Obj21_Main
0001E944 7000                       		moveq	#0,d0
0001E946 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001E94C 6600                       		bne.s	Obj21_Display
0001E94E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001E952 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001E954 5240                       		addq.w	#1,d0		; make ring counter flash red
0001E956                            
0001E956                            Obj21_Flash2:
0001E956 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001E95C 6600                       		bne.s	Obj21_Display	; if not, branch
0001E95E 5440                       		addq.w	#2,d0		; make time counter flash red
0001E960                            
0001E960                            Obj21_Display:
0001E960 1140 001A                  		move.b	d0,$1A(a0)
0001E964 4EF9 0000 F186             		jmp	DisplaySprite
0001E96A                            ; ===========================================================================
0001E96A                            ; ---------------------------------------------------------------------------
0001E96A                            ; Sprite mappings - SCORE, TIME, RINGS
0001E96A                            ; ---------------------------------------------------------------------------
0001E96A                            Map_obj21:
0001E96A                            	include "_maps\obj21.asm"
0001E96A                            ; --------------------------------------------------------------------------------
0001E96A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E96A                            ; --------------------------------------------------------------------------------
0001E96A                            
0001E96A                            SME_u7N7y:	
0001E96A 0000 0000                  		dc.w SME_u7N7y_8-SME_u7N7y, SME_u7N7y_36-SME_u7N7y	
0001E96E 0000 0000                  		dc.w SME_u7N7y_64-SME_u7N7y, SME_u7N7y_92-SME_u7N7y	
0001E972 0A                         SME_u7N7y_8:	dc.b $A
0001E973 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E978 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E97D 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E982 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E987 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E98C A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E991 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E996 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E99B 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E9A0 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E9A5 0A                         SME_u7N7y_36:	dc.b $A
0001E9A6 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E9AB 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E9B0 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E9B5 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E9BA 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E9BF A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E9C4 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E9C9 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E9CE 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E9D3 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E9D8 0A                         SME_u7N7y_64:	dc.b $A
0001E9D9 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E9DE 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E9E3 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E9E8 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E9ED 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E9F2 A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E9F7 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E9FC 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001EA01 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001EA06 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001EA0B 0A                         SME_u7N7y_92:	dc.b $A
0001EA0C 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001EA11 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001EA16 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001EA1B 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001EA20 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001EA25 A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001EA2A A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001EA2F 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001EA34 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001EA39 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001EA3E                            		even
0001EA3E                            		even
0001EA3E                            
0001EA3E                            ; ---------------------------------------------------------------------------
0001EA3E                            ; Add points subroutine
0001EA3E                            ; ---------------------------------------------------------------------------
0001EA3E                            
0001EA3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA3E                            
0001EA3E                            
0001EA3E                            AddPoints:
0001EA3E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001EA44 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001EA48 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001EA4C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001EA4E 223C 000F 423F             		move.l	#999999,d1
0001EA54 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001EA56 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001EA5A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001EA5C 2481                       		move.l	d1,(a2)
0001EA5E                            
0001EA5E                            loc_1C6AC:
0001EA5E 2013                       		move.l	(a3),d0
0001EA60 B092                       		cmp.l	(a2),d0
0001EA62 6500 0000                  		bcs.w	locret_1C6B6
0001EA66 2480                       		move.l	d0,(a2)
0001EA68                            
0001EA68                            locret_1C6B6:
0001EA68 4E75                       		rts	
0001EA6A                            ; End of function AddPoints
0001EA6A                            
0001EA6A                            ; ---------------------------------------------------------------------------
0001EA6A                            ; Subroutine to	update the HUD
0001EA6A                            ; ---------------------------------------------------------------------------
0001EA6A                            
0001EA6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA6A                            
0001EA6A                            
0001EA6A                            HudUpdate:
0001EA6A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001EA6E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001EA72 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001EA76 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001EA78 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001EA7C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001EA82 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001EA86 6100 0000                  		bsr.w	Hud_Score
0001EA8A                            
0001EA8A                            Hud_ChkRings:
0001EA8A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EA8E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001EA90 6A00                       		bpl.s	loc_1C6E4
0001EA92 6100 0000                  		bsr.w	Hud_LoadZero
0001EA96                            
0001EA96                            loc_1C6E4:
0001EA96 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EA9A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EAA0 7200                       		moveq	#0,d1
0001EAA2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EAA6 6100 0000                  		bsr.w	Hud_Rings
0001EAAA                            
0001EAAA                            Hud_ChkTime:
0001EAAA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001EAAE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001EAB0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001EAB4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001EAB6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001EABA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001EAC0 6700                       		beq.s	TimeOver	; if yes, branch
0001EAC2 5221                       		addq.b	#1,-(a1)
0001EAC4 0C11 003C                  		cmpi.b	#60,(a1)
0001EAC8 6500                       		bcs.s	Hud_ChkLives
0001EACA 12BC 0000                  		move.b	#0,(a1)
0001EACE 5221                       		addq.b	#1,-(a1)
0001EAD0 0C11 003C                  		cmpi.b	#60,(a1)
0001EAD4 6500                       		bcs.s	loc_1C734
0001EAD6 12BC 0000                  		move.b	#0,(a1)
0001EADA 5221                       		addq.b	#1,-(a1)
0001EADC 0C11 0009                  		cmpi.b	#9,(a1)
0001EAE0 6500                       		bcs.s	loc_1C734
0001EAE2 12BC 0009                  		move.b	#9,(a1)
0001EAE6                            
0001EAE6                            loc_1C734:
0001EAE6 203C 5E40 0003             		move.l	#$5E400003,d0
0001EAEC 7200                       		moveq	#0,d1
0001EAEE 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EAF2 6100 0000                  		bsr.w	Hud_Mins
0001EAF6 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EAFC 7200                       		moveq	#0,d1
0001EAFE 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EB02 6100 0000                  		bsr.w	Hud_Secs
0001EB06                            
0001EB06                            Hud_ChkLives:
0001EB06 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EB0A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EB0C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EB10 6100 0000                  		bsr.w	Hud_Lives
0001EB14                            
0001EB14                            Hud_ChkBonus:
0001EB14 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EB18 6700                       		beq.s	Hud_End		; if not, branch
0001EB1A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EB1E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EB28 7200                       		moveq	#0,d1
0001EB2A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EB2E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB32 7200                       		moveq	#0,d1
0001EB34 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EB38 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB3C                            
0001EB3C                            Hud_End:
0001EB3C 4E75                       		rts	
0001EB3E                            ; ===========================================================================
0001EB3E                            
0001EB3E                            TimeOver:				; XREF: Hud_ChkTime
0001EB3E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EB42 41F8 D000                  		lea	($FFFFD000).w,a0
0001EB46 2448                       		movea.l	a0,a2
0001EB48 6100 E67A                  		bsr.w	KillSonic
0001EB4C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EB52 4E75                       		rts	
0001EB54                            ; ===========================================================================
0001EB54                            
0001EB54                            HudDebug:				; XREF: HudUpdate
0001EB54 6100 0000                  		bsr.w	HudDb_XY
0001EB58 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EB5C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EB5E 6A00                       		bpl.s	HudDb_Rings
0001EB60 6100 0000                  		bsr.w	Hud_LoadZero
0001EB64                            
0001EB64                            HudDb_Rings:
0001EB64 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EB68 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EB6E 7200                       		moveq	#0,d1
0001EB70 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EB74 6100 0000                  		bsr.w	Hud_Rings
0001EB78                            
0001EB78                            HudDb_ObjCount:
0001EB78 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EB7E 7200                       		moveq	#0,d1
0001EB80 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EB84 6100 0000                  		bsr.w	Hud_Secs
0001EB88 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EB8C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EB8E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EB92 6100 0000                  		bsr.w	Hud_Lives
0001EB96                            
0001EB96                            HudDb_ChkBonus:
0001EB96 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EB9A 6700                       		beq.s	HudDb_End	; if not, branch
0001EB9C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EBA0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EBAA 7200                       		moveq	#0,d1
0001EBAC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EBB0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EBB4 7200                       		moveq	#0,d1
0001EBB6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EBBA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EBBE                            
0001EBBE                            HudDb_End:
0001EBBE 4E75                       		rts	
0001EBC0                            ; End of function HudUpdate
0001EBC0                            
0001EBC0                            ; ---------------------------------------------------------------------------
0001EBC0                            ; Subroutine to	load "0" on the	HUD
0001EBC0                            ; ---------------------------------------------------------------------------
0001EBC0                            
0001EBC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBC0                            
0001EBC0                            
0001EBC0                            Hud_LoadZero:				; XREF: HudUpdate
0001EBC0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EBCA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EBCE 343C 0002                  		move.w	#2,d2
0001EBD2 6000                       		bra.s	loc_1C83E
0001EBD4                            ; End of function Hud_LoadZero
0001EBD4                            
0001EBD4                            ; ---------------------------------------------------------------------------
0001EBD4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EBD4                            ; ---------------------------------------------------------------------------
0001EBD4                            
0001EBD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBD4                            
0001EBD4                            
0001EBD4                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EBD4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EBDA 6100 0000                  		bsr.w	Hud_Lives
0001EBDE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EBE8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EBEC 343C 000E                  		move.w	#$E,d2
0001EBF0                            
0001EBF0                            loc_1C83E:				; XREF: Hud_LoadZero
0001EBF0 43FA 0000                  		lea	Art_Hud(pc),a1
0001EBF4                            
0001EBF4                            loc_1C842:
0001EBF4 323C 000F                  		move.w	#$F,d1
0001EBF8 101A                       		move.b	(a2)+,d0
0001EBFA 6B00                       		bmi.s	loc_1C85E
0001EBFC 4880                       		ext.w	d0
0001EBFE EB48                       		lsl.w	#5,d0
0001EC00 47F1 0000                  		lea	(a1,d0.w),a3
0001EC04                            
0001EC04                            loc_1C852:
0001EC04 2C9B                       		move.l	(a3)+,(a6)
0001EC06 51C9 FFFC                  		dbf	d1,loc_1C852
0001EC0A                            
0001EC0A                            loc_1C858:
0001EC0A 51CA FFE8                  		dbf	d2,loc_1C842
0001EC0E                            
0001EC0E 4E75                       		rts	
0001EC10                            ; ===========================================================================
0001EC10                            
0001EC10                            loc_1C85E:
0001EC10 2CBC 0000 0000             		move.l	#0,(a6)
0001EC16 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EC1A                            
0001EC1A 60EE                       		bra.s	loc_1C858
0001EC1C                            ; End of function Hud_Base
0001EC1C                            
0001EC1C                            ; ===========================================================================
0001EC1C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EC28 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EC2C                            ; ---------------------------------------------------------------------------
0001EC2C                            ; Subroutine to	load debug mode	numbers	patterns
0001EC2C                            ; ---------------------------------------------------------------------------
0001EC2C                            
0001EC2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC2C                            
0001EC2C                            
0001EC2C                            HudDb_XY:				; XREF: HudDebug
0001EC2C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EC36 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EC3A 4841                       		swap	d1
0001EC3C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EC40 6100                       		bsr.s	HudDb_XY2
0001EC42 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EC46 4841                       		swap	d1
0001EC48 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EC4C                            ; End of function HudDb_XY
0001EC4C                            
0001EC4C                            
0001EC4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC4C                            
0001EC4C                            
0001EC4C                            HudDb_XY2:
0001EC4C 7C07                       		moveq	#7,d6
0001EC4E 43F9 0000 058E             		lea	(Art_Text).l,a1
0001EC54                            
0001EC54                            HudDb_XYLoop:
0001EC54 E959                       		rol.w	#4,d1
0001EC56 3401                       		move.w	d1,d2
0001EC58 0242 000F                  		andi.w	#$F,d2
0001EC5C 0C42 000A                  		cmpi.w	#$A,d2
0001EC60 6500                       		bcs.s	loc_1C8B2
0001EC62 5E42                       		addq.w	#7,d2
0001EC64                            
0001EC64                            loc_1C8B2:
0001EC64 EB4A                       		lsl.w	#5,d2
0001EC66 47F1 2000                  		lea	(a1,d2.w),a3
0001EC6A 2C9B                       		move.l	(a3)+,(a6)
0001EC6C 2C9B                       		move.l	(a3)+,(a6)
0001EC6E 2C9B                       		move.l	(a3)+,(a6)
0001EC70 2C9B                       		move.l	(a3)+,(a6)
0001EC72 2C9B                       		move.l	(a3)+,(a6)
0001EC74 2C9B                       		move.l	(a3)+,(a6)
0001EC76 2C9B                       		move.l	(a3)+,(a6)
0001EC78 2C9B                       		move.l	(a3)+,(a6)
0001EC7A 4841                       		swap	d1
0001EC7C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EC80                            
0001EC80 4E75                       		rts	
0001EC82                            ; End of function HudDb_XY2
0001EC82                            
0001EC82                            ; ---------------------------------------------------------------------------
0001EC82                            ; Subroutine to	load rings numbers patterns
0001EC82                            ; ---------------------------------------------------------------------------
0001EC82                            
0001EC82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC82                            
0001EC82                            
0001EC82                            Hud_Rings:				; XREF: HudUpdate
0001EC82 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EC88 7C02                       		moveq	#2,d6
0001EC8A 6000                       		bra.s	Hud_LoadArt
0001EC8C                            ; End of function Hud_Rings
0001EC8C                            
0001EC8C                            ; ---------------------------------------------------------------------------
0001EC8C                            ; Subroutine to	load score numbers patterns
0001EC8C                            ; ---------------------------------------------------------------------------
0001EC8C                            
0001EC8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC8C                            
0001EC8C                            
0001EC8C                            Hud_Score:				; XREF: HudUpdate
0001EC8C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EC92 7C05                       		moveq	#5,d6
0001EC94                            
0001EC94                            Hud_LoadArt:
0001EC94 7800                       		moveq	#0,d4
0001EC96 43FA 0000                  		lea	Art_Hud(pc),a1
0001EC9A                            
0001EC9A                            Hud_ScoreLoop:
0001EC9A 7400                       		moveq	#0,d2
0001EC9C 261A                       		move.l	(a2)+,d3
0001EC9E                            
0001EC9E                            loc_1C8EC:
0001EC9E 9283                       		sub.l	d3,d1
0001ECA0 6500                       		bcs.s	loc_1C8F4
0001ECA2 5242                       		addq.w	#1,d2
0001ECA4 60F8                       		bra.s	loc_1C8EC
0001ECA6                            ; ===========================================================================
0001ECA6                            
0001ECA6                            loc_1C8F4:
0001ECA6 D283                       		add.l	d3,d1
0001ECA8 4A42                       		tst.w	d2
0001ECAA 6700                       		beq.s	loc_1C8FE
0001ECAC 383C 0001                  		move.w	#1,d4
0001ECB0                            
0001ECB0                            loc_1C8FE:
0001ECB0 4A44                       		tst.w	d4
0001ECB2 6700                       		beq.s	loc_1C92C
0001ECB4 ED4A                       		lsl.w	#6,d2
0001ECB6 2D40 0004                  		move.l	d0,4(a6)
0001ECBA 47F1 2000                  		lea	(a1,d2.w),a3
0001ECBE 2C9B                       		move.l	(a3)+,(a6)
0001ECC0 2C9B                       		move.l	(a3)+,(a6)
0001ECC2 2C9B                       		move.l	(a3)+,(a6)
0001ECC4 2C9B                       		move.l	(a3)+,(a6)
0001ECC6 2C9B                       		move.l	(a3)+,(a6)
0001ECC8 2C9B                       		move.l	(a3)+,(a6)
0001ECCA 2C9B                       		move.l	(a3)+,(a6)
0001ECCC 2C9B                       		move.l	(a3)+,(a6)
0001ECCE 2C9B                       		move.l	(a3)+,(a6)
0001ECD0 2C9B                       		move.l	(a3)+,(a6)
0001ECD2 2C9B                       		move.l	(a3)+,(a6)
0001ECD4 2C9B                       		move.l	(a3)+,(a6)
0001ECD6 2C9B                       		move.l	(a3)+,(a6)
0001ECD8 2C9B                       		move.l	(a3)+,(a6)
0001ECDA 2C9B                       		move.l	(a3)+,(a6)
0001ECDC 2C9B                       		move.l	(a3)+,(a6)
0001ECDE                            
0001ECDE                            loc_1C92C:
0001ECDE 0680 0040 0000             		addi.l	#$400000,d0
0001ECE4 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001ECE8                            
0001ECE8 4E75                       		rts	
0001ECEA                            ; End of function Hud_Score
0001ECEA                            
0001ECEA                            ; ---------------------------------------------------------------------------
0001ECEA                            ; Subroutine to	load countdown numbers on the continue screen
0001ECEA                            ; ---------------------------------------------------------------------------
0001ECEA                            
0001ECEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECEA                            
0001ECEA                            
0001ECEA                            ContScrCounter:				; XREF: ContinueScreen
0001ECEA 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001ECF4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001ECFA 45F9 0000 0000             		lea	(Hud_10).l,a2
0001ED00 7C01                       		moveq	#1,d6
0001ED02 7800                       		moveq	#0,d4
0001ED04 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001ED08                            
0001ED08                            ContScr_Loop:
0001ED08 7400                       		moveq	#0,d2
0001ED0A 261A                       		move.l	(a2)+,d3
0001ED0C                            
0001ED0C                            loc_1C95A:
0001ED0C 9283                       		sub.l	d3,d1
0001ED0E 6500                       		bcs.s	loc_1C962
0001ED10 5242                       		addq.w	#1,d2
0001ED12 60F8                       		bra.s	loc_1C95A
0001ED14                            ; ===========================================================================
0001ED14                            
0001ED14                            loc_1C962:
0001ED14 D283                       		add.l	d3,d1
0001ED16 ED4A                       		lsl.w	#6,d2
0001ED18 47F1 2000                  		lea	(a1,d2.w),a3
0001ED1C 2C9B                       		move.l	(a3)+,(a6)
0001ED1E 2C9B                       		move.l	(a3)+,(a6)
0001ED20 2C9B                       		move.l	(a3)+,(a6)
0001ED22 2C9B                       		move.l	(a3)+,(a6)
0001ED24 2C9B                       		move.l	(a3)+,(a6)
0001ED26 2C9B                       		move.l	(a3)+,(a6)
0001ED28 2C9B                       		move.l	(a3)+,(a6)
0001ED2A 2C9B                       		move.l	(a3)+,(a6)
0001ED2C 2C9B                       		move.l	(a3)+,(a6)
0001ED2E 2C9B                       		move.l	(a3)+,(a6)
0001ED30 2C9B                       		move.l	(a3)+,(a6)
0001ED32 2C9B                       		move.l	(a3)+,(a6)
0001ED34 2C9B                       		move.l	(a3)+,(a6)
0001ED36 2C9B                       		move.l	(a3)+,(a6)
0001ED38 2C9B                       		move.l	(a3)+,(a6)
0001ED3A 2C9B                       		move.l	(a3)+,(a6)
0001ED3C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001ED40                            
0001ED40 4E75                       		rts	
0001ED42                            ; End of function ContScrCounter
0001ED42                            
0001ED42                            ; ===========================================================================
0001ED42                            ; ---------------------------------------------------------------------------
0001ED42                            ; HUD counter sizes
0001ED42                            ; ---------------------------------------------------------------------------
0001ED42 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001ED46 0000 2710                  Hud_10000:	dc.l 10000
0001ED4A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001ED4E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001ED52 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001ED56 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001ED5A                            
0001ED5A                            ; ---------------------------------------------------------------------------
0001ED5A                            ; Subroutine to	load time numbers patterns
0001ED5A                            ; ---------------------------------------------------------------------------
0001ED5A                            
0001ED5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED5A                            
0001ED5A                            
0001ED5A                            Hud_Mins:				; XREF: Hud_ChkTime
0001ED5A 45F9 0001 ED56             		lea	(Hud_1).l,a2
0001ED60 7C00                       		moveq	#0,d6
0001ED62 6000                       		bra.s	loc_1C9BA
0001ED64                            ; End of function Hud_Mins
0001ED64                            
0001ED64                            
0001ED64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED64                            
0001ED64                            
0001ED64                            Hud_Secs:				; XREF: Hud_ChkTime
0001ED64 45F9 0001 ED52             		lea	(Hud_10).l,a2
0001ED6A 7C01                       		moveq	#1,d6
0001ED6C                            
0001ED6C                            loc_1C9BA:
0001ED6C 7800                       		moveq	#0,d4
0001ED6E 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED72                            
0001ED72                            Hud_TimeLoop:
0001ED72 7400                       		moveq	#0,d2
0001ED74 261A                       		move.l	(a2)+,d3
0001ED76                            
0001ED76                            loc_1C9C4:
0001ED76 9283                       		sub.l	d3,d1
0001ED78 6500                       		bcs.s	loc_1C9CC
0001ED7A 5242                       		addq.w	#1,d2
0001ED7C 60F8                       		bra.s	loc_1C9C4
0001ED7E                            ; ===========================================================================
0001ED7E                            
0001ED7E                            loc_1C9CC:
0001ED7E D283                       		add.l	d3,d1
0001ED80 4A42                       		tst.w	d2
0001ED82 6700                       		beq.s	loc_1C9D6
0001ED84 383C 0001                  		move.w	#1,d4
0001ED88                            
0001ED88                            loc_1C9D6:
0001ED88 ED4A                       		lsl.w	#6,d2
0001ED8A 2D40 0004                  		move.l	d0,4(a6)
0001ED8E 47F1 2000                  		lea	(a1,d2.w),a3
0001ED92 2C9B                       		move.l	(a3)+,(a6)
0001ED94 2C9B                       		move.l	(a3)+,(a6)
0001ED96 2C9B                       		move.l	(a3)+,(a6)
0001ED98 2C9B                       		move.l	(a3)+,(a6)
0001ED9A 2C9B                       		move.l	(a3)+,(a6)
0001ED9C 2C9B                       		move.l	(a3)+,(a6)
0001ED9E 2C9B                       		move.l	(a3)+,(a6)
0001EDA0 2C9B                       		move.l	(a3)+,(a6)
0001EDA2 2C9B                       		move.l	(a3)+,(a6)
0001EDA4 2C9B                       		move.l	(a3)+,(a6)
0001EDA6 2C9B                       		move.l	(a3)+,(a6)
0001EDA8 2C9B                       		move.l	(a3)+,(a6)
0001EDAA 2C9B                       		move.l	(a3)+,(a6)
0001EDAC 2C9B                       		move.l	(a3)+,(a6)
0001EDAE 2C9B                       		move.l	(a3)+,(a6)
0001EDB0 2C9B                       		move.l	(a3)+,(a6)
0001EDB2 0680 0040 0000             		addi.l	#$400000,d0
0001EDB8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001EDBC                            
0001EDBC 4E75                       		rts	
0001EDBE                            ; End of function Hud_Secs
0001EDBE                            
0001EDBE                            ; ---------------------------------------------------------------------------
0001EDBE                            ; Subroutine to	load time/ring bonus numbers patterns
0001EDBE                            ; ---------------------------------------------------------------------------
0001EDBE                            
0001EDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDBE                            
0001EDBE                            
0001EDBE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001EDBE 45F9 0001 ED4A             		lea	(Hud_1000).l,a2
0001EDC4 7C03                       		moveq	#3,d6
0001EDC6 7800                       		moveq	#0,d4
0001EDC8 43FA 0000                  		lea	Art_Hud(pc),a1
0001EDCC                            
0001EDCC                            Hud_BonusLoop:
0001EDCC 7400                       		moveq	#0,d2
0001EDCE 261A                       		move.l	(a2)+,d3
0001EDD0                            
0001EDD0                            loc_1CA1E:
0001EDD0 9283                       		sub.l	d3,d1
0001EDD2 6500                       		bcs.s	loc_1CA26
0001EDD4 5242                       		addq.w	#1,d2
0001EDD6 60F8                       		bra.s	loc_1CA1E
0001EDD8                            ; ===========================================================================
0001EDD8                            
0001EDD8                            loc_1CA26:
0001EDD8 D283                       		add.l	d3,d1
0001EDDA 4A42                       		tst.w	d2
0001EDDC 6700                       		beq.s	loc_1CA30
0001EDDE 383C 0001                  		move.w	#1,d4
0001EDE2                            
0001EDE2                            loc_1CA30:
0001EDE2 4A44                       		tst.w	d4
0001EDE4 6700                       		beq.s	Hud_ClrBonus
0001EDE6 ED4A                       		lsl.w	#6,d2
0001EDE8 47F1 2000                  		lea	(a1,d2.w),a3
0001EDEC 2C9B                       		move.l	(a3)+,(a6)
0001EDEE 2C9B                       		move.l	(a3)+,(a6)
0001EDF0 2C9B                       		move.l	(a3)+,(a6)
0001EDF2 2C9B                       		move.l	(a3)+,(a6)
0001EDF4 2C9B                       		move.l	(a3)+,(a6)
0001EDF6 2C9B                       		move.l	(a3)+,(a6)
0001EDF8 2C9B                       		move.l	(a3)+,(a6)
0001EDFA 2C9B                       		move.l	(a3)+,(a6)
0001EDFC 2C9B                       		move.l	(a3)+,(a6)
0001EDFE 2C9B                       		move.l	(a3)+,(a6)
0001EE00 2C9B                       		move.l	(a3)+,(a6)
0001EE02 2C9B                       		move.l	(a3)+,(a6)
0001EE04 2C9B                       		move.l	(a3)+,(a6)
0001EE06 2C9B                       		move.l	(a3)+,(a6)
0001EE08 2C9B                       		move.l	(a3)+,(a6)
0001EE0A 2C9B                       		move.l	(a3)+,(a6)
0001EE0C                            
0001EE0C                            loc_1CA5A:
0001EE0C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001EE10                            
0001EE10 4E75                       		rts	
0001EE12                            ; ===========================================================================
0001EE12                            
0001EE12                            Hud_ClrBonus:
0001EE12 7A0F                       		moveq	#$F,d5
0001EE14                            
0001EE14                            Hud_ClrBonusLoop:
0001EE14 2CBC 0000 0000             		move.l	#0,(a6)
0001EE1A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001EE1E                            
0001EE1E 60EC                       		bra.s	loc_1CA5A
0001EE20                            ; End of function Hud_TimeRingBonus
0001EE20                            
0001EE20                            ; ---------------------------------------------------------------------------
0001EE20                            ; Subroutine to	load uncompressed lives	counter	patterns
0001EE20                            ; ---------------------------------------------------------------------------
0001EE20                            
0001EE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE20                            
0001EE20                            
0001EE20                            Hud_Lives:				; XREF: Hud_ChkLives
0001EE20 203C 7B20 0003             		move.l	#$7B200003,d0	; set VRAM address
0001EE26 7200                       		moveq	#0,d1
0001EE28 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001EE2C 45F9 0001 ED52             		lea	(Hud_10).l,a2
0001EE32 7C01                       		moveq	#1,d6
0001EE34 7800                       		moveq	#0,d4
0001EE36 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001EE3A 2D40 0004                  		move.l	d0,4(a6)
0001EE3E                            
0001EE3E                            Hud_LivesLoop:
0001EE3E 7400                       		moveq	#0,d2
0001EE40 261A                       		move.l	(a2)+,d3
0001EE42                            
0001EE42                            loc_1CA90:
0001EE42 9283                       		sub.l	d3,d1
0001EE44 6500                       		bcs.s	loc_1CA98
0001EE46 5242                       		addq.w	#1,d2
0001EE48 60F8                       		bra.s	loc_1CA90
0001EE4A                            ; ===========================================================================
0001EE4A                            
0001EE4A                            loc_1CA98:
0001EE4A D283                       		add.l	d3,d1
0001EE4C 4A42                       		tst.w	d2
0001EE4E 6700                       		beq.s	loc_1CAA2
0001EE50 383C 0001                  		move.w	#1,d4
0001EE54                            
0001EE54                            loc_1CAA2:
0001EE54 4A44                       		tst.w	d4
0001EE56 6700                       		beq.s	@chk
0001EE58 4A46                       		tst.w	d6
0001EE5A 6700                       		beq.s	loc_1CAA6
0001EE5C 0C42 0001                  		cmpi.w	#1,d2
0001EE60 6700                       		beq.s	Hud_Lives_Draw10
0001EE62 6000                       		bra.s	loc_1CAA6
0001EE64                            
0001EE64                            @chk:
0001EE64 4A46                       		tst.w	d6
0001EE66 6700                       		beq.s	Hud_Lives_DrawDigit
0001EE68 6000                       		bra.s	Hud_Lives_End
0001EE6A                            
0001EE6A                            loc_1CAA6:
0001EE6A 4A46                       		tst.w	d6
0001EE6C 6600                       		bne.s	Hud_Lives_DrawDigit
0001EE6E 7200                       		moveq	#0,d1
0001EE70 1238 FE12                  		move.b	($FFFFFE12).w,d1
0001EE74 82FC 000A                  		divu.w	#10,d1
0001EE78 4841                       		swap	d1
0001EE7A 4A41                       		tst.w	d1
0001EE7C 6700                       		beq.s	Hud_Lives_DrawBlank
0001EE7E                            
0001EE7E                            Hud_Lives_DrawDigit:
0001EE7E EB4A                       		lsl.w	#5,d2
0001EE80 47F1 2000                  		lea	(a1,d2.w),a3
0001EE84 2C9B                       		move.l	(a3)+,(a6)
0001EE86 2C9B                       		move.l	(a3)+,(a6)
0001EE88 2C9B                       		move.l	(a3)+,(a6)
0001EE8A 2C9B                       		move.l	(a3)+,(a6)
0001EE8C 2C9B                       		move.l	(a3)+,(a6)
0001EE8E 2C9B                       		move.l	(a3)+,(a6)
0001EE90 2C9B                       		move.l	(a3)+,(a6)
0001EE92 2C9B                       		move.l	(a3)+,(a6)
0001EE94 0680 0040 0000             		addi.l	#$400000,d0
0001EE9A 2D40 0004                  		move.l	d0,4(a6)
0001EE9E                            		
0001EE9E                            Hud_Lives_Draw10:
0001EE9E 4A46                       		tst.w	d6
0001EEA0 6700                       		beq.s	Hud_Lives_End
0001EEA2 343C 0140                  		move.w	#10*$20,d2
0001EEA6 47F1 2000                  		lea	(a1,d2.w),a3
0001EEAA 2C9B                       		move.l	(a3)+,(a6)
0001EEAC 2C9B                       		move.l	(a3)+,(a6)
0001EEAE 2C9B                       		move.l	(a3)+,(a6)
0001EEB0 2C9B                       		move.l	(a3)+,(a6)
0001EEB2 2C9B                       		move.l	(a3)+,(a6)
0001EEB4 2C9B                       		move.l	(a3)+,(a6)
0001EEB6 2C9B                       		move.l	(a3)+,(a6)
0001EEB8 2C9B                       		move.l	(a3)+,(a6)
0001EEBA 0680 0040 0000             		addi.l	#$400000,d0
0001EEC0 2D40 0004                  		move.l	d0,4(a6)
0001EEC4                            		
0001EEC4                            Hud_Lives_End:
0001EEC4 51CE FF78                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EEC8 4E75                       		rts	
0001EECA                            ; ===========================================================================
0001EECA                            
0001EECA                            Hud_Lives_DrawBlank:
0001EECA 7A07                       		moveq	#7,d5
0001EECC                            
0001EECC                            Hud_Lives_DrawBlankLoop:
0001EECC 2CBC 0000 0000             		move.l	#0,(a6)
0001EED2 51CD FFF8                  		dbf	d5,Hud_Lives_DrawBlankLoop
0001EED6 0680 0040 0000             		addi.l	#$400000,d0
0001EEDC 2D40 0004                  		move.l	d0,4(a6)
0001EEE0 60E2                       		bra.s	Hud_Lives_End
0001EEE2                            ; End of function Hud_Lives
0001EEE2                            
0001EEE2                            ; ===========================================================================
0001EEE2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F1E2                            		even
0001F1E2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F342                            		even
0001F342                            ; ===========================================================================
0001F342                            ; ---------------------------------------------------------------------------
0001F342                            ; When debug mode is currently in use
0001F342                            ; ---------------------------------------------------------------------------
0001F342                            
0001F342                            DebugMode:				; XREF: Obj01; Obj09
0001F342 7000                       		moveq	#0,d0
0001F344 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F348 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F34C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F350                            ; ===========================================================================
0001F350 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F352 0000                       		dc.w Debug_Skip-Debug_Index
0001F354                            ; ===========================================================================
0001F354                            
0001F354                            Debug_Main:				; XREF: Debug_Index
0001F354 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F358 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F35E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F364 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F36A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F370 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F376 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F37C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F382 117C 0000 001A             		move.b	#0,$1A(a0)
0001F388 117C 0000 001C             		move.b	#0,$1C(a0)
0001F38E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F394 6600                       		bne.s	Debug_Zone	; if not, branch
0001F396 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F39C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F3A2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F3A4 6000                       		bra.s	Debug_UseList
0001F3A6                            ; ===========================================================================
0001F3A6                            
0001F3A6                            Debug_Zone:
0001F3A6 7000                       		moveq	#0,d0
0001F3A8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F3AC                            
0001F3AC                            Debug_UseList:
0001F3AC 45F9 0000 0000             		lea	(DebugList).l,a2
0001F3B2 D040                       		add.w	d0,d0
0001F3B4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F3B8 3C1A                       		move.w	(a2)+,d6
0001F3BA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F3BE 6200                       		bhi.s	loc_1CF9E
0001F3C0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F3C6                            
0001F3C6                            loc_1CF9E:
0001F3C6 6100 0000                  		bsr.w	Debug_ShowItem
0001F3CA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F3D0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F3D6                            
0001F3D6                            Debug_Skip:				; XREF: Debug_Index
0001F3D6 7006                       		moveq	#6,d0
0001F3D8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F3DE 6700                       		beq.s	loc_1CFBE
0001F3E0 7000                       		moveq	#0,d0
0001F3E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F3E6                            
0001F3E6                            loc_1CFBE:
0001F3E6 45F9 0000 0000             		lea	(DebugList).l,a2
0001F3EC D040                       		add.w	d0,d0
0001F3EE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F3F2 3C1A                       		move.w	(a2)+,d6
0001F3F4 6100 0000                  		bsr.w	Debug_Control
0001F3F8 4EF9 0000 F186             		jmp	DisplaySprite
0001F3FE                            
0001F3FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F3FE                            
0001F3FE                            
0001F3FE                            Debug_Control:
0001F3FE 7800                       		moveq	#0,d4
0001F400 323C 0001                  		move.w	#1,d1
0001F404 1838 F605                  		move.b	($FFFFF605).w,d4
0001F408 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F40C 6600                       		bne.s	loc_1D018	; if yes, branch
0001F40E 1038 F604                  		move.b	($FFFFF604).w,d0
0001F412 0240 000F                  		andi.w	#$F,d0
0001F416 6600                       		bne.s	loc_1D000
0001F418 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F41E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F424 6000 0000                  		bra.w	Debug_BackItem
0001F428                            ; ===========================================================================
0001F428                            
0001F428                            loc_1D000:
0001F428 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F42C 6600                       		bne.s	loc_1D01C
0001F42E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F434 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F438 6600                       		bne.s	loc_1D018
0001F43A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F440                            
0001F440                            loc_1D018:
0001F440 1838 F604                  		move.b	($FFFFF604).w,d4
0001F444                            
0001F444                            loc_1D01C:
0001F444 7200                       		moveq	#0,d1
0001F446 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F44A 5241                       		addq.w	#1,d1
0001F44C 4841                       		swap	d1
0001F44E E881                       		asr.l	#4,d1
0001F450 2428 000C                  		move.l	$C(a0),d2
0001F454 2628 0008                  		move.l	8(a0),d3
0001F458 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F45C 6700                       		beq.s	loc_1D03C	; if not, branch
0001F45E 9481                       		sub.l	d1,d2
0001F460 6400                       		bcc.s	loc_1D03C
0001F462 7400                       		moveq	#0,d2
0001F464                            
0001F464                            loc_1D03C:
0001F464 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F468 6700                       		beq.s	loc_1D052	; if not, branch
0001F46A D481                       		add.l	d1,d2
0001F46C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F472 6500                       		bcs.s	loc_1D052
0001F474 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F47A                            
0001F47A                            loc_1D052:
0001F47A 0804 0002                  		btst	#2,d4
0001F47E 6700                       		beq.s	loc_1D05E
0001F480 9681                       		sub.l	d1,d3
0001F482 6400                       		bcc.s	loc_1D05E
0001F484 7600                       		moveq	#0,d3
0001F486                            
0001F486                            loc_1D05E:
0001F486 0804 0003                  		btst	#3,d4
0001F48A 6700                       		beq.s	loc_1D066
0001F48C D681                       		add.l	d1,d3
0001F48E                            
0001F48E                            loc_1D066:
0001F48E 2142 000C                  		move.l	d2,$C(a0)
0001F492 2143 0008                  		move.l	d3,8(a0)
0001F496                            
0001F496                            Debug_BackItem:
0001F496 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F49C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F49E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F4A4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F4A6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F4AA 6400                       		bcc.s	Debug_NoLoop
0001F4AC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F4B0 6000                       		bra.s	Debug_NoLoop
0001F4B2                            ; ===========================================================================
0001F4B2                            
0001F4B2                            Debug_NextItem:
0001F4B2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F4B8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F4BA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F4BE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F4C2 6200                       		bhi.s	Debug_NoLoop
0001F4C4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F4CA                            
0001F4CA                            Debug_NoLoop:
0001F4CA 6000 0000                  		bra.w	Debug_ShowItem
0001F4CE                            ; ===========================================================================
0001F4CE                            
0001F4CE                            Debug_MakeItem:
0001F4CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F4D4 6700                       		beq.s	Debug_Exit	; if not, branch
0001F4D6 4EB9 0000 F61A             		jsr	SingleObjLoad
0001F4DC 6600                       		bne.s	Debug_Exit
0001F4DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001F4E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F4EA 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F4EE 1368 0001 0001             		move.b	1(a0),1(a1)
0001F4F4 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F4FA 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F500 7000                       		moveq	#0,d0
0001F502 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F506 E748                       		lsl.w	#3,d0
0001F508 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F50E 4E75                       		rts	
0001F510                            ; ===========================================================================
0001F510                            
0001F510                            Debug_Exit:
0001F510 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F516 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F518 7000                       		moveq	#0,d0
0001F51A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F51E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F526 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F52C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F530 3140 000A                  		move.w	d0,$A(a0)
0001F534 3140 000E                  		move.w	d0,$E(a0)
0001F538 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F53E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F544 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F54A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F54C 4278 F780                  		clr.w	($FFFFF780).w
0001F550 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F556 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F55E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F564 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F56A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F570 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F576                            
0001F576                            Debug_DoNothing:
0001F576 4E75                       		rts	
0001F578                            ; End of function Debug_Control
0001F578                            
0001F578                            
0001F578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F578                            
0001F578                            
0001F578                            Debug_ShowItem:				; XREF: Debug_Main
0001F578 7000                       		moveq	#0,d0
0001F57A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F57E E748                       		lsl.w	#3,d0
0001F580 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F586 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F58C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F592 4E75                       		rts	
0001F594                            ; End of function Debug_ShowItem
0001F594                            
0001F594                            ; ===========================================================================
0001F594                            ; ---------------------------------------------------------------------------
0001F594                            ; Debug	list pointers
0001F594                            ; ---------------------------------------------------------------------------
0001F594                            DebugList:
0001F594                            	include "_inc\Debug list pointers.asm"
0001F594                            ; ---------------------------------------------------------------------------
0001F594                            ; Debug	list pointers
0001F594                            ; ---------------------------------------------------------------------------
0001F594 0000                       	dc.w Debug_GHZ-DebugList
0001F596 0000                       	dc.w Debug_LZ-DebugList
0001F598 0000                       	dc.w Debug_MZ-DebugList
0001F59A 0000                       	dc.w Debug_SLZ-DebugList
0001F59C 0000                       	dc.w Debug_SYZ-DebugList
0001F59E 0000                       	dc.w Debug_SBZ-DebugList
0001F5A0 0000                       	dc.w Debug_Ending-DebugList
0001F5A0 0000                       	dc.w Debug_Ending-DebugList
0001F5A2                            
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2                            ; Debug	list - Green Hill
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2                            Debug_GHZ:
0001F5A2                            	include "_inc\Debug list - GHZ.asm"
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2                            ; Debug	list - Green Hill
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2 0010                       	dc.w $10			; number of items in list
0001F5A4 2500 B9AE                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F5A8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001F5AC 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F5B0 0000 0680                  	dc.b 0,	0, 6, $80
0001F5B4 1F00 B12C                  	dc.l Map_obj1F+$1F000000
0001F5B8 0000 0400                  	dc.b 0,	0, 4, 0
0001F5BC 2200 B40C                  	dc.l Map_obj22+$22000000
0001F5C0 0000 0444                  	dc.b 0,	0, 4, $44
0001F5C4 2B00 C5EA                  	dc.l Map_obj2B+$2B000000
0001F5C8 0000 047B                  	dc.b 0,	0, 4, $7B
0001F5CC 3600 EB86                  	dc.l Map_obj36+$36000000
0001F5D0 0000 051B                  	dc.b 0,	0, 5, $1B
0001F5D4 1800 9B2A                  	dc.l Map_obj18+$18000000
0001F5D8 0000 4000                  	dc.b 0,	0, $40,	0
0001F5DC 3B00 ECAC                  	dc.l Map_obj3B+$3B000000
0001F5E0 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F5E4 4001 132E                  	dc.l Map_obj40+$40000000
0001F5E8 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F5EC 4100 F8B8                  	dc.l Map_obj41+$41000000
0001F5F0 0000 0523                  	dc.b 0,	0, 5, $23
0001F5F4 4200 FADE                  	dc.l Map_obj42+$42000000
0001F5F8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F5FC 4400 FDEC                  	dc.l Map_obj44+$44000000
0001F600 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F604 1900 9B98                  	dc.l Map_obj48+$19000000
0001F608 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F60C 7901 91F4                  	dc.l Map_obj79+$79000000
0001F610 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F614 4B00 B9EE                  	dc.l Map_obj4B+$4B000000
0001F618 0000 2400                  	dc.b 0,	0, $24,	0
0001F61C 7D01 9344                  	dc.l Map_obj7D+$7D000000
0001F620 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F624                            	even
0001F624                            	even
0001F624                            
0001F624                            ; ---------------------------------------------------------------------------
0001F624                            ; Debug	list - Labyrinth
0001F624                            ; ---------------------------------------------------------------------------
0001F624                            Debug_LZ:
0001F624                            	include "_inc\Debug list - LZ.asm"
0001F624                            ; ---------------------------------------------------------------------------
0001F624                            ; Debug	list - Labyrinth
0001F624                            ; ---------------------------------------------------------------------------
0001F624 0019                       	dc.w $19
0001F626 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F62A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F62E 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F632 0000 0680                  	dc.b 0,	0, 6, $80
0001F636 4100 F8B8                  	dc.l Map_obj41+$41000000
0001F63A 0000 0523                  	dc.b 0,	0, 5, $23
0001F63E 2C00 C690                  	dc.l Map_obj2C+$2C000000
0001F642 0800 2486                  	dc.b 8,	0, $24,	$86
0001F646 2D00 C87C                  	dc.l Map_obj2D+$2D000000
0001F64A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F64E 1601 3B1E                  	dc.l Map_obj16+$16000000
0001F652 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F656 1601 3B1E                  	dc.l Map_obj16+$16000000
0001F65A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F65E 3300 DCFA                  	dc.l Map_obj33+$33000000
0001F662 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F666 3200 D8BA                  	dc.l Map_obj32+$32000000
0001F66A 0000 0513                  	dc.b 0,	0, 5, $13
0001F66E 3600 EB86                  	dc.l Map_obj36+$36000000
0001F672 0000 051B                  	dc.b 0,	0, 5, $1B
0001F676 5201 1C40                  	dc.l Map_obj52a+$52000000
0001F67A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F67E 6101 3D46                  	dc.l Map_obj61+$61000000
0001F682 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F686 6101 3D46                  	dc.l Map_obj61+$61000000
0001F68A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F68E 6101 3D46                  	dc.l Map_obj61+$61000000
0001F692 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F696 6201 3E9A                  	dc.l Map_obj62+$62000000
0001F69A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F69E 6101 3D46                  	dc.l Map_obj61+$61000000
0001F6A2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F6A6 6101 3D46                  	dc.l Map_obj61+$61000000
0001F6AA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F6AE 6301 41FC                  	dc.l Map_obj63+$63000000
0001F6B2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F6B6 6001 3A68                  	dc.l Map_obj60+$60000000
0001F6BA 0000 0467                  	dc.b 0,	0, 4, $67
0001F6BE 6401 4542                  	dc.l Map_obj64+$64000000
0001F6C2 8413 8348                  	dc.b $84, $13, $83, $48
0001F6C6 6501 46CA                  	dc.l Map_obj65+$65000000
0001F6CA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F6CE 6501 46CA                  	dc.l Map_obj65+$65000000
0001F6D2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F6D6 0B01 2EB8                  	dc.l Map_obj0B+$B000000
0001F6DA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F6DE 0C01 2F88                  	dc.l Map_obj0C+$C000000
0001F6E2 0200 4328                  	dc.b 2,	0, $43,	$28
0001F6E6 7901 91F4                  	dc.l Map_obj79+$79000000
0001F6EA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F6EE                            	even
0001F6EE                            	even
0001F6EE                            
0001F6EE                            ; ---------------------------------------------------------------------------
0001F6EE                            ; Debug	list - Marble
0001F6EE                            ; ---------------------------------------------------------------------------
0001F6EE                            Debug_MZ:
0001F6EE                            	include "_inc\Debug list - MZ.asm"
0001F6EE                            ; ---------------------------------------------------------------------------
0001F6EE                            ; Debug	list - Marble
0001F6EE                            ; ---------------------------------------------------------------------------
0001F6EE 0012                       	dc.w $12
0001F6F0 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F6F4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F6F8 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F6FC 0000 0680                  	dc.b 0,	0, 6, $80
0001F700 2200 B40C                  	dc.l Map_obj22+$22000000
0001F704 0000 0444                  	dc.b 0,	0, 4, $44
0001F708 3600 EB86                  	dc.l Map_obj36+$36000000
0001F70C 0000 051B                  	dc.b 0,	0, 5, $1B
0001F710 4100 F8B8                  	dc.l Map_obj41+$41000000
0001F714 0000 0523                  	dc.b 0,	0, 5, $23
0001F718 1300 CD8A                  	dc.l Map_obj14+$13000000
0001F71C 0000 0345                  	dc.b 0,	0, 3, $45
0001F720 4601 049E                  	dc.l Map_obj46+$46000000
0001F724 0000 4000                  	dc.b 0,	0, $40,	0
0001F728 4C01 0DDA                  	dc.l Map_obj4C+$4C000000
0001F72C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F730 4E01 10BE                  	dc.l Map_obj4E+$4E000000
0001F734 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F738 3300 DCFA                  	dc.l Map_obj33+$33000000
0001F73C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F740 5001 14BC                  	dc.l Map_obj50+$50000000
0001F744 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F748 5101 1974                  	dc.l Map_obj51+$51000000
0001F74C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F750 5201 1BEA                  	dc.l Map_obj52+$52000000
0001F754 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F758 5300 A130                  	dc.l Map_obj53+$53000000
0001F75C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F760 5401 0DA0                  	dc.l Map_obj54+$54000000
0001F764 0000 8680                  	dc.b 0,	0, $86,	$80
0001F768 5501 1DDE                  	dc.l Map_obj55+$55000000
0001F76C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F770 7801 8E6E                  	dc.l Map_obj78+$78000000
0001F774 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F778 7901 91F4                  	dc.l Map_obj79+$79000000
0001F77C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F780                            	even
0001F780                            	even
0001F780                            
0001F780                            ; ---------------------------------------------------------------------------
0001F780                            ; Debug	list - Star Light
0001F780                            ; ---------------------------------------------------------------------------
0001F780                            Debug_SLZ:
0001F780                            	include "_inc\Debug list - SLZ.asm"
0001F780                            ; ---------------------------------------------------------------------------
0001F780                            ; Debug	list - Star Light
0001F780                            ; ---------------------------------------------------------------------------
0001F780 000F                       	dc.w $F
0001F782 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F786 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F78A 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F78E 0000 0680                  	dc.b 0,	0, 6, $80
0001F792 5901 28E0                  	dc.l Map_obj59+$59000000
0001F796 0000 4000                  	dc.b 0,	0, $40,	0
0001F79A 5300 A130                  	dc.l Map_obj53+$53000000
0001F79E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F7A2 1800 9B88                  	dc.l Map_obj18b+$18000000
0001F7A6 0000 4000                  	dc.b 0,	0, $40,	0
0001F7AA 5A01 2A1A                  	dc.l Map_obj5A+$5A000000
0001F7AE 0000 4000                  	dc.b 0,	0, $40,	0
0001F7B2 5B01 2BD2                  	dc.l Map_obj5B+$5B000000
0001F7B6 0000 4000                  	dc.b 0,	0, $40,	0
0001F7BA 5D01 31A2                  	dc.l Map_obj5D+$5D000000
0001F7BE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F7C2 5E01 3534                  	dc.l Map_obj5E+$5E000000
0001F7C6 0000 0374                  	dc.b 0,	0, 3, $74
0001F7CA 4100 F8B8                  	dc.l Map_obj41+$41000000
0001F7CE 0000 0523                  	dc.b 0,	0, 5, $23
0001F7D2 1300 CD8A                  	dc.l Map_obj14+$13000000
0001F7D6 0000 0480                  	dc.b 0,	0, 4, $80
0001F7DA 1C00 A240                  	dc.l Map_obj1C+$1C000000
0001F7DE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F7E2 5F01 37B2                  	dc.l Map_obj5F+$5F000000
0001F7E6 0000 0400                  	dc.b 0,	0, 4, 0
0001F7EA 6001 3A68                  	dc.l Map_obj60+$60000000
0001F7EE 0000 2429                  	dc.b 0,	0, $24,	$29
0001F7F2 7901 91F4                  	dc.l Map_obj79+$79000000
0001F7F6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F7FA                            	even
0001F7FA                            	even
0001F7FA                            
0001F7FA                            ; ---------------------------------------------------------------------------
0001F7FA                            ; Debug	list - Spring Yard
0001F7FA                            ; ---------------------------------------------------------------------------
0001F7FA                            Debug_SYZ:
0001F7FA                            	include "_inc\Debug list - SYZ.asm"
0001F7FA                            ; ---------------------------------------------------------------------------
0001F7FA                            ; Debug	list - Spring Yard
0001F7FA                            ; ---------------------------------------------------------------------------
0001F7FA 000F                       	dc.w $F
0001F7FC 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F800 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F804 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F808 0000 0680                  	dc.b 0,	0, 6, $80
0001F80C 3600 EB86                  	dc.l Map_obj36+$36000000
0001F810 0000 051B                  	dc.b 0,	0, 5, $1B
0001F814 4100 F8B8                  	dc.l Map_obj41+$41000000
0001F818 0000 0523                  	dc.b 0,	0, 5, $23
0001F81C 4300 FD3E                  	dc.l Map_obj43+$43000000
0001F820 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F824 1201 051C                  	dc.l Map_obj12+$12000000
0001F828 0000 0000                  	dc.b 0,	0, 0, 0
0001F82C 4701 0698                  	dc.l Map_obj47+$47000000
0001F830 0000 0380                  	dc.b 0,	0, 3, $80
0001F834 1F00 B12C                  	dc.l Map_obj1F+$1F000000
0001F838 0000 0400                  	dc.b 0,	0, 4, 0
0001F83C 2200 B40C                  	dc.l Map_obj22+$22000000
0001F840 0000 0444                  	dc.b 0,	0, 4, $44
0001F844 5001 14BC                  	dc.l Map_obj50+$50000000
0001F848 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F84C 1800 9B76                  	dc.l Map_obj18a+$18000000
0001F850 0000 4000                  	dc.b 0,	0, $40,	0
0001F854 5601 22A0                  	dc.l Map_obj56+$56000000
0001F858 0000 4000                  	dc.b 0,	0, $40,	0
0001F85C 3200 D8BA                  	dc.l Map_obj32+$32000000
0001F860 0000 0513                  	dc.b 0,	0, 5, $13
0001F864 7801 8E6E                  	dc.l Map_obj78+$78000000
0001F868 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F86C 7901 91F4                  	dc.l Map_obj79+$79000000
0001F870 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F874                            	even
0001F874                            	even
0001F874                            
0001F874                            ; ---------------------------------------------------------------------------
0001F874                            ; Debug	list - Scrap Brain
0001F874                            ; ---------------------------------------------------------------------------
0001F874                            Debug_SBZ:
0001F874                            	include "_inc\Debug list - SBZ.asm"
0001F874                            ; ---------------------------------------------------------------------------
0001F874                            ; Debug	list - Scrap Brain
0001F874                            ; ---------------------------------------------------------------------------
0001F874 001D                       	dc.w $1D
0001F876 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F87A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F87E 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F882 0000 0680                  	dc.b 0,	0, 6, $80
0001F886 5F01 37B2                  	dc.l Map_obj5F+$5F000000
0001F88A 0000 0400                  	dc.b 0,	0, 4, 0
0001F88E 6001 3A68                  	dc.l Map_obj60+$60000000
0001F892 0000 0429                  	dc.b 0,	0, 4, $29
0001F896 7801 8E6E                  	dc.l Map_obj78+$78000000
0001F89A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F89E 1501 263C                  	dc.l Map_obj15b+$15000000
0001F8A2 0702 4391                  	dc.b 7,	2, $43,	$91
0001F8A6 6701 778E                  	dc.l Map_obj67+$67000000
0001F8AA E000 C344                  	dc.b $E0, 0, $C3, $44
0001F8AE 5201 1BEA                  	dc.l Map_obj52+$52000000
0001F8B2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F8B6 3200 D8BA                  	dc.l Map_obj32+$32000000
0001F8BA 0000 0513                  	dc.b 0,	0, 5, $13
0001F8BE 6901 79E8                  	dc.l Map_obj69+$69000000
0001F8C2 0300 4492                  	dc.b 3,	0, $44,	$92
0001F8C6 6901 7A42                  	dc.l Map_obj69a+$69000000
0001F8CA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F8CE 6A01 7CA0                  	dc.l Map_obj6A+$6A000000
0001F8D2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F8D6 5300 A130                  	dc.l Map_obj53+$53000000
0001F8DA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F8DE 5201 1BEA                  	dc.l Map_obj52+$52000000
0001F8E2 3903 4460                  	dc.b $39, 3, $44, $60
0001F8E6 6B01 8070                  	dc.l Map_obj6B+$6B000000
0001F8EA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F8EE 2A00 A3D6                  	dc.l Map_obj2A+$2A000000
0001F8F2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F8F6 6B01 8070                  	dc.l Map_obj6B+$6B000000
0001F8FA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F8FE 6A01 7CA0                  	dc.l Map_obj6A+$6A000000
0001F902 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F906 6B01 8070                  	dc.l Map_obj6B+$6B000000
0001F90A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F90E 6A01 7CA0                  	dc.l Map_obj6A+$6A000000
0001F912 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F916 6B01 8070                  	dc.l Map_obj6B+$6B000000
0001F91A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F91E 6C01 8232                  	dc.l Map_obj6C+$6C000000
0001F922 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F926 6D01 018E                  	dc.l Map_obj6D+$6D000000
0001F92A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F92E 6D01 018E                  	dc.l Map_obj6D+$6D000000
0001F932 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F936 6E01 82E8                  	dc.l Map_obj6E+$6E000000
0001F93A 0400 047E                  	dc.b 4,	0, 4, $7E
0001F93E 7001 872E                  	dc.l Map_obj70+$70000000
0001F942 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F946 7101 3048                  	dc.l Map_obj71+$71000000
0001F94A 1100 8680                  	dc.b $11, 0, $86, $80
0001F94E 1E00 A844                  	dc.l Map_obj1E+$1E000000
0001F952 0400 2302                  	dc.b 4,	0, $23,	2
0001F956 7901 91F4                  	dc.l Map_obj79+$79000000
0001F95A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F95E                            	even
0001F95E                            	even
0001F95E                            
0001F95E                            ; ---------------------------------------------------------------------------
0001F95E                            ; Debug	list - ending sequence / special stage
0001F95E                            ; ---------------------------------------------------------------------------
0001F95E                            Debug_Ending:
0001F95E                            	include "_inc\Debug list - Ending and SS.asm"
0001F95E                            ; ---------------------------------------------------------------------------
0001F95E                            ; Debug	list - ending sequence / special stage
0001F95E                            ; ---------------------------------------------------------------------------
0001F95E 000D                       	dc.w $D
0001F960 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F964 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F968 4701 0698                  	dc.l Map_obj47+$47000000
0001F96C 0000 0380                  	dc.b 0,	0, 3, $80
0001F970 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F974 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F978 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F97C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F980 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F984 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F988 2800 AE46                  	dc.l Map_obj28+$28000000
0001F98C 0D00 0553                  	dc.b $D, 0, 5, $53
0001F990 2800 AE46                  	dc.l Map_obj28+$28000000
0001F994 0E00 0553                  	dc.b $E, 0, 5, $53
0001F998 2800 AE46                  	dc.l Map_obj28+$28000000
0001F99C 0F00 0573                  	dc.b $F, 0, 5, $73
0001F9A0 2800 AE46                  	dc.l Map_obj28+$28000000
0001F9A4 1000 0573                  	dc.b $10, 0, 5,	$73
0001F9A8 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F9AC 1100 0585                  	dc.b $11, 0, 5,	$85
0001F9B0 2800 AE76                  	dc.l Map_obj28b+$28000000
0001F9B4 1200 0593                  	dc.b $12, 0, 5,	$93
0001F9B8 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F9BC 1300 0565                  	dc.b $13, 0, 5,	$65
0001F9C0 2800 AE76                  	dc.l Map_obj28b+$28000000
0001F9C4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F9C8                            	even
0001F9C8                            	even
0001F9C8                            
0001F9C8                            ; ---------------------------------------------------------------------------
0001F9C8                            ; Main level load blocks
0001F9C8                            ; ---------------------------------------------------------------------------
0001F9C8                            MainLoadBlocks:
0001F9C8                            	include "_inc\Main level load blocks.asm"
0001F9C8                            ; ---------------------------------------------------------------------------
0001F9C8                            ; Main level load blocks
0001F9C8                            ;
0001F9C8                            ; ===FORMAT===
0001F9C8                            ; level	patterns + (1st	PLC num	* 10^6)
0001F9C8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F9C8                            ; 256x256 mappings
0001F9C8                            ; blank, music (unused), pal index (unused), pal index
0001F9C8                            ; ---------------------------------------------------------------------------
0001F9C8 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F9CC 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F9D0 0000 0000                  	dc.l Blk256_GHZ
0001F9D4 0081 0404                  	dc.b 0,	$81, 4,	4
0001F9D8 0000 0000                  	dc.l Nem_LZ+$6000000
0001F9DC 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F9E0 0000 0000                  	dc.l Blk256_LZ
0001F9E4 0082 0505                  	dc.b 0,	$82, 5,	5
0001F9E8 0000 0000                  	dc.l Nem_MZ+$8000000
0001F9EC 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F9F0 0000 0000                  	dc.l Blk256_MZ
0001F9F4 0083 0606                  	dc.b 0,	$83, 6,	6
0001F9F8 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F9FC 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001FA00 0000 0000                  	dc.l Blk256_SLZ
0001FA04 0084 0707                  	dc.b 0,	$84, 7,	7
0001FA08 0000 0000                  	dc.l Nem_SYZ+$C000000
0001FA0C 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001FA10 0000 0000                  	dc.l Blk256_SYZ
0001FA14 0085 0808                  	dc.b 0,	$85, 8,	8
0001FA18 0000 0000                  	dc.l Nem_SBZ+$E000000
0001FA1C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001FA20 0000 0000                  	dc.l Blk256_SBZ
0001FA24 0086 0909                  	dc.b 0,	$86, 9,	9
0001FA28 0000 0000                  	dc.l Nem_GHZ	; main load block for ending
0001FA2C 0000 0000                  	dc.l Blk16_GHZ
0001FA30 0000 0000                  	dc.l Blk256_GHZ
0001FA34 0086 1313                  	dc.b 0,	$86, $13, $13
0001FA38                            	even
0001FA38                            	even
0001FA38                            
0001FA38                            ; ---------------------------------------------------------------------------
0001FA38                            ; Pattern load cues
0001FA38                            ; ---------------------------------------------------------------------------
0001FA38                            ArtLoadCues:
0001FA38                            	include "_inc\Pattern load cues.asm"
0001FA38                            ; ---------------------------------------------------------------------------
0001FA38                            ; Pattern load cues - index
0001FA38                            ; ---------------------------------------------------------------------------
0001FA38 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001FA3C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001FA40 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001FA44 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001FA48 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001FA4C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001FA50 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001FA54 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001FA58 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001FA5C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001FA60 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001FA64 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001FA68 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001FA6C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001FA70 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001FA74 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001FA78                            ; ---------------------------------------------------------------------------
0001FA78                            ; Pattern load cues - standard block 1
0001FA78                            ; ---------------------------------------------------------------------------
0001FA78 0005                       PLC_Main:	dc.w 5
0001FA7A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001FA7E D800                       		dc.w $D800
0001FA80 0000 0000                  		dc.l Nem_Hud		; HUD
0001FA84 D940                       		dc.w $D940
0001FA86 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001FA8A FA80                       		dc.w $FA80
0001FA8C 0000 0000                  		dc.l Nem_LivesPic	; lives	counter pic
0001FA90 ACA0                       		dc.w $ACA0
0001FA92 0000 0000                  		dc.l Nem_Ring		; rings
0001FA96 F640                       		dc.w $F640
0001FA98 0000 0000                  		dc.l Nem_Points		; points from enemy
0001FA9C F2E0                       		dc.w $F2E0
0001FA9E                            ; ---------------------------------------------------------------------------
0001FA9E                            ; Pattern load cues - standard block 2
0001FA9E                            ; ---------------------------------------------------------------------------
0001FA9E 0000                       PLC_Main2:	dc.w 0
0001FAA0 0000 0000                  		dc.l Nem_Monitors	; monitors
0001FAA4 D000                       		dc.w $D000
0001FAA6                            ; ---------------------------------------------------------------------------
0001FAA6                            ; Pattern load cues - explosion
0001FAA6                            ; ---------------------------------------------------------------------------
0001FAA6 0000                       PLC_Explode:	dc.w 0
0001FAA8 0000 0000                  		dc.l Nem_Explode	; explosion
0001FAAC B400                       		dc.w $B400
0001FAAE                            ; ---------------------------------------------------------------------------
0001FAAE                            ; Pattern load cues - game/time	over
0001FAAE                            ; ---------------------------------------------------------------------------
0001FAAE 0000                       PLC_GameOver:	dc.w 0
0001FAB0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001FAB4 ABC0                       		dc.w $ABC0
0001FAB6                            ; ---------------------------------------------------------------------------
0001FAB6                            ; Pattern load cues - Green Hill
0001FAB6                            ; ---------------------------------------------------------------------------
0001FAB6 000A                       PLC_GHZ:	dc.w $A
0001FAB8 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001FABC 0000                       		dc.w 0
0001FABE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FAC2 6B00                       		dc.w $6B00
0001FAC4 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FAC8 7A00                       		dc.w $7A00
0001FACA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FACE 8000                       		dc.w $8000
0001FAD0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FAD4 8880                       		dc.w $8880
0001FAD6 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FADA 8F60                       		dc.w $8F60
0001FADC 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FAE0 9360                       		dc.w $9360
0001FAE2 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FAE6 9E00                       		dc.w $9E00
0001FAE8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FAEC A360                       		dc.w $A360
0001FAEE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FAF2 A460                       		dc.w $A460
0001FAF4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FAF8 A660                       		dc.w $A660
0001FAFA 0005                       PLC_GHZ2:	dc.w 5
0001FAFC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FB00 7000                       		dc.w $7000
0001FB02 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FB06 71C0                       		dc.w $71C0
0001FB08 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FB0C 7300                       		dc.w $7300
0001FB0E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FB12 7540                       		dc.w $7540
0001FB14 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FB18 A1E0                       		dc.w $A1E0
0001FB1A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FB1E 6980                       		dc.w $6980
0001FB20                            ; ---------------------------------------------------------------------------
0001FB20                            ; Pattern load cues - Labyrinth
0001FB20                            ; ---------------------------------------------------------------------------
0001FB20 000B                       PLC_LZ:		dc.w $B
0001FB22 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001FB26 0000                       		dc.w 0
0001FB28 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FB2C 3C00                       		dc.w $3C00
0001FB2E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FB32 3E00                       		dc.w $3E00
0001FB34 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FB38 4B20                       		dc.w $4B20
0001FB3A 0000 0000                  		dc.l Nem_Water		; water	surface
0001FB3E 6000                       		dc.w $6000
0001FB40 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FB44 6200                       		dc.w $6200
0001FB46 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FB4A 6500                       		dc.w $6500
0001FB4C 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FB50 6900                       		dc.w $6900
0001FB52 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FB56 7780                       		dc.w $7780
0001FB58 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FB5C 7880                       		dc.w $7880
0001FB5E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FB62 7980                       		dc.w $7980
0001FB64 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FB68 94C0                       		dc.w $94C0
0001FB6A 000C                       PLC_LZ2:	dc.w $C
0001FB6C 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FB70 7BC0                       		dc.w $7BC0
0001FB72 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FB76 7CC0                       		dc.w $7CC0
0001FB78 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FB7C 7EC0                       		dc.w $7EC0
0001FB7E 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FB82 5D20                       		dc.w $5D20
0001FB84 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FB88 8800                       		dc.w $8800
0001FB8A 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FB8E 89E0                       		dc.w $89E0
0001FB90 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FB94 8CE0                       		dc.w $8CE0
0001FB96 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FB9A 90C0                       		dc.w $90C0
0001FB9C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FBA0 A1E0                       		dc.w $A1E0
0001FBA2 0000 0000                  		dc.l Nem_Cork		; cork block
0001FBA6 A000                       		dc.w $A000
0001FBA8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FBAC A360                       		dc.w $A360
0001FBAE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FBB2 A460                       		dc.w $A460
0001FBB4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FBB8 A660                       		dc.w $A660
0001FBBA                            ; ---------------------------------------------------------------------------
0001FBBA                            ; Pattern load cues - Marble
0001FBBA                            ; ---------------------------------------------------------------------------
0001FBBA 0009                       PLC_MZ:		dc.w 9
0001FBBC 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001FBC0 0000                       		dc.w 0
0001FBC2 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FBC6 6000                       		dc.w $6000
0001FBC8 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FBCC 68A0                       		dc.w $68A0
0001FBCE 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FBD2 7000                       		dc.w $7000
0001FBD4 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FBD8 71C0                       		dc.w $71C0
0001FBDA 0000 0000                  		dc.l Nem_Lava		; lava
0001FBDE 7500                       		dc.w $7500
0001FBE0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FBE4 8880                       		dc.w $8880
0001FBE6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FBEA 8F60                       		dc.w $8F60
0001FBEC 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FBF0 9700                       		dc.w $9700
0001FBF2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FBF6 9FE0                       		dc.w $9FE0
0001FBF8 0004                       PLC_MZ2:	dc.w 4
0001FBFA 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FBFE A260                       		dc.w $A260
0001FC00 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC04 A360                       		dc.w $A360
0001FC06 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC0A A460                       		dc.w $A460
0001FC0C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC10 A660                       		dc.w $A660
0001FC12 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FC16 5700                       		dc.w $5700
0001FC18                            ; ---------------------------------------------------------------------------
0001FC18                            ; Pattern load cues - Star Light
0001FC18                            ; ---------------------------------------------------------------------------
0001FC18 0008                       PLC_SLZ:	dc.w 8
0001FC1A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001FC1E 0000                       		dc.w 0
0001FC20 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FC24 8000                       		dc.w $8000
0001FC26 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FC2A 8520                       		dc.w $8520
0001FC2C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FC30 9000                       		dc.w $9000
0001FC32 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FC36 9C00                       		dc.w $9C00
0001FC38 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FC3C A260                       		dc.w $A260
0001FC3E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC42 A360                       		dc.w $A360
0001FC44 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC48 A460                       		dc.w $A460
0001FC4A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC4E A660                       		dc.w $A660
0001FC50 0005                       PLC_SLZ2:	dc.w 5
0001FC52 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FC56 6E80                       		dc.w $6E80
0001FC58 0000 0000                  		dc.l Nem_Fan		; fan
0001FC5C 7400                       		dc.w $7400
0001FC5E 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FC62 7980                       		dc.w $7980
0001FC64 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FC68 7B80                       		dc.w $7B80
0001FC6A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FC6E 9B00                       		dc.w $9B00
0001FC70 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FC74 9E00                       		dc.w $9E00
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            ; Pattern load cues - Spring Yard
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76 0004                       PLC_SYZ:	dc.w 4
0001FC78 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001FC7C 0000                       		dc.w 0
0001FC7E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FC82 8000                       		dc.w $8000
0001FC84 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FC88 8880                       		dc.w $8880
0001FC8A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FC8E 8F60                       		dc.w $8F60
0001FC90 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FC94 9700                       		dc.w $9700
0001FC96 0007                       PLC_SYZ2:	dc.w 7
0001FC98 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FC9C 7000                       		dc.w $7000
0001FC9E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FCA2 72C0                       		dc.w $72C0
0001FCA4 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FCA8 7740                       		dc.w $7740
0001FCAA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FCAE 9FE0                       		dc.w $9FE0
0001FCB0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FCB4 A1E0                       		dc.w $A1E0
0001FCB6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCBA A360                       		dc.w $A360
0001FCBC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCC0 A460                       		dc.w $A460
0001FCC2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCC6 A660                       		dc.w $A660
0001FCC8                            ; ---------------------------------------------------------------------------
0001FCC8                            ; Pattern load cues - Scrap Brain
0001FCC8                            ; ---------------------------------------------------------------------------
0001FCC8 000B                       PLC_SBZ:	dc.w $B
0001FCCA 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001FCCE 0000                       		dc.w 0
0001FCD0 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FCD4 5800                       		dc.w $5800
0001FCD6 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FCDA 5D00                       		dc.w $5D00
0001FCDC 0000 0000                  		dc.l Nem_Girder		; girder
0001FCE0 5E00                       		dc.w $5E00
0001FCE2 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FCE6 6040                       		dc.w $6040
0001FCE8 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FCEC 6880                       		dc.w $6880
0001FCEE 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FCF2 6900                       		dc.w $6900
0001FCF4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FCF8 7220                       		dc.w $7220
0001FCFA 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FCFE 76A0                       		dc.w $76A0
0001FD00 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FD04 7B20                       		dc.w $7B20
0001FD06 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FD0A 7EA0                       		dc.w $7EA0
0001FD0C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FD10 9860                       		dc.w $9860
0001FD12 000C                       PLC_SBZ2:	dc.w $C
0001FD14 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FD18 5600                       		dc.w $5600
0001FD1A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FD1E 8000                       		dc.w $8000
0001FD20 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FD24 8520                       		dc.w $8520
0001FD26 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FD2A 8C00                       		dc.w $8C00
0001FD2C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FD30 8DE0                       		dc.w $8DE0
0001FD32 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FD36 8FC0                       		dc.w $8FC0
0001FD38 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FD3C 9240                       		dc.w $9240
0001FD3E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FD42 7F20                       		dc.w $7F20
0001FD44 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FD48 9BE0                       		dc.w $9BE0
0001FD4A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FD4E A1E0                       		dc.w $A1E0
0001FD50 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FD54 A360                       		dc.w $A360
0001FD56 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FD5A A460                       		dc.w $A460
0001FD5C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FD60 A660                       		dc.w $A660
0001FD62                            ; ---------------------------------------------------------------------------
0001FD62                            ; Pattern load cues - title card
0001FD62                            ; ---------------------------------------------------------------------------
0001FD62 0000                       PLC_TitleCard:	dc.w 0
0001FD64 0000 0000                  		dc.l Nem_TitleCard
0001FD68 B000                       		dc.w $B000
0001FD6A                            ; ---------------------------------------------------------------------------
0001FD6A                            ; Pattern load cues - act 3 boss
0001FD6A                            ; ---------------------------------------------------------------------------
0001FD6A 0005                       PLC_Boss:	dc.w 5
0001FD6C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FD70 8000                       		dc.w $8000
0001FD72 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FD76 8D80                       		dc.w $8D80
0001FD78 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FD7C 93A0                       		dc.w $93A0
0001FD7E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FD82 A300                       		dc.w $A300
0001FD84 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FD88 A300                       		dc.w $A300
0001FD8A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FD8E A540                       		dc.w $A540
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90                            ; Pattern load cues - act 1/2 signpost
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90 0002                       PLC_Signpost:	dc.w 2
0001FD92 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FD96 D000                       		dc.w $680*$20
0001FD98 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FD9C 96C0                       		dc.w $96C0
0001FD9E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FDA2 8C40                       		dc.w $8C40
0001FDA4                            ; ---------------------------------------------------------------------------
0001FDA4                            ; Pattern load cues - beta special stage warp effect
0001FDA4                            ; ---------------------------------------------------------------------------
0001FDA4 0000                       PLC_Warp:	dc.w 0
0001FDA6 0000 0000                  		dc.l Nem_Warp
0001FDAA A820                       		dc.w $A820
0001FDAC                            ; ---------------------------------------------------------------------------
0001FDAC                            ; Pattern load cues - special stage
0001FDAC                            ; ---------------------------------------------------------------------------
0001FDAC 0010                       PLC_SpeStage:	dc.w $10
0001FDAE 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FDB2 0000                       		dc.w 0
0001FDB4 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FDB8 0A20                       		dc.w $A20
0001FDBA 0000 0000                  		dc.l Nem_SSWalls	; walls
0001FDBE 2840                       		dc.w $2840
0001FDC0 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FDC4 4760                       		dc.w $4760
0001FDC6 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FDCA 4A20                       		dc.w $4A20
0001FDCC 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FDD0 4C60                       		dc.w $4C60
0001FDD2 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FDD6 5E00                       		dc.w $5E00
0001FDD8 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FDDC 6E00                       		dc.w $6E00
0001FDDE 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FDE2 7E00                       		dc.w $7E00
0001FDE4 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FDE8 8E00                       		dc.w $8E00
0001FDEA 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FDEE 9E00                       		dc.w $9E00
0001FDF0 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001FDF4 AE00                       		dc.w $AE00
0001FDF6 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FDFA BE00                       		dc.w $BE00
0001FDFC 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FE00 EE00                       		dc.w $EE00
0001FE02 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001FE06 F2E0                       		dc.w $F2E0
0001FE08 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001FE0C F400                       		dc.w $F400
0001FE0E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001FE12 F520                       		dc.w $F520
0001FE14 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001FE18 F2E0                       		dc.w $F2E0
0001FE1A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001FE1E F400                       		dc.w $F400
0001FE20 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001FE24 F520                       		dc.w $F520
0001FE26                            ; ---------------------------------------------------------------------------
0001FE26                            ; Pattern load cues - GHZ animals
0001FE26                            ; ---------------------------------------------------------------------------
0001FE26 0001                       PLC_GHZAnimals:	dc.w 1
0001FE28 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE2C B000                       		dc.w $B000
0001FE2E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE32 B240                       		dc.w $B240
0001FE34                            ; ---------------------------------------------------------------------------
0001FE34                            ; Pattern load cues - LZ animals
0001FE34                            ; ---------------------------------------------------------------------------
0001FE34 0001                       PLC_LZAnimals:	dc.w 1
0001FE36 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FE3A B000                       		dc.w $B000
0001FE3C 0000 0000                  		dc.l Nem_Seal		; seal
0001FE40 B240                       		dc.w $B240
0001FE42                            ; ---------------------------------------------------------------------------
0001FE42                            ; Pattern load cues - MZ animals
0001FE42                            ; ---------------------------------------------------------------------------
0001FE42 0001                       PLC_MZAnimals:	dc.w 1
0001FE44 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FE48 B000                       		dc.w $B000
0001FE4A 0000 0000                  		dc.l Nem_Seal		; seal
0001FE4E B240                       		dc.w $B240
0001FE50                            ; ---------------------------------------------------------------------------
0001FE50                            ; Pattern load cues - SLZ animals
0001FE50                            ; ---------------------------------------------------------------------------
0001FE50 0001                       PLC_SLZAnimals:	dc.w 1
0001FE52 0000 0000                  		dc.l Nem_Pig		; pig
0001FE56 B000                       		dc.w $B000
0001FE58 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE5C B240                       		dc.w $B240
0001FE5E                            ; ---------------------------------------------------------------------------
0001FE5E                            ; Pattern load cues - SYZ animals
0001FE5E                            ; ---------------------------------------------------------------------------
0001FE5E 0001                       PLC_SYZAnimals:	dc.w 1
0001FE60 0000 0000                  		dc.l Nem_Pig		; pig
0001FE64 B000                       		dc.w $B000
0001FE66 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FE6A B240                       		dc.w $B240
0001FE6C                            ; ---------------------------------------------------------------------------
0001FE6C                            ; Pattern load cues - SBZ animals
0001FE6C                            ; ---------------------------------------------------------------------------
0001FE6C 0001                       PLC_SBZAnimals:	dc.w 1
0001FE6E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE72 B000                       		dc.w $B000
0001FE74 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FE78 B240                       		dc.w $B240
0001FE7A                            ; ---------------------------------------------------------------------------
0001FE7A                            ; Pattern load cues - special stage results screen
0001FE7A                            ; ---------------------------------------------------------------------------
0001FE7A 0001                       PLC_SpeStResult:dc.w 1
0001FE7C 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FE80 A820                       		dc.w $A820
0001FE82 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FE86 AA20                       		dc.w $AA20
0001FE88                            ; ---------------------------------------------------------------------------
0001FE88                            ; Pattern load cues - ending sequence
0001FE88                            ; ---------------------------------------------------------------------------
0001FE88 000E                       PLC_Ending:	dc.w $E
0001FE8A 0000 0000                  		dc.l Nem_TIT_1st	; Title main patterns
0001FE8E 0000                       		dc.w 0
0001FE90 0000 0000                  		dc.l Nem_TIT_2nd	; Title secondary patterns
0001FE94 39A0                       		dc.w $39A0
0001FE96 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FE9A 6B00                       		dc.w $6B00
0001FE9C 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FEA0 7400                       		dc.w $7400
0001FEA2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FEA6 78A0                       		dc.w $78A0
0001FEA8 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FEAC 7C20                       		dc.w $7C20
0001FEAE 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FEB2 A480                       		dc.w $A480
0001FEB4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FEB8 AA60                       		dc.w $AA60
0001FEBA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FEBE ACA0                       		dc.w $ACA0
0001FEC0 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FEC4 AE60                       		dc.w $AE60
0001FEC6 0000 0000                  		dc.l Nem_Seal		; seal
0001FECA B0A0                       		dc.w $B0A0
0001FECC 0000 0000                  		dc.l Nem_Pig		; pig
0001FED0 B260                       		dc.w $B260
0001FED2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FED6 B4A0                       		dc.w $B4A0
0001FED8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FEDC B660                       		dc.w $B660
0001FEDE 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FEE2 B8A0                       		dc.w $B8A0
0001FEE4                            ; ---------------------------------------------------------------------------
0001FEE4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FEE4                            ; ---------------------------------------------------------------------------
0001FEE4 0002                       PLC_TryAgain:	dc.w 2
0001FEE6 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FEEA 78A0                       		dc.w $78A0
0001FEEC 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FEF0 7C20                       		dc.w $7C20
0001FEF2 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FEF6 B400                       		dc.w $B400
0001FEF8                            ; ---------------------------------------------------------------------------
0001FEF8                            ; Pattern load cues - Eggman on SBZ 2
0001FEF8                            ; ---------------------------------------------------------------------------
0001FEF8 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FEFA 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FEFE A300                       		dc.w $A300
0001FF00 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FF04 8000                       		dc.w $8000
0001FF06 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FF0A 9400                       		dc.w $9400
0001FF0C                            ; ---------------------------------------------------------------------------
0001FF0C                            ; Pattern load cues - final boss
0001FF0C                            ; ---------------------------------------------------------------------------
0001FF0C 0004                       PLC_FZBoss:	dc.w 4
0001FF0E 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FF12 7400                       		dc.w $7400
0001FF14 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FF18 6000                       		dc.w $6000
0001FF1A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FF1E 8000                       		dc.w $8000
0001FF20 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FF24 8E00                       		dc.w $8E00
0001FF26 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FF2A A540                       		dc.w $A540
0001FF2C                            		even
0001FF2C                            		even
0001FF2C                            	even
0001FF2C                            
0001FF2C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002038E                            		even
0002038E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00020486                            		even
00020486                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002059A                            		even
0002059A                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000215A6                            		even
000215A6                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022F74                            		even
00022F74                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022FA8                            		even
00022FA8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023066                            		even
00023066                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002350E                            		even
0002350E                            ; ---------------------------------------------------------------------------
0002350E                            ; Sprite mappings - Sonic
0002350E                            ; ---------------------------------------------------------------------------
0002350E                            Map_Sonic:
0002350E                            	include "_maps\Sonic.asm"
0002350E                            ; --------------------------------------------------------------------------------
0002350E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002350E                            ; --------------------------------------------------------------------------------
0002350E                            
0002350E                            SME_cFzJL:	
0002350E 0000 0000                  		dc.w SME_cFzJL_94-SME_cFzJL, SME_cFzJL_95-SME_cFzJL	
00023512 0000 0000                  		dc.w SME_cFzJL_AA-SME_cFzJL, SME_cFzJL_CE-SME_cFzJL	
00023516 0000 0000                  		dc.w SME_cFzJL_DE-SME_cFzJL, SME_cFzJL_EE-SME_cFzJL	
0002351A 0000 0000                  		dc.w SME_cFzJL_FE-SME_cFzJL, SME_cFzJL_113-SME_cFzJL	
0002351E 0000 0000                  		dc.w SME_cFzJL_11E-SME_cFzJL, SME_cFzJL_129-SME_cFzJL	
00023522 0000 0000                  		dc.w SME_cFzJL_13E-SME_cFzJL, SME_cFzJL_149-SME_cFzJL	
00023526 0000 0000                  		dc.w SME_cFzJL_159-SME_cFzJL, SME_cFzJL_173-SME_cFzJL	
0002352A 0000 0000                  		dc.w SME_cFzJL_192-SME_cFzJL, SME_cFzJL_1A7-SME_cFzJL	
0002352E 0000 0000                  		dc.w SME_cFzJL_1C1-SME_cFzJL, SME_cFzJL_1D6-SME_cFzJL	
00023532 0000 0000                  		dc.w SME_cFzJL_1F0-SME_cFzJL, SME_cFzJL_205-SME_cFzJL	
00023536 0000 0000                  		dc.w SME_cFzJL_210-SME_cFzJL, SME_cFzJL_21B-SME_cFzJL	
0002353A 0000 0000                  		dc.w SME_cFzJL_230-SME_cFzJL, SME_cFzJL_23B-SME_cFzJL	
0002353E 0000 0000                  		dc.w SME_cFzJL_24B-SME_cFzJL, SME_cFzJL_26A-SME_cFzJL	
00023542 0000 0000                  		dc.w SME_cFzJL_289-SME_cFzJL, SME_cFzJL_29E-SME_cFzJL	
00023546 0000 0000                  		dc.w SME_cFzJL_2B8-SME_cFzJL, SME_cFzJL_2CD-SME_cFzJL	
0002354A 0000 0000                  		dc.w SME_cFzJL_2E7-SME_cFzJL, SME_cFzJL_2F2-SME_cFzJL	
0002354E 0000 0000                  		dc.w SME_cFzJL_2FD-SME_cFzJL, SME_cFzJL_308-SME_cFzJL	
00023552 0000 0000                  		dc.w SME_cFzJL_313-SME_cFzJL, SME_cFzJL_328-SME_cFzJL	
00023556 0000 0000                  		dc.w SME_cFzJL_33D-SME_cFzJL, SME_cFzJL_35C-SME_cFzJL	
0002355A 0000 0000                  		dc.w SME_cFzJL_37B-SME_cFzJL, SME_cFzJL_386-SME_cFzJL	
0002355E 0000 0000                  		dc.w SME_cFzJL_391-SME_cFzJL, SME_cFzJL_39C-SME_cFzJL	
00023562 0000 0000                  		dc.w SME_cFzJL_3A7-SME_cFzJL, SME_cFzJL_3BC-SME_cFzJL	
00023566 0000 0000                  		dc.w SME_cFzJL_3CC-SME_cFzJL, SME_cFzJL_3E1-SME_cFzJL	
0002356A 0000 0000                  		dc.w SME_cFzJL_3F1-SME_cFzJL, SME_cFzJL_3FC-SME_cFzJL	
0002356E 0000 0000                  		dc.w SME_cFzJL_411-SME_cFzJL, SME_cFzJL_421-SME_cFzJL	
00023572 0000 0000                  		dc.w SME_cFzJL_42C-SME_cFzJL, SME_cFzJL_441-SME_cFzJL	
00023576 0000 0000                  		dc.w SME_cFzJL_456-SME_cFzJL, SME_cFzJL_466-SME_cFzJL	
0002357A 0000 0000                  		dc.w SME_cFzJL_476-SME_cFzJL, SME_cFzJL_486-SME_cFzJL	
0002357E 0000 0000                  		dc.w SME_cFzJL_491-SME_cFzJL, SME_cFzJL_4A1-SME_cFzJL	
00023582 0000 0000                  		dc.w SME_cFzJL_4B1-SME_cFzJL, SME_cFzJL_4C6-SME_cFzJL	
00023586 0000 0000                  		dc.w SME_cFzJL_4DB-SME_cFzJL, SME_cFzJL_4E6-SME_cFzJL	
0002358A 0000 0000                  		dc.w SME_cFzJL_4F6-SME_cFzJL, SME_cFzJL_501-SME_cFzJL	
0002358E 0000 0000                  		dc.w SME_cFzJL_511-SME_cFzJL, SME_cFzJL_52B-SME_cFzJL	
00023592 0000 0000                  		dc.w SME_cFzJL_545-SME_cFzJL, SME_cFzJL_555-SME_cFzJL	
00023596 0000 0000                  		dc.w SME_cFzJL_565-SME_cFzJL, SME_cFzJL_575-SME_cFzJL	
0002359A 0000 0000                  		dc.w SME_cFzJL_580-SME_cFzJL, SME_cFzJL_590-SME_cFzJL	
0002359E 0000 0000                  		dc.w SME_cFzJL_5A5-SME_cFzJL, SME_cFzJL_5CE-SME_cFzJL	
000235A2 00                         SME_cFzJL_94:	dc.b 0	
000235A3 04                         SME_cFzJL_95:	dc.b 4	
000235A4 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000235A9 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000235AE 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000235B3 F409 0009 F0               		dc.b $F4, 9, 0, 9, $F0	
000235B8 07                         SME_cFzJL_AA:	dc.b 7	
000235B9 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
000235BE EC09 0003 F0               		dc.b $EC, 9, 0, 3, $F0	
000235C3 0400 0009 00               		dc.b 4, 0, 0, 9, 0	
000235C8 FC00 000A 00               		dc.b $FC, 0, 0, $A, 0	
000235CD FC01 000B F0               		dc.b $FC, 1, 0, $B, $F0	
000235D2 0400 000D F8               		dc.b 4, 0, 0, $D, $F8	
000235D7 FC00 000E F8               		dc.b $FC, 0, 0, $E, $F8	
000235DC 03                         SME_cFzJL_CE:	dc.b 3	
000235DD EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000235E2 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000235E7 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000235EC 03                         SME_cFzJL_DE:	dc.b 3	
000235ED EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000235F2 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000235F7 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000235FC 03                         SME_cFzJL_EE:	dc.b 3	
000235FD EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00023602 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00023607 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002360C 04                         SME_cFzJL_FE:	dc.b 4	
0002360D EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
00023612 FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
00023617 FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
0002361C 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
00023621 02                         SME_cFzJL_113:	dc.b 2	
00023622 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023627 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
0002362C 02                         SME_cFzJL_11E:	dc.b 2	
0002362D ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
00023632 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
00023637 04                         SME_cFzJL_129:	dc.b 4	
00023638 EB09 0000 F3               		dc.b $EB, 9, 0, 0, $F3	
0002363D FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
00023642 FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
00023647 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
0002364C 02                         SME_cFzJL_13E:	dc.b 2	
0002364D EC09 0000 F2               		dc.b $EC, 9, 0, 0, $F2	
00023652 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
00023657 03                         SME_cFzJL_149:	dc.b 3	
00023658 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
0002365D FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
00023662 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
00023667 05                         SME_cFzJL_159:	dc.b 5	
00023668 EB06 0000 03               		dc.b $EB, 6, 0, 0, 3	
0002366D FB08 0006 EB               		dc.b $FB, 8, 0, 6, $EB	
00023672 0309 0009 F3               		dc.b 3, 9, 0, 9, $F3	
00023677 1300 000F FB               		dc.b $13, 0, 0, $F, $FB	
0002367C EB09 0010 EB               		dc.b $EB, 9, 0, $10, $EB	
00023681 06                         SME_cFzJL_173:	dc.b 6	
00023682 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00023687 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
0002368C FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
00023691 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
00023696 FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
0002369B F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
000236A0 04                         SME_cFzJL_192:	dc.b 4	
000236A1 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000236A6 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000236AB FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
000236B0 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
000236B5 05                         SME_cFzJL_1A7:	dc.b 5	
000236B6 EB05 0000 03               		dc.b $EB, 5, 0, 0, 3	
000236BB FB0D 0004 F3               		dc.b $FB, $D, 0, 4, $F3	
000236C0 0B08 000C F3               		dc.b $B, 8, 0, $C, $F3	
000236C5 1304 000F FB               		dc.b $13, 4, 0, $F, $FB	
000236CA EB09 0011 EB               		dc.b $EB, 9, 0, $11, $EB	
000236CF 04                         SME_cFzJL_1C1:	dc.b 4	
000236D0 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000236D5 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
000236DA FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000236DF 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
000236E4 05                         SME_cFzJL_1D6:	dc.b 5	
000236E5 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000236EA ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000236EF FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
000236F4 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
000236F9 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
000236FE 04                         SME_cFzJL_1F0:	dc.b 4	
000236FF F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
00023704 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023709 FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
0002370E 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
00023713 02                         SME_cFzJL_205:	dc.b 2	
00023714 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00023719 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
0002371E 02                         SME_cFzJL_210:	dc.b 2	
0002371F F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
00023724 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
00023729 04                         SME_cFzJL_21B:	dc.b 4	
0002372A F506 0000 EB               		dc.b $F5, 6, 0, 0, $EB	
0002372F EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
00023734 FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
00023739 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
0002373E 02                         SME_cFzJL_230:	dc.b 2	
0002373F F506 0000 EC               		dc.b $F5, 6, 0, 0, $EC	
00023744 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
00023749 03                         SME_cFzJL_23B:	dc.b 3	
0002374A F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
0002374F EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00023754 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00023759 06                         SME_cFzJL_24B:	dc.b 6	
0002375A ED04 0000 F3               		dc.b $ED, 4, 0, 0, $F3	
0002375F F504 0002 EB               		dc.b $F5, 4, 0, 2, $EB	
00023764 F50A 0004 FB               		dc.b $F5, $A, 0, 4, $FB	
00023769 0D00 000D FB               		dc.b $D, 0, 0, $D, $FB	
0002376E FD00 000E 13               		dc.b $FD, 0, 0, $E, $13	
00023773 FD06 000F EB               		dc.b $FD, 6, 0, $F, $EB	
00023778 06                         SME_cFzJL_26A:	dc.b 6	
00023779 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
0002377E E408 0006 F4               		dc.b $E4, 8, 0, 6, $F4	
00023783 EC04 0009 FC               		dc.b $EC, 4, 0, 9, $FC	
00023788 F404 000B EC               		dc.b $F4, 4, 0, $B, $EC	
0002378D F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC	
00023792 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC	
00023797 04                         SME_cFzJL_289:	dc.b 4	
00023798 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002379D F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
000237A2 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
000237A7 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000237AC 05                         SME_cFzJL_29E:	dc.b 5	
000237AD ED08 0000 F3               		dc.b $ED, 8, 0, 0, $F3	
000237B2 F504 0003 EB               		dc.b $F5, 4, 0, 3, $EB	
000237B7 F50D 0005 FB               		dc.b $F5, $D, 0, 5, $FB	
000237BC 0508 000D FB               		dc.b 5, 8, 0, $D, $FB	
000237C1 FD06 0010 EB               		dc.b $FD, 6, 0, $10, $EB	
000237C6 04                         SME_cFzJL_2B8:	dc.b 4	
000237C7 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
000237CC F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
000237D1 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
000237D6 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
000237DB 05                         SME_cFzJL_2CD:	dc.b 5	
000237DC FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
000237E1 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
000237E6 F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
000237EB 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000237F0 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
000237F5 02                         SME_cFzJL_2E7:	dc.b 2	
000237F6 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000237FB FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00023800 02                         SME_cFzJL_2F2:	dc.b 2	
00023801 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023806 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002380B 02                         SME_cFzJL_2FD:	dc.b 2	
0002380C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023811 FE0E 0006 ED               		dc.b $FE, $E, 0, 6, $ED	
00023816 02                         SME_cFzJL_308:	dc.b 2	
00023817 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002381C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00023821 04                         SME_cFzJL_313:	dc.b 4	
00023822 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00023827 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002382C FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00023831 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023836 04                         SME_cFzJL_328:	dc.b 4	
00023837 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002383C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00023841 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00023846 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002384B 06                         SME_cFzJL_33D:	dc.b 6	
0002384C EE01 0000 06               		dc.b $EE, 1, 0, 0, 6	
00023851 FE0E 0002 F6               		dc.b $FE, $E, 0, 2, $F6	
00023856 EE01 000E FE               		dc.b $EE, 1, 0, $E, $FE	
0002385B FE00 0010 EE               		dc.b $FE, 0, 0, $10, $EE	
00023860 EE01 0011 F6               		dc.b $EE, 1, 0, $11, $F6	
00023865 EE01 0013 EE               		dc.b $EE, 1, 0, $13, $EE	
0002386A 06                         SME_cFzJL_35C:	dc.b 6	
0002386B FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
00023870 F604 000C F6               		dc.b $F6, 4, 0, $C, $F6	
00023875 EE04 000E F6               		dc.b $EE, 4, 0, $E, $F6	
0002387A EE01 0010 EE               		dc.b $EE, 1, 0, $10, $EE	
0002387F EE01 0012 06               		dc.b $EE, 1, 0, $12, 6	
00023884 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023889 02                         SME_cFzJL_37B:	dc.b 2	
0002388A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002388F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023894 02                         SME_cFzJL_386:	dc.b 2	
00023895 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002389A F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002389F 02                         SME_cFzJL_391:	dc.b 2	
000238A0 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000238A5 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000238AA 02                         SME_cFzJL_39C:	dc.b 2	
000238AB F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000238B0 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000238B5 04                         SME_cFzJL_3A7:	dc.b 4	
000238B6 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
000238BB F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
000238C0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000238C5 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000238CA 03                         SME_cFzJL_3BC:	dc.b 3	
000238CB F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000238D0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000238D5 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000238DA 04                         SME_cFzJL_3CC:	dc.b 4	
000238DB F204 0000 EE               		dc.b $F2, 4, 0, 0, $EE	
000238E0 EA0B 0002 FE               		dc.b $EA, $B, 0, 2, $FE	
000238E5 0A00 000E FE               		dc.b $A, 0, 0, $E, $FE	
000238EA FA06 000F EE               		dc.b $FA, 6, 0, $F, $EE	
000238EF 03                         SME_cFzJL_3E1:	dc.b 3	
000238F0 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000238F5 0A00 000C FE               		dc.b $A, 0, 0, $C, $FE	
000238FA F207 000D EE               		dc.b $F2, 7, 0, $D, $EE	
000238FF 02                         SME_cFzJL_3F1:	dc.b 2	
00023900 100C 0000 F4               		dc.b $10, $C, 0, 0, $F4	
00023905 F00B 0004 F4               		dc.b $F0, $B, 0, 4, $F4	
0002390A 04                         SME_cFzJL_3FC:	dc.b 4	
0002390B 0F0C 0000 F3               		dc.b $F, $C, 0, 0, $F3	
00023910 EF07 0004 F3               		dc.b $EF, 7, 0, 4, $F3	
00023915 EF03 000C 03               		dc.b $EF, 3, 0, $C, 3	
0002391A EF02 0010 0B               		dc.b $EF, 2, 0, $10, $B	
0002391F 03                         SME_cFzJL_411:	dc.b 3	
00023920 0D0C 0000 F3               		dc.b $D, $C, 0, 0, $F3	
00023925 ED0B 0004 F3               		dc.b $ED, $B, 0, 4, $F3	
0002392A ED02 0010 0B               		dc.b $ED, 2, 0, $10, $B	
0002392F 02                         SME_cFzJL_421:	dc.b 2	
00023930 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00023935 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
0002393A 04                         SME_cFzJL_42C:	dc.b 4	
0002393B ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00023940 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00023945 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
0002394A 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
0002394F 04                         SME_cFzJL_441:	dc.b 4	
00023950 F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023955 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
0002395A 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
0002395F 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023964 03                         SME_cFzJL_456:	dc.b 3	
00023965 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
0002396A F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002396F F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00023974 03                         SME_cFzJL_466:	dc.b 3	
00023975 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
0002397A 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002397F 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00023984 03                         SME_cFzJL_476:	dc.b 3	
00023985 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002398A FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002398F 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00023994 02                         SME_cFzJL_486:	dc.b 2	
00023995 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
0002399A F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
0002399F 03                         SME_cFzJL_491:	dc.b 3	
000239A0 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
000239A5 FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
000239AA 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
000239AF 03                         SME_cFzJL_4A1:	dc.b 3	
000239B0 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
000239B5 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
000239BA 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
000239BF 04                         SME_cFzJL_4B1:	dc.b 4	
000239C0 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000239C5 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000239CA F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000239CF F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000239D4 04                         SME_cFzJL_4C6:	dc.b 4	
000239D5 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000239DA 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000239DF F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000239E4 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000239E9 02                         SME_cFzJL_4DB:	dc.b 2	
000239EA ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000239EF 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000239F4 03                         SME_cFzJL_4E6:	dc.b 3	
000239F5 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
000239FA 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000239FF 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00023A04 02                         SME_cFzJL_4F6:	dc.b 2	
00023A05 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00023A0A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00023A0F 03                         SME_cFzJL_501:	dc.b 3	
00023A10 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023A15 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00023A1A 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00023A1F 05                         SME_cFzJL_511:	dc.b 5	
00023A20 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00023A25 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023A2A F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00023A2F 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00023A34 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00023A39 05                         SME_cFzJL_52B:	dc.b 5	
00023A3A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00023A3F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023A44 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00023A49 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00023A4E 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00023A53 03                         SME_cFzJL_545:	dc.b 3	
00023A54 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
00023A59 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
00023A5E 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
00023A63 03                         SME_cFzJL_555:	dc.b 3	
00023A64 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00023A69 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00023A6E 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00023A73 03                         SME_cFzJL_565:	dc.b 3	
00023A74 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00023A79 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
00023A7E 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
00023A83 02                         SME_cFzJL_575:	dc.b 2	
00023A84 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023A89 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00023A8E 03                         SME_cFzJL_580:	dc.b 3	
00023A8F EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00023A94 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00023A99 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00023A9E 04                         SME_cFzJL_590:	dc.b 4	
00023A9F F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023AA4 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00023AA9 F800 0012 0C               		dc.b $F8, 0, 0, $12, $C	
00023AAE 0801 0013 0C               		dc.b 8, 1, 0, $13, $C	
00023AB3 08                         SME_cFzJL_5A5:	dc.b 8	
00023AB4 1100 0000 F4               		dc.b $11, 0, 0, 0, $F4	
00023AB9 0908 0001 F4               		dc.b 9, 8, 0, 1, $F4	
00023ABE F901 0004 0C               		dc.b $F9, 1, 0, 4, $C	
00023AC3 F101 0006 EC               		dc.b $F1, 1, 0, 6, $EC	
00023AC8 F102 0008 F4               		dc.b $F1, 2, 0, 8, $F4	
00023ACD E903 000B FC               		dc.b $E9, 3, 0, $B, $FC	
00023AD2 F102 000F 04               		dc.b $F1, 2, 0, $F, 4	
00023AD7 E900 0012 04               		dc.b $E9, 0, 0, $12, 4	
00023ADC 01                         SME_cFzJL_5CE:	dc.b 1	
00023ADD EA0B 0000 F3               		dc.b $EA, $B, 0, 0, $F3	
00023AE2                            		even
00023AE2                            		even
00023AE2                            
00023AE2                            ; ---------------------------------------------------------------------------
00023AE2                            ; Uncompressed graphics	loading	array for Sonic
00023AE2                            ; ---------------------------------------------------------------------------
00023AE2                            SonicDynPLC:
00023AE2                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023AE2                            ; --------------------------------------------------------------------------------
00023AE2                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023AE2                            
00023AE2                            SME_nPq2R:	
00023AE2 0000 0000                  		dc.w SME_nPq2R_94-SME_nPq2R, SME_nPq2R_95-SME_nPq2R	
00023AE6 0000 0000                  		dc.w SME_nPq2R_9E-SME_nPq2R, SME_nPq2R_AD-SME_nPq2R	
00023AEA 0000 0000                  		dc.w SME_nPq2R_B4-SME_nPq2R, SME_nPq2R_BB-SME_nPq2R	
00023AEE 0000 0000                  		dc.w SME_nPq2R_C2-SME_nPq2R, SME_nPq2R_CB-SME_nPq2R	
00023AF2 0000 0000                  		dc.w SME_nPq2R_D0-SME_nPq2R, SME_nPq2R_D5-SME_nPq2R	
00023AF6 0000 0000                  		dc.w SME_nPq2R_DE-SME_nPq2R, SME_nPq2R_E3-SME_nPq2R	
00023AFA 0000 0000                  		dc.w SME_nPq2R_EA-SME_nPq2R, SME_nPq2R_F5-SME_nPq2R	
00023AFE 0000 0000                  		dc.w SME_nPq2R_102-SME_nPq2R, SME_nPq2R_10B-SME_nPq2R	
00023B02 0000 0000                  		dc.w SME_nPq2R_116-SME_nPq2R, SME_nPq2R_11F-SME_nPq2R	
00023B06 0000 0000                  		dc.w SME_nPq2R_12A-SME_nPq2R, SME_nPq2R_133-SME_nPq2R	
00023B0A 0000 0000                  		dc.w SME_nPq2R_138-SME_nPq2R, SME_nPq2R_13D-SME_nPq2R	
00023B0E 0000 0000                  		dc.w SME_nPq2R_146-SME_nPq2R, SME_nPq2R_14B-SME_nPq2R	
00023B12 0000 0000                  		dc.w SME_nPq2R_152-SME_nPq2R, SME_nPq2R_15F-SME_nPq2R	
00023B16 0000 0000                  		dc.w SME_nPq2R_16C-SME_nPq2R, SME_nPq2R_175-SME_nPq2R	
00023B1A 0000 0000                  		dc.w SME_nPq2R_180-SME_nPq2R, SME_nPq2R_189-SME_nPq2R	
00023B1E 0000 0000                  		dc.w SME_nPq2R_194-SME_nPq2R, SME_nPq2R_199-SME_nPq2R	
00023B22 0000 0000                  		dc.w SME_nPq2R_19E-SME_nPq2R, SME_nPq2R_1A3-SME_nPq2R	
00023B26 0000 0000                  		dc.w SME_nPq2R_1A8-SME_nPq2R, SME_nPq2R_1B1-SME_nPq2R	
00023B2A 0000 0000                  		dc.w SME_nPq2R_1BA-SME_nPq2R, SME_nPq2R_1C7-SME_nPq2R	
00023B2E 0000 0000                  		dc.w SME_nPq2R_1D4-SME_nPq2R, SME_nPq2R_1D9-SME_nPq2R	
00023B32 0000 0000                  		dc.w SME_nPq2R_1DE-SME_nPq2R, SME_nPq2R_1E3-SME_nPq2R	
00023B36 0000 0000                  		dc.w SME_nPq2R_1E8-SME_nPq2R, SME_nPq2R_1F1-SME_nPq2R	
00023B3A 0000 0000                  		dc.w SME_nPq2R_1F8-SME_nPq2R, SME_nPq2R_201-SME_nPq2R	
00023B3E 0000 0000                  		dc.w SME_nPq2R_208-SME_nPq2R, SME_nPq2R_20D-SME_nPq2R	
00023B42 0000 0000                  		dc.w SME_nPq2R_216-SME_nPq2R, SME_nPq2R_21D-SME_nPq2R	
00023B46 0000 0000                  		dc.w SME_nPq2R_222-SME_nPq2R, SME_nPq2R_22B-SME_nPq2R	
00023B4A 0000 0000                  		dc.w SME_nPq2R_234-SME_nPq2R, SME_nPq2R_23B-SME_nPq2R	
00023B4E 0000 0000                  		dc.w SME_nPq2R_242-SME_nPq2R, SME_nPq2R_249-SME_nPq2R	
00023B52 0000 0000                  		dc.w SME_nPq2R_24C-SME_nPq2R, SME_nPq2R_253-SME_nPq2R	
00023B56 0000 0000                  		dc.w SME_nPq2R_25A-SME_nPq2R, SME_nPq2R_263-SME_nPq2R	
00023B5A 0000 0000                  		dc.w SME_nPq2R_26C-SME_nPq2R, SME_nPq2R_271-SME_nPq2R	
00023B5E 0000 0000                  		dc.w SME_nPq2R_278-SME_nPq2R, SME_nPq2R_27D-SME_nPq2R	
00023B62 0000 0000                  		dc.w SME_nPq2R_284-SME_nPq2R, SME_nPq2R_28F-SME_nPq2R	
00023B66 0000 0000                  		dc.w SME_nPq2R_29A-SME_nPq2R, SME_nPq2R_2A1-SME_nPq2R	
00023B6A 0000 0000                  		dc.w SME_nPq2R_2A8-SME_nPq2R, SME_nPq2R_2AF-SME_nPq2R	
00023B6E 0000 0000                  		dc.w SME_nPq2R_2B4-SME_nPq2R, SME_nPq2R_2BB-SME_nPq2R	
00023B72 0000 0000                  		dc.w SME_nPq2R_2C4-SME_nPq2R, SME_nPq2R_2D5-SME_nPq2R	
00023B76 00                         SME_nPq2R_94:	dc.b 0	
00023B77 0420 0020 0920 0C50 03     SME_nPq2R_95:	dc.b 4, $20, 0, $20, 9, $20, $C, $50, 3	
00023B80 0720 1B50 0F00 1A03 9110+  SME_nPq2R_9E:	dc.b 7, $20, $1B, $50, $F, 0, $1A, 3, $91, $10, $15, 0, $18, 4, $81	
00023B8F 0350 1E50 1520 1B          SME_nPq2R_AD:	dc.b 3, $50, $1E, $50, $15, $20, $1B	
00023B96 0350 1E50 1520 24          SME_nPq2R_B4:	dc.b 3, $50, $1E, $50, $15, $20, $24	
00023B9D 0380 2720 0920 0C          SME_nPq2R_BB:	dc.b 3, $80, $27, $20, 9, $20, $C	
00023BA4 0470 3050 3850 3E10 44     SME_nPq2R_C2:	dc.b 4, $70, $30, $50, $38, $50, $3E, $10, $44	
00023BAD 0270 30B0 46               SME_nPq2R_CB:	dc.b 2, $70, $30, $B0, $46	
00023BB2 0250 5280 58               SME_nPq2R_D0:	dc.b 2, $50, $52, $80, $58	
00023BB7 0450 5250 6150 6710 6D     SME_nPq2R_D5:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00023BC0 0250 52B0 6F               SME_nPq2R_DE:	dc.b 2, $50, $52, $B0, $6F	
00023BC5 0370 3030 7B50 7F          SME_nPq2R_E3:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00023BCC 0550 8B20 9150 9400 9A53+  SME_nPq2R_EA:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
00023BD7 0650 8510 9B30 9D50 A130+  SME_nPq2R_F5:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
00023BE4 0450 AC10 B270 B420 BC     SME_nPq2R_102:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00023BED 0530 C570 C920 D110 D453+  SME_nPq2R_10B:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
00023BF8 0450 BF10 D670 D820 E0     SME_nPq2R_116:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00023C01 0550 8510 9B00 9170 E320+  SME_nPq2R_11F:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00023C0C 0470 EE50 F610 FC50 FE     SME_nPq2R_12A:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00023C15 0270 EEB1 04               SME_nPq2R_133:	dc.b 2, $70, $EE, $B1, 4	
00023C1A 0251 1081 16               SME_nPq2R_138:	dc.b 2, $51, $10, $81, $16	
00023C1F 0451 1051 1F11 2551 27     SME_nPq2R_13D:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
00023C28 0251 10B1 2D               SME_nPq2R_146:	dc.b 2, $51, $10, $B1, $2D	
00023C2D 0370 EE01 0481 39          SME_nPq2R_14B:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00023C34 0611 4811 4A81 4C01 5501+  SME_nPq2R_152:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00023C41 0651 4221 5711 5A11 5C81+  SME_nPq2R_15F:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00023C4E 0451 6711 6D81 6F11 78     SME_nPq2R_16C:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
00023C57 0521 8011 8371 8521 8D53+  SME_nPq2R_175:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00023C62 0451 7A11 9081 9211 9B     SME_nPq2R_180:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00023C6B 0551 4281 9D11 5C11 A603+  SME_nPq2R_189:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
00023C76 0251 A8B1 AE               SME_nPq2R_194:	dc.b 2, $51, $A8, $B1, $AE	
00023C7B 0250 52B1 BA               SME_nPq2R_199:	dc.b 2, $50, $52, $B1, $BA	
00023C80 0251 A8B1 C6               SME_nPq2R_19E:	dc.b 2, $51, $A8, $B1, $C6	
00023C85 0250 52B1 D2               SME_nPq2R_1A3:	dc.b 2, $50, $52, $B1, $D2	
00023C8A 0451 DE11 E4B1 E601 F2     SME_nPq2R_1A8:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00023C93 0451 F311 F9B1 FB03 26     SME_nPq2R_1B1:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00023C9C 0612 07B2 0913 9803 9A13+  SME_nPq2R_1BA:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00023CA9 06B2 1513 2713 A313 C913+  SME_nPq2R_1C7:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
00023CB6 0252 21B2 27               SME_nPq2R_1D4:	dc.b 2, $52, $21, $B2, $27	
00023CBB 0251 10B2 33               SME_nPq2R_1D9:	dc.b 2, $51, $10, $B2, $33	
00023CC0 0252 21B2 3F               SME_nPq2R_1DE:	dc.b 2, $52, $21, $B2, $3F	
00023CC5 0251 10B2 4B               SME_nPq2R_1E3:	dc.b 2, $51, $10, $B2, $4B	
00023CCA 0452 5712 5DB2 5F02 6B     SME_nPq2R_1E8:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00023CD3 0372 6CB2 7403 DF          SME_nPq2R_1F1:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00023CDA 0412 80B2 8202 6B53 D9     SME_nPq2R_1F8:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
00023CE3 03B2 8E03 D073 D1          SME_nPq2R_201:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
00023CEA 0234 57B4 4B               SME_nPq2R_208:	dc.b 2, $34, $57, $B4, $4B	
00023CEF 0434 6A74 5B34 6324 67     SME_nPq2R_20D:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
00023CF8 0334 7DB4 6E24 7A          SME_nPq2R_216:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00023CFF 0252 9AB2 A0               SME_nPq2R_21D:	dc.b 2, $52, $9A, $B2, $A0	
00023D04 0452 AC72 B212 BA02 BC     SME_nPq2R_222:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00023D0D 0412 BD72 BF22 C702 CA     SME_nPq2R_22B:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023D16 0322 CB22 CEF2 D1          SME_nPq2R_234:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00023D1D 03B2 E172 ED00 6F          SME_nPq2R_23B:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00023D24 0372 F532 FD23 01          SME_nPq2R_242:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023D2B 0183 04                    SME_nPq2R_249:	dc.b 1, $83, 4	
00023D2E 0373 0D03 1533 16          SME_nPq2R_24C:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023D35 03B3 2913 3503 37          SME_nPq2R_253:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00023D3C 04B3 3833 4403 4803 49     SME_nPq2R_25A:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00023D45 04B3 4A33 5603 5A03 5B     SME_nPq2R_263:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00023D4E 0283 5C73 65               SME_nPq2R_26C:	dc.b 2, $83, $5C, $73, $65	
00023D53 0383 6D23 7613 79          SME_nPq2R_271:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00023D5A 0283 7B73 84               SME_nPq2R_278:	dc.b 2, $83, $7B, $73, $84	
00023D5F 0383 6D23 8C13 8F          SME_nPq2R_27D:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
00023D66 0573 A613 AE53 B033 B603+  SME_nPq2R_284:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00023D71 0573 BB13 AE53 C333 B603+  SME_nPq2R_28F:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00023D7C 0372 F532 FD23 01          SME_nPq2R_29A:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023D83 0373 0D03 1533 16          SME_nPq2R_2A1:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023D8A 03B3 E013 EC33 EE          SME_nPq2R_2A8:	dc.b 3, $B3, $E0, $13, $EC, $33, $EE	
00023D91 02F4 0424 14               SME_nPq2R_2AF:	dc.b 2, $F4, 4, $24, $14	
00023D96 0353 F2B3 F810 6B          SME_nPq2R_2B4:	dc.b 3, $53, $F2, $B3, $F8, $10, $6B	
00023D9D 04F4 1714 2704 2914 2A     SME_nPq2R_2BB:	dc.b 4, $F4, $17, $14, $27, 4, $29, $14, $2A	
00023DA6 0804 3E24 3914 3C14 2C24+  SME_nPq2R_2C4:	dc.b 8, 4, $3E, $24, $39, $14, $3C, $14, $2C, $24, $2E, $34, $31, $24, $36, 4, $35	
00023DB7 01B4 3F                    SME_nPq2R_2D5:	dc.b 1, $B4, $3F	
00023DBA                            		even
00023DBA                            		even
00023DBA                            
00023DBA                            ; ---------------------------------------------------------------------------
00023DBA                            ; Uncompressed graphics	- Sonic
00023DBA                            ; ---------------------------------------------------------------------------
00023DBA                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002CDFA                            		even
0002CDFA                            ; ---------------------------------------------------------------------------
0002CDFA                            ; Compressed graphics - various
0002CDFA                            ; ---------------------------------------------------------------------------
0002CDFA                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002CEFE                            		even
0002CEFE                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002CF38                            		even
0002CF38                            Art_Shield:	incbin	artunc\shield.bin	; shield
0002D298                            		even
0002D298                            Art_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002D718                            		even
0002D718                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002D822                            		even
0002D822                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002D874                            		even
0002D874                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002DABC                            		even
0002DABC                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002DC42                            		even
0002DC42                            ; ---------------------------------------------------------------------------
0002DC42                            ; Sprite mappings - walls of the special stage
0002DC42                            ; ---------------------------------------------------------------------------
0002DC42                            Map_SSWalls:
0002DC42                            	include "_maps\SSwalls.asm"
0002DC42                            ; ---------------------------------------------------------------------------
0002DC42                            ; Sprite mappings - walls of the special stage
0002DC42                            ; ---------------------------------------------------------------------------
0002DC42 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002DC46 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002DC4A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002DC4E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002DC52 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002DC56 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002DC5A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002DC5E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002DC62 01                         byte_2C584:	dc.b 1
0002DC63 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002DC68 01                         byte_2C58A:	dc.b 1
0002DC69 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002DC6E 01                         byte_2C590:	dc.b 1
0002DC6F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002DC74 01                         byte_2C596:	dc.b 1
0002DC75 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002DC7A 01                         byte_2C59C:	dc.b 1
0002DC7B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002DC80 01                         byte_2C5A2:	dc.b 1
0002DC81 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002DC86 01                         byte_2C5A8:	dc.b 1
0002DC87 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002DC8C 01                         byte_2C5AE:	dc.b 1
0002DC8D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002DC92 01                         byte_2C5B4:	dc.b 1
0002DC93 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002DC98 01                         byte_2C5BA:	dc.b 1
0002DC99 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002DC9E 01                         byte_2C5C0:	dc.b 1
0002DC9F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002DCA4 01                         byte_2C5C6:	dc.b 1
0002DCA5 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002DCAA 01                         byte_2C5CC:	dc.b 1
0002DCAB F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002DCB0 01                         byte_2C5D2:	dc.b 1
0002DCB1 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002DCB6 01                         byte_2C5D8:	dc.b 1
0002DCB7 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002DCBC 01                         byte_2C5DE:	dc.b 1
0002DCBD F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002DCC2                            		even
0002DCC2                            		even
0002DCC2                            ; ---------------------------------------------------------------------------
0002DCC2                            ; Compressed graphics - special stage
0002DCC2                            ; ---------------------------------------------------------------------------
0002DCC2                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002E5FA                            		even
0002E5FA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002E72E                            		even
0002E72E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002F3BE                            		even
0002F3BE                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002F6BE                            		even
0002F6BE                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002FBB2                            		even
0002FBB2                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002FCA0                            		even
0002FCA0                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002FD70                            		even
0002FD70                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002FE66                            		even
0002FE66                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002FEC4                            		even
0002FEC4                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002FF56                            		even
0002FF56                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00030018                            		even
00030018                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000300E6                            		even
000300E6                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000301B2                            		even
000301B2                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003027A                            		even
0003027A                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030344                            		even
00030344                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030414                            		even
00030414                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030608                            		even
00030608                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00030770                            		even
00030770                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00030820                            		even
00030820                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000308FA                            		even
000308FA                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003097E                            		even
0003097E                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00030AFC                            		even
00030AFC                            ; ---------------------------------------------------------------------------
00030AFC                            ; Compressed graphics - GHZ stuff
00030AFC                            ; ---------------------------------------------------------------------------
00030AFC                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00030B46                            		even
00030B46                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00030C60                            		even
00030C60                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00030D4C                            		even
00030D4C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00030D94                            		even
00030D94                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00030F32                            		even
00030F32                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00030FAE                            		even
00030FAE                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000311C2                            		even
000311C2                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000312EE                            		even
000312EE                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003141C                            		even
0003141C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000314BA                            		even
000314BA                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003151A                            		even
0003151A                            ; ---------------------------------------------------------------------------
0003151A                            ; Compressed graphics - LZ stuff
0003151A                            ; ---------------------------------------------------------------------------
0003151A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003163E                            		even
0003163E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00031E32                            		even
00031E32                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00031FB2                            		even
00031FB2                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003211C                            		even
0003211C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00032772                            		even
00032772                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00032828                            		even
00032828                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000328CA                            		even
000328CA                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00032A26                            		even
00032A26                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00032A8A                            		even
00032A8A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00032BDC                            		even
00032BDC                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000330BE                            		even
000330BE                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003322E                            		even
0003322E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000334E6                            		even
000334E6                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003361E                            		even
0003361E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00033748                            		even
00033748                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00033858                            		even
00033858                            ; ---------------------------------------------------------------------------
00033858                            ; Compressed graphics - MZ stuff
00033858                            ; ---------------------------------------------------------------------------
00033858                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00033AE6                            		even
00033AE6                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00033BA4                            		even
00033BA4                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00033C5C                            		even
00033C5C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00033CB0                            		even
00033CB0                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00033F8E                            		even
00033F8E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000348A4                            		even
000348A4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00034A08                            		even
00034A08                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00034A90                            		even
00034A90                            ; ---------------------------------------------------------------------------
00034A90                            ; Compressed graphics - SLZ stuff
00034A90                            ; ---------------------------------------------------------------------------
00034A90                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00034CCC                            		even
00034CCC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00034E12                            		even
00034E12                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00035056                            		even
00035056                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000350B8                            		even
000350B8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003519A                            		even
0003519A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003537C                            		even
0003537C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00035488                            		even
00035488                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003552C                            		even
0003552C                            ; ---------------------------------------------------------------------------
0003552C                            ; Compressed graphics - SYZ stuff
0003552C                            ; ---------------------------------------------------------------------------
0003552C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00035696                            		even
00035696                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000356F8                            		even
000356F8                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000357DA                            		even
000357DA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00035A68                            		even
00035A68                            ; ---------------------------------------------------------------------------
00035A68                            ; Compressed graphics - SBZ stuff
00035A68                            ; ---------------------------------------------------------------------------
00035A68                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00035ABC                            		even
00035ABC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00035D58                            		even
00035D58                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00035F5C                            		even
00035F5C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000360FA                            		even
000360FA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003642A                            		even
0003642A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036608                            		even
00036608                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00036660                            		even
00036660                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000367E0                            		even
000367E0                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000368DE                            		even
000368DE                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00036A6A                            		even
00036A6A                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00036ABA                            		even
00036ABA                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00036B12                            		even
00036B12                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00036C0E                            		even
00036C0E                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00036D24                            		even
00036D24                            ; ---------------------------------------------------------------------------
00036D24                            ; Compressed graphics - enemies
00036D24                            ; ---------------------------------------------------------------------------
00036D24                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000370E4                            		even
000370E4                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
000375D2                            		even
000375D2                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00037978                            		even
00037978                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00037B60                            		even
00037B60                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003824A                            		even
0003824A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
000384B2                            		even
000384B2                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003873C                            		even
0003873C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00038C60                            		even
00038C60                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00038EEA                            		even
00038EEA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039508                            		even
00039508                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000398F0                            		even
000398F0                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00039BEC                            		even
00039BEC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00039E34                            		even
00039E34                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A0CC                            		even
0003A0CC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003A2AA                            		even
0003A2AA                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003A438                            		even
0003A438                            ; ---------------------------------------------------------------------------
0003A438                            ; Compressed graphics - various
0003A438                            ; ---------------------------------------------------------------------------
0003A438                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003A954                            		even
0003A954                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003AAA4                            		even
0003AAA4                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003AB26                            		even
0003AB26                            Nem_LivesPic:	incbin	artnem\lifeiconpic.bin	; life counter icon picture
0003AB96                            		even
0003AB96                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003ACA2 00                         		even
0003ACA2                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B0FC                            		even
0003B0FC                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003B762                            		even
0003B762                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003B812                            		even
0003B812                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003B9A4                            		even
0003B9A4                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003BAA6                            		even
0003BAA6                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003BB82                            		even
0003BB82                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003BFFE                            		even
0003BFFE                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C0BE                            		even
0003C0BE                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C232                            		even
0003C232                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003C534                            		even
0003C534                            ; ---------------------------------------------------------------------------
0003C534                            ; Compressed graphics - continue screen
0003C534                            ; ---------------------------------------------------------------------------
0003C534                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003C7E4                            		even
0003C7E4                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003CA1E                            		even
0003CA1E                            ; ---------------------------------------------------------------------------
0003CA1E                            ; Compressed graphics - animals
0003CA1E                            ; ---------------------------------------------------------------------------
0003CA1E                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003CB76                            		even
0003CB76                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003CCD2                            		even
0003CCD2                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003CE4E                            		even
0003CE4E                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003CF6A                            		even
0003CF6A                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D0A0                            		even
0003D0A0                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D1DA                            		even
0003D1DA                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003D336                            		even
0003D336                            ; ---------------------------------------------------------------------------
0003D336                            ; Compressed graphics - primary patterns and block mappings
0003D336                            ; ---------------------------------------------------------------------------
0003D336                            
0003D336                            Nem_TIT_1st:	incbin	artnem\8x8tit1.bin	; Title primary patterns
0003E996                            		even
0003E996                            Nem_TIT_2nd:	incbin	artnem\8x8tit2.bin	; Title secondary patterns
0003FD3E                            		even
0003FD3E                            Blk16_TS:	incbin	map16\ts.bin
0004065C                            		even
0004065C                            Blk256_TS:	incbin	map256\ts.bin
00042754                            		even
00042754                            Blk16_GHZ:	incbin	map16\ghz.bin
00043072                            		even
00043072                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
00045A14                            		even
00045A14                            Blk256_GHZ:	incbin	map256\ghz.bin
00047B0C                            		even
00047B0C                            Blk16_LZ:	incbin	map16\lz.bin
00047E0C 00                         		even
00047E0C                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00049892                            		even
00049892                            Blk256_LZ:	incbin	map256\lz.bin
0004BD1A                            		even
0004BD1A                            Blk16_MZ:	incbin	map16\mz.bin
0004C490 00                         		even
0004C490                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EBE4                            		even
0004EBE4                            Blk256_MZ:	incbin	map256\mz.bin
0005031C                            		even
0005031C                            Blk16_SLZ:	incbin	map16\slz.bin
00050AAE 00                         		even
00050AAE                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005449E 00                         		even
0005449E                            Blk256_SLZ:	incbin	map256\slz.bin
0005641A                            		even
0005641A                            Blk16_SYZ:	incbin	map16\syz.bin
00056CC8 00                         		even
00056CC8                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005A2AE                            		even
0005A2AE                            Blk256_SYZ:	incbin	map256\syz.bin
0005C598                            		even
0005C598                            Blk16_SBZ:	incbin	map16\sbz.bin
0005D346                            		even
0005D346                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005FA14                            		even
0005FA14                            Blk256_SBZ:	incbin	map256\sbz.bin
00062598 00                         		even
00062598                            ; ---------------------------------------------------------------------------
00062598                            ; Compressed graphics - bosses and ending sequence
00062598                            ; ---------------------------------------------------------------------------
00062598                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00062DFC                            		even
00062DFC                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000630E6                            		even
000630E6                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006396A                            		even
0006396A                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00064196                            		even
00064196                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000648FE                            		even
000648FE                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00064E7E                            		even
00064E7E                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00064F9E                            		even
00064F9E                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006519C                            		even
0006519C                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006637A                            		even
0006637A                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00066CBE                            		even
00066CBE                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00067094                            		even
00067094                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00067624                            		even
00067624                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000678AC                            		even
000678AC                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00067EAA                            		even
00067EAA                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00068132                            		even
00068132                            ; ---------------------------------------------------------------------------
00068132                            ; Collision data
00068132                            ; ---------------------------------------------------------------------------
00068132                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00068232                            		even
00068232                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00069232                            		even
00069232                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006A232                            		even
0006A232                            Col_GHZ_1:	incbin	collide\ghz1.bin	; GHZ index 1
0006A3EC 00                         		even
0006A3EC                            Col_GHZ_2:	incbin	collide\ghz2.bin	; GHZ index 2
0006A5A4                            		even
0006A5A4                            Col_LZ_1:	incbin	collide\lz1.bin		; LZ index 1
0006A668                            		even
0006A668                            Col_LZ_2:	incbin	collide\lz2.bin		; LZ index 2
0006A72C                            		even
0006A72C                            Col_MZ_1:	incbin	collide\mz1.bin		; MZ index 1
0006A8BC                            		even
0006A8BC                            Col_MZ_2:	incbin	collide\mz2.bin		; MZ index 2
0006AA4C                            		even
0006AA4C                            Col_SLZ_1:	incbin	collide\slz1.bin	; SLZ index 1
0006ABEA                            		even
0006ABEA                            Col_SLZ_2:	incbin	collide\slz2.bin	; SLZ index 2
0006AD88                            		even
0006AD88                            Col_SYZ_1:	incbin	collide\syz1.bin	; SYZ index 1
0006AF7C                            		even
0006AF7C                            Col_SYZ_2:	incbin	collide\syz2.bin	; SYZ index 2
0006B170                            		even
0006B170                            Col_SBZ_1:	incbin	collide\sbz1.bin	; SBZ index 1
0006B3C8                            		even
0006B3C8                            Col_SBZ_2:	incbin	collide\sbz2.bin	; SBZ index 2
0006B620                            		even
0006B620                            ; ---------------------------------------------------------------------------
0006B620                            ; Special layouts
0006B620                            ; ---------------------------------------------------------------------------
0006B620                            SS_1:		incbin	sslayout\1.bin
0006B89A                            		even
0006B89A                            SS_2:		incbin	sslayout\2.bin
0006BCAC                            		even
0006BCAC                            SS_3:		incbin	sslayout\3.bin
0006C008                            		even
0006C008                            SS_4:		incbin	sslayout\4.bin
0006C4E2                            		even
0006C4E2                            SS_5:		incbin	sslayout\5.bin
0006C9B4                            		even
0006C9B4                            SS_6:		incbin	sslayout\6.bin
0006CCC4                            		even
0006CCC4                            ; ---------------------------------------------------------------------------
0006CCC4                            ; Animated uncompressed graphics
0006CCC4                            ; ---------------------------------------------------------------------------
0006CCC4                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006CEC4                            		even
0006CEC4                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006D2C4                            		even
0006D2C4                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006D744                            		even
0006D744                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006DA44                            		even
0006DA44                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006E044                            		even
0006E044                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006E344                            		even
0006E344                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006EDC4                            		even
0006EDC4                            
0006EDC4                            ; ---------------------------------------------------------------------------
0006EDC4                            ; Level	layout index
0006EDC4                            ; ---------------------------------------------------------------------------
0006EDC4 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
0006EDD0 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
0006EDDC 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
0006EDE8 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
0006EDF4 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
0006EE00 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
0006EE0C 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
0006EE18 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
0006EE24 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
0006EE30 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
0006EE3C 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
0006EE48 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
0006EE54 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
0006EE60 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
0006EE6C 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
0006EE78 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
0006EE84 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
0006EE90 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
0006EE9C 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
0006EEA8 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
0006EEB4 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
0006EEC0 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
0006EECC 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
0006EED8 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
0006EEE4 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006EEF0 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006EEFC 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006EF08 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006EF14                            
0006EF14                            Level_GHZ1:	incbin	levels\ghz1.bin
0006FF14                            		even
0006FF14 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006FF18                            Level_GHZ2:	incbin	levels\ghz2.bin
00070F18                            		even
00070F18 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00070F1C                            Level_GHZ3:	incbin	levels\ghz3.bin
00071F1C                            		even
00071F1C                            Level_GHZbg:	incbin	levels\ghzbg.bin
00071F3E                            		even
00071F3E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00071F42 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00071F46                            
00071F46                            Level_LZ1:	incbin	levels\lz1.bin
00072F46                            		even
00072F46                            Level_LZbg:	incbin	levels\lzbg.bin
00073048                            		even
00073048 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007304C                            Level_LZ2:	incbin	levels\lz2.bin
0007404C                            		even
0007404C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00074050                            Level_LZ3:	incbin	levels\lz3.bin
00075050                            		even
00075050                            Level_LZ3_WALL:	incbin	levels\lz3_wall.bin	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
00076050                            		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
00076050 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076054                            Level_SBZ3:	incbin	levels\sbz3.bin
00077054                            		even
00077054 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00077058                            
00077058                            Level_MZ1:	incbin	levels\mz1.bin
00078058                            		even
00078058                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000780D2                            		even
000780D2                            Level_MZ2:	incbin	levels\mz2.bin
000790D2                            		even
000790D2                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00079164                            		even
00079164 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00079168                            Level_MZ3:	incbin	levels\mz3.bin
0007A168                            		even
0007A168                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007A20C                            		even
0007A20C 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007A210 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007A214                            
0007A214                            Level_SLZ1:	incbin	levels\slz1.bin
0007B214                            		even
0007B214                            Level_SLZbg:	incbin	levels\slzbg.bin
0007B28E                            		even
0007B28E                            Level_SLZ2:	incbin	levels\slz2.bin
0007C28E                            		even
0007C28E                            Level_SLZ3:	incbin	levels\slz3.bin
0007D28E                            		even
0007D28E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007D292                            
0007D292                            Level_SYZ1:	incbin	levels\syz1.bin
0007E292                            		even
0007E292                            Level_SYZbg:	incbin	levels\syzbg.bin
0007E2CC                            		even
0007E2CC 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007E2D0                            Level_SYZ2:	incbin	levels\syz2.bin
0007F2D0                            		even
0007F2D0 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F2D4                            Level_SYZ3:	incbin	levels\syz3.bin
000802D4                            		even
000802D4 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000802D8 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000802DC                            
000802DC                            Level_SBZ1:	incbin	levels\sbz1.bin
000812DC                            		even
000812DC                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0008131A                            		even
0008131A                            Level_SBZ2:	incbin	levels\sbz2.bin
0008231A                            		even
0008231A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00082484                            		even
00082484 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00082488 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0008248C                            Level_End:	incbin	levels\ending.bin
0008348C                            		even
0008348C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00083490                            
00083490                            ; ---------------------------------------------------------------------------
00083490                            ; Animated uncompressed giant ring graphics
00083490                            ; ---------------------------------------------------------------------------
00083490                            Art_BigRing:	incbin	artunc\bigring.bin
000840D0                            		even
000840D0                            ; ---------------------------------------------------------------------------
000840D0                            ; Sprite locations index
000840D0                            ; ---------------------------------------------------------------------------
000840D0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840D4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840D8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840DC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840E0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840E4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840E8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840EC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840F0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840F4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840F8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000840FC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084100 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084104 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084108 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008410C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084110 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084114 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084118 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008411C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084120 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084124 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084128 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008412C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084130 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084134 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084138 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008413C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084140 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00084144 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00084148 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008414C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00084150 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00084154 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00084158 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008415C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00084160 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00084166                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000841B4                            		even
000841B4                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00084784                            		even
00084784                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00084E50                            		even
00084E50                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000852BE                            		even
000852BE                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00085600                            		even
00085600                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00085BE2                            		even
00085BE2                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0008607A                            		even
0008607A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000860AC                            		even
000860AC                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000860DE                            		even
000860DE                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00086110                            		even
00086110                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00086142                            		even
00086142                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0008618C                            		even
0008618C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000861CA                            		even
000861CA                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00086536                            		even
00086536                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000869E0                            		even
000869E0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00086F56                            		even
00086F56                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000874AE                            		even
000874AE                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0008796A                            		even
0008796A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00087F94                            		even
00087F94                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00088420                            		even
00088420                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0008898A                            		even
0008898A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00088F90                            		even
00088F90                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000896CE                            		even
000896CE                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00089DAC                            		even
00089DAC                            ObjPos_FZ:	incbin	objpos\fz.bin
00089DBE                            		even
00089DBE                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00089DF0                            		even
00089DF0                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00089E22                            		even
00089E22                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00089E54                            		even
00089E54                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00089E86                            		even
00089E86                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00089EB8                            		even
00089EB8                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00089EF0                            		even
00089EF0                            ObjPos_End:	incbin	objpos\ending.bin
0008A04C                            		even
0008A04C FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008A052                            ; ---------------------------------------------------------------------------
0008A052 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0008A056 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0008A05A 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0008A05E 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0008A062 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0008A066 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0008A06A                            ; ---------------------------------------------------------------------------
0008A06A                            ; PSG instruments used in music
0008A06A                            ; ---------------------------------------------------------------------------
0008A06A 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0008A076 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008A082 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0008A08E                            PSG1:		incbin	sound\psg1.bin
0008A0A5                            PSG2:		incbin	sound\psg2.bin
0008A0AC                            PSG3:		incbin	sound\psg3.bin
0008A0BD                            PSG4:		incbin	sound\psg4.bin
0008A0C8                            PSG6:		incbin	sound\psg6.bin
0008A0D7                            PSG5:		incbin	sound\psg5.bin
0008A101                            PSG7:		incbin	sound\psg7.bin
0008A11D                            PSG8:		incbin	sound\psg8.bin
0008A145                            PSG9:		incbin	sound\psg9.bin
0008A156                            
0008A156 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0008A15E                            ; ---------------------------------------------------------------------------
0008A15E                            ; Music	Pointers
0008A15E                            ; ---------------------------------------------------------------------------
0008A15E 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0008A166 0000 0000 0000 0000        		dc.l Music83, Music84
0008A16E 0000 0000 0000 0000        		dc.l Music85, Music86
0008A176 0000 0000 0000 0000        		dc.l Music87, Music88
0008A17E 0000 0000 0000 0000        		dc.l Music89, Music8A
0008A186 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008A18E 0000 0000 0000 0000        		dc.l Music8D, Music8E
0008A196 0000 0000 0000 0000        		dc.l Music8F, Music90
0008A19E 0000 0000 0000 0000        		dc.l Music91, Music92
0008A1A6 0000 0000 0000 0000        		dc.l Music93, Music94
0008A1AE 0000 0000 0000 0000        		dc.l Music95, Music96
0008A1B6 0000 0000                  		dc.l Music97
0008A1BA                            ; ---------------------------------------------------------------------------
0008A1BA                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0008A1BA                            ; ---------------------------------------------------------------------------
0008A1BA 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0008A1CA 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0008A1DA 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0008A1EA 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0008A1FA 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0008A20A 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0008A21A 9090 9090 90               		dc.b $90, $90, $90, $90, $90
0008A220 00                         		even
0008A220                            
0008A220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A220                            
0008A220                            
0008A220                            sub_71B4C:				; XREF: V_Int; H_Int
0008A220 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0008A228 4E71                       		nop	
0008A22A 4E71                       		nop	
0008A22C 4E71                       		nop	
0008A22E                            
0008A22E                            loc_71B5A:
0008A22E 4DF9 00FF F000             		lea	($FFF000).l,a6
0008A234 422E 000E                  		clr.b	$E(a6)
0008A238 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0008A23C 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0008A240 532E 0001                  		subq.b	#1,1(a6)
0008A244 6600                       		bne.s	loc_71B9E
0008A246 4EBA 0000                  		jsr	sub_7260C(pc)
0008A24A                            
0008A24A                            loc_71B9E:
0008A24A 102E 0004                  		move.b	4(a6),d0
0008A24E 6700                       		beq.s	loc_71BA8
0008A250 4EBA 0000                  		jsr	sub_72504(pc)
0008A254                            
0008A254                            loc_71BA8:
0008A254 4A2E 0024                  		tst.b	$24(a6)
0008A258 6700                       		beq.s	loc_71BB2
0008A25A 4EBA 0000                  		jsr	sub_7267C(pc)
0008A25E                            
0008A25E                            loc_71BB2:
0008A25E 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008A262 6700                       		beq.s	loc_71BBC	; if not, branch
0008A264 4EBA 0000                  		jsr	Sound_Play(pc)
0008A268                            
0008A268                            loc_71BBC:
0008A268 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008A26E 6700                       		beq.s	loc_71BC8
0008A270 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0008A274                            
0008A274                            loc_71BC8:
0008A274 4BEE 0040                  		lea	$40(a6),a5
0008A278 4A15                       		tst.b	(a5)
0008A27A 6A00                       		bpl.s	loc_71BD4
0008A27C 4EBA 0000                  		jsr	sub_71C4E(pc)
0008A280                            
0008A280                            loc_71BD4:
0008A280 422E 0008                  		clr.b	8(a6)
0008A284 7E05                       		moveq	#5,d7
0008A286                            
0008A286                            loc_71BDA:
0008A286 DAFC 0030                  		adda.w	#$30,a5
0008A28A 4A15                       		tst.b	(a5)
0008A28C 6A00                       		bpl.s	loc_71BE6
0008A28E 4EBA 0000                  		jsr	sub_71CCA(pc)
0008A292                            
0008A292                            loc_71BE6:
0008A292 51CF FFF2                  		dbf	d7,loc_71BDA
0008A296                            
0008A296 7E02                       		moveq	#2,d7
0008A298                            
0008A298                            loc_71BEC:
0008A298 DAFC 0030                  		adda.w	#$30,a5
0008A29C 4A15                       		tst.b	(a5)
0008A29E 6A00                       		bpl.s	loc_71BF8
0008A2A0 4EBA 0000                  		jsr	sub_72850(pc)
0008A2A4                            
0008A2A4                            loc_71BF8:
0008A2A4 51CF FFF2                  		dbf	d7,loc_71BEC
0008A2A8                            
0008A2A8 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008A2AE 7E02                       		moveq	#2,d7
0008A2B0                            
0008A2B0                            loc_71C04:
0008A2B0 DAFC 0030                  		adda.w	#$30,a5
0008A2B4 4A15                       		tst.b	(a5)
0008A2B6 6A00                       		bpl.s	loc_71C10
0008A2B8 4EBA 0000                  		jsr	sub_71CCA(pc)
0008A2BC                            
0008A2BC                            loc_71C10:
0008A2BC 51CF FFF2                  		dbf	d7,loc_71C04
0008A2C0                            
0008A2C0 7E02                       		moveq	#2,d7
0008A2C2                            
0008A2C2                            loc_71C16:
0008A2C2 DAFC 0030                  		adda.w	#$30,a5
0008A2C6 4A15                       		tst.b	(a5)
0008A2C8 6A00                       		bpl.s	loc_71C22
0008A2CA 4EBA 0000                  		jsr	sub_72850(pc)
0008A2CE                            
0008A2CE                            loc_71C22:
0008A2CE 51CF FFF2                  		dbf	d7,loc_71C16
0008A2D2 1D7C 0040 000E             		move.b	#$40,$E(a6)
0008A2D8 DAFC 0030                  		adda.w	#$30,a5
0008A2DC 4A15                       		tst.b	(a5)
0008A2DE 6A00                       		bpl.s	loc_71C38
0008A2E0 4EBA 0000                  		jsr	sub_71CCA(pc)
0008A2E4                            
0008A2E4                            loc_71C38:
0008A2E4 DAFC 0030                  		adda.w	#$30,a5
0008A2E8 4A15                       		tst.b	(a5)
0008A2EA 6A00                       		bpl.s	loc_71C44
0008A2EC 4EBA 0000                  		jsr	sub_72850(pc)
0008A2F0                            
0008A2F0                            loc_71C44:
0008A2F0 1439 00A0 4000             		move.b	($A04000).l,d2
0008A2F6 0802 0007                  		btst	#7,d2
0008A2FA 66F4                       		bne.s	loc_71C44
0008A2FC 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
0008A304 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0008A30C 4E75                       		rts	
0008A30E                            ; End of function sub_71B4C
0008A30E                            
0008A30E                            
0008A30E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A30E                            
0008A30E                            
0008A30E                            sub_71C4E:				; XREF: sub_71B4C
0008A30E 532D 000E                  		subq.b	#1,$E(a5)
0008A312 6600                       		bne.s	locret_71CAA
0008A314 1D7C 0080 0008             		move.b	#$80,8(a6)
0008A31A 286D 0004                  		movea.l	4(a5),a4
0008A31E                            
0008A31E                            loc_71C5E:
0008A31E 7A00                       		moveq	#0,d5
0008A320 1A1C                       		move.b	(a4)+,d5
0008A322 0C05 00E0                  		cmpi.b	#-$20,d5
0008A326 6500                       		bcs.s	loc_71C6E
0008A328 4EBA 0000                  		jsr	sub_72A5A(pc)
0008A32C 60F0                       		bra.s	loc_71C5E
0008A32E                            ; ===========================================================================
0008A32E                            
0008A32E                            loc_71C6E:
0008A32E 4A05                       		tst.b	d5
0008A330 6A00                       		bpl.s	loc_71C84
0008A332 1B45 0010                  		move.b	d5,$10(a5)
0008A336 1A1C                       		move.b	(a4)+,d5
0008A338 6A00                       		bpl.s	loc_71C84
0008A33A 534C                       		subq.w	#1,a4
0008A33C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008A342 6000                       		bra.s	loc_71C88
0008A344                            ; ===========================================================================
0008A344                            
0008A344                            loc_71C84:
0008A344 4EBA 0000                  		jsr	sub_71D40(pc)
0008A348                            
0008A348                            loc_71C88:
0008A348 2B4C 0004                  		move.l	a4,4(a5)
0008A34C 0815 0002                  		btst	#2,(a5)
0008A350 6600                       		bne.s	locret_71CAA
0008A352 7000                       		moveq	#0,d0
0008A354 102D 0010                  		move.b	$10(a5),d0
0008A358 0C00 0080                  		cmpi.b	#$80,d0
0008A35C 6700                       		beq.s	locret_71CAA
0008A35E 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0008A364                            
0008A364                            locret_71CAA:
0008A364 4E75                       		rts	
0008A366                            ; ===========================================================================
0008A366                            
0008A366                            loc_71CAC:
0008A366 0400 0088                  		subi.b	#$88,d0
0008A36A 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0008A36E 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0008A374 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0008A37C 4E75                       		rts	
0008A37E                            ; End of function sub_71C4E
0008A37E                            
0008A37E                            ; ===========================================================================
0008A37E 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0008A384                            
0008A384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A384                            
0008A384                            
0008A384                            sub_71CCA:				; XREF: sub_71B4C
0008A384 532D 000E                  		subq.b	#1,$E(a5)
0008A388 6600                       		bne.s	loc_71CE0
0008A38A 0895 0004                  		bclr	#4,(a5)
0008A38E 4EBA 0000                  		jsr	sub_71CEC(pc)
0008A392 4EBA 0000                  		jsr	sub_71E18(pc)
0008A396 6000 0000                  		bra.w	loc_726E2
0008A39A                            ; ===========================================================================
0008A39A                            
0008A39A                            loc_71CE0:
0008A39A 4EBA 0000                  		jsr	sub_71D9E(pc)
0008A39E 4EBA 0000                  		jsr	sub_71DC6(pc)
0008A3A2 6000 0000                  		bra.w	loc_71E24
0008A3A6                            ; End of function sub_71CCA
0008A3A6                            
0008A3A6                            
0008A3A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A3A6                            
0008A3A6                            
0008A3A6                            sub_71CEC:				; XREF: sub_71CCA
0008A3A6 286D 0004                  		movea.l	4(a5),a4
0008A3AA 0895 0001                  		bclr	#1,(a5)
0008A3AE                            
0008A3AE                            loc_71CF4:
0008A3AE 7A00                       		moveq	#0,d5
0008A3B0 1A1C                       		move.b	(a4)+,d5
0008A3B2 0C05 00E0                  		cmpi.b	#-$20,d5
0008A3B6 6500                       		bcs.s	loc_71D04
0008A3B8 4EBA 0000                  		jsr	sub_72A5A(pc)
0008A3BC 60F0                       		bra.s	loc_71CF4
0008A3BE                            ; ===========================================================================
0008A3BE                            
0008A3BE                            loc_71D04:
0008A3BE 4EBA 0000                  		jsr	sub_726FE(pc)
0008A3C2 4A05                       		tst.b	d5
0008A3C4 6A00                       		bpl.s	loc_71D1A
0008A3C6 4EBA 0000                  		jsr	sub_71D22(pc)
0008A3CA 1A1C                       		move.b	(a4)+,d5
0008A3CC 6A00                       		bpl.s	loc_71D1A
0008A3CE 534C                       		subq.w	#1,a4
0008A3D0 6000 0000                  		bra.w	sub_71D60
0008A3D4                            ; ===========================================================================
0008A3D4                            
0008A3D4                            loc_71D1A:
0008A3D4 4EBA 0000                  		jsr	sub_71D40(pc)
0008A3D8 6000 0000                  		bra.w	sub_71D60
0008A3DC                            ; End of function sub_71CEC
0008A3DC                            
0008A3DC                            
0008A3DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A3DC                            
0008A3DC                            
0008A3DC                            sub_71D22:				; XREF: sub_71CEC
0008A3DC 0405 0080                  		subi.b	#$80,d5
0008A3E0 6700                       		beq.s	loc_71D58
0008A3E2 DA2D 0008                  		add.b	8(a5),d5
0008A3E6 0245 007F                  		andi.w	#$7F,d5
0008A3EA E34D                       		lsl.w	#1,d5
0008A3EC 41FA 0000                  		lea	word_72790(pc),a0
0008A3F0 3C30 5000                  		move.w	(a0,d5.w),d6
0008A3F4 3B46 0010                  		move.w	d6,$10(a5)
0008A3F8 4E75                       		rts	
0008A3FA                            ; End of function sub_71D22
0008A3FA                            
0008A3FA                            
0008A3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A3FA                            
0008A3FA                            
0008A3FA                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008A3FA 1005                       		move.b	d5,d0
0008A3FC 122D 0002                  		move.b	2(a5),d1
0008A400                            
0008A400                            loc_71D46:
0008A400 5301                       		subq.b	#1,d1
0008A402 6700                       		beq.s	loc_71D4E
0008A404 D005                       		add.b	d5,d0
0008A406 60F8                       		bra.s	loc_71D46
0008A408                            ; ===========================================================================
0008A408                            
0008A408                            loc_71D4E:
0008A408 1B40 000F                  		move.b	d0,$F(a5)
0008A40C 1B40 000E                  		move.b	d0,$E(a5)
0008A410 4E75                       		rts	
0008A412                            ; End of function sub_71D40
0008A412                            
0008A412                            ; ===========================================================================
0008A412                            
0008A412                            loc_71D58:				; XREF: sub_71D22
0008A412 08D5 0001                  		bset	#1,(a5)
0008A416 426D 0010                  		clr.w	$10(a5)
0008A41A                            
0008A41A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A41A                            
0008A41A                            
0008A41A                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008A41A 2B4C 0004                  		move.l	a4,4(a5)
0008A41E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008A424 0815 0004                  		btst	#4,(a5)
0008A428 6600                       		bne.s	locret_71D9C
0008A42A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0008A430 422D 000C                  		clr.b	$C(a5)
0008A434 0815 0003                  		btst	#3,(a5)
0008A438 6700                       		beq.s	locret_71D9C
0008A43A 206D 0014                  		movea.l	$14(a5),a0
0008A43E 1B58 0018                  		move.b	(a0)+,$18(a5)
0008A442 1B58 0019                  		move.b	(a0)+,$19(a5)
0008A446 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008A44A 1018                       		move.b	(a0)+,d0
0008A44C E208                       		lsr.b	#1,d0
0008A44E 1B40 001B                  		move.b	d0,$1B(a5)
0008A452 426D 001C                  		clr.w	$1C(a5)
0008A456                            
0008A456                            locret_71D9C:
0008A456 4E75                       		rts	
0008A458                            ; End of function sub_71D60
0008A458                            
0008A458                            
0008A458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A458                            
0008A458                            
0008A458                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0008A458 4A2D 0012                  		tst.b	$12(a5)
0008A45C 6700                       		beq.s	locret_71DC4
0008A45E 532D 0012                  		subq.b	#1,$12(a5)
0008A462 6600                       		bne.s	locret_71DC4
0008A464 08D5 0001                  		bset	#1,(a5)
0008A468 4A2D 0001                  		tst.b	1(a5)
0008A46C 6B00 0000                  		bmi.w	loc_71DBE
0008A470 4EBA 0000                  		jsr	sub_726FE(pc)
0008A474 584F                       		addq.w	#4,sp
0008A476 4E75                       		rts	
0008A478                            ; ===========================================================================
0008A478                            
0008A478                            loc_71DBE:
0008A478 4EBA 0000                  		jsr	sub_729A0(pc)
0008A47C 584F                       		addq.w	#4,sp
0008A47E                            
0008A47E                            locret_71DC4:
0008A47E 4E75                       		rts	
0008A480                            ; End of function sub_71D9E
0008A480                            
0008A480                            
0008A480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A480                            
0008A480                            
0008A480                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0008A480 584F                       		addq.w	#4,sp
0008A482 0815 0003                  		btst	#3,(a5)
0008A486 6700                       		beq.s	locret_71E16
0008A488 4A2D 0018                  		tst.b	$18(a5)
0008A48C 6700                       		beq.s	loc_71DDA
0008A48E 532D 0018                  		subq.b	#1,$18(a5)
0008A492 4E75                       		rts	
0008A494                            ; ===========================================================================
0008A494                            
0008A494                            loc_71DDA:
0008A494 532D 0019                  		subq.b	#1,$19(a5)
0008A498 6700                       		beq.s	loc_71DE2
0008A49A 4E75                       		rts	
0008A49C                            ; ===========================================================================
0008A49C                            
0008A49C                            loc_71DE2:
0008A49C 206D 0014                  		movea.l	$14(a5),a0
0008A4A0 1B68 0001 0019             		move.b	1(a0),$19(a5)
0008A4A6 4A2D 001B                  		tst.b	$1B(a5)
0008A4AA 6600                       		bne.s	loc_71DFE
0008A4AC 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0008A4B2 442D 001A                  		neg.b	$1A(a5)
0008A4B6 4E75                       		rts	
0008A4B8                            ; ===========================================================================
0008A4B8                            
0008A4B8                            loc_71DFE:
0008A4B8 532D 001B                  		subq.b	#1,$1B(a5)
0008A4BC 1C2D 001A                  		move.b	$1A(a5),d6
0008A4C0 4886                       		ext.w	d6
0008A4C2 DC6D 001C                  		add.w	$1C(a5),d6
0008A4C6 3B46 001C                  		move.w	d6,$1C(a5)
0008A4CA DC6D 0010                  		add.w	$10(a5),d6
0008A4CE 594F                       		subq.w	#4,sp
0008A4D0                            
0008A4D0                            locret_71E16:
0008A4D0 4E75                       		rts	
0008A4D2                            ; End of function sub_71DC6
0008A4D2                            
0008A4D2                            
0008A4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A4D2                            
0008A4D2                            
0008A4D2                            sub_71E18:				; XREF: sub_71CCA
0008A4D2 0815 0001                  		btst	#1,(a5)
0008A4D6 6600                       		bne.s	locret_71E48
0008A4D8 3C2D 0010                  		move.w	$10(a5),d6
0008A4DC 6700                       		beq.s	loc_71E4A
0008A4DE                            
0008A4DE                            loc_71E24:				; XREF: sub_71CCA
0008A4DE 102D 001E                  		move.b	$1E(a5),d0
0008A4E2 4880                       		ext.w	d0
0008A4E4 DC40                       		add.w	d0,d6
0008A4E6 0815 0002                  		btst	#2,(a5)
0008A4EA 6600                       		bne.s	locret_71E48
0008A4EC 3206                       		move.w	d6,d1
0008A4EE E049                       		lsr.w	#8,d1
0008A4F0 103C 00A4                  		move.b	#-$5C,d0
0008A4F4 4EBA 0000                  		jsr	sub_72722(pc)
0008A4F8 1206                       		move.b	d6,d1
0008A4FA 103C 00A0                  		move.b	#-$60,d0
0008A4FE 4EBA 0000                  		jsr	sub_72722(pc)
0008A502                            
0008A502                            locret_71E48:
0008A502 4E75                       		rts	
0008A504                            ; ===========================================================================
0008A504                            
0008A504                            loc_71E4A:
0008A504 08D5 0001                  		bset	#1,(a5)
0008A508 4E75                       		rts	
0008A50A                            ; End of function sub_71E18
0008A50A                            
0008A50A                            ; ===========================================================================
0008A50A                            
0008A50A                            loc_71E50:				; XREF: sub_71B4C
0008A50A 6B00                       		bmi.s	loc_71E94
0008A50C 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0008A512 6700 0000                  		beq.w	loc_71EFE
0008A516 1D7C 0002 0003             		move.b	#2,3(a6)
0008A51C 7602                       		moveq	#2,d3
0008A51E 103C 00B4                  		move.b	#-$4C,d0
0008A522 7200                       		moveq	#0,d1
0008A524                            
0008A524                            loc_71E6A:
0008A524 4EBA 0000                  		jsr	sub_7272E(pc)
0008A528 4EBA 0000                  		jsr	sub_72764(pc)
0008A52C 5200                       		addq.b	#1,d0
0008A52E 51CB FFF4                  		dbf	d3,loc_71E6A
0008A532                            
0008A532 7602                       		moveq	#2,d3
0008A534 7028                       		moveq	#$28,d0
0008A536                            
0008A536                            loc_71E7C:
0008A536 1203                       		move.b	d3,d1
0008A538 4EBA 0000                  		jsr	sub_7272E(pc)
0008A53C 5801                       		addq.b	#4,d1
0008A53E 4EBA 0000                  		jsr	sub_7272E(pc)
0008A542 51CB FFF2                  		dbf	d3,loc_71E7C
0008A546                            
0008A546 4EBA 0000                  		jsr	sub_729B6(pc)
0008A54A 13FC 007F 00A0 1FFF        		move.b	#$7F,($A01FFF).l; pause DAC
0008A552 6000 FD9C                  		bra.w	loc_71C44
0008A556                            ; ===========================================================================
0008A556                            
0008A556                            loc_71E94:				; XREF: loc_71E50
0008A556 422E 0003                  		clr.b	3(a6)
0008A55A 7630                       		moveq	#$30,d3
0008A55C 4BEE 0040                  		lea	$40(a6),a5
0008A560 7806                       		moveq	#6,d4
0008A562                            
0008A562                            loc_71EA0:
0008A562 0815 0007                  		btst	#7,(a5)
0008A566 6700                       		beq.s	loc_71EB8
0008A568 0815 0002                  		btst	#2,(a5)
0008A56C 6600                       		bne.s	loc_71EB8
0008A56E 103C 00B4                  		move.b	#-$4C,d0
0008A572 122D 000A                  		move.b	$A(a5),d1
0008A576 4EBA 0000                  		jsr	sub_72722(pc)
0008A57A                            
0008A57A                            loc_71EB8:
0008A57A DAC3                       		adda.w	d3,a5
0008A57C 51CC FFE4                  		dbf	d4,loc_71EA0
0008A580                            
0008A580 4BEE 0220                  		lea	$220(a6),a5
0008A584 7802                       		moveq	#2,d4
0008A586                            
0008A586                            loc_71EC4:
0008A586 0815 0007                  		btst	#7,(a5)
0008A58A 6700                       		beq.s	loc_71EDC
0008A58C 0815 0002                  		btst	#2,(a5)
0008A590 6600                       		bne.s	loc_71EDC
0008A592 103C 00B4                  		move.b	#-$4C,d0
0008A596 122D 000A                  		move.b	$A(a5),d1
0008A59A 4EBA 0000                  		jsr	sub_72722(pc)
0008A59E                            
0008A59E                            loc_71EDC:
0008A59E DAC3                       		adda.w	d3,a5
0008A5A0 51CC FFE4                  		dbf	d4,loc_71EC4
0008A5A4                            
0008A5A4 4BEE 0340                  		lea	$340(a6),a5
0008A5A8 0815 0007                  		btst	#7,(a5)
0008A5AC 6700                       		beq.s	@UnpauseDAC
0008A5AE 0815 0002                  		btst	#2,(a5)
0008A5B2 6600                       		bne.s	@UnpauseDAC
0008A5B4 103C 00B4                  		move.b	#-$4C,d0
0008A5B8 122D 000A                  		move.b	$A(a5),d1
0008A5BC 4EBA 0000                  		jsr	sub_72722(pc)
0008A5C0                            
0008A5C0                            @UnpauseDAC:
0008A5C0 13FC 0000 00A0 1FFF        		move.b	#0,($A01FFF).l	; unpause DAC
0008A5C8                            
0008A5C8                            loc_71EFE:
0008A5C8 6000 FD26                  		bra.w	loc_71C44
0008A5CC                            
0008A5CC                            ; ---------------------------------------------------------------------------
0008A5CC                            ; Subroutine to	play a sound or	music track
0008A5CC                            ; ---------------------------------------------------------------------------
0008A5CC                            
0008A5CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A5CC                            
0008A5CC                            
0008A5CC                            Sound_Play:				; XREF: sub_71B4C
0008A5CC 2079 0008 A052             		movea.l	(Go_SoundTypes).l,a0
0008A5D2 43EE 000A                  		lea	$A(a6),a1	; load music track number
0008A5D6 1616                       		move.b	0(a6),d3
0008A5D8 7802                       		moveq	#2,d4
0008A5DA                            
0008A5DA                            loc_71F12:
0008A5DA 1011                       		move.b	(a1),d0		; move track number to d0
0008A5DC 1200                       		move.b	d0,d1
0008A5DE 4219                       		clr.b	(a1)+
0008A5E0 0400 0081                  		subi.b	#$81,d0
0008A5E4 6500                       		bcs.s	loc_71F3E
0008A5E6 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008A5EC 6700                       		beq.s	loc_71F2C
0008A5EE 1D41 000A                  		move.b	d1,$A(a6)
0008A5F2 6000                       		bra.s	loc_71F3E
0008A5F4                            ; ===========================================================================
0008A5F4                            
0008A5F4                            loc_71F2C:
0008A5F4 0240 007F                  		andi.w	#$7F,d0
0008A5F8 1430 0000                  		move.b	(a0,d0.w),d2
0008A5FC B403                       		cmp.b	d3,d2
0008A5FE 6500                       		bcs.s	loc_71F3E
0008A600 1602                       		move.b	d2,d3
0008A602 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008A606                            
0008A606                            loc_71F3E:
0008A606 51CC FFD2                  		dbf	d4,loc_71F12
0008A60A                            
0008A60A 4A03                       		tst.b	d3
0008A60C 6B00                       		bmi.s	locret_71F4A
0008A60E 1C83                       		move.b	d3,0(a6)
0008A610                            
0008A610                            locret_71F4A:
0008A610 4E75                       		rts	
0008A612                            ; End of function Sound_Play
0008A612                            
0008A612                            
0008A612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A612                            
0008A612                            
0008A612                            Sound_ChkValue:				; XREF: sub_71B4C
0008A612 7E00                       		moveq	#0,d7
0008A614 1E2E 0009                  		move.b	9(a6),d7
0008A618 6700 0000                  		beq.w	Sound_E4
0008A61C 6A00                       		bpl.s	locret_71F8C
0008A61E 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008A624 0C07 009F                  		cmpi.b	#$9F,d7
0008A628 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0008A62C 0C07 00A0                  		cmpi.b	#$A0,d7
0008A630 6500 0000                  		bcs.w	locret_71F8C
0008A634 0C07 00CF                  		cmpi.b	#$CF,d7
0008A638 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0008A63C 0C07 00D0                  		cmpi.b	#$D0,d7
0008A640 6500 0000                  		bcs.w	locret_71F8C
0008A644 0C07 00D1                  		cmpi.b	#$D1,d7
0008A648 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
0008A64C 0C07 00DF                  		cmpi.b	#$DF,d7
0008A650 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
0008A654 0C07 00E4                  		cmpi.b	#$E4,d7
0008A658 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0008A65A                            
0008A65A                            locret_71F8C:
0008A65A 4E75                       		rts	
0008A65C                            ; ===========================================================================
0008A65C                            
0008A65C                            Sound_E0toE4:				; XREF: Sound_ChkValue
0008A65C 0407 00E0                  		subi.b	#$E0,d7
0008A660 E54F                       		lsl.w	#2,d7
0008A662 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008A666                            ; ===========================================================================
0008A666                            
0008A666                            Sound_ExIndex:
0008A666 6000 0000                  		bra.w	Sound_E0
0008A66A                            ; ===========================================================================
0008A66A 6000 0000                  		bra.w	Sound_E1
0008A66E                            ; ===========================================================================
0008A66E 6000 0000                  		bra.w	Sound_E2
0008A672                            ; ===========================================================================
0008A672 6000 0000                  		bra.w	Sound_E3
0008A676                            ; ===========================================================================
0008A676 6000 0000                  		bra.w	Sound_E4
0008A67A                            ; ===========================================================================
0008A67A                            ; ---------------------------------------------------------------------------
0008A67A                            ; Play "Say-gaa" PCM sound
0008A67A                            ; ---------------------------------------------------------------------------
0008A67A                            
0008A67A                            Sound_E1:				  
0008A67A 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0008A680 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0008A686 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0008A68E                            PlayPCM_Loop:	  
0008A68E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0008A694 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0008A698 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0008A69C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0008A69E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0008A6A0 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0008A6A4 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0008A6AA 4EB8 10F0                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0008A6AE 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0008A6B4 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0008A6B6 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0008A6B8                            return_PlayPCM: 
0008A6B8 584F                       		addq.w	#4,sp 
0008A6BA 4E75                       		rts
0008A6BC                            
0008A6BC                            ; ===========================================================================
0008A6BC                            ; ---------------------------------------------------------------------------
0008A6BC                            ; Play music track $81-$9F
0008A6BC                            ; ---------------------------------------------------------------------------
0008A6BC                            
0008A6BC                            Sound_81to9F:				; XREF: Sound_ChkValue
0008A6BC 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008A6C0 6600                       		bne.s	loc_72024	; if not, branch
0008A6C2 4A2E 0027                  		tst.b	$27(a6)
0008A6C6 6600 0000                  		bne.w	loc_721B6
0008A6CA 4BEE 0040                  		lea	$40(a6),a5
0008A6CE 7009                       		moveq	#9,d0
0008A6D0                            
0008A6D0                            loc_71FE6:
0008A6D0 0895 0002                  		bclr	#2,(a5)
0008A6D4 DAFC 0030                  		adda.w	#$30,a5
0008A6D8 51C8 FFF6                  		dbf	d0,loc_71FE6
0008A6DC                            
0008A6DC 4BEE 0220                  		lea	$220(a6),a5
0008A6E0 7005                       		moveq	#5,d0
0008A6E2                            
0008A6E2                            loc_71FF8:
0008A6E2 0895 0007                  		bclr	#7,(a5)
0008A6E6 DAFC 0030                  		adda.w	#$30,a5
0008A6EA 51C8 FFF6                  		dbf	d0,loc_71FF8
0008A6EE 4216                       		clr.b	0(a6)
0008A6F0 204E                       		movea.l	a6,a0
0008A6F2 43EE 03A0                  		lea	$3A0(a6),a1
0008A6F6 303C 0087                  		move.w	#$87,d0
0008A6FA                            
0008A6FA                            loc_72012:
0008A6FA 22D8                       		move.l	(a0)+,(a1)+
0008A6FC 51C8 FFFC                  		dbf	d0,loc_72012
0008A700                            
0008A700 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008A706 4216                       		clr.b	0(a6)
0008A708 6000                       		bra.s	loc_7202C
0008A70A                            ; ===========================================================================
0008A70A                            
0008A70A                            loc_72024:
0008A70A 422E 0027                  		clr.b	$27(a6)
0008A70E 422E 0026                  		clr.b	$26(a6)
0008A712                            
0008A712                            loc_7202C:
0008A712 4EBA 0000                  		jsr	sub_725CA(pc)
0008A716 2879 0008 A062             		movea.l	(off_719A0).l,a4
0008A71C 0407 0081                  		subi.b	#$81,d7
0008A720 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0008A726 2879 0008 A05A             		movea.l	(Go_MusicIndex).l,a4
0008A72C E54F                       		lsl.w	#2,d7
0008A72E 2874 7000                  		movea.l	(a4,d7.w),a4
0008A732 7000                       		moveq	#0,d0
0008A734 3014                       		move.w	(a4),d0
0008A736 D08C                       		add.l	a4,d0
0008A738 2D40 0018                  		move.l	d0,$18(a6)
0008A73C 102C 0005                  		move.b	5(a4),d0
0008A740 1D40 0028                  		move.b	d0,$28(a6)
0008A744 4A2E 002A                  		tst.b	$2A(a6)
0008A748 6700                       		beq.s	loc_72068
0008A74A 102E 0029                  		move.b	$29(a6),d0
0008A74E                            
0008A74E                            loc_72068:
0008A74E 1D40 0002                  		move.b	d0,2(a6)
0008A752 1D40 0001                  		move.b	d0,1(a6)
0008A756 7200                       		moveq	#0,d1
0008A758 264C                       		movea.l	a4,a3
0008A75A 5C4C                       		addq.w	#6,a4
0008A75C 7E00                       		moveq	#0,d7
0008A75E 1E2B 0002                  		move.b	2(a3),d7
0008A762 6700 0000                  		beq.w	loc_72114
0008A766 5307                       		subq.b	#1,d7
0008A768 123C 00C0                  		move.b	#-$40,d1
0008A76C 182B 0004                  		move.b	4(a3),d4
0008A770 7C30                       		moveq	#$30,d6
0008A772 1A3C 0001                  		move.b	#1,d5
0008A776 43EE 0040                  		lea	$40(a6),a1
0008A77A 45FA 0000                  		lea	byte_721BA(pc),a2
0008A77E                            
0008A77E                            loc_72098:
0008A77E 08D1 0007                  		bset	#7,(a1)
0008A782 135A 0001                  		move.b	(a2)+,1(a1)
0008A786 1344 0002                  		move.b	d4,2(a1)
0008A78A 1346 000D                  		move.b	d6,$D(a1)
0008A78E 1341 000A                  		move.b	d1,$A(a1)
0008A792 1345 000E                  		move.b	d5,$E(a1)
0008A796 7000                       		moveq	#0,d0
0008A798 301C                       		move.w	(a4)+,d0
0008A79A D08B                       		add.l	a3,d0
0008A79C 2340 0004                  		move.l	d0,4(a1)
0008A7A0 335C 0008                  		move.w	(a4)+,8(a1)
0008A7A4 D2C6                       		adda.w	d6,a1
0008A7A6 51CF FFD6                  		dbf	d7,loc_72098
0008A7AA 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0008A7B0 6600                       		bne.s	loc_720D8
0008A7B2 702B                       		moveq	#$2B,d0
0008A7B4 7200                       		moveq	#0,d1
0008A7B6 4EBA 0000                  		jsr	sub_7272E(pc)
0008A7BA 6000 0000                  		bra.w	loc_72114
0008A7BE                            ; ===========================================================================
0008A7BE                            
0008A7BE                            loc_720D8:
0008A7BE 7028                       		moveq	#$28,d0
0008A7C0 7206                       		moveq	#6,d1
0008A7C2 4EBA 0000                  		jsr	sub_7272E(pc)
0008A7C6 103C 0042                  		move.b	#$42,d0
0008A7CA 727F                       		moveq	#$7F,d1
0008A7CC 4EBA 0000                  		jsr	sub_72764(pc)
0008A7D0 103C 004A                  		move.b	#$4A,d0
0008A7D4 727F                       		moveq	#$7F,d1
0008A7D6 4EBA 0000                  		jsr	sub_72764(pc)
0008A7DA 103C 0046                  		move.b	#$46,d0
0008A7DE 727F                       		moveq	#$7F,d1
0008A7E0 4EBA 0000                  		jsr	sub_72764(pc)
0008A7E4 103C 004E                  		move.b	#$4E,d0
0008A7E8 727F                       		moveq	#$7F,d1
0008A7EA 4EBA 0000                  		jsr	sub_72764(pc)
0008A7EE 103C 00B6                  		move.b	#-$4A,d0
0008A7F2 123C 00C0                  		move.b	#-$40,d1
0008A7F6 4EBA 0000                  		jsr	sub_72764(pc)
0008A7FA                            
0008A7FA                            loc_72114:
0008A7FA 7E00                       		moveq	#0,d7
0008A7FC 1E2B 0003                  		move.b	3(a3),d7
0008A800 6700                       		beq.s	loc_72154
0008A802 5307                       		subq.b	#1,d7
0008A804 43EE 0190                  		lea	$190(a6),a1
0008A808 45FA 0000                  		lea	byte_721C2(pc),a2
0008A80C                            
0008A80C                            loc_72126:
0008A80C 08D1 0007                  		bset	#7,(a1)
0008A810 135A 0001                  		move.b	(a2)+,1(a1)
0008A814 1344 0002                  		move.b	d4,2(a1)
0008A818 1346 000D                  		move.b	d6,$D(a1)
0008A81C 1345 000E                  		move.b	d5,$E(a1)
0008A820 7000                       		moveq	#0,d0
0008A822 301C                       		move.w	(a4)+,d0
0008A824 D08B                       		add.l	a3,d0
0008A826 2340 0004                  		move.l	d0,4(a1)
0008A82A 335C 0008                  		move.w	(a4)+,8(a1)
0008A82E 101C                       		move.b	(a4)+,d0
0008A830 135C 000B                  		move.b	(a4)+,$B(a1)
0008A834 D2C6                       		adda.w	d6,a1
0008A836 51CF FFD4                  		dbf	d7,loc_72126
0008A83A                            
0008A83A                            loc_72154:
0008A83A 43EE 0220                  		lea	$220(a6),a1
0008A83E 7E05                       		moveq	#5,d7
0008A840                            
0008A840                            loc_7215A:
0008A840 4A11                       		tst.b	(a1)
0008A842 6A00 0000                  		bpl.w	loc_7217C
0008A846 7000                       		moveq	#0,d0
0008A848 1029 0001                  		move.b	1(a1),d0
0008A84C 6B00                       		bmi.s	loc_7216E
0008A84E 5500                       		subq.b	#2,d0
0008A850 E508                       		lsl.b	#2,d0
0008A852 6000                       		bra.s	loc_72170
0008A854                            ; ===========================================================================
0008A854                            
0008A854                            loc_7216E:
0008A854 E608                       		lsr.b	#3,d0
0008A856                            
0008A856                            loc_72170:
0008A856 41FA 0000                  		lea	dword_722CC(pc),a0
0008A85A 2070 0000                  		movea.l	(a0,d0.w),a0
0008A85E 08D0 0002                  		bset	#2,(a0)
0008A862                            
0008A862                            loc_7217C:
0008A862 D2C6                       		adda.w	d6,a1
0008A864 51CF FFDA                  		dbf	d7,loc_7215A
0008A868                            
0008A868 4A6E 0340                  		tst.w	$340(a6)
0008A86C 6A00                       		bpl.s	loc_7218E
0008A86E 08EE 0002 0100             		bset	#2,$100(a6)
0008A874                            
0008A874                            loc_7218E:
0008A874 4A6E 0370                  		tst.w	$370(a6)
0008A878 6A00                       		bpl.s	loc_7219A
0008A87A 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008A880                            
0008A880                            loc_7219A:
0008A880 4BEE 0070                  		lea	$70(a6),a5
0008A884 7805                       		moveq	#5,d4
0008A886                            
0008A886                            loc_721A0:
0008A886 4EBA 0000                  		jsr	sub_726FE(pc)
0008A88A DAC6                       		adda.w	d6,a5
0008A88C 51CC FFF8                  		dbf	d4,loc_721A0
0008A890 7802                       		moveq	#2,d4
0008A892                            
0008A892                            loc_721AC:
0008A892 4EBA 0000                  		jsr	sub_729A0(pc)
0008A896 DAC6                       		adda.w	d6,a5
0008A898 51CC FFF8                  		dbf	d4,loc_721AC
0008A89C                            
0008A89C                            loc_721B6:
0008A89C 584F                       		addq.w	#4,sp
0008A89E 4E75                       		rts	
0008A8A0                            ; ===========================================================================
0008A8A0 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0008A8A8                            		even
0008A8A8 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008A8AC                            		even
0008A8AC                            ; ===========================================================================
0008A8AC                            ; ---------------------------------------------------------------------------
0008A8AC                            ; Play normal sound effect
0008A8AC                            ; ---------------------------------------------------------------------------
0008A8AC                            
0008A8AC                            Sound_D1toDF:
0008A8AC 4A2E 0027                  		tst.b	$27(a6)
0008A8B0 6600 0000                  		bne.w	loc_722C6
0008A8B4 4A2E 0004                  		tst.b	4(a6)
0008A8B8 6600 0000                  		bne.w	loc_722C6
0008A8BC 4A2E 0024                  		tst.b	$24(a6)
0008A8C0 6600 0000                  		bne.w	loc_722C6
0008A8C4 2079 0008 A05E             		movea.l	(Go_SoundIndex).l,a0
0008A8CA 0407 00A1                  		sub.b	#$A1,d7
0008A8CE 6000 0000                  		bra	SoundEffects_Common
0008A8D2                            
0008A8D2                            Sound_A0toCF:				; XREF: Sound_ChkValue
0008A8D2 4A2E 0027                  		tst.b	$27(a6)
0008A8D6 6600 0000                  		bne.w	loc_722C6
0008A8DA 4A2E 0004                  		tst.b	4(a6)
0008A8DE 6600 0000                  		bne.w	loc_722C6
0008A8E2 4A2E 0024                  		tst.b	$24(a6)
0008A8E6 6600 0000                  		bne.w	loc_722C6
0008A8EA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0008A8EE 6600                       		bne.s	Sound_notB5	; if not, branch
0008A8F0 4A2E 002B                  		tst.b	$2B(a6)
0008A8F4 6600                       		bne.s	loc_721EE
0008A8F6 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008A8FA                            
0008A8FA                            loc_721EE:
0008A8FA 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0008A900                            
0008A900                            Sound_notB5:
0008A900 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0008A904 6600                       		bne.s	Sound_notA7	; if not, branch
0008A906 4A2E 002C                  		tst.b	$2C(a6)
0008A90A 6600 0000                  		bne.w	locret_722C4
0008A90E 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0008A914                            
0008A914                            Sound_notA7:
0008A914 2079 0008 A05E             		movea.l	(Go_SoundIndex).l,a0
0008A91A 0407 00A0                  		subi.b	#$A0,d7
0008A91E                            
0008A91E                            SoundEffects_Common:
0008A91E E54F                       		lsl.w	#2,d7
0008A920 2670 7000                  		movea.l	(a0,d7.w),a3
0008A924 224B                       		movea.l	a3,a1
0008A926 7200                       		moveq	#0,d1
0008A928 3219                       		move.w	(a1)+,d1
0008A92A D28B                       		add.l	a3,d1
0008A92C 1A19                       		move.b	(a1)+,d5
0008A92E 1E19                       		move.b	(a1)+,d7
0008A930 5307                       		subq.b	#1,d7
0008A932 7C30                       		moveq	#$30,d6
0008A934                            
0008A934                            loc_72228:
0008A934 7600                       		moveq	#0,d3
0008A936 1629 0001                  		move.b	1(a1),d3
0008A93A 1803                       		move.b	d3,d4
0008A93C 6B00                       		bmi.s	loc_72244
0008A93E 5543                       		subq.w	#2,d3
0008A940 E54B                       		lsl.w	#2,d3
0008A942 4BFA 0000                  		lea	dword_722CC(pc),a5
0008A946 2A75 3000                  		movea.l	(a5,d3.w),a5
0008A94A 08D5 0002                  		bset	#2,(a5)
0008A94E 6000                       		bra.s	loc_7226E
0008A950                            ; ===========================================================================
0008A950                            
0008A950                            loc_72244:
0008A950 E64B                       		lsr.w	#3,d3
0008A952 4BFA 0000                  		lea	dword_722CC(pc),a5
0008A956 2A75 3000                  		movea.l	(a5,d3.w),a5
0008A95A 08D5 0002                  		bset	#2,(a5)
0008A95E 0C04 00C0                  		cmpi.b	#$C0,d4
0008A962 6600                       		bne.s	loc_7226E
0008A964 1004                       		move.b	d4,d0
0008A966 0000 001F                  		ori.b	#$1F,d0
0008A96A 13C0 00C0 0011             		move.b	d0,($C00011).l
0008A970 0840 0005                  		bchg	#5,d0
0008A974 13C0 00C0 0011             		move.b	d0,($C00011).l
0008A97A                            
0008A97A                            loc_7226E:
0008A97A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0008A97E 244D                       		movea.l	a5,a2
0008A980 700B                       		moveq	#$B,d0
0008A982                            
0008A982                            loc_72276:
0008A982 429A                       		clr.l	(a2)+
0008A984 51C8 FFFC                  		dbf	d0,loc_72276
0008A988                            
0008A988 3A99                       		move.w	(a1)+,(a5)
0008A98A 1B45 0002                  		move.b	d5,2(a5)
0008A98E 7000                       		moveq	#0,d0
0008A990 3019                       		move.w	(a1)+,d0
0008A992 D08B                       		add.l	a3,d0
0008A994 2B40 0004                  		move.l	d0,4(a5)
0008A998 3B59 0008                  		move.w	(a1)+,8(a5)
0008A99C 1B7C 0001 000E             		move.b	#1,$E(a5)
0008A9A2 1B46 000D                  		move.b	d6,$D(a5)
0008A9A6 4A04                       		tst.b	d4
0008A9A8 6B00                       		bmi.s	loc_722A8
0008A9AA 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008A9B0 2B41 0020                  		move.l	d1,$20(a5)
0008A9B4                            
0008A9B4                            loc_722A8:
0008A9B4 51CF FF7E                  		dbf	d7,loc_72228
0008A9B8                            
0008A9B8 4A2E 0250                  		tst.b	$250(a6)
0008A9BC 6A00                       		bpl.s	loc_722B8
0008A9BE 08EE 0002 0340             		bset	#2,$340(a6)
0008A9C4                            
0008A9C4                            loc_722B8:
0008A9C4 4A2E 0310                  		tst.b	$310(a6)
0008A9C8 6A00                       		bpl.s	locret_722C4
0008A9CA 08EE 0002 0370             		bset	#2,$370(a6)
0008A9D0                            
0008A9D0                            locret_722C4:
0008A9D0 4E75                       		rts	
0008A9D2                            ; ===========================================================================
0008A9D2                            
0008A9D2                            loc_722C6:
0008A9D2 4216                       		clr.b	0(a6)
0008A9D4 4E75                       		rts	
0008A9D6                            ; ===========================================================================
0008A9D6 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008A9DA 0000 0000                  		dc.l 0
0008A9DE 00FF F100                  		dc.l $FFF100
0008A9E2 00FF F130                  		dc.l $FFF130
0008A9E6 00FF F190                  		dc.l $FFF190
0008A9EA 00FF F1C0                  		dc.l $FFF1C0
0008A9EE 00FF F1F0                  		dc.l $FFF1F0
0008A9F2 00FF F1F0                  		dc.l $FFF1F0
0008A9F6 00FF F220                  dword_722EC:	dc.l $FFF220
0008A9FA 0000 0000                  		dc.l 0
0008A9FE 00FF F250                  		dc.l $FFF250
0008AA02 00FF F280                  		dc.l $FFF280
0008AA06 00FF F2B0                  		dc.l $FFF2B0
0008AA0A 00FF F2E0                  		dc.l $FFF2E0
0008AA0E 00FF F310                  		dc.l $FFF310
0008AA12 00FF F310                  		dc.l $FFF310
0008AA16                            ; ===========================================================================
0008AA16                            ; ---------------------------------------------------------------------------
0008AA16                            ; Play GHZ waterfall sound
0008AA16                            ; ---------------------------------------------------------------------------
0008AA16                            
0008AA16                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008AA16 4A2E 0027                  		tst.b	$27(a6)
0008AA1A 6600 0000                  		bne.w	locret_723C6
0008AA1E 4A2E 0004                  		tst.b	4(a6)
0008AA22 6600 0000                  		bne.w	locret_723C6
0008AA26 4A2E 0024                  		tst.b	$24(a6)
0008AA2A 6600 0000                  		bne.w	locret_723C6
0008AA2E 2079 0008 A056             		movea.l	(Go_SoundD0).l,a0
0008AA34 0407 00D0                  		subi.b	#$D0,d7
0008AA38 E54F                       		lsl.w	#2,d7
0008AA3A 2670 7000                  		movea.l	(a0,d7.w),a3
0008AA3E 224B                       		movea.l	a3,a1
0008AA40 7000                       		moveq	#0,d0
0008AA42 3019                       		move.w	(a1)+,d0
0008AA44 D08B                       		add.l	a3,d0
0008AA46 2D40 0020                  		move.l	d0,$20(a6)
0008AA4A 1A19                       		move.b	(a1)+,d5
0008AA4C 1E19                       		move.b	(a1)+,d7
0008AA4E 5307                       		subq.b	#1,d7
0008AA50 7C30                       		moveq	#$30,d6
0008AA52                            
0008AA52                            loc_72348:
0008AA52 1829 0001                  		move.b	1(a1),d4
0008AA56 6B00                       		bmi.s	loc_7235A
0008AA58 08EE 0002 0100             		bset	#2,$100(a6)
0008AA5E 4BEE 0340                  		lea	$340(a6),a5
0008AA62 6000                       		bra.s	loc_72364
0008AA64                            ; ===========================================================================
0008AA64                            
0008AA64                            loc_7235A:
0008AA64 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008AA6A 4BEE 0370                  		lea	$370(a6),a5
0008AA6E                            
0008AA6E                            loc_72364:
0008AA6E 244D                       		movea.l	a5,a2
0008AA70 700B                       		moveq	#$B,d0
0008AA72                            
0008AA72                            loc_72368:
0008AA72 429A                       		clr.l	(a2)+
0008AA74 51C8 FFFC                  		dbf	d0,loc_72368
0008AA78                            
0008AA78 3A99                       		move.w	(a1)+,(a5)
0008AA7A 1B45 0002                  		move.b	d5,2(a5)
0008AA7E 7000                       		moveq	#0,d0
0008AA80 3019                       		move.w	(a1)+,d0
0008AA82 D08B                       		add.l	a3,d0
0008AA84 2B40 0004                  		move.l	d0,4(a5)
0008AA88 3B59 0008                  		move.w	(a1)+,8(a5)
0008AA8C 1B7C 0001 000E             		move.b	#1,$E(a5)
0008AA92 1B46 000D                  		move.b	d6,$D(a5)
0008AA96 4A04                       		tst.b	d4
0008AA98 6B00                       		bmi.s	loc_72396
0008AA9A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008AAA0                            
0008AAA0                            loc_72396:
0008AAA0 51CF FFB0                  		dbf	d7,loc_72348
0008AAA4                            
0008AAA4 4A2E 0250                  		tst.b	$250(a6)
0008AAA8 6A00                       		bpl.s	loc_723A6
0008AAAA 08EE 0002 0340             		bset	#2,$340(a6)
0008AAB0                            
0008AAB0                            loc_723A6:
0008AAB0 4A2E 0310                  		tst.b	$310(a6)
0008AAB4 6A00                       		bpl.s	locret_723C6
0008AAB6 08EE 0002 0370             		bset	#2,$370(a6)
0008AABC 0004 001F                  		ori.b	#$1F,d4
0008AAC0 13C4 00C0 0011             		move.b	d4,($C00011).l
0008AAC6 0844 0005                  		bchg	#5,d4
0008AACA 13C4 00C0 0011             		move.b	d4,($C00011).l
0008AAD0                            
0008AAD0                            locret_723C6:
0008AAD0 4E75                       		rts	
0008AAD2                            ; End of function Sound_ChkValue
0008AAD2                            
0008AAD2                            ; ===========================================================================
0008AAD2 00FF F100                  		dc.l $FFF100
0008AAD6 00FF F1F0                  		dc.l $FFF1F0
0008AADA 00FF F250                  		dc.l $FFF250
0008AADE 00FF F310                  		dc.l $FFF310
0008AAE2 00FF F340                  		dc.l $FFF340
0008AAE6 00FF F370                  		dc.l $FFF370
0008AAEA                            
0008AAEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AAEA                            
0008AAEA                            
0008AAEA                            Snd_FadeOut1:				; XREF: Sound_E0
0008AAEA 4216                       		clr.b	0(a6)
0008AAEC 4BEE 0220                  		lea	$220(a6),a5
0008AAF0 7E05                       		moveq	#5,d7
0008AAF2                            
0008AAF2                            loc_723EA:
0008AAF2 4A15                       		tst.b	(a5)
0008AAF4 6A00 0000                  		bpl.w	loc_72472
0008AAF8 0895 0007                  		bclr	#7,(a5)
0008AAFC 7600                       		moveq	#0,d3
0008AAFE 162D 0001                  		move.b	1(a5),d3
0008AB02 6B00                       		bmi.s	loc_7243C
0008AB04 4EBA 0000                  		jsr	sub_726FE(pc)
0008AB08 0C03 0004                  		cmpi.b	#4,d3
0008AB0C 6600                       		bne.s	loc_72416
0008AB0E 4A2E 0340                  		tst.b	$340(a6)
0008AB12 6A00                       		bpl.s	loc_72416
0008AB14 4BEE 0340                  		lea	$340(a6),a5
0008AB18 226E 0020                  		movea.l	$20(a6),a1
0008AB1C 6000                       		bra.s	loc_72428
0008AB1E                            ; ===========================================================================
0008AB1E                            
0008AB1E                            loc_72416:
0008AB1E 5503                       		subq.b	#2,d3
0008AB20 E50B                       		lsl.b	#2,d3
0008AB22 41FA FEB2                  		lea	dword_722CC(pc),a0
0008AB26 264D                       		movea.l	a5,a3
0008AB28 2A70 3000                  		movea.l	(a0,d3.w),a5
0008AB2C 226E 0018                  		movea.l	$18(a6),a1
0008AB30                            
0008AB30                            loc_72428:
0008AB30 0895 0002                  		bclr	#2,(a5)
0008AB34 08D5 0001                  		bset	#1,(a5)
0008AB38 102D 000B                  		move.b	$B(a5),d0
0008AB3C 4EBA 0000                  		jsr	sub_72C4E(pc)
0008AB40 2A4B                       		movea.l	a3,a5
0008AB42 6000                       		bra.s	loc_72472
0008AB44                            ; ===========================================================================
0008AB44                            
0008AB44                            loc_7243C:
0008AB44 4EBA 0000                  		jsr	sub_729A0(pc)
0008AB48 41EE 0370                  		lea	$370(a6),a0
0008AB4C 0C03 00E0                  		cmpi.b	#$E0,d3
0008AB50 6700                       		beq.s	loc_7245A
0008AB52 0C03 00C0                  		cmpi.b	#$C0,d3
0008AB56 6700                       		beq.s	loc_7245A
0008AB58 E60B                       		lsr.b	#3,d3
0008AB5A 41FA FE7A                  		lea	dword_722CC(pc),a0
0008AB5E 2070 3000                  		movea.l	(a0,d3.w),a0
0008AB62                            
0008AB62                            loc_7245A:
0008AB62 0890 0002                  		bclr	#2,(a0)
0008AB66 08D0 0001                  		bset	#1,(a0)
0008AB6A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008AB70 6600                       		bne.s	loc_72472
0008AB72 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008AB7A                            
0008AB7A                            loc_72472:
0008AB7A DAFC 0030                  		adda.w	#$30,a5
0008AB7E 51CF FF72                  		dbf	d7,loc_723EA
0008AB82                            
0008AB82 4E75                       		rts	
0008AB84                            ; End of function Snd_FadeOut1
0008AB84                            
0008AB84                            
0008AB84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AB84                            
0008AB84                            
0008AB84                            Snd_FadeOut2:				; XREF: Sound_E0
0008AB84 4BEE 0340                  		lea	$340(a6),a5
0008AB88 4A15                       		tst.b	(a5)
0008AB8A 6A00                       		bpl.s	loc_724AE
0008AB8C 0895 0007                  		bclr	#7,(a5)
0008AB90 0815 0002                  		btst	#2,(a5)
0008AB94 6600                       		bne.s	loc_724AE
0008AB96 4EBA 0000                  		jsr	loc_7270A(pc)
0008AB9A 4BEE 0100                  		lea	$100(a6),a5
0008AB9E 0895 0002                  		bclr	#2,(a5)
0008ABA2 08D5 0001                  		bset	#1,(a5)
0008ABA6 4A15                       		tst.b	(a5)
0008ABA8 6A00                       		bpl.s	loc_724AE
0008ABAA 226E 0018                  		movea.l	$18(a6),a1
0008ABAE 102D 000B                  		move.b	$B(a5),d0
0008ABB2 4EBA 0000                  		jsr	sub_72C4E(pc)
0008ABB6                            
0008ABB6                            loc_724AE:
0008ABB6 4BEE 0370                  		lea	$370(a6),a5
0008ABBA 4A15                       		tst.b	(a5)
0008ABBC 6A00                       		bpl.s	locret_724E4
0008ABBE 0895 0007                  		bclr	#7,(a5)
0008ABC2 0815 0002                  		btst	#2,(a5)
0008ABC6 6600                       		bne.s	locret_724E4
0008ABC8 4EBA 0000                  		jsr	loc_729A6(pc)
0008ABCC 4BEE 01F0                  		lea	$1F0(a6),a5
0008ABD0 0895 0002                  		bclr	#2,(a5)
0008ABD4 08D5 0001                  		bset	#1,(a5)
0008ABD8 4A15                       		tst.b	(a5)
0008ABDA 6A00                       		bpl.s	locret_724E4
0008ABDC 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0008ABE2 6600                       		bne.s	locret_724E4
0008ABE4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0008ABEC                            
0008ABEC                            locret_724E4:
0008ABEC 4E75                       		rts	
0008ABEE                            ; End of function Snd_FadeOut2
0008ABEE                            
0008ABEE                            ; ===========================================================================
0008ABEE                            ; ---------------------------------------------------------------------------
0008ABEE                            ; Fade out music
0008ABEE                            ; ---------------------------------------------------------------------------
0008ABEE                            
0008ABEE                            Sound_E0:				; XREF: Sound_ExIndex
0008ABEE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0008ABF2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008ABF6 1D7C 0003 0006             		move.b	#3,6(a6)
0008ABFC 1D7C 0028 0004             		move.b	#$28,4(a6)
0008AC02 422E 0040                  		clr.b	$40(a6)
0008AC06 422E 002A                  		clr.b	$2A(a6)
0008AC0A 4E75                       		rts	
0008AC0C                            
0008AC0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AC0C                            
0008AC0C                            
0008AC0C                            sub_72504:				; XREF: sub_71B4C
0008AC0C 102E 0006                  		move.b	6(a6),d0
0008AC10 6700                       		beq.s	loc_72510
0008AC12 532E 0006                  		subq.b	#1,6(a6)
0008AC16 4E75                       		rts	
0008AC18                            ; ===========================================================================
0008AC18                            
0008AC18                            loc_72510:
0008AC18 532E 0004                  		subq.b	#1,4(a6)
0008AC1C 6700 0000                  		beq.w	Sound_E4
0008AC20 1D7C 0003 0006             		move.b	#3,6(a6)
0008AC26 4BEE 0070                  		lea	$70(a6),a5
0008AC2A 7E05                       		moveq	#5,d7
0008AC2C                            
0008AC2C                            loc_72524:
0008AC2C 4A15                       		tst.b	(a5)
0008AC2E 6A00                       		bpl.s	loc_72538
0008AC30 522D 0009                  		addq.b	#1,9(a5)
0008AC34 6A00                       		bpl.s	loc_72534
0008AC36 0895 0007                  		bclr	#7,(a5)
0008AC3A 6000                       		bra.s	loc_72538
0008AC3C                            ; ===========================================================================
0008AC3C                            
0008AC3C                            loc_72534:
0008AC3C 4EBA 0000                  		jsr	sub_72CB4(pc)
0008AC40                            
0008AC40                            loc_72538:
0008AC40 DAFC 0030                  		adda.w	#$30,a5
0008AC44 51CF FFE6                  		dbf	d7,loc_72524
0008AC48                            
0008AC48 7E02                       		moveq	#2,d7
0008AC4A                            
0008AC4A                            loc_72542:
0008AC4A 4A15                       		tst.b	(a5)
0008AC4C 6A00                       		bpl.s	loc_72560
0008AC4E 522D 0009                  		addq.b	#1,9(a5)
0008AC52 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0008AC58 6500                       		bcs.s	loc_72558
0008AC5A 0895 0007                  		bclr	#7,(a5)
0008AC5E 6000                       		bra.s	loc_72560
0008AC60                            ; ===========================================================================
0008AC60                            
0008AC60                            loc_72558:
0008AC60 1C2D 0009                  		move.b	9(a5),d6
0008AC64 4EBA 0000                  		jsr	sub_7296A(pc)
0008AC68                            
0008AC68                            loc_72560:
0008AC68 DAFC 0030                  		adda.w	#$30,a5
0008AC6C 51CF FFDC                  		dbf	d7,loc_72542
0008AC70                            
0008AC70 4E75                       		rts	
0008AC72                            ; End of function sub_72504
0008AC72                            
0008AC72                            
0008AC72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AC72                            
0008AC72                            
0008AC72                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0008AC72 7602                       		moveq	#2,d3
0008AC74 7028                       		moveq	#$28,d0
0008AC76                            
0008AC76                            loc_7256E:
0008AC76 1203                       		move.b	d3,d1
0008AC78 4EBA 0000                  		jsr	sub_7272E(pc)
0008AC7C 5801                       		addq.b	#4,d1
0008AC7E 4EBA 0000                  		jsr	sub_7272E(pc)
0008AC82 51CB FFF2                  		dbf	d3,loc_7256E
0008AC86                            
0008AC86 7040                       		moveq	#$40,d0
0008AC88 727F                       		moveq	#$7F,d1
0008AC8A 7802                       		moveq	#2,d4
0008AC8C                            
0008AC8C                            loc_72584:
0008AC8C 7603                       		moveq	#3,d3
0008AC8E                            
0008AC8E                            loc_72586:
0008AC8E 4EBA 0000                  		jsr	sub_7272E(pc)
0008AC92 4EBA 0000                  		jsr	sub_72764(pc)
0008AC96 5840                       		addq.w	#4,d0
0008AC98 51CB FFF4                  		dbf	d3,loc_72586
0008AC9C                            
0008AC9C 0400 000F                  		subi.b	#$F,d0
0008ACA0 51CC FFEA                  		dbf	d4,loc_72584
0008ACA4                            
0008ACA4 4E75                       		rts	
0008ACA6                            ; End of function sub_7256A
0008ACA6                            
0008ACA6                            ; ===========================================================================
0008ACA6                            ; ---------------------------------------------------------------------------
0008ACA6                            ; Stop music
0008ACA6                            ; ---------------------------------------------------------------------------
0008ACA6                            
0008ACA6                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0008ACA6 702B                       		moveq	#$2B,d0
0008ACA8 123C 0080                  		move.b	#$80,d1
0008ACAC 4EBA 0000                  		jsr	sub_7272E(pc)
0008ACB0 7027                       		moveq	#$27,d0
0008ACB2 7200                       		moveq	#0,d1
0008ACB4 4EBA 0000                  		jsr	sub_7272E(pc)
0008ACB8 204E                       		movea.l	a6,a0
0008ACBA 303C 00E3                  		move.w	#$E3,d0
0008ACBE                            
0008ACBE                            loc_725B6:
0008ACBE 4298                       		clr.l	(a0)+
0008ACC0 51C8 FFFC                  		dbf	d0,loc_725B6
0008ACC4                            
0008ACC4 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0008ACCA 4EBA FFA6                  		jsr	sub_7256A(pc)
0008ACCE 13FC 0080 00A0 1FFF        		move.b	#$80,($A01FFF).l ; stop DAC playback
0008ACD6 6000 0000                  		bra.w	sub_729B6
0008ACDA                            
0008ACDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008ACDA                            
0008ACDA                            
0008ACDA                            sub_725CA:				; XREF: Sound_ChkValue
0008ACDA 204E                       		movea.l	a6,a0
0008ACDC 1216                       		move.b	0(a6),d1
0008ACDE 142E 0027                  		move.b	$27(a6),d2
0008ACE2 162E 002A                  		move.b	$2A(a6),d3
0008ACE6 182E 0026                  		move.b	$26(a6),d4
0008ACEA 3A2E 000A                  		move.w	$A(a6),d5
0008ACEE 303C 0087                  		move.w	#$87,d0
0008ACF2                            
0008ACF2                            loc_725E4:
0008ACF2 4298                       		clr.l	(a0)+
0008ACF4 51C8 FFFC                  		dbf	d0,loc_725E4
0008ACF8                            
0008ACF8 1C81                       		move.b	d1,0(a6)
0008ACFA 1D42 0027                  		move.b	d2,$27(a6)
0008ACFE 1D43 002A                  		move.b	d3,$2A(a6)
0008AD02 1D44 0026                  		move.b	d4,$26(a6)
0008AD06 3D45 000A                  		move.w	d5,$A(a6)
0008AD0A 1D7C 0080 0009             		move.b	#$80,9(a6)
0008AD10 4EBA FF60                  		jsr	sub_7256A(pc)
0008AD14 6000 0000                  		bra.w	sub_729B6
0008AD18                            ; End of function sub_725CA
0008AD18                            
0008AD18                            
0008AD18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AD18                            
0008AD18                            
0008AD18                            sub_7260C:				; XREF: sub_71B4C
0008AD18 1D6E 0002 0001             		move.b	2(a6),1(a6)
0008AD1E 41EE 004E                  		lea	$4E(a6),a0
0008AD22 7030                       		moveq	#$30,d0
0008AD24 7209                       		moveq	#9,d1
0008AD26                            
0008AD26                            loc_7261A:
0008AD26 5210                       		addq.b	#1,(a0)
0008AD28 D0C0                       		adda.w	d0,a0
0008AD2A 51C9 FFFA                  		dbf	d1,loc_7261A
0008AD2E                            
0008AD2E 4E75                       		rts	
0008AD30                            ; End of function sub_7260C
0008AD30                            
0008AD30                            ; ===========================================================================
0008AD30                            ; ---------------------------------------------------------------------------
0008AD30                            ; Speed	up music
0008AD30                            ; ---------------------------------------------------------------------------
0008AD30                            
0008AD30                            Sound_E2:				; XREF: Sound_ExIndex
0008AD30 4A2E 0027                  		tst.b	$27(a6)
0008AD34 6600                       		bne.s	loc_7263E
0008AD36 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0008AD3C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0008AD42 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0008AD48 4E75                       		rts	
0008AD4A                            ; ===========================================================================
0008AD4A                            
0008AD4A                            loc_7263E:
0008AD4A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0008AD50 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0008AD56 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0008AD5C 4E75                       		rts	
0008AD5E                            ; ===========================================================================
0008AD5E                            ; ---------------------------------------------------------------------------
0008AD5E                            ; Change music back to normal speed
0008AD5E                            ; ---------------------------------------------------------------------------
0008AD5E                            
0008AD5E                            Sound_E3:				; XREF: Sound_ExIndex
0008AD5E 4A2E 0027                  		tst.b	$27(a6)
0008AD62 6600                       		bne.s	loc_7266A
0008AD64 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0008AD6A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0008AD70 422E 002A                  		clr.b	$2A(a6)
0008AD74 4E75                       		rts	
0008AD76                            ; ===========================================================================
0008AD76                            
0008AD76                            loc_7266A:
0008AD76 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0008AD7C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0008AD82 422E 03CA                  		clr.b	$3CA(a6)
0008AD86 4E75                       		rts	
0008AD88                            
0008AD88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AD88                            
0008AD88                            
0008AD88                            sub_7267C:				; XREF: sub_71B4C
0008AD88 4A2E 0025                  		tst.b	$25(a6)
0008AD8C 6700                       		beq.s	loc_72688
0008AD8E 532E 0025                  		subq.b	#1,$25(a6)
0008AD92 4E75                       		rts	
0008AD94                            ; ===========================================================================
0008AD94                            
0008AD94                            loc_72688:
0008AD94 4A2E 0026                  		tst.b	$26(a6)
0008AD98 6700                       		beq.s	loc_726D6
0008AD9A 532E 0026                  		subq.b	#1,$26(a6)
0008AD9E 1D7C 0002 0025             		move.b	#2,$25(a6)
0008ADA4 4BEE 0070                  		lea	$70(a6),a5
0008ADA8 7E05                       		moveq	#5,d7
0008ADAA                            
0008ADAA                            loc_7269E:
0008ADAA 4A15                       		tst.b	(a5)
0008ADAC 6A00                       		bpl.s	loc_726AA
0008ADAE 532D 0009                  		subq.b	#1,9(a5)
0008ADB2 4EBA 0000                  		jsr	sub_72CB4(pc)
0008ADB6                            
0008ADB6                            loc_726AA:
0008ADB6 DAFC 0030                  		adda.w	#$30,a5
0008ADBA 51CF FFEE                  		dbf	d7,loc_7269E
0008ADBE 7E02                       		moveq	#2,d7
0008ADC0                            
0008ADC0                            loc_726B4:
0008ADC0 4A15                       		tst.b	(a5)
0008ADC2 6A00                       		bpl.s	loc_726CC
0008ADC4 532D 0009                  		subq.b	#1,9(a5)
0008ADC8 1C2D 0009                  		move.b	9(a5),d6
0008ADCC 0C06 0010                  		cmpi.b	#$10,d6
0008ADD0 6500                       		bcs.s	loc_726C8
0008ADD2 7C0F                       		moveq	#$F,d6
0008ADD4                            
0008ADD4                            loc_726C8:
0008ADD4 4EBA 0000                  		jsr	sub_7296A(pc)
0008ADD8                            
0008ADD8                            loc_726CC:
0008ADD8 DAFC 0030                  		adda.w	#$30,a5
0008ADDC 51CF FFE2                  		dbf	d7,loc_726B4
0008ADE0 4E75                       		rts	
0008ADE2                            ; ===========================================================================
0008ADE2                            
0008ADE2                            loc_726D6:
0008ADE2 08AE 0002 0040             		bclr	#2,$40(a6)
0008ADE8 422E 0024                  		clr.b	$24(a6)
0008ADEC                            
0008ADEC 4A2E 0040                  		tst.b	$40(a6)					; is the DAC channel running?
0008ADF0 6A00                       		bpl.s	Resume_NoDAC				; if not, branch
0008ADF2                            
0008ADF2 70B6                       		moveq	#$FFFFFFB6,d0				; prepare FM channel 3/6 L/R/AMS/FMS address
0008ADF4 122E 004A                  		move.b	$4A(a6),d1				; load DAC channel's L/R/AMS/FMS value
0008ADF8 4EFA 0000                  		jmp	sub_72764(pc)				; write to FM 6
0008ADFC                            
0008ADFC                            Resume_NoDAC:
0008ADFC 4E75                       		rts
0008ADFE                            
0008ADFE                            ; ===========================================================================
0008ADFE                            
0008ADFE                            loc_726E2:				; XREF: sub_71CCA
0008ADFE 0815 0001                  		btst	#1,(a5)
0008AE02 6600                       		bne.s	locret_726FC
0008AE04 0815 0002                  		btst	#2,(a5)
0008AE08 6600                       		bne.s	locret_726FC
0008AE0A 7028                       		moveq	#$28,d0
0008AE0C 122D 0001                  		move.b	1(a5),d1
0008AE10 0001 00F0                  		ori.b	#-$10,d1
0008AE14 6000 0000                  		bra.w	sub_7272E
0008AE18                            ; ===========================================================================
0008AE18                            
0008AE18                            locret_726FC:
0008AE18 4E75                       		rts	
0008AE1A                            
0008AE1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE1A                            
0008AE1A                            
0008AE1A                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0008AE1A 0815 0004                  		btst	#4,(a5)
0008AE1E 6600                       		bne.s	locret_72714
0008AE20 0815 0002                  		btst	#2,(a5)
0008AE24 6600                       		bne.s	locret_72714
0008AE26                            
0008AE26                            loc_7270A:				; XREF: Snd_FadeOut2
0008AE26 7028                       		moveq	#$28,d0
0008AE28 122D 0001                  		move.b	1(a5),d1
0008AE2C 6000 0000                  		bra.w	sub_7272E
0008AE30                            ; ===========================================================================
0008AE30                            
0008AE30                            locret_72714:
0008AE30 4E75                       		rts	
0008AE32                            ; End of function sub_726FE
0008AE32                            
0008AE32                            ; ===========================================================================
0008AE32                            
0008AE32                            loc_72716:				; XREF: sub_72A5A
0008AE32 0815 0002                  		btst	#2,(a5)
0008AE36 6600                       		bne.s	locret_72720
0008AE38 6000 0000                  		bra.w	sub_72722
0008AE3C                            ; ===========================================================================
0008AE3C                            
0008AE3C                            locret_72720:
0008AE3C 4E75                       		rts	
0008AE3E                            
0008AE3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE3E                            
0008AE3E                            
0008AE3E                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008AE3E 082D 0002 0001             		btst	#2,1(a5)
0008AE44 6600                       		bne.s	loc_7275A
0008AE46 D02D 0001                  		add.b	1(a5),d0
0008AE4A                            ; End of function sub_72722
0008AE4A                            
0008AE4A                            
0008AE4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE4A                            
0008AE4A                            
0008AE4A                            sub_7272E:				; XREF: loc_71E6A
0008AE4A 1439 00A0 4000             		move.b	($A04000).l,d2
0008AE50 0802 0007                  		btst	#7,d2
0008AE54 66F4                       		bne.s	sub_7272E
0008AE56 13C0 00A0 4000             		move.b	d0,($A04000).l
0008AE5C 4E71                       		nop	
0008AE5E 4E71                       		nop	
0008AE60 4E71                       		nop	
0008AE62                            
0008AE62                            loc_72746:
0008AE62 1439 00A0 4000             		move.b	($A04000).l,d2
0008AE68 0802 0007                  		btst	#7,d2
0008AE6C 66F4                       		bne.s	loc_72746
0008AE6E                            
0008AE6E 13C1 00A0 4001             		move.b	d1,($A04001).l
0008AE74 4E75                       		rts	
0008AE76                            ; End of function sub_7272E
0008AE76                            
0008AE76                            ; ===========================================================================
0008AE76                            
0008AE76                            loc_7275A:				; XREF: sub_72722
0008AE76 142D 0001                  		move.b	1(a5),d2
0008AE7A 0882 0002                  		bclr	#2,d2
0008AE7E D002                       		add.b	d2,d0
0008AE80                            
0008AE80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE80                            
0008AE80                            
0008AE80                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0008AE80 1439 00A0 4000             		move.b	($A04000).l,d2
0008AE86 0802 0007                  		btst	#7,d2
0008AE8A 66F4                       		bne.s	sub_72764
0008AE8C 13C0 00A0 4002             		move.b	d0,($A04002).l
0008AE92 4E71                       		nop	
0008AE94 4E71                       		nop	
0008AE96 4E71                       		nop	
0008AE98                            
0008AE98                            loc_7277C:
0008AE98 1439 00A0 4000             		move.b	($A04000).l,d2
0008AE9E 0802 0007                  		btst	#7,d2
0008AEA2 66F4                       		bne.s	loc_7277C
0008AEA4                            
0008AEA4 13C1 00A0 4003             		move.b	d1,($A04003).l
0008AEAA 4E75                       		rts	
0008AEAC                            ; End of function sub_72764
0008AEAC                            
0008AEAC                            ; ===========================================================================
0008AEAC 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008AEBE 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008AED0 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008AEE0 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008AEF0 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008AF00 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008AF10 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008AF20 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008AF30 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0008AF40 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0008AF50 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0008AF60 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0008AF6C                            
0008AF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AF6C                            
0008AF6C                            
0008AF6C                            sub_72850:				; XREF: sub_71B4C
0008AF6C 532D 000E                  		subq.b	#1,$E(a5)
0008AF70 6600                       		bne.s	loc_72866
0008AF72 0895 0004                  		bclr	#4,(a5)
0008AF76 4EBA 0000                  		jsr	sub_72878(pc)
0008AF7A 4EBA 0000                  		jsr	sub_728DC(pc)
0008AF7E 6000 0000                  		bra.w	loc_7292E
0008AF82                            ; ===========================================================================
0008AF82                            
0008AF82                            loc_72866:
0008AF82 4EBA F4D4                  		jsr	sub_71D9E(pc)
0008AF86 4EBA 0000                  		jsr	sub_72926(pc)
0008AF8A 4EBA F4F4                  		jsr	sub_71DC6(pc)
0008AF8E 4EBA 0000                  		jsr	sub_728E2(pc)
0008AF92 4E75                       		rts	
0008AF94                            ; End of function sub_72850
0008AF94                            
0008AF94                            
0008AF94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AF94                            
0008AF94                            
0008AF94                            sub_72878:				; XREF: sub_72850
0008AF94 0895 0001                  		bclr	#1,(a5)
0008AF98 286D 0004                  		movea.l	4(a5),a4
0008AF9C                            
0008AF9C                            loc_72880:
0008AF9C 7A00                       		moveq	#0,d5
0008AF9E 1A1C                       		move.b	(a4)+,d5
0008AFA0 0C05 00E0                  		cmpi.b	#$E0,d5
0008AFA4 6500                       		bcs.s	loc_72890
0008AFA6 4EBA 0000                  		jsr	sub_72A5A(pc)
0008AFAA 60F0                       		bra.s	loc_72880
0008AFAC                            ; ===========================================================================
0008AFAC                            
0008AFAC                            loc_72890:
0008AFAC 4A05                       		tst.b	d5
0008AFAE 6A00                       		bpl.s	loc_728A4
0008AFB0 4EBA 0000                  		jsr	sub_728AC(pc)
0008AFB4 1A1C                       		move.b	(a4)+,d5
0008AFB6 4A05                       		tst.b	d5
0008AFB8 6A00                       		bpl.s	loc_728A4
0008AFBA 534C                       		subq.w	#1,a4
0008AFBC 6000 F45C                  		bra.w	sub_71D60
0008AFC0                            ; ===========================================================================
0008AFC0                            
0008AFC0                            loc_728A4:
0008AFC0 4EBA F438                  		jsr	sub_71D40(pc)
0008AFC4 6000 F454                  		bra.w	sub_71D60
0008AFC8                            ; End of function sub_72878
0008AFC8                            
0008AFC8                            
0008AFC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AFC8                            
0008AFC8                            
0008AFC8                            sub_728AC:				; XREF: sub_72878
0008AFC8 0405 0081                  		subi.b	#$81,d5
0008AFCC 6500                       		bcs.s	loc_728CA
0008AFCE DA2D 0008                  		add.b	8(a5),d5
0008AFD2 0245 007F                  		andi.w	#$7F,d5
0008AFD6 E34D                       		lsl.w	#1,d5
0008AFD8 41FA 0000                  		lea	word_729CE(pc),a0
0008AFDC 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008AFE2 6000 F436                  		bra.w	sub_71D60
0008AFE6                            ; ===========================================================================
0008AFE6                            
0008AFE6                            loc_728CA:
0008AFE6 08D5 0001                  		bset	#1,(a5)
0008AFEA 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008AFF0 4EBA F428                  		jsr	sub_71D60(pc)
0008AFF4 6000 0000                  		bra.w	sub_729A0
0008AFF8                            ; End of function sub_728AC
0008AFF8                            
0008AFF8                            
0008AFF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AFF8                            
0008AFF8                            
0008AFF8                            sub_728DC:				; XREF: sub_72850
0008AFF8 3C2D 0010                  		move.w	$10(a5),d6
0008AFFC 6B00                       		bmi.s	loc_72920
0008AFFE                            ; End of function sub_728DC
0008AFFE                            
0008AFFE                            
0008AFFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AFFE                            
0008AFFE                            
0008AFFE                            sub_728E2:				; XREF: sub_72850
0008AFFE 102D 001E                  		move.b	$1E(a5),d0
0008B002 4880                       		ext.w	d0
0008B004 DC40                       		add.w	d0,d6
0008B006 0815 0002                  		btst	#2,(a5)
0008B00A 6600                       		bne.s	locret_7291E
0008B00C 0815 0001                  		btst	#1,(a5)
0008B010 6600                       		bne.s	locret_7291E
0008B012 102D 0001                  		move.b	1(a5),d0
0008B016 0C00 00E0                  		cmpi.b	#$E0,d0
0008B01A 6600                       		bne.s	loc_72904
0008B01C 103C 00C0                  		move.b	#$C0,d0
0008B020                            
0008B020                            loc_72904:
0008B020 3206                       		move.w	d6,d1
0008B022 0201 000F                  		andi.b	#$F,d1
0008B026 8001                       		or.b	d1,d0
0008B028 E84E                       		lsr.w	#4,d6
0008B02A 0206 003F                  		andi.b	#$3F,d6
0008B02E 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B034 13C6 00C0 0011             		move.b	d6,($C00011).l
0008B03A                            
0008B03A                            locret_7291E:
0008B03A 4E75                       		rts	
0008B03C                            ; End of function sub_728E2
0008B03C                            
0008B03C                            ; ===========================================================================
0008B03C                            
0008B03C                            loc_72920:				; XREF: sub_728DC
0008B03C 08D5 0001                  		bset	#1,(a5)
0008B040 4E75                       		rts	
0008B042                            
0008B042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B042                            
0008B042                            
0008B042                            sub_72926:				; XREF: sub_72850
0008B042 4A2D 000B                  		tst.b	$B(a5)
0008B046 6700 0000                  		beq.w	locret_7298A
0008B04A                            
0008B04A                            loc_7292E:				; XREF: sub_72850
0008B04A 1C2D 0009                  		move.b	9(a5),d6
0008B04E 7000                       		moveq	#0,d0
0008B050 102D 000B                  		move.b	$B(a5),d0
0008B054 6700                       		beq.s	sub_7296A
0008B056 2079 0008 A066             		movea.l	(Go_PSGIndex).l,a0
0008B05C 5340                       		subq.w	#1,d0
0008B05E E548                       		lsl.w	#2,d0
0008B060 2070 0000                  		movea.l	(a0,d0.w),a0
0008B064 102D 000C                  		move.b	$C(a5),d0
0008B068 1030 0000                  		move.b	(a0,d0.w),d0
0008B06C 522D 000C                  		addq.b	#1,$C(a5)
0008B070 0800 0007                  		btst	#7,d0
0008B074 6700                       		beq.s	loc_72960
0008B076 0C00 0080                  		cmpi.b	#$80,d0
0008B07A 6700                       		beq.s	loc_7299A
0008B07C                            
0008B07C                            loc_72960:
0008B07C DC40                       		add.w	d0,d6
0008B07E 0C06 0010                  		cmpi.b	#$10,d6
0008B082 6500                       		bcs.s	sub_7296A
0008B084 7C0F                       		moveq	#$F,d6
0008B086                            ; End of function sub_72926
0008B086                            
0008B086                            
0008B086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B086                            
0008B086                            
0008B086                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0008B086 0815 0001                  		btst	#1,(a5)
0008B08A 6600                       		bne.s	locret_7298A
0008B08C 0815 0002                  		btst	#2,(a5)
0008B090 6600                       		bne.s	locret_7298A
0008B092 0815 0004                  		btst	#4,(a5)
0008B096 6600                       		bne.s	loc_7298C
0008B098                            
0008B098                            loc_7297C:
0008B098 8C2D 0001                  		or.b	1(a5),d6
0008B09C 0606 0010                  		addi.b	#$10,d6
0008B0A0 13C6 00C0 0011             		move.b	d6,($C00011).l
0008B0A6                            
0008B0A6                            locret_7298A:
0008B0A6 4E75                       		rts	
0008B0A8                            ; ===========================================================================
0008B0A8                            
0008B0A8                            loc_7298C:
0008B0A8 4A2D 0013                  		tst.b	$13(a5)
0008B0AC 67EA                       		beq.s	loc_7297C
0008B0AE 4A2D 0012                  		tst.b	$12(a5)
0008B0B2 66E4                       		bne.s	loc_7297C
0008B0B4 4E75                       		rts	
0008B0B6                            ; End of function sub_7296A
0008B0B6                            
0008B0B6                            ; ===========================================================================
0008B0B6                            
0008B0B6                            loc_7299A:				; XREF: sub_72926
0008B0B6 532D 000C                  		subq.b	#1,$C(a5)
0008B0BA 4E75                       		rts	
0008B0BC                            
0008B0BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B0BC                            
0008B0BC                            
0008B0BC                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0008B0BC 0815 0002                  		btst	#2,(a5)
0008B0C0 6600                       		bne.s	locret_729B4
0008B0C2                            
0008B0C2                            loc_729A6:				; XREF: Snd_FadeOut2
0008B0C2 102D 0001                  		move.b	1(a5),d0
0008B0C6 0000 001F                  		ori.b	#$1F,d0
0008B0CA 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B0D0                            
0008B0D0                            locret_729B4:
0008B0D0 4E75                       		rts	
0008B0D2                            ; End of function sub_729A0
0008B0D2                            
0008B0D2                            
0008B0D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B0D2                            
0008B0D2                            
0008B0D2                            sub_729B6:				; XREF: loc_71E7C
0008B0D2 41F9 00C0 0011             		lea	($C00011).l,a0
0008B0D8 10BC 009F                  		move.b	#$9F,(a0)
0008B0DC 10BC 00BF                  		move.b	#$BF,(a0)
0008B0E0 10BC 00DF                  		move.b	#$DF,(a0)
0008B0E4 10BC 00FF                  		move.b	#$FF,(a0)
0008B0E8 4E75                       		rts	
0008B0EA                            ; End of function sub_729B6
0008B0EA                            
0008B0EA                            ; ===========================================================================
0008B0EA 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0008B0FC 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008B10E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008B122 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0008B136 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0008B14A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0008B15E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0008B172 0011 0000                  		dc.w $11, 0
0008B176                            
0008B176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B176                            
0008B176                            
0008B176                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008B176 0445 00E0                  		subi.w	#$E0,d5
0008B17A E54D                       		lsl.w	#2,d5
0008B17C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008B180                            ; End of function sub_72A5A
0008B180                            
0008B180                            ; ===========================================================================
0008B180                            
0008B180                            loc_72A64:
0008B180 6000 0000                  		bra.w	loc_72ACC
0008B184                            ; ===========================================================================
0008B184 6000 0000                  		bra.w	loc_72AEC
0008B188                            ; ===========================================================================
0008B188 6000 0000                  		bra.w	loc_72AF2
0008B18C                            ; ===========================================================================
0008B18C 6000 0000                  		bra.w	loc_72AF8
0008B190                            ; ===========================================================================
0008B190 6000 0000                  		bra.w	loc_72B14
0008B194                            ; ===========================================================================
0008B194 6000 0000                  		bra.w	loc_72B9E
0008B198                            ; ===========================================================================
0008B198 6000 0000                  		bra.w	loc_72BA4
0008B19C                            ; ===========================================================================
0008B19C 6000 0000                  		bra.w	loc_72BAE
0008B1A0                            ; ===========================================================================
0008B1A0 6000 0000                  		bra.w	loc_72BB4
0008B1A4                            ; ===========================================================================
0008B1A4 6000 0000                  		bra.w	loc_72BBE
0008B1A8                            ; ===========================================================================
0008B1A8 6000 0000                  		bra.w	loc_72BC6
0008B1AC                            ; ===========================================================================
0008B1AC 6000 0000                  		bra.w	loc_72BD0
0008B1B0                            ; ===========================================================================
0008B1B0 6000 0000                  		bra.w	loc_72BE6
0008B1B4                            ; ===========================================================================
0008B1B4 6000 0000                  		bra.w	loc_72BEE
0008B1B8                            ; ===========================================================================
0008B1B8 6000 0000                  		bra.w	loc_72BF4
0008B1BC                            ; ===========================================================================
0008B1BC 6000 0000                  		bra.w	loc_72C26
0008B1C0                            ; ===========================================================================
0008B1C0 6000 0000                  		bra.w	loc_72D30
0008B1C4                            ; ===========================================================================
0008B1C4 6000 0000                  		bra.w	loc_72D52
0008B1C8                            ; ===========================================================================
0008B1C8 6000 0000                  		bra.w	loc_72D58
0008B1CC                            ; ===========================================================================
0008B1CC 6000 0000                  		bra.w	loc_72E06
0008B1D0                            ; ===========================================================================
0008B1D0 6000 0000                  		bra.w	loc_72E20
0008B1D4                            ; ===========================================================================
0008B1D4 6000 0000                  		bra.w	loc_72E26
0008B1D8                            ; ===========================================================================
0008B1D8 6000 0000                  		bra.w	loc_72E2C
0008B1DC                            ; ===========================================================================
0008B1DC 6000 0000                  		bra.w	loc_72E38
0008B1E0                            ; ===========================================================================
0008B1E0 6000 0000                  		bra.w	loc_72E52
0008B1E4                            ; ===========================================================================
0008B1E4 6000 0000                  		bra.w	loc_72E64
0008B1E8                            ; ===========================================================================
0008B1E8                            
0008B1E8                            loc_72ACC:				; XREF: loc_72A64
0008B1E8 121C                       		move.b	(a4)+,d1
0008B1EA 4A2D 0001                  		tst.b	1(a5)
0008B1EE 6B00                       		bmi.s	locret_72AEA
0008B1F0 102D 000A                  		move.b	$A(a5),d0
0008B1F4 0200 0037                  		andi.b	#$37,d0
0008B1F8 8200                       		or.b	d0,d1
0008B1FA 1B41 000A                  		move.b	d1,$A(a5)
0008B1FE 103C 00B4                  		move.b	#$B4,d0
0008B202 6000 FC2E                  		bra.w	loc_72716
0008B206                            ; ===========================================================================
0008B206                            
0008B206                            locret_72AEA:
0008B206 4E75                       		rts	
0008B208                            ; ===========================================================================
0008B208                            
0008B208                            loc_72AEC:				; XREF: loc_72A64
0008B208 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0008B20C 4E75                       		rts	
0008B20E                            ; ===========================================================================
0008B20E                            
0008B20E                            loc_72AF2:				; XREF: loc_72A64
0008B20E 1D5C 0007                  		move.b	(a4)+,7(a6)
0008B212 4E75                       		rts	
0008B214                            ; ===========================================================================
0008B214                            
0008B214                            loc_72AF8:				; XREF: loc_72A64
0008B214 7000                       		moveq	#0,d0
0008B216 102D 000D                  		move.b	$D(a5),d0
0008B21A 2875 0000                  		movea.l	(a5,d0.w),a4
0008B21E 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0008B226 544C                       		addq.w	#2,a4
0008B228 5800                       		addq.b	#4,d0
0008B22A 1B40 000D                  		move.b	d0,$D(a5)
0008B22E 4E75                       		rts	
0008B230                            ; ===========================================================================
0008B230                            
0008B230                            loc_72B14:				; XREF: loc_72A64
0008B230 204E                       		movea.l	a6,a0
0008B232 43EE 03A0                  		lea	$3A0(a6),a1
0008B236 303C 0087                  		move.w	#$87,d0
0008B23A                            
0008B23A                            loc_72B1E:
0008B23A 20D9                       		move.l	(a1)+,(a0)+
0008B23C 51C8 FFFC                  		dbf	d0,loc_72B1E
0008B240                            
0008B240 08EE 0002 0040             		bset	#2,$40(a6)
0008B246 264D                       		movea.l	a5,a3
0008B248 1C3C 0028                  		move.b	#$28,d6
0008B24C 9C2E 0026                  		sub.b	$26(a6),d6
0008B250 7E05                       		moveq	#5,d7
0008B252 4BEE 0070                  		lea	$70(a6),a5
0008B256                            
0008B256                            loc_72B3A:
0008B256 0815 0007                  		btst	#7,(a5)
0008B25A 6700                       		beq.s	loc_72B5C
0008B25C 08D5 0001                  		bset	#1,(a5)
0008B260 DD2D 0009                  		add.b	d6,9(a5)
0008B264 0815 0002                  		btst	#2,(a5)
0008B268 6600                       		bne.s	loc_72B5C
0008B26A 7000                       		moveq	#0,d0
0008B26C 102D 000B                  		move.b	$B(a5),d0
0008B270 226E 0018                  		movea.l	$18(a6),a1
0008B274 4EBA 0000                  		jsr	sub_72C4E(pc)
0008B278                            
0008B278                            loc_72B5C:
0008B278 DAFC 0030                  		adda.w	#$30,a5
0008B27C 51CF FFD8                  		dbf	d7,loc_72B3A
0008B280                            
0008B280 7E02                       		moveq	#2,d7
0008B282                            
0008B282                            loc_72B66:
0008B282 0815 0007                  		btst	#7,(a5)
0008B286 6700                       		beq.s	loc_72B78
0008B288 08D5 0001                  		bset	#1,(a5)
0008B28C 4EBA FE2E                  		jsr	sub_729A0(pc)
0008B290 DD2D 0009                  		add.b	d6,9(a5)
0008B294                            
0008B294                            loc_72B78:
0008B294 DAFC 0030                  		adda.w	#$30,a5
0008B298 51CF FFE8                  		dbf	d7,loc_72B66
0008B29C 2A4B                       		movea.l	a3,a5
0008B29E 4A2E 0040                  		tst.b	$40(a6)			; is the DAC channel running?
0008B2A2 6B00                       		bmi.s	Restore_NoFM6		; if it is, branch
0008B2A4                            
0008B2A4 702B                       		moveq	#$2B,d0			; DAC enable/disable register
0008B2A6 7200                       		moveq	#0,d1			; Disable DAC
0008B2A8 4EBA FBA0                  		jsr	sub_7272E(pc)
0008B2AC                            
0008B2AC                            Restore_NoFM6
0008B2AC 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008B2B2 1D7C 0028 0026             		move.b	#$28,$26(a6)
0008B2B8 422E 0027                  		clr.b	$27(a6)
0008B2BC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0008B2C4 504F                       		addq.w	#8,sp
0008B2C6 4E75                       		rts	
0008B2C8                            ; ===========================================================================
0008B2C8                            
0008B2C8                            loc_72B9E:				; XREF: loc_72A64
0008B2C8 1B5C 0002                  		move.b	(a4)+,2(a5)
0008B2CC 4E75                       		rts	
0008B2CE                            ; ===========================================================================
0008B2CE                            
0008B2CE                            loc_72BA4:				; XREF: loc_72A64
0008B2CE 101C                       		move.b	(a4)+,d0
0008B2D0 D12D 0009                  		add.b	d0,9(a5)
0008B2D4 6000 0000                  		bra.w	sub_72CB4
0008B2D8                            ; ===========================================================================
0008B2D8                            
0008B2D8                            loc_72BAE:				; XREF: loc_72A64
0008B2D8 08D5 0004                  		bset	#4,(a5)
0008B2DC 4E75                       		rts	
0008B2DE                            ; ===========================================================================
0008B2DE                            
0008B2DE                            loc_72BB4:				; XREF: loc_72A64
0008B2DE 1B54 0012                  		move.b	(a4),$12(a5)
0008B2E2 1B5C 0013                  		move.b	(a4)+,$13(a5)
0008B2E6 4E75                       		rts	
0008B2E8                            ; ===========================================================================
0008B2E8                            
0008B2E8                            loc_72BBE:				; XREF: loc_72A64
0008B2E8 101C                       		move.b	(a4)+,d0
0008B2EA D12D 0008                  		add.b	d0,8(a5)
0008B2EE 4E75                       		rts	
0008B2F0                            ; ===========================================================================
0008B2F0                            
0008B2F0                            loc_72BC6:				; XREF: loc_72A64
0008B2F0 1D54 0002                  		move.b	(a4),2(a6)
0008B2F4 1D5C 0001                  		move.b	(a4)+,1(a6)
0008B2F8 4E75                       		rts	
0008B2FA                            ; ===========================================================================
0008B2FA                            
0008B2FA                            loc_72BD0:				; XREF: loc_72A64
0008B2FA 41EE 0040                  		lea	$40(a6),a0
0008B2FE 101C                       		move.b	(a4)+,d0
0008B300 7230                       		moveq	#$30,d1
0008B302 7409                       		moveq	#9,d2
0008B304                            
0008B304                            loc_72BDA:
0008B304 1140 0002                  		move.b	d0,2(a0)
0008B308 D0C1                       		adda.w	d1,a0
0008B30A 51CA FFF8                  		dbf	d2,loc_72BDA
0008B30E                            
0008B30E 4E75                       		rts	
0008B310                            ; ===========================================================================
0008B310                            
0008B310                            loc_72BE6:				; XREF: loc_72A64
0008B310 101C                       		move.b	(a4)+,d0
0008B312 D12D 0009                  		add.b	d0,9(a5)
0008B316 4E75                       		rts	
0008B318                            ; ===========================================================================
0008B318                            
0008B318                            loc_72BEE:				; XREF: loc_72A64
0008B318 422E 002C                  		clr.b	$2C(a6)
0008B31C 4E75                       		rts	
0008B31E                            ; ===========================================================================
0008B31E                            
0008B31E                            loc_72BF4:				; XREF: loc_72A64
0008B31E 0895 0007                  		bclr	#7,(a5)
0008B322 0895 0004                  		bclr	#4,(a5)
0008B326 4EBA FAF2                  		jsr	sub_726FE(pc)
0008B32A 4A2E 0250                  		tst.b	$250(a6)
0008B32E 6B00                       		bmi.s	loc_72C22
0008B330 264D                       		movea.l	a5,a3
0008B332 4BEE 0100                  		lea	$100(a6),a5
0008B336 226E 0018                  		movea.l	$18(a6),a1
0008B33A 0895 0002                  		bclr	#2,(a5)
0008B33E 08D5 0001                  		bset	#1,(a5)
0008B342 102D 000B                  		move.b	$B(a5),d0
0008B346 4EBA 0000                  		jsr	sub_72C4E(pc)
0008B34A 2A4B                       		movea.l	a3,a5
0008B34C                            
0008B34C                            loc_72C22:
0008B34C 504F                       		addq.w	#8,sp
0008B34E 4E75                       		rts	
0008B350                            ; ===========================================================================
0008B350                            
0008B350                            loc_72C26:				; XREF: loc_72A64
0008B350 7000                       		moveq	#0,d0
0008B352 101C                       		move.b	(a4)+,d0
0008B354 1B40 000B                  		move.b	d0,$B(a5)
0008B358 0815 0002                  		btst	#2,(a5)
0008B35C 6600 0000                  		bne.w	locret_72CAA
0008B360 226E 0018                  		movea.l	$18(a6),a1
0008B364 4A2E 000E                  		tst.b	$E(a6)
0008B368 6700                       		beq.s	sub_72C4E
0008B36A 226D 0020                  		movea.l	$20(a5),a1
0008B36E 4A2E 000E                  		tst.b	$E(a6)
0008B372 6B00                       		bmi.s	sub_72C4E
0008B374 226E 0020                  		movea.l	$20(a6),a1
0008B378                            
0008B378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B378                            
0008B378                            
0008B378                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0008B378 5340                       		subq.w	#1,d0
0008B37A 6B00                       		bmi.s	loc_72C5C
0008B37C 323C 0019                  		move.w	#$19,d1
0008B380                            
0008B380                            loc_72C56:
0008B380 D2C1                       		adda.w	d1,a1
0008B382 51C8 FFFC                  		dbf	d0,loc_72C56
0008B386                            
0008B386                            loc_72C5C:
0008B386 1219                       		move.b	(a1)+,d1
0008B388 1B41 001F                  		move.b	d1,$1F(a5)
0008B38C 1801                       		move.b	d1,d4
0008B38E 103C 00B0                  		move.b	#$B0,d0
0008B392 4EBA FAAA                  		jsr	sub_72722(pc)
0008B396 45FA 0000                  		lea	byte_72D18(pc),a2
0008B39A 7613                       		moveq	#$13,d3
0008B39C                            
0008B39C                            loc_72C72:
0008B39C 101A                       		move.b	(a2)+,d0
0008B39E 1219                       		move.b	(a1)+,d1
0008B3A0 4EBA FA9C                  		jsr	sub_72722(pc)
0008B3A4 51CB FFF6                  		dbf	d3,loc_72C72
0008B3A8 7A03                       		moveq	#3,d5
0008B3AA 0244 0007                  		andi.w	#7,d4
0008B3AE 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0008B3B2 162D 0009                  		move.b	9(a5),d3
0008B3B6                            
0008B3B6                            loc_72C8C:
0008B3B6 101A                       		move.b	(a2)+,d0
0008B3B8 1219                       		move.b	(a1)+,d1
0008B3BA E20C                       		lsr.b	#1,d4
0008B3BC 6400                       		bcc.s	loc_72C96
0008B3BE D203                       		add.b	d3,d1
0008B3C0                            
0008B3C0                            loc_72C96:
0008B3C0 4EBA FA7C                  		jsr	sub_72722(pc)
0008B3C4 51CD FFF0                  		dbf	d5,loc_72C8C
0008B3C8 103C 00B4                  		move.b	#$B4,d0
0008B3CC 122D 000A                  		move.b	$A(a5),d1
0008B3D0 4EBA FA6C                  		jsr	sub_72722(pc)
0008B3D4                            
0008B3D4                            locret_72CAA:
0008B3D4 4E75                       		rts	
0008B3D6                            ; End of function sub_72C4E
0008B3D6                            
0008B3D6                            ; ===========================================================================
0008B3D6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008B3DE                            
0008B3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B3DE                            
0008B3DE                            
0008B3DE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008B3DE 0815 0002                  		btst	#2,(a5)
0008B3E2 6600                       		bne.s	locret_72D16
0008B3E4 7000                       		moveq	#0,d0
0008B3E6 102D 000B                  		move.b	$B(a5),d0
0008B3EA 226E 0018                  		movea.l	$18(a6),a1
0008B3EE 4A2E 000E                  		tst.b	$E(a6)
0008B3F2 6700                       		beq.s	loc_72CD8
0008B3F4 226E 0020                  		movea.l	$20(a6),a1
0008B3F8 4A2E 000E                  		tst.b	$E(a6)
0008B3FC 6B00                       		bmi.s	loc_72CD8
0008B3FE 226E 0020                  		movea.l	$20(a6),a1
0008B402                            
0008B402                            loc_72CD8:
0008B402 5340                       		subq.w	#1,d0
0008B404 6B00                       		bmi.s	loc_72CE6
0008B406 323C 0019                  		move.w	#$19,d1
0008B40A                            
0008B40A                            loc_72CE0:
0008B40A D2C1                       		adda.w	d1,a1
0008B40C 51C8 FFFC                  		dbf	d0,loc_72CE0
0008B410                            
0008B410                            loc_72CE6:
0008B410 D2FC 0015                  		adda.w	#$15,a1
0008B414 45FA 0000                  		lea	byte_72D2C(pc),a2
0008B418 102D 001F                  		move.b	$1F(a5),d0
0008B41C 0240 0007                  		andi.w	#7,d0
0008B420 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0008B424 162D 0009                  		move.b	9(a5),d3
0008B428 6B00                       		bmi.s	locret_72D16
0008B42A 7A03                       		moveq	#3,d5
0008B42C                            
0008B42C                            loc_72D02:
0008B42C 101A                       		move.b	(a2)+,d0
0008B42E 1219                       		move.b	(a1)+,d1
0008B430 E20C                       		lsr.b	#1,d4
0008B432 6400                       		bcc.s	loc_72D12
0008B434 D203                       		add.b	d3,d1
0008B436 6500                       		bcs.s	loc_72D12
0008B438 4EBA FA04                  		jsr	sub_72722(pc)
0008B43C                            
0008B43C                            loc_72D12:
0008B43C 51CD FFEE                  		dbf	d5,loc_72D02
0008B440                            
0008B440                            locret_72D16:
0008B440 4E75                       		rts	
0008B442                            ; End of function sub_72CB4
0008B442                            
0008B442                            ; ===========================================================================
0008B442 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0008B44C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0008B456 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0008B45A                            ; ===========================================================================
0008B45A                            
0008B45A                            loc_72D30:				; XREF: loc_72A64
0008B45A 08D5 0003                  		bset	#3,(a5)
0008B45E 2B4C 0014                  		move.l	a4,$14(a5)
0008B462 1B5C 0018                  		move.b	(a4)+,$18(a5)
0008B466 1B5C 0019                  		move.b	(a4)+,$19(a5)
0008B46A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0008B46E 101C                       		move.b	(a4)+,d0
0008B470 E208                       		lsr.b	#1,d0
0008B472 1B40 001B                  		move.b	d0,$1B(a5)
0008B476 426D 001C                  		clr.w	$1C(a5)
0008B47A 4E75                       		rts	
0008B47C                            ; ===========================================================================
0008B47C                            
0008B47C                            loc_72D52:				; XREF: loc_72A64
0008B47C 08D5 0003                  		bset	#3,(a5)
0008B480 4E75                       		rts	
0008B482                            ; ===========================================================================
0008B482                            
0008B482                            loc_72D58:				; XREF: loc_72A64
0008B482 0895 0007                  		bclr	#7,(a5)
0008B486 0895 0004                  		bclr	#4,(a5)
0008B48A 4A2D 0001                  		tst.b	1(a5)
0008B48E 6B00                       		bmi.s	loc_72D74
0008B490 4A2E 0008                  		tst.b	8(a6)
0008B494 6B00 0000                  		bmi.w	loc_72E02
0008B498 4EBA F980                  		jsr	sub_726FE(pc)
0008B49C 6000                       		bra.s	loc_72D78
0008B49E                            ; ===========================================================================
0008B49E                            
0008B49E                            loc_72D74:
0008B49E 4EBA FC1C                  		jsr	sub_729A0(pc)
0008B4A2                            
0008B4A2                            loc_72D78:
0008B4A2 4A2E 000E                  		tst.b	$E(a6)
0008B4A6 6A00 0000                  		bpl.w	loc_72E02
0008B4AA 4216                       		clr.b	0(a6)
0008B4AC 7000                       		moveq	#0,d0
0008B4AE 102D 0001                  		move.b	1(a5),d0
0008B4B2 6B00                       		bmi.s	loc_72DCC
0008B4B4 41FA F520                  		lea	dword_722CC(pc),a0
0008B4B8 264D                       		movea.l	a5,a3
0008B4BA 0C00 0004                  		cmpi.b	#4,d0
0008B4BE 6600                       		bne.s	loc_72DA8
0008B4C0 4A2E 0340                  		tst.b	$340(a6)
0008B4C4 6A00                       		bpl.s	loc_72DA8
0008B4C6 4BEE 0340                  		lea	$340(a6),a5
0008B4CA 226E 0020                  		movea.l	$20(a6),a1
0008B4CE 6000                       		bra.s	loc_72DB8
0008B4D0                            ; ===========================================================================
0008B4D0                            
0008B4D0                            loc_72DA8:
0008B4D0 5500                       		subq.b	#2,d0
0008B4D2 E508                       		lsl.b	#2,d0
0008B4D4 2A70 0000                  		movea.l	(a0,d0.w),a5
0008B4D8 4A15                       		tst.b	(a5)
0008B4DA 6A00                       		bpl.s	loc_72DC8
0008B4DC 226E 0018                  		movea.l	$18(a6),a1
0008B4E0                            
0008B4E0                            loc_72DB8:
0008B4E0 0895 0002                  		bclr	#2,(a5)
0008B4E4 08D5 0001                  		bset	#1,(a5)
0008B4E8 102D 000B                  		move.b	$B(a5),d0
0008B4EC 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008B4F0                            
0008B4F0                            loc_72DC8:
0008B4F0 2A4B                       		movea.l	a3,a5
0008B4F2 6000                       		bra.s	loc_72E02
0008B4F4                            ; ===========================================================================
0008B4F4                            
0008B4F4                            loc_72DCC:
0008B4F4 41EE 0370                  		lea	$370(a6),a0
0008B4F8 4A10                       		tst.b	(a0)
0008B4FA 6A00                       		bpl.s	loc_72DE0
0008B4FC 0C00 00E0                  		cmpi.b	#$E0,d0
0008B500 6700                       		beq.s	loc_72DEA
0008B502 0C00 00C0                  		cmpi.b	#$C0,d0
0008B506 6700                       		beq.s	loc_72DEA
0008B508                            
0008B508                            loc_72DE0:
0008B508 41FA F4CC                  		lea	dword_722CC(pc),a0
0008B50C E608                       		lsr.b	#3,d0
0008B50E 2070 0000                  		movea.l	(a0,d0.w),a0
0008B512                            
0008B512                            loc_72DEA:
0008B512 0890 0002                  		bclr	#2,(a0)
0008B516 08D0 0001                  		bset	#1,(a0)
0008B51A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008B520 6600                       		bne.s	loc_72E02
0008B522 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008B52A                            
0008B52A                            loc_72E02:
0008B52A 504F                       		addq.w	#8,sp
0008B52C 4E75                       		rts	
0008B52E                            ; ===========================================================================
0008B52E                            
0008B52E                            loc_72E06:				; XREF: loc_72A64
0008B52E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0008B534 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0008B538 0815 0002                  		btst	#2,(a5)
0008B53C 6600                       		bne.s	locret_72E1E
0008B53E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0008B546                            
0008B546                            locret_72E1E:
0008B546 4E75                       		rts	
0008B548                            ; ===========================================================================
0008B548                            
0008B548                            loc_72E20:				; XREF: loc_72A64
0008B548 0895 0003                  		bclr	#3,(a5)
0008B54C 4E75                       		rts	
0008B54E                            ; ===========================================================================
0008B54E                            
0008B54E                            loc_72E26:				; XREF: loc_72A64
0008B54E 1B5C 000B                  		move.b	(a4)+,$B(a5)
0008B552 4E75                       		rts	
0008B554                            ; ===========================================================================
0008B554                            
0008B554                            loc_72E2C:				; XREF: loc_72A64
0008B554 101C                       		move.b	(a4)+,d0
0008B556 E148                       		lsl.w	#8,d0
0008B558 101C                       		move.b	(a4)+,d0
0008B55A D8C0                       		adda.w	d0,a4
0008B55C 534C                       		subq.w	#1,a4
0008B55E 4E75                       		rts	
0008B560                            ; ===========================================================================
0008B560                            
0008B560                            loc_72E38:				; XREF: loc_72A64
0008B560 7000                       		moveq	#0,d0
0008B562 101C                       		move.b	(a4)+,d0
0008B564 121C                       		move.b	(a4)+,d1
0008B566 4A35 0024                  		tst.b	$24(a5,d0.w)
0008B56A 6600                       		bne.s	loc_72E48
0008B56C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0008B570                            
0008B570                            loc_72E48:
0008B570 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0008B574 66DE                       		bne.s	loc_72E2C
0008B576 544C                       		addq.w	#2,a4
0008B578 4E75                       		rts	
0008B57A                            ; ===========================================================================
0008B57A                            
0008B57A                            loc_72E52:				; XREF: loc_72A64
0008B57A 7000                       		moveq	#0,d0
0008B57C 102D 000D                  		move.b	$D(a5),d0
0008B580 5900                       		subq.b	#4,d0
0008B582 2B8C 0000                  		move.l	a4,(a5,d0.w)
0008B586 1B40 000D                  		move.b	d0,$D(a5)
0008B58A 60C8                       		bra.s	loc_72E2C
0008B58C                            ; ===========================================================================
0008B58C                            
0008B58C                            loc_72E64:				; XREF: loc_72A64
0008B58C 103C 0088                  		move.b	#$88,d0
0008B590 123C 000F                  		move.b	#$F,d1
0008B594 4EBA F8B4                  		jsr	sub_7272E(pc)
0008B598 103C 008C                  		move.b	#$8C,d0
0008B59C 123C 000F                  		move.b	#$F,d1
0008B5A0 6000 F8A8                  		bra.w	sub_7272E
0008B5A4                            ; ===========================================================================
0008B5A4                            Kos_Z80:	include    'MegaPCM.asm'
0008B5A4                            
0008B5A4                            ; ===============================================================
0008B5A4                            ; Mega PCM Driver Include File
0008B5A4                            ; (c) 2012, Vladikcomper
0008B5A4                            ; ===============================================================
0008B5A4                            
0008B5A4                            ; ---------------------------------------------------------------
0008B5A4                            ; Variables used in DAC table
0008B5A4                            ; ---------------------------------------------------------------
0008B5A4                            
0008B5A4                            ; flags
0008B5A4 =000000C0                  panLR	= $C0
0008B5A4 =00000080                  panL	= $80
0008B5A4 =00000040                  panR	= $40
0008B5A4 =00000000                  pcm	= 0
0008B5A4 =00000004                  dpcm	= 4
0008B5A4 =00000002                  loop	= 2
0008B5A4 =00000001                  pri	= 1
0008B5A4                            
0008B5A4                            ; ---------------------------------------------------------------
0008B5A4                            ; Macros
0008B5A4                            ; ---------------------------------------------------------------
0008B5A4                            
0008B5A4                            z80word macro Value
0008B5A4                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
0008B5A4                            	endm
0008B5A4                            
0008B5A4                            DAC_Entry macro Pitch,Offset,Flags
0008B5A4                            	dc.b	\Flags			; 00h	- Flags
0008B5A4                            	dc.b	\Pitch			; 01h	- Pitch
0008B5A4                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
0008B5A4                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
0008B5A4                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
0008B5A4                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
0008B5A4                            	endm
0008B5A4                            	
0008B5A4                            IncludeDAC macro Name,Extension
0008B5A4                            \Name:
0008B5A4                            	if strcmp('\extension','wav')
0008B5A4                            		incbin	'dac/\Name\.\Extension\',$3A
0008B5A4                            	else
0008B5A4                            		incbin	'dac/\Name\.\Extension\'
0008B5A4                            	endc
0008B5A4                            \Name\_End:
0008B5A4                            	endm
0008B5A4                            
0008B5A4                            ; ---------------------------------------------------------------
0008B5A4                            ; Driver's code
0008B5A4                            ; ---------------------------------------------------------------
0008B5A4                            
0008B5A4                            MegaPCM:
0008B5A4                            	incbin	'MegaPCM.z80'
0008B7B4                            
0008B7B4                            ; ---------------------------------------------------------------
0008B7B4                            ; DAC Samples Table
0008B7B4                            ; ---------------------------------------------------------------
0008B7B4                            
0008B7B4 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
0008B7BC 0408 0000 0000 0000        	DAC_Entry	$08, Snare, dpcm		; $82	- Snare
0008B7C4 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
0008B7CC 0000 0000 0000 0000        	dc.l	0,0					; $84	- <Free>
0008B7D4 0000 0000 0000 0000        	dc.l	0,0					; $85	- <Free>
0008B7DC 0000 0000 0000 0000        	dc.l	0,0					; $86	- <Free>
0008B7E4 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
0008B7EC 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
0008B7F4 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
0008B7FC 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
0008B804 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
0008B80C                            
0008B80C                            MegaPCM_End:
0008B80C                            
0008B80C                            ; ---------------------------------------------------------------
0008B80C                            ; DAC Samples Files
0008B80C                            ; ---------------------------------------------------------------
0008B80C                            
0008CE0E                            	even
0008CE0E                            
0008CE0E                            
0008CE0E                            
0008CE0E                            Music81:	incbin	"sound\Mind In The Gutter I.bin"
0008E1BC                            		even
0008E1BC                            Music82:	incbin	sound\music82.bin
0008E60C                            		even
0008E60C                            Music83:	incbin	"sound\Tutorial With Attitude.bin"
0008F130 00                         		even
0008F130                            Music84:	incbin	sound\music84.bin
0008F59E                            		even
0008F59E                            Music85:	incbin	sound\music85.bin
0008F9EA                            		even
0008F9EA                            Music86:	incbin	sound\music86.bin
0008FF3A                            		even
0008FF3A                            Music87:	incbin	sound\Jeopardyinv.bin
00090414                            		even
00090414                            Music88:	incbin	sound\music88.bin
00090502                            		even
00090502                            Music89:	incbin	sound\music89.bin
0009082E                            		even
0009082E                            Music8A:	incbin	sound\Jeopardy.bin
00090D36 00                         		even
00090D36                            Music8B:	incbin	sound\music8B.bin
00090FD0                            		even
00090FD0                            Music8C:	incbin	sound\music8C.bin
00091B82 00                         		even
00091B82                            Music8D:	incbin	sound\music8D.bin
00091D9E                            		even
00091D9E                            Music8E:	incbin	sound\music8E.bin
00091EF4                            		even
00091EF4                            Music8F:	incbin	sound\music8F.bin
000923FE 00                         		even
000923FE                            Music90:	incbin	sound\music90.bin
0009255C                            		even
0009255C                            Music91:	incbin	sound\music91.bin
0009382A                            		even
0009382A                            Music92:	incbin	sound\music92.bin
00093954                            		even
00093954                            Music93:	incbin	sound\music93.bin
00093A22                            		even
00093A22                            Music94:	incbin	"#Owarisoft\owarisoft logo Sound.bin"
00093B60                            		even
00093B60                            Music95:	incbin	sound\SpeedShoes.bin
00093D46                            		even
00093D46                            Music96:	incbin	sound\SpeedShoesInv.bin
00093F2C                            		even
00093F2C                            Music97:	incbin	"sound\Mind In The Gutter II.bin"
00094E56                            		even
00094E56                            		
00094E56                            ; ---------------------------------------------------------------------------
00094E56                            ; Sound	effect pointers
00094E56                            ; ---------------------------------------------------------------------------
00094E56 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00094E62 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00094E6E 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00094E7A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00094E86 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00094E92 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00094E9E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00094EAA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00094EB6 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00094EC2 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00094ECE 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00094EDA 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00094EE6 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00094EF2 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00094EFE 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00094F0A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00094F16 0000 0000                  SoundD0Index:	dc.l SoundD0
00094F1A                            SoundA0:	incbin	sound\soundA0.bin
00094F30                            		even
00094F30                            SoundA1:	incbin	sound\soundA1.bin
00094F5A                            		even
00094F5A                            SoundA2:	incbin	sound\soundA2.bin
00094F7A                            		even
00094F7A                            SoundA3:	incbin	sound\soundA3.bin
00094FAC                            		even
00094FAC                            SoundA4:	incbin	sound\soundA4.bin
00094FE2                            		even
00094FE2                            SoundA5:	incbin	sound\soundA5.bin
0009500E                            		even
0009500E                            SoundA6:	incbin	sound\soundA6.bin
0009503E                            		even
0009503E                            SoundA7:	incbin	sound\soundA7.bin
0009506E                            		even
0009506E                            SoundA8:	incbin	sound\soundA8.bin
000950A2                            		even
000950A2                            SoundA9:	incbin	sound\soundA9.bin
000950B4                            		even
000950B4                            SoundAA:	incbin	sound\soundAA.bin
000950F6                            		even
000950F6                            SoundAB:	incbin	sound\soundAB.bin
00095116                            		even
00095116                            SoundAC:	incbin	sound\soundAC.bin
0009514A                            		even
0009514A                            SoundAD:	incbin	sound\soundAD.bin
00095180                            		even
00095180                            SoundAE:	incbin	sound\soundAE.bin
000951CA                            		even
000951CA                            SoundAF:	incbin	sound\soundAF.bin
000951F8                            		even
000951F8                            SoundB0:	incbin	sound\soundB0.bin
0009522A                            		even
0009522A                            SoundB1:	incbin	sound\soundB1.bin
00095256                            		even
00095256                            SoundB2:	incbin	sound\soundB2.bin
000952A6                            		even
000952A6                            SoundB3:	incbin	sound\soundB3.bin
000952F0                            		even
000952F0                            SoundB4:	incbin	sound\soundB4.bin
0009534C                            		even
0009534C                            SoundB5:	incbin	sound\soundB5.bin
0009537A                            		even
0009537A                            SoundB6:	incbin	sound\soundB6.bin
00095398                            		even
00095398                            SoundB7:	incbin	sound\soundB7.bin
000953D4                            		even
000953D4                            SoundB8:	incbin	sound\soundB8.bin
000953F2                            		even
000953F2                            SoundB9:	incbin	sound\soundB9.bin
00095456                            		even
00095456                            SoundBA:	incbin	sound\soundBA.bin
0009547E                            		even
0009547E                            SoundBB:	incbin	sound\soundBB.bin
000954AA                            		even
000954AA                            SoundBC:	incbin	sound\soundBC.bin
000954EC                            		even
000954EC                            SoundBD:	incbin	sound\soundBD.bin
00095540                            		even
00095540                            SoundBE:	incbin	sound\soundBE.bin
0009557A                            		even
0009557A                            SoundBF:	incbin	sound\soundBF.bin
000955EC                            		even
000955EC                            SoundC0:	incbin	sound\soundC0.bin
0009561A                            		even
0009561A                            SoundC1:	incbin	sound\soundC1.bin
00095654                            		even
00095654                            SoundC2:	incbin	sound\soundC2.bin
0009567E                            		even
0009567E                            SoundC3:	incbin	sound\soundC3.bin
000956F8                            		even
000956F8                            SoundC4:	incbin	sound\soundC4.bin
00095720                            		even
00095720                            SoundC5:	incbin	sound\soundC5.bin
00095788                            		even
00095788                            SoundC6:	incbin	sound\soundC6.bin
000957CA                            		even
000957CA                            SoundC7:	incbin	sound\soundC7.bin
000957F8                            		even
000957F8                            SoundC8:	incbin	sound\soundC8.bin
0009580A                            		even
0009580A                            SoundC9:	incbin	sound\soundC9.bin
00095838                            		even
00095838                            SoundCA:	incbin	sound\soundCA.bin
00095866                            		even
00095866                            SoundCB:	incbin	sound\soundCB.bin
000958B2                            		even
000958B2                            SoundCC:	incbin	sound\soundCC.bin
000958EC                            		even
000958EC                            SoundCD:	incbin	sound\soundCD.bin
000958FA                            		even
000958FA                            SoundCE:	incbin	sound\soundCE.bin
00095928                            		even
00095928                            SoundCF:	incbin	sound\soundCF.bin
00095960                            		even
00095960                            SoundD0:	incbin	sound\soundD0.bin
0009599A                            		even
0009599A                            SegaPCM:	incbin	sound\segapcm.bin
0009C312                            SegaPCM_End	even
0009C312                            ; ===========================================================================
0009C312                            Art_Dust	incbin	artunc\spindust.bin
0009DC52                            ; ===========================================================================
0009DC52                            
0009DC52                            LoadDPLC:
0009DC52 7000                       		moveq	#0,d0
0009DC54 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0009DC58 D040                       		add.w	d0,d0
0009DC5A D4F2 0000                  		adda.w	(a2,d0.w),a2
0009DC5E 7A00                       		moveq	#0,d5
0009DC60 1A1A                       		move.b	(a2)+,d5
0009DC62 5345                       		subq.w	#1,d5
0009DC64 6B00                       		bmi.s	DPLC_End
0009DC66                            
0009DC66                            DPLC_ReadEntry:
0009DC66 7200                       		moveq	#0,d1
0009DC68 121A                       		move.b	(a2)+,d1
0009DC6A E149                       		lsl.w	#8,d1
0009DC6C 121A                       		move.b	(a2)+,d1
0009DC6E 3601                       		move.w	d1,d3
0009DC70 E04B                       		lsr.w	#8,d3
0009DC72 0243 00F0                  		andi.w	#$F0,d3
0009DC76 0643 0010                  		addi.w	#$10,d3
0009DC7A 0241 0FFF                  		andi.w	#$FFF,d1
0009DC7E EB89                       		lsl.l	#5,d1
0009DC80 D286                       		add.l	d6,d1
0009DC82 3404                       		move.w	d4,d2
0009DC84 D843                       		add.w	d3,d4
0009DC86 D843                       		add.w	d3,d4
0009DC88 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
0009DC8E 51CD FFD6                  		dbf	d5,DPLC_ReadEntry	; repeat for number of entries
0009DC92                            
0009DC92                            DPLC_End:
0009DC92 4E75                       		rts	
0009DC94                            ; End of function LoadSonicDynPLC
0009DC94                            
0009DC94                            ; ===========================================================================
0009DC94                            
0009DC94                            	include "#Owarisoft/main.asm"
0009DC94                            ; ===========================================================================
0009DC94                            owsf_txPal:	EQUR a6
0009DC94                            owsf_VDP:	EQUR a5
0009DC94                            
0009DC94                            owsf_PalOff:	EQUR d7
0009DC94                            owsf_Timer:	EQUR d6
0009DC94                            owsf_Fades:	EQUR d4
0009DC94                            
0009DC94 =00000001                  owsf_TimerDef:	EQU 2-1
0009DC94 =00000001                  owsf_FadeDef:	EQU 2-1
0009DC94 =00000001                  owsf_url:	EQU 1	; if set to 0, Owarisoft url will not be shown
0009DC94                            ; ===========================================================================
0009DC94 =00C00000                  VDP_Data_Port		equ $C00000
0009DC94 =00C00004                  VDP_Control_Port	equ $C00004
0009DC94 =00C00008                  VDP_Counter		equ $C00008
0009DC94                            
0009DC94                            ; ===========================================================================
0009DC94                            owsf_dma68kToVDP macro source,dest,length,type
0009DC94                            	move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(owsf_VDP)
0009DC94                            	move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(owsf_VDP)
0009DC94                            	move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(owsf_VDP)
0009DC94                            	move.w	#((dest)&$3FFF)|((type&1)<<15)|$4000,(owsf_VDP)
0009DC94                            	move.w	#$80|(((dest)&$C000)>>14)|((type&2)<<3),(owsf_VDP)
0009DC94                                endm
0009DC94                            
0009DC94                            ; values for the type argument
0009DC94 =00000000                  VRAM =	$0
0009DC94 =00000001                  CRAM =	$1
0009DC94 =00000002                  VSRAM =	$2
0009DC94                            
0009DC94                            ; ===========================================================================
0009DC94 4EF9 0000 0000             Owari_ints:	jmp	OwariVBlank
0009DC9A 4EF9 0000 0000             Owari_ints2:	jmp	OwariVBlank2
0009DCA0                            ; ===========================================================================
0009DCA0                            Owarisoft:
0009DCA0 4EB8 1FE6                  		jsr	Pal_FadeFrom		; fadeout palette
0009DCA4 4EB8 11C0                  		jsr	ClearScreen		; clear screen data
0009DCA8                            
0009DCA8 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP
0009DCAE 3ABC 8004                  		move.w	#$8004,(owsf_VDP)	; $8004 - Disable HInt, HV Counter
0009DCB2 3ABC 8230                  		move.w	#$8230,(owsf_VDP)	; $8230 - Nametable A at $C000
0009DCB6 3ABC 8407                  		move.w	#$8407,(owsf_VDP)	; $8407 - Nametable B at $E000
0009DCBA 3ABC 9001                  		move.w	#$9001,(owsf_VDP)	; $9001 - 64x32 cell nametable area
0009DCBE 3ABC 9200                  		move.w	#$9200,(owsf_VDP)	; $9200 - Window V position at default
0009DCC2 3ABC 8B03                  		move.w	#$8B03,(owsf_VDP)	; $8B02 - Vscroll full, HScroll 8px
0009DCC6 3ABC 8700                  		move.w	#$8700,(owsf_VDP)	; $8700 - BG color is Pal 0 Color 0
0009DCCA                            
0009DCCA                            	; load FG mappings
0009DCCA 43F9 00FF 0000             		lea	$FF0000,a1
0009DCD0 41F9 0000 0000             		lea	Owari_mapFG,a0
0009DCD6 303C 0001                  		move.w	#1,d0
0009DCDA 4EB8 1724                  		jsr	EniDec
0009DCDE 43F9 00FF 0000             		lea	$FF0000,a1
0009DCE4 203C 4604 0003             		move.l	#$46040003,d0
0009DCEA 7222                       		moveq	#35-1,d1
0009DCEC 7404                       		moveq	#5-1,d2
0009DCEE 4EB8 136A                  		jsr	ShowVDPGraphics
0009DCF2                            
0009DCF2                            	; load BG mappings
0009DCF2 43F9 00FF 0000             		lea	$FF0000,a1
0009DCF8 41F9 0000 0000             		lea	Owari_mapBG,a0
0009DCFE 303C 005B                  		move.w	#$5B,d0
0009DD02 4EB8 1724                  		jsr	EniDec
0009DD06 43F9 00FF 0000             		lea	$FF0000,a1
0009DD0C 203C 659A 0003             		move.l	#$659A0003,d0
0009DD12 720F                       		moveq	#16-1,d1
0009DD14 7407                       		moveq	#8-1,d2
0009DD16 4EB8 136A                  		jsr	ShowVDPGraphics
0009DD1A                            
0009DD1A                            	; decompress art
0009DD1A 41F9 0000 0000             		lea	Owari_tiles,a0
0009DD20 43F9 00FF 0200             		lea	$FF0200,a1
0009DD26 4EB8 18A2                  		jsr	KosDec
0009DD2A                            
0009DD2A                            	; load tiles, HScroll and initial palette
0009DD2A 2ABC 940A 9370 2ABC 9681+  	owsf_dma68kToVDP $FF0200, $20, $14E0, VRAM
0009DD42 2ABC 9400 9380 2ABC 0000+  	owsf_dma68kToVDP Owari_HScroll,$FD5C,$100,VRAM
0009DD5A 2ABC 9400 9340 2ABC 0000+  	owsf_dma68kToVDP Owari_Blank, 0, $80, CRAM
0009DD72                            
0009DD72                            	; clear url palette
0009DD72                            
0009DD72 7094                       		moveq 	#$FFFFFF94,d0 ; play music 94
0009DD74 4EB8 12C6                  		jsr	PlaySound			; play music
0009DD78                            
0009DD78 41F8 FFC4 43FA FF16 20D9+  	loadJumps Owari_ints				; load the HBI and VBI jumps
0009DD86 7E00                       		moveq	#0,owsf_PalOff			; clear palette offset
0009DD88 7801                       		moveq	#owsf_FadeDef,owsf_Fades	; set the fades count
0009DD8A 4DF9 0000 0000             		lea	Owari_txPalette,owsf_txPal
0009DD90                            
0009DD90                            ; ===========================================================================
0009DD90 4E72 2300                  .mainloop	STOP	#$2300				; stop CPU
0009DD94 1038 F604                  		move.b	$FFFFF604.w,d0			; get player 1's held buttons
0009DD98 8038 F606                  		or.b	$FFFFF606.w,d0			; get player 2's held buttons
0009DD9C 6AF2                       		bpl.s	.mainloop			; if start is not pressed, branch
0009DD9E                            
0009DD9E 6100 0000                  		bsr	OwariOutFade
0009DDA2 7E00                       		moveq	#0,owsf_PalOff			; clear palette offset
0009DDA4                            
0009DDA4 41F8 FFC4 43FA FEF0 20D9+  	loadJumps Owari_ints2				; load the HBI and VBI jumps
0009DDB2 51F8 F604                  		sf	$FFFFF604.w			; force start button press
0009DDB6 4DF9 0000 0000             		lea	Owari_txPalette_end,owsf_txPal
0009DDBC                            
0009DDBC 4E72 2300                  .mainloop2	STOP	#$2300				; stop CPU
0009DDC0 4A38 F604                  		tst.b	$FFFFF604.w			; get player 1's held buttons
0009DDC4 6AF6                       		bpl.s	.mainloop2			; if start is not pressed, branch
0009DDC6                            
0009DDC6 41F8 FFC4 43F8 00F4 20D9+  	loadJumps IntMain				; load VBlank and HBlank interrupts
0009DDD4 4E75                       		rts
0009DDD6                            
0009DDD6                            ; ===========================================================================
0009DDD6                            OwariOutFade:
0009DDD6 43F9 00FF 0000             		lea	$FF0000,a1		; get fadeout pal
0009DDDC 41F9 0000 0000             		lea	Owari_Palette,a0	; get palette
0009DDE2 D0C7                       		add.w	owsf_PalOff,a0		;
0009DDE4 D0C7                       		add.w	owsf_PalOff,a0		; add palette offset twice
0009DDE6 7015                       		moveq	#($2D/2)-1,d0		; get repeat times
0009DDE8                            
0009DDE8 22D8                       .loadPal	move.l	(a0)+,(a1)+		; load 2 palettes
0009DDEA 51C8 FFFC                  		dbf	d0,.loadPal		; loop
0009DDEE                            
0009DDEE 3029 FFFE                  		move.w	-2(a1),d0		; get last color
0009DDF2 1200                       		move.b	d0,d1			;
0009DDF4 1400                       		move.b	d0,d2			; copy it over
0009DDF6                            
0009DDF6 0240 0F00                  		and.w	#$F00,d0		; get bleu
0009DDFA 0241 00F0                  		and.w	#$F0,d1			; get green
0009DDFE 0242 000F                  		and.w	#$F,d2			; get red
0009DE02 7607                       		moveq	#8-1,d3			; 8 different shades
0009DE04                            
0009DE04                            ; d0 = blue, d1 = green, d2 = red
0009DE04 4A40                       .loadfade	tst.w	d0			;
0009DE06 6700                       		beq.s	.notBleu		; bleu is 0, dont decrement
0009DE08 0440 0200                  		sub.w	#$200,d0		; decrement to next shade
0009DE0C                            
0009DE0C 4A01                       .notBleu	tst.b	d1			;
0009DE0E 6700                       		beq.s	.notGreen		; green is 0, dont decrement
0009DE10 0401 0020                  		sub.b	#$20,d1			; decrement to next shade
0009DE14                            
0009DE14 4A02                       .notGreen	tst.b	d2			;
0009DE16 6700                       		beq.s	.notRed			; red is 0, dont decrement
0009DE18 5502                       		subq.b	#2,d2			; decrement to next shade
0009DE1A                            
0009DE1A 3800                       .notRed		move.w	d0,d4			; get bleu to d4
0009DE1C D841                       		add.w	d1,d4			; add green to d4
0009DE1E D842                       		add.w	d2,d4			; add red to d4
0009DE20                            
0009DE20 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009DE22 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009DE24 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009DE26 51CB FFDC                  		dbf	d3,.loadfade		; load next fade
0009DE2A                            
0009DE2A 700E                       		moveq	#(10*3/2)-1,d0		; repeat times
0009DE2C 7200                       		moveq	#0,d1			; black
0009DE2E                            
0009DE2E 22C1                       .loadBlack	move.l	d1,(a1)+		; transfer color
0009DE30 51C8 FFFC                  		dbf	d0,.loadBlack		; loopdeloop
0009DE34 4E75                       		rts
0009DE36                            
0009DE36                            ; ===========================================================================
0009DE36                            OwariVBlank2:
0009DE36 48E7 0F02                  		movem.l	owsf_Fades-owsf_PalOff/owsf_txPal,-(sp)	; store vars
0009DE3A 4EB9 0008 A220             		jsr	sub_71B4C			; sound driver code
0009DE40 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP	; get vdp port
0009DE46 4CDF 40F0                  		movem.l	(sp)+,owsf_Fades-owsf_PalOff/owsf_txPal	; pop variables
0009DE4A                            
0009DE4A 5306                       		subq.b	#1,owsf_Timer			; sub 1 from timer
0009DE4C 6A00                       		bpl.s	.end2				; if positive, skip
0009DE4E 7C01                       		moveq	#owsf_TimerDef,owsf_Timer	; set timer
0009DE50 5647                       		add.w	#3,owsf_PalOff			; add 3 to advance to next row
0009DE52                            
0009DE52 0C47 0000                  		cmp.w	#Owari_po_3,owsf_PalOff		; is the limit reached,
0009DE56 5EF8 F604                  		sgt	$FFFFF604.w			; force start button press
0009DE5A                            
0009DE5A 2ABC C062 0000             		move.l	#$C0620000,(owsf_VDP)		; set CRAM write
0009DE60 3B66 FFFC                  		move.w	-(owsf_txPal),-4(owsf_VDP)	; write next palette
0009DE64                            
0009DE64 303C 9500                  		move.w	#$9500|((($FF0000)>>1)&$FF),d0; get DMA offset
0009DE68 D007                       		add.b	owsf_PalOff,d0			; add low byte of palette offset
0009DE6A 3A80                       		move.w	d0,(owsf_VDP)			; move to VDP
0009DE6C                            
0009DE6C 303C 9680                  		move.w	#$9600|(((($FF0000)>>1)&$FF00)>>8),d0
0009DE70 3207                       		move.w	owsf_PalOff,d1			; get palette offset
0009DE72 E049                       		lsr.w	#8,d1				; get high byte
0009DE74 D001                       		add.b	d1,d0				; add to VDP command
0009DE76 3A80                       		move.w	d0,(owsf_VDP)			; move to vDP
0009DE78                            
0009DE78 3ABC 977F                  		move.w	#$9700|((((($FF0000)>>1)&$FF0000)>>16)&$7F),(owsf_VDP); set DMA source to RAM
0009DE7C 203C 9400 930F             		move.l	#(($9400|((((15*2)>>1)&$FF00)>>8))<<16)|($9300|(((15*2)>>1)&$FF)),d0; set DMA lenght
0009DE82 2A80                       		move.l	d0,(owsf_VDP)		; line 0
0009DE84 2ABC C002 0080             		move.l	#$C0020080,(owsf_VDP)	; DMA!
0009DE8A 2A80                       		move.l	d0,(owsf_VDP)		; line 1
0009DE8C 2ABC C022 0080             		move.l	#$C0220080,(owsf_VDP)	; DMA!
0009DE92 2A80                       		move.l	d0,(owsf_VDP)		; line 2
0009DE94 2ABC C042 0080             		move.l	#$C0420080,(owsf_VDP)	; DMA!
0009DE9A 4E73                       .end2		rte
0009DE9C                            ; ===========================================================================
0009DE9C                            OwariVBlank:
0009DE9C 48E7 0F02                  		movem.l	owsf_Fades-owsf_PalOff/owsf_txPal,-(sp)	; store vars
0009DEA0 4EB8 10E2                  		jsr	ReadJoypads			; get button presses
0009DEA4 4EB9 0008 A220             		jsr	sub_71B4C			; sound driver code
0009DEAA 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP	; get vdp port
0009DEB0 4CDF 40F0                  		movem.l	(sp)+,owsf_Fades-owsf_PalOff/owsf_txPal	; pop variables
0009DEB4                            
0009DEB4 0C47 0000                  		cmp.w	#Owari_po_0,owsf_PalOff		; is the limit reached
0009DEB8 6C00 0000                  		bge	.st				; if not, skip
0009DEBC 51F8 F606                  		sf	$FFFFF606.w			; force start button press
0009DEC0 51F8 F604                  		sf	$FFFFF604.w			; force start button press
0009DEC4                            
0009DEC4 5306                       .st		subq.b	#1,owsf_Timer			; sub 1 from timer
0009DEC6 6A00                       		bpl.s	.end				; if positive, skip
0009DEC8 7C01                       		moveq	#owsf_TimerDef,owsf_Timer	; set timer
0009DECA 5647                       		add.w	#3,owsf_PalOff			; add 3 to advance to next row
0009DECC                            
0009DECC 0C47 0000                  		cmp.w	#Owari_po_2,owsf_PalOff		; is the limit reached
0009DED0 6F00 0000                  		ble	.skp				; if not, skip
0009DED4 3E3C 0000                  		move.w	#Owari_po_1,owsf_PalOff		; reset to start of the fade
0009DED8                            
0009DED8 5304                       		subq.b	#1,owsf_Fades			; sub 1 from the fade times counter
0009DEDA 6A00                       		bpl.s	.skp				; if negative, branch
0009DEDC 50F8 F606                  		st	$FFFFF606.w			; force start button press
0009DEE0                            
0009DEE0 BDFC 0000 0000             		cmpa.l	#Owari_txPalette_end-2,owsf_txPal; is text fadein done?
0009DEE6 6C00                       		bge.s	.noin				; if is, branch
0009DEE8 2ABC C062 0000             		move.l	#$C0620000,(owsf_VDP)		; set CRAM write
0009DEEE 3B5E FFFC                  		move.w	(owsf_txPal)+,-4(owsf_VDP)	; write next palette
0009DEF2                            
0009DEF2 303C 0000                  .noin		move.w	#$9500|(((Owari_Palette)>>1)&$FF),d0; get DMA offset
0009DEF6 D007                       		add.b	owsf_PalOff,d0			; add low byte of palette offset
0009DEF8 3A80                       		move.w	d0,(owsf_VDP)			; move to VDP
0009DEFA                            
0009DEFA 303C 0000                  		move.w	#$9600|((((Owari_Palette)>>1)&$FF00)>>8),d0
0009DEFE 3207                       		move.w	owsf_PalOff,d1			; get palette offset
0009DF00 E049                       		lsr.w	#8,d1				; get high byte
0009DF02 D001                       		add.b	d1,d0				; add to VDP command
0009DF04 3A80                       		move.w	d0,(owsf_VDP)			; move to vDP
0009DF06                            
0009DF06 3ABC 0000                  		move.w	#$9700|(((((Owari_Palette)>>1)&$FF0000)>>16)&$7F),(owsf_VDP); set DMA source to RAM
0009DF0A 203C 9400 930F             		move.l	#(($9400|((((15*2)>>1)&$FF00)>>8))<<16)|($9300|(((15*2)>>1)&$FF)),d0; set DMA lenght
0009DF10 2A80                       		move.l	d0,(owsf_VDP)		; line 0
0009DF12 2ABC C002 0080             		move.l	#$C0020080,(owsf_VDP)	; DMA!
0009DF18 2A80                       		move.l	d0,(owsf_VDP)		; line 1
0009DF1A 2ABC C022 0080             		move.l	#$C0220080,(owsf_VDP)	; DMA!
0009DF20 2A80                       		move.l	d0,(owsf_VDP)		; line 2
0009DF22 2ABC C042 0080             		move.l	#$C0420080,(owsf_VDP)	; DMA!
0009DF28                            
0009DF28 4E73                       .end		rte
0009DF2A                            ; ===========================================================================
0009DF2A                            Owari_tiles:	incbin "#Owarisoft/art.kos"		; Kosinski compressed tiles
0009E672                            		even
0009E672                            Owari_mapFG:	incbin "#Owarisoft/fgmap.eni"		; Enigma compressed foreground mappings
0009E6C2                            		even
0009E6C2                            Owari_mapBG:	incbin "#Owarisoft/bgmap.eni"		; Enigma compressed background mappings
0009E6F4                            		even
0009E6F4                            ; ===========================================================================
0009E6F4                            
0009E6F4 FFAC FFAC FFAC FFAC FFAC+  Owari_HScroll:	dcb.l 8,$FFACFFAC
0009E714 0000 0000 0000 0000 0000+  		dcb.l 6,0
0009E72C                            ; ===========================================================================
0009E72C 0000 0000 0000 0000 0000+  Owari_Blank:	dcb.w $80/2,0
0009E7AC                            
0009E7AC                            ; ===========================================================================
0009E7AC =0009E77C                  Owari_txPalette: equ *-$30
0009E7AC 0222 0222 0444 0444 0666+  		dc.w $0222, $0222, $0444, $0444, $0666, $0666, $0888
0009E7BA 0888 0AAA 0AAA 0CCC 0CCC+  		dc.w $0888, $0AAA, $0AAA, $0CCC, $0CCC, $0EEE, $0EEE
0009E7C8                            Owari_txPalette_end:
0009E7C8                            ; ===========================================================================
0009E7C8 =00000038                  Owari_po_3	equ $70/2
0009E7C8                            
0009E7C8                            Owari_PadStart
0009E7C8                            	align $200000
00200000                            Owari_Palette:
00200000                            	rept (16*2*3)
00200000                            		dc.w 0		; black before fade to white
00200000 0000 0000 0000 0000 0000+  	endr
002000C0                            
002000C0 0444 0222 0000             	dc.w $0444, $0222, $0000
002000C6 0666 0444 0222             	dc.w $0666, $0444, $0222
002000CC 0888 0666 0444             	dc.w $0888, $0666, $0444
002000D2 0AAA 0888 0444             	dc.w $0AAA, $0888, $0444
002000D8 0CCC 0888 0666             	dc.w $0CCC, $0888, $0666
002000DE 0EEE 0AAA 0666             	dc.w $0EEE, $0AAA, $0666		; fade from black
002000E4                            
002000E4 =00000072                  Owari_po_0	equ (*-Owari_Palette)/2
002000E4                            	rept 4
002000E4                            		rept 15/3
002000E4                            			dc.w $EEE, $AAA, $666	; white frame
002000E4                            		endr
002000E4 0EEE 0AAA 0666 0EEE 0AAA+  	endr
0020015C                            
0020015C 0CCC 0AAA 0888                 	dc.w $0CCC, $0AAA, $0888
00200162 0AAC 088A 0668                 	dc.w $0AAC, $088A, $0668
00200168 088C 066A 0448                 	dc.w $088C, $066A, $0448
0020016E 066C 044A 0228                 	dc.w $066C, $044A, $0228
00200174 044C 022A 0008                 	dc.w $044C, $022A, $0008
0020017A 022C 000A 0008                 	dc.w $022C, $000A, $0008		; fade to red
00200180                            
00200180 =000000C0                  Owari_po_1	equ (*-Owari_Palette)/2
00200180                                	incbin	"#Owarisoft/rainbow.bin"	; rainbow effect
002003D8                            
002003D8 =000001EC                  Owari_po_2	equ (*-Owari_Palette)/2
002003D8                                	incbin	"#Owarisoft/rainbow.bin"	; more rainbow effect for reset counter
00200630                            
00200630 =00161838                  Owari_pad	equ Owari_Palette-Owari_PadStart
00200630                            	inform 0,"OwariSoft Splash: Padded $\$Owari_pad bytes"
00200630                            ; ===========================================================================
00200630                            ; ===========================================================================
00200630                            	inform 0,""
00200630                            
00200630                            EndOfRom:
